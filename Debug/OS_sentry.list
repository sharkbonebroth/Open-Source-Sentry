
OS_sentry.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c40c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000024c  0800c5bc  0800c5bc  0001c5bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c808  0800c808  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  0800c808  0800c808  0001c808  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c810  0800c810  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c810  0800c810  0001c810  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c814  0800c814  0001c814  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  0800c818  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009ea0  20000080  0800c894  00020080  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20009f20  0800c894  00029f20  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00032699  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006061  00000000  00000000  00052745  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ac8  00000000  00000000  000587a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001820  00000000  00000000  0005a270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a0d5  00000000  00000000  0005ba90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000234c8  00000000  00000000  00085b65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e7362  00000000  00000000  000a902d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0019038f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000078c0  00000000  00000000  001903e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000cc  00000000  00000000  00197ca4  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001b9  00000000  00000000  00197d70  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000080 	.word	0x20000080
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800c5a4 	.word	0x0800c5a4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000084 	.word	0x20000084
 80001ec:	0800c5a4 	.word	0x0800c5a4

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_d2iz>:
 8000b3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b44:	d215      	bcs.n	8000b72 <__aeabi_d2iz+0x36>
 8000b46:	d511      	bpl.n	8000b6c <__aeabi_d2iz+0x30>
 8000b48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b50:	d912      	bls.n	8000b78 <__aeabi_d2iz+0x3c>
 8000b52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b5e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b62:	fa23 f002 	lsr.w	r0, r3, r2
 8000b66:	bf18      	it	ne
 8000b68:	4240      	negne	r0, r0
 8000b6a:	4770      	bx	lr
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b76:	d105      	bne.n	8000b84 <__aeabi_d2iz+0x48>
 8000b78:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b7c:	bf08      	it	eq
 8000b7e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b82:	4770      	bx	lr
 8000b84:	f04f 0000 	mov.w	r0, #0
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop

08000b8c <__aeabi_d2f>:
 8000b8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b90:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b94:	bf24      	itt	cs
 8000b96:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b9a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b9e:	d90d      	bls.n	8000bbc <__aeabi_d2f+0x30>
 8000ba0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ba4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ba8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bac:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bb0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bb4:	bf08      	it	eq
 8000bb6:	f020 0001 	biceq.w	r0, r0, #1
 8000bba:	4770      	bx	lr
 8000bbc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bc0:	d121      	bne.n	8000c06 <__aeabi_d2f+0x7a>
 8000bc2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bc6:	bfbc      	itt	lt
 8000bc8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bcc:	4770      	bxlt	lr
 8000bce:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bd2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bd6:	f1c2 0218 	rsb	r2, r2, #24
 8000bda:	f1c2 0c20 	rsb	ip, r2, #32
 8000bde:	fa10 f30c 	lsls.w	r3, r0, ip
 8000be2:	fa20 f002 	lsr.w	r0, r0, r2
 8000be6:	bf18      	it	ne
 8000be8:	f040 0001 	orrne.w	r0, r0, #1
 8000bec:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bf4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bf8:	ea40 000c 	orr.w	r0, r0, ip
 8000bfc:	fa23 f302 	lsr.w	r3, r3, r2
 8000c00:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c04:	e7cc      	b.n	8000ba0 <__aeabi_d2f+0x14>
 8000c06:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c0a:	d107      	bne.n	8000c1c <__aeabi_d2f+0x90>
 8000c0c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c10:	bf1e      	ittt	ne
 8000c12:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c16:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c1a:	4770      	bxne	lr
 8000c1c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c20:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c24:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop

08000c2c <__aeabi_uldivmod>:
 8000c2c:	b953      	cbnz	r3, 8000c44 <__aeabi_uldivmod+0x18>
 8000c2e:	b94a      	cbnz	r2, 8000c44 <__aeabi_uldivmod+0x18>
 8000c30:	2900      	cmp	r1, #0
 8000c32:	bf08      	it	eq
 8000c34:	2800      	cmpeq	r0, #0
 8000c36:	bf1c      	itt	ne
 8000c38:	f04f 31ff 	movne.w	r1, #4294967295
 8000c3c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c40:	f000 b96e 	b.w	8000f20 <__aeabi_idiv0>
 8000c44:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c48:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c4c:	f000 f806 	bl	8000c5c <__udivmoddi4>
 8000c50:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c58:	b004      	add	sp, #16
 8000c5a:	4770      	bx	lr

08000c5c <__udivmoddi4>:
 8000c5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c60:	9d08      	ldr	r5, [sp, #32]
 8000c62:	4604      	mov	r4, r0
 8000c64:	468c      	mov	ip, r1
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	f040 8083 	bne.w	8000d72 <__udivmoddi4+0x116>
 8000c6c:	428a      	cmp	r2, r1
 8000c6e:	4617      	mov	r7, r2
 8000c70:	d947      	bls.n	8000d02 <__udivmoddi4+0xa6>
 8000c72:	fab2 f282 	clz	r2, r2
 8000c76:	b142      	cbz	r2, 8000c8a <__udivmoddi4+0x2e>
 8000c78:	f1c2 0020 	rsb	r0, r2, #32
 8000c7c:	fa24 f000 	lsr.w	r0, r4, r0
 8000c80:	4091      	lsls	r1, r2
 8000c82:	4097      	lsls	r7, r2
 8000c84:	ea40 0c01 	orr.w	ip, r0, r1
 8000c88:	4094      	lsls	r4, r2
 8000c8a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c8e:	0c23      	lsrs	r3, r4, #16
 8000c90:	fbbc f6f8 	udiv	r6, ip, r8
 8000c94:	fa1f fe87 	uxth.w	lr, r7
 8000c98:	fb08 c116 	mls	r1, r8, r6, ip
 8000c9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ca0:	fb06 f10e 	mul.w	r1, r6, lr
 8000ca4:	4299      	cmp	r1, r3
 8000ca6:	d909      	bls.n	8000cbc <__udivmoddi4+0x60>
 8000ca8:	18fb      	adds	r3, r7, r3
 8000caa:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cae:	f080 8119 	bcs.w	8000ee4 <__udivmoddi4+0x288>
 8000cb2:	4299      	cmp	r1, r3
 8000cb4:	f240 8116 	bls.w	8000ee4 <__udivmoddi4+0x288>
 8000cb8:	3e02      	subs	r6, #2
 8000cba:	443b      	add	r3, r7
 8000cbc:	1a5b      	subs	r3, r3, r1
 8000cbe:	b2a4      	uxth	r4, r4
 8000cc0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cc4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cc8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ccc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cd0:	45a6      	cmp	lr, r4
 8000cd2:	d909      	bls.n	8000ce8 <__udivmoddi4+0x8c>
 8000cd4:	193c      	adds	r4, r7, r4
 8000cd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cda:	f080 8105 	bcs.w	8000ee8 <__udivmoddi4+0x28c>
 8000cde:	45a6      	cmp	lr, r4
 8000ce0:	f240 8102 	bls.w	8000ee8 <__udivmoddi4+0x28c>
 8000ce4:	3802      	subs	r0, #2
 8000ce6:	443c      	add	r4, r7
 8000ce8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cec:	eba4 040e 	sub.w	r4, r4, lr
 8000cf0:	2600      	movs	r6, #0
 8000cf2:	b11d      	cbz	r5, 8000cfc <__udivmoddi4+0xa0>
 8000cf4:	40d4      	lsrs	r4, r2
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cfc:	4631      	mov	r1, r6
 8000cfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d02:	b902      	cbnz	r2, 8000d06 <__udivmoddi4+0xaa>
 8000d04:	deff      	udf	#255	; 0xff
 8000d06:	fab2 f282 	clz	r2, r2
 8000d0a:	2a00      	cmp	r2, #0
 8000d0c:	d150      	bne.n	8000db0 <__udivmoddi4+0x154>
 8000d0e:	1bcb      	subs	r3, r1, r7
 8000d10:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d14:	fa1f f887 	uxth.w	r8, r7
 8000d18:	2601      	movs	r6, #1
 8000d1a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d1e:	0c21      	lsrs	r1, r4, #16
 8000d20:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d28:	fb08 f30c 	mul.w	r3, r8, ip
 8000d2c:	428b      	cmp	r3, r1
 8000d2e:	d907      	bls.n	8000d40 <__udivmoddi4+0xe4>
 8000d30:	1879      	adds	r1, r7, r1
 8000d32:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d36:	d202      	bcs.n	8000d3e <__udivmoddi4+0xe2>
 8000d38:	428b      	cmp	r3, r1
 8000d3a:	f200 80e9 	bhi.w	8000f10 <__udivmoddi4+0x2b4>
 8000d3e:	4684      	mov	ip, r0
 8000d40:	1ac9      	subs	r1, r1, r3
 8000d42:	b2a3      	uxth	r3, r4
 8000d44:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d48:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d4c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d50:	fb08 f800 	mul.w	r8, r8, r0
 8000d54:	45a0      	cmp	r8, r4
 8000d56:	d907      	bls.n	8000d68 <__udivmoddi4+0x10c>
 8000d58:	193c      	adds	r4, r7, r4
 8000d5a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d5e:	d202      	bcs.n	8000d66 <__udivmoddi4+0x10a>
 8000d60:	45a0      	cmp	r8, r4
 8000d62:	f200 80d9 	bhi.w	8000f18 <__udivmoddi4+0x2bc>
 8000d66:	4618      	mov	r0, r3
 8000d68:	eba4 0408 	sub.w	r4, r4, r8
 8000d6c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d70:	e7bf      	b.n	8000cf2 <__udivmoddi4+0x96>
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d909      	bls.n	8000d8a <__udivmoddi4+0x12e>
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	f000 80b1 	beq.w	8000ede <__udivmoddi4+0x282>
 8000d7c:	2600      	movs	r6, #0
 8000d7e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d82:	4630      	mov	r0, r6
 8000d84:	4631      	mov	r1, r6
 8000d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8a:	fab3 f683 	clz	r6, r3
 8000d8e:	2e00      	cmp	r6, #0
 8000d90:	d14a      	bne.n	8000e28 <__udivmoddi4+0x1cc>
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d302      	bcc.n	8000d9c <__udivmoddi4+0x140>
 8000d96:	4282      	cmp	r2, r0
 8000d98:	f200 80b8 	bhi.w	8000f0c <__udivmoddi4+0x2b0>
 8000d9c:	1a84      	subs	r4, r0, r2
 8000d9e:	eb61 0103 	sbc.w	r1, r1, r3
 8000da2:	2001      	movs	r0, #1
 8000da4:	468c      	mov	ip, r1
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	d0a8      	beq.n	8000cfc <__udivmoddi4+0xa0>
 8000daa:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dae:	e7a5      	b.n	8000cfc <__udivmoddi4+0xa0>
 8000db0:	f1c2 0320 	rsb	r3, r2, #32
 8000db4:	fa20 f603 	lsr.w	r6, r0, r3
 8000db8:	4097      	lsls	r7, r2
 8000dba:	fa01 f002 	lsl.w	r0, r1, r2
 8000dbe:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dc2:	40d9      	lsrs	r1, r3
 8000dc4:	4330      	orrs	r0, r6
 8000dc6:	0c03      	lsrs	r3, r0, #16
 8000dc8:	fbb1 f6fe 	udiv	r6, r1, lr
 8000dcc:	fa1f f887 	uxth.w	r8, r7
 8000dd0:	fb0e 1116 	mls	r1, lr, r6, r1
 8000dd4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dd8:	fb06 f108 	mul.w	r1, r6, r8
 8000ddc:	4299      	cmp	r1, r3
 8000dde:	fa04 f402 	lsl.w	r4, r4, r2
 8000de2:	d909      	bls.n	8000df8 <__udivmoddi4+0x19c>
 8000de4:	18fb      	adds	r3, r7, r3
 8000de6:	f106 3cff 	add.w	ip, r6, #4294967295
 8000dea:	f080 808d 	bcs.w	8000f08 <__udivmoddi4+0x2ac>
 8000dee:	4299      	cmp	r1, r3
 8000df0:	f240 808a 	bls.w	8000f08 <__udivmoddi4+0x2ac>
 8000df4:	3e02      	subs	r6, #2
 8000df6:	443b      	add	r3, r7
 8000df8:	1a5b      	subs	r3, r3, r1
 8000dfa:	b281      	uxth	r1, r0
 8000dfc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e00:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e04:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e08:	fb00 f308 	mul.w	r3, r0, r8
 8000e0c:	428b      	cmp	r3, r1
 8000e0e:	d907      	bls.n	8000e20 <__udivmoddi4+0x1c4>
 8000e10:	1879      	adds	r1, r7, r1
 8000e12:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e16:	d273      	bcs.n	8000f00 <__udivmoddi4+0x2a4>
 8000e18:	428b      	cmp	r3, r1
 8000e1a:	d971      	bls.n	8000f00 <__udivmoddi4+0x2a4>
 8000e1c:	3802      	subs	r0, #2
 8000e1e:	4439      	add	r1, r7
 8000e20:	1acb      	subs	r3, r1, r3
 8000e22:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e26:	e778      	b.n	8000d1a <__udivmoddi4+0xbe>
 8000e28:	f1c6 0c20 	rsb	ip, r6, #32
 8000e2c:	fa03 f406 	lsl.w	r4, r3, r6
 8000e30:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e34:	431c      	orrs	r4, r3
 8000e36:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e3a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e3e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e42:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e46:	431f      	orrs	r7, r3
 8000e48:	0c3b      	lsrs	r3, r7, #16
 8000e4a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e4e:	fa1f f884 	uxth.w	r8, r4
 8000e52:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e56:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e5a:	fb09 fa08 	mul.w	sl, r9, r8
 8000e5e:	458a      	cmp	sl, r1
 8000e60:	fa02 f206 	lsl.w	r2, r2, r6
 8000e64:	fa00 f306 	lsl.w	r3, r0, r6
 8000e68:	d908      	bls.n	8000e7c <__udivmoddi4+0x220>
 8000e6a:	1861      	adds	r1, r4, r1
 8000e6c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e70:	d248      	bcs.n	8000f04 <__udivmoddi4+0x2a8>
 8000e72:	458a      	cmp	sl, r1
 8000e74:	d946      	bls.n	8000f04 <__udivmoddi4+0x2a8>
 8000e76:	f1a9 0902 	sub.w	r9, r9, #2
 8000e7a:	4421      	add	r1, r4
 8000e7c:	eba1 010a 	sub.w	r1, r1, sl
 8000e80:	b2bf      	uxth	r7, r7
 8000e82:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e86:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e8a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e8e:	fb00 f808 	mul.w	r8, r0, r8
 8000e92:	45b8      	cmp	r8, r7
 8000e94:	d907      	bls.n	8000ea6 <__udivmoddi4+0x24a>
 8000e96:	19e7      	adds	r7, r4, r7
 8000e98:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e9c:	d22e      	bcs.n	8000efc <__udivmoddi4+0x2a0>
 8000e9e:	45b8      	cmp	r8, r7
 8000ea0:	d92c      	bls.n	8000efc <__udivmoddi4+0x2a0>
 8000ea2:	3802      	subs	r0, #2
 8000ea4:	4427      	add	r7, r4
 8000ea6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000eaa:	eba7 0708 	sub.w	r7, r7, r8
 8000eae:	fba0 8902 	umull	r8, r9, r0, r2
 8000eb2:	454f      	cmp	r7, r9
 8000eb4:	46c6      	mov	lr, r8
 8000eb6:	4649      	mov	r1, r9
 8000eb8:	d31a      	bcc.n	8000ef0 <__udivmoddi4+0x294>
 8000eba:	d017      	beq.n	8000eec <__udivmoddi4+0x290>
 8000ebc:	b15d      	cbz	r5, 8000ed6 <__udivmoddi4+0x27a>
 8000ebe:	ebb3 020e 	subs.w	r2, r3, lr
 8000ec2:	eb67 0701 	sbc.w	r7, r7, r1
 8000ec6:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000eca:	40f2      	lsrs	r2, r6
 8000ecc:	ea4c 0202 	orr.w	r2, ip, r2
 8000ed0:	40f7      	lsrs	r7, r6
 8000ed2:	e9c5 2700 	strd	r2, r7, [r5]
 8000ed6:	2600      	movs	r6, #0
 8000ed8:	4631      	mov	r1, r6
 8000eda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ede:	462e      	mov	r6, r5
 8000ee0:	4628      	mov	r0, r5
 8000ee2:	e70b      	b.n	8000cfc <__udivmoddi4+0xa0>
 8000ee4:	4606      	mov	r6, r0
 8000ee6:	e6e9      	b.n	8000cbc <__udivmoddi4+0x60>
 8000ee8:	4618      	mov	r0, r3
 8000eea:	e6fd      	b.n	8000ce8 <__udivmoddi4+0x8c>
 8000eec:	4543      	cmp	r3, r8
 8000eee:	d2e5      	bcs.n	8000ebc <__udivmoddi4+0x260>
 8000ef0:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ef4:	eb69 0104 	sbc.w	r1, r9, r4
 8000ef8:	3801      	subs	r0, #1
 8000efa:	e7df      	b.n	8000ebc <__udivmoddi4+0x260>
 8000efc:	4608      	mov	r0, r1
 8000efe:	e7d2      	b.n	8000ea6 <__udivmoddi4+0x24a>
 8000f00:	4660      	mov	r0, ip
 8000f02:	e78d      	b.n	8000e20 <__udivmoddi4+0x1c4>
 8000f04:	4681      	mov	r9, r0
 8000f06:	e7b9      	b.n	8000e7c <__udivmoddi4+0x220>
 8000f08:	4666      	mov	r6, ip
 8000f0a:	e775      	b.n	8000df8 <__udivmoddi4+0x19c>
 8000f0c:	4630      	mov	r0, r6
 8000f0e:	e74a      	b.n	8000da6 <__udivmoddi4+0x14a>
 8000f10:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f14:	4439      	add	r1, r7
 8000f16:	e713      	b.n	8000d40 <__udivmoddi4+0xe4>
 8000f18:	3802      	subs	r0, #2
 8000f1a:	443c      	add	r4, r7
 8000f1c:	e724      	b.n	8000d68 <__udivmoddi4+0x10c>
 8000f1e:	bf00      	nop

08000f20 <__aeabi_idiv0>:
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop

08000f24 <buzzer>:

#include "board_lib.h"
#include "bsp_buzzer.h"

void buzzer(uint16_t freq)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	80fb      	strh	r3, [r7, #6]
	if (freq == 0)
 8000f2e:	88fb      	ldrh	r3, [r7, #6]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d104      	bne.n	8000f3e <buzzer+0x1a>
	{
		htim12.Instance->CCR1 = 0;
 8000f34:	4b0b      	ldr	r3, [pc, #44]	; (8000f64 <buzzer+0x40>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	2200      	movs	r2, #0
 8000f3a:	635a      	str	r2, [r3, #52]	; 0x34
	else
	{
		__HAL_TIM_SET_PRESCALER(&htim12, (84 * 500/freq));
		htim12.Instance->CCR1 = 500;
	}
}
 8000f3c:	e00c      	b.n	8000f58 <buzzer+0x34>
		__HAL_TIM_SET_PRESCALER(&htim12, (84 * 500/freq));
 8000f3e:	88fb      	ldrh	r3, [r7, #6]
 8000f40:	f24a 4210 	movw	r2, #42000	; 0xa410
 8000f44:	fb92 f2f3 	sdiv	r2, r2, r3
 8000f48:	4b06      	ldr	r3, [pc, #24]	; (8000f64 <buzzer+0x40>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	629a      	str	r2, [r3, #40]	; 0x28
		htim12.Instance->CCR1 = 500;
 8000f4e:	4b05      	ldr	r3, [pc, #20]	; (8000f64 <buzzer+0x40>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000f56:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000f58:	bf00      	nop
 8000f5a:	370c      	adds	r7, #12
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr
 8000f64:	20009a68 	.word	0x20009a68

08000f68 <buzzer_init>:


void buzzer_init()
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
	  HAL_TIM_PWM_Start(&htim12,TIM_CHANNEL_1);
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	4804      	ldr	r0, [pc, #16]	; (8000f80 <buzzer_init+0x18>)
 8000f70:	f004 ffb4 	bl	8005edc <HAL_TIM_PWM_Start>
	  htim12.Instance->CCR1 = 0;
 8000f74:	4b02      	ldr	r3, [pc, #8]	; (8000f80 <buzzer_init+0x18>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	2200      	movs	r2, #0
 8000f7a:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000f7c:	bf00      	nop
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	20009a68 	.word	0x20009a68

08000f84 <HAL_CAN_RxFifo0MsgPendingCallback>:

/**
 * HAL internal callback function that calls abstracted ISR for ease of use.
 * Define can_ISR() elsewhere in code to define behaviour of CAN receive ISR.
 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
	can_ISR(hcan);
 8000f8c:	6878      	ldr	r0, [r7, #4]
 8000f8e:	f001 fa61 	bl	8002454 <can_ISR>
}
 8000f92:	bf00      	nop
 8000f94:	3708      	adds	r7, #8
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}

08000f9a <can_get_msg>:

HAL_StatusTypeDef can_get_msg(CAN_HandleTypeDef *hcan, CAN_RxHeaderTypeDef *rx_msg_header, uint8_t *rx_buffer)
{
 8000f9a:	b580      	push	{r7, lr}
 8000f9c:	b084      	sub	sp, #16
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	60f8      	str	r0, [r7, #12]
 8000fa2:	60b9      	str	r1, [r7, #8]
 8000fa4:	607a      	str	r2, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, rx_msg_header, rx_buffer);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	68ba      	ldr	r2, [r7, #8]
 8000faa:	2100      	movs	r1, #0
 8000fac:	68f8      	ldr	r0, [r7, #12]
 8000fae:	f003 f858 	bl	8004062 <HAL_CAN_GetRxMessage>
	return HAL_OK;
 8000fb2:	2300      	movs	r3, #0
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	3710      	adds	r7, #16
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}

08000fbc <can_start>:


/**
 * CAN1 and CAN2 are handled slightly differently.
 */
void can_start(CAN_HandleTypeDef *hcan) {
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b08c      	sub	sp, #48	; 0x30
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
    CAN_FilterTypeDef can_filter_st = {0};
 8000fc4:	f107 0308 	add.w	r3, r7, #8
 8000fc8:	2228      	movs	r2, #40	; 0x28
 8000fca:	2100      	movs	r1, #0
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f00a fa17 	bl	800b400 <memset>
    can_filter_st.FilterActivation = ENABLE;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	62bb      	str	r3, [r7, #40]	; 0x28
	can_filter_st.FilterMode = CAN_FILTERMODE_IDMASK;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	623b      	str	r3, [r7, #32]
	can_filter_st.FilterScale = CAN_FILTERSCALE_32BIT;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	627b      	str	r3, [r7, #36]	; 0x24
	can_filter_st.FilterIdHigh = 0x0000;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	60bb      	str	r3, [r7, #8]
	can_filter_st.FilterIdLow = 0x0000;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	60fb      	str	r3, [r7, #12]
	can_filter_st.FilterMaskIdHigh = 0x0000;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	613b      	str	r3, [r7, #16]
	can_filter_st.FilterMaskIdLow = 0x0000;
 8000fea:	2300      	movs	r3, #0
 8000fec:	617b      	str	r3, [r7, #20]
    can_filter_st.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	61bb      	str	r3, [r7, #24]
    // can_filter_st.FilterFIFOAssignment = CAN_RX_FIFO1; // Uncomment line if using RX1 queue as well.

	if (hcan->Instance == CAN1) {
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4a10      	ldr	r2, [pc, #64]	; (8001038 <can_start+0x7c>)
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	d102      	bne.n	8001002 <can_start+0x46>
	    can_filter_st.FilterBank = 0;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	61fb      	str	r3, [r7, #28]
 8001000:	e008      	b.n	8001014 <can_start+0x58>
	} else if (hcan->Instance == CAN2) {
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4a0d      	ldr	r2, [pc, #52]	; (800103c <can_start+0x80>)
 8001008:	4293      	cmp	r3, r2
 800100a:	d103      	bne.n	8001014 <can_start+0x58>
		can_filter_st.SlaveStartFilterBank = 14;
 800100c:	230e      	movs	r3, #14
 800100e:	62fb      	str	r3, [r7, #44]	; 0x2c
		can_filter_st.FilterBank = 14;
 8001010:	230e      	movs	r3, #14
 8001012:	61fb      	str	r3, [r7, #28]
	}

    HAL_CAN_ConfigFilter(hcan, &can_filter_st);
 8001014:	f107 0308 	add.w	r3, r7, #8
 8001018:	4619      	mov	r1, r3
 800101a:	6878      	ldr	r0, [r7, #4]
 800101c:	f002 fe22 	bl	8003c64 <HAL_CAN_ConfigFilter>
    HAL_CAN_Start(hcan);
 8001020:	6878      	ldr	r0, [r7, #4]
 8001022:	f002 feff 	bl	8003e24 <HAL_CAN_Start>
    HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001026:	2102      	movs	r1, #2
 8001028:	6878      	ldr	r0, [r7, #4]
 800102a:	f003 f92c 	bl	8004286 <HAL_CAN_ActivateNotification>
    // HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO1_MSG_PENDING); // Uncomment line if using RX1 queue as well.
}
 800102e:	bf00      	nop
 8001030:	3730      	adds	r7, #48	; 0x30
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	40006400 	.word	0x40006400
 800103c:	40006800 	.word	0x40006800

08001040 <dbus_remote_start>:
/**
 * This function starts the circular DMA for receiving on a UART port. It is specifically
 * written for the UART1 port for DBUS interface from the controller.
 */
HAL_StatusTypeDef dbus_remote_start(uint8_t *pData)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b086      	sub	sp, #24
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
	UART_HandleTypeDef *huart = &DBUS_UART;
 8001048:	4b33      	ldr	r3, [pc, #204]	; (8001118 <dbus_remote_start+0xd8>)
 800104a:	617b      	str	r3, [r7, #20]
	uint32_t *tmp;

	/* Check that a Rx process is not already ongoing */
	if (huart->RxState == HAL_UART_STATE_READY) {
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001052:	b2db      	uxtb	r3, r3
 8001054:	2b20      	cmp	r3, #32
 8001056:	d15a      	bne.n	800110e <dbus_remote_start+0xce>
		if ((pData == NULL) || (REMOTE_DATA_SIZE == 0U)) {
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d101      	bne.n	8001062 <dbus_remote_start+0x22>
			return HAL_ERROR;
 800105e:	2301      	movs	r3, #1
 8001060:	e056      	b.n	8001110 <dbus_remote_start+0xd0>
		}

		/* Process Locked */
		__HAL_LOCK(huart);
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001068:	2b01      	cmp	r3, #1
 800106a:	d101      	bne.n	8001070 <dbus_remote_start+0x30>
 800106c:	2302      	movs	r3, #2
 800106e:	e04f      	b.n	8001110 <dbus_remote_start+0xd0>
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	2201      	movs	r2, #1
 8001074:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

		huart->pRxBuffPtr = pData;
 8001078:	687a      	ldr	r2, [r7, #4]
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	629a      	str	r2, [r3, #40]	; 0x28
		huart->RxXferSize = REMOTE_DATA_SIZE;
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	2212      	movs	r2, #18
 8001082:	859a      	strh	r2, [r3, #44]	; 0x2c

		huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	2200      	movs	r2, #0
 8001088:	63da      	str	r2, [r3, #60]	; 0x3c
		huart->RxState = HAL_UART_STATE_BUSY_RX;
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	2222      	movs	r2, #34	; 0x22
 800108e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

		/* Set the UART DMA transfer complete callback */
		huart->hdmarx->XferCpltCallback = dbus_remote_ISR;
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001096:	4a21      	ldr	r2, [pc, #132]	; (800111c <dbus_remote_start+0xdc>)
 8001098:	63da      	str	r2, [r3, #60]	; 0x3c

		/* Set the DMA abort callback */
		huart->hdmarx->XferAbortCallback = NULL;
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800109e:	2200      	movs	r2, #0
 80010a0:	651a      	str	r2, [r3, #80]	; 0x50

		/* Enable the DMA stream */
		tmp = (uint32_t *)&pData;
 80010a2:	1d3b      	adds	r3, r7, #4
 80010a4:	613b      	str	r3, [r7, #16]
		HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, REMOTE_DATA_SIZE);
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	3304      	adds	r3, #4
 80010b0:	4619      	mov	r1, r3
 80010b2:	693b      	ldr	r3, [r7, #16]
 80010b4:	681a      	ldr	r2, [r3, #0]
 80010b6:	2312      	movs	r3, #18
 80010b8:	f003 fcf2 	bl	8004aa0 <HAL_DMA_Start_IT>

		/* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
		__HAL_UART_CLEAR_OREFLAG(huart);
 80010bc:	2300      	movs	r3, #0
 80010be:	60fb      	str	r3, [r7, #12]
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	60fb      	str	r3, [r7, #12]
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	60fb      	str	r3, [r7, #12]
 80010d0:	68fb      	ldr	r3, [r7, #12]

		/* Process Unlocked */
		__HAL_UNLOCK(huart);
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	2200      	movs	r2, #0
 80010d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

		/* Enable the UART Parity Error Interrupt */
		SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	68da      	ldr	r2, [r3, #12]
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80010e8:	60da      	str	r2, [r3, #12]

		/* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
		SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80010ea:	697b      	ldr	r3, [r7, #20]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	695a      	ldr	r2, [r3, #20]
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f042 0201 	orr.w	r2, r2, #1
 80010f8:	615a      	str	r2, [r3, #20]

		/* Enable the DMA transfer for the receiver request by setting the DMAR bit
	    in the UART CR3 register */
		SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	695a      	ldr	r2, [r3, #20]
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001108:	615a      	str	r2, [r3, #20]

		return HAL_OK;
 800110a:	2300      	movs	r3, #0
 800110c:	e000      	b.n	8001110 <dbus_remote_start+0xd0>
	} else {
		return HAL_BUSY;
 800110e:	2302      	movs	r3, #2
	}
}
 8001110:	4618      	mov	r0, r3
 8001112:	3718      	adds	r7, #24
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	20009c08 	.word	0x20009c08
 800111c:	080034f1 	.word	0x080034f1

08001120 <GPIO_ToggleBits>:
 *      Author: Kai Yang
 */

#include "bsp_led.h"

void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin){
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
 8001128:	460b      	mov	r3, r1
 800112a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  /* points to address of GPIOx register and does bitwise XOR with bit GPIO_Pin */
  GPIOx->ODR ^= GPIO_Pin;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	695a      	ldr	r2, [r3, #20]
 8001130:	887b      	ldrh	r3, [r7, #2]
 8001132:	405a      	eors	r2, r3
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	615a      	str	r2, [r3, #20]
}
 8001138:	bf00      	nop
 800113a:	370c      	adds	r7, #12
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr

08001144 <led_green_off>:

/* calls HAL library function to directly write pin.             */
/* LEDs are active low, so SET (1) == off, while RESET (0) == on */
/* Definitions for LED port and pins are given in main.h file    */
void led_green_off(void){
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_SET);
 8001148:	2201      	movs	r2, #1
 800114a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800114e:	4802      	ldr	r0, [pc, #8]	; (8001158 <led_green_off+0x14>)
 8001150:	f004 f936 	bl	80053c0 <HAL_GPIO_WritePin>
}
 8001154:	bf00      	nop
 8001156:	bd80      	pop	{r7, pc}
 8001158:	40021400 	.word	0x40021400

0800115c <led_on>:

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_SET);
}

void led_on(void){
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);
 8001160:	2200      	movs	r2, #0
 8001162:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001166:	4805      	ldr	r0, [pc, #20]	; (800117c <led_on+0x20>)
 8001168:	f004 f92a 	bl	80053c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, GPIO_PIN_RESET);
 800116c:	2200      	movs	r2, #0
 800116e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001172:	4803      	ldr	r0, [pc, #12]	; (8001180 <led_on+0x24>)
 8001174:	f004 f924 	bl	80053c0 <HAL_GPIO_WritePin>
}
 8001178:	bf00      	nop
 800117a:	bd80      	pop	{r7, pc}
 800117c:	40021000 	.word	0x40021000
 8001180:	40021400 	.word	0x40021400

08001184 <led_toggle>:
void led_toggle(void){
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
	GPIO_ToggleBits(GPIOE, GPIO_PIN_11);
 8001188:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800118c:	4804      	ldr	r0, [pc, #16]	; (80011a0 <led_toggle+0x1c>)
 800118e:	f7ff ffc7 	bl	8001120 <GPIO_ToggleBits>
	GPIO_ToggleBits(GPIOF, GPIO_PIN_14);
 8001192:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001196:	4803      	ldr	r0, [pc, #12]	; (80011a4 <led_toggle+0x20>)
 8001198:	f7ff ffc2 	bl	8001120 <GPIO_ToggleBits>
}
 800119c:	bf00      	nop
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	40021000 	.word	0x40021000
 80011a4:	40021400 	.word	0x40021400

080011a8 <HAL_UART_RxCpltCallback>:
{
	HAL_UART_Transmit(huart, tx_buffer, buffer_size, timeout);
	return HAL_OK;
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle) {
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
	usart_ISR(UartHandle);
 80011b0:	6878      	ldr	r0, [r7, #4]
 80011b2:	f001 fb5f 	bl	8002874 <usart_ISR>
}
 80011b6:	bf00      	nop
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
	...

080011c0 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 80011c4:	4b17      	ldr	r3, [pc, #92]	; (8001224 <MX_CAN1_Init+0x64>)
 80011c6:	4a18      	ldr	r2, [pc, #96]	; (8001228 <MX_CAN1_Init+0x68>)
 80011c8:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 80011ca:	4b16      	ldr	r3, [pc, #88]	; (8001224 <MX_CAN1_Init+0x64>)
 80011cc:	2203      	movs	r2, #3
 80011ce:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80011d0:	4b14      	ldr	r3, [pc, #80]	; (8001224 <MX_CAN1_Init+0x64>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80011d6:	4b13      	ldr	r3, [pc, #76]	; (8001224 <MX_CAN1_Init+0x64>)
 80011d8:	2200      	movs	r2, #0
 80011da:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_9TQ;
 80011dc:	4b11      	ldr	r3, [pc, #68]	; (8001224 <MX_CAN1_Init+0x64>)
 80011de:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80011e2:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 80011e4:	4b0f      	ldr	r3, [pc, #60]	; (8001224 <MX_CAN1_Init+0x64>)
 80011e6:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 80011ea:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80011ec:	4b0d      	ldr	r3, [pc, #52]	; (8001224 <MX_CAN1_Init+0x64>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80011f2:	4b0c      	ldr	r3, [pc, #48]	; (8001224 <MX_CAN1_Init+0x64>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80011f8:	4b0a      	ldr	r3, [pc, #40]	; (8001224 <MX_CAN1_Init+0x64>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80011fe:	4b09      	ldr	r3, [pc, #36]	; (8001224 <MX_CAN1_Init+0x64>)
 8001200:	2200      	movs	r2, #0
 8001202:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001204:	4b07      	ldr	r3, [pc, #28]	; (8001224 <MX_CAN1_Init+0x64>)
 8001206:	2200      	movs	r2, #0
 8001208:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800120a:	4b06      	ldr	r3, [pc, #24]	; (8001224 <MX_CAN1_Init+0x64>)
 800120c:	2200      	movs	r2, #0
 800120e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001210:	4804      	ldr	r0, [pc, #16]	; (8001224 <MX_CAN1_Init+0x64>)
 8001212:	f002 fc2b 	bl	8003a6c <HAL_CAN_Init>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 800121c:	f000 fb52 	bl	80018c4 <Error_Handler>
  }

}
 8001220:	bf00      	nop
 8001222:	bd80      	pop	{r7, pc}
 8001224:	20009874 	.word	0x20009874
 8001228:	40006400 	.word	0x40006400

0800122c <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0

  hcan2.Instance = CAN2;
 8001230:	4b17      	ldr	r3, [pc, #92]	; (8001290 <MX_CAN2_Init+0x64>)
 8001232:	4a18      	ldr	r2, [pc, #96]	; (8001294 <MX_CAN2_Init+0x68>)
 8001234:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 3;
 8001236:	4b16      	ldr	r3, [pc, #88]	; (8001290 <MX_CAN2_Init+0x64>)
 8001238:	2203      	movs	r2, #3
 800123a:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 800123c:	4b14      	ldr	r3, [pc, #80]	; (8001290 <MX_CAN2_Init+0x64>)
 800123e:	2200      	movs	r2, #0
 8001240:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001242:	4b13      	ldr	r3, [pc, #76]	; (8001290 <MX_CAN2_Init+0x64>)
 8001244:	2200      	movs	r2, #0
 8001246:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_9TQ;
 8001248:	4b11      	ldr	r3, [pc, #68]	; (8001290 <MX_CAN2_Init+0x64>)
 800124a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800124e:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_4TQ;
 8001250:	4b0f      	ldr	r3, [pc, #60]	; (8001290 <MX_CAN2_Init+0x64>)
 8001252:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8001256:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8001258:	4b0d      	ldr	r3, [pc, #52]	; (8001290 <MX_CAN2_Init+0x64>)
 800125a:	2200      	movs	r2, #0
 800125c:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 800125e:	4b0c      	ldr	r3, [pc, #48]	; (8001290 <MX_CAN2_Init+0x64>)
 8001260:	2200      	movs	r2, #0
 8001262:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8001264:	4b0a      	ldr	r3, [pc, #40]	; (8001290 <MX_CAN2_Init+0x64>)
 8001266:	2200      	movs	r2, #0
 8001268:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 800126a:	4b09      	ldr	r3, [pc, #36]	; (8001290 <MX_CAN2_Init+0x64>)
 800126c:	2200      	movs	r2, #0
 800126e:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8001270:	4b07      	ldr	r3, [pc, #28]	; (8001290 <MX_CAN2_Init+0x64>)
 8001272:	2200      	movs	r2, #0
 8001274:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8001276:	4b06      	ldr	r3, [pc, #24]	; (8001290 <MX_CAN2_Init+0x64>)
 8001278:	2200      	movs	r2, #0
 800127a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 800127c:	4804      	ldr	r0, [pc, #16]	; (8001290 <MX_CAN2_Init+0x64>)
 800127e:	f002 fbf5 	bl	8003a6c <HAL_CAN_Init>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8001288:	f000 fb1c 	bl	80018c4 <Error_Handler>
  }

}
 800128c:	bf00      	nop
 800128e:	bd80      	pop	{r7, pc}
 8001290:	2000984c 	.word	0x2000984c
 8001294:	40006800 	.word	0x40006800

08001298 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b08c      	sub	sp, #48	; 0x30
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a0:	f107 031c 	add.w	r3, r7, #28
 80012a4:	2200      	movs	r2, #0
 80012a6:	601a      	str	r2, [r3, #0]
 80012a8:	605a      	str	r2, [r3, #4]
 80012aa:	609a      	str	r2, [r3, #8]
 80012ac:	60da      	str	r2, [r3, #12]
 80012ae:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a4a      	ldr	r2, [pc, #296]	; (80013e0 <HAL_CAN_MspInit+0x148>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d13d      	bne.n	8001336 <HAL_CAN_MspInit+0x9e>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 80012ba:	4b4a      	ldr	r3, [pc, #296]	; (80013e4 <HAL_CAN_MspInit+0x14c>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	3301      	adds	r3, #1
 80012c0:	4a48      	ldr	r2, [pc, #288]	; (80013e4 <HAL_CAN_MspInit+0x14c>)
 80012c2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80012c4:	4b47      	ldr	r3, [pc, #284]	; (80013e4 <HAL_CAN_MspInit+0x14c>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	d10d      	bne.n	80012e8 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80012cc:	2300      	movs	r3, #0
 80012ce:	61bb      	str	r3, [r7, #24]
 80012d0:	4b45      	ldr	r3, [pc, #276]	; (80013e8 <HAL_CAN_MspInit+0x150>)
 80012d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d4:	4a44      	ldr	r2, [pc, #272]	; (80013e8 <HAL_CAN_MspInit+0x150>)
 80012d6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80012da:	6413      	str	r3, [r2, #64]	; 0x40
 80012dc:	4b42      	ldr	r3, [pc, #264]	; (80013e8 <HAL_CAN_MspInit+0x150>)
 80012de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012e4:	61bb      	str	r3, [r7, #24]
 80012e6:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012e8:	2300      	movs	r3, #0
 80012ea:	617b      	str	r3, [r7, #20]
 80012ec:	4b3e      	ldr	r3, [pc, #248]	; (80013e8 <HAL_CAN_MspInit+0x150>)
 80012ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f0:	4a3d      	ldr	r2, [pc, #244]	; (80013e8 <HAL_CAN_MspInit+0x150>)
 80012f2:	f043 0308 	orr.w	r3, r3, #8
 80012f6:	6313      	str	r3, [r2, #48]	; 0x30
 80012f8:	4b3b      	ldr	r3, [pc, #236]	; (80013e8 <HAL_CAN_MspInit+0x150>)
 80012fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fc:	f003 0308 	and.w	r3, r3, #8
 8001300:	617b      	str	r3, [r7, #20]
 8001302:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001304:	2303      	movs	r3, #3
 8001306:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001308:	2302      	movs	r3, #2
 800130a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130c:	2300      	movs	r3, #0
 800130e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001310:	2303      	movs	r3, #3
 8001312:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001314:	2309      	movs	r3, #9
 8001316:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001318:	f107 031c 	add.w	r3, r7, #28
 800131c:	4619      	mov	r1, r3
 800131e:	4833      	ldr	r0, [pc, #204]	; (80013ec <HAL_CAN_MspInit+0x154>)
 8001320:	f003 fea2 	bl	8005068 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8001324:	2200      	movs	r2, #0
 8001326:	2105      	movs	r1, #5
 8001328:	2014      	movs	r0, #20
 800132a:	f003 fae1 	bl	80048f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800132e:	2014      	movs	r0, #20
 8001330:	f003 fafa 	bl	8004928 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 8001334:	e050      	b.n	80013d8 <HAL_CAN_MspInit+0x140>
  else if(canHandle->Instance==CAN2)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4a2d      	ldr	r2, [pc, #180]	; (80013f0 <HAL_CAN_MspInit+0x158>)
 800133c:	4293      	cmp	r3, r2
 800133e:	d14b      	bne.n	80013d8 <HAL_CAN_MspInit+0x140>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8001340:	2300      	movs	r3, #0
 8001342:	613b      	str	r3, [r7, #16]
 8001344:	4b28      	ldr	r3, [pc, #160]	; (80013e8 <HAL_CAN_MspInit+0x150>)
 8001346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001348:	4a27      	ldr	r2, [pc, #156]	; (80013e8 <HAL_CAN_MspInit+0x150>)
 800134a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800134e:	6413      	str	r3, [r2, #64]	; 0x40
 8001350:	4b25      	ldr	r3, [pc, #148]	; (80013e8 <HAL_CAN_MspInit+0x150>)
 8001352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001354:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001358:	613b      	str	r3, [r7, #16]
 800135a:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 800135c:	4b21      	ldr	r3, [pc, #132]	; (80013e4 <HAL_CAN_MspInit+0x14c>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	3301      	adds	r3, #1
 8001362:	4a20      	ldr	r2, [pc, #128]	; (80013e4 <HAL_CAN_MspInit+0x14c>)
 8001364:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001366:	4b1f      	ldr	r3, [pc, #124]	; (80013e4 <HAL_CAN_MspInit+0x14c>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	2b01      	cmp	r3, #1
 800136c:	d10d      	bne.n	800138a <HAL_CAN_MspInit+0xf2>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800136e:	2300      	movs	r3, #0
 8001370:	60fb      	str	r3, [r7, #12]
 8001372:	4b1d      	ldr	r3, [pc, #116]	; (80013e8 <HAL_CAN_MspInit+0x150>)
 8001374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001376:	4a1c      	ldr	r2, [pc, #112]	; (80013e8 <HAL_CAN_MspInit+0x150>)
 8001378:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800137c:	6413      	str	r3, [r2, #64]	; 0x40
 800137e:	4b1a      	ldr	r3, [pc, #104]	; (80013e8 <HAL_CAN_MspInit+0x150>)
 8001380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001382:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001386:	60fb      	str	r3, [r7, #12]
 8001388:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800138a:	2300      	movs	r3, #0
 800138c:	60bb      	str	r3, [r7, #8]
 800138e:	4b16      	ldr	r3, [pc, #88]	; (80013e8 <HAL_CAN_MspInit+0x150>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001392:	4a15      	ldr	r2, [pc, #84]	; (80013e8 <HAL_CAN_MspInit+0x150>)
 8001394:	f043 0302 	orr.w	r3, r3, #2
 8001398:	6313      	str	r3, [r2, #48]	; 0x30
 800139a:	4b13      	ldr	r3, [pc, #76]	; (80013e8 <HAL_CAN_MspInit+0x150>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139e:	f003 0302 	and.w	r3, r3, #2
 80013a2:	60bb      	str	r3, [r7, #8]
 80013a4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80013a6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80013aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ac:	2302      	movs	r3, #2
 80013ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b0:	2300      	movs	r3, #0
 80013b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013b4:	2303      	movs	r3, #3
 80013b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 80013b8:	2309      	movs	r3, #9
 80013ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013bc:	f107 031c 	add.w	r3, r7, #28
 80013c0:	4619      	mov	r1, r3
 80013c2:	480c      	ldr	r0, [pc, #48]	; (80013f4 <HAL_CAN_MspInit+0x15c>)
 80013c4:	f003 fe50 	bl	8005068 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 5, 0);
 80013c8:	2200      	movs	r2, #0
 80013ca:	2105      	movs	r1, #5
 80013cc:	2040      	movs	r0, #64	; 0x40
 80013ce:	f003 fa8f 	bl	80048f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 80013d2:	2040      	movs	r0, #64	; 0x40
 80013d4:	f003 faa8 	bl	8004928 <HAL_NVIC_EnableIRQ>
}
 80013d8:	bf00      	nop
 80013da:	3730      	adds	r7, #48	; 0x30
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	40006400 	.word	0x40006400
 80013e4:	200000b0 	.word	0x200000b0
 80013e8:	40023800 	.word	0x40023800
 80013ec:	40020c00 	.word	0x40020c00
 80013f0:	40006800 	.word	0x40006800
 80013f4:	40020400 	.word	0x40020400

080013f8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80013fe:	2300      	movs	r3, #0
 8001400:	607b      	str	r3, [r7, #4]
 8001402:	4b23      	ldr	r3, [pc, #140]	; (8001490 <MX_DMA_Init+0x98>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001406:	4a22      	ldr	r2, [pc, #136]	; (8001490 <MX_DMA_Init+0x98>)
 8001408:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800140c:	6313      	str	r3, [r2, #48]	; 0x30
 800140e:	4b20      	ldr	r3, [pc, #128]	; (8001490 <MX_DMA_Init+0x98>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001412:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001416:	607b      	str	r3, [r7, #4]
 8001418:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800141a:	2300      	movs	r3, #0
 800141c:	603b      	str	r3, [r7, #0]
 800141e:	4b1c      	ldr	r3, [pc, #112]	; (8001490 <MX_DMA_Init+0x98>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001422:	4a1b      	ldr	r2, [pc, #108]	; (8001490 <MX_DMA_Init+0x98>)
 8001424:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001428:	6313      	str	r3, [r2, #48]	; 0x30
 800142a:	4b19      	ldr	r3, [pc, #100]	; (8001490 <MX_DMA_Init+0x98>)
 800142c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001432:	603b      	str	r3, [r7, #0]
 8001434:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8001436:	2200      	movs	r2, #0
 8001438:	2105      	movs	r1, #5
 800143a:	200e      	movs	r0, #14
 800143c:	f003 fa58 	bl	80048f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001440:	200e      	movs	r0, #14
 8001442:	f003 fa71 	bl	8004928 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8001446:	2200      	movs	r2, #0
 8001448:	2105      	movs	r1, #5
 800144a:	2039      	movs	r0, #57	; 0x39
 800144c:	f003 fa50 	bl	80048f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001450:	2039      	movs	r0, #57	; 0x39
 8001452:	f003 fa69 	bl	8004928 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8001456:	2200      	movs	r2, #0
 8001458:	2105      	movs	r1, #5
 800145a:	203a      	movs	r0, #58	; 0x3a
 800145c:	f003 fa48 	bl	80048f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001460:	203a      	movs	r0, #58	; 0x3a
 8001462:	f003 fa61 	bl	8004928 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8001466:	2200      	movs	r2, #0
 8001468:	2105      	movs	r1, #5
 800146a:	203b      	movs	r0, #59	; 0x3b
 800146c:	f003 fa40 	bl	80048f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001470:	203b      	movs	r0, #59	; 0x3b
 8001472:	f003 fa59 	bl	8004928 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 5, 0);
 8001476:	2200      	movs	r2, #0
 8001478:	2105      	movs	r1, #5
 800147a:	203c      	movs	r0, #60	; 0x3c
 800147c:	f003 fa38 	bl	80048f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8001480:	203c      	movs	r0, #60	; 0x3c
 8001482:	f003 fa51 	bl	8004928 <HAL_NVIC_EnableIRQ>

}
 8001486:	bf00      	nop
 8001488:	3708      	adds	r7, #8
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	40023800 	.word	0x40023800

08001494 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
//	startup_task();
	gimbal_data_flag = osEventFlagsNew(NULL);
 8001498:	2000      	movs	r0, #0
 800149a:	f006 fcff 	bl	8007e9c <osEventFlagsNew>
 800149e:	4603      	mov	r3, r0
 80014a0:	4a21      	ldr	r2, [pc, #132]	; (8001528 <MX_FREERTOS_Init+0x94>)
 80014a2:	6013      	str	r3, [r2, #0]
	chassis_data_flag = osEventFlagsNew(NULL);
 80014a4:	2000      	movs	r0, #0
 80014a6:	f006 fcf9 	bl	8007e9c <osEventFlagsNew>
 80014aa:	4603      	mov	r3, r0
 80014ac:	4a1f      	ldr	r2, [pc, #124]	; (800152c <MX_FREERTOS_Init+0x98>)
 80014ae:	6013      	str	r3, [r2, #0]
	gun_data_flag = osEventFlagsNew(NULL);
 80014b0:	2000      	movs	r0, #0
 80014b2:	f006 fcf3 	bl	8007e9c <osEventFlagsNew>
 80014b6:	4603      	mov	r3, r0
 80014b8:	4a1d      	ldr	r2, [pc, #116]	; (8001530 <MX_FREERTOS_Init+0x9c>)
 80014ba:	6013      	str	r3, [r2, #0]
	rc_data_flag = osEventFlagsNew(NULL);
 80014bc:	2000      	movs	r0, #0
 80014be:	f006 fced 	bl	8007e9c <osEventFlagsNew>
 80014c2:	4603      	mov	r3, r0
 80014c4:	4a1b      	ldr	r2, [pc, #108]	; (8001534 <MX_FREERTOS_Init+0xa0>)
 80014c6:	6013      	str	r3, [r2, #0]
	control_data_flag = osEventFlagsNew(NULL);
 80014c8:	2000      	movs	r0, #0
 80014ca:	f006 fce7 	bl	8007e9c <osEventFlagsNew>
 80014ce:	4603      	mov	r3, r0
 80014d0:	4a19      	ldr	r2, [pc, #100]	; (8001538 <MX_FREERTOS_Init+0xa4>)
 80014d2:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
	sem_refUart = osSemaphoreNew(ISR_SEMAPHORE_COUNT, 0, NULL);
 80014d4:	2200      	movs	r2, #0
 80014d6:	2100      	movs	r1, #0
 80014d8:	2001      	movs	r0, #1
 80014da:	f006 fe43 	bl	8008164 <osSemaphoreNew>
 80014de:	4603      	mov	r3, r0
 80014e0:	4a16      	ldr	r2, [pc, #88]	; (800153c <MX_FREERTOS_Init+0xa8>)
 80014e2:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80014e4:	4a16      	ldr	r2, [pc, #88]	; (8001540 <MX_FREERTOS_Init+0xac>)
 80014e6:	2100      	movs	r1, #0
 80014e8:	4816      	ldr	r0, [pc, #88]	; (8001544 <MX_FREERTOS_Init+0xb0>)
 80014ea:	f006 fc03 	bl	8007cf4 <osThreadNew>
 80014ee:	4603      	mov	r3, r0
 80014f0:	4a15      	ldr	r2, [pc, #84]	; (8001548 <MX_FREERTOS_Init+0xb4>)
 80014f2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  //todo: adjust priorities
  //Threads creation
  	gimbal_control_task_handle   = osThreadNew(gimbal_control_task, NULL, &high2_priority_task_attributes);
 80014f4:	4a15      	ldr	r2, [pc, #84]	; (800154c <MX_FREERTOS_Init+0xb8>)
 80014f6:	2100      	movs	r1, #0
 80014f8:	4815      	ldr	r0, [pc, #84]	; (8001550 <MX_FREERTOS_Init+0xbc>)
 80014fa:	f006 fbfb 	bl	8007cf4 <osThreadNew>
 80014fe:	4603      	mov	r3, r0
 8001500:	4a14      	ldr	r2, [pc, #80]	; (8001554 <MX_FREERTOS_Init+0xc0>)
 8001502:	6013      	str	r3, [r2, #0]
  	movement_control_task_handle = osThreadNew(movement_control_task, NULL, &high_priority_task_attributes);//run now
 8001504:	4a14      	ldr	r2, [pc, #80]	; (8001558 <MX_FREERTOS_Init+0xc4>)
 8001506:	2100      	movs	r1, #0
 8001508:	4814      	ldr	r0, [pc, #80]	; (800155c <MX_FREERTOS_Init+0xc8>)
 800150a:	f006 fbf3 	bl	8007cf4 <osThreadNew>
 800150e:	4603      	mov	r3, r0
 8001510:	4a13      	ldr	r2, [pc, #76]	; (8001560 <MX_FREERTOS_Init+0xcc>)
 8001512:	6013      	str	r3, [r2, #0]
  	gun_control_task_handle = osThreadNew(gun_control_task, NULL, &high_priority_task_attributes);
 8001514:	4a10      	ldr	r2, [pc, #64]	; (8001558 <MX_FREERTOS_Init+0xc4>)
 8001516:	2100      	movs	r1, #0
 8001518:	4812      	ldr	r0, [pc, #72]	; (8001564 <MX_FREERTOS_Init+0xd0>)
 800151a:	f006 fbeb 	bl	8007cf4 <osThreadNew>
 800151e:	4603      	mov	r3, r0
 8001520:	4a11      	ldr	r2, [pc, #68]	; (8001568 <MX_FREERTOS_Init+0xd4>)
 8001522:	6013      	str	r3, [r2, #0]
  	//todo: add event flags
	//Signals when a certain event has occurred

  /* USER CODE END RTOS_EVENTS */

}
 8001524:	bf00      	nop
 8001526:	bd80      	pop	{r7, pc}
 8001528:	200098a8 	.word	0x200098a8
 800152c:	200098c0 	.word	0x200098c0
 8001530:	200098ac 	.word	0x200098ac
 8001534:	200098a0 	.word	0x200098a0
 8001538:	200098b0 	.word	0x200098b0
 800153c:	200098bc 	.word	0x200098bc
 8001540:	0800c678 	.word	0x0800c678
 8001544:	0800156d 	.word	0x0800156d
 8001548:	2000989c 	.word	0x2000989c
 800154c:	0800c654 	.word	0x0800c654
 8001550:	08002915 	.word	0x08002915
 8001554:	200098c4 	.word	0x200098c4
 8001558:	0800c630 	.word	0x0800c630
 800155c:	08003335 	.word	0x08003335
 8001560:	200098a4 	.word	0x200098a4
 8001564:	08002c35 	.word	0x08002c35
 8001568:	200098b4 	.word	0x200098b4

0800156c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001574:	2001      	movs	r0, #1
 8001576:	f006 fc63 	bl	8007e40 <osDelay>
 800157a:	e7fb      	b.n	8001574 <StartDefaultTask+0x8>

0800157c <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PA7   ------> SPI1_MOSI
*/
void MX_GPIO_Init(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b08c      	sub	sp, #48	; 0x30
 8001580:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001582:	f107 031c 	add.w	r3, r7, #28
 8001586:	2200      	movs	r2, #0
 8001588:	601a      	str	r2, [r3, #0]
 800158a:	605a      	str	r2, [r3, #4]
 800158c:	609a      	str	r2, [r3, #8]
 800158e:	60da      	str	r2, [r3, #12]
 8001590:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001592:	2300      	movs	r3, #0
 8001594:	61bb      	str	r3, [r7, #24]
 8001596:	4b74      	ldr	r3, [pc, #464]	; (8001768 <MX_GPIO_Init+0x1ec>)
 8001598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159a:	4a73      	ldr	r2, [pc, #460]	; (8001768 <MX_GPIO_Init+0x1ec>)
 800159c:	f043 0310 	orr.w	r3, r3, #16
 80015a0:	6313      	str	r3, [r2, #48]	; 0x30
 80015a2:	4b71      	ldr	r3, [pc, #452]	; (8001768 <MX_GPIO_Init+0x1ec>)
 80015a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a6:	f003 0310 	and.w	r3, r3, #16
 80015aa:	61bb      	str	r3, [r7, #24]
 80015ac:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ae:	2300      	movs	r3, #0
 80015b0:	617b      	str	r3, [r7, #20]
 80015b2:	4b6d      	ldr	r3, [pc, #436]	; (8001768 <MX_GPIO_Init+0x1ec>)
 80015b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b6:	4a6c      	ldr	r2, [pc, #432]	; (8001768 <MX_GPIO_Init+0x1ec>)
 80015b8:	f043 0302 	orr.w	r3, r3, #2
 80015bc:	6313      	str	r3, [r2, #48]	; 0x30
 80015be:	4b6a      	ldr	r3, [pc, #424]	; (8001768 <MX_GPIO_Init+0x1ec>)
 80015c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c2:	f003 0302 	and.w	r3, r3, #2
 80015c6:	617b      	str	r3, [r7, #20]
 80015c8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80015ca:	2300      	movs	r3, #0
 80015cc:	613b      	str	r3, [r7, #16]
 80015ce:	4b66      	ldr	r3, [pc, #408]	; (8001768 <MX_GPIO_Init+0x1ec>)
 80015d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d2:	4a65      	ldr	r2, [pc, #404]	; (8001768 <MX_GPIO_Init+0x1ec>)
 80015d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015d8:	6313      	str	r3, [r2, #48]	; 0x30
 80015da:	4b63      	ldr	r3, [pc, #396]	; (8001768 <MX_GPIO_Init+0x1ec>)
 80015dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015e2:	613b      	str	r3, [r7, #16]
 80015e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015e6:	2300      	movs	r3, #0
 80015e8:	60fb      	str	r3, [r7, #12]
 80015ea:	4b5f      	ldr	r3, [pc, #380]	; (8001768 <MX_GPIO_Init+0x1ec>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ee:	4a5e      	ldr	r2, [pc, #376]	; (8001768 <MX_GPIO_Init+0x1ec>)
 80015f0:	f043 0308 	orr.w	r3, r3, #8
 80015f4:	6313      	str	r3, [r2, #48]	; 0x30
 80015f6:	4b5c      	ldr	r3, [pc, #368]	; (8001768 <MX_GPIO_Init+0x1ec>)
 80015f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fa:	f003 0308 	and.w	r3, r3, #8
 80015fe:	60fb      	str	r3, [r7, #12]
 8001600:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001602:	2300      	movs	r3, #0
 8001604:	60bb      	str	r3, [r7, #8]
 8001606:	4b58      	ldr	r3, [pc, #352]	; (8001768 <MX_GPIO_Init+0x1ec>)
 8001608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160a:	4a57      	ldr	r2, [pc, #348]	; (8001768 <MX_GPIO_Init+0x1ec>)
 800160c:	f043 0301 	orr.w	r3, r3, #1
 8001610:	6313      	str	r3, [r2, #48]	; 0x30
 8001612:	4b55      	ldr	r3, [pc, #340]	; (8001768 <MX_GPIO_Init+0x1ec>)
 8001614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001616:	f003 0301 	and.w	r3, r3, #1
 800161a:	60bb      	str	r3, [r7, #8]
 800161c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800161e:	2300      	movs	r3, #0
 8001620:	607b      	str	r3, [r7, #4]
 8001622:	4b51      	ldr	r3, [pc, #324]	; (8001768 <MX_GPIO_Init+0x1ec>)
 8001624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001626:	4a50      	ldr	r2, [pc, #320]	; (8001768 <MX_GPIO_Init+0x1ec>)
 8001628:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800162c:	6313      	str	r3, [r2, #48]	; 0x30
 800162e:	4b4e      	ldr	r3, [pc, #312]	; (8001768 <MX_GPIO_Init+0x1ec>)
 8001630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001632:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001636:	607b      	str	r3, [r7, #4]
 8001638:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800163a:	2300      	movs	r3, #0
 800163c:	603b      	str	r3, [r7, #0]
 800163e:	4b4a      	ldr	r3, [pc, #296]	; (8001768 <MX_GPIO_Init+0x1ec>)
 8001640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001642:	4a49      	ldr	r2, [pc, #292]	; (8001768 <MX_GPIO_Init+0x1ec>)
 8001644:	f043 0320 	orr.w	r3, r3, #32
 8001648:	6313      	str	r3, [r2, #48]	; 0x30
 800164a:	4b47      	ldr	r3, [pc, #284]	; (8001768 <MX_GPIO_Init+0x1ec>)
 800164c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164e:	f003 0320 	and.w	r3, r3, #32
 8001652:	603b      	str	r3, [r7, #0]
 8001654:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, PWR_A_Pin|PWR_B_Pin|PWR_C_Pin|PWR_D_Pin, GPIO_PIN_SET);
 8001656:	2201      	movs	r2, #1
 8001658:	213c      	movs	r1, #60	; 0x3c
 800165a:	4844      	ldr	r0, [pc, #272]	; (800176c <MX_GPIO_Init+0x1f0>)
 800165c:	f003 feb0 	bl	80053c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6|LED_G_Pin, GPIO_PIN_RESET);
 8001660:	2200      	movs	r2, #0
 8001662:	f244 0140 	movw	r1, #16448	; 0x4040
 8001666:	4842      	ldr	r0, [pc, #264]	; (8001770 <MX_GPIO_Init+0x1f4>)
 8001668:	f003 feaa 	bl	80053c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_RESET);
 800166c:	2200      	movs	r2, #0
 800166e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001672:	4840      	ldr	r0, [pc, #256]	; (8001774 <MX_GPIO_Init+0x1f8>)
 8001674:	f003 fea4 	bl	80053c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IST_INT_Pin;
 8001678:	2308      	movs	r3, #8
 800167a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800167c:	4b3e      	ldr	r3, [pc, #248]	; (8001778 <MX_GPIO_Init+0x1fc>)
 800167e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001680:	2302      	movs	r3, #2
 8001682:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(IST_INT_GPIO_Port, &GPIO_InitStruct);
 8001684:	f107 031c 	add.w	r3, r7, #28
 8001688:	4619      	mov	r1, r3
 800168a:	483a      	ldr	r0, [pc, #232]	; (8001774 <MX_GPIO_Init+0x1f8>)
 800168c:	f003 fcec 	bl	8005068 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MPU_INT_Pin;
 8001690:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001694:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001696:	4b38      	ldr	r3, [pc, #224]	; (8001778 <MX_GPIO_Init+0x1fc>)
 8001698:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800169a:	2302      	movs	r3, #2
 800169c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MPU_INT_GPIO_Port, &GPIO_InitStruct);
 800169e:	f107 031c 	add.w	r3, r7, #28
 80016a2:	4619      	mov	r1, r3
 80016a4:	4835      	ldr	r0, [pc, #212]	; (800177c <MX_GPIO_Init+0x200>)
 80016a6:	f003 fcdf 	bl	8005068 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin PHPin */
  GPIO_InitStruct.Pin = PWR_A_Pin|PWR_B_Pin|PWR_C_Pin|PWR_D_Pin;
 80016aa:	233c      	movs	r3, #60	; 0x3c
 80016ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ae:	2301      	movs	r3, #1
 80016b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016b2:	2301      	movs	r3, #1
 80016b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b6:	2300      	movs	r3, #0
 80016b8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80016ba:	f107 031c 	add.w	r3, r7, #28
 80016be:	4619      	mov	r1, r3
 80016c0:	482a      	ldr	r0, [pc, #168]	; (800176c <MX_GPIO_Init+0x1f0>)
 80016c2:	f003 fcd1 	bl	8005068 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80016c6:	2340      	movs	r3, #64	; 0x40
 80016c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ca:	2301      	movs	r3, #1
 80016cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80016ce:	2302      	movs	r3, #2
 80016d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80016d2:	2301      	movs	r3, #1
 80016d4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80016d6:	f107 031c 	add.w	r3, r7, #28
 80016da:	4619      	mov	r1, r3
 80016dc:	4824      	ldr	r0, [pc, #144]	; (8001770 <MX_GPIO_Init+0x1f4>)
 80016de:	f003 fcc3 	bl	8005068 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_R_Pin;
 80016e2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80016e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016e8:	2301      	movs	r3, #1
 80016ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ec:	2300      	movs	r3, #0
 80016ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f0:	2300      	movs	r3, #0
 80016f2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_R_GPIO_Port, &GPIO_InitStruct);
 80016f4:	f107 031c 	add.w	r3, r7, #28
 80016f8:	4619      	mov	r1, r3
 80016fa:	481e      	ldr	r0, [pc, #120]	; (8001774 <MX_GPIO_Init+0x1f8>)
 80016fc:	f003 fcb4 	bl	8005068 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001700:	2380      	movs	r3, #128	; 0x80
 8001702:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001704:	2302      	movs	r3, #2
 8001706:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001708:	2300      	movs	r3, #0
 800170a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800170c:	2303      	movs	r3, #3
 800170e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001710:	2305      	movs	r3, #5
 8001712:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001714:	f107 031c 	add.w	r3, r7, #28
 8001718:	4619      	mov	r1, r3
 800171a:	4819      	ldr	r0, [pc, #100]	; (8001780 <MX_GPIO_Init+0x204>)
 800171c:	f003 fca4 	bl	8005068 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_G_Pin;
 8001720:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001724:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001726:	2301      	movs	r3, #1
 8001728:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172a:	2300      	movs	r3, #0
 800172c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800172e:	2300      	movs	r3, #0
 8001730:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_G_GPIO_Port, &GPIO_InitStruct);
 8001732:	f107 031c 	add.w	r3, r7, #28
 8001736:	4619      	mov	r1, r3
 8001738:	480d      	ldr	r0, [pc, #52]	; (8001770 <MX_GPIO_Init+0x1f4>)
 800173a:	f003 fc95 	bl	8005068 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 800173e:	2200      	movs	r2, #0
 8001740:	2105      	movs	r1, #5
 8001742:	2009      	movs	r0, #9
 8001744:	f003 f8d4 	bl	80048f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001748:	2009      	movs	r0, #9
 800174a:	f003 f8ed 	bl	8004928 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 800174e:	2200      	movs	r2, #0
 8001750:	2105      	movs	r1, #5
 8001752:	2017      	movs	r0, #23
 8001754:	f003 f8cc 	bl	80048f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001758:	2017      	movs	r0, #23
 800175a:	f003 f8e5 	bl	8004928 <HAL_NVIC_EnableIRQ>

}
 800175e:	bf00      	nop
 8001760:	3730      	adds	r7, #48	; 0x30
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	40023800 	.word	0x40023800
 800176c:	40021c00 	.word	0x40021c00
 8001770:	40021400 	.word	0x40021400
 8001774:	40021000 	.word	0x40021000
 8001778:	10110000 	.word	0x10110000
 800177c:	40020400 	.word	0x40020400
 8001780:	40020000 	.word	0x40020000

08001784 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001788:	f002 f90a 	bl	80039a0 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800178c:	f000 f81e 	bl	80017cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001790:	f7ff fef4 	bl	800157c <MX_GPIO_Init>
  MX_DMA_Init();
 8001794:	f7ff fe30 	bl	80013f8 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001798:	f000 fc58 	bl	800204c <MX_USART1_UART_Init>
  MX_CAN1_Init();
 800179c:	f7ff fd10 	bl	80011c0 <MX_CAN1_Init>
  MX_USART6_UART_Init();
 80017a0:	f000 fc80 	bl	80020a4 <MX_USART6_UART_Init>
  MX_SPI5_Init();
 80017a4:	f000 f894 	bl	80018d0 <MX_SPI5_Init>
  MX_TIM12_Init();
 80017a8:	f000 fb1e 	bl	8001de8 <MX_TIM12_Init>
  MX_CAN2_Init();
 80017ac:	f7ff fd3e 	bl	800122c <MX_CAN2_Init>
  MX_TIM4_Init();
 80017b0:	f000 fac0 	bl	8001d34 <MX_TIM4_Init>
  MX_UART7_Init();
 80017b4:	f000 fc20 	bl	8001ff8 <MX_UART7_Init>
  /* USER CODE BEGIN 2 */

  startup_task();
 80017b8:	f001 ffc8 	bl	800374c <startup_task>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80017bc:	f006 fa30 	bl	8007c20 <osKernelInitialize>
  MX_FREERTOS_Init();
 80017c0:	f7ff fe68 	bl	8001494 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 80017c4:	f006 fa60 	bl	8007c88 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80017c8:	e7fe      	b.n	80017c8 <main+0x44>
	...

080017cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b094      	sub	sp, #80	; 0x50
 80017d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017d2:	f107 0320 	add.w	r3, r7, #32
 80017d6:	2230      	movs	r2, #48	; 0x30
 80017d8:	2100      	movs	r1, #0
 80017da:	4618      	mov	r0, r3
 80017dc:	f009 fe10 	bl	800b400 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017e0:	f107 030c 	add.w	r3, r7, #12
 80017e4:	2200      	movs	r2, #0
 80017e6:	601a      	str	r2, [r3, #0]
 80017e8:	605a      	str	r2, [r3, #4]
 80017ea:	609a      	str	r2, [r3, #8]
 80017ec:	60da      	str	r2, [r3, #12]
 80017ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80017f0:	2300      	movs	r3, #0
 80017f2:	60bb      	str	r3, [r7, #8]
 80017f4:	4b28      	ldr	r3, [pc, #160]	; (8001898 <SystemClock_Config+0xcc>)
 80017f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f8:	4a27      	ldr	r2, [pc, #156]	; (8001898 <SystemClock_Config+0xcc>)
 80017fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017fe:	6413      	str	r3, [r2, #64]	; 0x40
 8001800:	4b25      	ldr	r3, [pc, #148]	; (8001898 <SystemClock_Config+0xcc>)
 8001802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001804:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001808:	60bb      	str	r3, [r7, #8]
 800180a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800180c:	2300      	movs	r3, #0
 800180e:	607b      	str	r3, [r7, #4]
 8001810:	4b22      	ldr	r3, [pc, #136]	; (800189c <SystemClock_Config+0xd0>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a21      	ldr	r2, [pc, #132]	; (800189c <SystemClock_Config+0xd0>)
 8001816:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800181a:	6013      	str	r3, [r2, #0]
 800181c:	4b1f      	ldr	r3, [pc, #124]	; (800189c <SystemClock_Config+0xd0>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001824:	607b      	str	r3, [r7, #4]
 8001826:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001828:	2301      	movs	r3, #1
 800182a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800182c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001830:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001832:	2302      	movs	r3, #2
 8001834:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001836:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800183a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 800183c:	2306      	movs	r3, #6
 800183e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001840:	23a8      	movs	r3, #168	; 0xa8
 8001842:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001844:	2302      	movs	r3, #2
 8001846:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001848:	2304      	movs	r3, #4
 800184a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800184c:	f107 0320 	add.w	r3, r7, #32
 8001850:	4618      	mov	r0, r3
 8001852:	f003 fdf3 	bl	800543c <HAL_RCC_OscConfig>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d001      	beq.n	8001860 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800185c:	f000 f832 	bl	80018c4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001860:	230f      	movs	r3, #15
 8001862:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001864:	2302      	movs	r3, #2
 8001866:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001868:	2300      	movs	r3, #0
 800186a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800186c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001870:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001872:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001876:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001878:	f107 030c 	add.w	r3, r7, #12
 800187c:	2105      	movs	r1, #5
 800187e:	4618      	mov	r0, r3
 8001880:	f004 f84c 	bl	800591c <HAL_RCC_ClockConfig>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d001      	beq.n	800188e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800188a:	f000 f81b 	bl	80018c4 <Error_Handler>
  }
}
 800188e:	bf00      	nop
 8001890:	3750      	adds	r7, #80	; 0x50
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	40023800 	.word	0x40023800
 800189c:	40007000 	.word	0x40007000

080018a0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a04      	ldr	r2, [pc, #16]	; (80018c0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d101      	bne.n	80018b6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80018b2:	f002 f897 	bl	80039e4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80018b6:	bf00      	nop
 80018b8:	3708      	adds	r7, #8
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	40000400 	.word	0x40000400

080018c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018c8:	b672      	cpsid	i
}
 80018ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018cc:	e7fe      	b.n	80018cc <Error_Handler+0x8>
	...

080018d0 <MX_SPI5_Init>:
DMA_HandleTypeDef hdma_spi5_rx;
DMA_HandleTypeDef hdma_spi5_tx;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0

  hspi5.Instance = SPI5;
 80018d4:	4b17      	ldr	r3, [pc, #92]	; (8001934 <MX_SPI5_Init+0x64>)
 80018d6:	4a18      	ldr	r2, [pc, #96]	; (8001938 <MX_SPI5_Init+0x68>)
 80018d8:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80018da:	4b16      	ldr	r3, [pc, #88]	; (8001934 <MX_SPI5_Init+0x64>)
 80018dc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80018e0:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80018e2:	4b14      	ldr	r3, [pc, #80]	; (8001934 <MX_SPI5_Init+0x64>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80018e8:	4b12      	ldr	r3, [pc, #72]	; (8001934 <MX_SPI5_Init+0x64>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80018ee:	4b11      	ldr	r3, [pc, #68]	; (8001934 <MX_SPI5_Init+0x64>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80018f4:	4b0f      	ldr	r3, [pc, #60]	; (8001934 <MX_SPI5_Init+0x64>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80018fa:	4b0e      	ldr	r3, [pc, #56]	; (8001934 <MX_SPI5_Init+0x64>)
 80018fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001900:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001902:	4b0c      	ldr	r3, [pc, #48]	; (8001934 <MX_SPI5_Init+0x64>)
 8001904:	2200      	movs	r2, #0
 8001906:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001908:	4b0a      	ldr	r3, [pc, #40]	; (8001934 <MX_SPI5_Init+0x64>)
 800190a:	2200      	movs	r2, #0
 800190c:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800190e:	4b09      	ldr	r3, [pc, #36]	; (8001934 <MX_SPI5_Init+0x64>)
 8001910:	2200      	movs	r2, #0
 8001912:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001914:	4b07      	ldr	r3, [pc, #28]	; (8001934 <MX_SPI5_Init+0x64>)
 8001916:	2200      	movs	r2, #0
 8001918:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 800191a:	4b06      	ldr	r3, [pc, #24]	; (8001934 <MX_SPI5_Init+0x64>)
 800191c:	220a      	movs	r2, #10
 800191e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001920:	4804      	ldr	r0, [pc, #16]	; (8001934 <MX_SPI5_Init+0x64>)
 8001922:	f004 f9fd 	bl	8005d20 <HAL_SPI_Init>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d001      	beq.n	8001930 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 800192c:	f7ff ffca 	bl	80018c4 <Error_Handler>
  }

}
 8001930:	bf00      	nop
 8001932:	bd80      	pop	{r7, pc}
 8001934:	200098d0 	.word	0x200098d0
 8001938:	40015000 	.word	0x40015000

0800193c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b08a      	sub	sp, #40	; 0x28
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001944:	f107 0314 	add.w	r3, r7, #20
 8001948:	2200      	movs	r2, #0
 800194a:	601a      	str	r2, [r3, #0]
 800194c:	605a      	str	r2, [r3, #4]
 800194e:	609a      	str	r2, [r3, #8]
 8001950:	60da      	str	r2, [r3, #12]
 8001952:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a4d      	ldr	r2, [pc, #308]	; (8001a90 <HAL_SPI_MspInit+0x154>)
 800195a:	4293      	cmp	r3, r2
 800195c:	f040 8094 	bne.w	8001a88 <HAL_SPI_MspInit+0x14c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001960:	2300      	movs	r3, #0
 8001962:	613b      	str	r3, [r7, #16]
 8001964:	4b4b      	ldr	r3, [pc, #300]	; (8001a94 <HAL_SPI_MspInit+0x158>)
 8001966:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001968:	4a4a      	ldr	r2, [pc, #296]	; (8001a94 <HAL_SPI_MspInit+0x158>)
 800196a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800196e:	6453      	str	r3, [r2, #68]	; 0x44
 8001970:	4b48      	ldr	r3, [pc, #288]	; (8001a94 <HAL_SPI_MspInit+0x158>)
 8001972:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001974:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001978:	613b      	str	r3, [r7, #16]
 800197a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800197c:	2300      	movs	r3, #0
 800197e:	60fb      	str	r3, [r7, #12]
 8001980:	4b44      	ldr	r3, [pc, #272]	; (8001a94 <HAL_SPI_MspInit+0x158>)
 8001982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001984:	4a43      	ldr	r2, [pc, #268]	; (8001a94 <HAL_SPI_MspInit+0x158>)
 8001986:	f043 0320 	orr.w	r3, r3, #32
 800198a:	6313      	str	r3, [r2, #48]	; 0x30
 800198c:	4b41      	ldr	r3, [pc, #260]	; (8001a94 <HAL_SPI_MspInit+0x158>)
 800198e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001990:	f003 0320 	and.w	r3, r3, #32
 8001994:	60fb      	str	r3, [r7, #12]
 8001996:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF9     ------> SPI5_MOSI
    PF8     ------> SPI5_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_8;
 8001998:	f44f 7360 	mov.w	r3, #896	; 0x380
 800199c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800199e:	2302      	movs	r3, #2
 80019a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a2:	2300      	movs	r3, #0
 80019a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019a6:	2303      	movs	r3, #3
 80019a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80019aa:	2305      	movs	r3, #5
 80019ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80019ae:	f107 0314 	add.w	r3, r7, #20
 80019b2:	4619      	mov	r1, r3
 80019b4:	4838      	ldr	r0, [pc, #224]	; (8001a98 <HAL_SPI_MspInit+0x15c>)
 80019b6:	f003 fb57 	bl	8005068 <HAL_GPIO_Init>

    /* SPI5 DMA Init */
    /* SPI5_RX Init */
    hdma_spi5_rx.Instance = DMA2_Stream3;
 80019ba:	4b38      	ldr	r3, [pc, #224]	; (8001a9c <HAL_SPI_MspInit+0x160>)
 80019bc:	4a38      	ldr	r2, [pc, #224]	; (8001aa0 <HAL_SPI_MspInit+0x164>)
 80019be:	601a      	str	r2, [r3, #0]
    hdma_spi5_rx.Init.Channel = DMA_CHANNEL_2;
 80019c0:	4b36      	ldr	r3, [pc, #216]	; (8001a9c <HAL_SPI_MspInit+0x160>)
 80019c2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80019c6:	605a      	str	r2, [r3, #4]
    hdma_spi5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80019c8:	4b34      	ldr	r3, [pc, #208]	; (8001a9c <HAL_SPI_MspInit+0x160>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	609a      	str	r2, [r3, #8]
    hdma_spi5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019ce:	4b33      	ldr	r3, [pc, #204]	; (8001a9c <HAL_SPI_MspInit+0x160>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	60da      	str	r2, [r3, #12]
    hdma_spi5_rx.Init.MemInc = DMA_MINC_ENABLE;
 80019d4:	4b31      	ldr	r3, [pc, #196]	; (8001a9c <HAL_SPI_MspInit+0x160>)
 80019d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019da:	611a      	str	r2, [r3, #16]
    hdma_spi5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80019dc:	4b2f      	ldr	r3, [pc, #188]	; (8001a9c <HAL_SPI_MspInit+0x160>)
 80019de:	2200      	movs	r2, #0
 80019e0:	615a      	str	r2, [r3, #20]
    hdma_spi5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80019e2:	4b2e      	ldr	r3, [pc, #184]	; (8001a9c <HAL_SPI_MspInit+0x160>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	619a      	str	r2, [r3, #24]
    hdma_spi5_rx.Init.Mode = DMA_NORMAL;
 80019e8:	4b2c      	ldr	r3, [pc, #176]	; (8001a9c <HAL_SPI_MspInit+0x160>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	61da      	str	r2, [r3, #28]
    hdma_spi5_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80019ee:	4b2b      	ldr	r3, [pc, #172]	; (8001a9c <HAL_SPI_MspInit+0x160>)
 80019f0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80019f4:	621a      	str	r2, [r3, #32]
    hdma_spi5_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80019f6:	4b29      	ldr	r3, [pc, #164]	; (8001a9c <HAL_SPI_MspInit+0x160>)
 80019f8:	2204      	movs	r2, #4
 80019fa:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi5_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80019fc:	4b27      	ldr	r3, [pc, #156]	; (8001a9c <HAL_SPI_MspInit+0x160>)
 80019fe:	2203      	movs	r2, #3
 8001a00:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi5_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8001a02:	4b26      	ldr	r3, [pc, #152]	; (8001a9c <HAL_SPI_MspInit+0x160>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi5_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001a08:	4b24      	ldr	r3, [pc, #144]	; (8001a9c <HAL_SPI_MspInit+0x160>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi5_rx) != HAL_OK)
 8001a0e:	4823      	ldr	r0, [pc, #140]	; (8001a9c <HAL_SPI_MspInit+0x160>)
 8001a10:	f002 ff98 	bl	8004944 <HAL_DMA_Init>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d001      	beq.n	8001a1e <HAL_SPI_MspInit+0xe2>
    {
      Error_Handler();
 8001a1a:	f7ff ff53 	bl	80018c4 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi5_rx);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	4a1e      	ldr	r2, [pc, #120]	; (8001a9c <HAL_SPI_MspInit+0x160>)
 8001a22:	64da      	str	r2, [r3, #76]	; 0x4c
 8001a24:	4a1d      	ldr	r2, [pc, #116]	; (8001a9c <HAL_SPI_MspInit+0x160>)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI5_TX Init */
    hdma_spi5_tx.Instance = DMA2_Stream4;
 8001a2a:	4b1e      	ldr	r3, [pc, #120]	; (8001aa4 <HAL_SPI_MspInit+0x168>)
 8001a2c:	4a1e      	ldr	r2, [pc, #120]	; (8001aa8 <HAL_SPI_MspInit+0x16c>)
 8001a2e:	601a      	str	r2, [r3, #0]
    hdma_spi5_tx.Init.Channel = DMA_CHANNEL_2;
 8001a30:	4b1c      	ldr	r3, [pc, #112]	; (8001aa4 <HAL_SPI_MspInit+0x168>)
 8001a32:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001a36:	605a      	str	r2, [r3, #4]
    hdma_spi5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a38:	4b1a      	ldr	r3, [pc, #104]	; (8001aa4 <HAL_SPI_MspInit+0x168>)
 8001a3a:	2240      	movs	r2, #64	; 0x40
 8001a3c:	609a      	str	r2, [r3, #8]
    hdma_spi5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a3e:	4b19      	ldr	r3, [pc, #100]	; (8001aa4 <HAL_SPI_MspInit+0x168>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	60da      	str	r2, [r3, #12]
    hdma_spi5_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001a44:	4b17      	ldr	r3, [pc, #92]	; (8001aa4 <HAL_SPI_MspInit+0x168>)
 8001a46:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a4a:	611a      	str	r2, [r3, #16]
    hdma_spi5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a4c:	4b15      	ldr	r3, [pc, #84]	; (8001aa4 <HAL_SPI_MspInit+0x168>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	615a      	str	r2, [r3, #20]
    hdma_spi5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a52:	4b14      	ldr	r3, [pc, #80]	; (8001aa4 <HAL_SPI_MspInit+0x168>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	619a      	str	r2, [r3, #24]
    hdma_spi5_tx.Init.Mode = DMA_NORMAL;
 8001a58:	4b12      	ldr	r3, [pc, #72]	; (8001aa4 <HAL_SPI_MspInit+0x168>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	61da      	str	r2, [r3, #28]
    hdma_spi5_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001a5e:	4b11      	ldr	r3, [pc, #68]	; (8001aa4 <HAL_SPI_MspInit+0x168>)
 8001a60:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001a64:	621a      	str	r2, [r3, #32]
    hdma_spi5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a66:	4b0f      	ldr	r3, [pc, #60]	; (8001aa4 <HAL_SPI_MspInit+0x168>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi5_tx) != HAL_OK)
 8001a6c:	480d      	ldr	r0, [pc, #52]	; (8001aa4 <HAL_SPI_MspInit+0x168>)
 8001a6e:	f002 ff69 	bl	8004944 <HAL_DMA_Init>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d001      	beq.n	8001a7c <HAL_SPI_MspInit+0x140>
    {
      Error_Handler();
 8001a78:	f7ff ff24 	bl	80018c4 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi5_tx);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	4a09      	ldr	r2, [pc, #36]	; (8001aa4 <HAL_SPI_MspInit+0x168>)
 8001a80:	649a      	str	r2, [r3, #72]	; 0x48
 8001a82:	4a08      	ldr	r2, [pc, #32]	; (8001aa4 <HAL_SPI_MspInit+0x168>)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8001a88:	bf00      	nop
 8001a8a:	3728      	adds	r7, #40	; 0x28
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	40015000 	.word	0x40015000
 8001a94:	40023800 	.word	0x40023800
 8001a98:	40021400 	.word	0x40021400
 8001a9c:	20009928 	.word	0x20009928
 8001aa0:	40026458 	.word	0x40026458
 8001aa4:	20009988 	.word	0x20009988
 8001aa8:	40026470 	.word	0x40026470

08001aac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	607b      	str	r3, [r7, #4]
 8001ab6:	4b21      	ldr	r3, [pc, #132]	; (8001b3c <HAL_MspInit+0x90>)
 8001ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aba:	4a20      	ldr	r2, [pc, #128]	; (8001b3c <HAL_MspInit+0x90>)
 8001abc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ac0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ac2:	4b1e      	ldr	r3, [pc, #120]	; (8001b3c <HAL_MspInit+0x90>)
 8001ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ac6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001aca:	607b      	str	r3, [r7, #4]
 8001acc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ace:	2300      	movs	r3, #0
 8001ad0:	603b      	str	r3, [r7, #0]
 8001ad2:	4b1a      	ldr	r3, [pc, #104]	; (8001b3c <HAL_MspInit+0x90>)
 8001ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad6:	4a19      	ldr	r2, [pc, #100]	; (8001b3c <HAL_MspInit+0x90>)
 8001ad8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001adc:	6413      	str	r3, [r2, #64]	; 0x40
 8001ade:	4b17      	ldr	r3, [pc, #92]	; (8001b3c <HAL_MspInit+0x90>)
 8001ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ae6:	603b      	str	r3, [r7, #0]
 8001ae8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 1, 0);
 8001aea:	2200      	movs	r2, #0
 8001aec:	2101      	movs	r1, #1
 8001aee:	f06f 000b 	mvn.w	r0, #11
 8001af2:	f002 fefd 	bl	80048f0 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 2, 0);
 8001af6:	2200      	movs	r2, #0
 8001af8:	2102      	movs	r1, #2
 8001afa:	f06f 000a 	mvn.w	r0, #10
 8001afe:	f002 fef7 	bl	80048f0 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 3, 0);
 8001b02:	2200      	movs	r2, #0
 8001b04:	2103      	movs	r1, #3
 8001b06:	f06f 0009 	mvn.w	r0, #9
 8001b0a:	f002 fef1 	bl	80048f0 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 4, 0);
 8001b0e:	2200      	movs	r2, #0
 8001b10:	2104      	movs	r1, #4
 8001b12:	f06f 0004 	mvn.w	r0, #4
 8001b16:	f002 feeb 	bl	80048f0 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 5, 0);
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	2105      	movs	r1, #5
 8001b1e:	f06f 0003 	mvn.w	r0, #3
 8001b22:	f002 fee5 	bl	80048f0 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001b26:	2200      	movs	r2, #0
 8001b28:	210f      	movs	r1, #15
 8001b2a:	f06f 0001 	mvn.w	r0, #1
 8001b2e:	f002 fedf 	bl	80048f0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b32:	bf00      	nop
 8001b34:	3708      	adds	r7, #8
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	40023800 	.word	0x40023800

08001b40 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b08c      	sub	sp, #48	; 0x30
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM3 IRQ priority */
  HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0);
 8001b50:	2200      	movs	r2, #0
 8001b52:	6879      	ldr	r1, [r7, #4]
 8001b54:	201d      	movs	r0, #29
 8001b56:	f002 fecb 	bl	80048f0 <HAL_NVIC_SetPriority>

  /* Enable the TIM3 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001b5a:	201d      	movs	r0, #29
 8001b5c:	f002 fee4 	bl	8004928 <HAL_NVIC_EnableIRQ>
  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8001b60:	2300      	movs	r3, #0
 8001b62:	60fb      	str	r3, [r7, #12]
 8001b64:	4b1f      	ldr	r3, [pc, #124]	; (8001be4 <HAL_InitTick+0xa4>)
 8001b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b68:	4a1e      	ldr	r2, [pc, #120]	; (8001be4 <HAL_InitTick+0xa4>)
 8001b6a:	f043 0302 	orr.w	r3, r3, #2
 8001b6e:	6413      	str	r3, [r2, #64]	; 0x40
 8001b70:	4b1c      	ldr	r3, [pc, #112]	; (8001be4 <HAL_InitTick+0xa4>)
 8001b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b74:	f003 0302 	and.w	r3, r3, #2
 8001b78:	60fb      	str	r3, [r7, #12]
 8001b7a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001b7c:	f107 0210 	add.w	r2, r7, #16
 8001b80:	f107 0314 	add.w	r3, r7, #20
 8001b84:	4611      	mov	r1, r2
 8001b86:	4618      	mov	r0, r3
 8001b88:	f004 f898 	bl	8005cbc <HAL_RCC_GetClockConfig>

  /* Compute TIM3 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001b8c:	f004 f86e 	bl	8005c6c <HAL_RCC_GetPCLK1Freq>
 8001b90:	4603      	mov	r3, r0
 8001b92:	005b      	lsls	r3, r3, #1
 8001b94:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b98:	4a13      	ldr	r2, [pc, #76]	; (8001be8 <HAL_InitTick+0xa8>)
 8001b9a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b9e:	0c9b      	lsrs	r3, r3, #18
 8001ba0:	3b01      	subs	r3, #1
 8001ba2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8001ba4:	4b11      	ldr	r3, [pc, #68]	; (8001bec <HAL_InitTick+0xac>)
 8001ba6:	4a12      	ldr	r2, [pc, #72]	; (8001bf0 <HAL_InitTick+0xb0>)
 8001ba8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8001baa:	4b10      	ldr	r3, [pc, #64]	; (8001bec <HAL_InitTick+0xac>)
 8001bac:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001bb0:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8001bb2:	4a0e      	ldr	r2, [pc, #56]	; (8001bec <HAL_InitTick+0xac>)
 8001bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bb6:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8001bb8:	4b0c      	ldr	r3, [pc, #48]	; (8001bec <HAL_InitTick+0xac>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bbe:	4b0b      	ldr	r3, [pc, #44]	; (8001bec <HAL_InitTick+0xac>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 8001bc4:	4809      	ldr	r0, [pc, #36]	; (8001bec <HAL_InitTick+0xac>)
 8001bc6:	f004 f90f 	bl	8005de8 <HAL_TIM_Base_Init>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d104      	bne.n	8001bda <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim3);
 8001bd0:	4806      	ldr	r0, [pc, #24]	; (8001bec <HAL_InitTick+0xac>)
 8001bd2:	f004 f934 	bl	8005e3e <HAL_TIM_Base_Start_IT>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	e000      	b.n	8001bdc <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3730      	adds	r7, #48	; 0x30
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	40023800 	.word	0x40023800
 8001be8:	431bde83 	.word	0x431bde83
 8001bec:	200099e8 	.word	0x200099e8
 8001bf0:	40000400 	.word	0x40000400

08001bf4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001bf8:	e7fe      	b.n	8001bf8 <NMI_Handler+0x4>

08001bfa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bfa:	b480      	push	{r7}
 8001bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bfe:	e7fe      	b.n	8001bfe <HardFault_Handler+0x4>

08001c00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c04:	e7fe      	b.n	8001c04 <MemManage_Handler+0x4>

08001c06 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c06:	b480      	push	{r7}
 8001c08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c0a:	e7fe      	b.n	8001c0a <BusFault_Handler+0x4>

08001c0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c10:	e7fe      	b.n	8001c10 <UsageFault_Handler+0x4>

08001c12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c12:	b480      	push	{r7}
 8001c14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c16:	bf00      	nop
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr

08001c20 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8001c24:	2008      	movs	r0, #8
 8001c26:	f003 fbe5 	bl	80053f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001c2a:	bf00      	nop
 8001c2c:	bd80      	pop	{r7, pc}
	...

08001c30 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_rx);
 8001c34:	4802      	ldr	r0, [pc, #8]	; (8001c40 <DMA1_Stream3_IRQHandler+0x10>)
 8001c36:	f002 ffad 	bl	8004b94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001c3a:	bf00      	nop
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	20009b48 	.word	0x20009b48

08001c44 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001c48:	4802      	ldr	r0, [pc, #8]	; (8001c54 <CAN1_RX0_IRQHandler+0x10>)
 8001c4a:	f002 fb69 	bl	8004320 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001c4e:	bf00      	nop
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	20009874 	.word	0x20009874

08001c58 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001c5c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001c60:	f003 fbc8 	bl	80053f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001c64:	bf00      	nop
 8001c66:	bd80      	pop	{r7, pc}

08001c68 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001c6c:	4802      	ldr	r0, [pc, #8]	; (8001c78 <TIM3_IRQHandler+0x10>)
 8001c6e:	f004 f973 	bl	8005f58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001c72:	bf00      	nop
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	200099e8 	.word	0x200099e8

08001c7c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8001c80:	4802      	ldr	r0, [pc, #8]	; (8001c8c <DMA2_Stream1_IRQHandler+0x10>)
 8001c82:	f002 ff87 	bl	8004b94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001c86:	bf00      	nop
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	20009aa8 	.word	0x20009aa8

08001c90 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001c94:	4802      	ldr	r0, [pc, #8]	; (8001ca0 <DMA2_Stream2_IRQHandler+0x10>)
 8001c96:	f002 ff7d 	bl	8004b94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001c9a:	bf00      	nop
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	20009ba8 	.word	0x20009ba8

08001ca4 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi5_rx);
 8001ca8:	4802      	ldr	r0, [pc, #8]	; (8001cb4 <DMA2_Stream3_IRQHandler+0x10>)
 8001caa:	f002 ff73 	bl	8004b94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001cae:	bf00      	nop
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	20009928 	.word	0x20009928

08001cb8 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi5_tx);
 8001cbc:	4802      	ldr	r0, [pc, #8]	; (8001cc8 <DMA2_Stream4_IRQHandler+0x10>)
 8001cbe:	f002 ff69 	bl	8004b94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8001cc2:	bf00      	nop
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	20009988 	.word	0x20009988

08001ccc <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8001cd0:	4802      	ldr	r0, [pc, #8]	; (8001cdc <CAN2_RX0_IRQHandler+0x10>)
 8001cd2:	f002 fb25 	bl	8004320 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8001cd6:	bf00      	nop
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	2000984c 	.word	0x2000984c

08001ce0 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001ce4:	4802      	ldr	r0, [pc, #8]	; (8001cf0 <USART6_IRQHandler+0x10>)
 8001ce6:	f005 f915 	bl	8006f14 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001cea:	bf00      	nop
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	20009c48 	.word	0x20009c48

08001cf4 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8001cf8:	4802      	ldr	r0, [pc, #8]	; (8001d04 <UART7_IRQHandler+0x10>)
 8001cfa:	f005 f90b 	bl	8006f14 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8001cfe:	bf00      	nop
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	20009b08 	.word	0x20009b08

08001d08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d0c:	4b08      	ldr	r3, [pc, #32]	; (8001d30 <SystemInit+0x28>)
 8001d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d12:	4a07      	ldr	r2, [pc, #28]	; (8001d30 <SystemInit+0x28>)
 8001d14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001d1c:	4b04      	ldr	r3, [pc, #16]	; (8001d30 <SystemInit+0x28>)
 8001d1e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d22:	609a      	str	r2, [r3, #8]
#endif
}
 8001d24:	bf00      	nop
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	e000ed00 	.word	0xe000ed00

08001d34 <MX_TIM4_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim12;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b08a      	sub	sp, #40	; 0x28
 8001d38:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d3a:	f107 0320 	add.w	r3, r7, #32
 8001d3e:	2200      	movs	r2, #0
 8001d40:	601a      	str	r2, [r3, #0]
 8001d42:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d44:	1d3b      	adds	r3, r7, #4
 8001d46:	2200      	movs	r2, #0
 8001d48:	601a      	str	r2, [r3, #0]
 8001d4a:	605a      	str	r2, [r3, #4]
 8001d4c:	609a      	str	r2, [r3, #8]
 8001d4e:	60da      	str	r2, [r3, #12]
 8001d50:	611a      	str	r2, [r3, #16]
 8001d52:	615a      	str	r2, [r3, #20]
 8001d54:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 8001d56:	4b22      	ldr	r3, [pc, #136]	; (8001de0 <MX_TIM4_Init+0xac>)
 8001d58:	4a22      	ldr	r2, [pc, #136]	; (8001de4 <MX_TIM4_Init+0xb0>)
 8001d5a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 84;
 8001d5c:	4b20      	ldr	r3, [pc, #128]	; (8001de0 <MX_TIM4_Init+0xac>)
 8001d5e:	2254      	movs	r2, #84	; 0x54
 8001d60:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d62:	4b1f      	ldr	r3, [pc, #124]	; (8001de0 <MX_TIM4_Init+0xac>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 8001d68:	4b1d      	ldr	r3, [pc, #116]	; (8001de0 <MX_TIM4_Init+0xac>)
 8001d6a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001d6e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d70:	4b1b      	ldr	r3, [pc, #108]	; (8001de0 <MX_TIM4_Init+0xac>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d76:	4b1a      	ldr	r3, [pc, #104]	; (8001de0 <MX_TIM4_Init+0xac>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001d7c:	4818      	ldr	r0, [pc, #96]	; (8001de0 <MX_TIM4_Init+0xac>)
 8001d7e:	f004 f882 	bl	8005e86 <HAL_TIM_PWM_Init>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d001      	beq.n	8001d8c <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8001d88:	f7ff fd9c 	bl	80018c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d90:	2300      	movs	r3, #0
 8001d92:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001d94:	f107 0320 	add.w	r3, r7, #32
 8001d98:	4619      	mov	r1, r3
 8001d9a:	4811      	ldr	r0, [pc, #68]	; (8001de0 <MX_TIM4_Init+0xac>)
 8001d9c:	f004 fea6 	bl	8006aec <HAL_TIMEx_MasterConfigSynchronization>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d001      	beq.n	8001daa <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8001da6:	f7ff fd8d 	bl	80018c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001daa:	2360      	movs	r3, #96	; 0x60
 8001dac:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001dae:	2300      	movs	r3, #0
 8001db0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001db2:	2300      	movs	r3, #0
 8001db4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001db6:	2300      	movs	r3, #0
 8001db8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001dba:	1d3b      	adds	r3, r7, #4
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	4807      	ldr	r0, [pc, #28]	; (8001de0 <MX_TIM4_Init+0xac>)
 8001dc2:	f004 f9d1 	bl	8006168 <HAL_TIM_PWM_ConfigChannel>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d001      	beq.n	8001dd0 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8001dcc:	f7ff fd7a 	bl	80018c4 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim4);
 8001dd0:	4803      	ldr	r0, [pc, #12]	; (8001de0 <MX_TIM4_Init+0xac>)
 8001dd2:	f000 f8af 	bl	8001f34 <HAL_TIM_MspPostInit>

}
 8001dd6:	bf00      	nop
 8001dd8:	3728      	adds	r7, #40	; 0x28
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	20009a28 	.word	0x20009a28
 8001de4:	40000800 	.word	0x40000800

08001de8 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b08c      	sub	sp, #48	; 0x30
 8001dec:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dee:	f107 0320 	add.w	r3, r7, #32
 8001df2:	2200      	movs	r2, #0
 8001df4:	601a      	str	r2, [r3, #0]
 8001df6:	605a      	str	r2, [r3, #4]
 8001df8:	609a      	str	r2, [r3, #8]
 8001dfa:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001dfc:	1d3b      	adds	r3, r7, #4
 8001dfe:	2200      	movs	r2, #0
 8001e00:	601a      	str	r2, [r3, #0]
 8001e02:	605a      	str	r2, [r3, #4]
 8001e04:	609a      	str	r2, [r3, #8]
 8001e06:	60da      	str	r2, [r3, #12]
 8001e08:	611a      	str	r2, [r3, #16]
 8001e0a:	615a      	str	r2, [r3, #20]
 8001e0c:	619a      	str	r2, [r3, #24]

  htim12.Instance = TIM12;
 8001e0e:	4b25      	ldr	r3, [pc, #148]	; (8001ea4 <MX_TIM12_Init+0xbc>)
 8001e10:	4a25      	ldr	r2, [pc, #148]	; (8001ea8 <MX_TIM12_Init+0xc0>)
 8001e12:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 84;
 8001e14:	4b23      	ldr	r3, [pc, #140]	; (8001ea4 <MX_TIM12_Init+0xbc>)
 8001e16:	2254      	movs	r2, #84	; 0x54
 8001e18:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e1a:	4b22      	ldr	r3, [pc, #136]	; (8001ea4 <MX_TIM12_Init+0xbc>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 1000;
 8001e20:	4b20      	ldr	r3, [pc, #128]	; (8001ea4 <MX_TIM12_Init+0xbc>)
 8001e22:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001e26:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e28:	4b1e      	ldr	r3, [pc, #120]	; (8001ea4 <MX_TIM12_Init+0xbc>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e2e:	4b1d      	ldr	r3, [pc, #116]	; (8001ea4 <MX_TIM12_Init+0xbc>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8001e34:	481b      	ldr	r0, [pc, #108]	; (8001ea4 <MX_TIM12_Init+0xbc>)
 8001e36:	f003 ffd7 	bl	8005de8 <HAL_TIM_Base_Init>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d001      	beq.n	8001e44 <MX_TIM12_Init+0x5c>
  {
    Error_Handler();
 8001e40:	f7ff fd40 	bl	80018c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e48:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8001e4a:	f107 0320 	add.w	r3, r7, #32
 8001e4e:	4619      	mov	r1, r3
 8001e50:	4814      	ldr	r0, [pc, #80]	; (8001ea4 <MX_TIM12_Init+0xbc>)
 8001e52:	f004 fa4f 	bl	80062f4 <HAL_TIM_ConfigClockSource>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d001      	beq.n	8001e60 <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 8001e5c:	f7ff fd32 	bl	80018c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001e60:	4810      	ldr	r0, [pc, #64]	; (8001ea4 <MX_TIM12_Init+0xbc>)
 8001e62:	f004 f810 	bl	8005e86 <HAL_TIM_PWM_Init>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d001      	beq.n	8001e70 <MX_TIM12_Init+0x88>
  {
    Error_Handler();
 8001e6c:	f7ff fd2a 	bl	80018c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e70:	2360      	movs	r3, #96	; 0x60
 8001e72:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001e74:	2300      	movs	r3, #0
 8001e76:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e80:	1d3b      	adds	r3, r7, #4
 8001e82:	2200      	movs	r2, #0
 8001e84:	4619      	mov	r1, r3
 8001e86:	4807      	ldr	r0, [pc, #28]	; (8001ea4 <MX_TIM12_Init+0xbc>)
 8001e88:	f004 f96e 	bl	8006168 <HAL_TIM_PWM_ConfigChannel>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d001      	beq.n	8001e96 <MX_TIM12_Init+0xae>
  {
    Error_Handler();
 8001e92:	f7ff fd17 	bl	80018c4 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim12);
 8001e96:	4803      	ldr	r0, [pc, #12]	; (8001ea4 <MX_TIM12_Init+0xbc>)
 8001e98:	f000 f84c 	bl	8001f34 <HAL_TIM_MspPostInit>

}
 8001e9c:	bf00      	nop
 8001e9e:	3730      	adds	r7, #48	; 0x30
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	20009a68 	.word	0x20009a68
 8001ea8:	40001800 	.word	0x40001800

08001eac <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b085      	sub	sp, #20
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM4)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a0b      	ldr	r2, [pc, #44]	; (8001ee8 <HAL_TIM_PWM_MspInit+0x3c>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d10d      	bne.n	8001eda <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	60fb      	str	r3, [r7, #12]
 8001ec2:	4b0a      	ldr	r3, [pc, #40]	; (8001eec <HAL_TIM_PWM_MspInit+0x40>)
 8001ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec6:	4a09      	ldr	r2, [pc, #36]	; (8001eec <HAL_TIM_PWM_MspInit+0x40>)
 8001ec8:	f043 0304 	orr.w	r3, r3, #4
 8001ecc:	6413      	str	r3, [r2, #64]	; 0x40
 8001ece:	4b07      	ldr	r3, [pc, #28]	; (8001eec <HAL_TIM_PWM_MspInit+0x40>)
 8001ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed2:	f003 0304 	and.w	r3, r3, #4
 8001ed6:	60fb      	str	r3, [r7, #12]
 8001ed8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001eda:	bf00      	nop
 8001edc:	3714      	adds	r7, #20
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	40000800 	.word	0x40000800
 8001eec:	40023800 	.word	0x40023800

08001ef0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b085      	sub	sp, #20
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM12)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a0b      	ldr	r2, [pc, #44]	; (8001f2c <HAL_TIM_Base_MspInit+0x3c>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d10d      	bne.n	8001f1e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* TIM12 clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 8001f02:	2300      	movs	r3, #0
 8001f04:	60fb      	str	r3, [r7, #12]
 8001f06:	4b0a      	ldr	r3, [pc, #40]	; (8001f30 <HAL_TIM_Base_MspInit+0x40>)
 8001f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0a:	4a09      	ldr	r2, [pc, #36]	; (8001f30 <HAL_TIM_Base_MspInit+0x40>)
 8001f0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f10:	6413      	str	r3, [r2, #64]	; 0x40
 8001f12:	4b07      	ldr	r3, [pc, #28]	; (8001f30 <HAL_TIM_Base_MspInit+0x40>)
 8001f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f1a:	60fb      	str	r3, [r7, #12]
 8001f1c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 8001f1e:	bf00      	nop
 8001f20:	3714      	adds	r7, #20
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr
 8001f2a:	bf00      	nop
 8001f2c:	40001800 	.word	0x40001800
 8001f30:	40023800 	.word	0x40023800

08001f34 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b08a      	sub	sp, #40	; 0x28
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f3c:	f107 0314 	add.w	r3, r7, #20
 8001f40:	2200      	movs	r2, #0
 8001f42:	601a      	str	r2, [r3, #0]
 8001f44:	605a      	str	r2, [r3, #4]
 8001f46:	609a      	str	r2, [r3, #8]
 8001f48:	60da      	str	r2, [r3, #12]
 8001f4a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a24      	ldr	r2, [pc, #144]	; (8001fe4 <HAL_TIM_MspPostInit+0xb0>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d11f      	bne.n	8001f96 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f56:	2300      	movs	r3, #0
 8001f58:	613b      	str	r3, [r7, #16]
 8001f5a:	4b23      	ldr	r3, [pc, #140]	; (8001fe8 <HAL_TIM_MspPostInit+0xb4>)
 8001f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5e:	4a22      	ldr	r2, [pc, #136]	; (8001fe8 <HAL_TIM_MspPostInit+0xb4>)
 8001f60:	f043 0308 	orr.w	r3, r3, #8
 8001f64:	6313      	str	r3, [r2, #48]	; 0x30
 8001f66:	4b20      	ldr	r3, [pc, #128]	; (8001fe8 <HAL_TIM_MspPostInit+0xb4>)
 8001f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6a:	f003 0308 	and.w	r3, r3, #8
 8001f6e:	613b      	str	r3, [r7, #16]
 8001f70:	693b      	ldr	r3, [r7, #16]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001f72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f78:	2302      	movs	r3, #2
 8001f7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f80:	2300      	movs	r3, #0
 8001f82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001f84:	2302      	movs	r3, #2
 8001f86:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f88:	f107 0314 	add.w	r3, r7, #20
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	4817      	ldr	r0, [pc, #92]	; (8001fec <HAL_TIM_MspPostInit+0xb8>)
 8001f90:	f003 f86a 	bl	8005068 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8001f94:	e022      	b.n	8001fdc <HAL_TIM_MspPostInit+0xa8>
  else if(timHandle->Instance==TIM12)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a15      	ldr	r2, [pc, #84]	; (8001ff0 <HAL_TIM_MspPostInit+0xbc>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d11d      	bne.n	8001fdc <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	60fb      	str	r3, [r7, #12]
 8001fa4:	4b10      	ldr	r3, [pc, #64]	; (8001fe8 <HAL_TIM_MspPostInit+0xb4>)
 8001fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa8:	4a0f      	ldr	r2, [pc, #60]	; (8001fe8 <HAL_TIM_MspPostInit+0xb4>)
 8001faa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fae:	6313      	str	r3, [r2, #48]	; 0x30
 8001fb0:	4b0d      	ldr	r3, [pc, #52]	; (8001fe8 <HAL_TIM_MspPostInit+0xb4>)
 8001fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fb8:	60fb      	str	r3, [r7, #12]
 8001fba:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001fbc:	2340      	movs	r3, #64	; 0x40
 8001fbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fc0:	2302      	movs	r3, #2
 8001fc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8001fcc:	2309      	movs	r3, #9
 8001fce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001fd0:	f107 0314 	add.w	r3, r7, #20
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	4807      	ldr	r0, [pc, #28]	; (8001ff4 <HAL_TIM_MspPostInit+0xc0>)
 8001fd8:	f003 f846 	bl	8005068 <HAL_GPIO_Init>
}
 8001fdc:	bf00      	nop
 8001fde:	3728      	adds	r7, #40	; 0x28
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	40000800 	.word	0x40000800
 8001fe8:	40023800 	.word	0x40023800
 8001fec:	40020c00 	.word	0x40020c00
 8001ff0:	40001800 	.word	0x40001800
 8001ff4:	40021c00 	.word	0x40021c00

08001ff8 <MX_UART7_Init>:
DMA_HandleTypeDef hdma_usart1_rx;
DMA_HandleTypeDef hdma_usart6_rx;

/* UART7 init function */
void MX_UART7_Init(void)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	af00      	add	r7, sp, #0

  huart7.Instance = UART7;
 8001ffc:	4b11      	ldr	r3, [pc, #68]	; (8002044 <MX_UART7_Init+0x4c>)
 8001ffe:	4a12      	ldr	r2, [pc, #72]	; (8002048 <MX_UART7_Init+0x50>)
 8002000:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8002002:	4b10      	ldr	r3, [pc, #64]	; (8002044 <MX_UART7_Init+0x4c>)
 8002004:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002008:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 800200a:	4b0e      	ldr	r3, [pc, #56]	; (8002044 <MX_UART7_Init+0x4c>)
 800200c:	2200      	movs	r2, #0
 800200e:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8002010:	4b0c      	ldr	r3, [pc, #48]	; (8002044 <MX_UART7_Init+0x4c>)
 8002012:	2200      	movs	r2, #0
 8002014:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8002016:	4b0b      	ldr	r3, [pc, #44]	; (8002044 <MX_UART7_Init+0x4c>)
 8002018:	2200      	movs	r2, #0
 800201a:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 800201c:	4b09      	ldr	r3, [pc, #36]	; (8002044 <MX_UART7_Init+0x4c>)
 800201e:	220c      	movs	r2, #12
 8002020:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002022:	4b08      	ldr	r3, [pc, #32]	; (8002044 <MX_UART7_Init+0x4c>)
 8002024:	2200      	movs	r2, #0
 8002026:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8002028:	4b06      	ldr	r3, [pc, #24]	; (8002044 <MX_UART7_Init+0x4c>)
 800202a:	2200      	movs	r2, #0
 800202c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart7) != HAL_OK)
 800202e:	4805      	ldr	r0, [pc, #20]	; (8002044 <MX_UART7_Init+0x4c>)
 8002030:	f004 fdec 	bl	8006c0c <HAL_UART_Init>
 8002034:	4603      	mov	r3, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d001      	beq.n	800203e <MX_UART7_Init+0x46>
  {
    Error_Handler();
 800203a:	f7ff fc43 	bl	80018c4 <Error_Handler>
  }

}
 800203e:	bf00      	nop
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	20009b08 	.word	0x20009b08
 8002048:	40007800 	.word	0x40007800

0800204c <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8002050:	4b11      	ldr	r3, [pc, #68]	; (8002098 <MX_USART1_UART_Init+0x4c>)
 8002052:	4a12      	ldr	r2, [pc, #72]	; (800209c <MX_USART1_UART_Init+0x50>)
 8002054:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 100000;
 8002056:	4b10      	ldr	r3, [pc, #64]	; (8002098 <MX_USART1_UART_Init+0x4c>)
 8002058:	4a11      	ldr	r2, [pc, #68]	; (80020a0 <MX_USART1_UART_Init+0x54>)
 800205a:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 800205c:	4b0e      	ldr	r3, [pc, #56]	; (8002098 <MX_USART1_UART_Init+0x4c>)
 800205e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002062:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002064:	4b0c      	ldr	r3, [pc, #48]	; (8002098 <MX_USART1_UART_Init+0x4c>)
 8002066:	2200      	movs	r2, #0
 8002068:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 800206a:	4b0b      	ldr	r3, [pc, #44]	; (8002098 <MX_USART1_UART_Init+0x4c>)
 800206c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002070:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_RX;
 8002072:	4b09      	ldr	r3, [pc, #36]	; (8002098 <MX_USART1_UART_Init+0x4c>)
 8002074:	2204      	movs	r2, #4
 8002076:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002078:	4b07      	ldr	r3, [pc, #28]	; (8002098 <MX_USART1_UART_Init+0x4c>)
 800207a:	2200      	movs	r2, #0
 800207c:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800207e:	4b06      	ldr	r3, [pc, #24]	; (8002098 <MX_USART1_UART_Init+0x4c>)
 8002080:	2200      	movs	r2, #0
 8002082:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002084:	4804      	ldr	r0, [pc, #16]	; (8002098 <MX_USART1_UART_Init+0x4c>)
 8002086:	f004 fdc1 	bl	8006c0c <HAL_UART_Init>
 800208a:	4603      	mov	r3, r0
 800208c:	2b00      	cmp	r3, #0
 800208e:	d001      	beq.n	8002094 <MX_USART1_UART_Init+0x48>
  {
    Error_Handler();
 8002090:	f7ff fc18 	bl	80018c4 <Error_Handler>
  }

}
 8002094:	bf00      	nop
 8002096:	bd80      	pop	{r7, pc}
 8002098:	20009c08 	.word	0x20009c08
 800209c:	40011000 	.word	0x40011000
 80020a0:	000186a0 	.word	0x000186a0

080020a4 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	af00      	add	r7, sp, #0

  huart6.Instance = USART6;
 80020a8:	4b11      	ldr	r3, [pc, #68]	; (80020f0 <MX_USART6_UART_Init+0x4c>)
 80020aa:	4a12      	ldr	r2, [pc, #72]	; (80020f4 <MX_USART6_UART_Init+0x50>)
 80020ac:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80020ae:	4b10      	ldr	r3, [pc, #64]	; (80020f0 <MX_USART6_UART_Init+0x4c>)
 80020b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80020b4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80020b6:	4b0e      	ldr	r3, [pc, #56]	; (80020f0 <MX_USART6_UART_Init+0x4c>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80020bc:	4b0c      	ldr	r3, [pc, #48]	; (80020f0 <MX_USART6_UART_Init+0x4c>)
 80020be:	2200      	movs	r2, #0
 80020c0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80020c2:	4b0b      	ldr	r3, [pc, #44]	; (80020f0 <MX_USART6_UART_Init+0x4c>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_RX;
 80020c8:	4b09      	ldr	r3, [pc, #36]	; (80020f0 <MX_USART6_UART_Init+0x4c>)
 80020ca:	2204      	movs	r2, #4
 80020cc:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020ce:	4b08      	ldr	r3, [pc, #32]	; (80020f0 <MX_USART6_UART_Init+0x4c>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80020d4:	4b06      	ldr	r3, [pc, #24]	; (80020f0 <MX_USART6_UART_Init+0x4c>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80020da:	4805      	ldr	r0, [pc, #20]	; (80020f0 <MX_USART6_UART_Init+0x4c>)
 80020dc:	f004 fd96 	bl	8006c0c <HAL_UART_Init>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d001      	beq.n	80020ea <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80020e6:	f7ff fbed 	bl	80018c4 <Error_Handler>
  }

}
 80020ea:	bf00      	nop
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	20009c48 	.word	0x20009c48
 80020f4:	40011400 	.word	0x40011400

080020f8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b08e      	sub	sp, #56	; 0x38
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002100:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002104:	2200      	movs	r2, #0
 8002106:	601a      	str	r2, [r3, #0]
 8002108:	605a      	str	r2, [r3, #4]
 800210a:	609a      	str	r2, [r3, #8]
 800210c:	60da      	str	r2, [r3, #12]
 800210e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART7)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a74      	ldr	r2, [pc, #464]	; (80022e8 <HAL_UART_MspInit+0x1f0>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d164      	bne.n	80021e4 <HAL_UART_MspInit+0xec>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* UART7 clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 800211a:	2300      	movs	r3, #0
 800211c:	623b      	str	r3, [r7, #32]
 800211e:	4b73      	ldr	r3, [pc, #460]	; (80022ec <HAL_UART_MspInit+0x1f4>)
 8002120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002122:	4a72      	ldr	r2, [pc, #456]	; (80022ec <HAL_UART_MspInit+0x1f4>)
 8002124:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002128:	6413      	str	r3, [r2, #64]	; 0x40
 800212a:	4b70      	ldr	r3, [pc, #448]	; (80022ec <HAL_UART_MspInit+0x1f4>)
 800212c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002132:	623b      	str	r3, [r7, #32]
 8002134:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002136:	2300      	movs	r3, #0
 8002138:	61fb      	str	r3, [r7, #28]
 800213a:	4b6c      	ldr	r3, [pc, #432]	; (80022ec <HAL_UART_MspInit+0x1f4>)
 800213c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213e:	4a6b      	ldr	r2, [pc, #428]	; (80022ec <HAL_UART_MspInit+0x1f4>)
 8002140:	f043 0310 	orr.w	r3, r3, #16
 8002144:	6313      	str	r3, [r2, #48]	; 0x30
 8002146:	4b69      	ldr	r3, [pc, #420]	; (80022ec <HAL_UART_MspInit+0x1f4>)
 8002148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214a:	f003 0310 	and.w	r3, r3, #16
 800214e:	61fb      	str	r3, [r7, #28]
 8002150:	69fb      	ldr	r3, [r7, #28]
    /**UART7 GPIO Configuration
    PE8     ------> UART7_TX
    PE7     ------> UART7_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_7;
 8002152:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002156:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002158:	2302      	movs	r3, #2
 800215a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800215c:	2301      	movs	r3, #1
 800215e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002160:	2303      	movs	r3, #3
 8002162:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8002164:	2308      	movs	r3, #8
 8002166:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002168:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800216c:	4619      	mov	r1, r3
 800216e:	4860      	ldr	r0, [pc, #384]	; (80022f0 <HAL_UART_MspInit+0x1f8>)
 8002170:	f002 ff7a 	bl	8005068 <HAL_GPIO_Init>

    /* UART7 DMA Init */
    /* UART7_RX Init */
    hdma_uart7_rx.Instance = DMA1_Stream3;
 8002174:	4b5f      	ldr	r3, [pc, #380]	; (80022f4 <HAL_UART_MspInit+0x1fc>)
 8002176:	4a60      	ldr	r2, [pc, #384]	; (80022f8 <HAL_UART_MspInit+0x200>)
 8002178:	601a      	str	r2, [r3, #0]
    hdma_uart7_rx.Init.Channel = DMA_CHANNEL_5;
 800217a:	4b5e      	ldr	r3, [pc, #376]	; (80022f4 <HAL_UART_MspInit+0x1fc>)
 800217c:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8002180:	605a      	str	r2, [r3, #4]
    hdma_uart7_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002182:	4b5c      	ldr	r3, [pc, #368]	; (80022f4 <HAL_UART_MspInit+0x1fc>)
 8002184:	2200      	movs	r2, #0
 8002186:	609a      	str	r2, [r3, #8]
    hdma_uart7_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002188:	4b5a      	ldr	r3, [pc, #360]	; (80022f4 <HAL_UART_MspInit+0x1fc>)
 800218a:	2200      	movs	r2, #0
 800218c:	60da      	str	r2, [r3, #12]
    hdma_uart7_rx.Init.MemInc = DMA_MINC_ENABLE;
 800218e:	4b59      	ldr	r3, [pc, #356]	; (80022f4 <HAL_UART_MspInit+0x1fc>)
 8002190:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002194:	611a      	str	r2, [r3, #16]
    hdma_uart7_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002196:	4b57      	ldr	r3, [pc, #348]	; (80022f4 <HAL_UART_MspInit+0x1fc>)
 8002198:	2200      	movs	r2, #0
 800219a:	615a      	str	r2, [r3, #20]
    hdma_uart7_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800219c:	4b55      	ldr	r3, [pc, #340]	; (80022f4 <HAL_UART_MspInit+0x1fc>)
 800219e:	2200      	movs	r2, #0
 80021a0:	619a      	str	r2, [r3, #24]
    hdma_uart7_rx.Init.Mode = DMA_CIRCULAR;
 80021a2:	4b54      	ldr	r3, [pc, #336]	; (80022f4 <HAL_UART_MspInit+0x1fc>)
 80021a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80021a8:	61da      	str	r2, [r3, #28]
    hdma_uart7_rx.Init.Priority = DMA_PRIORITY_LOW;
 80021aa:	4b52      	ldr	r3, [pc, #328]	; (80022f4 <HAL_UART_MspInit+0x1fc>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	621a      	str	r2, [r3, #32]
    hdma_uart7_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80021b0:	4b50      	ldr	r3, [pc, #320]	; (80022f4 <HAL_UART_MspInit+0x1fc>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart7_rx) != HAL_OK)
 80021b6:	484f      	ldr	r0, [pc, #316]	; (80022f4 <HAL_UART_MspInit+0x1fc>)
 80021b8:	f002 fbc4 	bl	8004944 <HAL_DMA_Init>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d001      	beq.n	80021c6 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80021c2:	f7ff fb7f 	bl	80018c4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart7_rx);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4a4a      	ldr	r2, [pc, #296]	; (80022f4 <HAL_UART_MspInit+0x1fc>)
 80021ca:	635a      	str	r2, [r3, #52]	; 0x34
 80021cc:	4a49      	ldr	r2, [pc, #292]	; (80022f4 <HAL_UART_MspInit+0x1fc>)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART7 interrupt Init */
    HAL_NVIC_SetPriority(UART7_IRQn, 5, 0);
 80021d2:	2200      	movs	r2, #0
 80021d4:	2105      	movs	r1, #5
 80021d6:	2052      	movs	r0, #82	; 0x52
 80021d8:	f002 fb8a 	bl	80048f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 80021dc:	2052      	movs	r0, #82	; 0x52
 80021de:	f002 fba3 	bl	8004928 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80021e2:	e0fe      	b.n	80023e2 <HAL_UART_MspInit+0x2ea>
  else if(uartHandle->Instance==USART1)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a44      	ldr	r2, [pc, #272]	; (80022fc <HAL_UART_MspInit+0x204>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	f040 8090 	bne.w	8002310 <HAL_UART_MspInit+0x218>
    __HAL_RCC_USART1_CLK_ENABLE();
 80021f0:	2300      	movs	r3, #0
 80021f2:	61bb      	str	r3, [r7, #24]
 80021f4:	4b3d      	ldr	r3, [pc, #244]	; (80022ec <HAL_UART_MspInit+0x1f4>)
 80021f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021f8:	4a3c      	ldr	r2, [pc, #240]	; (80022ec <HAL_UART_MspInit+0x1f4>)
 80021fa:	f043 0310 	orr.w	r3, r3, #16
 80021fe:	6453      	str	r3, [r2, #68]	; 0x44
 8002200:	4b3a      	ldr	r3, [pc, #232]	; (80022ec <HAL_UART_MspInit+0x1f4>)
 8002202:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002204:	f003 0310 	and.w	r3, r3, #16
 8002208:	61bb      	str	r3, [r7, #24]
 800220a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800220c:	2300      	movs	r3, #0
 800220e:	617b      	str	r3, [r7, #20]
 8002210:	4b36      	ldr	r3, [pc, #216]	; (80022ec <HAL_UART_MspInit+0x1f4>)
 8002212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002214:	4a35      	ldr	r2, [pc, #212]	; (80022ec <HAL_UART_MspInit+0x1f4>)
 8002216:	f043 0302 	orr.w	r3, r3, #2
 800221a:	6313      	str	r3, [r2, #48]	; 0x30
 800221c:	4b33      	ldr	r3, [pc, #204]	; (80022ec <HAL_UART_MspInit+0x1f4>)
 800221e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002220:	f003 0302 	and.w	r3, r3, #2
 8002224:	617b      	str	r3, [r7, #20]
 8002226:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002228:	2300      	movs	r3, #0
 800222a:	613b      	str	r3, [r7, #16]
 800222c:	4b2f      	ldr	r3, [pc, #188]	; (80022ec <HAL_UART_MspInit+0x1f4>)
 800222e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002230:	4a2e      	ldr	r2, [pc, #184]	; (80022ec <HAL_UART_MspInit+0x1f4>)
 8002232:	f043 0301 	orr.w	r3, r3, #1
 8002236:	6313      	str	r3, [r2, #48]	; 0x30
 8002238:	4b2c      	ldr	r3, [pc, #176]	; (80022ec <HAL_UART_MspInit+0x1f4>)
 800223a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223c:	f003 0301 	and.w	r3, r3, #1
 8002240:	613b      	str	r3, [r7, #16]
 8002242:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002244:	2380      	movs	r3, #128	; 0x80
 8002246:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002248:	2302      	movs	r3, #2
 800224a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800224c:	2300      	movs	r3, #0
 800224e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002250:	2303      	movs	r3, #3
 8002252:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002254:	2307      	movs	r3, #7
 8002256:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002258:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800225c:	4619      	mov	r1, r3
 800225e:	4828      	ldr	r0, [pc, #160]	; (8002300 <HAL_UART_MspInit+0x208>)
 8002260:	f002 ff02 	bl	8005068 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002264:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002268:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800226a:	2302      	movs	r3, #2
 800226c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800226e:	2300      	movs	r3, #0
 8002270:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002272:	2303      	movs	r3, #3
 8002274:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002276:	2307      	movs	r3, #7
 8002278:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800227a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800227e:	4619      	mov	r1, r3
 8002280:	4820      	ldr	r0, [pc, #128]	; (8002304 <HAL_UART_MspInit+0x20c>)
 8002282:	f002 fef1 	bl	8005068 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002286:	4b20      	ldr	r3, [pc, #128]	; (8002308 <HAL_UART_MspInit+0x210>)
 8002288:	4a20      	ldr	r2, [pc, #128]	; (800230c <HAL_UART_MspInit+0x214>)
 800228a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800228c:	4b1e      	ldr	r3, [pc, #120]	; (8002308 <HAL_UART_MspInit+0x210>)
 800228e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002292:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002294:	4b1c      	ldr	r3, [pc, #112]	; (8002308 <HAL_UART_MspInit+0x210>)
 8002296:	2200      	movs	r2, #0
 8002298:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800229a:	4b1b      	ldr	r3, [pc, #108]	; (8002308 <HAL_UART_MspInit+0x210>)
 800229c:	2200      	movs	r2, #0
 800229e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80022a0:	4b19      	ldr	r3, [pc, #100]	; (8002308 <HAL_UART_MspInit+0x210>)
 80022a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80022a6:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80022a8:	4b17      	ldr	r3, [pc, #92]	; (8002308 <HAL_UART_MspInit+0x210>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80022ae:	4b16      	ldr	r3, [pc, #88]	; (8002308 <HAL_UART_MspInit+0x210>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80022b4:	4b14      	ldr	r3, [pc, #80]	; (8002308 <HAL_UART_MspInit+0x210>)
 80022b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80022ba:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80022bc:	4b12      	ldr	r3, [pc, #72]	; (8002308 <HAL_UART_MspInit+0x210>)
 80022be:	2200      	movs	r2, #0
 80022c0:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80022c2:	4b11      	ldr	r3, [pc, #68]	; (8002308 <HAL_UART_MspInit+0x210>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80022c8:	480f      	ldr	r0, [pc, #60]	; (8002308 <HAL_UART_MspInit+0x210>)
 80022ca:	f002 fb3b 	bl	8004944 <HAL_DMA_Init>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d001      	beq.n	80022d8 <HAL_UART_MspInit+0x1e0>
      Error_Handler();
 80022d4:	f7ff faf6 	bl	80018c4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	4a0b      	ldr	r2, [pc, #44]	; (8002308 <HAL_UART_MspInit+0x210>)
 80022dc:	635a      	str	r2, [r3, #52]	; 0x34
 80022de:	4a0a      	ldr	r2, [pc, #40]	; (8002308 <HAL_UART_MspInit+0x210>)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6393      	str	r3, [r2, #56]	; 0x38
}
 80022e4:	e07d      	b.n	80023e2 <HAL_UART_MspInit+0x2ea>
 80022e6:	bf00      	nop
 80022e8:	40007800 	.word	0x40007800
 80022ec:	40023800 	.word	0x40023800
 80022f0:	40021000 	.word	0x40021000
 80022f4:	20009b48 	.word	0x20009b48
 80022f8:	40026058 	.word	0x40026058
 80022fc:	40011000 	.word	0x40011000
 8002300:	40020400 	.word	0x40020400
 8002304:	40020000 	.word	0x40020000
 8002308:	20009ba8 	.word	0x20009ba8
 800230c:	40026440 	.word	0x40026440
  else if(uartHandle->Instance==USART6)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a35      	ldr	r2, [pc, #212]	; (80023ec <HAL_UART_MspInit+0x2f4>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d163      	bne.n	80023e2 <HAL_UART_MspInit+0x2ea>
    __HAL_RCC_USART6_CLK_ENABLE();
 800231a:	2300      	movs	r3, #0
 800231c:	60fb      	str	r3, [r7, #12]
 800231e:	4b34      	ldr	r3, [pc, #208]	; (80023f0 <HAL_UART_MspInit+0x2f8>)
 8002320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002322:	4a33      	ldr	r2, [pc, #204]	; (80023f0 <HAL_UART_MspInit+0x2f8>)
 8002324:	f043 0320 	orr.w	r3, r3, #32
 8002328:	6453      	str	r3, [r2, #68]	; 0x44
 800232a:	4b31      	ldr	r3, [pc, #196]	; (80023f0 <HAL_UART_MspInit+0x2f8>)
 800232c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800232e:	f003 0320 	and.w	r3, r3, #32
 8002332:	60fb      	str	r3, [r7, #12]
 8002334:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002336:	2300      	movs	r3, #0
 8002338:	60bb      	str	r3, [r7, #8]
 800233a:	4b2d      	ldr	r3, [pc, #180]	; (80023f0 <HAL_UART_MspInit+0x2f8>)
 800233c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233e:	4a2c      	ldr	r2, [pc, #176]	; (80023f0 <HAL_UART_MspInit+0x2f8>)
 8002340:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002344:	6313      	str	r3, [r2, #48]	; 0x30
 8002346:	4b2a      	ldr	r3, [pc, #168]	; (80023f0 <HAL_UART_MspInit+0x2f8>)
 8002348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800234e:	60bb      	str	r3, [r7, #8]
 8002350:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_9;
 8002352:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8002356:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002358:	2302      	movs	r3, #2
 800235a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800235c:	2300      	movs	r3, #0
 800235e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002360:	2303      	movs	r3, #3
 8002362:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002364:	2308      	movs	r3, #8
 8002366:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002368:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800236c:	4619      	mov	r1, r3
 800236e:	4821      	ldr	r0, [pc, #132]	; (80023f4 <HAL_UART_MspInit+0x2fc>)
 8002370:	f002 fe7a 	bl	8005068 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8002374:	4b20      	ldr	r3, [pc, #128]	; (80023f8 <HAL_UART_MspInit+0x300>)
 8002376:	4a21      	ldr	r2, [pc, #132]	; (80023fc <HAL_UART_MspInit+0x304>)
 8002378:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 800237a:	4b1f      	ldr	r3, [pc, #124]	; (80023f8 <HAL_UART_MspInit+0x300>)
 800237c:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8002380:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002382:	4b1d      	ldr	r3, [pc, #116]	; (80023f8 <HAL_UART_MspInit+0x300>)
 8002384:	2200      	movs	r2, #0
 8002386:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002388:	4b1b      	ldr	r3, [pc, #108]	; (80023f8 <HAL_UART_MspInit+0x300>)
 800238a:	2200      	movs	r2, #0
 800238c:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 800238e:	4b1a      	ldr	r3, [pc, #104]	; (80023f8 <HAL_UART_MspInit+0x300>)
 8002390:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002394:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002396:	4b18      	ldr	r3, [pc, #96]	; (80023f8 <HAL_UART_MspInit+0x300>)
 8002398:	2200      	movs	r2, #0
 800239a:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800239c:	4b16      	ldr	r3, [pc, #88]	; (80023f8 <HAL_UART_MspInit+0x300>)
 800239e:	2200      	movs	r2, #0
 80023a0:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 80023a2:	4b15      	ldr	r3, [pc, #84]	; (80023f8 <HAL_UART_MspInit+0x300>)
 80023a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80023a8:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 80023aa:	4b13      	ldr	r3, [pc, #76]	; (80023f8 <HAL_UART_MspInit+0x300>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80023b0:	4b11      	ldr	r3, [pc, #68]	; (80023f8 <HAL_UART_MspInit+0x300>)
 80023b2:	2200      	movs	r2, #0
 80023b4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 80023b6:	4810      	ldr	r0, [pc, #64]	; (80023f8 <HAL_UART_MspInit+0x300>)
 80023b8:	f002 fac4 	bl	8004944 <HAL_DMA_Init>
 80023bc:	4603      	mov	r3, r0
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d001      	beq.n	80023c6 <HAL_UART_MspInit+0x2ce>
      Error_Handler();
 80023c2:	f7ff fa7f 	bl	80018c4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4a0b      	ldr	r2, [pc, #44]	; (80023f8 <HAL_UART_MspInit+0x300>)
 80023ca:	635a      	str	r2, [r3, #52]	; 0x34
 80023cc:	4a0a      	ldr	r2, [pc, #40]	; (80023f8 <HAL_UART_MspInit+0x300>)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 80023d2:	2200      	movs	r2, #0
 80023d4:	2105      	movs	r1, #5
 80023d6:	2047      	movs	r0, #71	; 0x47
 80023d8:	f002 fa8a 	bl	80048f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80023dc:	2047      	movs	r0, #71	; 0x47
 80023de:	f002 faa3 	bl	8004928 <HAL_NVIC_EnableIRQ>
}
 80023e2:	bf00      	nop
 80023e4:	3738      	adds	r7, #56	; 0x38
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	40011400 	.word	0x40011400
 80023f0:	40023800 	.word	0x40023800
 80023f4:	40021800 	.word	0x40021800
 80023f8:	20009aa8 	.word	0x20009aa8
 80023fc:	40026428 	.word	0x40026428

08002400 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002400:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002438 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002404:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002406:	e003      	b.n	8002410 <LoopCopyDataInit>

08002408 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002408:	4b0c      	ldr	r3, [pc, #48]	; (800243c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800240a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800240c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800240e:	3104      	adds	r1, #4

08002410 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002410:	480b      	ldr	r0, [pc, #44]	; (8002440 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002412:	4b0c      	ldr	r3, [pc, #48]	; (8002444 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002414:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002416:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002418:	d3f6      	bcc.n	8002408 <CopyDataInit>
  ldr  r2, =_sbss
 800241a:	4a0b      	ldr	r2, [pc, #44]	; (8002448 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800241c:	e002      	b.n	8002424 <LoopFillZerobss>

0800241e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800241e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002420:	f842 3b04 	str.w	r3, [r2], #4

08002424 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002424:	4b09      	ldr	r3, [pc, #36]	; (800244c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002426:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002428:	d3f9      	bcc.n	800241e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800242a:	f7ff fc6d 	bl	8001d08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800242e:	f008 ffb5 	bl	800b39c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002432:	f7ff f9a7 	bl	8001784 <main>
  bx  lr    
 8002436:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002438:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 800243c:	0800c818 	.word	0x0800c818
  ldr  r0, =_sdata
 8002440:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002444:	2000007c 	.word	0x2000007c
  ldr  r2, =_sbss
 8002448:	20000080 	.word	0x20000080
  ldr  r3, = _ebss
 800244c:	20009f20 	.word	0x20009f20

08002450 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002450:	e7fe      	b.n	8002450 <ADC_IRQHandler>
	...

08002454 <can_ISR>:
/**
 * CAN ISR function, triggered upon RX_FIFO0_MSG_PENDING
 * converts the raw can data to the motor_data struct form as well
 */
void can_ISR(CAN_HandleTypeDef *hcan)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b094      	sub	sp, #80	; 0x50
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
	HAL_CAN_DeactivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_RX_FIFO0_FULL | CAN_IT_RX_FIFO0_OVERRUN);
 800245c:	210e      	movs	r1, #14
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f001 ff37 	bl	80042d2 <HAL_CAN_DeactivateNotification>
	if (hcan->Instance == CAN1)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a2f      	ldr	r2, [pc, #188]	; (8002528 <can_ISR+0xd4>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d129      	bne.n	80024c2 <can_ISR+0x6e>
	{
		CAN_RxHeaderTypeDef rx_msg_header;
		uint8_t rx_buffer[CAN_BUFFER_SIZE];
		can_get_msg(&hcan1, &rx_msg_header, rx_buffer);
 800246e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8002472:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002476:	4619      	mov	r1, r3
 8002478:	482c      	ldr	r0, [pc, #176]	; (800252c <can_ISR+0xd8>)
 800247a:	f7fe fd8e 	bl	8000f9a <can_get_msg>
		convert_raw_can_data(rx_msg_header.StdId, rx_buffer);
 800247e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002480:	b29b      	uxth	r3, r3
 8002482:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8002486:	4611      	mov	r1, r2
 8002488:	4618      	mov	r0, r3
 800248a:	f000 f859 	bl	8002540 <convert_raw_can_data>
		history[history_index++] = rx_msg_header.StdId;
 800248e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002490:	4b27      	ldr	r3, [pc, #156]	; (8002530 <can_ISR+0xdc>)
 8002492:	881b      	ldrh	r3, [r3, #0]
 8002494:	1c5a      	adds	r2, r3, #1
 8002496:	b290      	uxth	r0, r2
 8002498:	4a25      	ldr	r2, [pc, #148]	; (8002530 <can_ISR+0xdc>)
 800249a:	8010      	strh	r0, [r2, #0]
 800249c:	461a      	mov	r2, r3
 800249e:	b289      	uxth	r1, r1
 80024a0:	4b24      	ldr	r3, [pc, #144]	; (8002534 <can_ISR+0xe0>)
 80024a2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		if (history_index >= 10000)
 80024a6:	4b22      	ldr	r3, [pc, #136]	; (8002530 <can_ISR+0xdc>)
 80024a8:	881b      	ldrh	r3, [r3, #0]
 80024aa:	f242 720f 	movw	r2, #9999	; 0x270f
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d902      	bls.n	80024b8 <can_ISR+0x64>
		{
			history_index = 0;
 80024b2:	4b1f      	ldr	r3, [pc, #124]	; (8002530 <can_ISR+0xdc>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	801a      	strh	r2, [r3, #0]
		}
		HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_RX_FIFO0_FULL	| CAN_IT_RX_FIFO0_OVERRUN);
 80024b8:	210e      	movs	r1, #14
 80024ba:	481c      	ldr	r0, [pc, #112]	; (800252c <can_ISR+0xd8>)
 80024bc:	f001 fee3 	bl	8004286 <HAL_CAN_ActivateNotification>
		}

		HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_RX_FIFO0_FULL	| CAN_IT_RX_FIFO0_OVERRUN);
		// something
	}
}
 80024c0:	e02d      	b.n	800251e <can_ISR+0xca>
	else if (hcan->Instance == CAN2)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a1c      	ldr	r2, [pc, #112]	; (8002538 <can_ISR+0xe4>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d128      	bne.n	800251e <can_ISR+0xca>
		can_get_msg(&hcan2, &rx_msg_header, rx_buffer);
 80024cc:	f107 0208 	add.w	r2, r7, #8
 80024d0:	f107 0310 	add.w	r3, r7, #16
 80024d4:	4619      	mov	r1, r3
 80024d6:	4819      	ldr	r0, [pc, #100]	; (800253c <can_ISR+0xe8>)
 80024d8:	f7fe fd5f 	bl	8000f9a <can_get_msg>
		convert_raw_can_data(rx_msg_header.StdId, rx_buffer);
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	b29b      	uxth	r3, r3
 80024e0:	f107 0208 	add.w	r2, r7, #8
 80024e4:	4611      	mov	r1, r2
 80024e6:	4618      	mov	r0, r3
 80024e8:	f000 f82a 	bl	8002540 <convert_raw_can_data>
		history[history_index++] = rx_msg_header.StdId;
 80024ec:	6939      	ldr	r1, [r7, #16]
 80024ee:	4b10      	ldr	r3, [pc, #64]	; (8002530 <can_ISR+0xdc>)
 80024f0:	881b      	ldrh	r3, [r3, #0]
 80024f2:	1c5a      	adds	r2, r3, #1
 80024f4:	b290      	uxth	r0, r2
 80024f6:	4a0e      	ldr	r2, [pc, #56]	; (8002530 <can_ISR+0xdc>)
 80024f8:	8010      	strh	r0, [r2, #0]
 80024fa:	461a      	mov	r2, r3
 80024fc:	b289      	uxth	r1, r1
 80024fe:	4b0d      	ldr	r3, [pc, #52]	; (8002534 <can_ISR+0xe0>)
 8002500:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		if (history_index >= 10000)
 8002504:	4b0a      	ldr	r3, [pc, #40]	; (8002530 <can_ISR+0xdc>)
 8002506:	881b      	ldrh	r3, [r3, #0]
 8002508:	f242 720f 	movw	r2, #9999	; 0x270f
 800250c:	4293      	cmp	r3, r2
 800250e:	d902      	bls.n	8002516 <can_ISR+0xc2>
			history_index = 0;
 8002510:	4b07      	ldr	r3, [pc, #28]	; (8002530 <can_ISR+0xdc>)
 8002512:	2200      	movs	r2, #0
 8002514:	801a      	strh	r2, [r3, #0]
		HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_RX_FIFO0_FULL	| CAN_IT_RX_FIFO0_OVERRUN);
 8002516:	210e      	movs	r1, #14
 8002518:	4808      	ldr	r0, [pc, #32]	; (800253c <can_ISR+0xe8>)
 800251a:	f001 feb4 	bl	8004286 <HAL_CAN_ActivateNotification>
}
 800251e:	bf00      	nop
 8002520:	3750      	adds	r7, #80	; 0x50
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop
 8002528:	40006400 	.word	0x40006400
 800252c:	20009874 	.word	0x20009874
 8002530:	20004ed4 	.word	0x20004ed4
 8002534:	200000b4 	.word	0x200000b4
 8002538:	40006800 	.word	0x40006800
 800253c:	2000984c 	.word	0x2000984c

08002540 <convert_raw_can_data>:
 *
 * For GM6020 motors, it recenters the motor angle data and converts it to radians.
 */

void convert_raw_can_data(uint16_t motor_id, uint8_t *rx_buffer)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b084      	sub	sp, #16
 8002544:	af00      	add	r7, sp, #0
 8002546:	4603      	mov	r3, r0
 8002548:	6039      	str	r1, [r7, #0]
 800254a:	80fb      	strh	r3, [r7, #6]
	switch(motor_id)
 800254c:	88fb      	ldrh	r3, [r7, #6]
 800254e:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 8002552:	2b09      	cmp	r3, #9
 8002554:	f200 8124 	bhi.w	80027a0 <convert_raw_can_data+0x260>
 8002558:	a201      	add	r2, pc, #4	; (adr r2, 8002560 <convert_raw_can_data+0x20>)
 800255a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800255e:	bf00      	nop
 8002560:	08002589 	.word	0x08002589
 8002564:	080027a1 	.word	0x080027a1
 8002568:	080027a1 	.word	0x080027a1
 800256c:	080027a1 	.word	0x080027a1
 8002570:	080025f1 	.word	0x080025f1
 8002574:	080025f1 	.word	0x080025f1
 8002578:	080027a1 	.word	0x080027a1
 800257c:	080027a1 	.word	0x080027a1
 8002580:	080026ad 	.word	0x080026ad
 8002584:	08002727 	.word	0x08002727
	{
		uint8_t feeder_id;
		case ID_CHASSIS:
		{
			canone_data.CHASSIS.id 					= motor_id;
 8002588:	4a88      	ldr	r2, [pc, #544]	; (80027ac <convert_raw_can_data+0x26c>)
 800258a:	88fb      	ldrh	r3, [r7, #6]
 800258c:	8013      	strh	r3, [r2, #0]
			canone_data.CHASSIS.angle				= (rx_buffer[0] << 8) | rx_buffer[1];
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	781b      	ldrb	r3, [r3, #0]
 8002592:	021b      	lsls	r3, r3, #8
 8002594:	b21a      	sxth	r2, r3
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	3301      	adds	r3, #1
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	b21b      	sxth	r3, r3
 800259e:	4313      	orrs	r3, r2
 80025a0:	b21b      	sxth	r3, r3
 80025a2:	b29a      	uxth	r2, r3
 80025a4:	4b81      	ldr	r3, [pc, #516]	; (80027ac <convert_raw_can_data+0x26c>)
 80025a6:	805a      	strh	r2, [r3, #2]
			canone_data.CHASSIS.rpm  				= (rx_buffer[2] << 8) | rx_buffer[3];
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	3302      	adds	r3, #2
 80025ac:	781b      	ldrb	r3, [r3, #0]
 80025ae:	021b      	lsls	r3, r3, #8
 80025b0:	b21a      	sxth	r2, r3
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	3303      	adds	r3, #3
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	b21b      	sxth	r3, r3
 80025ba:	4313      	orrs	r3, r2
 80025bc:	b21a      	sxth	r2, r3
 80025be:	4b7b      	ldr	r3, [pc, #492]	; (80027ac <convert_raw_can_data+0x26c>)
 80025c0:	809a      	strh	r2, [r3, #4]
			canone_data.CHASSIS.torque 				= (rx_buffer[4] << 8) | rx_buffer[5];
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	3304      	adds	r3, #4
 80025c6:	781b      	ldrb	r3, [r3, #0]
 80025c8:	021b      	lsls	r3, r3, #8
 80025ca:	b21a      	sxth	r2, r3
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	3305      	adds	r3, #5
 80025d0:	781b      	ldrb	r3, [r3, #0]
 80025d2:	b21b      	sxth	r3, r3
 80025d4:	4313      	orrs	r3, r2
 80025d6:	b21a      	sxth	r2, r3
 80025d8:	4b74      	ldr	r3, [pc, #464]	; (80027ac <convert_raw_can_data+0x26c>)
 80025da:	80da      	strh	r2, [r3, #6]
			canone_data.CHASSIS.temp 				= (rx_buffer[6]);
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	799a      	ldrb	r2, [r3, #6]
 80025e0:	4b72      	ldr	r3, [pc, #456]	; (80027ac <convert_raw_can_data+0x26c>)
 80025e2:	721a      	strb	r2, [r3, #8]
			osEventFlagsSet(chassis_data_flag, 0x10);
 80025e4:	4b72      	ldr	r3, [pc, #456]	; (80027b0 <convert_raw_can_data+0x270>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	2110      	movs	r1, #16
 80025ea:	4618      	mov	r0, r3
 80025ec:	f005 fca8 	bl	8007f40 <osEventFlagsSet>
		}

		case ID_FEEDER_R:
		case ID_FEEDER_L:
		{
			feeder_id = motor_id - 0x205;
 80025f0:	88fb      	ldrh	r3, [r7, #6]
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	3b05      	subs	r3, #5
 80025f6:	73fb      	strb	r3, [r7, #15]
			canone_data.FEEDER[feeder_id].id 			= motor_id;
 80025f8:	7bfb      	ldrb	r3, [r7, #15]
 80025fa:	4a6c      	ldr	r2, [pc, #432]	; (80027ac <convert_raw_can_data+0x26c>)
 80025fc:	3301      	adds	r3, #1
 80025fe:	2168      	movs	r1, #104	; 0x68
 8002600:	fb01 f303 	mul.w	r3, r1, r3
 8002604:	4413      	add	r3, r2
 8002606:	88fa      	ldrh	r2, [r7, #6]
 8002608:	801a      	strh	r2, [r3, #0]
			canone_data.FEEDER[feeder_id].angle			= (rx_buffer[0] << 8) | rx_buffer[1];
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	781b      	ldrb	r3, [r3, #0]
 800260e:	021b      	lsls	r3, r3, #8
 8002610:	b21a      	sxth	r2, r3
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	3301      	adds	r3, #1
 8002616:	781b      	ldrb	r3, [r3, #0]
 8002618:	b21b      	sxth	r3, r3
 800261a:	4313      	orrs	r3, r2
 800261c:	b21a      	sxth	r2, r3
 800261e:	7bfb      	ldrb	r3, [r7, #15]
 8002620:	b290      	uxth	r0, r2
 8002622:	4a62      	ldr	r2, [pc, #392]	; (80027ac <convert_raw_can_data+0x26c>)
 8002624:	3301      	adds	r3, #1
 8002626:	2168      	movs	r1, #104	; 0x68
 8002628:	fb01 f303 	mul.w	r3, r1, r3
 800262c:	4413      	add	r3, r2
 800262e:	3302      	adds	r3, #2
 8002630:	4602      	mov	r2, r0
 8002632:	801a      	strh	r2, [r3, #0]
			canone_data.FEEDER[feeder_id].rpm  			= (rx_buffer[2] << 8) | rx_buffer[3];
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	3302      	adds	r3, #2
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	021b      	lsls	r3, r3, #8
 800263c:	b219      	sxth	r1, r3
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	3303      	adds	r3, #3
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	b21a      	sxth	r2, r3
 8002646:	7bfb      	ldrb	r3, [r7, #15]
 8002648:	430a      	orrs	r2, r1
 800264a:	b210      	sxth	r0, r2
 800264c:	4a57      	ldr	r2, [pc, #348]	; (80027ac <convert_raw_can_data+0x26c>)
 800264e:	3301      	adds	r3, #1
 8002650:	2168      	movs	r1, #104	; 0x68
 8002652:	fb01 f303 	mul.w	r3, r1, r3
 8002656:	4413      	add	r3, r2
 8002658:	3304      	adds	r3, #4
 800265a:	4602      	mov	r2, r0
 800265c:	801a      	strh	r2, [r3, #0]
			canone_data.FEEDER[feeder_id].torque		= (rx_buffer[4] << 8) | rx_buffer[5];
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	3304      	adds	r3, #4
 8002662:	781b      	ldrb	r3, [r3, #0]
 8002664:	021b      	lsls	r3, r3, #8
 8002666:	b219      	sxth	r1, r3
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	3305      	adds	r3, #5
 800266c:	781b      	ldrb	r3, [r3, #0]
 800266e:	b21a      	sxth	r2, r3
 8002670:	7bfb      	ldrb	r3, [r7, #15]
 8002672:	430a      	orrs	r2, r1
 8002674:	b210      	sxth	r0, r2
 8002676:	4a4d      	ldr	r2, [pc, #308]	; (80027ac <convert_raw_can_data+0x26c>)
 8002678:	3301      	adds	r3, #1
 800267a:	2168      	movs	r1, #104	; 0x68
 800267c:	fb01 f303 	mul.w	r3, r1, r3
 8002680:	4413      	add	r3, r2
 8002682:	3306      	adds	r3, #6
 8002684:	4602      	mov	r2, r0
 8002686:	801a      	strh	r2, [r3, #0]
			canone_data.FEEDER[feeder_id].temp 			= (rx_buffer[6]);
 8002688:	7bfb      	ldrb	r3, [r7, #15]
 800268a:	683a      	ldr	r2, [r7, #0]
 800268c:	7990      	ldrb	r0, [r2, #6]
 800268e:	4a47      	ldr	r2, [pc, #284]	; (80027ac <convert_raw_can_data+0x26c>)
 8002690:	2168      	movs	r1, #104	; 0x68
 8002692:	fb01 f303 	mul.w	r3, r1, r3
 8002696:	4413      	add	r3, r2
 8002698:	3370      	adds	r3, #112	; 0x70
 800269a:	4602      	mov	r2, r0
 800269c:	701a      	strb	r2, [r3, #0]
			osEventFlagsSet(gun_data_flag, 0x10);
 800269e:	4b45      	ldr	r3, [pc, #276]	; (80027b4 <convert_raw_can_data+0x274>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	2110      	movs	r1, #16
 80026a4:	4618      	mov	r0, r3
 80026a6:	f005 fc4b 	bl	8007f40 <osEventFlagsSet>
			break;
 80026aa:	e07a      	b.n	80027a2 <convert_raw_can_data+0x262>
		}

		case ID_PITCH:
		{
			canone_data.pitch.id 						= motor_id;
 80026ac:	4a3f      	ldr	r2, [pc, #252]	; (80027ac <convert_raw_can_data+0x26c>)
 80026ae:	88fb      	ldrh	r3, [r7, #6]
 80026b0:	f8a2 3138 	strh.w	r3, [r2, #312]	; 0x138
			canone_data.pitch.real_angle				= (rx_buffer[0] << 8) | rx_buffer[1];
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	781b      	ldrb	r3, [r3, #0]
 80026b8:	021b      	lsls	r3, r3, #8
 80026ba:	b21a      	sxth	r2, r3
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	3301      	adds	r3, #1
 80026c0:	781b      	ldrb	r3, [r3, #0]
 80026c2:	b21b      	sxth	r3, r3
 80026c4:	4313      	orrs	r3, r2
 80026c6:	b21b      	sxth	r3, r3
 80026c8:	b29a      	uxth	r2, r3
 80026ca:	4b38      	ldr	r3, [pc, #224]	; (80027ac <convert_raw_can_data+0x26c>)
 80026cc:	f8a3 213a 	strh.w	r2, [r3, #314]	; 0x13a
			canone_data.pitch.rpm  						= (rx_buffer[2] << 8) | rx_buffer[3];
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	3302      	adds	r3, #2
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	021b      	lsls	r3, r3, #8
 80026d8:	b21a      	sxth	r2, r3
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	3303      	adds	r3, #3
 80026de:	781b      	ldrb	r3, [r3, #0]
 80026e0:	b21b      	sxth	r3, r3
 80026e2:	4313      	orrs	r3, r2
 80026e4:	b21a      	sxth	r2, r3
 80026e6:	4b31      	ldr	r3, [pc, #196]	; (80027ac <convert_raw_can_data+0x26c>)
 80026e8:	f8a3 2140 	strh.w	r2, [r3, #320]	; 0x140
			canone_data.pitch.torque 					= (rx_buffer[4] << 8) | rx_buffer[5];
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	3304      	adds	r3, #4
 80026f0:	781b      	ldrb	r3, [r3, #0]
 80026f2:	021b      	lsls	r3, r3, #8
 80026f4:	b21a      	sxth	r2, r3
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	3305      	adds	r3, #5
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	b21b      	sxth	r3, r3
 80026fe:	4313      	orrs	r3, r2
 8002700:	b21a      	sxth	r2, r3
 8002702:	4b2a      	ldr	r3, [pc, #168]	; (80027ac <convert_raw_can_data+0x26c>)
 8002704:	f8a3 2142 	strh.w	r2, [r3, #322]	; 0x142
			canone_data.pitch.temp 						= (rx_buffer[6]);
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	799a      	ldrb	r2, [r3, #6]
 800270c:	4b27      	ldr	r3, [pc, #156]	; (80027ac <convert_raw_can_data+0x26c>)
 800270e:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144
			gimbal_offset(&canone_data.pitch);
 8002712:	4829      	ldr	r0, [pc, #164]	; (80027b8 <convert_raw_can_data+0x278>)
 8002714:	f000 f856 	bl	80027c4 <gimbal_offset>
			osEventFlagsSet(gimbal_data_flag, 0x10);
 8002718:	4b28      	ldr	r3, [pc, #160]	; (80027bc <convert_raw_can_data+0x27c>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	2110      	movs	r1, #16
 800271e:	4618      	mov	r0, r3
 8002720:	f005 fc0e 	bl	8007f40 <osEventFlagsSet>
			break;
 8002724:	e03d      	b.n	80027a2 <convert_raw_can_data+0x262>
		}


		case ID_YAW:
		{
			canone_data.yaw.id 							= motor_id;
 8002726:	4a21      	ldr	r2, [pc, #132]	; (80027ac <convert_raw_can_data+0x26c>)
 8002728:	88fb      	ldrh	r3, [r7, #6]
 800272a:	f8a2 31b8 	strh.w	r3, [r2, #440]	; 0x1b8
			canone_data.yaw.real_angle					= (rx_buffer[0] << 8) | rx_buffer[1];
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	781b      	ldrb	r3, [r3, #0]
 8002732:	021b      	lsls	r3, r3, #8
 8002734:	b21a      	sxth	r2, r3
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	3301      	adds	r3, #1
 800273a:	781b      	ldrb	r3, [r3, #0]
 800273c:	b21b      	sxth	r3, r3
 800273e:	4313      	orrs	r3, r2
 8002740:	b21b      	sxth	r3, r3
 8002742:	b29a      	uxth	r2, r3
 8002744:	4b19      	ldr	r3, [pc, #100]	; (80027ac <convert_raw_can_data+0x26c>)
 8002746:	f8a3 21ba 	strh.w	r2, [r3, #442]	; 0x1ba
			canone_data.yaw.rpm  						= (rx_buffer[2] << 8) | rx_buffer[3];
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	3302      	adds	r3, #2
 800274e:	781b      	ldrb	r3, [r3, #0]
 8002750:	021b      	lsls	r3, r3, #8
 8002752:	b21a      	sxth	r2, r3
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	3303      	adds	r3, #3
 8002758:	781b      	ldrb	r3, [r3, #0]
 800275a:	b21b      	sxth	r3, r3
 800275c:	4313      	orrs	r3, r2
 800275e:	b21a      	sxth	r2, r3
 8002760:	4b12      	ldr	r3, [pc, #72]	; (80027ac <convert_raw_can_data+0x26c>)
 8002762:	f8a3 21c0 	strh.w	r2, [r3, #448]	; 0x1c0
			canone_data.yaw.torque 						= (rx_buffer[4] << 8) | rx_buffer[5];
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	3304      	adds	r3, #4
 800276a:	781b      	ldrb	r3, [r3, #0]
 800276c:	021b      	lsls	r3, r3, #8
 800276e:	b21a      	sxth	r2, r3
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	3305      	adds	r3, #5
 8002774:	781b      	ldrb	r3, [r3, #0]
 8002776:	b21b      	sxth	r3, r3
 8002778:	4313      	orrs	r3, r2
 800277a:	b21a      	sxth	r2, r3
 800277c:	4b0b      	ldr	r3, [pc, #44]	; (80027ac <convert_raw_can_data+0x26c>)
 800277e:	f8a3 21c2 	strh.w	r2, [r3, #450]	; 0x1c2
			canone_data.yaw.temp 						= (rx_buffer[6]);
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	799a      	ldrb	r2, [r3, #6]
 8002786:	4b09      	ldr	r3, [pc, #36]	; (80027ac <convert_raw_can_data+0x26c>)
 8002788:	f883 21c4 	strb.w	r2, [r3, #452]	; 0x1c4
			gimbal_offset(&canone_data.yaw);
 800278c:	480c      	ldr	r0, [pc, #48]	; (80027c0 <convert_raw_can_data+0x280>)
 800278e:	f000 f819 	bl	80027c4 <gimbal_offset>
			osEventFlagsSet(gimbal_data_flag, 0x01);
 8002792:	4b0a      	ldr	r3, [pc, #40]	; (80027bc <convert_raw_can_data+0x27c>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	2101      	movs	r1, #1
 8002798:	4618      	mov	r0, r3
 800279a:	f005 fbd1 	bl	8007f40 <osEventFlagsSet>
			break;
 800279e:	e000      	b.n	80027a2 <convert_raw_can_data+0x262>
		}
		default:
		{
			break;
 80027a0:	bf00      	nop
		}
	}
}
 80027a2:	bf00      	nop
 80027a4:	3710      	adds	r7, #16
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	20009c88 	.word	0x20009c88
 80027b0:	200098c0 	.word	0x200098c0
 80027b4:	200098ac 	.word	0x200098ac
 80027b8:	20009dc0 	.word	0x20009dc0
 80027bc:	200098a8 	.word	0x200098a8
 80027c0:	20009e40 	.word	0x20009e40

080027c4 <gimbal_offset>:

/**
 * Centers the raw motor angle to between -Pi to +Pi
 */
void gimbal_offset(gimbal_data_t *gimbal_data)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
	gimbal_data->adj_ang = gimbal_data->real_angle - gimbal_data->center_ang;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	885b      	ldrh	r3, [r3, #2]
 80027d0:	461a      	mov	r2, r3
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	8a5b      	ldrh	r3, [r3, #18]
 80027d6:	1ad3      	subs	r3, r2, r3
 80027d8:	ee07 3a90 	vmov	s15, r3
 80027dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	edc3 7a01 	vstr	s15, [r3, #4]
	gimbal_data->adj_ang = (float)gimbal_data->adj_ang/(GM6020_MAX_DEFLECTION) * PI; // convert to radians
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	ed93 7a01 	vldr	s14, [r3, #4]
 80027ec:	eddf 6a1d 	vldr	s13, [pc, #116]	; 8002864 <gimbal_offset+0xa0>
 80027f0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80027f4:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8002868 <gimbal_offset+0xa4>
 80027f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	edc3 7a01 	vstr	s15, [r3, #4]
	if (gimbal_data->adj_ang < -PI)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	edd3 7a01 	vldr	s15, [r3, #4]
 8002808:	ed9f 7a18 	vldr	s14, [pc, #96]	; 800286c <gimbal_offset+0xa8>
 800280c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002810:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002814:	d50a      	bpl.n	800282c <gimbal_offset+0x68>
	{
		gimbal_data->adj_ang += 2 * PI;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	edd3 7a01 	vldr	s15, [r3, #4]
 800281c:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8002870 <gimbal_offset+0xac>
 8002820:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	edc3 7a01 	vstr	s15, [r3, #4]
	}
	else if (gimbal_data->adj_ang > PI)
	{
		gimbal_data->adj_ang -= 2 * PI;
	}
}
 800282a:	e014      	b.n	8002856 <gimbal_offset+0x92>
	else if (gimbal_data->adj_ang > PI)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002832:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8002868 <gimbal_offset+0xa4>
 8002836:	eef4 7ac7 	vcmpe.f32	s15, s14
 800283a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800283e:	dc00      	bgt.n	8002842 <gimbal_offset+0x7e>
}
 8002840:	e009      	b.n	8002856 <gimbal_offset+0x92>
		gimbal_data->adj_ang -= 2 * PI;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	edd3 7a01 	vldr	s15, [r3, #4]
 8002848:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8002870 <gimbal_offset+0xac>
 800284c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8002856:	bf00      	nop
 8002858:	370c      	adds	r7, #12
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr
 8002862:	bf00      	nop
 8002864:	45800000 	.word	0x45800000
 8002868:	40490fdb 	.word	0x40490fdb
 800286c:	c0490fdb 	.word	0xc0490fdb
 8002870:	40c90fdb 	.word	0x40c90fdb

08002874 <usart_ISR>:
extern osEventFlagsId_t rc_data_flag;
extern osThreadId_t movement_control_task_handle;


void usart_ISR(UART_HandleTypeDef *UartHandle)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b082      	sub	sp, #8
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
	xavier_data.magic_number = ((xavier_rx_buffer[1] << 8) | xavier_rx_buffer[0]);
 800287c:	4b23      	ldr	r3, [pc, #140]	; (800290c <usart_ISR+0x98>)
 800287e:	785b      	ldrb	r3, [r3, #1]
 8002880:	021b      	lsls	r3, r3, #8
 8002882:	b21a      	sxth	r2, r3
 8002884:	4b21      	ldr	r3, [pc, #132]	; (800290c <usart_ISR+0x98>)
 8002886:	781b      	ldrb	r3, [r3, #0]
 8002888:	b21b      	sxth	r3, r3
 800288a:	4313      	orrs	r3, r2
 800288c:	b21a      	sxth	r2, r3
 800288e:	4b20      	ldr	r3, [pc, #128]	; (8002910 <usart_ISR+0x9c>)
 8002890:	801a      	strh	r2, [r3, #0]
	xavier_data.yaw = ((xavier_rx_buffer[3] << 8) | xavier_rx_buffer[2]);
 8002892:	4b1e      	ldr	r3, [pc, #120]	; (800290c <usart_ISR+0x98>)
 8002894:	78db      	ldrb	r3, [r3, #3]
 8002896:	021b      	lsls	r3, r3, #8
 8002898:	b21a      	sxth	r2, r3
 800289a:	4b1c      	ldr	r3, [pc, #112]	; (800290c <usart_ISR+0x98>)
 800289c:	789b      	ldrb	r3, [r3, #2]
 800289e:	b21b      	sxth	r3, r3
 80028a0:	4313      	orrs	r3, r2
 80028a2:	b21a      	sxth	r2, r3
 80028a4:	4b1a      	ldr	r3, [pc, #104]	; (8002910 <usart_ISR+0x9c>)
 80028a6:	809a      	strh	r2, [r3, #4]
	xavier_data.pitch = ((xavier_rx_buffer[5] << 8) | xavier_rx_buffer[4]);
 80028a8:	4b18      	ldr	r3, [pc, #96]	; (800290c <usart_ISR+0x98>)
 80028aa:	795b      	ldrb	r3, [r3, #5]
 80028ac:	021b      	lsls	r3, r3, #8
 80028ae:	b21a      	sxth	r2, r3
 80028b0:	4b16      	ldr	r3, [pc, #88]	; (800290c <usart_ISR+0x98>)
 80028b2:	791b      	ldrb	r3, [r3, #4]
 80028b4:	b21b      	sxth	r3, r3
 80028b6:	4313      	orrs	r3, r2
 80028b8:	b21a      	sxth	r2, r3
 80028ba:	4b15      	ldr	r3, [pc, #84]	; (8002910 <usart_ISR+0x9c>)
 80028bc:	805a      	strh	r2, [r3, #2]
	xavier_data.end_check = (xavier_rx_buffer[7] << 8) | xavier_rx_buffer[6];
 80028be:	4b13      	ldr	r3, [pc, #76]	; (800290c <usart_ISR+0x98>)
 80028c0:	79db      	ldrb	r3, [r3, #7]
 80028c2:	021b      	lsls	r3, r3, #8
 80028c4:	b21a      	sxth	r2, r3
 80028c6:	4b11      	ldr	r3, [pc, #68]	; (800290c <usart_ISR+0x98>)
 80028c8:	799b      	ldrb	r3, [r3, #6]
 80028ca:	b21b      	sxth	r3, r3
 80028cc:	4313      	orrs	r3, r2
 80028ce:	b21a      	sxth	r2, r3
 80028d0:	4b0f      	ldr	r3, [pc, #60]	; (8002910 <usart_ISR+0x9c>)
 80028d2:	80da      	strh	r2, [r3, #6]
	if (xavier_data.magic_number != START_MAGIC_NUMBER || xavier_data.end_check != END_MAGIC_NUMBER)
 80028d4:	4b0e      	ldr	r3, [pc, #56]	; (8002910 <usart_ISR+0x9c>)
 80028d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028da:	2b45      	cmp	r3, #69	; 0x45
 80028dc:	d105      	bne.n	80028ea <usart_ISR+0x76>
 80028de:	4b0c      	ldr	r3, [pc, #48]	; (8002910 <usart_ISR+0x9c>)
 80028e0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80028e4:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 80028e8:	d006      	beq.n	80028f8 <usart_ISR+0x84>
	{
		xavier_data.pitch = 0;
 80028ea:	4b09      	ldr	r3, [pc, #36]	; (8002910 <usart_ISR+0x9c>)
 80028ec:	2200      	movs	r2, #0
 80028ee:	805a      	strh	r2, [r3, #2]
		xavier_data.yaw = 0;
 80028f0:	4b07      	ldr	r3, [pc, #28]	; (8002910 <usart_ISR+0x9c>)
 80028f2:	2200      	movs	r2, #0
 80028f4:	809a      	strh	r2, [r3, #4]
 80028f6:	e005      	b.n	8002904 <usart_ISR+0x90>
	}
	else
	{
		//store previous data to account for bad data
		xavier_data.last_time = HAL_GetTick();
 80028f8:	f001 f888 	bl	8003a0c <HAL_GetTick>
 80028fc:	4603      	mov	r3, r0
 80028fe:	4a04      	ldr	r2, [pc, #16]	; (8002910 <usart_ISR+0x9c>)
 8002900:	6093      	str	r3, [r2, #8]
	}
}
 8002902:	bf00      	nop
 8002904:	bf00      	nop
 8002906:	3708      	adds	r7, #8
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}
 800290c:	20004ee0 	.word	0x20004ee0
 8002910:	20009ec0 	.word	0x20009ec0

08002914 <gimbal_control_task>:
 * FreeRTOS task for gimbal controls
 * Has HIGH2 priority
 *
 */
void gimbal_control_task(void *argument)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b082      	sub	sp, #8
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(&XAVIER_UART, xavier_rx_buffer, OBC_DATA_SIZE);
 800291c:	2208      	movs	r2, #8
 800291e:	4906      	ldr	r1, [pc, #24]	; (8002938 <gimbal_control_task+0x24>)
 8002920:	4806      	ldr	r0, [pc, #24]	; (800293c <gimbal_control_task+0x28>)
 8002922:	f004 f9c1 	bl	8006ca8 <HAL_UART_Receive_DMA>
    while(1)
    {
		gimbal_angle_control(&canone_data.pitch, &canone_data.yaw);
 8002926:	4906      	ldr	r1, [pc, #24]	; (8002940 <gimbal_control_task+0x2c>)
 8002928:	4806      	ldr	r0, [pc, #24]	; (8002944 <gimbal_control_task+0x30>)
 800292a:	f000 f80d 	bl	8002948 <gimbal_angle_control>
		vTaskDelay(1);
 800292e:	2001      	movs	r0, #1
 8002930:	f006 ff8a 	bl	8009848 <vTaskDelay>
		gimbal_angle_control(&canone_data.pitch, &canone_data.yaw);
 8002934:	e7f7      	b.n	8002926 <gimbal_control_task+0x12>
 8002936:	bf00      	nop
 8002938:	20004ee0 	.word	0x20004ee0
 800293c:	20009c48 	.word	0x20009c48
 8002940:	20009e40 	.word	0x20009e40
 8002944:	20009dc0 	.word	0x20009dc0

08002948 <gimbal_angle_control>:
 * Need to check if having ID4 (i.e. 0x208) + having the launcher motors (ID 1-3, 0x201 to 0x203)
 * still provides a fast enough response for open source robots
 */

void gimbal_angle_control(gimbal_data_t *pitch_motor, gimbal_data_t *yaw_motor)
{
 8002948:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800294c:	b084      	sub	sp, #16
 800294e:	af02      	add	r7, sp, #8
 8002950:	6078      	str	r0, [r7, #4]
 8002952:	6039      	str	r1, [r7, #0]
	if (remote_cmd.right_switch == all_off)
 8002954:	4bb2      	ldr	r3, [pc, #712]	; (8002c20 <gimbal_angle_control+0x2d8>)
 8002956:	f993 3009 	ldrsb.w	r3, [r3, #9]
 800295a:	2b01      	cmp	r3, #1
 800295c:	d109      	bne.n	8002972 <gimbal_angle_control+0x2a>
	{
		CANtwo_cmd(0, 0, 0, 0, GIMBAL_ID);
 800295e:	f240 23ff 	movw	r3, #767	; 0x2ff
 8002962:	9300      	str	r3, [sp, #0]
 8002964:	2300      	movs	r3, #0
 8002966:	2200      	movs	r2, #0
 8002968:	2100      	movs	r1, #0
 800296a:	2000      	movs	r0, #0
 800296c:	f000 fc64 	bl	8003238 <CANtwo_cmd>
		angle_pid(pitch, pitch_motor->adj_ang, pitch_motor);
		angle_pid(yaw, yaw_motor->adj_ang, yaw_motor);
		CANtwo_cmd(pitch_motor->pid.output, yaw_motor->pid.output, 0, 0, GIMBAL_ID);
	}

}
 8002970:	e14d      	b.n	8002c0e <gimbal_angle_control+0x2c6>
		if (remote_cmd.left_switch == aimbot_enable && xavier_data.last_time + XAVIER_TIMEOUT > HAL_GetTick() )
 8002972:	4bab      	ldr	r3, [pc, #684]	; (8002c20 <gimbal_angle_control+0x2d8>)
 8002974:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8002978:	2b01      	cmp	r3, #1
 800297a:	d15d      	bne.n	8002a38 <gimbal_angle_control+0xf0>
 800297c:	4ba9      	ldr	r3, [pc, #676]	; (8002c24 <gimbal_angle_control+0x2dc>)
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	f103 0432 	add.w	r4, r3, #50	; 0x32
 8002984:	f001 f842 	bl	8003a0c <HAL_GetTick>
 8002988:	4603      	mov	r3, r0
 800298a:	429c      	cmp	r4, r3
 800298c:	d954      	bls.n	8002a38 <gimbal_angle_control+0xf0>
			pitch += (float)xavier_data.pitch/660 * PITCH_SPEED * PITCH_INVERT;
 800298e:	4ba6      	ldr	r3, [pc, #664]	; (8002c28 <gimbal_angle_control+0x2e0>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4618      	mov	r0, r3
 8002994:	f7fd fde0 	bl	8000558 <__aeabi_f2d>
 8002998:	4604      	mov	r4, r0
 800299a:	460d      	mov	r5, r1
 800299c:	4ba1      	ldr	r3, [pc, #644]	; (8002c24 <gimbal_angle_control+0x2dc>)
 800299e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80029a2:	ee07 3a90 	vmov	s15, r3
 80029a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029aa:	ed9f 7aa0 	vldr	s14, [pc, #640]	; 8002c2c <gimbal_angle_control+0x2e4>
 80029ae:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80029b2:	ee16 0a90 	vmov	r0, s13
 80029b6:	f7fd fdcf 	bl	8000558 <__aeabi_f2d>
 80029ba:	a397      	add	r3, pc, #604	; (adr r3, 8002c18 <gimbal_angle_control+0x2d0>)
 80029bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029c0:	f7fd fe22 	bl	8000608 <__aeabi_dmul>
 80029c4:	4602      	mov	r2, r0
 80029c6:	460b      	mov	r3, r1
 80029c8:	4620      	mov	r0, r4
 80029ca:	4629      	mov	r1, r5
 80029cc:	f7fd fc64 	bl	8000298 <__aeabi_dsub>
 80029d0:	4602      	mov	r2, r0
 80029d2:	460b      	mov	r3, r1
 80029d4:	4610      	mov	r0, r2
 80029d6:	4619      	mov	r1, r3
 80029d8:	f7fe f8d8 	bl	8000b8c <__aeabi_d2f>
 80029dc:	4603      	mov	r3, r0
 80029de:	4a92      	ldr	r2, [pc, #584]	; (8002c28 <gimbal_angle_control+0x2e0>)
 80029e0:	6013      	str	r3, [r2, #0]
			yaw += (float)xavier_data.yaw/660 * YAW_SPEED * YAW_INVERT;
 80029e2:	4b93      	ldr	r3, [pc, #588]	; (8002c30 <gimbal_angle_control+0x2e8>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4618      	mov	r0, r3
 80029e8:	f7fd fdb6 	bl	8000558 <__aeabi_f2d>
 80029ec:	4604      	mov	r4, r0
 80029ee:	460d      	mov	r5, r1
 80029f0:	4b8c      	ldr	r3, [pc, #560]	; (8002c24 <gimbal_angle_control+0x2dc>)
 80029f2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80029f6:	ee07 3a90 	vmov	s15, r3
 80029fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029fe:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 8002c2c <gimbal_angle_control+0x2e4>
 8002a02:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002a06:	ee16 0a90 	vmov	r0, s13
 8002a0a:	f7fd fda5 	bl	8000558 <__aeabi_f2d>
 8002a0e:	a382      	add	r3, pc, #520	; (adr r3, 8002c18 <gimbal_angle_control+0x2d0>)
 8002a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a14:	f7fd fdf8 	bl	8000608 <__aeabi_dmul>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	460b      	mov	r3, r1
 8002a1c:	4620      	mov	r0, r4
 8002a1e:	4629      	mov	r1, r5
 8002a20:	f7fd fc3a 	bl	8000298 <__aeabi_dsub>
 8002a24:	4602      	mov	r2, r0
 8002a26:	460b      	mov	r3, r1
 8002a28:	4610      	mov	r0, r2
 8002a2a:	4619      	mov	r1, r3
 8002a2c:	f7fe f8ae 	bl	8000b8c <__aeabi_d2f>
 8002a30:	4603      	mov	r3, r0
 8002a32:	4a7f      	ldr	r2, [pc, #508]	; (8002c30 <gimbal_angle_control+0x2e8>)
 8002a34:	6013      	str	r3, [r2, #0]
 8002a36:	e053      	b.n	8002ae0 <gimbal_angle_control+0x198>
			pitch += (float)remote_cmd.right_y/660 * PITCH_SPEED * PITCH_INVERT;
 8002a38:	4b7b      	ldr	r3, [pc, #492]	; (8002c28 <gimbal_angle_control+0x2e0>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f7fd fd8b 	bl	8000558 <__aeabi_f2d>
 8002a42:	4604      	mov	r4, r0
 8002a44:	460d      	mov	r5, r1
 8002a46:	4b76      	ldr	r3, [pc, #472]	; (8002c20 <gimbal_angle_control+0x2d8>)
 8002a48:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002a4c:	ee07 3a90 	vmov	s15, r3
 8002a50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a54:	ed9f 7a75 	vldr	s14, [pc, #468]	; 8002c2c <gimbal_angle_control+0x2e4>
 8002a58:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002a5c:	ee16 0a90 	vmov	r0, s13
 8002a60:	f7fd fd7a 	bl	8000558 <__aeabi_f2d>
 8002a64:	a36c      	add	r3, pc, #432	; (adr r3, 8002c18 <gimbal_angle_control+0x2d0>)
 8002a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a6a:	f7fd fdcd 	bl	8000608 <__aeabi_dmul>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	460b      	mov	r3, r1
 8002a72:	4620      	mov	r0, r4
 8002a74:	4629      	mov	r1, r5
 8002a76:	f7fd fc0f 	bl	8000298 <__aeabi_dsub>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	460b      	mov	r3, r1
 8002a7e:	4610      	mov	r0, r2
 8002a80:	4619      	mov	r1, r3
 8002a82:	f7fe f883 	bl	8000b8c <__aeabi_d2f>
 8002a86:	4603      	mov	r3, r0
 8002a88:	4a67      	ldr	r2, [pc, #412]	; (8002c28 <gimbal_angle_control+0x2e0>)
 8002a8a:	6013      	str	r3, [r2, #0]
			yaw += (float)remote_cmd.right_x/660 * YAW_SPEED * YAW_INVERT;
 8002a8c:	4b68      	ldr	r3, [pc, #416]	; (8002c30 <gimbal_angle_control+0x2e8>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4618      	mov	r0, r3
 8002a92:	f7fd fd61 	bl	8000558 <__aeabi_f2d>
 8002a96:	4604      	mov	r4, r0
 8002a98:	460d      	mov	r5, r1
 8002a9a:	4b61      	ldr	r3, [pc, #388]	; (8002c20 <gimbal_angle_control+0x2d8>)
 8002a9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002aa0:	ee07 3a90 	vmov	s15, r3
 8002aa4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002aa8:	ed9f 7a60 	vldr	s14, [pc, #384]	; 8002c2c <gimbal_angle_control+0x2e4>
 8002aac:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002ab0:	ee16 0a90 	vmov	r0, s13
 8002ab4:	f7fd fd50 	bl	8000558 <__aeabi_f2d>
 8002ab8:	a357      	add	r3, pc, #348	; (adr r3, 8002c18 <gimbal_angle_control+0x2d0>)
 8002aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002abe:	f7fd fda3 	bl	8000608 <__aeabi_dmul>
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	460b      	mov	r3, r1
 8002ac6:	4620      	mov	r0, r4
 8002ac8:	4629      	mov	r1, r5
 8002aca:	f7fd fbe5 	bl	8000298 <__aeabi_dsub>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	460b      	mov	r3, r1
 8002ad2:	4610      	mov	r0, r2
 8002ad4:	4619      	mov	r1, r3
 8002ad6:	f7fe f859 	bl	8000b8c <__aeabi_d2f>
 8002ada:	4603      	mov	r3, r0
 8002adc:	4a54      	ldr	r2, [pc, #336]	; (8002c30 <gimbal_angle_control+0x2e8>)
 8002ade:	6013      	str	r3, [r2, #0]
		pitch = fmax(pitch_motor->min_ang,fmin(pitch_motor->max_ang,pitch));
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	69db      	ldr	r3, [r3, #28]
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f7fd fd37 	bl	8000558 <__aeabi_f2d>
 8002aea:	4604      	mov	r4, r0
 8002aec:	460d      	mov	r5, r1
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	699b      	ldr	r3, [r3, #24]
 8002af2:	4618      	mov	r0, r3
 8002af4:	f7fd fd30 	bl	8000558 <__aeabi_f2d>
 8002af8:	4680      	mov	r8, r0
 8002afa:	4689      	mov	r9, r1
 8002afc:	4b4a      	ldr	r3, [pc, #296]	; (8002c28 <gimbal_angle_control+0x2e0>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4618      	mov	r0, r3
 8002b02:	f7fd fd29 	bl	8000558 <__aeabi_f2d>
 8002b06:	4602      	mov	r2, r0
 8002b08:	460b      	mov	r3, r1
 8002b0a:	ec43 2b11 	vmov	d1, r2, r3
 8002b0e:	ec49 8b10 	vmov	d0, r8, r9
 8002b12:	f009 fca6 	bl	800c462 <fmin>
 8002b16:	eeb0 7a40 	vmov.f32	s14, s0
 8002b1a:	eef0 7a60 	vmov.f32	s15, s1
 8002b1e:	eeb0 1a47 	vmov.f32	s2, s14
 8002b22:	eef0 1a67 	vmov.f32	s3, s15
 8002b26:	ec45 4b10 	vmov	d0, r4, r5
 8002b2a:	f009 fc73 	bl	800c414 <fmax>
 8002b2e:	ec53 2b10 	vmov	r2, r3, d0
 8002b32:	4610      	mov	r0, r2
 8002b34:	4619      	mov	r1, r3
 8002b36:	f7fe f829 	bl	8000b8c <__aeabi_d2f>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	4a3a      	ldr	r2, [pc, #232]	; (8002c28 <gimbal_angle_control+0x2e0>)
 8002b3e:	6013      	str	r3, [r2, #0]
		yaw = fmax(yaw_motor->min_ang,fmin(yaw_motor->max_ang,pitch));
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	69db      	ldr	r3, [r3, #28]
 8002b44:	4618      	mov	r0, r3
 8002b46:	f7fd fd07 	bl	8000558 <__aeabi_f2d>
 8002b4a:	4604      	mov	r4, r0
 8002b4c:	460d      	mov	r5, r1
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	699b      	ldr	r3, [r3, #24]
 8002b52:	4618      	mov	r0, r3
 8002b54:	f7fd fd00 	bl	8000558 <__aeabi_f2d>
 8002b58:	4680      	mov	r8, r0
 8002b5a:	4689      	mov	r9, r1
 8002b5c:	4b32      	ldr	r3, [pc, #200]	; (8002c28 <gimbal_angle_control+0x2e0>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4618      	mov	r0, r3
 8002b62:	f7fd fcf9 	bl	8000558 <__aeabi_f2d>
 8002b66:	4602      	mov	r2, r0
 8002b68:	460b      	mov	r3, r1
 8002b6a:	ec43 2b11 	vmov	d1, r2, r3
 8002b6e:	ec49 8b10 	vmov	d0, r8, r9
 8002b72:	f009 fc76 	bl	800c462 <fmin>
 8002b76:	eeb0 7a40 	vmov.f32	s14, s0
 8002b7a:	eef0 7a60 	vmov.f32	s15, s1
 8002b7e:	eeb0 1a47 	vmov.f32	s2, s14
 8002b82:	eef0 1a67 	vmov.f32	s3, s15
 8002b86:	ec45 4b10 	vmov	d0, r4, r5
 8002b8a:	f009 fc43 	bl	800c414 <fmax>
 8002b8e:	ec53 2b10 	vmov	r2, r3, d0
 8002b92:	4610      	mov	r0, r2
 8002b94:	4619      	mov	r1, r3
 8002b96:	f7fd fff9 	bl	8000b8c <__aeabi_d2f>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	4a24      	ldr	r2, [pc, #144]	; (8002c30 <gimbal_angle_control+0x2e8>)
 8002b9e:	6013      	str	r3, [r2, #0]
		angle_pid(pitch, pitch_motor->adj_ang, pitch_motor);
 8002ba0:	4b21      	ldr	r3, [pc, #132]	; (8002c28 <gimbal_angle_control+0x2e0>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f7fd fcd7 	bl	8000558 <__aeabi_f2d>
 8002baa:	4604      	mov	r4, r0
 8002bac:	460d      	mov	r5, r1
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f7fd fcd0 	bl	8000558 <__aeabi_f2d>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	460b      	mov	r3, r1
 8002bbc:	6878      	ldr	r0, [r7, #4]
 8002bbe:	ec43 2b11 	vmov	d1, r2, r3
 8002bc2:	ec45 4b10 	vmov	d0, r4, r5
 8002bc6:	f000 fa6f 	bl	80030a8 <angle_pid>
		angle_pid(yaw, yaw_motor->adj_ang, yaw_motor);
 8002bca:	4b19      	ldr	r3, [pc, #100]	; (8002c30 <gimbal_angle_control+0x2e8>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f7fd fcc2 	bl	8000558 <__aeabi_f2d>
 8002bd4:	4604      	mov	r4, r0
 8002bd6:	460d      	mov	r5, r1
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f7fd fcbb 	bl	8000558 <__aeabi_f2d>
 8002be2:	4602      	mov	r2, r0
 8002be4:	460b      	mov	r3, r1
 8002be6:	6838      	ldr	r0, [r7, #0]
 8002be8:	ec43 2b11 	vmov	d1, r2, r3
 8002bec:	ec45 4b10 	vmov	d0, r4, r5
 8002bf0:	f000 fa5a 	bl	80030a8 <angle_pid>
		CANtwo_cmd(pitch_motor->pid.output, yaw_motor->pid.output, 0, 0, GIMBAL_ID);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	f9b3 007c 	ldrsh.w	r0, [r3, #124]	; 0x7c
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	f9b3 107c 	ldrsh.w	r1, [r3, #124]	; 0x7c
 8002c00:	f240 23ff 	movw	r3, #767	; 0x2ff
 8002c04:	9300      	str	r3, [sp, #0]
 8002c06:	2300      	movs	r3, #0
 8002c08:	2200      	movs	r2, #0
 8002c0a:	f000 fb15 	bl	8003238 <CANtwo_cmd>
}
 8002c0e:	bf00      	nop
 8002c10:	3708      	adds	r7, #8
 8002c12:	46bd      	mov	sp, r7
 8002c14:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002c18:	47ae147b 	.word	0x47ae147b
 8002c1c:	3f847ae1 	.word	0x3f847ae1
 8002c20:	20004f14 	.word	0x20004f14
 8002c24:	20009ec0 	.word	0x20009ec0
 8002c28:	20004ed8 	.word	0x20004ed8
 8002c2c:	44250000 	.word	0x44250000
 8002c30:	20004edc 	.word	0x20004edc

08002c34 <gun_control_task>:
uint16_t max_pwm = 2200;


//TODO: Check rotation frequency, change to autonomous (currently dependent on RC)
void gun_control_task(void *argument)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b082      	sub	sp, #8
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
	//Starting PWM for 4 snail motors (grouped as 1&2 and 3&4),
	HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_1);	// PD12
 8002c3c:	2100      	movs	r1, #0
 8002c3e:	4819      	ldr	r0, [pc, #100]	; (8002ca4 <gun_control_task+0x70>)
 8002c40:	f003 f94c 	bl	8005edc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_2); 	// PD13 (reversed)
 8002c44:	2104      	movs	r1, #4
 8002c46:	4817      	ldr	r0, [pc, #92]	; (8002ca4 <gun_control_task+0x70>)
 8002c48:	f003 f948 	bl	8005edc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_3);	// PD14
 8002c4c:	2108      	movs	r1, #8
 8002c4e:	4815      	ldr	r0, [pc, #84]	; (8002ca4 <gun_control_task+0x70>)
 8002c50:	f003 f944 	bl	8005edc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_4); 	// PD15 (reversed)
 8002c54:	210c      	movs	r1, #12
 8002c56:	4813      	ldr	r0, [pc, #76]	; (8002ca4 <gun_control_task+0x70>)
 8002c58:	f003 f940 	bl	8005edc <HAL_TIM_PWM_Start>
	htim4.Instance->ARR = rotation_freq;
 8002c5c:	4b12      	ldr	r3, [pc, #72]	; (8002ca8 <gun_control_task+0x74>)
 8002c5e:	881a      	ldrh	r2, [r3, #0]
 8002c60:	4b10      	ldr	r3, [pc, #64]	; (8002ca4 <gun_control_task+0x70>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	62da      	str	r2, [r3, #44]	; 0x2c
*/

	while(1)
	{
			//refresh dbus data
			if (HAL_GetTick() - remote_cmd.last_time > REMOTE_TIMEOUT )
 8002c66:	f000 fed1 	bl	8003a0c <HAL_GetTick>
 8002c6a:	4602      	mov	r2, r0
 8002c6c:	4b0f      	ldr	r3, [pc, #60]	; (8002cac <gun_control_task+0x78>)
 8002c6e:	69db      	ldr	r3, [r3, #28]
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002c76:	d901      	bls.n	8002c7c <gun_control_task+0x48>
			{
				dbus_reset();
 8002c78:	f000 fd2a 	bl	80036d0 <dbus_reset>
			}
			osEventFlagsWait(gun_data_flag, 0x10, osFlagsWaitAll, 100);
 8002c7c:	4b0c      	ldr	r3, [pc, #48]	; (8002cb0 <gun_control_task+0x7c>)
 8002c7e:	6818      	ldr	r0, [r3, #0]
 8002c80:	2364      	movs	r3, #100	; 0x64
 8002c82:	2201      	movs	r2, #1
 8002c84:	2110      	movs	r1, #16
 8002c86:	f005 f9f7 	bl	8008078 <osEventFlagsWait>
			launcher_control(canone_data.FEEDER);
 8002c8a:	480a      	ldr	r0, [pc, #40]	; (8002cb4 <gun_control_task+0x80>)
 8002c8c:	f000 f814 	bl	8002cb8 <launcher_control>
			osEventFlagsClear(gun_data_flag, 0x10);
 8002c90:	4b07      	ldr	r3, [pc, #28]	; (8002cb0 <gun_control_task+0x7c>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	2110      	movs	r1, #16
 8002c96:	4618      	mov	r0, r3
 8002c98:	f005 f9aa 	bl	8007ff0 <osEventFlagsClear>
			//delays task for other tasks to run, CHECK THE VALUE
			vTaskDelay(CHASSIS_DELAY);
 8002c9c:	2002      	movs	r0, #2
 8002c9e:	f006 fdd3 	bl	8009848 <vTaskDelay>
			if (HAL_GetTick() - remote_cmd.last_time > REMOTE_TIMEOUT )
 8002ca2:	e7e0      	b.n	8002c66 <gun_control_task+0x32>
 8002ca4:	20009a28 	.word	0x20009a28
 8002ca8:	20000004 	.word	0x20000004
 8002cac:	20004f14 	.word	0x20004f14
 8002cb0:	200098ac 	.word	0x200098ac
 8002cb4:	20009cf0 	.word	0x20009cf0

08002cb8 <launcher_control>:
	}
	osThreadTerminate(NULL);
}

void launcher_control(motor_data_t *feeders)
{
 8002cb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002cbc:	b087      	sub	sp, #28
 8002cbe:	af02      	add	r7, sp, #8
 8002cc0:	6078      	str	r0, [r7, #4]
	//Priority of switches, kill switch -> aimbot mode -> manual mode
	if (remote_cmd.right_switch == all_off )
 8002cc2:	4b6b      	ldr	r3, [pc, #428]	; (8002e70 <launcher_control+0x1b8>)
 8002cc4:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d10d      	bne.n	8002ce8 <launcher_control+0x30>
	{
		pwm_output(-1, 0);
 8002ccc:	2100      	movs	r1, #0
 8002cce:	20ff      	movs	r0, #255	; 0xff
 8002cd0:	f000 f8d4 	bl	8002e7c <pwm_output>
		CANone_cmd(0,0,0,0, LAUNCHER_ID);
 8002cd4:	f240 13ff 	movw	r3, #511	; 0x1ff
 8002cd8:	9300      	str	r3, [sp, #0]
 8002cda:	2300      	movs	r3, #0
 8002cdc:	2200      	movs	r2, #0
 8002cde:	2100      	movs	r1, #0
 8002ce0:	2000      	movs	r0, #0
 8002ce2:	f000 fa5f 	bl	80031a4 <CANone_cmd>
	else
	{
		pwm_output(-1, 0);
		CANone_cmd(0,0,0,0, LAUNCHER_ID);
	}
}
 8002ce6:	e0b8      	b.n	8002e5a <launcher_control+0x1a2>
	else if(remote_cmd.left_switch == launcher_on)
 8002ce8:	4b61      	ldr	r3, [pc, #388]	; (8002e70 <launcher_control+0x1b8>)
 8002cea:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8002cee:	2b03      	cmp	r3, #3
 8002cf0:	f040 80a6 	bne.w	8002e40 <launcher_control+0x188>
		for (int i = 0; i < 2; i++)
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	60fb      	str	r3, [r7, #12]
 8002cf8:	e08f      	b.n	8002e1a <launcher_control+0x162>
			pwm_output(i,cycle_to_pulse(50)); // 0-100 (max speed), 50: 50% (?) of maximum speed = 1300 microseconds pulsewidth
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	b2de      	uxtb	r6, r3
 8002cfe:	2032      	movs	r0, #50	; 0x32
 8002d00:	f000 f8f4 	bl	8002eec <cycle_to_pulse>
 8002d04:	4603      	mov	r3, r0
 8002d06:	4619      	mov	r1, r3
 8002d08:	4630      	mov	r0, r6
 8002d0a:	f000 f8b7 	bl	8002e7c <pwm_output>
			if (fabs(feeders[i].torque) > FEEDER_JAM_TORQUE)
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2268      	movs	r2, #104	; 0x68
 8002d12:	fb02 f303 	mul.w	r3, r2, r3
 8002d16:	687a      	ldr	r2, [r7, #4]
 8002d18:	4413      	add	r3, r2
 8002d1a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f7fd fc08 	bl	8000534 <__aeabi_i2d>
 8002d24:	4602      	mov	r2, r0
 8002d26:	460b      	mov	r3, r1
 8002d28:	4614      	mov	r4, r2
 8002d2a:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8002d2e:	a34e      	add	r3, pc, #312	; (adr r3, 8002e68 <launcher_control+0x1b0>)
 8002d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d34:	4620      	mov	r0, r4
 8002d36:	4629      	mov	r1, r5
 8002d38:	f7fd fef6 	bl	8000b28 <__aeabi_dcmpgt>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d00b      	beq.n	8002d5a <launcher_control+0xa2>
				unjamming[i] = 1;
 8002d42:	4a4c      	ldr	r2, [pc, #304]	; (8002e74 <launcher_control+0x1bc>)
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	4413      	add	r3, r2
 8002d48:	2201      	movs	r2, #1
 8002d4a:	701a      	strb	r2, [r3, #0]
				start_time[i] = HAL_GetTick();
 8002d4c:	f000 fe5e 	bl	8003a0c <HAL_GetTick>
 8002d50:	4602      	mov	r2, r0
 8002d52:	4949      	ldr	r1, [pc, #292]	; (8002e78 <launcher_control+0x1c0>)
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (unjamming[i] == 1)
 8002d5a:	4a46      	ldr	r2, [pc, #280]	; (8002e74 <launcher_control+0x1bc>)
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	4413      	add	r3, r2
 8002d60:	781b      	ldrb	r3, [r3, #0]
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d122      	bne.n	8002dac <launcher_control+0xf4>
				if (start_time[i] + FEEDER_UNJAM_TIME < HAL_GetTick())
 8002d66:	4a44      	ldr	r2, [pc, #272]	; (8002e78 <launcher_control+0x1c0>)
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d6e:	f503 76fa 	add.w	r6, r3, #500	; 0x1f4
 8002d72:	f000 fe4b 	bl	8003a0c <HAL_GetTick>
 8002d76:	4603      	mov	r3, r0
 8002d78:	429e      	cmp	r6, r3
 8002d7a:	d20d      	bcs.n	8002d98 <launcher_control+0xe0>
					unjamming[i] = 0;
 8002d7c:	4a3d      	ldr	r2, [pc, #244]	; (8002e74 <launcher_control+0x1bc>)
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	4413      	add	r3, r2
 8002d82:	2200      	movs	r2, #0
 8002d84:	701a      	strb	r2, [r3, #0]
					feeder_output[i] = FEEDER_SPEED;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	005b      	lsls	r3, r3, #1
 8002d8a:	f107 0210 	add.w	r2, r7, #16
 8002d8e:	4413      	add	r3, r2
 8002d90:	220a      	movs	r2, #10
 8002d92:	f823 2c08 	strh.w	r2, [r3, #-8]
 8002d96:	e011      	b.n	8002dbc <launcher_control+0x104>
					feeder_output[i] = FEEDER_UNJAM_SPD;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	005b      	lsls	r3, r3, #1
 8002d9c:	f107 0210 	add.w	r2, r7, #16
 8002da0:	4413      	add	r3, r2
 8002da2:	f64f 72fb 	movw	r2, #65531	; 0xfffb
 8002da6:	f823 2c08 	strh.w	r2, [r3, #-8]
 8002daa:	e007      	b.n	8002dbc <launcher_control+0x104>
				feeder_output[i] = FEEDER_SPEED;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	005b      	lsls	r3, r3, #1
 8002db0:	f107 0210 	add.w	r2, r7, #16
 8002db4:	4413      	add	r3, r2
 8002db6:	220a      	movs	r2, #10
 8002db8:	f823 2c08 	strh.w	r2, [r3, #-8]
			speed_pid(feeder_output[i] * 36,feeders[i].rpm, &feeders[i].pid);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	005b      	lsls	r3, r3, #1
 8002dc0:	f107 0210 	add.w	r2, r7, #16
 8002dc4:	4413      	add	r3, r2
 8002dc6:	f933 3c08 	ldrsh.w	r3, [r3, #-8]
 8002dca:	461a      	mov	r2, r3
 8002dcc:	4613      	mov	r3, r2
 8002dce:	00db      	lsls	r3, r3, #3
 8002dd0:	4413      	add	r3, r2
 8002dd2:	009b      	lsls	r3, r3, #2
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f7fd fbad 	bl	8000534 <__aeabi_i2d>
 8002dda:	4680      	mov	r8, r0
 8002ddc:	4689      	mov	r9, r1
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2268      	movs	r2, #104	; 0x68
 8002de2:	fb02 f303 	mul.w	r3, r2, r3
 8002de6:	687a      	ldr	r2, [r7, #4]
 8002de8:	4413      	add	r3, r2
 8002dea:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002dee:	4618      	mov	r0, r3
 8002df0:	f7fd fba0 	bl	8000534 <__aeabi_i2d>
 8002df4:	4682      	mov	sl, r0
 8002df6:	468b      	mov	fp, r1
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2268      	movs	r2, #104	; 0x68
 8002dfc:	fb02 f303 	mul.w	r3, r2, r3
 8002e00:	687a      	ldr	r2, [r7, #4]
 8002e02:	4413      	add	r3, r2
 8002e04:	3310      	adds	r3, #16
 8002e06:	4618      	mov	r0, r3
 8002e08:	ec4b ab11 	vmov	d1, sl, fp
 8002e0c:	ec49 8b10 	vmov	d0, r8, r9
 8002e10:	f000 f892 	bl	8002f38 <speed_pid>
		for (int i = 0; i < 2; i++)
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	3301      	adds	r3, #1
 8002e18:	60fb      	str	r3, [r7, #12]
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	f77f af6c 	ble.w	8002cfa <launcher_control+0x42>
		CANone_cmd(feeders[0].pid.output, feeders[1].pid.output,0,0,LAUNCHER_ID);  //feeder M2006 id 5-6, identifier = 0x1ff
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	f9b3 0064 	ldrsh.w	r0, [r3, #100]	; 0x64
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	3368      	adds	r3, #104	; 0x68
 8002e2c:	f9b3 1064 	ldrsh.w	r1, [r3, #100]	; 0x64
 8002e30:	f240 13ff 	movw	r3, #511	; 0x1ff
 8002e34:	9300      	str	r3, [sp, #0]
 8002e36:	2300      	movs	r3, #0
 8002e38:	2200      	movs	r2, #0
 8002e3a:	f000 f9b3 	bl	80031a4 <CANone_cmd>
}
 8002e3e:	e00c      	b.n	8002e5a <launcher_control+0x1a2>
		pwm_output(-1, 0);
 8002e40:	2100      	movs	r1, #0
 8002e42:	20ff      	movs	r0, #255	; 0xff
 8002e44:	f000 f81a 	bl	8002e7c <pwm_output>
		CANone_cmd(0,0,0,0, LAUNCHER_ID);
 8002e48:	f240 13ff 	movw	r3, #511	; 0x1ff
 8002e4c:	9300      	str	r3, [sp, #0]
 8002e4e:	2300      	movs	r3, #0
 8002e50:	2200      	movs	r2, #0
 8002e52:	2100      	movs	r1, #0
 8002e54:	2000      	movs	r0, #0
 8002e56:	f000 f9a5 	bl	80031a4 <CANone_cmd>
}
 8002e5a:	bf00      	nop
 8002e5c:	3714      	adds	r7, #20
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e64:	f3af 8000 	nop.w
 8002e68:	00000000 	.word	0x00000000
 8002e6c:	40bb5800 	.word	0x40bb5800
 8002e70:	20004f14 	.word	0x20004f14
 8002e74:	20004ef0 	.word	0x20004ef0
 8002e78:	20004ee8 	.word	0x20004ee8

08002e7c <pwm_output>:



void pwm_output(uint8_t timergroup, uint16_t output)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b083      	sub	sp, #12
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	4603      	mov	r3, r0
 8002e84:	460a      	mov	r2, r1
 8002e86:	71fb      	strb	r3, [r7, #7]
 8002e88:	4613      	mov	r3, r2
 8002e8a:	80bb      	strh	r3, [r7, #4]
	if (timergroup == 0)
 8002e8c:	79fb      	ldrb	r3, [r7, #7]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d108      	bne.n	8002ea4 <pwm_output+0x28>
	{
		htim4.Instance->CCR1 = output;
 8002e92:	4b15      	ldr	r3, [pc, #84]	; (8002ee8 <pwm_output+0x6c>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	88ba      	ldrh	r2, [r7, #4]
 8002e98:	635a      	str	r2, [r3, #52]	; 0x34
		htim4.Instance->CCR2 = output;
 8002e9a:	4b13      	ldr	r3, [pc, #76]	; (8002ee8 <pwm_output+0x6c>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	88ba      	ldrh	r2, [r7, #4]
 8002ea0:	639a      	str	r2, [r3, #56]	; 0x38
		htim4.Instance->CCR2 = output;
		htim4.Instance->CCR3 = output;
		htim4.Instance->CCR4 = output;
	}

}
 8002ea2:	e01b      	b.n	8002edc <pwm_output+0x60>
	else if (timergroup == 1)
 8002ea4:	79fb      	ldrb	r3, [r7, #7]
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d108      	bne.n	8002ebc <pwm_output+0x40>
		htim4.Instance->CCR3 = output;
 8002eaa:	4b0f      	ldr	r3, [pc, #60]	; (8002ee8 <pwm_output+0x6c>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	88ba      	ldrh	r2, [r7, #4]
 8002eb0:	63da      	str	r2, [r3, #60]	; 0x3c
		htim4.Instance->CCR4 = output;
 8002eb2:	4b0d      	ldr	r3, [pc, #52]	; (8002ee8 <pwm_output+0x6c>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	88ba      	ldrh	r2, [r7, #4]
 8002eb8:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002eba:	e00f      	b.n	8002edc <pwm_output+0x60>
		htim4.Instance->CCR1 = output;
 8002ebc:	4b0a      	ldr	r3, [pc, #40]	; (8002ee8 <pwm_output+0x6c>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	88ba      	ldrh	r2, [r7, #4]
 8002ec2:	635a      	str	r2, [r3, #52]	; 0x34
		htim4.Instance->CCR2 = output;
 8002ec4:	4b08      	ldr	r3, [pc, #32]	; (8002ee8 <pwm_output+0x6c>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	88ba      	ldrh	r2, [r7, #4]
 8002eca:	639a      	str	r2, [r3, #56]	; 0x38
		htim4.Instance->CCR3 = output;
 8002ecc:	4b06      	ldr	r3, [pc, #24]	; (8002ee8 <pwm_output+0x6c>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	88ba      	ldrh	r2, [r7, #4]
 8002ed2:	63da      	str	r2, [r3, #60]	; 0x3c
		htim4.Instance->CCR4 = output;
 8002ed4:	4b04      	ldr	r3, [pc, #16]	; (8002ee8 <pwm_output+0x6c>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	88ba      	ldrh	r2, [r7, #4]
 8002eda:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002edc:	bf00      	nop
 8002ede:	370c      	adds	r7, #12
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee6:	4770      	bx	lr
 8002ee8:	20009a28 	.word	0x20009a28

08002eec <cycle_to_pulse>:

uint16_t cycle_to_pulse(uint8_t cycle)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b083      	sub	sp, #12
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	71fb      	strb	r3, [r7, #7]
	return (int)(min_pwm + cycle*(max_pwm-min_pwm)/100) ;
 8002ef6:	79fb      	ldrb	r3, [r7, #7]
 8002ef8:	4a0c      	ldr	r2, [pc, #48]	; (8002f2c <cycle_to_pulse+0x40>)
 8002efa:	8812      	ldrh	r2, [r2, #0]
 8002efc:	4611      	mov	r1, r2
 8002efe:	4a0c      	ldr	r2, [pc, #48]	; (8002f30 <cycle_to_pulse+0x44>)
 8002f00:	8812      	ldrh	r2, [r2, #0]
 8002f02:	1a8a      	subs	r2, r1, r2
 8002f04:	fb02 f303 	mul.w	r3, r2, r3
 8002f08:	4a0a      	ldr	r2, [pc, #40]	; (8002f34 <cycle_to_pulse+0x48>)
 8002f0a:	fb82 1203 	smull	r1, r2, r2, r3
 8002f0e:	1152      	asrs	r2, r2, #5
 8002f10:	17db      	asrs	r3, r3, #31
 8002f12:	1ad3      	subs	r3, r2, r3
 8002f14:	b29a      	uxth	r2, r3
 8002f16:	4b06      	ldr	r3, [pc, #24]	; (8002f30 <cycle_to_pulse+0x44>)
 8002f18:	881b      	ldrh	r3, [r3, #0]
 8002f1a:	4413      	add	r3, r2
 8002f1c:	b29b      	uxth	r3, r3
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	370c      	adds	r7, #12
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr
 8002f2a:	bf00      	nop
 8002f2c:	20000008 	.word	0x20000008
 8002f30:	20000006 	.word	0x20000006
 8002f34:	51eb851f 	.word	0x51eb851f

08002f38 <speed_pid>:


//todo: clean this place

void speed_pid(double setpoint, double curr_pt, pid_data_t *pid)
{
 8002f38:	b5b0      	push	{r4, r5, r7, lr}
 8002f3a:	b08c      	sub	sp, #48	; 0x30
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	ed87 0b04 	vstr	d0, [r7, #16]
 8002f42:	ed87 1b02 	vstr	d1, [r7, #8]
 8002f46:	6078      	str	r0, [r7, #4]
	double Pout = 0;
 8002f48:	f04f 0200 	mov.w	r2, #0
 8002f4c:	f04f 0300 	mov.w	r3, #0
 8002f50:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	double Iout = 0;
 8002f54:	f04f 0200 	mov.w	r2, #0
 8002f58:	f04f 0300 	mov.w	r3, #0
 8002f5c:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double Dout = 0;
 8002f60:	f04f 0200 	mov.w	r2, #0
 8002f64:	f04f 0300 	mov.w	r3, #0
 8002f68:	e9c7 2306 	strd	r2, r3, [r7, #24]
	pid->error[2] = pid->error[1];
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002f72:	6879      	ldr	r1, [r7, #4]
 8002f74:	e9c1 2308 	strd	r2, r3, [r1, #32]
	pid->error[1] = pid->error[0];
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002f7e:	6879      	ldr	r1, [r7, #4]
 8002f80:	e9c1 2306 	strd	r2, r3, [r1, #24]
	pid->error[0] = setpoint - curr_pt;
 8002f84:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002f88:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002f8c:	f7fd f984 	bl	8000298 <__aeabi_dsub>
 8002f90:	4602      	mov	r2, r0
 8002f92:	460b      	mov	r3, r1
 8002f94:	6879      	ldr	r1, [r7, #4]
 8002f96:	e9c1 2304 	strd	r2, r3, [r1, #16]
	Pout = pid->error[0] * pid->kp;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f7fd fad7 	bl	8000558 <__aeabi_f2d>
 8002faa:	4602      	mov	r2, r0
 8002fac:	460b      	mov	r3, r1
 8002fae:	4620      	mov	r0, r4
 8002fb0:	4629      	mov	r1, r5
 8002fb2:	f7fd fb29 	bl	8000608 <__aeabi_dmul>
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	460b      	mov	r3, r1
 8002fba:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

    pid->error_buf[2] = pid->error_buf[1];
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002fc4:	6879      	ldr	r1, [r7, #4]
 8002fc6:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
    pid->error_buf[1] = pid->error_buf[0];
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002fd0:	6879      	ldr	r1, [r7, #4]
 8002fd2:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    pid->error_buf[0] = pid->error[0] - pid->error[1];
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002fe2:	f7fd f959 	bl	8000298 <__aeabi_dsub>
 8002fe6:	4602      	mov	r2, r0
 8002fe8:	460b      	mov	r3, r1
 8002fea:	6879      	ldr	r1, [r7, #4]
 8002fec:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Dout = pid->error_buf[0] * pid->kd;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f7fd faac 	bl	8000558 <__aeabi_f2d>
 8003000:	4602      	mov	r2, r0
 8003002:	460b      	mov	r3, r1
 8003004:	4620      	mov	r0, r4
 8003006:	4629      	mov	r1, r5
 8003008:	f7fd fafe 	bl	8000608 <__aeabi_dmul>
 800300c:	4602      	mov	r2, r0
 800300e:	460b      	mov	r3, r1
 8003010:	e9c7 2306 	strd	r2, r3, [r7, #24]

    Iout = pid->error[0] * pid->ki;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	4618      	mov	r0, r3
 8003020:	f7fd fa9a 	bl	8000558 <__aeabi_f2d>
 8003024:	4602      	mov	r2, r0
 8003026:	460b      	mov	r3, r1
 8003028:	4620      	mov	r0, r4
 800302a:	4629      	mov	r1, r5
 800302c:	f7fd faec 	bl	8000608 <__aeabi_dmul>
 8003030:	4602      	mov	r2, r0
 8003032:	460b      	mov	r3, r1
 8003034:	e9c7 2308 	strd	r2, r3, [r7, #32]
    pid->output += Pout + Iout + Dout;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	f9b3 3054 	ldrsh.w	r3, [r3, #84]	; 0x54
 800303e:	4618      	mov	r0, r3
 8003040:	f7fd fa78 	bl	8000534 <__aeabi_i2d>
 8003044:	4604      	mov	r4, r0
 8003046:	460d      	mov	r5, r1
 8003048:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800304c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003050:	f7fd f924 	bl	800029c <__adddf3>
 8003054:	4602      	mov	r2, r0
 8003056:	460b      	mov	r3, r1
 8003058:	4610      	mov	r0, r2
 800305a:	4619      	mov	r1, r3
 800305c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003060:	f7fd f91c 	bl	800029c <__adddf3>
 8003064:	4602      	mov	r2, r0
 8003066:	460b      	mov	r3, r1
 8003068:	4620      	mov	r0, r4
 800306a:	4629      	mov	r1, r5
 800306c:	f7fd f916 	bl	800029c <__adddf3>
 8003070:	4602      	mov	r2, r0
 8003072:	460b      	mov	r3, r1
 8003074:	4610      	mov	r0, r2
 8003076:	4619      	mov	r1, r3
 8003078:	f7fd fd60 	bl	8000b3c <__aeabi_d2iz>
 800307c:	4603      	mov	r3, r0
 800307e:	b21a      	sxth	r2, r3
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
//    double_limit(&Iout, pid->int_max);
    int_limit(&pid->output, pid->max_out);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	f103 0254 	add.w	r2, r3, #84	; 0x54
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	; 0x50
 8003092:	4619      	mov	r1, r3
 8003094:	4610      	mov	r0, r2
 8003096:	f000 f927 	bl	80032e8 <int_limit>
}
 800309a:	bf00      	nop
 800309c:	3730      	adds	r7, #48	; 0x30
 800309e:	46bd      	mov	sp, r7
 80030a0:	bdb0      	pop	{r4, r5, r7, pc}
 80030a2:	0000      	movs	r0, r0
 80030a4:	0000      	movs	r0, r0
	...

080030a8 <angle_pid>:


void angle_pid(double setpoint, double curr_pt, gimbal_data_t *motor)
{
 80030a8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80030ac:	b088      	sub	sp, #32
 80030ae:	af00      	add	r7, sp, #0
 80030b0:	ed87 0b04 	vstr	d0, [r7, #16]
 80030b4:	ed87 1b02 	vstr	d1, [r7, #8]
 80030b8:	6078      	str	r0, [r7, #4]
	float ang_diff = (setpoint - curr_pt);
 80030ba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80030be:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80030c2:	f7fd f8e9 	bl	8000298 <__aeabi_dsub>
 80030c6:	4602      	mov	r2, r0
 80030c8:	460b      	mov	r3, r1
 80030ca:	4610      	mov	r0, r2
 80030cc:	4619      	mov	r1, r3
 80030ce:	f7fd fd5d 	bl	8000b8c <__aeabi_d2f>
 80030d2:	4603      	mov	r3, r0
 80030d4:	61fb      	str	r3, [r7, #28]
	if (ang_diff > PI )
 80030d6:	edd7 7a07 	vldr	s15, [r7, #28]
 80030da:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8003198 <angle_pid+0xf0>
 80030de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030e6:	dd08      	ble.n	80030fa <angle_pid+0x52>
	{
		ang_diff -= 2 * PI;
 80030e8:	edd7 7a07 	vldr	s15, [r7, #28]
 80030ec:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 800319c <angle_pid+0xf4>
 80030f0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80030f4:	edc7 7a07 	vstr	s15, [r7, #28]
 80030f8:	e010      	b.n	800311c <angle_pid+0x74>
	}
	else if(ang_diff < -PI)
 80030fa:	edd7 7a07 	vldr	s15, [r7, #28]
 80030fe:	ed9f 7a28 	vldr	s14, [pc, #160]	; 80031a0 <angle_pid+0xf8>
 8003102:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003106:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800310a:	d507      	bpl.n	800311c <angle_pid+0x74>
	{
		ang_diff += 2 * PI;
 800310c:	edd7 7a07 	vldr	s15, [r7, #28]
 8003110:	ed9f 7a22 	vldr	s14, [pc, #136]	; 800319c <angle_pid+0xf4>
 8003114:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003118:	edc7 7a07 	vstr	s15, [r7, #28]
	}

	int16_t set_rpm = (ang_diff) * motor->rpm_max / GIMBAL_MAX_ANGLE_DIFF;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8003122:	ee07 3a90 	vmov	s15, r3
 8003126:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800312a:	edd7 7a07 	vldr	s15, [r7, #28]
 800312e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003132:	ee17 0a90 	vmov	r0, s15
 8003136:	f7fd fa0f 	bl	8000558 <__aeabi_f2d>
 800313a:	a315      	add	r3, pc, #84	; (adr r3, 8003190 <angle_pid+0xe8>)
 800313c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003140:	f7fd fb8c 	bl	800085c <__aeabi_ddiv>
 8003144:	4602      	mov	r2, r0
 8003146:	460b      	mov	r3, r1
 8003148:	4610      	mov	r0, r2
 800314a:	4619      	mov	r1, r3
 800314c:	f7fd fcf6 	bl	8000b3c <__aeabi_d2iz>
 8003150:	4603      	mov	r3, r0
 8003152:	837b      	strh	r3, [r7, #26]
	speed_pid(set_rpm, motor->rpm, &motor->pid);
 8003154:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003158:	4618      	mov	r0, r3
 800315a:	f7fd f9eb 	bl	8000534 <__aeabi_i2d>
 800315e:	4604      	mov	r4, r0
 8003160:	460d      	mov	r5, r1
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003168:	4618      	mov	r0, r3
 800316a:	f7fd f9e3 	bl	8000534 <__aeabi_i2d>
 800316e:	4680      	mov	r8, r0
 8003170:	4689      	mov	r9, r1
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	3328      	adds	r3, #40	; 0x28
 8003176:	4618      	mov	r0, r3
 8003178:	ec49 8b11 	vmov	d1, r8, r9
 800317c:	ec45 4b10 	vmov	d0, r4, r5
 8003180:	f7ff feda 	bl	8002f38 <speed_pid>


}
 8003184:	bf00      	nop
 8003186:	3720      	adds	r7, #32
 8003188:	46bd      	mov	sp, r7
 800318a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800318e:	bf00      	nop
 8003190:	9999999a 	.word	0x9999999a
 8003194:	3fb99999 	.word	0x3fb99999
 8003198:	40490fdb 	.word	0x40490fdb
 800319c:	40c90fdb 	.word	0x40c90fdb
 80031a0:	c0490fdb 	.word	0xc0490fdb

080031a4 <CANone_cmd>:
 * @param can_stdID: the header ID, i.e. 0x200, 0x1FF and 0x2FF
 *
 * @note: this function probably only works for DJI motors due to the 2 bytes each motors require
 */
void CANone_cmd(int16_t motor1, int16_t motor2, int16_t motor3, int16_t motor4, uint32_t can_stdID)
{
 80031a4:	b590      	push	{r4, r7, lr}
 80031a6:	b08d      	sub	sp, #52	; 0x34
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	4604      	mov	r4, r0
 80031ac:	4608      	mov	r0, r1
 80031ae:	4611      	mov	r1, r2
 80031b0:	461a      	mov	r2, r3
 80031b2:	4623      	mov	r3, r4
 80031b4:	80fb      	strh	r3, [r7, #6]
 80031b6:	4603      	mov	r3, r0
 80031b8:	80bb      	strh	r3, [r7, #4]
 80031ba:	460b      	mov	r3, r1
 80031bc:	807b      	strh	r3, [r7, #2]
 80031be:	4613      	mov	r3, r2
 80031c0:	803b      	strh	r3, [r7, #0]
	CAN_TxHeaderTypeDef  CANone_tx_message;
	uint8_t              CANone_send_data[8];
	uint32_t send_mail_box;
	CANone_tx_message.StdId = can_stdID;
 80031c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031c4:	61bb      	str	r3, [r7, #24]
	CANone_tx_message.IDE = CAN_ID_STD;
 80031c6:	2300      	movs	r3, #0
 80031c8:	623b      	str	r3, [r7, #32]
	CANone_tx_message.RTR = CAN_RTR_DATA;
 80031ca:	2300      	movs	r3, #0
 80031cc:	627b      	str	r3, [r7, #36]	; 0x24
	CANone_tx_message.DLC = 0x08;
 80031ce:	2308      	movs	r3, #8
 80031d0:	62bb      	str	r3, [r7, #40]	; 0x28
	CANone_send_data[0] = motor1 >> 8;
 80031d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80031d6:	121b      	asrs	r3, r3, #8
 80031d8:	b21b      	sxth	r3, r3
 80031da:	b2db      	uxtb	r3, r3
 80031dc:	743b      	strb	r3, [r7, #16]
	CANone_send_data[1] = motor1;
 80031de:	88fb      	ldrh	r3, [r7, #6]
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	747b      	strb	r3, [r7, #17]
	CANone_send_data[2] = motor2 >> 8;
 80031e4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80031e8:	121b      	asrs	r3, r3, #8
 80031ea:	b21b      	sxth	r3, r3
 80031ec:	b2db      	uxtb	r3, r3
 80031ee:	74bb      	strb	r3, [r7, #18]
	CANone_send_data[3] = motor2;
 80031f0:	88bb      	ldrh	r3, [r7, #4]
 80031f2:	b2db      	uxtb	r3, r3
 80031f4:	74fb      	strb	r3, [r7, #19]
	CANone_send_data[4] = motor3 >> 8;
 80031f6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80031fa:	121b      	asrs	r3, r3, #8
 80031fc:	b21b      	sxth	r3, r3
 80031fe:	b2db      	uxtb	r3, r3
 8003200:	753b      	strb	r3, [r7, #20]
	CANone_send_data[5] = motor3;
 8003202:	887b      	ldrh	r3, [r7, #2]
 8003204:	b2db      	uxtb	r3, r3
 8003206:	757b      	strb	r3, [r7, #21]
	CANone_send_data[6] = motor4 >> 8;
 8003208:	f9b7 3000 	ldrsh.w	r3, [r7]
 800320c:	121b      	asrs	r3, r3, #8
 800320e:	b21b      	sxth	r3, r3
 8003210:	b2db      	uxtb	r3, r3
 8003212:	75bb      	strb	r3, [r7, #22]
	CANone_send_data[7] = motor4;
 8003214:	883b      	ldrh	r3, [r7, #0]
 8003216:	b2db      	uxtb	r3, r3
 8003218:	75fb      	strb	r3, [r7, #23]
	HAL_CAN_AddTxMessage(&hcan1, &CANone_tx_message, CANone_send_data, &send_mail_box);
 800321a:	f107 030c 	add.w	r3, r7, #12
 800321e:	f107 0210 	add.w	r2, r7, #16
 8003222:	f107 0118 	add.w	r1, r7, #24
 8003226:	4803      	ldr	r0, [pc, #12]	; (8003234 <CANone_cmd+0x90>)
 8003228:	f000 fe40 	bl	8003eac <HAL_CAN_AddTxMessage>
}
 800322c:	bf00      	nop
 800322e:	3734      	adds	r7, #52	; 0x34
 8003230:	46bd      	mov	sp, r7
 8003232:	bd90      	pop	{r4, r7, pc}
 8003234:	20009874 	.word	0x20009874

08003238 <CANtwo_cmd>:
 * @param can_stdID: the header ID, i.e. 0x200, 0x1FF and 0x2FF
 *
 * @note: this function probably only works for DJI motors due to the 2 bytes each motors require
 */
void CANtwo_cmd(int16_t motor1, int16_t motor2, int16_t motor3, int16_t motor4, uint32_t can_stdID)
{
 8003238:	b590      	push	{r4, r7, lr}
 800323a:	b085      	sub	sp, #20
 800323c:	af00      	add	r7, sp, #0
 800323e:	4604      	mov	r4, r0
 8003240:	4608      	mov	r0, r1
 8003242:	4611      	mov	r1, r2
 8003244:	461a      	mov	r2, r3
 8003246:	4623      	mov	r3, r4
 8003248:	80fb      	strh	r3, [r7, #6]
 800324a:	4603      	mov	r3, r0
 800324c:	80bb      	strh	r3, [r7, #4]
 800324e:	460b      	mov	r3, r1
 8003250:	807b      	strh	r3, [r7, #2]
 8003252:	4613      	mov	r3, r2
 8003254:	803b      	strh	r3, [r7, #0]
	static CAN_TxHeaderTypeDef  CANtwo_tx_message;
	static uint8_t              CANtwo_send_data[8];
	uint32_t send_mail_box;
	CANtwo_tx_message.StdId = can_stdID;
 8003256:	4a21      	ldr	r2, [pc, #132]	; (80032dc <CANtwo_cmd+0xa4>)
 8003258:	6a3b      	ldr	r3, [r7, #32]
 800325a:	6013      	str	r3, [r2, #0]
	CANtwo_tx_message.IDE = CAN_ID_STD;
 800325c:	4b1f      	ldr	r3, [pc, #124]	; (80032dc <CANtwo_cmd+0xa4>)
 800325e:	2200      	movs	r2, #0
 8003260:	609a      	str	r2, [r3, #8]
	CANtwo_tx_message.RTR = CAN_RTR_DATA;
 8003262:	4b1e      	ldr	r3, [pc, #120]	; (80032dc <CANtwo_cmd+0xa4>)
 8003264:	2200      	movs	r2, #0
 8003266:	60da      	str	r2, [r3, #12]
	CANtwo_tx_message.DLC = 0x08;
 8003268:	4b1c      	ldr	r3, [pc, #112]	; (80032dc <CANtwo_cmd+0xa4>)
 800326a:	2208      	movs	r2, #8
 800326c:	611a      	str	r2, [r3, #16]
	CANtwo_send_data[0] = motor1 >> 8;
 800326e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003272:	121b      	asrs	r3, r3, #8
 8003274:	b21b      	sxth	r3, r3
 8003276:	b2da      	uxtb	r2, r3
 8003278:	4b19      	ldr	r3, [pc, #100]	; (80032e0 <CANtwo_cmd+0xa8>)
 800327a:	701a      	strb	r2, [r3, #0]
	CANtwo_send_data[1] = motor1;
 800327c:	88fb      	ldrh	r3, [r7, #6]
 800327e:	b2da      	uxtb	r2, r3
 8003280:	4b17      	ldr	r3, [pc, #92]	; (80032e0 <CANtwo_cmd+0xa8>)
 8003282:	705a      	strb	r2, [r3, #1]
	CANtwo_send_data[2] = motor2 >> 8;
 8003284:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003288:	121b      	asrs	r3, r3, #8
 800328a:	b21b      	sxth	r3, r3
 800328c:	b2da      	uxtb	r2, r3
 800328e:	4b14      	ldr	r3, [pc, #80]	; (80032e0 <CANtwo_cmd+0xa8>)
 8003290:	709a      	strb	r2, [r3, #2]
	CANtwo_send_data[3] = motor2;
 8003292:	88bb      	ldrh	r3, [r7, #4]
 8003294:	b2da      	uxtb	r2, r3
 8003296:	4b12      	ldr	r3, [pc, #72]	; (80032e0 <CANtwo_cmd+0xa8>)
 8003298:	70da      	strb	r2, [r3, #3]
	CANtwo_send_data[4] = motor3 >> 8;
 800329a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800329e:	121b      	asrs	r3, r3, #8
 80032a0:	b21b      	sxth	r3, r3
 80032a2:	b2da      	uxtb	r2, r3
 80032a4:	4b0e      	ldr	r3, [pc, #56]	; (80032e0 <CANtwo_cmd+0xa8>)
 80032a6:	711a      	strb	r2, [r3, #4]
	CANtwo_send_data[5] = motor3;
 80032a8:	887b      	ldrh	r3, [r7, #2]
 80032aa:	b2da      	uxtb	r2, r3
 80032ac:	4b0c      	ldr	r3, [pc, #48]	; (80032e0 <CANtwo_cmd+0xa8>)
 80032ae:	715a      	strb	r2, [r3, #5]
	CANtwo_send_data[6] = motor4 >> 8;
 80032b0:	f9b7 3000 	ldrsh.w	r3, [r7]
 80032b4:	121b      	asrs	r3, r3, #8
 80032b6:	b21b      	sxth	r3, r3
 80032b8:	b2da      	uxtb	r2, r3
 80032ba:	4b09      	ldr	r3, [pc, #36]	; (80032e0 <CANtwo_cmd+0xa8>)
 80032bc:	719a      	strb	r2, [r3, #6]
	CANtwo_send_data[7] = motor4;
 80032be:	883b      	ldrh	r3, [r7, #0]
 80032c0:	b2da      	uxtb	r2, r3
 80032c2:	4b07      	ldr	r3, [pc, #28]	; (80032e0 <CANtwo_cmd+0xa8>)
 80032c4:	71da      	strb	r2, [r3, #7]
	HAL_CAN_AddTxMessage(&hcan2, &CANtwo_tx_message, CANtwo_send_data, &send_mail_box);
 80032c6:	f107 030c 	add.w	r3, r7, #12
 80032ca:	4a05      	ldr	r2, [pc, #20]	; (80032e0 <CANtwo_cmd+0xa8>)
 80032cc:	4903      	ldr	r1, [pc, #12]	; (80032dc <CANtwo_cmd+0xa4>)
 80032ce:	4805      	ldr	r0, [pc, #20]	; (80032e4 <CANtwo_cmd+0xac>)
 80032d0:	f000 fdec 	bl	8003eac <HAL_CAN_AddTxMessage>
}
 80032d4:	bf00      	nop
 80032d6:	3714      	adds	r7, #20
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd90      	pop	{r4, r7, pc}
 80032dc:	20004ef4 	.word	0x20004ef4
 80032e0:	20004f0c 	.word	0x20004f0c
 80032e4:	2000984c 	.word	0x2000984c

080032e8 <int_limit>:
	}

}

void int_limit(int16_t *vIn, int16_t max)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b083      	sub	sp, #12
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
 80032f0:	460b      	mov	r3, r1
 80032f2:	807b      	strh	r3, [r7, #2]
	if (*vIn > max)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80032fa:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80032fe:	429a      	cmp	r2, r3
 8003300:	da03      	bge.n	800330a <int_limit+0x22>
	{
		*vIn = max;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	887a      	ldrh	r2, [r7, #2]
 8003306:	801a      	strh	r2, [r3, #0]
	}
	else if (*vIn < -max)
	{
		*vIn = -max;
	}
}
 8003308:	e00e      	b.n	8003328 <int_limit+0x40>
	else if (*vIn < -max)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003310:	461a      	mov	r2, r3
 8003312:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003316:	425b      	negs	r3, r3
 8003318:	429a      	cmp	r2, r3
 800331a:	da05      	bge.n	8003328 <int_limit+0x40>
		*vIn = -max;
 800331c:	887b      	ldrh	r3, [r7, #2]
 800331e:	425b      	negs	r3, r3
 8003320:	b29b      	uxth	r3, r3
 8003322:	b21a      	sxth	r2, r3
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	801a      	strh	r2, [r3, #0]
}
 8003328:	bf00      	nop
 800332a:	370c      	adds	r7, #12
 800332c:	46bd      	mov	sp, r7
 800332e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003332:	4770      	bx	lr

08003334 <movement_control_task>:
static uint8_t unjamming = 0;*/



void movement_control_task(void *argument)
{
 8003334:	b590      	push	{r4, r7, lr}
 8003336:	b099      	sub	sp, #100	; 0x64
 8003338:	af16      	add	r7, sp, #88	; 0x58
 800333a:	6078      	str	r0, [r7, #4]
	while(1)
	{
		osEventFlagsWait(chassis_data_flag, 0x10, osFlagsWaitAll, 100);
 800333c:	4b0e      	ldr	r3, [pc, #56]	; (8003378 <movement_control_task+0x44>)
 800333e:	6818      	ldr	r0, [r3, #0]
 8003340:	2364      	movs	r3, #100	; 0x64
 8003342:	2201      	movs	r2, #1
 8003344:	2110      	movs	r1, #16
 8003346:	f004 fe97 	bl	8008078 <osEventFlagsWait>
		chassis_motion_control(canone_data.CHASSIS);
 800334a:	4c0c      	ldr	r4, [pc, #48]	; (800337c <movement_control_task+0x48>)
 800334c:	4668      	mov	r0, sp
 800334e:	f104 0310 	add.w	r3, r4, #16
 8003352:	2258      	movs	r2, #88	; 0x58
 8003354:	4619      	mov	r1, r3
 8003356:	f008 f845 	bl	800b3e4 <memcpy>
 800335a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800335e:	f000 f80f 	bl	8003380 <chassis_motion_control>
		osEventFlagsClear(chassis_data_flag, 0x10);
 8003362:	4b05      	ldr	r3, [pc, #20]	; (8003378 <movement_control_task+0x44>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	2110      	movs	r1, #16
 8003368:	4618      	mov	r0, r3
 800336a:	f004 fe41 	bl	8007ff0 <osEventFlagsClear>
		//delays task for other tasks to run
		vTaskDelay(CHASSIS_DELAY);
 800336e:	2002      	movs	r0, #2
 8003370:	f006 fa6a 	bl	8009848 <vTaskDelay>
		osEventFlagsWait(chassis_data_flag, 0x10, osFlagsWaitAll, 100);
 8003374:	e7e2      	b.n	800333c <movement_control_task+0x8>
 8003376:	bf00      	nop
 8003378:	200098c0 	.word	0x200098c0
 800337c:	20009c88 	.word	0x20009c88

08003380 <chassis_motion_control>:
	osThreadTerminate(NULL);
}

//Movement restricted to along x axis (hence, only read in remote_cmd.left_x)
void chassis_motion_control(motor_data_t *motor)
{
 8003380:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003384:	b086      	sub	sp, #24
 8003386:	af02      	add	r7, sp, #8
 8003388:	6078      	str	r0, [r7, #4]
	//Holds wheel speed output, fl = front left, etc...
	int16_t out_wheel = 0;
 800338a:	2300      	movs	r3, #0
 800338c:	81fb      	strh	r3, [r7, #14]
	int8_t direction[2] = {-1,1};
 800338e:	f240 13ff 	movw	r3, #511	; 0x1ff
 8003392:	81bb      	strh	r3, [r7, #12]
	//Priority of switches, kill switch -> aimbot mode -> manual mode
	// Checks if kill switch activated before checking if its aimbot/manual mode. If manual mode, make sure that right switch is correct position
	// The particular ordering of conditions is to reflect the priority of the switches
	//e.g. This is not correct: right_switch != all_on -> update out_wheel and CANonecmd because this neglects aimbot mode
	// which should take priority over manual mode
	if (remote_cmd.right_switch == all_off)
 8003394:	4b54      	ldr	r3, [pc, #336]	; (80034e8 <chassis_motion_control+0x168>)
 8003396:	f993 3009 	ldrsb.w	r3, [r3, #9]
 800339a:	2b01      	cmp	r3, #1
 800339c:	d109      	bne.n	80033b2 <chassis_motion_control+0x32>
	{
		CANone_cmd(0,0,0,0,CHASSIS_ID);
 800339e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80033a2:	9300      	str	r3, [sp, #0]
 80033a4:	2300      	movs	r3, #0
 80033a6:	2200      	movs	r2, #0
 80033a8:	2100      	movs	r1, #0
 80033aa:	2000      	movs	r0, #0
 80033ac:	f7ff fefa 	bl	80031a4 <CANone_cmd>
	else
	{
		CANone_cmd(0,0,0,0,CHASSIS_ID);
	}

}
 80033b0:	e094      	b.n	80034dc <chassis_motion_control+0x15c>
	else if (remote_cmd.left_switch == aimbot_enable)
 80033b2:	4b4d      	ldr	r3, [pc, #308]	; (80034e8 <chassis_motion_control+0x168>)
 80033b4:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d14e      	bne.n	800345a <chassis_motion_control+0xda>
		out_wheel = MAX_SPEED * (rand()%MAX_RC_VALUE)/(MAX_RC_VALUE) * direction[rand()%2];
 80033bc:	f008 f828 	bl	800b410 <rand>
 80033c0:	4602      	mov	r2, r0
 80033c2:	4b4a      	ldr	r3, [pc, #296]	; (80034ec <chassis_motion_control+0x16c>)
 80033c4:	fb83 1302 	smull	r1, r3, r3, r2
 80033c8:	1259      	asrs	r1, r3, #9
 80033ca:	17d3      	asrs	r3, r2, #31
 80033cc:	1acb      	subs	r3, r1, r3
 80033ce:	f44f 61a5 	mov.w	r1, #1320	; 0x528
 80033d2:	fb01 f303 	mul.w	r3, r1, r3
 80033d6:	1ad3      	subs	r3, r2, r3
 80033d8:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80033dc:	fb02 f303 	mul.w	r3, r2, r3
 80033e0:	4a42      	ldr	r2, [pc, #264]	; (80034ec <chassis_motion_control+0x16c>)
 80033e2:	fb82 1203 	smull	r1, r2, r2, r3
 80033e6:	1252      	asrs	r2, r2, #9
 80033e8:	17db      	asrs	r3, r3, #31
 80033ea:	1ad3      	subs	r3, r2, r3
 80033ec:	b29c      	uxth	r4, r3
 80033ee:	f008 f80f 	bl	800b410 <rand>
 80033f2:	4603      	mov	r3, r0
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	f003 0301 	and.w	r3, r3, #1
 80033fa:	bfb8      	it	lt
 80033fc:	425b      	neglt	r3, r3
 80033fe:	f107 0210 	add.w	r2, r7, #16
 8003402:	4413      	add	r3, r2
 8003404:	f913 3c04 	ldrsb.w	r3, [r3, #-4]
 8003408:	b29b      	uxth	r3, r3
 800340a:	fb14 f303 	smulbb	r3, r4, r3
 800340e:	b29b      	uxth	r3, r3
 8003410:	81fb      	strh	r3, [r7, #14]
		speed_pid(out_wheel,motor->rpm, &motor->pid);
 8003412:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003416:	4618      	mov	r0, r3
 8003418:	f7fd f88c 	bl	8000534 <__aeabi_i2d>
 800341c:	4604      	mov	r4, r0
 800341e:	460d      	mov	r5, r1
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003426:	4618      	mov	r0, r3
 8003428:	f7fd f884 	bl	8000534 <__aeabi_i2d>
 800342c:	4680      	mov	r8, r0
 800342e:	4689      	mov	r9, r1
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	3310      	adds	r3, #16
 8003434:	4618      	mov	r0, r3
 8003436:	ec49 8b11 	vmov	d1, r8, r9
 800343a:	ec45 4b10 	vmov	d0, r4, r5
 800343e:	f7ff fd7b 	bl	8002f38 <speed_pid>
		CANone_cmd(motor->pid.output, 0, 0, 0, CHASSIS_ID);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	f9b3 0064 	ldrsh.w	r0, [r3, #100]	; 0x64
 8003448:	f44f 7300 	mov.w	r3, #512	; 0x200
 800344c:	9300      	str	r3, [sp, #0]
 800344e:	2300      	movs	r3, #0
 8003450:	2200      	movs	r2, #0
 8003452:	2100      	movs	r1, #0
 8003454:	f7ff fea6 	bl	80031a4 <CANone_cmd>
}
 8003458:	e040      	b.n	80034dc <chassis_motion_control+0x15c>
	else if (remote_cmd.right_switch == all_on)
 800345a:	4b23      	ldr	r3, [pc, #140]	; (80034e8 <chassis_motion_control+0x168>)
 800345c:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8003460:	2b02      	cmp	r3, #2
 8003462:	d132      	bne.n	80034ca <chassis_motion_control+0x14a>
		out_wheel = MAX_SPEED * (remote_cmd.left_x)/(MAX_RC_VALUE/2);
 8003464:	4b20      	ldr	r3, [pc, #128]	; (80034e8 <chassis_motion_control+0x168>)
 8003466:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800346a:	461a      	mov	r2, r3
 800346c:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8003470:	fb03 f302 	mul.w	r3, r3, r2
 8003474:	4a1d      	ldr	r2, [pc, #116]	; (80034ec <chassis_motion_control+0x16c>)
 8003476:	fb82 1203 	smull	r1, r2, r2, r3
 800347a:	1212      	asrs	r2, r2, #8
 800347c:	17db      	asrs	r3, r3, #31
 800347e:	1ad3      	subs	r3, r2, r3
 8003480:	81fb      	strh	r3, [r7, #14]
		speed_pid(out_wheel,motor->rpm, &motor->pid);
 8003482:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003486:	4618      	mov	r0, r3
 8003488:	f7fd f854 	bl	8000534 <__aeabi_i2d>
 800348c:	4604      	mov	r4, r0
 800348e:	460d      	mov	r5, r1
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003496:	4618      	mov	r0, r3
 8003498:	f7fd f84c 	bl	8000534 <__aeabi_i2d>
 800349c:	4680      	mov	r8, r0
 800349e:	4689      	mov	r9, r1
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	3310      	adds	r3, #16
 80034a4:	4618      	mov	r0, r3
 80034a6:	ec49 8b11 	vmov	d1, r8, r9
 80034aa:	ec45 4b10 	vmov	d0, r4, r5
 80034ae:	f7ff fd43 	bl	8002f38 <speed_pid>
		CANone_cmd(motor->pid.output, 0, 0, 0, CHASSIS_ID);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	f9b3 0064 	ldrsh.w	r0, [r3, #100]	; 0x64
 80034b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80034bc:	9300      	str	r3, [sp, #0]
 80034be:	2300      	movs	r3, #0
 80034c0:	2200      	movs	r2, #0
 80034c2:	2100      	movs	r1, #0
 80034c4:	f7ff fe6e 	bl	80031a4 <CANone_cmd>
}
 80034c8:	e008      	b.n	80034dc <chassis_motion_control+0x15c>
		CANone_cmd(0,0,0,0,CHASSIS_ID);
 80034ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80034ce:	9300      	str	r3, [sp, #0]
 80034d0:	2300      	movs	r3, #0
 80034d2:	2200      	movs	r2, #0
 80034d4:	2100      	movs	r1, #0
 80034d6:	2000      	movs	r0, #0
 80034d8:	f7ff fe64 	bl	80031a4 <CANone_cmd>
}
 80034dc:	bf00      	nop
 80034de:	3710      	adds	r7, #16
 80034e0:	46bd      	mov	sp, r7
 80034e2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80034e6:	bf00      	nop
 80034e8:	20004f14 	.word	0x20004f14
 80034ec:	634c0635 	.word	0x634c0635

080034f0 <dbus_remote_ISR>:
extern float pitch;
extern float yaw;


//Releases dbus semaphore when a dbus signal is detected by ISR
void dbus_remote_ISR(DMA_HandleTypeDef *hdma) {
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b082      	sub	sp, #8
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
	remote_cmd.right_x = (remote_raw_data[0] | remote_raw_data[1] << 8) & 0x07FF;
 80034f8:	4b71      	ldr	r3, [pc, #452]	; (80036c0 <dbus_remote_ISR+0x1d0>)
 80034fa:	781b      	ldrb	r3, [r3, #0]
 80034fc:	b21a      	sxth	r2, r3
 80034fe:	4b70      	ldr	r3, [pc, #448]	; (80036c0 <dbus_remote_ISR+0x1d0>)
 8003500:	785b      	ldrb	r3, [r3, #1]
 8003502:	021b      	lsls	r3, r3, #8
 8003504:	b21b      	sxth	r3, r3
 8003506:	4313      	orrs	r3, r2
 8003508:	b21b      	sxth	r3, r3
 800350a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800350e:	b21a      	sxth	r2, r3
 8003510:	4b6c      	ldr	r3, [pc, #432]	; (80036c4 <dbus_remote_ISR+0x1d4>)
 8003512:	801a      	strh	r2, [r3, #0]
	remote_cmd.right_x -= JOYSTICK_OFFSET;
 8003514:	4b6b      	ldr	r3, [pc, #428]	; (80036c4 <dbus_remote_ISR+0x1d4>)
 8003516:	f9b3 3000 	ldrsh.w	r3, [r3]
 800351a:	b29b      	uxth	r3, r3
 800351c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8003520:	b29b      	uxth	r3, r3
 8003522:	b21a      	sxth	r2, r3
 8003524:	4b67      	ldr	r3, [pc, #412]	; (80036c4 <dbus_remote_ISR+0x1d4>)
 8003526:	801a      	strh	r2, [r3, #0]
	remote_cmd.right_y = (remote_raw_data[1] >> 3 | remote_raw_data[2] << 5) & 0x07FF;
 8003528:	4b65      	ldr	r3, [pc, #404]	; (80036c0 <dbus_remote_ISR+0x1d0>)
 800352a:	785b      	ldrb	r3, [r3, #1]
 800352c:	08db      	lsrs	r3, r3, #3
 800352e:	b2db      	uxtb	r3, r3
 8003530:	b21a      	sxth	r2, r3
 8003532:	4b63      	ldr	r3, [pc, #396]	; (80036c0 <dbus_remote_ISR+0x1d0>)
 8003534:	789b      	ldrb	r3, [r3, #2]
 8003536:	015b      	lsls	r3, r3, #5
 8003538:	b21b      	sxth	r3, r3
 800353a:	4313      	orrs	r3, r2
 800353c:	b21b      	sxth	r3, r3
 800353e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003542:	b21a      	sxth	r2, r3
 8003544:	4b5f      	ldr	r3, [pc, #380]	; (80036c4 <dbus_remote_ISR+0x1d4>)
 8003546:	805a      	strh	r2, [r3, #2]
	remote_cmd.right_y -= JOYSTICK_OFFSET;
 8003548:	4b5e      	ldr	r3, [pc, #376]	; (80036c4 <dbus_remote_ISR+0x1d4>)
 800354a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800354e:	b29b      	uxth	r3, r3
 8003550:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8003554:	b29b      	uxth	r3, r3
 8003556:	b21a      	sxth	r2, r3
 8003558:	4b5a      	ldr	r3, [pc, #360]	; (80036c4 <dbus_remote_ISR+0x1d4>)
 800355a:	805a      	strh	r2, [r3, #2]
	remote_cmd.left_x = (remote_raw_data[2] >> 6 | remote_raw_data[3] << 2 | remote_raw_data[4] << 10) & 0x07FF;
 800355c:	4b58      	ldr	r3, [pc, #352]	; (80036c0 <dbus_remote_ISR+0x1d0>)
 800355e:	789b      	ldrb	r3, [r3, #2]
 8003560:	099b      	lsrs	r3, r3, #6
 8003562:	b2db      	uxtb	r3, r3
 8003564:	b21a      	sxth	r2, r3
 8003566:	4b56      	ldr	r3, [pc, #344]	; (80036c0 <dbus_remote_ISR+0x1d0>)
 8003568:	78db      	ldrb	r3, [r3, #3]
 800356a:	009b      	lsls	r3, r3, #2
 800356c:	b21b      	sxth	r3, r3
 800356e:	4313      	orrs	r3, r2
 8003570:	b21a      	sxth	r2, r3
 8003572:	4b53      	ldr	r3, [pc, #332]	; (80036c0 <dbus_remote_ISR+0x1d0>)
 8003574:	791b      	ldrb	r3, [r3, #4]
 8003576:	029b      	lsls	r3, r3, #10
 8003578:	b21b      	sxth	r3, r3
 800357a:	4313      	orrs	r3, r2
 800357c:	b21b      	sxth	r3, r3
 800357e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003582:	b21a      	sxth	r2, r3
 8003584:	4b4f      	ldr	r3, [pc, #316]	; (80036c4 <dbus_remote_ISR+0x1d4>)
 8003586:	809a      	strh	r2, [r3, #4]
	remote_cmd.left_x -= JOYSTICK_OFFSET;
 8003588:	4b4e      	ldr	r3, [pc, #312]	; (80036c4 <dbus_remote_ISR+0x1d4>)
 800358a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800358e:	b29b      	uxth	r3, r3
 8003590:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8003594:	b29b      	uxth	r3, r3
 8003596:	b21a      	sxth	r2, r3
 8003598:	4b4a      	ldr	r3, [pc, #296]	; (80036c4 <dbus_remote_ISR+0x1d4>)
 800359a:	809a      	strh	r2, [r3, #4]
	remote_cmd.left_y = (remote_raw_data[4] >> 1 | remote_raw_data[5] << 7) & 0x07FF;
 800359c:	4b48      	ldr	r3, [pc, #288]	; (80036c0 <dbus_remote_ISR+0x1d0>)
 800359e:	791b      	ldrb	r3, [r3, #4]
 80035a0:	085b      	lsrs	r3, r3, #1
 80035a2:	b2db      	uxtb	r3, r3
 80035a4:	b21a      	sxth	r2, r3
 80035a6:	4b46      	ldr	r3, [pc, #280]	; (80036c0 <dbus_remote_ISR+0x1d0>)
 80035a8:	795b      	ldrb	r3, [r3, #5]
 80035aa:	01db      	lsls	r3, r3, #7
 80035ac:	b21b      	sxth	r3, r3
 80035ae:	4313      	orrs	r3, r2
 80035b0:	b21b      	sxth	r3, r3
 80035b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80035b6:	b21a      	sxth	r2, r3
 80035b8:	4b42      	ldr	r3, [pc, #264]	; (80036c4 <dbus_remote_ISR+0x1d4>)
 80035ba:	80da      	strh	r2, [r3, #6]
	remote_cmd.left_y -= JOYSTICK_OFFSET;
 80035bc:	4b41      	ldr	r3, [pc, #260]	; (80036c4 <dbus_remote_ISR+0x1d4>)
 80035be:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80035c2:	b29b      	uxth	r3, r3
 80035c4:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80035c8:	b29b      	uxth	r3, r3
 80035ca:	b21a      	sxth	r2, r3
 80035cc:	4b3d      	ldr	r3, [pc, #244]	; (80036c4 <dbus_remote_ISR+0x1d4>)
 80035ce:	80da      	strh	r2, [r3, #6]
	//Left switch position
	remote_cmd.left_switch = ((remote_raw_data[5] >> 4) & 0x000C) >> 2;
 80035d0:	4b3b      	ldr	r3, [pc, #236]	; (80036c0 <dbus_remote_ISR+0x1d0>)
 80035d2:	795b      	ldrb	r3, [r3, #5]
 80035d4:	091b      	lsrs	r3, r3, #4
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	109b      	asrs	r3, r3, #2
 80035da:	b25b      	sxtb	r3, r3
 80035dc:	f003 0303 	and.w	r3, r3, #3
 80035e0:	b25a      	sxtb	r2, r3
 80035e2:	4b38      	ldr	r3, [pc, #224]	; (80036c4 <dbus_remote_ISR+0x1d4>)
 80035e4:	721a      	strb	r2, [r3, #8]
	remote_cmd.right_switch = (remote_raw_data[5] >> 4) & 0x0003;
 80035e6:	4b36      	ldr	r3, [pc, #216]	; (80036c0 <dbus_remote_ISR+0x1d0>)
 80035e8:	795b      	ldrb	r3, [r3, #5]
 80035ea:	091b      	lsrs	r3, r3, #4
 80035ec:	b2db      	uxtb	r3, r3
 80035ee:	b25b      	sxtb	r3, r3
 80035f0:	f003 0303 	and.w	r3, r3, #3
 80035f4:	b25a      	sxtb	r2, r3
 80035f6:	4b33      	ldr	r3, [pc, #204]	; (80036c4 <dbus_remote_ISR+0x1d4>)
 80035f8:	725a      	strb	r2, [r3, #9]
	remote_cmd.mouse_x = ((int16_t)remote_raw_data[6] | ((int16_t)remote_raw_data[7] << 8));
 80035fa:	4b31      	ldr	r3, [pc, #196]	; (80036c0 <dbus_remote_ISR+0x1d0>)
 80035fc:	799b      	ldrb	r3, [r3, #6]
 80035fe:	b21a      	sxth	r2, r3
 8003600:	4b2f      	ldr	r3, [pc, #188]	; (80036c0 <dbus_remote_ISR+0x1d0>)
 8003602:	79db      	ldrb	r3, [r3, #7]
 8003604:	021b      	lsls	r3, r3, #8
 8003606:	b21b      	sxth	r3, r3
 8003608:	4313      	orrs	r3, r2
 800360a:	b21a      	sxth	r2, r3
 800360c:	4b2d      	ldr	r3, [pc, #180]	; (80036c4 <dbus_remote_ISR+0x1d4>)
 800360e:	815a      	strh	r2, [r3, #10]
	remote_cmd.mouse_y = ((int16_t)remote_raw_data[8] | ((int16_t)remote_raw_data[9] << 8));
 8003610:	4b2b      	ldr	r3, [pc, #172]	; (80036c0 <dbus_remote_ISR+0x1d0>)
 8003612:	7a1b      	ldrb	r3, [r3, #8]
 8003614:	b21a      	sxth	r2, r3
 8003616:	4b2a      	ldr	r3, [pc, #168]	; (80036c0 <dbus_remote_ISR+0x1d0>)
 8003618:	7a5b      	ldrb	r3, [r3, #9]
 800361a:	021b      	lsls	r3, r3, #8
 800361c:	b21b      	sxth	r3, r3
 800361e:	4313      	orrs	r3, r2
 8003620:	b21a      	sxth	r2, r3
 8003622:	4b28      	ldr	r3, [pc, #160]	; (80036c4 <dbus_remote_ISR+0x1d4>)
 8003624:	819a      	strh	r2, [r3, #12]
	remote_cmd.mouse_z = ((int16_t)remote_raw_data[10] | ((int16_t)remote_raw_data[11] << 8));
 8003626:	4b26      	ldr	r3, [pc, #152]	; (80036c0 <dbus_remote_ISR+0x1d0>)
 8003628:	7a9b      	ldrb	r3, [r3, #10]
 800362a:	b21a      	sxth	r2, r3
 800362c:	4b24      	ldr	r3, [pc, #144]	; (80036c0 <dbus_remote_ISR+0x1d0>)
 800362e:	7adb      	ldrb	r3, [r3, #11]
 8003630:	021b      	lsls	r3, r3, #8
 8003632:	b21b      	sxth	r3, r3
 8003634:	4313      	orrs	r3, r2
 8003636:	b21a      	sxth	r2, r3
 8003638:	4b22      	ldr	r3, [pc, #136]	; (80036c4 <dbus_remote_ISR+0x1d4>)
 800363a:	81da      	strh	r2, [r3, #14]
	remote_cmd.mouse_left = (remote_raw_data[12]);
 800363c:	4b20      	ldr	r3, [pc, #128]	; (80036c0 <dbus_remote_ISR+0x1d0>)
 800363e:	7b1b      	ldrb	r3, [r3, #12]
 8003640:	b25a      	sxtb	r2, r3
 8003642:	4b20      	ldr	r3, [pc, #128]	; (80036c4 <dbus_remote_ISR+0x1d4>)
 8003644:	761a      	strb	r2, [r3, #24]
	remote_cmd.mouse_right = (remote_raw_data[13]);
 8003646:	4b1e      	ldr	r3, [pc, #120]	; (80036c0 <dbus_remote_ISR+0x1d0>)
 8003648:	7b5b      	ldrb	r3, [r3, #13]
 800364a:	b25a      	sxtb	r2, r3
 800364c:	4b1d      	ldr	r3, [pc, #116]	; (80036c4 <dbus_remote_ISR+0x1d4>)
 800364e:	765a      	strb	r2, [r3, #25]
	remote_cmd.keyboard_keys = (remote_raw_data[14]);
 8003650:	4b1b      	ldr	r3, [pc, #108]	; (80036c0 <dbus_remote_ISR+0x1d0>)
 8003652:	7b9b      	ldrb	r3, [r3, #14]
 8003654:	b21a      	sxth	r2, r3
 8003656:	4b1b      	ldr	r3, [pc, #108]	; (80036c4 <dbus_remote_ISR+0x1d4>)
 8003658:	835a      	strh	r2, [r3, #26]
	remote_cmd.last_time = HAL_GetTick();
 800365a:	f000 f9d7 	bl	8003a0c <HAL_GetTick>
 800365e:	4603      	mov	r3, r0
 8003660:	4a18      	ldr	r2, [pc, #96]	; (80036c4 <dbus_remote_ISR+0x1d4>)
 8003662:	61d3      	str	r3, [r2, #28]
	if(remote_cmd.keyboard_keys & KEY_OFFSET_Q && remote_cmd.keyboard_keys & KEY_OFFSET_SHIFT
 8003664:	4b17      	ldr	r3, [pc, #92]	; (80036c4 <dbus_remote_ISR+0x1d4>)
 8003666:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 800366a:	b29b      	uxth	r3, r3
 800366c:	f003 0310 	and.w	r3, r3, #16
 8003670:	2b00      	cmp	r3, #0
 8003672:	d01a      	beq.n	80036aa <dbus_remote_ISR+0x1ba>
 8003674:	4b13      	ldr	r3, [pc, #76]	; (80036c4 <dbus_remote_ISR+0x1d4>)
 8003676:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 800367a:	b29b      	uxth	r3, r3
 800367c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003680:	2b00      	cmp	r3, #0
 8003682:	d012      	beq.n	80036aa <dbus_remote_ISR+0x1ba>
			&& remote_cmd.keyboard_keys & KEY_OFFSET_CTRL)
 8003684:	4b0f      	ldr	r3, [pc, #60]	; (80036c4 <dbus_remote_ISR+0x1d4>)
 8003686:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 800368a:	b29b      	uxth	r3, r3
 800368c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003690:	2b00      	cmp	r3, #0
 8003692:	d00a      	beq.n	80036aa <dbus_remote_ISR+0x1ba>
	{
		if (remote_control_mode == 1)
 8003694:	4b0c      	ldr	r3, [pc, #48]	; (80036c8 <dbus_remote_ISR+0x1d8>)
 8003696:	781b      	ldrb	r3, [r3, #0]
 8003698:	2b01      	cmp	r3, #1
 800369a:	d103      	bne.n	80036a4 <dbus_remote_ISR+0x1b4>
		{
			remote_control_mode = 0;
 800369c:	4b0a      	ldr	r3, [pc, #40]	; (80036c8 <dbus_remote_ISR+0x1d8>)
 800369e:	2200      	movs	r2, #0
 80036a0:	701a      	strb	r2, [r3, #0]
 80036a2:	e002      	b.n	80036aa <dbus_remote_ISR+0x1ba>
		}
		else
		{
			remote_control_mode = 1;
 80036a4:	4b08      	ldr	r3, [pc, #32]	; (80036c8 <dbus_remote_ISR+0x1d8>)
 80036a6:	2201      	movs	r2, #1
 80036a8:	701a      	strb	r2, [r3, #0]
		}
	}
	osEventFlagsSet(rc_data_flag, 0x1000);
 80036aa:	4b08      	ldr	r3, [pc, #32]	; (80036cc <dbus_remote_ISR+0x1dc>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80036b2:	4618      	mov	r0, r3
 80036b4:	f004 fc44 	bl	8007f40 <osEventFlagsSet>
}
 80036b8:	bf00      	nop
 80036ba:	3708      	adds	r7, #8
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}
 80036c0:	2000009c 	.word	0x2000009c
 80036c4:	20004f14 	.word	0x20004f14
 80036c8:	20004f34 	.word	0x20004f34
 80036cc:	200098a0 	.word	0x200098a0

080036d0 <dbus_reset>:

void dbus_reset()
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	af00      	add	r7, sp, #0
	HAL_UART_DMAPause(&huart1);
 80036d4:	4818      	ldr	r0, [pc, #96]	; (8003738 <dbus_reset+0x68>)
 80036d6:	f003 fb67 	bl	8006da8 <HAL_UART_DMAPause>
	remote_cmd.right_x = 0;
 80036da:	4b18      	ldr	r3, [pc, #96]	; (800373c <dbus_reset+0x6c>)
 80036dc:	2200      	movs	r2, #0
 80036de:	801a      	strh	r2, [r3, #0]
	remote_cmd.right_y = 0;
 80036e0:	4b16      	ldr	r3, [pc, #88]	; (800373c <dbus_reset+0x6c>)
 80036e2:	2200      	movs	r2, #0
 80036e4:	805a      	strh	r2, [r3, #2]
	remote_cmd.left_x = 0;
 80036e6:	4b15      	ldr	r3, [pc, #84]	; (800373c <dbus_reset+0x6c>)
 80036e8:	2200      	movs	r2, #0
 80036ea:	809a      	strh	r2, [r3, #4]
	remote_cmd.left_y = 0;
 80036ec:	4b13      	ldr	r3, [pc, #76]	; (800373c <dbus_reset+0x6c>)
 80036ee:	2200      	movs	r2, #0
 80036f0:	80da      	strh	r2, [r3, #6]
	remote_cmd.left_switch = 0;
 80036f2:	4b12      	ldr	r3, [pc, #72]	; (800373c <dbus_reset+0x6c>)
 80036f4:	2200      	movs	r2, #0
 80036f6:	721a      	strb	r2, [r3, #8]
	remote_cmd.mouse_x = 0;
 80036f8:	4b10      	ldr	r3, [pc, #64]	; (800373c <dbus_reset+0x6c>)
 80036fa:	2200      	movs	r2, #0
 80036fc:	815a      	strh	r2, [r3, #10]
	remote_cmd.mouse_y = 0;
 80036fe:	4b0f      	ldr	r3, [pc, #60]	; (800373c <dbus_reset+0x6c>)
 8003700:	2200      	movs	r2, #0
 8003702:	819a      	strh	r2, [r3, #12]
	remote_cmd.mouse_z = 0;
 8003704:	4b0d      	ldr	r3, [pc, #52]	; (800373c <dbus_reset+0x6c>)
 8003706:	2200      	movs	r2, #0
 8003708:	81da      	strh	r2, [r3, #14]
	remote_cmd.mouse_left = (remote_raw_data[12]);
 800370a:	4b0d      	ldr	r3, [pc, #52]	; (8003740 <dbus_reset+0x70>)
 800370c:	7b1b      	ldrb	r3, [r3, #12]
 800370e:	b25a      	sxtb	r2, r3
 8003710:	4b0a      	ldr	r3, [pc, #40]	; (800373c <dbus_reset+0x6c>)
 8003712:	761a      	strb	r2, [r3, #24]
	remote_cmd.mouse_right = (remote_raw_data[13]);
 8003714:	4b0a      	ldr	r3, [pc, #40]	; (8003740 <dbus_reset+0x70>)
 8003716:	7b5b      	ldrb	r3, [r3, #13]
 8003718:	b25a      	sxtb	r2, r3
 800371a:	4b08      	ldr	r3, [pc, #32]	; (800373c <dbus_reset+0x6c>)
 800371c:	765a      	strb	r2, [r3, #25]
	pitch = 0;
 800371e:	4b09      	ldr	r3, [pc, #36]	; (8003744 <dbus_reset+0x74>)
 8003720:	f04f 0200 	mov.w	r2, #0
 8003724:	601a      	str	r2, [r3, #0]
	yaw = 0;
 8003726:	4b08      	ldr	r3, [pc, #32]	; (8003748 <dbus_reset+0x78>)
 8003728:	f04f 0200 	mov.w	r2, #0
 800372c:	601a      	str	r2, [r3, #0]
	HAL_UART_DMAResume(&huart1);
 800372e:	4802      	ldr	r0, [pc, #8]	; (8003738 <dbus_reset+0x68>)
 8003730:	f003 fb9e 	bl	8006e70 <HAL_UART_DMAResume>
}
 8003734:	bf00      	nop
 8003736:	bd80      	pop	{r7, pc}
 8003738:	20009c08 	.word	0x20009c08
 800373c:	20004f14 	.word	0x20004f14
 8003740:	2000009c 	.word	0x2000009c
 8003744:	20004ed8 	.word	0x20004ed8
 8003748:	20004edc 	.word	0x20004edc

0800374c <startup_task>:
extern float pitch;
extern float yaw;


void startup_task()
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b082      	sub	sp, #8
 8003750:	af00      	add	r7, sp, #0
	led_on();
 8003752:	f7fd fd03 	bl	800115c <led_on>
	//general init
	can_start(&hcan1);
 8003756:	4863      	ldr	r0, [pc, #396]	; (80038e4 <startup_task+0x198>)
 8003758:	f7fd fc30 	bl	8000fbc <can_start>
	can_start(&hcan2);
 800375c:	4862      	ldr	r0, [pc, #392]	; (80038e8 <startup_task+0x19c>)
 800375e:	f7fd fc2d 	bl	8000fbc <can_start>
	buzzer_init();
 8003762:	f7fd fc01 	bl	8000f68 <buzzer_init>
	dbus_remote_start(remote_raw_data);
 8003766:	4861      	ldr	r0, [pc, #388]	; (80038ec <startup_task+0x1a0>)
 8003768:	f7fd fc6a 	bl	8001040 <dbus_remote_start>
	HAL_Delay(STARTUP_DELAY);
 800376c:	2064      	movs	r0, #100	; 0x64
 800376e:	f000 f959 	bl	8003a24 <HAL_Delay>
	led_green_off();
 8003772:	f7fd fce7 	bl	8001144 <led_green_off>

	//PID values
	canone_data.CHASSIS.pid.max_out = CHASSIS_MAX_CURRENT;
 8003776:	4b5e      	ldr	r3, [pc, #376]	; (80038f0 <startup_task+0x1a4>)
 8003778:	f643 4218 	movw	r2, #15384	; 0x3c18
 800377c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	canone_data.CHASSIS.pid.min_out = CHASSIS_MIN_CURRENT;
 8003780:	4b5b      	ldr	r3, [pc, #364]	; (80038f0 <startup_task+0x1a4>)
 8003782:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003786:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
	canone_data.CHASSIS.pid.kp = CHASSIS_KP;
 800378a:	4b59      	ldr	r3, [pc, #356]	; (80038f0 <startup_task+0x1a4>)
 800378c:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8003790:	611a      	str	r2, [r3, #16]
	canone_data.CHASSIS.pid.ki = CHASSIS_KI;
 8003792:	4b57      	ldr	r3, [pc, #348]	; (80038f0 <startup_task+0x1a4>)
 8003794:	f04f 0200 	mov.w	r2, #0
 8003798:	615a      	str	r2, [r3, #20]
	canone_data.CHASSIS.pid.kd = CHASSIS_KD;
 800379a:	4b55      	ldr	r3, [pc, #340]	; (80038f0 <startup_task+0x1a4>)
 800379c:	4a55      	ldr	r2, [pc, #340]	; (80038f4 <startup_task+0x1a8>)
 800379e:	619a      	str	r2, [r3, #24]

	for (uint8_t i = 0; i < 2; i++){
 80037a0:	2300      	movs	r3, #0
 80037a2:	71fb      	strb	r3, [r7, #7]
 80037a4:	e031      	b.n	800380a <startup_task+0xbe>
		canone_data.FEEDER[i].pid.max_out = FRICTION_MAX_CURRENT;
 80037a6:	79fb      	ldrb	r3, [r7, #7]
 80037a8:	4a51      	ldr	r2, [pc, #324]	; (80038f0 <startup_task+0x1a4>)
 80037aa:	2168      	movs	r1, #104	; 0x68
 80037ac:	fb01 f303 	mul.w	r3, r1, r3
 80037b0:	4413      	add	r3, r2
 80037b2:	33c8      	adds	r3, #200	; 0xc8
 80037b4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80037b8:	801a      	strh	r2, [r3, #0]
		canone_data.FEEDER[i].pid.min_out = 0;
 80037ba:	79fb      	ldrb	r3, [r7, #7]
 80037bc:	4a4c      	ldr	r2, [pc, #304]	; (80038f0 <startup_task+0x1a4>)
 80037be:	2168      	movs	r1, #104	; 0x68
 80037c0:	fb01 f303 	mul.w	r3, r1, r3
 80037c4:	4413      	add	r3, r2
 80037c6:	33ca      	adds	r3, #202	; 0xca
 80037c8:	2200      	movs	r2, #0
 80037ca:	801a      	strh	r2, [r3, #0]
		canone_data.FEEDER[i].pid.kp 	= FRICTION_KP;
 80037cc:	79fb      	ldrb	r3, [r7, #7]
 80037ce:	4a48      	ldr	r2, [pc, #288]	; (80038f0 <startup_task+0x1a4>)
 80037d0:	2168      	movs	r1, #104	; 0x68
 80037d2:	fb01 f303 	mul.w	r3, r1, r3
 80037d6:	4413      	add	r3, r2
 80037d8:	3378      	adds	r3, #120	; 0x78
 80037da:	4a47      	ldr	r2, [pc, #284]	; (80038f8 <startup_task+0x1ac>)
 80037dc:	601a      	str	r2, [r3, #0]
		canone_data.FEEDER[i].pid.ki 	= FRICTION_KI;
 80037de:	79fb      	ldrb	r3, [r7, #7]
 80037e0:	4a43      	ldr	r2, [pc, #268]	; (80038f0 <startup_task+0x1a4>)
 80037e2:	2168      	movs	r1, #104	; 0x68
 80037e4:	fb01 f303 	mul.w	r3, r1, r3
 80037e8:	4413      	add	r3, r2
 80037ea:	337c      	adds	r3, #124	; 0x7c
 80037ec:	f04f 0200 	mov.w	r2, #0
 80037f0:	601a      	str	r2, [r3, #0]
		canone_data.FEEDER[i].pid.kd 	= FRICTION_KD;
 80037f2:	79fb      	ldrb	r3, [r7, #7]
 80037f4:	4a3e      	ldr	r2, [pc, #248]	; (80038f0 <startup_task+0x1a4>)
 80037f6:	2168      	movs	r1, #104	; 0x68
 80037f8:	fb01 f303 	mul.w	r3, r1, r3
 80037fc:	4413      	add	r3, r2
 80037fe:	3380      	adds	r3, #128	; 0x80
 8003800:	4a3e      	ldr	r2, [pc, #248]	; (80038fc <startup_task+0x1b0>)
 8003802:	601a      	str	r2, [r3, #0]
	for (uint8_t i = 0; i < 2; i++){
 8003804:	79fb      	ldrb	r3, [r7, #7]
 8003806:	3301      	adds	r3, #1
 8003808:	71fb      	strb	r3, [r7, #7]
 800380a:	79fb      	ldrb	r3, [r7, #7]
 800380c:	2b01      	cmp	r3, #1
 800380e:	d9ca      	bls.n	80037a6 <startup_task+0x5a>
	}


	//gimbal PID input
	canone_data.pitch.pid.max_out		= PITCH_MAX_CURRENT;
 8003810:	4b37      	ldr	r3, [pc, #220]	; (80038f0 <startup_task+0x1a4>)
 8003812:	f644 6220 	movw	r2, #20000	; 0x4e20
 8003816:	f8a3 21b0 	strh.w	r2, [r3, #432]	; 0x1b0
	canone_data.pitch.pid.kp 			= PITCH_KP;
 800381a:	4b35      	ldr	r3, [pc, #212]	; (80038f0 <startup_task+0x1a4>)
 800381c:	4a36      	ldr	r2, [pc, #216]	; (80038f8 <startup_task+0x1ac>)
 800381e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
	canone_data.pitch.pid.kd			= PITCH_KD;
 8003822:	4b33      	ldr	r3, [pc, #204]	; (80038f0 <startup_task+0x1a4>)
 8003824:	4a35      	ldr	r2, [pc, #212]	; (80038fc <startup_task+0x1b0>)
 8003826:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
	canone_data.pitch.pid.ki			= PITCH_KI;
 800382a:	4b31      	ldr	r3, [pc, #196]	; (80038f0 <startup_task+0x1a4>)
 800382c:	f04f 0200 	mov.w	r2, #0
 8003830:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
	canone_data.pitch.motor_max_deflection = GM6020_MAX_DEFLECTION;
 8003834:	4b2e      	ldr	r3, [pc, #184]	; (80038f0 <startup_task+0x1a4>)
 8003836:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800383a:	f8a3 214c 	strh.w	r2, [r3, #332]	; 0x14c
	canone_data.pitch.calib 		= 1;
 800383e:	4b2c      	ldr	r3, [pc, #176]	; (80038f0 <startup_task+0x1a4>)
 8003840:	2201      	movs	r2, #1
 8003842:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158
	canone_data.pitch.rpm_max 		= PITCH_MAX_RPM;
 8003846:	4b2a      	ldr	r3, [pc, #168]	; (80038f0 <startup_task+0x1a4>)
 8003848:	2278      	movs	r2, #120	; 0x78
 800384a:	f8a3 215a 	strh.w	r2, [r3, #346]	; 0x15a
	canone_data.pitch.center_ang 	= PITCH_CENTER;
 800384e:	4b28      	ldr	r3, [pc, #160]	; (80038f0 <startup_task+0x1a4>)
 8003850:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003854:	f8a3 214a 	strh.w	r2, [r3, #330]	; 0x14a
	canone_data.pitch.max_ang 		= PITCH_MAX_ANGLE;
 8003858:	4b25      	ldr	r3, [pc, #148]	; (80038f0 <startup_task+0x1a4>)
 800385a:	4a29      	ldr	r2, [pc, #164]	; (8003900 <startup_task+0x1b4>)
 800385c:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
	canone_data.pitch.min_ang		= PITCH_MIN_ANGLE;
 8003860:	4b23      	ldr	r3, [pc, #140]	; (80038f0 <startup_task+0x1a4>)
 8003862:	4a28      	ldr	r2, [pc, #160]	; (8003904 <startup_task+0x1b8>)
 8003864:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154

	canone_data.yaw.pid.max_out			= YAW_MAX_CURRENT;
 8003868:	4b21      	ldr	r3, [pc, #132]	; (80038f0 <startup_task+0x1a4>)
 800386a:	f644 6220 	movw	r2, #20000	; 0x4e20
 800386e:	f8a3 2230 	strh.w	r2, [r3, #560]	; 0x230
	canone_data.yaw.pid.kp 				= YAW_KP;
 8003872:	4b1f      	ldr	r3, [pc, #124]	; (80038f0 <startup_task+0x1a4>)
 8003874:	4a20      	ldr	r2, [pc, #128]	; (80038f8 <startup_task+0x1ac>)
 8003876:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
	canone_data.yaw.pid.kd				= YAW_KD;
 800387a:	4b1d      	ldr	r3, [pc, #116]	; (80038f0 <startup_task+0x1a4>)
 800387c:	4a1f      	ldr	r2, [pc, #124]	; (80038fc <startup_task+0x1b0>)
 800387e:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8
	canone_data.yaw.pid.ki				= YAW_KI;
 8003882:	4b1b      	ldr	r3, [pc, #108]	; (80038f0 <startup_task+0x1a4>)
 8003884:	f04f 0200 	mov.w	r2, #0
 8003888:	f8c3 21e4 	str.w	r2, [r3, #484]	; 0x1e4
	canone_data.yaw.motor_max_deflection = GM6020_MAX_DEFLECTION;
 800388c:	4b18      	ldr	r3, [pc, #96]	; (80038f0 <startup_task+0x1a4>)
 800388e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003892:	f8a3 21cc 	strh.w	r2, [r3, #460]	; 0x1cc
	canone_data.yaw.center_ang		= YAW_CENTER;
 8003896:	4b16      	ldr	r3, [pc, #88]	; (80038f0 <startup_task+0x1a4>)
 8003898:	f241 520b 	movw	r2, #5387	; 0x150b
 800389c:	f8a3 21ca 	strh.w	r2, [r3, #458]	; 0x1ca
	canone_data.yaw.calib 			= 1;
 80038a0:	4b13      	ldr	r3, [pc, #76]	; (80038f0 <startup_task+0x1a4>)
 80038a2:	2201      	movs	r2, #1
 80038a4:	f883 21d8 	strb.w	r2, [r3, #472]	; 0x1d8
	canone_data.yaw.rpm_max 		= YAW_MAX_RPM;
 80038a8:	4b11      	ldr	r3, [pc, #68]	; (80038f0 <startup_task+0x1a4>)
 80038aa:	2278      	movs	r2, #120	; 0x78
 80038ac:	f8a3 21da 	strh.w	r2, [r3, #474]	; 0x1da
	canone_data.yaw.max_ang 		= 0.8;
 80038b0:	4b0f      	ldr	r3, [pc, #60]	; (80038f0 <startup_task+0x1a4>)
 80038b2:	4a15      	ldr	r2, [pc, #84]	; (8003908 <startup_task+0x1bc>)
 80038b4:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
	canone_data.yaw.min_ang 		= -0.8;
 80038b8:	4b0d      	ldr	r3, [pc, #52]	; (80038f0 <startup_task+0x1a4>)
 80038ba:	4a14      	ldr	r2, [pc, #80]	; (800390c <startup_task+0x1c0>)
 80038bc:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
		{
			err_buzzer(1,9);
		}
	}

	pitch = 0;
 80038c0:	4b13      	ldr	r3, [pc, #76]	; (8003910 <startup_task+0x1c4>)
 80038c2:	f04f 0200 	mov.w	r2, #0
 80038c6:	601a      	str	r2, [r3, #0]
	yaw	  = 0;
 80038c8:	4b12      	ldr	r3, [pc, #72]	; (8003914 <startup_task+0x1c8>)
 80038ca:	f04f 0200 	mov.w	r2, #0
 80038ce:	601a      	str	r2, [r3, #0]
	ok_buzzer(1,1);
 80038d0:	2101      	movs	r1, #1
 80038d2:	2001      	movs	r0, #1
 80038d4:	f000 f820 	bl	8003918 <ok_buzzer>
	led_toggle();
 80038d8:	f7fd fc54 	bl	8001184 <led_toggle>

}
 80038dc:	bf00      	nop
 80038de:	3708      	adds	r7, #8
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}
 80038e4:	20009874 	.word	0x20009874
 80038e8:	2000984c 	.word	0x2000984c
 80038ec:	2000009c 	.word	0x2000009c
 80038f0:	20009c88 	.word	0x20009c88
 80038f4:	42480000 	.word	0x42480000
 80038f8:	3dcccccd 	.word	0x3dcccccd
 80038fc:	41200000 	.word	0x41200000
 8003900:	3fcccccd 	.word	0x3fcccccd
 8003904:	bfcccccd 	.word	0xbfcccccd
 8003908:	3f4ccccd 	.word	0x3f4ccccd
 800390c:	bf4ccccd 	.word	0xbf4ccccd
 8003910:	20004ed8 	.word	0x20004ed8
 8003914:	20004edc 	.word	0x20004edc

08003918 <ok_buzzer>:
		buzzer(0);
		HAL_Delay(BUZZER_DELAY);
	}
}

void ok_buzzer(uint8_t high, uint8_t low){
 8003918:	b580      	push	{r7, lr}
 800391a:	b084      	sub	sp, #16
 800391c:	af00      	add	r7, sp, #0
 800391e:	4603      	mov	r3, r0
 8003920:	460a      	mov	r2, r1
 8003922:	71fb      	strb	r3, [r7, #7]
 8003924:	4613      	mov	r3, r2
 8003926:	71bb      	strb	r3, [r7, #6]
	for (int8_t i = 0; i < high; i ++)
 8003928:	2300      	movs	r3, #0
 800392a:	73fb      	strb	r3, [r7, #15]
 800392c:	e012      	b.n	8003954 <ok_buzzer+0x3c>
	{
		//PWM
		buzzer(HIGH_FREQ);
 800392e:	f44f 705c 	mov.w	r0, #880	; 0x370
 8003932:	f7fd faf7 	bl	8000f24 <buzzer>
		HAL_Delay(BUZZER_DELAY);
 8003936:	2064      	movs	r0, #100	; 0x64
 8003938:	f000 f874 	bl	8003a24 <HAL_Delay>
		buzzer(0);
 800393c:	2000      	movs	r0, #0
 800393e:	f7fd faf1 	bl	8000f24 <buzzer>
		HAL_Delay(BUZZER_DELAY);
 8003942:	2064      	movs	r0, #100	; 0x64
 8003944:	f000 f86e 	bl	8003a24 <HAL_Delay>
	for (int8_t i = 0; i < high; i ++)
 8003948:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800394c:	b2db      	uxtb	r3, r3
 800394e:	3301      	adds	r3, #1
 8003950:	b2db      	uxtb	r3, r3
 8003952:	73fb      	strb	r3, [r7, #15]
 8003954:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8003958:	79fb      	ldrb	r3, [r7, #7]
 800395a:	429a      	cmp	r2, r3
 800395c:	dbe7      	blt.n	800392e <ok_buzzer+0x16>
	}
	for (int8_t i = 0; i < low; i ++)
 800395e:	2300      	movs	r3, #0
 8003960:	73bb      	strb	r3, [r7, #14]
 8003962:	e012      	b.n	800398a <ok_buzzer+0x72>
	{
		buzzer(LOW_FREQ);
 8003964:	f44f 70dc 	mov.w	r0, #440	; 0x1b8
 8003968:	f7fd fadc 	bl	8000f24 <buzzer>
		HAL_Delay(BUZZER_DELAY);
 800396c:	2064      	movs	r0, #100	; 0x64
 800396e:	f000 f859 	bl	8003a24 <HAL_Delay>
		buzzer(0);
 8003972:	2000      	movs	r0, #0
 8003974:	f7fd fad6 	bl	8000f24 <buzzer>
		HAL_Delay(BUZZER_DELAY);
 8003978:	2064      	movs	r0, #100	; 0x64
 800397a:	f000 f853 	bl	8003a24 <HAL_Delay>
	for (int8_t i = 0; i < low; i ++)
 800397e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003982:	b2db      	uxtb	r3, r3
 8003984:	3301      	adds	r3, #1
 8003986:	b2db      	uxtb	r3, r3
 8003988:	73bb      	strb	r3, [r7, #14]
 800398a:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800398e:	79bb      	ldrb	r3, [r7, #6]
 8003990:	429a      	cmp	r2, r3
 8003992:	dbe7      	blt.n	8003964 <ok_buzzer+0x4c>
	}
}
 8003994:	bf00      	nop
 8003996:	bf00      	nop
 8003998:	3710      	adds	r7, #16
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}
	...

080039a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80039a4:	4b0e      	ldr	r3, [pc, #56]	; (80039e0 <HAL_Init+0x40>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a0d      	ldr	r2, [pc, #52]	; (80039e0 <HAL_Init+0x40>)
 80039aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80039ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80039b0:	4b0b      	ldr	r3, [pc, #44]	; (80039e0 <HAL_Init+0x40>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a0a      	ldr	r2, [pc, #40]	; (80039e0 <HAL_Init+0x40>)
 80039b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80039ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80039bc:	4b08      	ldr	r3, [pc, #32]	; (80039e0 <HAL_Init+0x40>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a07      	ldr	r2, [pc, #28]	; (80039e0 <HAL_Init+0x40>)
 80039c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80039c8:	2003      	movs	r0, #3
 80039ca:	f000 ff86 	bl	80048da <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80039ce:	2000      	movs	r0, #0
 80039d0:	f7fe f8b6 	bl	8001b40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80039d4:	f7fe f86a 	bl	8001aac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80039d8:	2300      	movs	r3, #0
}
 80039da:	4618      	mov	r0, r3
 80039dc:	bd80      	pop	{r7, pc}
 80039de:	bf00      	nop
 80039e0:	40023c00 	.word	0x40023c00

080039e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80039e4:	b480      	push	{r7}
 80039e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80039e8:	4b06      	ldr	r3, [pc, #24]	; (8003a04 <HAL_IncTick+0x20>)
 80039ea:	781b      	ldrb	r3, [r3, #0]
 80039ec:	461a      	mov	r2, r3
 80039ee:	4b06      	ldr	r3, [pc, #24]	; (8003a08 <HAL_IncTick+0x24>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4413      	add	r3, r2
 80039f4:	4a04      	ldr	r2, [pc, #16]	; (8003a08 <HAL_IncTick+0x24>)
 80039f6:	6013      	str	r3, [r2, #0]
}
 80039f8:	bf00      	nop
 80039fa:	46bd      	mov	sp, r7
 80039fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a00:	4770      	bx	lr
 8003a02:	bf00      	nop
 8003a04:	20000010 	.word	0x20000010
 8003a08:	20009ecc 	.word	0x20009ecc

08003a0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	af00      	add	r7, sp, #0
  return uwTick;
 8003a10:	4b03      	ldr	r3, [pc, #12]	; (8003a20 <HAL_GetTick+0x14>)
 8003a12:	681b      	ldr	r3, [r3, #0]
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	46bd      	mov	sp, r7
 8003a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1c:	4770      	bx	lr
 8003a1e:	bf00      	nop
 8003a20:	20009ecc 	.word	0x20009ecc

08003a24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b084      	sub	sp, #16
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003a2c:	f7ff ffee 	bl	8003a0c <HAL_GetTick>
 8003a30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a3c:	d005      	beq.n	8003a4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003a3e:	4b0a      	ldr	r3, [pc, #40]	; (8003a68 <HAL_Delay+0x44>)
 8003a40:	781b      	ldrb	r3, [r3, #0]
 8003a42:	461a      	mov	r2, r3
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	4413      	add	r3, r2
 8003a48:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003a4a:	bf00      	nop
 8003a4c:	f7ff ffde 	bl	8003a0c <HAL_GetTick>
 8003a50:	4602      	mov	r2, r0
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	1ad3      	subs	r3, r2, r3
 8003a56:	68fa      	ldr	r2, [r7, #12]
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	d8f7      	bhi.n	8003a4c <HAL_Delay+0x28>
  {
  }
}
 8003a5c:	bf00      	nop
 8003a5e:	bf00      	nop
 8003a60:	3710      	adds	r7, #16
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}
 8003a66:	bf00      	nop
 8003a68:	20000010 	.word	0x20000010

08003a6c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b084      	sub	sp, #16
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d101      	bne.n	8003a7e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e0ed      	b.n	8003c5a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d102      	bne.n	8003a90 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	f7fd fc04 	bl	8001298 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f022 0202 	bic.w	r2, r2, #2
 8003a9e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003aa0:	f7ff ffb4 	bl	8003a0c <HAL_GetTick>
 8003aa4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003aa6:	e012      	b.n	8003ace <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003aa8:	f7ff ffb0 	bl	8003a0c <HAL_GetTick>
 8003aac:	4602      	mov	r2, r0
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	1ad3      	subs	r3, r2, r3
 8003ab2:	2b0a      	cmp	r3, #10
 8003ab4:	d90b      	bls.n	8003ace <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aba:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2205      	movs	r2, #5
 8003ac6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	e0c5      	b.n	8003c5a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	f003 0302 	and.w	r3, r3, #2
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d1e5      	bne.n	8003aa8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	681a      	ldr	r2, [r3, #0]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f042 0201 	orr.w	r2, r2, #1
 8003aea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003aec:	f7ff ff8e 	bl	8003a0c <HAL_GetTick>
 8003af0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003af2:	e012      	b.n	8003b1a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003af4:	f7ff ff8a 	bl	8003a0c <HAL_GetTick>
 8003af8:	4602      	mov	r2, r0
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	1ad3      	subs	r3, r2, r3
 8003afe:	2b0a      	cmp	r3, #10
 8003b00:	d90b      	bls.n	8003b1a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b06:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2205      	movs	r2, #5
 8003b12:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	e09f      	b.n	8003c5a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	f003 0301 	and.w	r3, r3, #1
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d0e5      	beq.n	8003af4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	7e1b      	ldrb	r3, [r3, #24]
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	d108      	bne.n	8003b42 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003b3e:	601a      	str	r2, [r3, #0]
 8003b40:	e007      	b.n	8003b52 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	681a      	ldr	r2, [r3, #0]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b50:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	7e5b      	ldrb	r3, [r3, #25]
 8003b56:	2b01      	cmp	r3, #1
 8003b58:	d108      	bne.n	8003b6c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	681a      	ldr	r2, [r3, #0]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b68:	601a      	str	r2, [r3, #0]
 8003b6a:	e007      	b.n	8003b7c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b7a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	7e9b      	ldrb	r3, [r3, #26]
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d108      	bne.n	8003b96 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	681a      	ldr	r2, [r3, #0]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f042 0220 	orr.w	r2, r2, #32
 8003b92:	601a      	str	r2, [r3, #0]
 8003b94:	e007      	b.n	8003ba6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f022 0220 	bic.w	r2, r2, #32
 8003ba4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	7edb      	ldrb	r3, [r3, #27]
 8003baa:	2b01      	cmp	r3, #1
 8003bac:	d108      	bne.n	8003bc0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	681a      	ldr	r2, [r3, #0]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f022 0210 	bic.w	r2, r2, #16
 8003bbc:	601a      	str	r2, [r3, #0]
 8003bbe:	e007      	b.n	8003bd0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f042 0210 	orr.w	r2, r2, #16
 8003bce:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	7f1b      	ldrb	r3, [r3, #28]
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	d108      	bne.n	8003bea <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f042 0208 	orr.w	r2, r2, #8
 8003be6:	601a      	str	r2, [r3, #0]
 8003be8:	e007      	b.n	8003bfa <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	681a      	ldr	r2, [r3, #0]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f022 0208 	bic.w	r2, r2, #8
 8003bf8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	7f5b      	ldrb	r3, [r3, #29]
 8003bfe:	2b01      	cmp	r3, #1
 8003c00:	d108      	bne.n	8003c14 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	681a      	ldr	r2, [r3, #0]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f042 0204 	orr.w	r2, r2, #4
 8003c10:	601a      	str	r2, [r3, #0]
 8003c12:	e007      	b.n	8003c24 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	681a      	ldr	r2, [r3, #0]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f022 0204 	bic.w	r2, r2, #4
 8003c22:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	689a      	ldr	r2, [r3, #8]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	68db      	ldr	r3, [r3, #12]
 8003c2c:	431a      	orrs	r2, r3
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	691b      	ldr	r3, [r3, #16]
 8003c32:	431a      	orrs	r2, r3
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	695b      	ldr	r3, [r3, #20]
 8003c38:	ea42 0103 	orr.w	r1, r2, r3
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	1e5a      	subs	r2, r3, #1
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	430a      	orrs	r2, r1
 8003c48:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2201      	movs	r2, #1
 8003c54:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003c58:	2300      	movs	r3, #0
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3710      	adds	r7, #16
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}
	...

08003c64 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b087      	sub	sp, #28
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
 8003c6c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c7a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8003c7c:	7cfb      	ldrb	r3, [r7, #19]
 8003c7e:	2b01      	cmp	r3, #1
 8003c80:	d003      	beq.n	8003c8a <HAL_CAN_ConfigFilter+0x26>
 8003c82:	7cfb      	ldrb	r3, [r7, #19]
 8003c84:	2b02      	cmp	r3, #2
 8003c86:	f040 80be 	bne.w	8003e06 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8003c8a:	4b65      	ldr	r3, [pc, #404]	; (8003e20 <HAL_CAN_ConfigFilter+0x1bc>)
 8003c8c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003c94:	f043 0201 	orr.w	r2, r3, #1
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003ca4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb8:	021b      	lsls	r3, r3, #8
 8003cba:	431a      	orrs	r2, r3
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	695b      	ldr	r3, [r3, #20]
 8003cc6:	f003 031f 	and.w	r3, r3, #31
 8003cca:	2201      	movs	r2, #1
 8003ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd0:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	43db      	mvns	r3, r3
 8003cdc:	401a      	ands	r2, r3
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	69db      	ldr	r3, [r3, #28]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d123      	bne.n	8003d34 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	43db      	mvns	r3, r3
 8003cf6:	401a      	ands	r2, r3
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	68db      	ldr	r3, [r3, #12]
 8003d02:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003d0a:	683a      	ldr	r2, [r7, #0]
 8003d0c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003d0e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	3248      	adds	r2, #72	; 0x48
 8003d14:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003d28:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003d2a:	6979      	ldr	r1, [r7, #20]
 8003d2c:	3348      	adds	r3, #72	; 0x48
 8003d2e:	00db      	lsls	r3, r3, #3
 8003d30:	440b      	add	r3, r1
 8003d32:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	69db      	ldr	r3, [r3, #28]
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	d122      	bne.n	8003d82 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	431a      	orrs	r2, r3
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003d58:	683a      	ldr	r2, [r7, #0]
 8003d5a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003d5c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	3248      	adds	r2, #72	; 0x48
 8003d62:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	68db      	ldr	r3, [r3, #12]
 8003d70:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003d76:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003d78:	6979      	ldr	r1, [r7, #20]
 8003d7a:	3348      	adds	r3, #72	; 0x48
 8003d7c:	00db      	lsls	r3, r3, #3
 8003d7e:	440b      	add	r3, r1
 8003d80:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	699b      	ldr	r3, [r3, #24]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d109      	bne.n	8003d9e <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	43db      	mvns	r3, r3
 8003d94:	401a      	ands	r2, r3
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003d9c:	e007      	b.n	8003dae <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	431a      	orrs	r2, r3
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	691b      	ldr	r3, [r3, #16]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d109      	bne.n	8003dca <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	43db      	mvns	r3, r3
 8003dc0:	401a      	ands	r2, r3
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8003dc8:	e007      	b.n	8003dda <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	431a      	orrs	r2, r3
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	6a1b      	ldr	r3, [r3, #32]
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	d107      	bne.n	8003df2 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	431a      	orrs	r2, r3
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003df8:	f023 0201 	bic.w	r2, r3, #1
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8003e02:	2300      	movs	r3, #0
 8003e04:	e006      	b.n	8003e14 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e0a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
  }
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	371c      	adds	r7, #28
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1e:	4770      	bx	lr
 8003e20:	40006400 	.word	0x40006400

08003e24 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b084      	sub	sp, #16
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e32:	b2db      	uxtb	r3, r3
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d12e      	bne.n	8003e96 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2202      	movs	r2, #2
 8003e3c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f022 0201 	bic.w	r2, r2, #1
 8003e4e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003e50:	f7ff fddc 	bl	8003a0c <HAL_GetTick>
 8003e54:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003e56:	e012      	b.n	8003e7e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003e58:	f7ff fdd8 	bl	8003a0c <HAL_GetTick>
 8003e5c:	4602      	mov	r2, r0
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	1ad3      	subs	r3, r2, r3
 8003e62:	2b0a      	cmp	r3, #10
 8003e64:	d90b      	bls.n	8003e7e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e6a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2205      	movs	r2, #5
 8003e76:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e012      	b.n	8003ea4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	f003 0301 	and.w	r3, r3, #1
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d1e5      	bne.n	8003e58 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8003e92:	2300      	movs	r3, #0
 8003e94:	e006      	b.n	8003ea4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e9a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
  }
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	3710      	adds	r7, #16
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}

08003eac <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b089      	sub	sp, #36	; 0x24
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	60f8      	str	r0, [r7, #12]
 8003eb4:	60b9      	str	r1, [r7, #8]
 8003eb6:	607a      	str	r2, [r7, #4]
 8003eb8:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ec0:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003eca:	7ffb      	ldrb	r3, [r7, #31]
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	d003      	beq.n	8003ed8 <HAL_CAN_AddTxMessage+0x2c>
 8003ed0:	7ffb      	ldrb	r3, [r7, #31]
 8003ed2:	2b02      	cmp	r3, #2
 8003ed4:	f040 80b8 	bne.w	8004048 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003ed8:	69bb      	ldr	r3, [r7, #24]
 8003eda:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d10a      	bne.n	8003ef8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003ee2:	69bb      	ldr	r3, [r7, #24]
 8003ee4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d105      	bne.n	8003ef8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003eec:	69bb      	ldr	r3, [r7, #24]
 8003eee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	f000 80a0 	beq.w	8004038 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003ef8:	69bb      	ldr	r3, [r7, #24]
 8003efa:	0e1b      	lsrs	r3, r3, #24
 8003efc:	f003 0303 	and.w	r3, r3, #3
 8003f00:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	2b02      	cmp	r3, #2
 8003f06:	d907      	bls.n	8003f18 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f0c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003f14:	2301      	movs	r3, #1
 8003f16:	e09e      	b.n	8004056 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003f18:	2201      	movs	r2, #1
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	409a      	lsls	r2, r3
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d10d      	bne.n	8003f46 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003f34:	68f9      	ldr	r1, [r7, #12]
 8003f36:	6809      	ldr	r1, [r1, #0]
 8003f38:	431a      	orrs	r2, r3
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	3318      	adds	r3, #24
 8003f3e:	011b      	lsls	r3, r3, #4
 8003f40:	440b      	add	r3, r1
 8003f42:	601a      	str	r2, [r3, #0]
 8003f44:	e00f      	b.n	8003f66 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003f50:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003f56:	68f9      	ldr	r1, [r7, #12]
 8003f58:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8003f5a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	3318      	adds	r3, #24
 8003f60:	011b      	lsls	r3, r3, #4
 8003f62:	440b      	add	r3, r1
 8003f64:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	6819      	ldr	r1, [r3, #0]
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	691a      	ldr	r2, [r3, #16]
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	3318      	adds	r3, #24
 8003f72:	011b      	lsls	r3, r3, #4
 8003f74:	440b      	add	r3, r1
 8003f76:	3304      	adds	r3, #4
 8003f78:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	7d1b      	ldrb	r3, [r3, #20]
 8003f7e:	2b01      	cmp	r3, #1
 8003f80:	d111      	bne.n	8003fa6 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	3318      	adds	r3, #24
 8003f8a:	011b      	lsls	r3, r3, #4
 8003f8c:	4413      	add	r3, r2
 8003f8e:	3304      	adds	r3, #4
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	68fa      	ldr	r2, [r7, #12]
 8003f94:	6811      	ldr	r1, [r2, #0]
 8003f96:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	3318      	adds	r3, #24
 8003f9e:	011b      	lsls	r3, r3, #4
 8003fa0:	440b      	add	r3, r1
 8003fa2:	3304      	adds	r3, #4
 8003fa4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	3307      	adds	r3, #7
 8003faa:	781b      	ldrb	r3, [r3, #0]
 8003fac:	061a      	lsls	r2, r3, #24
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	3306      	adds	r3, #6
 8003fb2:	781b      	ldrb	r3, [r3, #0]
 8003fb4:	041b      	lsls	r3, r3, #16
 8003fb6:	431a      	orrs	r2, r3
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	3305      	adds	r3, #5
 8003fbc:	781b      	ldrb	r3, [r3, #0]
 8003fbe:	021b      	lsls	r3, r3, #8
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	687a      	ldr	r2, [r7, #4]
 8003fc4:	3204      	adds	r2, #4
 8003fc6:	7812      	ldrb	r2, [r2, #0]
 8003fc8:	4610      	mov	r0, r2
 8003fca:	68fa      	ldr	r2, [r7, #12]
 8003fcc:	6811      	ldr	r1, [r2, #0]
 8003fce:	ea43 0200 	orr.w	r2, r3, r0
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	011b      	lsls	r3, r3, #4
 8003fd6:	440b      	add	r3, r1
 8003fd8:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8003fdc:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	3303      	adds	r3, #3
 8003fe2:	781b      	ldrb	r3, [r3, #0]
 8003fe4:	061a      	lsls	r2, r3, #24
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	3302      	adds	r3, #2
 8003fea:	781b      	ldrb	r3, [r3, #0]
 8003fec:	041b      	lsls	r3, r3, #16
 8003fee:	431a      	orrs	r2, r3
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	3301      	adds	r3, #1
 8003ff4:	781b      	ldrb	r3, [r3, #0]
 8003ff6:	021b      	lsls	r3, r3, #8
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	687a      	ldr	r2, [r7, #4]
 8003ffc:	7812      	ldrb	r2, [r2, #0]
 8003ffe:	4610      	mov	r0, r2
 8004000:	68fa      	ldr	r2, [r7, #12]
 8004002:	6811      	ldr	r1, [r2, #0]
 8004004:	ea43 0200 	orr.w	r2, r3, r0
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	011b      	lsls	r3, r3, #4
 800400c:	440b      	add	r3, r1
 800400e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8004012:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	3318      	adds	r3, #24
 800401c:	011b      	lsls	r3, r3, #4
 800401e:	4413      	add	r3, r2
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	68fa      	ldr	r2, [r7, #12]
 8004024:	6811      	ldr	r1, [r2, #0]
 8004026:	f043 0201 	orr.w	r2, r3, #1
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	3318      	adds	r3, #24
 800402e:	011b      	lsls	r3, r3, #4
 8004030:	440b      	add	r3, r1
 8004032:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8004034:	2300      	movs	r3, #0
 8004036:	e00e      	b.n	8004056 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800403c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8004044:	2301      	movs	r3, #1
 8004046:	e006      	b.n	8004056 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800404c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004054:	2301      	movs	r3, #1
  }
}
 8004056:	4618      	mov	r0, r3
 8004058:	3724      	adds	r7, #36	; 0x24
 800405a:	46bd      	mov	sp, r7
 800405c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004060:	4770      	bx	lr

08004062 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8004062:	b480      	push	{r7}
 8004064:	b087      	sub	sp, #28
 8004066:	af00      	add	r7, sp, #0
 8004068:	60f8      	str	r0, [r7, #12]
 800406a:	60b9      	str	r1, [r7, #8]
 800406c:	607a      	str	r2, [r7, #4]
 800406e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004076:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8004078:	7dfb      	ldrb	r3, [r7, #23]
 800407a:	2b01      	cmp	r3, #1
 800407c:	d003      	beq.n	8004086 <HAL_CAN_GetRxMessage+0x24>
 800407e:	7dfb      	ldrb	r3, [r7, #23]
 8004080:	2b02      	cmp	r3, #2
 8004082:	f040 80f3 	bne.w	800426c <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d10e      	bne.n	80040aa <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	68db      	ldr	r3, [r3, #12]
 8004092:	f003 0303 	and.w	r3, r3, #3
 8004096:	2b00      	cmp	r3, #0
 8004098:	d116      	bne.n	80040c8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800409e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80040a6:	2301      	movs	r3, #1
 80040a8:	e0e7      	b.n	800427a <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	691b      	ldr	r3, [r3, #16]
 80040b0:	f003 0303 	and.w	r3, r3, #3
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d107      	bne.n	80040c8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040bc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	e0d8      	b.n	800427a <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681a      	ldr	r2, [r3, #0]
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	331b      	adds	r3, #27
 80040d0:	011b      	lsls	r3, r3, #4
 80040d2:	4413      	add	r3, r2
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f003 0204 	and.w	r2, r3, #4
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d10c      	bne.n	8004100 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681a      	ldr	r2, [r3, #0]
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	331b      	adds	r3, #27
 80040ee:	011b      	lsls	r3, r3, #4
 80040f0:	4413      	add	r3, r2
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	0d5b      	lsrs	r3, r3, #21
 80040f6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	601a      	str	r2, [r3, #0]
 80040fe:	e00b      	b.n	8004118 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	331b      	adds	r3, #27
 8004108:	011b      	lsls	r3, r3, #4
 800410a:	4413      	add	r3, r2
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	08db      	lsrs	r3, r3, #3
 8004110:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	331b      	adds	r3, #27
 8004120:	011b      	lsls	r3, r3, #4
 8004122:	4413      	add	r3, r2
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f003 0202 	and.w	r2, r3, #2
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	331b      	adds	r3, #27
 8004136:	011b      	lsls	r3, r3, #4
 8004138:	4413      	add	r3, r2
 800413a:	3304      	adds	r3, #4
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f003 020f 	and.w	r2, r3, #15
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681a      	ldr	r2, [r3, #0]
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	331b      	adds	r3, #27
 800414e:	011b      	lsls	r3, r3, #4
 8004150:	4413      	add	r3, r2
 8004152:	3304      	adds	r3, #4
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	0a1b      	lsrs	r3, r3, #8
 8004158:	b2da      	uxtb	r2, r3
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	331b      	adds	r3, #27
 8004166:	011b      	lsls	r3, r3, #4
 8004168:	4413      	add	r3, r2
 800416a:	3304      	adds	r3, #4
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	0c1b      	lsrs	r3, r3, #16
 8004170:	b29a      	uxth	r2, r3
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	011b      	lsls	r3, r3, #4
 800417e:	4413      	add	r3, r2
 8004180:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	b2da      	uxtb	r2, r3
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681a      	ldr	r2, [r3, #0]
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	011b      	lsls	r3, r3, #4
 8004194:	4413      	add	r3, r2
 8004196:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	0a1a      	lsrs	r2, r3, #8
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	3301      	adds	r3, #1
 80041a2:	b2d2      	uxtb	r2, r2
 80041a4:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681a      	ldr	r2, [r3, #0]
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	011b      	lsls	r3, r3, #4
 80041ae:	4413      	add	r3, r2
 80041b0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	0c1a      	lsrs	r2, r3, #16
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	3302      	adds	r3, #2
 80041bc:	b2d2      	uxtb	r2, r2
 80041be:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681a      	ldr	r2, [r3, #0]
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	011b      	lsls	r3, r3, #4
 80041c8:	4413      	add	r3, r2
 80041ca:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	0e1a      	lsrs	r2, r3, #24
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	3303      	adds	r3, #3
 80041d6:	b2d2      	uxtb	r2, r2
 80041d8:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681a      	ldr	r2, [r3, #0]
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	011b      	lsls	r3, r3, #4
 80041e2:	4413      	add	r3, r2
 80041e4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80041e8:	681a      	ldr	r2, [r3, #0]
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	3304      	adds	r3, #4
 80041ee:	b2d2      	uxtb	r2, r2
 80041f0:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681a      	ldr	r2, [r3, #0]
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	011b      	lsls	r3, r3, #4
 80041fa:	4413      	add	r3, r2
 80041fc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	0a1a      	lsrs	r2, r3, #8
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	3305      	adds	r3, #5
 8004208:	b2d2      	uxtb	r2, r2
 800420a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681a      	ldr	r2, [r3, #0]
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	011b      	lsls	r3, r3, #4
 8004214:	4413      	add	r3, r2
 8004216:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	0c1a      	lsrs	r2, r3, #16
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	3306      	adds	r3, #6
 8004222:	b2d2      	uxtb	r2, r2
 8004224:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681a      	ldr	r2, [r3, #0]
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	011b      	lsls	r3, r3, #4
 800422e:	4413      	add	r3, r2
 8004230:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	0e1a      	lsrs	r2, r3, #24
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	3307      	adds	r3, #7
 800423c:	b2d2      	uxtb	r2, r2
 800423e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d108      	bne.n	8004258 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	68da      	ldr	r2, [r3, #12]
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f042 0220 	orr.w	r2, r2, #32
 8004254:	60da      	str	r2, [r3, #12]
 8004256:	e007      	b.n	8004268 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	691a      	ldr	r2, [r3, #16]
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f042 0220 	orr.w	r2, r2, #32
 8004266:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8004268:	2300      	movs	r3, #0
 800426a:	e006      	b.n	800427a <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004270:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004278:	2301      	movs	r3, #1
  }
}
 800427a:	4618      	mov	r0, r3
 800427c:	371c      	adds	r7, #28
 800427e:	46bd      	mov	sp, r7
 8004280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004284:	4770      	bx	lr

08004286 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8004286:	b480      	push	{r7}
 8004288:	b085      	sub	sp, #20
 800428a:	af00      	add	r7, sp, #0
 800428c:	6078      	str	r0, [r7, #4]
 800428e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004296:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8004298:	7bfb      	ldrb	r3, [r7, #15]
 800429a:	2b01      	cmp	r3, #1
 800429c:	d002      	beq.n	80042a4 <HAL_CAN_ActivateNotification+0x1e>
 800429e:	7bfb      	ldrb	r3, [r7, #15]
 80042a0:	2b02      	cmp	r3, #2
 80042a2:	d109      	bne.n	80042b8 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	6959      	ldr	r1, [r3, #20]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	683a      	ldr	r2, [r7, #0]
 80042b0:	430a      	orrs	r2, r1
 80042b2:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80042b4:	2300      	movs	r3, #0
 80042b6:	e006      	b.n	80042c6 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042bc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
  }
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	3714      	adds	r7, #20
 80042ca:	46bd      	mov	sp, r7
 80042cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d0:	4770      	bx	lr

080042d2 <HAL_CAN_DeactivateNotification>:
  * @param  InactiveITs indicates which interrupts will be disabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_DeactivateNotification(CAN_HandleTypeDef *hcan, uint32_t InactiveITs)
{
 80042d2:	b480      	push	{r7}
 80042d4:	b085      	sub	sp, #20
 80042d6:	af00      	add	r7, sp, #0
 80042d8:	6078      	str	r0, [r7, #4]
 80042da:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80042e2:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(InactiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80042e4:	7bfb      	ldrb	r3, [r7, #15]
 80042e6:	2b01      	cmp	r3, #1
 80042e8:	d002      	beq.n	80042f0 <HAL_CAN_DeactivateNotification+0x1e>
 80042ea:	7bfb      	ldrb	r3, [r7, #15]
 80042ec:	2b02      	cmp	r3, #2
 80042ee:	d10a      	bne.n	8004306 <HAL_CAN_DeactivateNotification+0x34>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Disable the selected interrupts */
    __HAL_CAN_DISABLE_IT(hcan, InactiveITs);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	6959      	ldr	r1, [r3, #20]
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	43da      	mvns	r2, r3
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	400a      	ands	r2, r1
 8004300:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8004302:	2300      	movs	r3, #0
 8004304:	e006      	b.n	8004314 <HAL_CAN_DeactivateNotification+0x42>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800430a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004312:	2301      	movs	r3, #1
  }
}
 8004314:	4618      	mov	r0, r3
 8004316:	3714      	adds	r7, #20
 8004318:	46bd      	mov	sp, r7
 800431a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431e:	4770      	bx	lr

08004320 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b08a      	sub	sp, #40	; 0x28
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8004328:	2300      	movs	r3, #0
 800432a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	695b      	ldr	r3, [r3, #20]
 8004332:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	68db      	ldr	r3, [r3, #12]
 800434a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	691b      	ldr	r3, [r3, #16]
 8004352:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	699b      	ldr	r3, [r3, #24]
 800435a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800435c:	6a3b      	ldr	r3, [r7, #32]
 800435e:	f003 0301 	and.w	r3, r3, #1
 8004362:	2b00      	cmp	r3, #0
 8004364:	d07c      	beq.n	8004460 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8004366:	69bb      	ldr	r3, [r7, #24]
 8004368:	f003 0301 	and.w	r3, r3, #1
 800436c:	2b00      	cmp	r3, #0
 800436e:	d023      	beq.n	80043b8 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	2201      	movs	r2, #1
 8004376:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8004378:	69bb      	ldr	r3, [r7, #24]
 800437a:	f003 0302 	and.w	r3, r3, #2
 800437e:	2b00      	cmp	r3, #0
 8004380:	d003      	beq.n	800438a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	f000 f983 	bl	800468e <HAL_CAN_TxMailbox0CompleteCallback>
 8004388:	e016      	b.n	80043b8 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800438a:	69bb      	ldr	r3, [r7, #24]
 800438c:	f003 0304 	and.w	r3, r3, #4
 8004390:	2b00      	cmp	r3, #0
 8004392:	d004      	beq.n	800439e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8004394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004396:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800439a:	627b      	str	r3, [r7, #36]	; 0x24
 800439c:	e00c      	b.n	80043b8 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800439e:	69bb      	ldr	r3, [r7, #24]
 80043a0:	f003 0308 	and.w	r3, r3, #8
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d004      	beq.n	80043b2 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80043a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043aa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80043ae:	627b      	str	r3, [r7, #36]	; 0x24
 80043b0:	e002      	b.n	80043b8 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	f000 f989 	bl	80046ca <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80043b8:	69bb      	ldr	r3, [r7, #24]
 80043ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d024      	beq.n	800440c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80043ca:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80043cc:	69bb      	ldr	r3, [r7, #24]
 80043ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d003      	beq.n	80043de <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f000 f963 	bl	80046a2 <HAL_CAN_TxMailbox1CompleteCallback>
 80043dc:	e016      	b.n	800440c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80043de:	69bb      	ldr	r3, [r7, #24]
 80043e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d004      	beq.n	80043f2 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80043e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ea:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80043ee:	627b      	str	r3, [r7, #36]	; 0x24
 80043f0:	e00c      	b.n	800440c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80043f2:	69bb      	ldr	r3, [r7, #24]
 80043f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d004      	beq.n	8004406 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80043fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004402:	627b      	str	r3, [r7, #36]	; 0x24
 8004404:	e002      	b.n	800440c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f000 f969 	bl	80046de <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800440c:	69bb      	ldr	r3, [r7, #24]
 800440e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004412:	2b00      	cmp	r3, #0
 8004414:	d024      	beq.n	8004460 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800441e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8004420:	69bb      	ldr	r3, [r7, #24]
 8004422:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004426:	2b00      	cmp	r3, #0
 8004428:	d003      	beq.n	8004432 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f000 f943 	bl	80046b6 <HAL_CAN_TxMailbox2CompleteCallback>
 8004430:	e016      	b.n	8004460 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8004432:	69bb      	ldr	r3, [r7, #24]
 8004434:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004438:	2b00      	cmp	r3, #0
 800443a:	d004      	beq.n	8004446 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800443c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800443e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004442:	627b      	str	r3, [r7, #36]	; 0x24
 8004444:	e00c      	b.n	8004460 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8004446:	69bb      	ldr	r3, [r7, #24]
 8004448:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800444c:	2b00      	cmp	r3, #0
 800444e:	d004      	beq.n	800445a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8004450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004452:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004456:	627b      	str	r3, [r7, #36]	; 0x24
 8004458:	e002      	b.n	8004460 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	f000 f949 	bl	80046f2 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8004460:	6a3b      	ldr	r3, [r7, #32]
 8004462:	f003 0308 	and.w	r3, r3, #8
 8004466:	2b00      	cmp	r3, #0
 8004468:	d00c      	beq.n	8004484 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	f003 0310 	and.w	r3, r3, #16
 8004470:	2b00      	cmp	r3, #0
 8004472:	d007      	beq.n	8004484 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8004474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004476:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800447a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	2210      	movs	r2, #16
 8004482:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8004484:	6a3b      	ldr	r3, [r7, #32]
 8004486:	f003 0304 	and.w	r3, r3, #4
 800448a:	2b00      	cmp	r3, #0
 800448c:	d00b      	beq.n	80044a6 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	f003 0308 	and.w	r3, r3, #8
 8004494:	2b00      	cmp	r3, #0
 8004496:	d006      	beq.n	80044a6 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	2208      	movs	r2, #8
 800449e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	f000 f930 	bl	8004706 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80044a6:	6a3b      	ldr	r3, [r7, #32]
 80044a8:	f003 0302 	and.w	r3, r3, #2
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d009      	beq.n	80044c4 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	68db      	ldr	r3, [r3, #12]
 80044b6:	f003 0303 	and.w	r3, r3, #3
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d002      	beq.n	80044c4 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	f7fc fd60 	bl	8000f84 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80044c4:	6a3b      	ldr	r3, [r7, #32]
 80044c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d00c      	beq.n	80044e8 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	f003 0310 	and.w	r3, r3, #16
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d007      	beq.n	80044e8 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80044d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80044de:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	2210      	movs	r2, #16
 80044e6:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80044e8:	6a3b      	ldr	r3, [r7, #32]
 80044ea:	f003 0320 	and.w	r3, r3, #32
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d00b      	beq.n	800450a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	f003 0308 	and.w	r3, r3, #8
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d006      	beq.n	800450a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	2208      	movs	r2, #8
 8004502:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8004504:	6878      	ldr	r0, [r7, #4]
 8004506:	f000 f912 	bl	800472e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800450a:	6a3b      	ldr	r3, [r7, #32]
 800450c:	f003 0310 	and.w	r3, r3, #16
 8004510:	2b00      	cmp	r3, #0
 8004512:	d009      	beq.n	8004528 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	691b      	ldr	r3, [r3, #16]
 800451a:	f003 0303 	and.w	r3, r3, #3
 800451e:	2b00      	cmp	r3, #0
 8004520:	d002      	beq.n	8004528 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f000 f8f9 	bl	800471a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8004528:	6a3b      	ldr	r3, [r7, #32]
 800452a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800452e:	2b00      	cmp	r3, #0
 8004530:	d00b      	beq.n	800454a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8004532:	69fb      	ldr	r3, [r7, #28]
 8004534:	f003 0310 	and.w	r3, r3, #16
 8004538:	2b00      	cmp	r3, #0
 800453a:	d006      	beq.n	800454a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	2210      	movs	r2, #16
 8004542:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8004544:	6878      	ldr	r0, [r7, #4]
 8004546:	f000 f8fc 	bl	8004742 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800454a:	6a3b      	ldr	r3, [r7, #32]
 800454c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004550:	2b00      	cmp	r3, #0
 8004552:	d00b      	beq.n	800456c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8004554:	69fb      	ldr	r3, [r7, #28]
 8004556:	f003 0308 	and.w	r3, r3, #8
 800455a:	2b00      	cmp	r3, #0
 800455c:	d006      	beq.n	800456c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	2208      	movs	r2, #8
 8004564:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	f000 f8f5 	bl	8004756 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800456c:	6a3b      	ldr	r3, [r7, #32]
 800456e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004572:	2b00      	cmp	r3, #0
 8004574:	d07b      	beq.n	800466e <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8004576:	69fb      	ldr	r3, [r7, #28]
 8004578:	f003 0304 	and.w	r3, r3, #4
 800457c:	2b00      	cmp	r3, #0
 800457e:	d072      	beq.n	8004666 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004580:	6a3b      	ldr	r3, [r7, #32]
 8004582:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004586:	2b00      	cmp	r3, #0
 8004588:	d008      	beq.n	800459c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004590:	2b00      	cmp	r3, #0
 8004592:	d003      	beq.n	800459c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8004594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004596:	f043 0301 	orr.w	r3, r3, #1
 800459a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800459c:	6a3b      	ldr	r3, [r7, #32]
 800459e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d008      	beq.n	80045b8 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d003      	beq.n	80045b8 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80045b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b2:	f043 0302 	orr.w	r3, r3, #2
 80045b6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80045b8:	6a3b      	ldr	r3, [r7, #32]
 80045ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d008      	beq.n	80045d4 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d003      	beq.n	80045d4 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80045cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ce:	f043 0304 	orr.w	r3, r3, #4
 80045d2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80045d4:	6a3b      	ldr	r3, [r7, #32]
 80045d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d043      	beq.n	8004666 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d03e      	beq.n	8004666 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80045ee:	2b60      	cmp	r3, #96	; 0x60
 80045f0:	d02b      	beq.n	800464a <HAL_CAN_IRQHandler+0x32a>
 80045f2:	2b60      	cmp	r3, #96	; 0x60
 80045f4:	d82e      	bhi.n	8004654 <HAL_CAN_IRQHandler+0x334>
 80045f6:	2b50      	cmp	r3, #80	; 0x50
 80045f8:	d022      	beq.n	8004640 <HAL_CAN_IRQHandler+0x320>
 80045fa:	2b50      	cmp	r3, #80	; 0x50
 80045fc:	d82a      	bhi.n	8004654 <HAL_CAN_IRQHandler+0x334>
 80045fe:	2b40      	cmp	r3, #64	; 0x40
 8004600:	d019      	beq.n	8004636 <HAL_CAN_IRQHandler+0x316>
 8004602:	2b40      	cmp	r3, #64	; 0x40
 8004604:	d826      	bhi.n	8004654 <HAL_CAN_IRQHandler+0x334>
 8004606:	2b30      	cmp	r3, #48	; 0x30
 8004608:	d010      	beq.n	800462c <HAL_CAN_IRQHandler+0x30c>
 800460a:	2b30      	cmp	r3, #48	; 0x30
 800460c:	d822      	bhi.n	8004654 <HAL_CAN_IRQHandler+0x334>
 800460e:	2b10      	cmp	r3, #16
 8004610:	d002      	beq.n	8004618 <HAL_CAN_IRQHandler+0x2f8>
 8004612:	2b20      	cmp	r3, #32
 8004614:	d005      	beq.n	8004622 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8004616:	e01d      	b.n	8004654 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8004618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800461a:	f043 0308 	orr.w	r3, r3, #8
 800461e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004620:	e019      	b.n	8004656 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8004622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004624:	f043 0310 	orr.w	r3, r3, #16
 8004628:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800462a:	e014      	b.n	8004656 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800462c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800462e:	f043 0320 	orr.w	r3, r3, #32
 8004632:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004634:	e00f      	b.n	8004656 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8004636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004638:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800463c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800463e:	e00a      	b.n	8004656 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8004640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004642:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004646:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004648:	e005      	b.n	8004656 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800464a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800464c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004650:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004652:	e000      	b.n	8004656 <HAL_CAN_IRQHandler+0x336>
            break;
 8004654:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	699a      	ldr	r2, [r3, #24]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004664:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	2204      	movs	r2, #4
 800466c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800466e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004670:	2b00      	cmp	r3, #0
 8004672:	d008      	beq.n	8004686 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800467a:	431a      	orrs	r2, r3
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8004680:	6878      	ldr	r0, [r7, #4]
 8004682:	f000 f872 	bl	800476a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8004686:	bf00      	nop
 8004688:	3728      	adds	r7, #40	; 0x28
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}

0800468e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800468e:	b480      	push	{r7}
 8004690:	b083      	sub	sp, #12
 8004692:	af00      	add	r7, sp, #0
 8004694:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8004696:	bf00      	nop
 8004698:	370c      	adds	r7, #12
 800469a:	46bd      	mov	sp, r7
 800469c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a0:	4770      	bx	lr

080046a2 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80046a2:	b480      	push	{r7}
 80046a4:	b083      	sub	sp, #12
 80046a6:	af00      	add	r7, sp, #0
 80046a8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80046aa:	bf00      	nop
 80046ac:	370c      	adds	r7, #12
 80046ae:	46bd      	mov	sp, r7
 80046b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b4:	4770      	bx	lr

080046b6 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80046b6:	b480      	push	{r7}
 80046b8:	b083      	sub	sp, #12
 80046ba:	af00      	add	r7, sp, #0
 80046bc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80046be:	bf00      	nop
 80046c0:	370c      	adds	r7, #12
 80046c2:	46bd      	mov	sp, r7
 80046c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c8:	4770      	bx	lr

080046ca <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80046ca:	b480      	push	{r7}
 80046cc:	b083      	sub	sp, #12
 80046ce:	af00      	add	r7, sp, #0
 80046d0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80046d2:	bf00      	nop
 80046d4:	370c      	adds	r7, #12
 80046d6:	46bd      	mov	sp, r7
 80046d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046dc:	4770      	bx	lr

080046de <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80046de:	b480      	push	{r7}
 80046e0:	b083      	sub	sp, #12
 80046e2:	af00      	add	r7, sp, #0
 80046e4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80046e6:	bf00      	nop
 80046e8:	370c      	adds	r7, #12
 80046ea:	46bd      	mov	sp, r7
 80046ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f0:	4770      	bx	lr

080046f2 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80046f2:	b480      	push	{r7}
 80046f4:	b083      	sub	sp, #12
 80046f6:	af00      	add	r7, sp, #0
 80046f8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80046fa:	bf00      	nop
 80046fc:	370c      	adds	r7, #12
 80046fe:	46bd      	mov	sp, r7
 8004700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004704:	4770      	bx	lr

08004706 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004706:	b480      	push	{r7}
 8004708:	b083      	sub	sp, #12
 800470a:	af00      	add	r7, sp, #0
 800470c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800470e:	bf00      	nop
 8004710:	370c      	adds	r7, #12
 8004712:	46bd      	mov	sp, r7
 8004714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004718:	4770      	bx	lr

0800471a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800471a:	b480      	push	{r7}
 800471c:	b083      	sub	sp, #12
 800471e:	af00      	add	r7, sp, #0
 8004720:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8004722:	bf00      	nop
 8004724:	370c      	adds	r7, #12
 8004726:	46bd      	mov	sp, r7
 8004728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472c:	4770      	bx	lr

0800472e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800472e:	b480      	push	{r7}
 8004730:	b083      	sub	sp, #12
 8004732:	af00      	add	r7, sp, #0
 8004734:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004736:	bf00      	nop
 8004738:	370c      	adds	r7, #12
 800473a:	46bd      	mov	sp, r7
 800473c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004740:	4770      	bx	lr

08004742 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8004742:	b480      	push	{r7}
 8004744:	b083      	sub	sp, #12
 8004746:	af00      	add	r7, sp, #0
 8004748:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800474a:	bf00      	nop
 800474c:	370c      	adds	r7, #12
 800474e:	46bd      	mov	sp, r7
 8004750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004754:	4770      	bx	lr

08004756 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8004756:	b480      	push	{r7}
 8004758:	b083      	sub	sp, #12
 800475a:	af00      	add	r7, sp, #0
 800475c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800475e:	bf00      	nop
 8004760:	370c      	adds	r7, #12
 8004762:	46bd      	mov	sp, r7
 8004764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004768:	4770      	bx	lr

0800476a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800476a:	b480      	push	{r7}
 800476c:	b083      	sub	sp, #12
 800476e:	af00      	add	r7, sp, #0
 8004770:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8004772:	bf00      	nop
 8004774:	370c      	adds	r7, #12
 8004776:	46bd      	mov	sp, r7
 8004778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477c:	4770      	bx	lr
	...

08004780 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004780:	b480      	push	{r7}
 8004782:	b085      	sub	sp, #20
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	f003 0307 	and.w	r3, r3, #7
 800478e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004790:	4b0c      	ldr	r3, [pc, #48]	; (80047c4 <__NVIC_SetPriorityGrouping+0x44>)
 8004792:	68db      	ldr	r3, [r3, #12]
 8004794:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004796:	68ba      	ldr	r2, [r7, #8]
 8004798:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800479c:	4013      	ands	r3, r2
 800479e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80047a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80047ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80047b2:	4a04      	ldr	r2, [pc, #16]	; (80047c4 <__NVIC_SetPriorityGrouping+0x44>)
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	60d3      	str	r3, [r2, #12]
}
 80047b8:	bf00      	nop
 80047ba:	3714      	adds	r7, #20
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr
 80047c4:	e000ed00 	.word	0xe000ed00

080047c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80047c8:	b480      	push	{r7}
 80047ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80047cc:	4b04      	ldr	r3, [pc, #16]	; (80047e0 <__NVIC_GetPriorityGrouping+0x18>)
 80047ce:	68db      	ldr	r3, [r3, #12]
 80047d0:	0a1b      	lsrs	r3, r3, #8
 80047d2:	f003 0307 	and.w	r3, r3, #7
}
 80047d6:	4618      	mov	r0, r3
 80047d8:	46bd      	mov	sp, r7
 80047da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047de:	4770      	bx	lr
 80047e0:	e000ed00 	.word	0xe000ed00

080047e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b083      	sub	sp, #12
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	4603      	mov	r3, r0
 80047ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	db0b      	blt.n	800480e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80047f6:	79fb      	ldrb	r3, [r7, #7]
 80047f8:	f003 021f 	and.w	r2, r3, #31
 80047fc:	4907      	ldr	r1, [pc, #28]	; (800481c <__NVIC_EnableIRQ+0x38>)
 80047fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004802:	095b      	lsrs	r3, r3, #5
 8004804:	2001      	movs	r0, #1
 8004806:	fa00 f202 	lsl.w	r2, r0, r2
 800480a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800480e:	bf00      	nop
 8004810:	370c      	adds	r7, #12
 8004812:	46bd      	mov	sp, r7
 8004814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004818:	4770      	bx	lr
 800481a:	bf00      	nop
 800481c:	e000e100 	.word	0xe000e100

08004820 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004820:	b480      	push	{r7}
 8004822:	b083      	sub	sp, #12
 8004824:	af00      	add	r7, sp, #0
 8004826:	4603      	mov	r3, r0
 8004828:	6039      	str	r1, [r7, #0]
 800482a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800482c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004830:	2b00      	cmp	r3, #0
 8004832:	db0a      	blt.n	800484a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	b2da      	uxtb	r2, r3
 8004838:	490c      	ldr	r1, [pc, #48]	; (800486c <__NVIC_SetPriority+0x4c>)
 800483a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800483e:	0112      	lsls	r2, r2, #4
 8004840:	b2d2      	uxtb	r2, r2
 8004842:	440b      	add	r3, r1
 8004844:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004848:	e00a      	b.n	8004860 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	b2da      	uxtb	r2, r3
 800484e:	4908      	ldr	r1, [pc, #32]	; (8004870 <__NVIC_SetPriority+0x50>)
 8004850:	79fb      	ldrb	r3, [r7, #7]
 8004852:	f003 030f 	and.w	r3, r3, #15
 8004856:	3b04      	subs	r3, #4
 8004858:	0112      	lsls	r2, r2, #4
 800485a:	b2d2      	uxtb	r2, r2
 800485c:	440b      	add	r3, r1
 800485e:	761a      	strb	r2, [r3, #24]
}
 8004860:	bf00      	nop
 8004862:	370c      	adds	r7, #12
 8004864:	46bd      	mov	sp, r7
 8004866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486a:	4770      	bx	lr
 800486c:	e000e100 	.word	0xe000e100
 8004870:	e000ed00 	.word	0xe000ed00

08004874 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004874:	b480      	push	{r7}
 8004876:	b089      	sub	sp, #36	; 0x24
 8004878:	af00      	add	r7, sp, #0
 800487a:	60f8      	str	r0, [r7, #12]
 800487c:	60b9      	str	r1, [r7, #8]
 800487e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	f003 0307 	and.w	r3, r3, #7
 8004886:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004888:	69fb      	ldr	r3, [r7, #28]
 800488a:	f1c3 0307 	rsb	r3, r3, #7
 800488e:	2b04      	cmp	r3, #4
 8004890:	bf28      	it	cs
 8004892:	2304      	movcs	r3, #4
 8004894:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004896:	69fb      	ldr	r3, [r7, #28]
 8004898:	3304      	adds	r3, #4
 800489a:	2b06      	cmp	r3, #6
 800489c:	d902      	bls.n	80048a4 <NVIC_EncodePriority+0x30>
 800489e:	69fb      	ldr	r3, [r7, #28]
 80048a0:	3b03      	subs	r3, #3
 80048a2:	e000      	b.n	80048a6 <NVIC_EncodePriority+0x32>
 80048a4:	2300      	movs	r3, #0
 80048a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80048a8:	f04f 32ff 	mov.w	r2, #4294967295
 80048ac:	69bb      	ldr	r3, [r7, #24]
 80048ae:	fa02 f303 	lsl.w	r3, r2, r3
 80048b2:	43da      	mvns	r2, r3
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	401a      	ands	r2, r3
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80048bc:	f04f 31ff 	mov.w	r1, #4294967295
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	fa01 f303 	lsl.w	r3, r1, r3
 80048c6:	43d9      	mvns	r1, r3
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80048cc:	4313      	orrs	r3, r2
         );
}
 80048ce:	4618      	mov	r0, r3
 80048d0:	3724      	adds	r7, #36	; 0x24
 80048d2:	46bd      	mov	sp, r7
 80048d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d8:	4770      	bx	lr

080048da <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80048da:	b580      	push	{r7, lr}
 80048dc:	b082      	sub	sp, #8
 80048de:	af00      	add	r7, sp, #0
 80048e0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80048e2:	6878      	ldr	r0, [r7, #4]
 80048e4:	f7ff ff4c 	bl	8004780 <__NVIC_SetPriorityGrouping>
}
 80048e8:	bf00      	nop
 80048ea:	3708      	adds	r7, #8
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}

080048f0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b086      	sub	sp, #24
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	4603      	mov	r3, r0
 80048f8:	60b9      	str	r1, [r7, #8]
 80048fa:	607a      	str	r2, [r7, #4]
 80048fc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80048fe:	2300      	movs	r3, #0
 8004900:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004902:	f7ff ff61 	bl	80047c8 <__NVIC_GetPriorityGrouping>
 8004906:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004908:	687a      	ldr	r2, [r7, #4]
 800490a:	68b9      	ldr	r1, [r7, #8]
 800490c:	6978      	ldr	r0, [r7, #20]
 800490e:	f7ff ffb1 	bl	8004874 <NVIC_EncodePriority>
 8004912:	4602      	mov	r2, r0
 8004914:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004918:	4611      	mov	r1, r2
 800491a:	4618      	mov	r0, r3
 800491c:	f7ff ff80 	bl	8004820 <__NVIC_SetPriority>
}
 8004920:	bf00      	nop
 8004922:	3718      	adds	r7, #24
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}

08004928 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b082      	sub	sp, #8
 800492c:	af00      	add	r7, sp, #0
 800492e:	4603      	mov	r3, r0
 8004930:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004932:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004936:	4618      	mov	r0, r3
 8004938:	f7ff ff54 	bl	80047e4 <__NVIC_EnableIRQ>
}
 800493c:	bf00      	nop
 800493e:	3708      	adds	r7, #8
 8004940:	46bd      	mov	sp, r7
 8004942:	bd80      	pop	{r7, pc}

08004944 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b086      	sub	sp, #24
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800494c:	2300      	movs	r3, #0
 800494e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004950:	f7ff f85c 	bl	8003a0c <HAL_GetTick>
 8004954:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d101      	bne.n	8004960 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800495c:	2301      	movs	r3, #1
 800495e:	e099      	b.n	8004a94 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2200      	movs	r2, #0
 8004964:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2202      	movs	r2, #2
 800496c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	681a      	ldr	r2, [r3, #0]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f022 0201 	bic.w	r2, r2, #1
 800497e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004980:	e00f      	b.n	80049a2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004982:	f7ff f843 	bl	8003a0c <HAL_GetTick>
 8004986:	4602      	mov	r2, r0
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	1ad3      	subs	r3, r2, r3
 800498c:	2b05      	cmp	r3, #5
 800498e:	d908      	bls.n	80049a2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2220      	movs	r2, #32
 8004994:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2203      	movs	r2, #3
 800499a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800499e:	2303      	movs	r3, #3
 80049a0:	e078      	b.n	8004a94 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f003 0301 	and.w	r3, r3, #1
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d1e8      	bne.n	8004982 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80049b8:	697a      	ldr	r2, [r7, #20]
 80049ba:	4b38      	ldr	r3, [pc, #224]	; (8004a9c <HAL_DMA_Init+0x158>)
 80049bc:	4013      	ands	r3, r2
 80049be:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	685a      	ldr	r2, [r3, #4]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	689b      	ldr	r3, [r3, #8]
 80049c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80049ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	691b      	ldr	r3, [r3, #16]
 80049d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80049da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	699b      	ldr	r3, [r3, #24]
 80049e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80049e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6a1b      	ldr	r3, [r3, #32]
 80049ec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80049ee:	697a      	ldr	r2, [r7, #20]
 80049f0:	4313      	orrs	r3, r2
 80049f2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f8:	2b04      	cmp	r3, #4
 80049fa:	d107      	bne.n	8004a0c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a04:	4313      	orrs	r3, r2
 8004a06:	697a      	ldr	r2, [r7, #20]
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	697a      	ldr	r2, [r7, #20]
 8004a12:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	695b      	ldr	r3, [r3, #20]
 8004a1a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	f023 0307 	bic.w	r3, r3, #7
 8004a22:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a28:	697a      	ldr	r2, [r7, #20]
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a32:	2b04      	cmp	r3, #4
 8004a34:	d117      	bne.n	8004a66 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a3a:	697a      	ldr	r2, [r7, #20]
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d00e      	beq.n	8004a66 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004a48:	6878      	ldr	r0, [r7, #4]
 8004a4a:	f000 fa91 	bl	8004f70 <DMA_CheckFifoParam>
 8004a4e:	4603      	mov	r3, r0
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d008      	beq.n	8004a66 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2240      	movs	r2, #64	; 0x40
 8004a58:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2201      	movs	r2, #1
 8004a5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004a62:	2301      	movs	r3, #1
 8004a64:	e016      	b.n	8004a94 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	697a      	ldr	r2, [r7, #20]
 8004a6c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f000 fa48 	bl	8004f04 <DMA_CalcBaseAndBitshift>
 8004a74:	4603      	mov	r3, r0
 8004a76:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a7c:	223f      	movs	r2, #63	; 0x3f
 8004a7e:	409a      	lsls	r2, r3
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2200      	movs	r2, #0
 8004a88:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2201      	movs	r2, #1
 8004a8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004a92:	2300      	movs	r3, #0
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	3718      	adds	r7, #24
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bd80      	pop	{r7, pc}
 8004a9c:	f010803f 	.word	0xf010803f

08004aa0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b086      	sub	sp, #24
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	60f8      	str	r0, [r7, #12]
 8004aa8:	60b9      	str	r1, [r7, #8]
 8004aaa:	607a      	str	r2, [r7, #4]
 8004aac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ab6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004abe:	2b01      	cmp	r3, #1
 8004ac0:	d101      	bne.n	8004ac6 <HAL_DMA_Start_IT+0x26>
 8004ac2:	2302      	movs	r3, #2
 8004ac4:	e040      	b.n	8004b48 <HAL_DMA_Start_IT+0xa8>
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2201      	movs	r2, #1
 8004aca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004ad4:	b2db      	uxtb	r3, r3
 8004ad6:	2b01      	cmp	r3, #1
 8004ad8:	d12f      	bne.n	8004b3a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	2202      	movs	r2, #2
 8004ade:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	687a      	ldr	r2, [r7, #4]
 8004aec:	68b9      	ldr	r1, [r7, #8]
 8004aee:	68f8      	ldr	r0, [r7, #12]
 8004af0:	f000 f9da 	bl	8004ea8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004af8:	223f      	movs	r2, #63	; 0x3f
 8004afa:	409a      	lsls	r2, r3
 8004afc:	693b      	ldr	r3, [r7, #16]
 8004afe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	681a      	ldr	r2, [r3, #0]
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f042 0216 	orr.w	r2, r2, #22
 8004b0e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d007      	beq.n	8004b28 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	681a      	ldr	r2, [r3, #0]
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f042 0208 	orr.w	r2, r2, #8
 8004b26:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	681a      	ldr	r2, [r3, #0]
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f042 0201 	orr.w	r2, r2, #1
 8004b36:	601a      	str	r2, [r3, #0]
 8004b38:	e005      	b.n	8004b46 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004b42:	2302      	movs	r3, #2
 8004b44:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004b46:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	3718      	adds	r7, #24
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bd80      	pop	{r7, pc}

08004b50 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004b50:	b480      	push	{r7}
 8004b52:	b083      	sub	sp, #12
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004b5e:	b2db      	uxtb	r3, r3
 8004b60:	2b02      	cmp	r3, #2
 8004b62:	d004      	beq.n	8004b6e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2280      	movs	r2, #128	; 0x80
 8004b68:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	e00c      	b.n	8004b88 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2205      	movs	r2, #5
 8004b72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	681a      	ldr	r2, [r3, #0]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f022 0201 	bic.w	r2, r2, #1
 8004b84:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004b86:	2300      	movs	r3, #0
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	370c      	adds	r7, #12
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b92:	4770      	bx	lr

08004b94 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b086      	sub	sp, #24
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004ba0:	4b92      	ldr	r3, [pc, #584]	; (8004dec <HAL_DMA_IRQHandler+0x258>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a92      	ldr	r2, [pc, #584]	; (8004df0 <HAL_DMA_IRQHandler+0x25c>)
 8004ba6:	fba2 2303 	umull	r2, r3, r2, r3
 8004baa:	0a9b      	lsrs	r3, r3, #10
 8004bac:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bb2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bbe:	2208      	movs	r2, #8
 8004bc0:	409a      	lsls	r2, r3
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	4013      	ands	r3, r2
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d01a      	beq.n	8004c00 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f003 0304 	and.w	r3, r3, #4
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d013      	beq.n	8004c00 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	681a      	ldr	r2, [r3, #0]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f022 0204 	bic.w	r2, r2, #4
 8004be6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bec:	2208      	movs	r2, #8
 8004bee:	409a      	lsls	r2, r3
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bf8:	f043 0201 	orr.w	r2, r3, #1
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c04:	2201      	movs	r2, #1
 8004c06:	409a      	lsls	r2, r3
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	4013      	ands	r3, r2
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d012      	beq.n	8004c36 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	695b      	ldr	r3, [r3, #20]
 8004c16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d00b      	beq.n	8004c36 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c22:	2201      	movs	r2, #1
 8004c24:	409a      	lsls	r2, r3
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c2e:	f043 0202 	orr.w	r2, r3, #2
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c3a:	2204      	movs	r2, #4
 8004c3c:	409a      	lsls	r2, r3
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	4013      	ands	r3, r2
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d012      	beq.n	8004c6c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f003 0302 	and.w	r3, r3, #2
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d00b      	beq.n	8004c6c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c58:	2204      	movs	r2, #4
 8004c5a:	409a      	lsls	r2, r3
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c64:	f043 0204 	orr.w	r2, r3, #4
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c70:	2210      	movs	r2, #16
 8004c72:	409a      	lsls	r2, r3
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	4013      	ands	r3, r2
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d043      	beq.n	8004d04 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f003 0308 	and.w	r3, r3, #8
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d03c      	beq.n	8004d04 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c8e:	2210      	movs	r2, #16
 8004c90:	409a      	lsls	r2, r3
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d018      	beq.n	8004cd6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d108      	bne.n	8004cc4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d024      	beq.n	8004d04 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	4798      	blx	r3
 8004cc2:	e01f      	b.n	8004d04 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d01b      	beq.n	8004d04 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cd0:	6878      	ldr	r0, [r7, #4]
 8004cd2:	4798      	blx	r3
 8004cd4:	e016      	b.n	8004d04 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d107      	bne.n	8004cf4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	681a      	ldr	r2, [r3, #0]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f022 0208 	bic.w	r2, r2, #8
 8004cf2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d003      	beq.n	8004d04 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d08:	2220      	movs	r2, #32
 8004d0a:	409a      	lsls	r2, r3
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	4013      	ands	r3, r2
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	f000 808e 	beq.w	8004e32 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f003 0310 	and.w	r3, r3, #16
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	f000 8086 	beq.w	8004e32 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d2a:	2220      	movs	r2, #32
 8004d2c:	409a      	lsls	r2, r3
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004d38:	b2db      	uxtb	r3, r3
 8004d3a:	2b05      	cmp	r3, #5
 8004d3c:	d136      	bne.n	8004dac <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	681a      	ldr	r2, [r3, #0]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f022 0216 	bic.w	r2, r2, #22
 8004d4c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	695a      	ldr	r2, [r3, #20]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004d5c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d103      	bne.n	8004d6e <HAL_DMA_IRQHandler+0x1da>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d007      	beq.n	8004d7e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	681a      	ldr	r2, [r3, #0]
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f022 0208 	bic.w	r2, r2, #8
 8004d7c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d82:	223f      	movs	r2, #63	; 0x3f
 8004d84:	409a      	lsls	r2, r3
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2201      	movs	r2, #1
 8004d96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d07d      	beq.n	8004e9e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	4798      	blx	r3
        }
        return;
 8004daa:	e078      	b.n	8004e9e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d01c      	beq.n	8004df4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d108      	bne.n	8004dda <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d030      	beq.n	8004e32 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dd4:	6878      	ldr	r0, [r7, #4]
 8004dd6:	4798      	blx	r3
 8004dd8:	e02b      	b.n	8004e32 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d027      	beq.n	8004e32 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	4798      	blx	r3
 8004dea:	e022      	b.n	8004e32 <HAL_DMA_IRQHandler+0x29e>
 8004dec:	20000000 	.word	0x20000000
 8004df0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d10f      	bne.n	8004e22 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	681a      	ldr	r2, [r3, #0]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f022 0210 	bic.w	r2, r2, #16
 8004e10:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2200      	movs	r2, #0
 8004e16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2201      	movs	r2, #1
 8004e1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d003      	beq.n	8004e32 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e2e:	6878      	ldr	r0, [r7, #4]
 8004e30:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d032      	beq.n	8004ea0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e3e:	f003 0301 	and.w	r3, r3, #1
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d022      	beq.n	8004e8c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2205      	movs	r2, #5
 8004e4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	681a      	ldr	r2, [r3, #0]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f022 0201 	bic.w	r2, r2, #1
 8004e5c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	3301      	adds	r3, #1
 8004e62:	60bb      	str	r3, [r7, #8]
 8004e64:	697a      	ldr	r2, [r7, #20]
 8004e66:	429a      	cmp	r2, r3
 8004e68:	d307      	bcc.n	8004e7a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f003 0301 	and.w	r3, r3, #1
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d1f2      	bne.n	8004e5e <HAL_DMA_IRQHandler+0x2ca>
 8004e78:	e000      	b.n	8004e7c <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004e7a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2201      	movs	r2, #1
 8004e88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d005      	beq.n	8004ea0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e98:	6878      	ldr	r0, [r7, #4]
 8004e9a:	4798      	blx	r3
 8004e9c:	e000      	b.n	8004ea0 <HAL_DMA_IRQHandler+0x30c>
        return;
 8004e9e:	bf00      	nop
    }
  }
}
 8004ea0:	3718      	adds	r7, #24
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}
 8004ea6:	bf00      	nop

08004ea8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b085      	sub	sp, #20
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	60f8      	str	r0, [r7, #12]
 8004eb0:	60b9      	str	r1, [r7, #8]
 8004eb2:	607a      	str	r2, [r7, #4]
 8004eb4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	681a      	ldr	r2, [r3, #0]
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004ec4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	683a      	ldr	r2, [r7, #0]
 8004ecc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	689b      	ldr	r3, [r3, #8]
 8004ed2:	2b40      	cmp	r3, #64	; 0x40
 8004ed4:	d108      	bne.n	8004ee8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	687a      	ldr	r2, [r7, #4]
 8004edc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	68ba      	ldr	r2, [r7, #8]
 8004ee4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004ee6:	e007      	b.n	8004ef8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	68ba      	ldr	r2, [r7, #8]
 8004eee:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	687a      	ldr	r2, [r7, #4]
 8004ef6:	60da      	str	r2, [r3, #12]
}
 8004ef8:	bf00      	nop
 8004efa:	3714      	adds	r7, #20
 8004efc:	46bd      	mov	sp, r7
 8004efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f02:	4770      	bx	lr

08004f04 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004f04:	b480      	push	{r7}
 8004f06:	b085      	sub	sp, #20
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	b2db      	uxtb	r3, r3
 8004f12:	3b10      	subs	r3, #16
 8004f14:	4a14      	ldr	r2, [pc, #80]	; (8004f68 <DMA_CalcBaseAndBitshift+0x64>)
 8004f16:	fba2 2303 	umull	r2, r3, r2, r3
 8004f1a:	091b      	lsrs	r3, r3, #4
 8004f1c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004f1e:	4a13      	ldr	r2, [pc, #76]	; (8004f6c <DMA_CalcBaseAndBitshift+0x68>)
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	4413      	add	r3, r2
 8004f24:	781b      	ldrb	r3, [r3, #0]
 8004f26:	461a      	mov	r2, r3
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	2b03      	cmp	r3, #3
 8004f30:	d909      	bls.n	8004f46 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004f3a:	f023 0303 	bic.w	r3, r3, #3
 8004f3e:	1d1a      	adds	r2, r3, #4
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	659a      	str	r2, [r3, #88]	; 0x58
 8004f44:	e007      	b.n	8004f56 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004f4e:	f023 0303 	bic.w	r3, r3, #3
 8004f52:	687a      	ldr	r2, [r7, #4]
 8004f54:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	3714      	adds	r7, #20
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f64:	4770      	bx	lr
 8004f66:	bf00      	nop
 8004f68:	aaaaaaab 	.word	0xaaaaaaab
 8004f6c:	0800c6b4 	.word	0x0800c6b4

08004f70 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004f70:	b480      	push	{r7}
 8004f72:	b085      	sub	sp, #20
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f78:	2300      	movs	r3, #0
 8004f7a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f80:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	699b      	ldr	r3, [r3, #24]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d11f      	bne.n	8004fca <DMA_CheckFifoParam+0x5a>
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	2b03      	cmp	r3, #3
 8004f8e:	d856      	bhi.n	800503e <DMA_CheckFifoParam+0xce>
 8004f90:	a201      	add	r2, pc, #4	; (adr r2, 8004f98 <DMA_CheckFifoParam+0x28>)
 8004f92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f96:	bf00      	nop
 8004f98:	08004fa9 	.word	0x08004fa9
 8004f9c:	08004fbb 	.word	0x08004fbb
 8004fa0:	08004fa9 	.word	0x08004fa9
 8004fa4:	0800503f 	.word	0x0800503f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d046      	beq.n	8005042 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004fb8:	e043      	b.n	8005042 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fbe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004fc2:	d140      	bne.n	8005046 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004fc8:	e03d      	b.n	8005046 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	699b      	ldr	r3, [r3, #24]
 8004fce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fd2:	d121      	bne.n	8005018 <DMA_CheckFifoParam+0xa8>
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	2b03      	cmp	r3, #3
 8004fd8:	d837      	bhi.n	800504a <DMA_CheckFifoParam+0xda>
 8004fda:	a201      	add	r2, pc, #4	; (adr r2, 8004fe0 <DMA_CheckFifoParam+0x70>)
 8004fdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fe0:	08004ff1 	.word	0x08004ff1
 8004fe4:	08004ff7 	.word	0x08004ff7
 8004fe8:	08004ff1 	.word	0x08004ff1
 8004fec:	08005009 	.word	0x08005009
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	73fb      	strb	r3, [r7, #15]
      break;
 8004ff4:	e030      	b.n	8005058 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ffa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d025      	beq.n	800504e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005002:	2301      	movs	r3, #1
 8005004:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005006:	e022      	b.n	800504e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800500c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005010:	d11f      	bne.n	8005052 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005016:	e01c      	b.n	8005052 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	2b02      	cmp	r3, #2
 800501c:	d903      	bls.n	8005026 <DMA_CheckFifoParam+0xb6>
 800501e:	68bb      	ldr	r3, [r7, #8]
 8005020:	2b03      	cmp	r3, #3
 8005022:	d003      	beq.n	800502c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005024:	e018      	b.n	8005058 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005026:	2301      	movs	r3, #1
 8005028:	73fb      	strb	r3, [r7, #15]
      break;
 800502a:	e015      	b.n	8005058 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005030:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005034:	2b00      	cmp	r3, #0
 8005036:	d00e      	beq.n	8005056 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005038:	2301      	movs	r3, #1
 800503a:	73fb      	strb	r3, [r7, #15]
      break;
 800503c:	e00b      	b.n	8005056 <DMA_CheckFifoParam+0xe6>
      break;
 800503e:	bf00      	nop
 8005040:	e00a      	b.n	8005058 <DMA_CheckFifoParam+0xe8>
      break;
 8005042:	bf00      	nop
 8005044:	e008      	b.n	8005058 <DMA_CheckFifoParam+0xe8>
      break;
 8005046:	bf00      	nop
 8005048:	e006      	b.n	8005058 <DMA_CheckFifoParam+0xe8>
      break;
 800504a:	bf00      	nop
 800504c:	e004      	b.n	8005058 <DMA_CheckFifoParam+0xe8>
      break;
 800504e:	bf00      	nop
 8005050:	e002      	b.n	8005058 <DMA_CheckFifoParam+0xe8>
      break;   
 8005052:	bf00      	nop
 8005054:	e000      	b.n	8005058 <DMA_CheckFifoParam+0xe8>
      break;
 8005056:	bf00      	nop
    }
  } 
  
  return status; 
 8005058:	7bfb      	ldrb	r3, [r7, #15]
}
 800505a:	4618      	mov	r0, r3
 800505c:	3714      	adds	r7, #20
 800505e:	46bd      	mov	sp, r7
 8005060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005064:	4770      	bx	lr
 8005066:	bf00      	nop

08005068 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005068:	b480      	push	{r7}
 800506a:	b089      	sub	sp, #36	; 0x24
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
 8005070:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005072:	2300      	movs	r3, #0
 8005074:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005076:	2300      	movs	r3, #0
 8005078:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800507a:	2300      	movs	r3, #0
 800507c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800507e:	2300      	movs	r3, #0
 8005080:	61fb      	str	r3, [r7, #28]
 8005082:	e177      	b.n	8005374 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005084:	2201      	movs	r2, #1
 8005086:	69fb      	ldr	r3, [r7, #28]
 8005088:	fa02 f303 	lsl.w	r3, r2, r3
 800508c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	697a      	ldr	r2, [r7, #20]
 8005094:	4013      	ands	r3, r2
 8005096:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005098:	693a      	ldr	r2, [r7, #16]
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	429a      	cmp	r2, r3
 800509e:	f040 8166 	bne.w	800536e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	2b01      	cmp	r3, #1
 80050a8:	d00b      	beq.n	80050c2 <HAL_GPIO_Init+0x5a>
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	2b02      	cmp	r3, #2
 80050b0:	d007      	beq.n	80050c2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80050b6:	2b11      	cmp	r3, #17
 80050b8:	d003      	beq.n	80050c2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	2b12      	cmp	r3, #18
 80050c0:	d130      	bne.n	8005124 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	689b      	ldr	r3, [r3, #8]
 80050c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80050c8:	69fb      	ldr	r3, [r7, #28]
 80050ca:	005b      	lsls	r3, r3, #1
 80050cc:	2203      	movs	r2, #3
 80050ce:	fa02 f303 	lsl.w	r3, r2, r3
 80050d2:	43db      	mvns	r3, r3
 80050d4:	69ba      	ldr	r2, [r7, #24]
 80050d6:	4013      	ands	r3, r2
 80050d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	68da      	ldr	r2, [r3, #12]
 80050de:	69fb      	ldr	r3, [r7, #28]
 80050e0:	005b      	lsls	r3, r3, #1
 80050e2:	fa02 f303 	lsl.w	r3, r2, r3
 80050e6:	69ba      	ldr	r2, [r7, #24]
 80050e8:	4313      	orrs	r3, r2
 80050ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	69ba      	ldr	r2, [r7, #24]
 80050f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80050f8:	2201      	movs	r2, #1
 80050fa:	69fb      	ldr	r3, [r7, #28]
 80050fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005100:	43db      	mvns	r3, r3
 8005102:	69ba      	ldr	r2, [r7, #24]
 8005104:	4013      	ands	r3, r2
 8005106:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	091b      	lsrs	r3, r3, #4
 800510e:	f003 0201 	and.w	r2, r3, #1
 8005112:	69fb      	ldr	r3, [r7, #28]
 8005114:	fa02 f303 	lsl.w	r3, r2, r3
 8005118:	69ba      	ldr	r2, [r7, #24]
 800511a:	4313      	orrs	r3, r2
 800511c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	69ba      	ldr	r2, [r7, #24]
 8005122:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	68db      	ldr	r3, [r3, #12]
 8005128:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800512a:	69fb      	ldr	r3, [r7, #28]
 800512c:	005b      	lsls	r3, r3, #1
 800512e:	2203      	movs	r2, #3
 8005130:	fa02 f303 	lsl.w	r3, r2, r3
 8005134:	43db      	mvns	r3, r3
 8005136:	69ba      	ldr	r2, [r7, #24]
 8005138:	4013      	ands	r3, r2
 800513a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	689a      	ldr	r2, [r3, #8]
 8005140:	69fb      	ldr	r3, [r7, #28]
 8005142:	005b      	lsls	r3, r3, #1
 8005144:	fa02 f303 	lsl.w	r3, r2, r3
 8005148:	69ba      	ldr	r2, [r7, #24]
 800514a:	4313      	orrs	r3, r2
 800514c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	69ba      	ldr	r2, [r7, #24]
 8005152:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	2b02      	cmp	r3, #2
 800515a:	d003      	beq.n	8005164 <HAL_GPIO_Init+0xfc>
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	2b12      	cmp	r3, #18
 8005162:	d123      	bne.n	80051ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005164:	69fb      	ldr	r3, [r7, #28]
 8005166:	08da      	lsrs	r2, r3, #3
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	3208      	adds	r2, #8
 800516c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005170:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005172:	69fb      	ldr	r3, [r7, #28]
 8005174:	f003 0307 	and.w	r3, r3, #7
 8005178:	009b      	lsls	r3, r3, #2
 800517a:	220f      	movs	r2, #15
 800517c:	fa02 f303 	lsl.w	r3, r2, r3
 8005180:	43db      	mvns	r3, r3
 8005182:	69ba      	ldr	r2, [r7, #24]
 8005184:	4013      	ands	r3, r2
 8005186:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	691a      	ldr	r2, [r3, #16]
 800518c:	69fb      	ldr	r3, [r7, #28]
 800518e:	f003 0307 	and.w	r3, r3, #7
 8005192:	009b      	lsls	r3, r3, #2
 8005194:	fa02 f303 	lsl.w	r3, r2, r3
 8005198:	69ba      	ldr	r2, [r7, #24]
 800519a:	4313      	orrs	r3, r2
 800519c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800519e:	69fb      	ldr	r3, [r7, #28]
 80051a0:	08da      	lsrs	r2, r3, #3
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	3208      	adds	r2, #8
 80051a6:	69b9      	ldr	r1, [r7, #24]
 80051a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80051b2:	69fb      	ldr	r3, [r7, #28]
 80051b4:	005b      	lsls	r3, r3, #1
 80051b6:	2203      	movs	r2, #3
 80051b8:	fa02 f303 	lsl.w	r3, r2, r3
 80051bc:	43db      	mvns	r3, r3
 80051be:	69ba      	ldr	r2, [r7, #24]
 80051c0:	4013      	ands	r3, r2
 80051c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	f003 0203 	and.w	r2, r3, #3
 80051cc:	69fb      	ldr	r3, [r7, #28]
 80051ce:	005b      	lsls	r3, r3, #1
 80051d0:	fa02 f303 	lsl.w	r3, r2, r3
 80051d4:	69ba      	ldr	r2, [r7, #24]
 80051d6:	4313      	orrs	r3, r2
 80051d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	69ba      	ldr	r2, [r7, #24]
 80051de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	f000 80c0 	beq.w	800536e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80051ee:	2300      	movs	r3, #0
 80051f0:	60fb      	str	r3, [r7, #12]
 80051f2:	4b66      	ldr	r3, [pc, #408]	; (800538c <HAL_GPIO_Init+0x324>)
 80051f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051f6:	4a65      	ldr	r2, [pc, #404]	; (800538c <HAL_GPIO_Init+0x324>)
 80051f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80051fc:	6453      	str	r3, [r2, #68]	; 0x44
 80051fe:	4b63      	ldr	r3, [pc, #396]	; (800538c <HAL_GPIO_Init+0x324>)
 8005200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005202:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005206:	60fb      	str	r3, [r7, #12]
 8005208:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800520a:	4a61      	ldr	r2, [pc, #388]	; (8005390 <HAL_GPIO_Init+0x328>)
 800520c:	69fb      	ldr	r3, [r7, #28]
 800520e:	089b      	lsrs	r3, r3, #2
 8005210:	3302      	adds	r3, #2
 8005212:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005216:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005218:	69fb      	ldr	r3, [r7, #28]
 800521a:	f003 0303 	and.w	r3, r3, #3
 800521e:	009b      	lsls	r3, r3, #2
 8005220:	220f      	movs	r2, #15
 8005222:	fa02 f303 	lsl.w	r3, r2, r3
 8005226:	43db      	mvns	r3, r3
 8005228:	69ba      	ldr	r2, [r7, #24]
 800522a:	4013      	ands	r3, r2
 800522c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	4a58      	ldr	r2, [pc, #352]	; (8005394 <HAL_GPIO_Init+0x32c>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d037      	beq.n	80052a6 <HAL_GPIO_Init+0x23e>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	4a57      	ldr	r2, [pc, #348]	; (8005398 <HAL_GPIO_Init+0x330>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d031      	beq.n	80052a2 <HAL_GPIO_Init+0x23a>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	4a56      	ldr	r2, [pc, #344]	; (800539c <HAL_GPIO_Init+0x334>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d02b      	beq.n	800529e <HAL_GPIO_Init+0x236>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	4a55      	ldr	r2, [pc, #340]	; (80053a0 <HAL_GPIO_Init+0x338>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d025      	beq.n	800529a <HAL_GPIO_Init+0x232>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	4a54      	ldr	r2, [pc, #336]	; (80053a4 <HAL_GPIO_Init+0x33c>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d01f      	beq.n	8005296 <HAL_GPIO_Init+0x22e>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	4a53      	ldr	r2, [pc, #332]	; (80053a8 <HAL_GPIO_Init+0x340>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d019      	beq.n	8005292 <HAL_GPIO_Init+0x22a>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	4a52      	ldr	r2, [pc, #328]	; (80053ac <HAL_GPIO_Init+0x344>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d013      	beq.n	800528e <HAL_GPIO_Init+0x226>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	4a51      	ldr	r2, [pc, #324]	; (80053b0 <HAL_GPIO_Init+0x348>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d00d      	beq.n	800528a <HAL_GPIO_Init+0x222>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	4a50      	ldr	r2, [pc, #320]	; (80053b4 <HAL_GPIO_Init+0x34c>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d007      	beq.n	8005286 <HAL_GPIO_Init+0x21e>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	4a4f      	ldr	r2, [pc, #316]	; (80053b8 <HAL_GPIO_Init+0x350>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d101      	bne.n	8005282 <HAL_GPIO_Init+0x21a>
 800527e:	2309      	movs	r3, #9
 8005280:	e012      	b.n	80052a8 <HAL_GPIO_Init+0x240>
 8005282:	230a      	movs	r3, #10
 8005284:	e010      	b.n	80052a8 <HAL_GPIO_Init+0x240>
 8005286:	2308      	movs	r3, #8
 8005288:	e00e      	b.n	80052a8 <HAL_GPIO_Init+0x240>
 800528a:	2307      	movs	r3, #7
 800528c:	e00c      	b.n	80052a8 <HAL_GPIO_Init+0x240>
 800528e:	2306      	movs	r3, #6
 8005290:	e00a      	b.n	80052a8 <HAL_GPIO_Init+0x240>
 8005292:	2305      	movs	r3, #5
 8005294:	e008      	b.n	80052a8 <HAL_GPIO_Init+0x240>
 8005296:	2304      	movs	r3, #4
 8005298:	e006      	b.n	80052a8 <HAL_GPIO_Init+0x240>
 800529a:	2303      	movs	r3, #3
 800529c:	e004      	b.n	80052a8 <HAL_GPIO_Init+0x240>
 800529e:	2302      	movs	r3, #2
 80052a0:	e002      	b.n	80052a8 <HAL_GPIO_Init+0x240>
 80052a2:	2301      	movs	r3, #1
 80052a4:	e000      	b.n	80052a8 <HAL_GPIO_Init+0x240>
 80052a6:	2300      	movs	r3, #0
 80052a8:	69fa      	ldr	r2, [r7, #28]
 80052aa:	f002 0203 	and.w	r2, r2, #3
 80052ae:	0092      	lsls	r2, r2, #2
 80052b0:	4093      	lsls	r3, r2
 80052b2:	69ba      	ldr	r2, [r7, #24]
 80052b4:	4313      	orrs	r3, r2
 80052b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80052b8:	4935      	ldr	r1, [pc, #212]	; (8005390 <HAL_GPIO_Init+0x328>)
 80052ba:	69fb      	ldr	r3, [r7, #28]
 80052bc:	089b      	lsrs	r3, r3, #2
 80052be:	3302      	adds	r3, #2
 80052c0:	69ba      	ldr	r2, [r7, #24]
 80052c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80052c6:	4b3d      	ldr	r3, [pc, #244]	; (80053bc <HAL_GPIO_Init+0x354>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80052cc:	693b      	ldr	r3, [r7, #16]
 80052ce:	43db      	mvns	r3, r3
 80052d0:	69ba      	ldr	r2, [r7, #24]
 80052d2:	4013      	ands	r3, r2
 80052d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d003      	beq.n	80052ea <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80052e2:	69ba      	ldr	r2, [r7, #24]
 80052e4:	693b      	ldr	r3, [r7, #16]
 80052e6:	4313      	orrs	r3, r2
 80052e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80052ea:	4a34      	ldr	r2, [pc, #208]	; (80053bc <HAL_GPIO_Init+0x354>)
 80052ec:	69bb      	ldr	r3, [r7, #24]
 80052ee:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80052f0:	4b32      	ldr	r3, [pc, #200]	; (80053bc <HAL_GPIO_Init+0x354>)
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80052f6:	693b      	ldr	r3, [r7, #16]
 80052f8:	43db      	mvns	r3, r3
 80052fa:	69ba      	ldr	r2, [r7, #24]
 80052fc:	4013      	ands	r3, r2
 80052fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005308:	2b00      	cmp	r3, #0
 800530a:	d003      	beq.n	8005314 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800530c:	69ba      	ldr	r2, [r7, #24]
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	4313      	orrs	r3, r2
 8005312:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005314:	4a29      	ldr	r2, [pc, #164]	; (80053bc <HAL_GPIO_Init+0x354>)
 8005316:	69bb      	ldr	r3, [r7, #24]
 8005318:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800531a:	4b28      	ldr	r3, [pc, #160]	; (80053bc <HAL_GPIO_Init+0x354>)
 800531c:	689b      	ldr	r3, [r3, #8]
 800531e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005320:	693b      	ldr	r3, [r7, #16]
 8005322:	43db      	mvns	r3, r3
 8005324:	69ba      	ldr	r2, [r7, #24]
 8005326:	4013      	ands	r3, r2
 8005328:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005332:	2b00      	cmp	r3, #0
 8005334:	d003      	beq.n	800533e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005336:	69ba      	ldr	r2, [r7, #24]
 8005338:	693b      	ldr	r3, [r7, #16]
 800533a:	4313      	orrs	r3, r2
 800533c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800533e:	4a1f      	ldr	r2, [pc, #124]	; (80053bc <HAL_GPIO_Init+0x354>)
 8005340:	69bb      	ldr	r3, [r7, #24]
 8005342:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005344:	4b1d      	ldr	r3, [pc, #116]	; (80053bc <HAL_GPIO_Init+0x354>)
 8005346:	68db      	ldr	r3, [r3, #12]
 8005348:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800534a:	693b      	ldr	r3, [r7, #16]
 800534c:	43db      	mvns	r3, r3
 800534e:	69ba      	ldr	r2, [r7, #24]
 8005350:	4013      	ands	r3, r2
 8005352:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800535c:	2b00      	cmp	r3, #0
 800535e:	d003      	beq.n	8005368 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005360:	69ba      	ldr	r2, [r7, #24]
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	4313      	orrs	r3, r2
 8005366:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005368:	4a14      	ldr	r2, [pc, #80]	; (80053bc <HAL_GPIO_Init+0x354>)
 800536a:	69bb      	ldr	r3, [r7, #24]
 800536c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800536e:	69fb      	ldr	r3, [r7, #28]
 8005370:	3301      	adds	r3, #1
 8005372:	61fb      	str	r3, [r7, #28]
 8005374:	69fb      	ldr	r3, [r7, #28]
 8005376:	2b0f      	cmp	r3, #15
 8005378:	f67f ae84 	bls.w	8005084 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800537c:	bf00      	nop
 800537e:	bf00      	nop
 8005380:	3724      	adds	r7, #36	; 0x24
 8005382:	46bd      	mov	sp, r7
 8005384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005388:	4770      	bx	lr
 800538a:	bf00      	nop
 800538c:	40023800 	.word	0x40023800
 8005390:	40013800 	.word	0x40013800
 8005394:	40020000 	.word	0x40020000
 8005398:	40020400 	.word	0x40020400
 800539c:	40020800 	.word	0x40020800
 80053a0:	40020c00 	.word	0x40020c00
 80053a4:	40021000 	.word	0x40021000
 80053a8:	40021400 	.word	0x40021400
 80053ac:	40021800 	.word	0x40021800
 80053b0:	40021c00 	.word	0x40021c00
 80053b4:	40022000 	.word	0x40022000
 80053b8:	40022400 	.word	0x40022400
 80053bc:	40013c00 	.word	0x40013c00

080053c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80053c0:	b480      	push	{r7}
 80053c2:	b083      	sub	sp, #12
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
 80053c8:	460b      	mov	r3, r1
 80053ca:	807b      	strh	r3, [r7, #2]
 80053cc:	4613      	mov	r3, r2
 80053ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80053d0:	787b      	ldrb	r3, [r7, #1]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d003      	beq.n	80053de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80053d6:	887a      	ldrh	r2, [r7, #2]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80053dc:	e003      	b.n	80053e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80053de:	887b      	ldrh	r3, [r7, #2]
 80053e0:	041a      	lsls	r2, r3, #16
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	619a      	str	r2, [r3, #24]
}
 80053e6:	bf00      	nop
 80053e8:	370c      	adds	r7, #12
 80053ea:	46bd      	mov	sp, r7
 80053ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f0:	4770      	bx	lr
	...

080053f4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b082      	sub	sp, #8
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	4603      	mov	r3, r0
 80053fc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80053fe:	4b08      	ldr	r3, [pc, #32]	; (8005420 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005400:	695a      	ldr	r2, [r3, #20]
 8005402:	88fb      	ldrh	r3, [r7, #6]
 8005404:	4013      	ands	r3, r2
 8005406:	2b00      	cmp	r3, #0
 8005408:	d006      	beq.n	8005418 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800540a:	4a05      	ldr	r2, [pc, #20]	; (8005420 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800540c:	88fb      	ldrh	r3, [r7, #6]
 800540e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005410:	88fb      	ldrh	r3, [r7, #6]
 8005412:	4618      	mov	r0, r3
 8005414:	f000 f806 	bl	8005424 <HAL_GPIO_EXTI_Callback>
  }
}
 8005418:	bf00      	nop
 800541a:	3708      	adds	r7, #8
 800541c:	46bd      	mov	sp, r7
 800541e:	bd80      	pop	{r7, pc}
 8005420:	40013c00 	.word	0x40013c00

08005424 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005424:	b480      	push	{r7}
 8005426:	b083      	sub	sp, #12
 8005428:	af00      	add	r7, sp, #0
 800542a:	4603      	mov	r3, r0
 800542c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800542e:	bf00      	nop
 8005430:	370c      	adds	r7, #12
 8005432:	46bd      	mov	sp, r7
 8005434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005438:	4770      	bx	lr
	...

0800543c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b086      	sub	sp, #24
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d101      	bne.n	800544e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800544a:	2301      	movs	r3, #1
 800544c:	e25b      	b.n	8005906 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f003 0301 	and.w	r3, r3, #1
 8005456:	2b00      	cmp	r3, #0
 8005458:	d075      	beq.n	8005546 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800545a:	4ba3      	ldr	r3, [pc, #652]	; (80056e8 <HAL_RCC_OscConfig+0x2ac>)
 800545c:	689b      	ldr	r3, [r3, #8]
 800545e:	f003 030c 	and.w	r3, r3, #12
 8005462:	2b04      	cmp	r3, #4
 8005464:	d00c      	beq.n	8005480 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005466:	4ba0      	ldr	r3, [pc, #640]	; (80056e8 <HAL_RCC_OscConfig+0x2ac>)
 8005468:	689b      	ldr	r3, [r3, #8]
 800546a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800546e:	2b08      	cmp	r3, #8
 8005470:	d112      	bne.n	8005498 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005472:	4b9d      	ldr	r3, [pc, #628]	; (80056e8 <HAL_RCC_OscConfig+0x2ac>)
 8005474:	685b      	ldr	r3, [r3, #4]
 8005476:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800547a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800547e:	d10b      	bne.n	8005498 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005480:	4b99      	ldr	r3, [pc, #612]	; (80056e8 <HAL_RCC_OscConfig+0x2ac>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005488:	2b00      	cmp	r3, #0
 800548a:	d05b      	beq.n	8005544 <HAL_RCC_OscConfig+0x108>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d157      	bne.n	8005544 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005494:	2301      	movs	r3, #1
 8005496:	e236      	b.n	8005906 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054a0:	d106      	bne.n	80054b0 <HAL_RCC_OscConfig+0x74>
 80054a2:	4b91      	ldr	r3, [pc, #580]	; (80056e8 <HAL_RCC_OscConfig+0x2ac>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a90      	ldr	r2, [pc, #576]	; (80056e8 <HAL_RCC_OscConfig+0x2ac>)
 80054a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054ac:	6013      	str	r3, [r2, #0]
 80054ae:	e01d      	b.n	80054ec <HAL_RCC_OscConfig+0xb0>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80054b8:	d10c      	bne.n	80054d4 <HAL_RCC_OscConfig+0x98>
 80054ba:	4b8b      	ldr	r3, [pc, #556]	; (80056e8 <HAL_RCC_OscConfig+0x2ac>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a8a      	ldr	r2, [pc, #552]	; (80056e8 <HAL_RCC_OscConfig+0x2ac>)
 80054c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80054c4:	6013      	str	r3, [r2, #0]
 80054c6:	4b88      	ldr	r3, [pc, #544]	; (80056e8 <HAL_RCC_OscConfig+0x2ac>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a87      	ldr	r2, [pc, #540]	; (80056e8 <HAL_RCC_OscConfig+0x2ac>)
 80054cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054d0:	6013      	str	r3, [r2, #0]
 80054d2:	e00b      	b.n	80054ec <HAL_RCC_OscConfig+0xb0>
 80054d4:	4b84      	ldr	r3, [pc, #528]	; (80056e8 <HAL_RCC_OscConfig+0x2ac>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a83      	ldr	r2, [pc, #524]	; (80056e8 <HAL_RCC_OscConfig+0x2ac>)
 80054da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054de:	6013      	str	r3, [r2, #0]
 80054e0:	4b81      	ldr	r3, [pc, #516]	; (80056e8 <HAL_RCC_OscConfig+0x2ac>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a80      	ldr	r2, [pc, #512]	; (80056e8 <HAL_RCC_OscConfig+0x2ac>)
 80054e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80054ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d013      	beq.n	800551c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054f4:	f7fe fa8a 	bl	8003a0c <HAL_GetTick>
 80054f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054fa:	e008      	b.n	800550e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80054fc:	f7fe fa86 	bl	8003a0c <HAL_GetTick>
 8005500:	4602      	mov	r2, r0
 8005502:	693b      	ldr	r3, [r7, #16]
 8005504:	1ad3      	subs	r3, r2, r3
 8005506:	2b64      	cmp	r3, #100	; 0x64
 8005508:	d901      	bls.n	800550e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800550a:	2303      	movs	r3, #3
 800550c:	e1fb      	b.n	8005906 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800550e:	4b76      	ldr	r3, [pc, #472]	; (80056e8 <HAL_RCC_OscConfig+0x2ac>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005516:	2b00      	cmp	r3, #0
 8005518:	d0f0      	beq.n	80054fc <HAL_RCC_OscConfig+0xc0>
 800551a:	e014      	b.n	8005546 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800551c:	f7fe fa76 	bl	8003a0c <HAL_GetTick>
 8005520:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005522:	e008      	b.n	8005536 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005524:	f7fe fa72 	bl	8003a0c <HAL_GetTick>
 8005528:	4602      	mov	r2, r0
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	1ad3      	subs	r3, r2, r3
 800552e:	2b64      	cmp	r3, #100	; 0x64
 8005530:	d901      	bls.n	8005536 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005532:	2303      	movs	r3, #3
 8005534:	e1e7      	b.n	8005906 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005536:	4b6c      	ldr	r3, [pc, #432]	; (80056e8 <HAL_RCC_OscConfig+0x2ac>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800553e:	2b00      	cmp	r3, #0
 8005540:	d1f0      	bne.n	8005524 <HAL_RCC_OscConfig+0xe8>
 8005542:	e000      	b.n	8005546 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005544:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f003 0302 	and.w	r3, r3, #2
 800554e:	2b00      	cmp	r3, #0
 8005550:	d063      	beq.n	800561a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005552:	4b65      	ldr	r3, [pc, #404]	; (80056e8 <HAL_RCC_OscConfig+0x2ac>)
 8005554:	689b      	ldr	r3, [r3, #8]
 8005556:	f003 030c 	and.w	r3, r3, #12
 800555a:	2b00      	cmp	r3, #0
 800555c:	d00b      	beq.n	8005576 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800555e:	4b62      	ldr	r3, [pc, #392]	; (80056e8 <HAL_RCC_OscConfig+0x2ac>)
 8005560:	689b      	ldr	r3, [r3, #8]
 8005562:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005566:	2b08      	cmp	r3, #8
 8005568:	d11c      	bne.n	80055a4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800556a:	4b5f      	ldr	r3, [pc, #380]	; (80056e8 <HAL_RCC_OscConfig+0x2ac>)
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005572:	2b00      	cmp	r3, #0
 8005574:	d116      	bne.n	80055a4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005576:	4b5c      	ldr	r3, [pc, #368]	; (80056e8 <HAL_RCC_OscConfig+0x2ac>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f003 0302 	and.w	r3, r3, #2
 800557e:	2b00      	cmp	r3, #0
 8005580:	d005      	beq.n	800558e <HAL_RCC_OscConfig+0x152>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	68db      	ldr	r3, [r3, #12]
 8005586:	2b01      	cmp	r3, #1
 8005588:	d001      	beq.n	800558e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800558a:	2301      	movs	r3, #1
 800558c:	e1bb      	b.n	8005906 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800558e:	4b56      	ldr	r3, [pc, #344]	; (80056e8 <HAL_RCC_OscConfig+0x2ac>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	691b      	ldr	r3, [r3, #16]
 800559a:	00db      	lsls	r3, r3, #3
 800559c:	4952      	ldr	r1, [pc, #328]	; (80056e8 <HAL_RCC_OscConfig+0x2ac>)
 800559e:	4313      	orrs	r3, r2
 80055a0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80055a2:	e03a      	b.n	800561a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	68db      	ldr	r3, [r3, #12]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d020      	beq.n	80055ee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80055ac:	4b4f      	ldr	r3, [pc, #316]	; (80056ec <HAL_RCC_OscConfig+0x2b0>)
 80055ae:	2201      	movs	r2, #1
 80055b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055b2:	f7fe fa2b 	bl	8003a0c <HAL_GetTick>
 80055b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055b8:	e008      	b.n	80055cc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80055ba:	f7fe fa27 	bl	8003a0c <HAL_GetTick>
 80055be:	4602      	mov	r2, r0
 80055c0:	693b      	ldr	r3, [r7, #16]
 80055c2:	1ad3      	subs	r3, r2, r3
 80055c4:	2b02      	cmp	r3, #2
 80055c6:	d901      	bls.n	80055cc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80055c8:	2303      	movs	r3, #3
 80055ca:	e19c      	b.n	8005906 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055cc:	4b46      	ldr	r3, [pc, #280]	; (80056e8 <HAL_RCC_OscConfig+0x2ac>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f003 0302 	and.w	r3, r3, #2
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d0f0      	beq.n	80055ba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055d8:	4b43      	ldr	r3, [pc, #268]	; (80056e8 <HAL_RCC_OscConfig+0x2ac>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	691b      	ldr	r3, [r3, #16]
 80055e4:	00db      	lsls	r3, r3, #3
 80055e6:	4940      	ldr	r1, [pc, #256]	; (80056e8 <HAL_RCC_OscConfig+0x2ac>)
 80055e8:	4313      	orrs	r3, r2
 80055ea:	600b      	str	r3, [r1, #0]
 80055ec:	e015      	b.n	800561a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80055ee:	4b3f      	ldr	r3, [pc, #252]	; (80056ec <HAL_RCC_OscConfig+0x2b0>)
 80055f0:	2200      	movs	r2, #0
 80055f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055f4:	f7fe fa0a 	bl	8003a0c <HAL_GetTick>
 80055f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80055fa:	e008      	b.n	800560e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80055fc:	f7fe fa06 	bl	8003a0c <HAL_GetTick>
 8005600:	4602      	mov	r2, r0
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	1ad3      	subs	r3, r2, r3
 8005606:	2b02      	cmp	r3, #2
 8005608:	d901      	bls.n	800560e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800560a:	2303      	movs	r3, #3
 800560c:	e17b      	b.n	8005906 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800560e:	4b36      	ldr	r3, [pc, #216]	; (80056e8 <HAL_RCC_OscConfig+0x2ac>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f003 0302 	and.w	r3, r3, #2
 8005616:	2b00      	cmp	r3, #0
 8005618:	d1f0      	bne.n	80055fc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f003 0308 	and.w	r3, r3, #8
 8005622:	2b00      	cmp	r3, #0
 8005624:	d030      	beq.n	8005688 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	695b      	ldr	r3, [r3, #20]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d016      	beq.n	800565c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800562e:	4b30      	ldr	r3, [pc, #192]	; (80056f0 <HAL_RCC_OscConfig+0x2b4>)
 8005630:	2201      	movs	r2, #1
 8005632:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005634:	f7fe f9ea 	bl	8003a0c <HAL_GetTick>
 8005638:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800563a:	e008      	b.n	800564e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800563c:	f7fe f9e6 	bl	8003a0c <HAL_GetTick>
 8005640:	4602      	mov	r2, r0
 8005642:	693b      	ldr	r3, [r7, #16]
 8005644:	1ad3      	subs	r3, r2, r3
 8005646:	2b02      	cmp	r3, #2
 8005648:	d901      	bls.n	800564e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800564a:	2303      	movs	r3, #3
 800564c:	e15b      	b.n	8005906 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800564e:	4b26      	ldr	r3, [pc, #152]	; (80056e8 <HAL_RCC_OscConfig+0x2ac>)
 8005650:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005652:	f003 0302 	and.w	r3, r3, #2
 8005656:	2b00      	cmp	r3, #0
 8005658:	d0f0      	beq.n	800563c <HAL_RCC_OscConfig+0x200>
 800565a:	e015      	b.n	8005688 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800565c:	4b24      	ldr	r3, [pc, #144]	; (80056f0 <HAL_RCC_OscConfig+0x2b4>)
 800565e:	2200      	movs	r2, #0
 8005660:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005662:	f7fe f9d3 	bl	8003a0c <HAL_GetTick>
 8005666:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005668:	e008      	b.n	800567c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800566a:	f7fe f9cf 	bl	8003a0c <HAL_GetTick>
 800566e:	4602      	mov	r2, r0
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	1ad3      	subs	r3, r2, r3
 8005674:	2b02      	cmp	r3, #2
 8005676:	d901      	bls.n	800567c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005678:	2303      	movs	r3, #3
 800567a:	e144      	b.n	8005906 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800567c:	4b1a      	ldr	r3, [pc, #104]	; (80056e8 <HAL_RCC_OscConfig+0x2ac>)
 800567e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005680:	f003 0302 	and.w	r3, r3, #2
 8005684:	2b00      	cmp	r3, #0
 8005686:	d1f0      	bne.n	800566a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f003 0304 	and.w	r3, r3, #4
 8005690:	2b00      	cmp	r3, #0
 8005692:	f000 80a0 	beq.w	80057d6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005696:	2300      	movs	r3, #0
 8005698:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800569a:	4b13      	ldr	r3, [pc, #76]	; (80056e8 <HAL_RCC_OscConfig+0x2ac>)
 800569c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800569e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d10f      	bne.n	80056c6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80056a6:	2300      	movs	r3, #0
 80056a8:	60bb      	str	r3, [r7, #8]
 80056aa:	4b0f      	ldr	r3, [pc, #60]	; (80056e8 <HAL_RCC_OscConfig+0x2ac>)
 80056ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ae:	4a0e      	ldr	r2, [pc, #56]	; (80056e8 <HAL_RCC_OscConfig+0x2ac>)
 80056b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056b4:	6413      	str	r3, [r2, #64]	; 0x40
 80056b6:	4b0c      	ldr	r3, [pc, #48]	; (80056e8 <HAL_RCC_OscConfig+0x2ac>)
 80056b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056be:	60bb      	str	r3, [r7, #8]
 80056c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80056c2:	2301      	movs	r3, #1
 80056c4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056c6:	4b0b      	ldr	r3, [pc, #44]	; (80056f4 <HAL_RCC_OscConfig+0x2b8>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d121      	bne.n	8005716 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80056d2:	4b08      	ldr	r3, [pc, #32]	; (80056f4 <HAL_RCC_OscConfig+0x2b8>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4a07      	ldr	r2, [pc, #28]	; (80056f4 <HAL_RCC_OscConfig+0x2b8>)
 80056d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80056de:	f7fe f995 	bl	8003a0c <HAL_GetTick>
 80056e2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056e4:	e011      	b.n	800570a <HAL_RCC_OscConfig+0x2ce>
 80056e6:	bf00      	nop
 80056e8:	40023800 	.word	0x40023800
 80056ec:	42470000 	.word	0x42470000
 80056f0:	42470e80 	.word	0x42470e80
 80056f4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056f8:	f7fe f988 	bl	8003a0c <HAL_GetTick>
 80056fc:	4602      	mov	r2, r0
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	1ad3      	subs	r3, r2, r3
 8005702:	2b02      	cmp	r3, #2
 8005704:	d901      	bls.n	800570a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005706:	2303      	movs	r3, #3
 8005708:	e0fd      	b.n	8005906 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800570a:	4b81      	ldr	r3, [pc, #516]	; (8005910 <HAL_RCC_OscConfig+0x4d4>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005712:	2b00      	cmp	r3, #0
 8005714:	d0f0      	beq.n	80056f8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	689b      	ldr	r3, [r3, #8]
 800571a:	2b01      	cmp	r3, #1
 800571c:	d106      	bne.n	800572c <HAL_RCC_OscConfig+0x2f0>
 800571e:	4b7d      	ldr	r3, [pc, #500]	; (8005914 <HAL_RCC_OscConfig+0x4d8>)
 8005720:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005722:	4a7c      	ldr	r2, [pc, #496]	; (8005914 <HAL_RCC_OscConfig+0x4d8>)
 8005724:	f043 0301 	orr.w	r3, r3, #1
 8005728:	6713      	str	r3, [r2, #112]	; 0x70
 800572a:	e01c      	b.n	8005766 <HAL_RCC_OscConfig+0x32a>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	689b      	ldr	r3, [r3, #8]
 8005730:	2b05      	cmp	r3, #5
 8005732:	d10c      	bne.n	800574e <HAL_RCC_OscConfig+0x312>
 8005734:	4b77      	ldr	r3, [pc, #476]	; (8005914 <HAL_RCC_OscConfig+0x4d8>)
 8005736:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005738:	4a76      	ldr	r2, [pc, #472]	; (8005914 <HAL_RCC_OscConfig+0x4d8>)
 800573a:	f043 0304 	orr.w	r3, r3, #4
 800573e:	6713      	str	r3, [r2, #112]	; 0x70
 8005740:	4b74      	ldr	r3, [pc, #464]	; (8005914 <HAL_RCC_OscConfig+0x4d8>)
 8005742:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005744:	4a73      	ldr	r2, [pc, #460]	; (8005914 <HAL_RCC_OscConfig+0x4d8>)
 8005746:	f043 0301 	orr.w	r3, r3, #1
 800574a:	6713      	str	r3, [r2, #112]	; 0x70
 800574c:	e00b      	b.n	8005766 <HAL_RCC_OscConfig+0x32a>
 800574e:	4b71      	ldr	r3, [pc, #452]	; (8005914 <HAL_RCC_OscConfig+0x4d8>)
 8005750:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005752:	4a70      	ldr	r2, [pc, #448]	; (8005914 <HAL_RCC_OscConfig+0x4d8>)
 8005754:	f023 0301 	bic.w	r3, r3, #1
 8005758:	6713      	str	r3, [r2, #112]	; 0x70
 800575a:	4b6e      	ldr	r3, [pc, #440]	; (8005914 <HAL_RCC_OscConfig+0x4d8>)
 800575c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800575e:	4a6d      	ldr	r2, [pc, #436]	; (8005914 <HAL_RCC_OscConfig+0x4d8>)
 8005760:	f023 0304 	bic.w	r3, r3, #4
 8005764:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	689b      	ldr	r3, [r3, #8]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d015      	beq.n	800579a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800576e:	f7fe f94d 	bl	8003a0c <HAL_GetTick>
 8005772:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005774:	e00a      	b.n	800578c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005776:	f7fe f949 	bl	8003a0c <HAL_GetTick>
 800577a:	4602      	mov	r2, r0
 800577c:	693b      	ldr	r3, [r7, #16]
 800577e:	1ad3      	subs	r3, r2, r3
 8005780:	f241 3288 	movw	r2, #5000	; 0x1388
 8005784:	4293      	cmp	r3, r2
 8005786:	d901      	bls.n	800578c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005788:	2303      	movs	r3, #3
 800578a:	e0bc      	b.n	8005906 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800578c:	4b61      	ldr	r3, [pc, #388]	; (8005914 <HAL_RCC_OscConfig+0x4d8>)
 800578e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005790:	f003 0302 	and.w	r3, r3, #2
 8005794:	2b00      	cmp	r3, #0
 8005796:	d0ee      	beq.n	8005776 <HAL_RCC_OscConfig+0x33a>
 8005798:	e014      	b.n	80057c4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800579a:	f7fe f937 	bl	8003a0c <HAL_GetTick>
 800579e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80057a0:	e00a      	b.n	80057b8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80057a2:	f7fe f933 	bl	8003a0c <HAL_GetTick>
 80057a6:	4602      	mov	r2, r0
 80057a8:	693b      	ldr	r3, [r7, #16]
 80057aa:	1ad3      	subs	r3, r2, r3
 80057ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d901      	bls.n	80057b8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80057b4:	2303      	movs	r3, #3
 80057b6:	e0a6      	b.n	8005906 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80057b8:	4b56      	ldr	r3, [pc, #344]	; (8005914 <HAL_RCC_OscConfig+0x4d8>)
 80057ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057bc:	f003 0302 	and.w	r3, r3, #2
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d1ee      	bne.n	80057a2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80057c4:	7dfb      	ldrb	r3, [r7, #23]
 80057c6:	2b01      	cmp	r3, #1
 80057c8:	d105      	bne.n	80057d6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80057ca:	4b52      	ldr	r3, [pc, #328]	; (8005914 <HAL_RCC_OscConfig+0x4d8>)
 80057cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ce:	4a51      	ldr	r2, [pc, #324]	; (8005914 <HAL_RCC_OscConfig+0x4d8>)
 80057d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80057d4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	699b      	ldr	r3, [r3, #24]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	f000 8092 	beq.w	8005904 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80057e0:	4b4c      	ldr	r3, [pc, #304]	; (8005914 <HAL_RCC_OscConfig+0x4d8>)
 80057e2:	689b      	ldr	r3, [r3, #8]
 80057e4:	f003 030c 	and.w	r3, r3, #12
 80057e8:	2b08      	cmp	r3, #8
 80057ea:	d05c      	beq.n	80058a6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	699b      	ldr	r3, [r3, #24]
 80057f0:	2b02      	cmp	r3, #2
 80057f2:	d141      	bne.n	8005878 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057f4:	4b48      	ldr	r3, [pc, #288]	; (8005918 <HAL_RCC_OscConfig+0x4dc>)
 80057f6:	2200      	movs	r2, #0
 80057f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057fa:	f7fe f907 	bl	8003a0c <HAL_GetTick>
 80057fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005800:	e008      	b.n	8005814 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005802:	f7fe f903 	bl	8003a0c <HAL_GetTick>
 8005806:	4602      	mov	r2, r0
 8005808:	693b      	ldr	r3, [r7, #16]
 800580a:	1ad3      	subs	r3, r2, r3
 800580c:	2b02      	cmp	r3, #2
 800580e:	d901      	bls.n	8005814 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005810:	2303      	movs	r3, #3
 8005812:	e078      	b.n	8005906 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005814:	4b3f      	ldr	r3, [pc, #252]	; (8005914 <HAL_RCC_OscConfig+0x4d8>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800581c:	2b00      	cmp	r3, #0
 800581e:	d1f0      	bne.n	8005802 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	69da      	ldr	r2, [r3, #28]
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6a1b      	ldr	r3, [r3, #32]
 8005828:	431a      	orrs	r2, r3
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800582e:	019b      	lsls	r3, r3, #6
 8005830:	431a      	orrs	r2, r3
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005836:	085b      	lsrs	r3, r3, #1
 8005838:	3b01      	subs	r3, #1
 800583a:	041b      	lsls	r3, r3, #16
 800583c:	431a      	orrs	r2, r3
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005842:	061b      	lsls	r3, r3, #24
 8005844:	4933      	ldr	r1, [pc, #204]	; (8005914 <HAL_RCC_OscConfig+0x4d8>)
 8005846:	4313      	orrs	r3, r2
 8005848:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800584a:	4b33      	ldr	r3, [pc, #204]	; (8005918 <HAL_RCC_OscConfig+0x4dc>)
 800584c:	2201      	movs	r2, #1
 800584e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005850:	f7fe f8dc 	bl	8003a0c <HAL_GetTick>
 8005854:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005856:	e008      	b.n	800586a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005858:	f7fe f8d8 	bl	8003a0c <HAL_GetTick>
 800585c:	4602      	mov	r2, r0
 800585e:	693b      	ldr	r3, [r7, #16]
 8005860:	1ad3      	subs	r3, r2, r3
 8005862:	2b02      	cmp	r3, #2
 8005864:	d901      	bls.n	800586a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005866:	2303      	movs	r3, #3
 8005868:	e04d      	b.n	8005906 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800586a:	4b2a      	ldr	r3, [pc, #168]	; (8005914 <HAL_RCC_OscConfig+0x4d8>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005872:	2b00      	cmp	r3, #0
 8005874:	d0f0      	beq.n	8005858 <HAL_RCC_OscConfig+0x41c>
 8005876:	e045      	b.n	8005904 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005878:	4b27      	ldr	r3, [pc, #156]	; (8005918 <HAL_RCC_OscConfig+0x4dc>)
 800587a:	2200      	movs	r2, #0
 800587c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800587e:	f7fe f8c5 	bl	8003a0c <HAL_GetTick>
 8005882:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005884:	e008      	b.n	8005898 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005886:	f7fe f8c1 	bl	8003a0c <HAL_GetTick>
 800588a:	4602      	mov	r2, r0
 800588c:	693b      	ldr	r3, [r7, #16]
 800588e:	1ad3      	subs	r3, r2, r3
 8005890:	2b02      	cmp	r3, #2
 8005892:	d901      	bls.n	8005898 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005894:	2303      	movs	r3, #3
 8005896:	e036      	b.n	8005906 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005898:	4b1e      	ldr	r3, [pc, #120]	; (8005914 <HAL_RCC_OscConfig+0x4d8>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d1f0      	bne.n	8005886 <HAL_RCC_OscConfig+0x44a>
 80058a4:	e02e      	b.n	8005904 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	699b      	ldr	r3, [r3, #24]
 80058aa:	2b01      	cmp	r3, #1
 80058ac:	d101      	bne.n	80058b2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80058ae:	2301      	movs	r3, #1
 80058b0:	e029      	b.n	8005906 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80058b2:	4b18      	ldr	r3, [pc, #96]	; (8005914 <HAL_RCC_OscConfig+0x4d8>)
 80058b4:	685b      	ldr	r3, [r3, #4]
 80058b6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	69db      	ldr	r3, [r3, #28]
 80058c2:	429a      	cmp	r2, r3
 80058c4:	d11c      	bne.n	8005900 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058d0:	429a      	cmp	r2, r3
 80058d2:	d115      	bne.n	8005900 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80058d4:	68fa      	ldr	r2, [r7, #12]
 80058d6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80058da:	4013      	ands	r3, r2
 80058dc:	687a      	ldr	r2, [r7, #4]
 80058de:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d10d      	bne.n	8005900 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80058ee:	429a      	cmp	r2, r3
 80058f0:	d106      	bne.n	8005900 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80058fc:	429a      	cmp	r2, r3
 80058fe:	d001      	beq.n	8005904 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8005900:	2301      	movs	r3, #1
 8005902:	e000      	b.n	8005906 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8005904:	2300      	movs	r3, #0
}
 8005906:	4618      	mov	r0, r3
 8005908:	3718      	adds	r7, #24
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}
 800590e:	bf00      	nop
 8005910:	40007000 	.word	0x40007000
 8005914:	40023800 	.word	0x40023800
 8005918:	42470060 	.word	0x42470060

0800591c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b084      	sub	sp, #16
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
 8005924:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d101      	bne.n	8005930 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800592c:	2301      	movs	r3, #1
 800592e:	e0cc      	b.n	8005aca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005930:	4b68      	ldr	r3, [pc, #416]	; (8005ad4 <HAL_RCC_ClockConfig+0x1b8>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f003 030f 	and.w	r3, r3, #15
 8005938:	683a      	ldr	r2, [r7, #0]
 800593a:	429a      	cmp	r2, r3
 800593c:	d90c      	bls.n	8005958 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800593e:	4b65      	ldr	r3, [pc, #404]	; (8005ad4 <HAL_RCC_ClockConfig+0x1b8>)
 8005940:	683a      	ldr	r2, [r7, #0]
 8005942:	b2d2      	uxtb	r2, r2
 8005944:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005946:	4b63      	ldr	r3, [pc, #396]	; (8005ad4 <HAL_RCC_ClockConfig+0x1b8>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f003 030f 	and.w	r3, r3, #15
 800594e:	683a      	ldr	r2, [r7, #0]
 8005950:	429a      	cmp	r2, r3
 8005952:	d001      	beq.n	8005958 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005954:	2301      	movs	r3, #1
 8005956:	e0b8      	b.n	8005aca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f003 0302 	and.w	r3, r3, #2
 8005960:	2b00      	cmp	r3, #0
 8005962:	d020      	beq.n	80059a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f003 0304 	and.w	r3, r3, #4
 800596c:	2b00      	cmp	r3, #0
 800596e:	d005      	beq.n	800597c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005970:	4b59      	ldr	r3, [pc, #356]	; (8005ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8005972:	689b      	ldr	r3, [r3, #8]
 8005974:	4a58      	ldr	r2, [pc, #352]	; (8005ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8005976:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800597a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f003 0308 	and.w	r3, r3, #8
 8005984:	2b00      	cmp	r3, #0
 8005986:	d005      	beq.n	8005994 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005988:	4b53      	ldr	r3, [pc, #332]	; (8005ad8 <HAL_RCC_ClockConfig+0x1bc>)
 800598a:	689b      	ldr	r3, [r3, #8]
 800598c:	4a52      	ldr	r2, [pc, #328]	; (8005ad8 <HAL_RCC_ClockConfig+0x1bc>)
 800598e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005992:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005994:	4b50      	ldr	r3, [pc, #320]	; (8005ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8005996:	689b      	ldr	r3, [r3, #8]
 8005998:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	689b      	ldr	r3, [r3, #8]
 80059a0:	494d      	ldr	r1, [pc, #308]	; (8005ad8 <HAL_RCC_ClockConfig+0x1bc>)
 80059a2:	4313      	orrs	r3, r2
 80059a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f003 0301 	and.w	r3, r3, #1
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d044      	beq.n	8005a3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	685b      	ldr	r3, [r3, #4]
 80059b6:	2b01      	cmp	r3, #1
 80059b8:	d107      	bne.n	80059ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059ba:	4b47      	ldr	r3, [pc, #284]	; (8005ad8 <HAL_RCC_ClockConfig+0x1bc>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d119      	bne.n	80059fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80059c6:	2301      	movs	r3, #1
 80059c8:	e07f      	b.n	8005aca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	685b      	ldr	r3, [r3, #4]
 80059ce:	2b02      	cmp	r3, #2
 80059d0:	d003      	beq.n	80059da <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80059d6:	2b03      	cmp	r3, #3
 80059d8:	d107      	bne.n	80059ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80059da:	4b3f      	ldr	r3, [pc, #252]	; (8005ad8 <HAL_RCC_ClockConfig+0x1bc>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d109      	bne.n	80059fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80059e6:	2301      	movs	r3, #1
 80059e8:	e06f      	b.n	8005aca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059ea:	4b3b      	ldr	r3, [pc, #236]	; (8005ad8 <HAL_RCC_ClockConfig+0x1bc>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f003 0302 	and.w	r3, r3, #2
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d101      	bne.n	80059fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80059f6:	2301      	movs	r3, #1
 80059f8:	e067      	b.n	8005aca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80059fa:	4b37      	ldr	r3, [pc, #220]	; (8005ad8 <HAL_RCC_ClockConfig+0x1bc>)
 80059fc:	689b      	ldr	r3, [r3, #8]
 80059fe:	f023 0203 	bic.w	r2, r3, #3
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	4934      	ldr	r1, [pc, #208]	; (8005ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005a0c:	f7fd fffe 	bl	8003a0c <HAL_GetTick>
 8005a10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a12:	e00a      	b.n	8005a2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a14:	f7fd fffa 	bl	8003a0c <HAL_GetTick>
 8005a18:	4602      	mov	r2, r0
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	1ad3      	subs	r3, r2, r3
 8005a1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d901      	bls.n	8005a2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005a26:	2303      	movs	r3, #3
 8005a28:	e04f      	b.n	8005aca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a2a:	4b2b      	ldr	r3, [pc, #172]	; (8005ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8005a2c:	689b      	ldr	r3, [r3, #8]
 8005a2e:	f003 020c 	and.w	r2, r3, #12
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	685b      	ldr	r3, [r3, #4]
 8005a36:	009b      	lsls	r3, r3, #2
 8005a38:	429a      	cmp	r2, r3
 8005a3a:	d1eb      	bne.n	8005a14 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005a3c:	4b25      	ldr	r3, [pc, #148]	; (8005ad4 <HAL_RCC_ClockConfig+0x1b8>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f003 030f 	and.w	r3, r3, #15
 8005a44:	683a      	ldr	r2, [r7, #0]
 8005a46:	429a      	cmp	r2, r3
 8005a48:	d20c      	bcs.n	8005a64 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a4a:	4b22      	ldr	r3, [pc, #136]	; (8005ad4 <HAL_RCC_ClockConfig+0x1b8>)
 8005a4c:	683a      	ldr	r2, [r7, #0]
 8005a4e:	b2d2      	uxtb	r2, r2
 8005a50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a52:	4b20      	ldr	r3, [pc, #128]	; (8005ad4 <HAL_RCC_ClockConfig+0x1b8>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f003 030f 	and.w	r3, r3, #15
 8005a5a:	683a      	ldr	r2, [r7, #0]
 8005a5c:	429a      	cmp	r2, r3
 8005a5e:	d001      	beq.n	8005a64 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005a60:	2301      	movs	r3, #1
 8005a62:	e032      	b.n	8005aca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f003 0304 	and.w	r3, r3, #4
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d008      	beq.n	8005a82 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005a70:	4b19      	ldr	r3, [pc, #100]	; (8005ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8005a72:	689b      	ldr	r3, [r3, #8]
 8005a74:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	68db      	ldr	r3, [r3, #12]
 8005a7c:	4916      	ldr	r1, [pc, #88]	; (8005ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f003 0308 	and.w	r3, r3, #8
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d009      	beq.n	8005aa2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005a8e:	4b12      	ldr	r3, [pc, #72]	; (8005ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8005a90:	689b      	ldr	r3, [r3, #8]
 8005a92:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	691b      	ldr	r3, [r3, #16]
 8005a9a:	00db      	lsls	r3, r3, #3
 8005a9c:	490e      	ldr	r1, [pc, #56]	; (8005ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005aa2:	f000 f821 	bl	8005ae8 <HAL_RCC_GetSysClockFreq>
 8005aa6:	4602      	mov	r2, r0
 8005aa8:	4b0b      	ldr	r3, [pc, #44]	; (8005ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8005aaa:	689b      	ldr	r3, [r3, #8]
 8005aac:	091b      	lsrs	r3, r3, #4
 8005aae:	f003 030f 	and.w	r3, r3, #15
 8005ab2:	490a      	ldr	r1, [pc, #40]	; (8005adc <HAL_RCC_ClockConfig+0x1c0>)
 8005ab4:	5ccb      	ldrb	r3, [r1, r3]
 8005ab6:	fa22 f303 	lsr.w	r3, r2, r3
 8005aba:	4a09      	ldr	r2, [pc, #36]	; (8005ae0 <HAL_RCC_ClockConfig+0x1c4>)
 8005abc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005abe:	4b09      	ldr	r3, [pc, #36]	; (8005ae4 <HAL_RCC_ClockConfig+0x1c8>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	f7fc f83c 	bl	8001b40 <HAL_InitTick>

  return HAL_OK;
 8005ac8:	2300      	movs	r3, #0
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	3710      	adds	r7, #16
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd80      	pop	{r7, pc}
 8005ad2:	bf00      	nop
 8005ad4:	40023c00 	.word	0x40023c00
 8005ad8:	40023800 	.word	0x40023800
 8005adc:	0800c69c 	.word	0x0800c69c
 8005ae0:	20000000 	.word	0x20000000
 8005ae4:	2000000c 	.word	0x2000000c

08005ae8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ae8:	b5b0      	push	{r4, r5, r7, lr}
 8005aea:	b084      	sub	sp, #16
 8005aec:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005aee:	2100      	movs	r1, #0
 8005af0:	6079      	str	r1, [r7, #4]
 8005af2:	2100      	movs	r1, #0
 8005af4:	60f9      	str	r1, [r7, #12]
 8005af6:	2100      	movs	r1, #0
 8005af8:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005afa:	2100      	movs	r1, #0
 8005afc:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005afe:	4952      	ldr	r1, [pc, #328]	; (8005c48 <HAL_RCC_GetSysClockFreq+0x160>)
 8005b00:	6889      	ldr	r1, [r1, #8]
 8005b02:	f001 010c 	and.w	r1, r1, #12
 8005b06:	2908      	cmp	r1, #8
 8005b08:	d00d      	beq.n	8005b26 <HAL_RCC_GetSysClockFreq+0x3e>
 8005b0a:	2908      	cmp	r1, #8
 8005b0c:	f200 8094 	bhi.w	8005c38 <HAL_RCC_GetSysClockFreq+0x150>
 8005b10:	2900      	cmp	r1, #0
 8005b12:	d002      	beq.n	8005b1a <HAL_RCC_GetSysClockFreq+0x32>
 8005b14:	2904      	cmp	r1, #4
 8005b16:	d003      	beq.n	8005b20 <HAL_RCC_GetSysClockFreq+0x38>
 8005b18:	e08e      	b.n	8005c38 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005b1a:	4b4c      	ldr	r3, [pc, #304]	; (8005c4c <HAL_RCC_GetSysClockFreq+0x164>)
 8005b1c:	60bb      	str	r3, [r7, #8]
       break;
 8005b1e:	e08e      	b.n	8005c3e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005b20:	4b4b      	ldr	r3, [pc, #300]	; (8005c50 <HAL_RCC_GetSysClockFreq+0x168>)
 8005b22:	60bb      	str	r3, [r7, #8]
      break;
 8005b24:	e08b      	b.n	8005c3e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005b26:	4948      	ldr	r1, [pc, #288]	; (8005c48 <HAL_RCC_GetSysClockFreq+0x160>)
 8005b28:	6849      	ldr	r1, [r1, #4]
 8005b2a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8005b2e:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005b30:	4945      	ldr	r1, [pc, #276]	; (8005c48 <HAL_RCC_GetSysClockFreq+0x160>)
 8005b32:	6849      	ldr	r1, [r1, #4]
 8005b34:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8005b38:	2900      	cmp	r1, #0
 8005b3a:	d024      	beq.n	8005b86 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b3c:	4942      	ldr	r1, [pc, #264]	; (8005c48 <HAL_RCC_GetSysClockFreq+0x160>)
 8005b3e:	6849      	ldr	r1, [r1, #4]
 8005b40:	0989      	lsrs	r1, r1, #6
 8005b42:	4608      	mov	r0, r1
 8005b44:	f04f 0100 	mov.w	r1, #0
 8005b48:	f240 14ff 	movw	r4, #511	; 0x1ff
 8005b4c:	f04f 0500 	mov.w	r5, #0
 8005b50:	ea00 0204 	and.w	r2, r0, r4
 8005b54:	ea01 0305 	and.w	r3, r1, r5
 8005b58:	493d      	ldr	r1, [pc, #244]	; (8005c50 <HAL_RCC_GetSysClockFreq+0x168>)
 8005b5a:	fb01 f003 	mul.w	r0, r1, r3
 8005b5e:	2100      	movs	r1, #0
 8005b60:	fb01 f102 	mul.w	r1, r1, r2
 8005b64:	1844      	adds	r4, r0, r1
 8005b66:	493a      	ldr	r1, [pc, #232]	; (8005c50 <HAL_RCC_GetSysClockFreq+0x168>)
 8005b68:	fba2 0101 	umull	r0, r1, r2, r1
 8005b6c:	1863      	adds	r3, r4, r1
 8005b6e:	4619      	mov	r1, r3
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	461a      	mov	r2, r3
 8005b74:	f04f 0300 	mov.w	r3, #0
 8005b78:	f7fb f858 	bl	8000c2c <__aeabi_uldivmod>
 8005b7c:	4602      	mov	r2, r0
 8005b7e:	460b      	mov	r3, r1
 8005b80:	4613      	mov	r3, r2
 8005b82:	60fb      	str	r3, [r7, #12]
 8005b84:	e04a      	b.n	8005c1c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b86:	4b30      	ldr	r3, [pc, #192]	; (8005c48 <HAL_RCC_GetSysClockFreq+0x160>)
 8005b88:	685b      	ldr	r3, [r3, #4]
 8005b8a:	099b      	lsrs	r3, r3, #6
 8005b8c:	461a      	mov	r2, r3
 8005b8e:	f04f 0300 	mov.w	r3, #0
 8005b92:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005b96:	f04f 0100 	mov.w	r1, #0
 8005b9a:	ea02 0400 	and.w	r4, r2, r0
 8005b9e:	ea03 0501 	and.w	r5, r3, r1
 8005ba2:	4620      	mov	r0, r4
 8005ba4:	4629      	mov	r1, r5
 8005ba6:	f04f 0200 	mov.w	r2, #0
 8005baa:	f04f 0300 	mov.w	r3, #0
 8005bae:	014b      	lsls	r3, r1, #5
 8005bb0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005bb4:	0142      	lsls	r2, r0, #5
 8005bb6:	4610      	mov	r0, r2
 8005bb8:	4619      	mov	r1, r3
 8005bba:	1b00      	subs	r0, r0, r4
 8005bbc:	eb61 0105 	sbc.w	r1, r1, r5
 8005bc0:	f04f 0200 	mov.w	r2, #0
 8005bc4:	f04f 0300 	mov.w	r3, #0
 8005bc8:	018b      	lsls	r3, r1, #6
 8005bca:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005bce:	0182      	lsls	r2, r0, #6
 8005bd0:	1a12      	subs	r2, r2, r0
 8005bd2:	eb63 0301 	sbc.w	r3, r3, r1
 8005bd6:	f04f 0000 	mov.w	r0, #0
 8005bda:	f04f 0100 	mov.w	r1, #0
 8005bde:	00d9      	lsls	r1, r3, #3
 8005be0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005be4:	00d0      	lsls	r0, r2, #3
 8005be6:	4602      	mov	r2, r0
 8005be8:	460b      	mov	r3, r1
 8005bea:	1912      	adds	r2, r2, r4
 8005bec:	eb45 0303 	adc.w	r3, r5, r3
 8005bf0:	f04f 0000 	mov.w	r0, #0
 8005bf4:	f04f 0100 	mov.w	r1, #0
 8005bf8:	0299      	lsls	r1, r3, #10
 8005bfa:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005bfe:	0290      	lsls	r0, r2, #10
 8005c00:	4602      	mov	r2, r0
 8005c02:	460b      	mov	r3, r1
 8005c04:	4610      	mov	r0, r2
 8005c06:	4619      	mov	r1, r3
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	461a      	mov	r2, r3
 8005c0c:	f04f 0300 	mov.w	r3, #0
 8005c10:	f7fb f80c 	bl	8000c2c <__aeabi_uldivmod>
 8005c14:	4602      	mov	r2, r0
 8005c16:	460b      	mov	r3, r1
 8005c18:	4613      	mov	r3, r2
 8005c1a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005c1c:	4b0a      	ldr	r3, [pc, #40]	; (8005c48 <HAL_RCC_GetSysClockFreq+0x160>)
 8005c1e:	685b      	ldr	r3, [r3, #4]
 8005c20:	0c1b      	lsrs	r3, r3, #16
 8005c22:	f003 0303 	and.w	r3, r3, #3
 8005c26:	3301      	adds	r3, #1
 8005c28:	005b      	lsls	r3, r3, #1
 8005c2a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005c2c:	68fa      	ldr	r2, [r7, #12]
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c34:	60bb      	str	r3, [r7, #8]
      break;
 8005c36:	e002      	b.n	8005c3e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005c38:	4b04      	ldr	r3, [pc, #16]	; (8005c4c <HAL_RCC_GetSysClockFreq+0x164>)
 8005c3a:	60bb      	str	r3, [r7, #8]
      break;
 8005c3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005c3e:	68bb      	ldr	r3, [r7, #8]
}
 8005c40:	4618      	mov	r0, r3
 8005c42:	3710      	adds	r7, #16
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bdb0      	pop	{r4, r5, r7, pc}
 8005c48:	40023800 	.word	0x40023800
 8005c4c:	00f42400 	.word	0x00f42400
 8005c50:	00b71b00 	.word	0x00b71b00

08005c54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c54:	b480      	push	{r7}
 8005c56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005c58:	4b03      	ldr	r3, [pc, #12]	; (8005c68 <HAL_RCC_GetHCLKFreq+0x14>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
}
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c64:	4770      	bx	lr
 8005c66:	bf00      	nop
 8005c68:	20000000 	.word	0x20000000

08005c6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005c70:	f7ff fff0 	bl	8005c54 <HAL_RCC_GetHCLKFreq>
 8005c74:	4602      	mov	r2, r0
 8005c76:	4b05      	ldr	r3, [pc, #20]	; (8005c8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005c78:	689b      	ldr	r3, [r3, #8]
 8005c7a:	0a9b      	lsrs	r3, r3, #10
 8005c7c:	f003 0307 	and.w	r3, r3, #7
 8005c80:	4903      	ldr	r1, [pc, #12]	; (8005c90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005c82:	5ccb      	ldrb	r3, [r1, r3]
 8005c84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c88:	4618      	mov	r0, r3
 8005c8a:	bd80      	pop	{r7, pc}
 8005c8c:	40023800 	.word	0x40023800
 8005c90:	0800c6ac 	.word	0x0800c6ac

08005c94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005c98:	f7ff ffdc 	bl	8005c54 <HAL_RCC_GetHCLKFreq>
 8005c9c:	4602      	mov	r2, r0
 8005c9e:	4b05      	ldr	r3, [pc, #20]	; (8005cb4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005ca0:	689b      	ldr	r3, [r3, #8]
 8005ca2:	0b5b      	lsrs	r3, r3, #13
 8005ca4:	f003 0307 	and.w	r3, r3, #7
 8005ca8:	4903      	ldr	r1, [pc, #12]	; (8005cb8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005caa:	5ccb      	ldrb	r3, [r1, r3]
 8005cac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	bd80      	pop	{r7, pc}
 8005cb4:	40023800 	.word	0x40023800
 8005cb8:	0800c6ac 	.word	0x0800c6ac

08005cbc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	b083      	sub	sp, #12
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
 8005cc4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	220f      	movs	r2, #15
 8005cca:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005ccc:	4b12      	ldr	r3, [pc, #72]	; (8005d18 <HAL_RCC_GetClockConfig+0x5c>)
 8005cce:	689b      	ldr	r3, [r3, #8]
 8005cd0:	f003 0203 	and.w	r2, r3, #3
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005cd8:	4b0f      	ldr	r3, [pc, #60]	; (8005d18 <HAL_RCC_GetClockConfig+0x5c>)
 8005cda:	689b      	ldr	r3, [r3, #8]
 8005cdc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005ce4:	4b0c      	ldr	r3, [pc, #48]	; (8005d18 <HAL_RCC_GetClockConfig+0x5c>)
 8005ce6:	689b      	ldr	r3, [r3, #8]
 8005ce8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005cf0:	4b09      	ldr	r3, [pc, #36]	; (8005d18 <HAL_RCC_GetClockConfig+0x5c>)
 8005cf2:	689b      	ldr	r3, [r3, #8]
 8005cf4:	08db      	lsrs	r3, r3, #3
 8005cf6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005cfe:	4b07      	ldr	r3, [pc, #28]	; (8005d1c <HAL_RCC_GetClockConfig+0x60>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f003 020f 	and.w	r2, r3, #15
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	601a      	str	r2, [r3, #0]
}
 8005d0a:	bf00      	nop
 8005d0c:	370c      	adds	r7, #12
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d14:	4770      	bx	lr
 8005d16:	bf00      	nop
 8005d18:	40023800 	.word	0x40023800
 8005d1c:	40023c00 	.word	0x40023c00

08005d20 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b082      	sub	sp, #8
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d101      	bne.n	8005d32 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005d2e:	2301      	movs	r3, #1
 8005d30:	e056      	b.n	8005de0 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2200      	movs	r2, #0
 8005d36:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005d3e:	b2db      	uxtb	r3, r3
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d106      	bne.n	8005d52 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2200      	movs	r2, #0
 8005d48:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005d4c:	6878      	ldr	r0, [r7, #4]
 8005d4e:	f7fb fdf5 	bl	800193c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2202      	movs	r2, #2
 8005d56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	681a      	ldr	r2, [r3, #0]
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d68:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	685a      	ldr	r2, [r3, #4]
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	689b      	ldr	r3, [r3, #8]
 8005d72:	431a      	orrs	r2, r3
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	68db      	ldr	r3, [r3, #12]
 8005d78:	431a      	orrs	r2, r3
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	691b      	ldr	r3, [r3, #16]
 8005d7e:	431a      	orrs	r2, r3
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	695b      	ldr	r3, [r3, #20]
 8005d84:	431a      	orrs	r2, r3
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	699b      	ldr	r3, [r3, #24]
 8005d8a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d8e:	431a      	orrs	r2, r3
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	69db      	ldr	r3, [r3, #28]
 8005d94:	431a      	orrs	r2, r3
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6a1b      	ldr	r3, [r3, #32]
 8005d9a:	ea42 0103 	orr.w	r1, r2, r3
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	430a      	orrs	r2, r1
 8005da8:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	699b      	ldr	r3, [r3, #24]
 8005dae:	0c1b      	lsrs	r3, r3, #16
 8005db0:	f003 0104 	and.w	r1, r3, #4
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	430a      	orrs	r2, r1
 8005dbe:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	69da      	ldr	r2, [r3, #28]
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005dce:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2201      	movs	r2, #1
 8005dda:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005dde:	2300      	movs	r3, #0
}
 8005de0:	4618      	mov	r0, r3
 8005de2:	3708      	adds	r7, #8
 8005de4:	46bd      	mov	sp, r7
 8005de6:	bd80      	pop	{r7, pc}

08005de8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b082      	sub	sp, #8
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d101      	bne.n	8005dfa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005df6:	2301      	movs	r3, #1
 8005df8:	e01d      	b.n	8005e36 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e00:	b2db      	uxtb	r3, r3
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d106      	bne.n	8005e14 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005e0e:	6878      	ldr	r0, [r7, #4]
 8005e10:	f7fc f86e 	bl	8001ef0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2202      	movs	r2, #2
 8005e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681a      	ldr	r2, [r3, #0]
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	3304      	adds	r3, #4
 8005e24:	4619      	mov	r1, r3
 8005e26:	4610      	mov	r0, r2
 8005e28:	f000 fb50 	bl	80064cc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2201      	movs	r2, #1
 8005e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e34:	2300      	movs	r3, #0
}
 8005e36:	4618      	mov	r0, r3
 8005e38:	3708      	adds	r7, #8
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	bd80      	pop	{r7, pc}

08005e3e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005e3e:	b480      	push	{r7}
 8005e40:	b085      	sub	sp, #20
 8005e42:	af00      	add	r7, sp, #0
 8005e44:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	68da      	ldr	r2, [r3, #12]
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f042 0201 	orr.w	r2, r2, #1
 8005e54:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	689b      	ldr	r3, [r3, #8]
 8005e5c:	f003 0307 	and.w	r3, r3, #7
 8005e60:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	2b06      	cmp	r3, #6
 8005e66:	d007      	beq.n	8005e78 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	681a      	ldr	r2, [r3, #0]
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f042 0201 	orr.w	r2, r2, #1
 8005e76:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005e78:	2300      	movs	r3, #0
}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	3714      	adds	r7, #20
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e84:	4770      	bx	lr

08005e86 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005e86:	b580      	push	{r7, lr}
 8005e88:	b082      	sub	sp, #8
 8005e8a:	af00      	add	r7, sp, #0
 8005e8c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d101      	bne.n	8005e98 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005e94:	2301      	movs	r3, #1
 8005e96:	e01d      	b.n	8005ed4 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e9e:	b2db      	uxtb	r3, r3
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d106      	bne.n	8005eb2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005eac:	6878      	ldr	r0, [r7, #4]
 8005eae:	f7fb fffd 	bl	8001eac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2202      	movs	r2, #2
 8005eb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681a      	ldr	r2, [r3, #0]
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	3304      	adds	r3, #4
 8005ec2:	4619      	mov	r1, r3
 8005ec4:	4610      	mov	r0, r2
 8005ec6:	f000 fb01 	bl	80064cc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2201      	movs	r2, #1
 8005ece:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005ed2:	2300      	movs	r3, #0
}
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	3708      	adds	r7, #8
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	bd80      	pop	{r7, pc}

08005edc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b084      	sub	sp, #16
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
 8005ee4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	2201      	movs	r2, #1
 8005eec:	6839      	ldr	r1, [r7, #0]
 8005eee:	4618      	mov	r0, r3
 8005ef0:	f000 fdd6 	bl	8006aa0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4a15      	ldr	r2, [pc, #84]	; (8005f50 <HAL_TIM_PWM_Start+0x74>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d004      	beq.n	8005f08 <HAL_TIM_PWM_Start+0x2c>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4a14      	ldr	r2, [pc, #80]	; (8005f54 <HAL_TIM_PWM_Start+0x78>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d101      	bne.n	8005f0c <HAL_TIM_PWM_Start+0x30>
 8005f08:	2301      	movs	r3, #1
 8005f0a:	e000      	b.n	8005f0e <HAL_TIM_PWM_Start+0x32>
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d007      	beq.n	8005f22 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005f20:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	689b      	ldr	r3, [r3, #8]
 8005f28:	f003 0307 	and.w	r3, r3, #7
 8005f2c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	2b06      	cmp	r3, #6
 8005f32:	d007      	beq.n	8005f44 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	681a      	ldr	r2, [r3, #0]
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f042 0201 	orr.w	r2, r2, #1
 8005f42:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005f44:	2300      	movs	r3, #0
}
 8005f46:	4618      	mov	r0, r3
 8005f48:	3710      	adds	r7, #16
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bd80      	pop	{r7, pc}
 8005f4e:	bf00      	nop
 8005f50:	40010000 	.word	0x40010000
 8005f54:	40010400 	.word	0x40010400

08005f58 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b082      	sub	sp, #8
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	691b      	ldr	r3, [r3, #16]
 8005f66:	f003 0302 	and.w	r3, r3, #2
 8005f6a:	2b02      	cmp	r3, #2
 8005f6c:	d122      	bne.n	8005fb4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	68db      	ldr	r3, [r3, #12]
 8005f74:	f003 0302 	and.w	r3, r3, #2
 8005f78:	2b02      	cmp	r3, #2
 8005f7a:	d11b      	bne.n	8005fb4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f06f 0202 	mvn.w	r2, #2
 8005f84:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2201      	movs	r2, #1
 8005f8a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	699b      	ldr	r3, [r3, #24]
 8005f92:	f003 0303 	and.w	r3, r3, #3
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d003      	beq.n	8005fa2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	f000 fa78 	bl	8006490 <HAL_TIM_IC_CaptureCallback>
 8005fa0:	e005      	b.n	8005fae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f000 fa6a 	bl	800647c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fa8:	6878      	ldr	r0, [r7, #4]
 8005faa:	f000 fa7b 	bl	80064a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	691b      	ldr	r3, [r3, #16]
 8005fba:	f003 0304 	and.w	r3, r3, #4
 8005fbe:	2b04      	cmp	r3, #4
 8005fc0:	d122      	bne.n	8006008 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	68db      	ldr	r3, [r3, #12]
 8005fc8:	f003 0304 	and.w	r3, r3, #4
 8005fcc:	2b04      	cmp	r3, #4
 8005fce:	d11b      	bne.n	8006008 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f06f 0204 	mvn.w	r2, #4
 8005fd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2202      	movs	r2, #2
 8005fde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	699b      	ldr	r3, [r3, #24]
 8005fe6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d003      	beq.n	8005ff6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	f000 fa4e 	bl	8006490 <HAL_TIM_IC_CaptureCallback>
 8005ff4:	e005      	b.n	8006002 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ff6:	6878      	ldr	r0, [r7, #4]
 8005ff8:	f000 fa40 	bl	800647c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ffc:	6878      	ldr	r0, [r7, #4]
 8005ffe:	f000 fa51 	bl	80064a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2200      	movs	r2, #0
 8006006:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	691b      	ldr	r3, [r3, #16]
 800600e:	f003 0308 	and.w	r3, r3, #8
 8006012:	2b08      	cmp	r3, #8
 8006014:	d122      	bne.n	800605c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	68db      	ldr	r3, [r3, #12]
 800601c:	f003 0308 	and.w	r3, r3, #8
 8006020:	2b08      	cmp	r3, #8
 8006022:	d11b      	bne.n	800605c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f06f 0208 	mvn.w	r2, #8
 800602c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2204      	movs	r2, #4
 8006032:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	69db      	ldr	r3, [r3, #28]
 800603a:	f003 0303 	and.w	r3, r3, #3
 800603e:	2b00      	cmp	r3, #0
 8006040:	d003      	beq.n	800604a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006042:	6878      	ldr	r0, [r7, #4]
 8006044:	f000 fa24 	bl	8006490 <HAL_TIM_IC_CaptureCallback>
 8006048:	e005      	b.n	8006056 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	f000 fa16 	bl	800647c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006050:	6878      	ldr	r0, [r7, #4]
 8006052:	f000 fa27 	bl	80064a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2200      	movs	r2, #0
 800605a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	691b      	ldr	r3, [r3, #16]
 8006062:	f003 0310 	and.w	r3, r3, #16
 8006066:	2b10      	cmp	r3, #16
 8006068:	d122      	bne.n	80060b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	68db      	ldr	r3, [r3, #12]
 8006070:	f003 0310 	and.w	r3, r3, #16
 8006074:	2b10      	cmp	r3, #16
 8006076:	d11b      	bne.n	80060b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f06f 0210 	mvn.w	r2, #16
 8006080:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2208      	movs	r2, #8
 8006086:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	69db      	ldr	r3, [r3, #28]
 800608e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006092:	2b00      	cmp	r3, #0
 8006094:	d003      	beq.n	800609e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006096:	6878      	ldr	r0, [r7, #4]
 8006098:	f000 f9fa 	bl	8006490 <HAL_TIM_IC_CaptureCallback>
 800609c:	e005      	b.n	80060aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	f000 f9ec 	bl	800647c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060a4:	6878      	ldr	r0, [r7, #4]
 80060a6:	f000 f9fd 	bl	80064a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2200      	movs	r2, #0
 80060ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	691b      	ldr	r3, [r3, #16]
 80060b6:	f003 0301 	and.w	r3, r3, #1
 80060ba:	2b01      	cmp	r3, #1
 80060bc:	d10e      	bne.n	80060dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	68db      	ldr	r3, [r3, #12]
 80060c4:	f003 0301 	and.w	r3, r3, #1
 80060c8:	2b01      	cmp	r3, #1
 80060ca:	d107      	bne.n	80060dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f06f 0201 	mvn.w	r2, #1
 80060d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	f7fb fbe2 	bl	80018a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	691b      	ldr	r3, [r3, #16]
 80060e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060e6:	2b80      	cmp	r3, #128	; 0x80
 80060e8:	d10e      	bne.n	8006108 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	68db      	ldr	r3, [r3, #12]
 80060f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060f4:	2b80      	cmp	r3, #128	; 0x80
 80060f6:	d107      	bne.n	8006108 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006100:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006102:	6878      	ldr	r0, [r7, #4]
 8006104:	f000 fd78 	bl	8006bf8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	691b      	ldr	r3, [r3, #16]
 800610e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006112:	2b40      	cmp	r3, #64	; 0x40
 8006114:	d10e      	bne.n	8006134 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	68db      	ldr	r3, [r3, #12]
 800611c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006120:	2b40      	cmp	r3, #64	; 0x40
 8006122:	d107      	bne.n	8006134 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800612c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800612e:	6878      	ldr	r0, [r7, #4]
 8006130:	f000 f9c2 	bl	80064b8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	691b      	ldr	r3, [r3, #16]
 800613a:	f003 0320 	and.w	r3, r3, #32
 800613e:	2b20      	cmp	r3, #32
 8006140:	d10e      	bne.n	8006160 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	68db      	ldr	r3, [r3, #12]
 8006148:	f003 0320 	and.w	r3, r3, #32
 800614c:	2b20      	cmp	r3, #32
 800614e:	d107      	bne.n	8006160 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f06f 0220 	mvn.w	r2, #32
 8006158:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800615a:	6878      	ldr	r0, [r7, #4]
 800615c:	f000 fd42 	bl	8006be4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006160:	bf00      	nop
 8006162:	3708      	adds	r7, #8
 8006164:	46bd      	mov	sp, r7
 8006166:	bd80      	pop	{r7, pc}

08006168 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b084      	sub	sp, #16
 800616c:	af00      	add	r7, sp, #0
 800616e:	60f8      	str	r0, [r7, #12]
 8006170:	60b9      	str	r1, [r7, #8]
 8006172:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800617a:	2b01      	cmp	r3, #1
 800617c:	d101      	bne.n	8006182 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800617e:	2302      	movs	r3, #2
 8006180:	e0b4      	b.n	80062ec <HAL_TIM_PWM_ConfigChannel+0x184>
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	2201      	movs	r2, #1
 8006186:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	2202      	movs	r2, #2
 800618e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2b0c      	cmp	r3, #12
 8006196:	f200 809f 	bhi.w	80062d8 <HAL_TIM_PWM_ConfigChannel+0x170>
 800619a:	a201      	add	r2, pc, #4	; (adr r2, 80061a0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800619c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061a0:	080061d5 	.word	0x080061d5
 80061a4:	080062d9 	.word	0x080062d9
 80061a8:	080062d9 	.word	0x080062d9
 80061ac:	080062d9 	.word	0x080062d9
 80061b0:	08006215 	.word	0x08006215
 80061b4:	080062d9 	.word	0x080062d9
 80061b8:	080062d9 	.word	0x080062d9
 80061bc:	080062d9 	.word	0x080062d9
 80061c0:	08006257 	.word	0x08006257
 80061c4:	080062d9 	.word	0x080062d9
 80061c8:	080062d9 	.word	0x080062d9
 80061cc:	080062d9 	.word	0x080062d9
 80061d0:	08006297 	.word	0x08006297
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	68b9      	ldr	r1, [r7, #8]
 80061da:	4618      	mov	r0, r3
 80061dc:	f000 fa16 	bl	800660c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	699a      	ldr	r2, [r3, #24]
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f042 0208 	orr.w	r2, r2, #8
 80061ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	699a      	ldr	r2, [r3, #24]
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f022 0204 	bic.w	r2, r2, #4
 80061fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	6999      	ldr	r1, [r3, #24]
 8006206:	68bb      	ldr	r3, [r7, #8]
 8006208:	691a      	ldr	r2, [r3, #16]
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	430a      	orrs	r2, r1
 8006210:	619a      	str	r2, [r3, #24]
      break;
 8006212:	e062      	b.n	80062da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	68b9      	ldr	r1, [r7, #8]
 800621a:	4618      	mov	r0, r3
 800621c:	f000 fa66 	bl	80066ec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	699a      	ldr	r2, [r3, #24]
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800622e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	699a      	ldr	r2, [r3, #24]
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800623e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	6999      	ldr	r1, [r3, #24]
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	691b      	ldr	r3, [r3, #16]
 800624a:	021a      	lsls	r2, r3, #8
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	430a      	orrs	r2, r1
 8006252:	619a      	str	r2, [r3, #24]
      break;
 8006254:	e041      	b.n	80062da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	68b9      	ldr	r1, [r7, #8]
 800625c:	4618      	mov	r0, r3
 800625e:	f000 fabb 	bl	80067d8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	69da      	ldr	r2, [r3, #28]
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f042 0208 	orr.w	r2, r2, #8
 8006270:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	69da      	ldr	r2, [r3, #28]
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f022 0204 	bic.w	r2, r2, #4
 8006280:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	69d9      	ldr	r1, [r3, #28]
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	691a      	ldr	r2, [r3, #16]
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	430a      	orrs	r2, r1
 8006292:	61da      	str	r2, [r3, #28]
      break;
 8006294:	e021      	b.n	80062da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	68b9      	ldr	r1, [r7, #8]
 800629c:	4618      	mov	r0, r3
 800629e:	f000 fb0f 	bl	80068c0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	69da      	ldr	r2, [r3, #28]
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80062b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	69da      	ldr	r2, [r3, #28]
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	69d9      	ldr	r1, [r3, #28]
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	691b      	ldr	r3, [r3, #16]
 80062cc:	021a      	lsls	r2, r3, #8
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	430a      	orrs	r2, r1
 80062d4:	61da      	str	r2, [r3, #28]
      break;
 80062d6:	e000      	b.n	80062da <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80062d8:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	2201      	movs	r2, #1
 80062de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	2200      	movs	r2, #0
 80062e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80062ea:	2300      	movs	r3, #0
}
 80062ec:	4618      	mov	r0, r3
 80062ee:	3710      	adds	r7, #16
 80062f0:	46bd      	mov	sp, r7
 80062f2:	bd80      	pop	{r7, pc}

080062f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b084      	sub	sp, #16
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
 80062fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006304:	2b01      	cmp	r3, #1
 8006306:	d101      	bne.n	800630c <HAL_TIM_ConfigClockSource+0x18>
 8006308:	2302      	movs	r3, #2
 800630a:	e0b3      	b.n	8006474 <HAL_TIM_ConfigClockSource+0x180>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2201      	movs	r2, #1
 8006310:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2202      	movs	r2, #2
 8006318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	689b      	ldr	r3, [r3, #8]
 8006322:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800632a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006332:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	68fa      	ldr	r2, [r7, #12]
 800633a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006344:	d03e      	beq.n	80063c4 <HAL_TIM_ConfigClockSource+0xd0>
 8006346:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800634a:	f200 8087 	bhi.w	800645c <HAL_TIM_ConfigClockSource+0x168>
 800634e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006352:	f000 8085 	beq.w	8006460 <HAL_TIM_ConfigClockSource+0x16c>
 8006356:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800635a:	d87f      	bhi.n	800645c <HAL_TIM_ConfigClockSource+0x168>
 800635c:	2b70      	cmp	r3, #112	; 0x70
 800635e:	d01a      	beq.n	8006396 <HAL_TIM_ConfigClockSource+0xa2>
 8006360:	2b70      	cmp	r3, #112	; 0x70
 8006362:	d87b      	bhi.n	800645c <HAL_TIM_ConfigClockSource+0x168>
 8006364:	2b60      	cmp	r3, #96	; 0x60
 8006366:	d050      	beq.n	800640a <HAL_TIM_ConfigClockSource+0x116>
 8006368:	2b60      	cmp	r3, #96	; 0x60
 800636a:	d877      	bhi.n	800645c <HAL_TIM_ConfigClockSource+0x168>
 800636c:	2b50      	cmp	r3, #80	; 0x50
 800636e:	d03c      	beq.n	80063ea <HAL_TIM_ConfigClockSource+0xf6>
 8006370:	2b50      	cmp	r3, #80	; 0x50
 8006372:	d873      	bhi.n	800645c <HAL_TIM_ConfigClockSource+0x168>
 8006374:	2b40      	cmp	r3, #64	; 0x40
 8006376:	d058      	beq.n	800642a <HAL_TIM_ConfigClockSource+0x136>
 8006378:	2b40      	cmp	r3, #64	; 0x40
 800637a:	d86f      	bhi.n	800645c <HAL_TIM_ConfigClockSource+0x168>
 800637c:	2b30      	cmp	r3, #48	; 0x30
 800637e:	d064      	beq.n	800644a <HAL_TIM_ConfigClockSource+0x156>
 8006380:	2b30      	cmp	r3, #48	; 0x30
 8006382:	d86b      	bhi.n	800645c <HAL_TIM_ConfigClockSource+0x168>
 8006384:	2b20      	cmp	r3, #32
 8006386:	d060      	beq.n	800644a <HAL_TIM_ConfigClockSource+0x156>
 8006388:	2b20      	cmp	r3, #32
 800638a:	d867      	bhi.n	800645c <HAL_TIM_ConfigClockSource+0x168>
 800638c:	2b00      	cmp	r3, #0
 800638e:	d05c      	beq.n	800644a <HAL_TIM_ConfigClockSource+0x156>
 8006390:	2b10      	cmp	r3, #16
 8006392:	d05a      	beq.n	800644a <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8006394:	e062      	b.n	800645c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6818      	ldr	r0, [r3, #0]
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	6899      	ldr	r1, [r3, #8]
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	685a      	ldr	r2, [r3, #4]
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	68db      	ldr	r3, [r3, #12]
 80063a6:	f000 fb5b 	bl	8006a60 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	689b      	ldr	r3, [r3, #8]
 80063b0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80063b8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	68fa      	ldr	r2, [r7, #12]
 80063c0:	609a      	str	r2, [r3, #8]
      break;
 80063c2:	e04e      	b.n	8006462 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6818      	ldr	r0, [r3, #0]
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	6899      	ldr	r1, [r3, #8]
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	685a      	ldr	r2, [r3, #4]
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	68db      	ldr	r3, [r3, #12]
 80063d4:	f000 fb44 	bl	8006a60 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	689a      	ldr	r2, [r3, #8]
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80063e6:	609a      	str	r2, [r3, #8]
      break;
 80063e8:	e03b      	b.n	8006462 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6818      	ldr	r0, [r3, #0]
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	6859      	ldr	r1, [r3, #4]
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	68db      	ldr	r3, [r3, #12]
 80063f6:	461a      	mov	r2, r3
 80063f8:	f000 fab8 	bl	800696c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	2150      	movs	r1, #80	; 0x50
 8006402:	4618      	mov	r0, r3
 8006404:	f000 fb11 	bl	8006a2a <TIM_ITRx_SetConfig>
      break;
 8006408:	e02b      	b.n	8006462 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6818      	ldr	r0, [r3, #0]
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	6859      	ldr	r1, [r3, #4]
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	68db      	ldr	r3, [r3, #12]
 8006416:	461a      	mov	r2, r3
 8006418:	f000 fad7 	bl	80069ca <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	2160      	movs	r1, #96	; 0x60
 8006422:	4618      	mov	r0, r3
 8006424:	f000 fb01 	bl	8006a2a <TIM_ITRx_SetConfig>
      break;
 8006428:	e01b      	b.n	8006462 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6818      	ldr	r0, [r3, #0]
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	6859      	ldr	r1, [r3, #4]
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	68db      	ldr	r3, [r3, #12]
 8006436:	461a      	mov	r2, r3
 8006438:	f000 fa98 	bl	800696c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	2140      	movs	r1, #64	; 0x40
 8006442:	4618      	mov	r0, r3
 8006444:	f000 faf1 	bl	8006a2a <TIM_ITRx_SetConfig>
      break;
 8006448:	e00b      	b.n	8006462 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681a      	ldr	r2, [r3, #0]
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	4619      	mov	r1, r3
 8006454:	4610      	mov	r0, r2
 8006456:	f000 fae8 	bl	8006a2a <TIM_ITRx_SetConfig>
      break;
 800645a:	e002      	b.n	8006462 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800645c:	bf00      	nop
 800645e:	e000      	b.n	8006462 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006460:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2201      	movs	r2, #1
 8006466:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2200      	movs	r2, #0
 800646e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006472:	2300      	movs	r3, #0
}
 8006474:	4618      	mov	r0, r3
 8006476:	3710      	adds	r7, #16
 8006478:	46bd      	mov	sp, r7
 800647a:	bd80      	pop	{r7, pc}

0800647c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800647c:	b480      	push	{r7}
 800647e:	b083      	sub	sp, #12
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006484:	bf00      	nop
 8006486:	370c      	adds	r7, #12
 8006488:	46bd      	mov	sp, r7
 800648a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648e:	4770      	bx	lr

08006490 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006490:	b480      	push	{r7}
 8006492:	b083      	sub	sp, #12
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006498:	bf00      	nop
 800649a:	370c      	adds	r7, #12
 800649c:	46bd      	mov	sp, r7
 800649e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a2:	4770      	bx	lr

080064a4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80064a4:	b480      	push	{r7}
 80064a6:	b083      	sub	sp, #12
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80064ac:	bf00      	nop
 80064ae:	370c      	adds	r7, #12
 80064b0:	46bd      	mov	sp, r7
 80064b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b6:	4770      	bx	lr

080064b8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80064b8:	b480      	push	{r7}
 80064ba:	b083      	sub	sp, #12
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80064c0:	bf00      	nop
 80064c2:	370c      	adds	r7, #12
 80064c4:	46bd      	mov	sp, r7
 80064c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ca:	4770      	bx	lr

080064cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80064cc:	b480      	push	{r7}
 80064ce:	b085      	sub	sp, #20
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
 80064d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	4a40      	ldr	r2, [pc, #256]	; (80065e0 <TIM_Base_SetConfig+0x114>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d013      	beq.n	800650c <TIM_Base_SetConfig+0x40>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064ea:	d00f      	beq.n	800650c <TIM_Base_SetConfig+0x40>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	4a3d      	ldr	r2, [pc, #244]	; (80065e4 <TIM_Base_SetConfig+0x118>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d00b      	beq.n	800650c <TIM_Base_SetConfig+0x40>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	4a3c      	ldr	r2, [pc, #240]	; (80065e8 <TIM_Base_SetConfig+0x11c>)
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d007      	beq.n	800650c <TIM_Base_SetConfig+0x40>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	4a3b      	ldr	r2, [pc, #236]	; (80065ec <TIM_Base_SetConfig+0x120>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d003      	beq.n	800650c <TIM_Base_SetConfig+0x40>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	4a3a      	ldr	r2, [pc, #232]	; (80065f0 <TIM_Base_SetConfig+0x124>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d108      	bne.n	800651e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006512:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	685b      	ldr	r3, [r3, #4]
 8006518:	68fa      	ldr	r2, [r7, #12]
 800651a:	4313      	orrs	r3, r2
 800651c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	4a2f      	ldr	r2, [pc, #188]	; (80065e0 <TIM_Base_SetConfig+0x114>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d02b      	beq.n	800657e <TIM_Base_SetConfig+0xb2>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800652c:	d027      	beq.n	800657e <TIM_Base_SetConfig+0xb2>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	4a2c      	ldr	r2, [pc, #176]	; (80065e4 <TIM_Base_SetConfig+0x118>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d023      	beq.n	800657e <TIM_Base_SetConfig+0xb2>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	4a2b      	ldr	r2, [pc, #172]	; (80065e8 <TIM_Base_SetConfig+0x11c>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d01f      	beq.n	800657e <TIM_Base_SetConfig+0xb2>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	4a2a      	ldr	r2, [pc, #168]	; (80065ec <TIM_Base_SetConfig+0x120>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d01b      	beq.n	800657e <TIM_Base_SetConfig+0xb2>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	4a29      	ldr	r2, [pc, #164]	; (80065f0 <TIM_Base_SetConfig+0x124>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d017      	beq.n	800657e <TIM_Base_SetConfig+0xb2>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	4a28      	ldr	r2, [pc, #160]	; (80065f4 <TIM_Base_SetConfig+0x128>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d013      	beq.n	800657e <TIM_Base_SetConfig+0xb2>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	4a27      	ldr	r2, [pc, #156]	; (80065f8 <TIM_Base_SetConfig+0x12c>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d00f      	beq.n	800657e <TIM_Base_SetConfig+0xb2>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	4a26      	ldr	r2, [pc, #152]	; (80065fc <TIM_Base_SetConfig+0x130>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d00b      	beq.n	800657e <TIM_Base_SetConfig+0xb2>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	4a25      	ldr	r2, [pc, #148]	; (8006600 <TIM_Base_SetConfig+0x134>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d007      	beq.n	800657e <TIM_Base_SetConfig+0xb2>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	4a24      	ldr	r2, [pc, #144]	; (8006604 <TIM_Base_SetConfig+0x138>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d003      	beq.n	800657e <TIM_Base_SetConfig+0xb2>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	4a23      	ldr	r2, [pc, #140]	; (8006608 <TIM_Base_SetConfig+0x13c>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d108      	bne.n	8006590 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006584:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	68db      	ldr	r3, [r3, #12]
 800658a:	68fa      	ldr	r2, [r7, #12]
 800658c:	4313      	orrs	r3, r2
 800658e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	695b      	ldr	r3, [r3, #20]
 800659a:	4313      	orrs	r3, r2
 800659c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	68fa      	ldr	r2, [r7, #12]
 80065a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	689a      	ldr	r2, [r3, #8]
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	681a      	ldr	r2, [r3, #0]
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	4a0a      	ldr	r2, [pc, #40]	; (80065e0 <TIM_Base_SetConfig+0x114>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d003      	beq.n	80065c4 <TIM_Base_SetConfig+0xf8>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	4a0c      	ldr	r2, [pc, #48]	; (80065f0 <TIM_Base_SetConfig+0x124>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d103      	bne.n	80065cc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	691a      	ldr	r2, [r3, #16]
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2201      	movs	r2, #1
 80065d0:	615a      	str	r2, [r3, #20]
}
 80065d2:	bf00      	nop
 80065d4:	3714      	adds	r7, #20
 80065d6:	46bd      	mov	sp, r7
 80065d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065dc:	4770      	bx	lr
 80065de:	bf00      	nop
 80065e0:	40010000 	.word	0x40010000
 80065e4:	40000400 	.word	0x40000400
 80065e8:	40000800 	.word	0x40000800
 80065ec:	40000c00 	.word	0x40000c00
 80065f0:	40010400 	.word	0x40010400
 80065f4:	40014000 	.word	0x40014000
 80065f8:	40014400 	.word	0x40014400
 80065fc:	40014800 	.word	0x40014800
 8006600:	40001800 	.word	0x40001800
 8006604:	40001c00 	.word	0x40001c00
 8006608:	40002000 	.word	0x40002000

0800660c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800660c:	b480      	push	{r7}
 800660e:	b087      	sub	sp, #28
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
 8006614:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6a1b      	ldr	r3, [r3, #32]
 800661a:	f023 0201 	bic.w	r2, r3, #1
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6a1b      	ldr	r3, [r3, #32]
 8006626:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	685b      	ldr	r3, [r3, #4]
 800662c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	699b      	ldr	r3, [r3, #24]
 8006632:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800663a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	f023 0303 	bic.w	r3, r3, #3
 8006642:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	68fa      	ldr	r2, [r7, #12]
 800664a:	4313      	orrs	r3, r2
 800664c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800664e:	697b      	ldr	r3, [r7, #20]
 8006650:	f023 0302 	bic.w	r3, r3, #2
 8006654:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	689b      	ldr	r3, [r3, #8]
 800665a:	697a      	ldr	r2, [r7, #20]
 800665c:	4313      	orrs	r3, r2
 800665e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	4a20      	ldr	r2, [pc, #128]	; (80066e4 <TIM_OC1_SetConfig+0xd8>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d003      	beq.n	8006670 <TIM_OC1_SetConfig+0x64>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	4a1f      	ldr	r2, [pc, #124]	; (80066e8 <TIM_OC1_SetConfig+0xdc>)
 800666c:	4293      	cmp	r3, r2
 800666e:	d10c      	bne.n	800668a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006670:	697b      	ldr	r3, [r7, #20]
 8006672:	f023 0308 	bic.w	r3, r3, #8
 8006676:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	68db      	ldr	r3, [r3, #12]
 800667c:	697a      	ldr	r2, [r7, #20]
 800667e:	4313      	orrs	r3, r2
 8006680:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006682:	697b      	ldr	r3, [r7, #20]
 8006684:	f023 0304 	bic.w	r3, r3, #4
 8006688:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	4a15      	ldr	r2, [pc, #84]	; (80066e4 <TIM_OC1_SetConfig+0xd8>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d003      	beq.n	800669a <TIM_OC1_SetConfig+0x8e>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	4a14      	ldr	r2, [pc, #80]	; (80066e8 <TIM_OC1_SetConfig+0xdc>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d111      	bne.n	80066be <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800669a:	693b      	ldr	r3, [r7, #16]
 800669c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80066a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80066a2:	693b      	ldr	r3, [r7, #16]
 80066a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80066a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	695b      	ldr	r3, [r3, #20]
 80066ae:	693a      	ldr	r2, [r7, #16]
 80066b0:	4313      	orrs	r3, r2
 80066b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	699b      	ldr	r3, [r3, #24]
 80066b8:	693a      	ldr	r2, [r7, #16]
 80066ba:	4313      	orrs	r3, r2
 80066bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	693a      	ldr	r2, [r7, #16]
 80066c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	68fa      	ldr	r2, [r7, #12]
 80066c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	685a      	ldr	r2, [r3, #4]
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	697a      	ldr	r2, [r7, #20]
 80066d6:	621a      	str	r2, [r3, #32]
}
 80066d8:	bf00      	nop
 80066da:	371c      	adds	r7, #28
 80066dc:	46bd      	mov	sp, r7
 80066de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e2:	4770      	bx	lr
 80066e4:	40010000 	.word	0x40010000
 80066e8:	40010400 	.word	0x40010400

080066ec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80066ec:	b480      	push	{r7}
 80066ee:	b087      	sub	sp, #28
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
 80066f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6a1b      	ldr	r3, [r3, #32]
 80066fa:	f023 0210 	bic.w	r2, r3, #16
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6a1b      	ldr	r3, [r3, #32]
 8006706:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	685b      	ldr	r3, [r3, #4]
 800670c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	699b      	ldr	r3, [r3, #24]
 8006712:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800671a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006722:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	021b      	lsls	r3, r3, #8
 800672a:	68fa      	ldr	r2, [r7, #12]
 800672c:	4313      	orrs	r3, r2
 800672e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006730:	697b      	ldr	r3, [r7, #20]
 8006732:	f023 0320 	bic.w	r3, r3, #32
 8006736:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	689b      	ldr	r3, [r3, #8]
 800673c:	011b      	lsls	r3, r3, #4
 800673e:	697a      	ldr	r2, [r7, #20]
 8006740:	4313      	orrs	r3, r2
 8006742:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	4a22      	ldr	r2, [pc, #136]	; (80067d0 <TIM_OC2_SetConfig+0xe4>)
 8006748:	4293      	cmp	r3, r2
 800674a:	d003      	beq.n	8006754 <TIM_OC2_SetConfig+0x68>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	4a21      	ldr	r2, [pc, #132]	; (80067d4 <TIM_OC2_SetConfig+0xe8>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d10d      	bne.n	8006770 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006754:	697b      	ldr	r3, [r7, #20]
 8006756:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800675a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	68db      	ldr	r3, [r3, #12]
 8006760:	011b      	lsls	r3, r3, #4
 8006762:	697a      	ldr	r2, [r7, #20]
 8006764:	4313      	orrs	r3, r2
 8006766:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006768:	697b      	ldr	r3, [r7, #20]
 800676a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800676e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	4a17      	ldr	r2, [pc, #92]	; (80067d0 <TIM_OC2_SetConfig+0xe4>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d003      	beq.n	8006780 <TIM_OC2_SetConfig+0x94>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	4a16      	ldr	r2, [pc, #88]	; (80067d4 <TIM_OC2_SetConfig+0xe8>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d113      	bne.n	80067a8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006780:	693b      	ldr	r3, [r7, #16]
 8006782:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006786:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006788:	693b      	ldr	r3, [r7, #16]
 800678a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800678e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	695b      	ldr	r3, [r3, #20]
 8006794:	009b      	lsls	r3, r3, #2
 8006796:	693a      	ldr	r2, [r7, #16]
 8006798:	4313      	orrs	r3, r2
 800679a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	699b      	ldr	r3, [r3, #24]
 80067a0:	009b      	lsls	r3, r3, #2
 80067a2:	693a      	ldr	r2, [r7, #16]
 80067a4:	4313      	orrs	r3, r2
 80067a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	693a      	ldr	r2, [r7, #16]
 80067ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	68fa      	ldr	r2, [r7, #12]
 80067b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	685a      	ldr	r2, [r3, #4]
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	697a      	ldr	r2, [r7, #20]
 80067c0:	621a      	str	r2, [r3, #32]
}
 80067c2:	bf00      	nop
 80067c4:	371c      	adds	r7, #28
 80067c6:	46bd      	mov	sp, r7
 80067c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067cc:	4770      	bx	lr
 80067ce:	bf00      	nop
 80067d0:	40010000 	.word	0x40010000
 80067d4:	40010400 	.word	0x40010400

080067d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80067d8:	b480      	push	{r7}
 80067da:	b087      	sub	sp, #28
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
 80067e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6a1b      	ldr	r3, [r3, #32]
 80067e6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6a1b      	ldr	r3, [r3, #32]
 80067f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	685b      	ldr	r3, [r3, #4]
 80067f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	69db      	ldr	r3, [r3, #28]
 80067fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006806:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	f023 0303 	bic.w	r3, r3, #3
 800680e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	68fa      	ldr	r2, [r7, #12]
 8006816:	4313      	orrs	r3, r2
 8006818:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800681a:	697b      	ldr	r3, [r7, #20]
 800681c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006820:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	689b      	ldr	r3, [r3, #8]
 8006826:	021b      	lsls	r3, r3, #8
 8006828:	697a      	ldr	r2, [r7, #20]
 800682a:	4313      	orrs	r3, r2
 800682c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	4a21      	ldr	r2, [pc, #132]	; (80068b8 <TIM_OC3_SetConfig+0xe0>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d003      	beq.n	800683e <TIM_OC3_SetConfig+0x66>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	4a20      	ldr	r2, [pc, #128]	; (80068bc <TIM_OC3_SetConfig+0xe4>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d10d      	bne.n	800685a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800683e:	697b      	ldr	r3, [r7, #20]
 8006840:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006844:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	68db      	ldr	r3, [r3, #12]
 800684a:	021b      	lsls	r3, r3, #8
 800684c:	697a      	ldr	r2, [r7, #20]
 800684e:	4313      	orrs	r3, r2
 8006850:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006852:	697b      	ldr	r3, [r7, #20]
 8006854:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006858:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	4a16      	ldr	r2, [pc, #88]	; (80068b8 <TIM_OC3_SetConfig+0xe0>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d003      	beq.n	800686a <TIM_OC3_SetConfig+0x92>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	4a15      	ldr	r2, [pc, #84]	; (80068bc <TIM_OC3_SetConfig+0xe4>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d113      	bne.n	8006892 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800686a:	693b      	ldr	r3, [r7, #16]
 800686c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006870:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006872:	693b      	ldr	r3, [r7, #16]
 8006874:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006878:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	695b      	ldr	r3, [r3, #20]
 800687e:	011b      	lsls	r3, r3, #4
 8006880:	693a      	ldr	r2, [r7, #16]
 8006882:	4313      	orrs	r3, r2
 8006884:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	699b      	ldr	r3, [r3, #24]
 800688a:	011b      	lsls	r3, r3, #4
 800688c:	693a      	ldr	r2, [r7, #16]
 800688e:	4313      	orrs	r3, r2
 8006890:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	693a      	ldr	r2, [r7, #16]
 8006896:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	68fa      	ldr	r2, [r7, #12]
 800689c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	685a      	ldr	r2, [r3, #4]
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	697a      	ldr	r2, [r7, #20]
 80068aa:	621a      	str	r2, [r3, #32]
}
 80068ac:	bf00      	nop
 80068ae:	371c      	adds	r7, #28
 80068b0:	46bd      	mov	sp, r7
 80068b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b6:	4770      	bx	lr
 80068b8:	40010000 	.word	0x40010000
 80068bc:	40010400 	.word	0x40010400

080068c0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80068c0:	b480      	push	{r7}
 80068c2:	b087      	sub	sp, #28
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
 80068c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6a1b      	ldr	r3, [r3, #32]
 80068ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6a1b      	ldr	r3, [r3, #32]
 80068da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	685b      	ldr	r3, [r3, #4]
 80068e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	69db      	ldr	r3, [r3, #28]
 80068e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	021b      	lsls	r3, r3, #8
 80068fe:	68fa      	ldr	r2, [r7, #12]
 8006900:	4313      	orrs	r3, r2
 8006902:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006904:	693b      	ldr	r3, [r7, #16]
 8006906:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800690a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	689b      	ldr	r3, [r3, #8]
 8006910:	031b      	lsls	r3, r3, #12
 8006912:	693a      	ldr	r2, [r7, #16]
 8006914:	4313      	orrs	r3, r2
 8006916:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	4a12      	ldr	r2, [pc, #72]	; (8006964 <TIM_OC4_SetConfig+0xa4>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d003      	beq.n	8006928 <TIM_OC4_SetConfig+0x68>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	4a11      	ldr	r2, [pc, #68]	; (8006968 <TIM_OC4_SetConfig+0xa8>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d109      	bne.n	800693c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006928:	697b      	ldr	r3, [r7, #20]
 800692a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800692e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	695b      	ldr	r3, [r3, #20]
 8006934:	019b      	lsls	r3, r3, #6
 8006936:	697a      	ldr	r2, [r7, #20]
 8006938:	4313      	orrs	r3, r2
 800693a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	697a      	ldr	r2, [r7, #20]
 8006940:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	68fa      	ldr	r2, [r7, #12]
 8006946:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	685a      	ldr	r2, [r3, #4]
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	693a      	ldr	r2, [r7, #16]
 8006954:	621a      	str	r2, [r3, #32]
}
 8006956:	bf00      	nop
 8006958:	371c      	adds	r7, #28
 800695a:	46bd      	mov	sp, r7
 800695c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006960:	4770      	bx	lr
 8006962:	bf00      	nop
 8006964:	40010000 	.word	0x40010000
 8006968:	40010400 	.word	0x40010400

0800696c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800696c:	b480      	push	{r7}
 800696e:	b087      	sub	sp, #28
 8006970:	af00      	add	r7, sp, #0
 8006972:	60f8      	str	r0, [r7, #12]
 8006974:	60b9      	str	r1, [r7, #8]
 8006976:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	6a1b      	ldr	r3, [r3, #32]
 800697c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	6a1b      	ldr	r3, [r3, #32]
 8006982:	f023 0201 	bic.w	r2, r3, #1
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	699b      	ldr	r3, [r3, #24]
 800698e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006990:	693b      	ldr	r3, [r7, #16]
 8006992:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006996:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	011b      	lsls	r3, r3, #4
 800699c:	693a      	ldr	r2, [r7, #16]
 800699e:	4313      	orrs	r3, r2
 80069a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80069a2:	697b      	ldr	r3, [r7, #20]
 80069a4:	f023 030a 	bic.w	r3, r3, #10
 80069a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80069aa:	697a      	ldr	r2, [r7, #20]
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	4313      	orrs	r3, r2
 80069b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	693a      	ldr	r2, [r7, #16]
 80069b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	697a      	ldr	r2, [r7, #20]
 80069bc:	621a      	str	r2, [r3, #32]
}
 80069be:	bf00      	nop
 80069c0:	371c      	adds	r7, #28
 80069c2:	46bd      	mov	sp, r7
 80069c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c8:	4770      	bx	lr

080069ca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80069ca:	b480      	push	{r7}
 80069cc:	b087      	sub	sp, #28
 80069ce:	af00      	add	r7, sp, #0
 80069d0:	60f8      	str	r0, [r7, #12]
 80069d2:	60b9      	str	r1, [r7, #8]
 80069d4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	6a1b      	ldr	r3, [r3, #32]
 80069da:	f023 0210 	bic.w	r2, r3, #16
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	699b      	ldr	r3, [r3, #24]
 80069e6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	6a1b      	ldr	r3, [r3, #32]
 80069ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80069ee:	697b      	ldr	r3, [r7, #20]
 80069f0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80069f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	031b      	lsls	r3, r3, #12
 80069fa:	697a      	ldr	r2, [r7, #20]
 80069fc:	4313      	orrs	r3, r2
 80069fe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006a00:	693b      	ldr	r3, [r7, #16]
 8006a02:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006a06:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	011b      	lsls	r3, r3, #4
 8006a0c:	693a      	ldr	r2, [r7, #16]
 8006a0e:	4313      	orrs	r3, r2
 8006a10:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	697a      	ldr	r2, [r7, #20]
 8006a16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	693a      	ldr	r2, [r7, #16]
 8006a1c:	621a      	str	r2, [r3, #32]
}
 8006a1e:	bf00      	nop
 8006a20:	371c      	adds	r7, #28
 8006a22:	46bd      	mov	sp, r7
 8006a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a28:	4770      	bx	lr

08006a2a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006a2a:	b480      	push	{r7}
 8006a2c:	b085      	sub	sp, #20
 8006a2e:	af00      	add	r7, sp, #0
 8006a30:	6078      	str	r0, [r7, #4]
 8006a32:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	689b      	ldr	r3, [r3, #8]
 8006a38:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a40:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006a42:	683a      	ldr	r2, [r7, #0]
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	4313      	orrs	r3, r2
 8006a48:	f043 0307 	orr.w	r3, r3, #7
 8006a4c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	68fa      	ldr	r2, [r7, #12]
 8006a52:	609a      	str	r2, [r3, #8]
}
 8006a54:	bf00      	nop
 8006a56:	3714      	adds	r7, #20
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5e:	4770      	bx	lr

08006a60 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006a60:	b480      	push	{r7}
 8006a62:	b087      	sub	sp, #28
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	60f8      	str	r0, [r7, #12]
 8006a68:	60b9      	str	r1, [r7, #8]
 8006a6a:	607a      	str	r2, [r7, #4]
 8006a6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	689b      	ldr	r3, [r3, #8]
 8006a72:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a74:	697b      	ldr	r3, [r7, #20]
 8006a76:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006a7a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	021a      	lsls	r2, r3, #8
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	431a      	orrs	r2, r3
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	4313      	orrs	r3, r2
 8006a88:	697a      	ldr	r2, [r7, #20]
 8006a8a:	4313      	orrs	r3, r2
 8006a8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	697a      	ldr	r2, [r7, #20]
 8006a92:	609a      	str	r2, [r3, #8]
}
 8006a94:	bf00      	nop
 8006a96:	371c      	adds	r7, #28
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9e:	4770      	bx	lr

08006aa0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006aa0:	b480      	push	{r7}
 8006aa2:	b087      	sub	sp, #28
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	60f8      	str	r0, [r7, #12]
 8006aa8:	60b9      	str	r1, [r7, #8]
 8006aaa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006aac:	68bb      	ldr	r3, [r7, #8]
 8006aae:	f003 031f 	and.w	r3, r3, #31
 8006ab2:	2201      	movs	r2, #1
 8006ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8006ab8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	6a1a      	ldr	r2, [r3, #32]
 8006abe:	697b      	ldr	r3, [r7, #20]
 8006ac0:	43db      	mvns	r3, r3
 8006ac2:	401a      	ands	r2, r3
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	6a1a      	ldr	r2, [r3, #32]
 8006acc:	68bb      	ldr	r3, [r7, #8]
 8006ace:	f003 031f 	and.w	r3, r3, #31
 8006ad2:	6879      	ldr	r1, [r7, #4]
 8006ad4:	fa01 f303 	lsl.w	r3, r1, r3
 8006ad8:	431a      	orrs	r2, r3
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	621a      	str	r2, [r3, #32]
}
 8006ade:	bf00      	nop
 8006ae0:	371c      	adds	r7, #28
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae8:	4770      	bx	lr
	...

08006aec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006aec:	b480      	push	{r7}
 8006aee:	b085      	sub	sp, #20
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
 8006af4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006afc:	2b01      	cmp	r3, #1
 8006afe:	d101      	bne.n	8006b04 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006b00:	2302      	movs	r3, #2
 8006b02:	e05a      	b.n	8006bba <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2201      	movs	r2, #1
 8006b08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2202      	movs	r2, #2
 8006b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	685b      	ldr	r3, [r3, #4]
 8006b1a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	689b      	ldr	r3, [r3, #8]
 8006b22:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b2a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	68fa      	ldr	r2, [r7, #12]
 8006b32:	4313      	orrs	r3, r2
 8006b34:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	68fa      	ldr	r2, [r7, #12]
 8006b3c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	4a21      	ldr	r2, [pc, #132]	; (8006bc8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d022      	beq.n	8006b8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b50:	d01d      	beq.n	8006b8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	4a1d      	ldr	r2, [pc, #116]	; (8006bcc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	d018      	beq.n	8006b8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	4a1b      	ldr	r2, [pc, #108]	; (8006bd0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d013      	beq.n	8006b8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4a1a      	ldr	r2, [pc, #104]	; (8006bd4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d00e      	beq.n	8006b8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4a18      	ldr	r2, [pc, #96]	; (8006bd8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d009      	beq.n	8006b8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4a17      	ldr	r2, [pc, #92]	; (8006bdc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d004      	beq.n	8006b8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	4a15      	ldr	r2, [pc, #84]	; (8006be0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d10c      	bne.n	8006ba8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006b8e:	68bb      	ldr	r3, [r7, #8]
 8006b90:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b94:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	685b      	ldr	r3, [r3, #4]
 8006b9a:	68ba      	ldr	r2, [r7, #8]
 8006b9c:	4313      	orrs	r3, r2
 8006b9e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	68ba      	ldr	r2, [r7, #8]
 8006ba6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2201      	movs	r2, #1
 8006bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006bb8:	2300      	movs	r3, #0
}
 8006bba:	4618      	mov	r0, r3
 8006bbc:	3714      	adds	r7, #20
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc4:	4770      	bx	lr
 8006bc6:	bf00      	nop
 8006bc8:	40010000 	.word	0x40010000
 8006bcc:	40000400 	.word	0x40000400
 8006bd0:	40000800 	.word	0x40000800
 8006bd4:	40000c00 	.word	0x40000c00
 8006bd8:	40010400 	.word	0x40010400
 8006bdc:	40014000 	.word	0x40014000
 8006be0:	40001800 	.word	0x40001800

08006be4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006be4:	b480      	push	{r7}
 8006be6:	b083      	sub	sp, #12
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006bec:	bf00      	nop
 8006bee:	370c      	adds	r7, #12
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf6:	4770      	bx	lr

08006bf8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006bf8:	b480      	push	{r7}
 8006bfa:	b083      	sub	sp, #12
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006c00:	bf00      	nop
 8006c02:	370c      	adds	r7, #12
 8006c04:	46bd      	mov	sp, r7
 8006c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0a:	4770      	bx	lr

08006c0c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b082      	sub	sp, #8
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d101      	bne.n	8006c1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	e03f      	b.n	8006c9e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006c24:	b2db      	uxtb	r3, r3
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d106      	bne.n	8006c38 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f7fb fa60 	bl	80020f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2224      	movs	r2, #36	; 0x24
 8006c3c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	68da      	ldr	r2, [r3, #12]
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006c4e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006c50:	6878      	ldr	r0, [r7, #4]
 8006c52:	f000 fc41 	bl	80074d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	691a      	ldr	r2, [r3, #16]
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006c64:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	695a      	ldr	r2, [r3, #20]
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006c74:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	68da      	ldr	r2, [r3, #12]
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006c84:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2200      	movs	r2, #0
 8006c8a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2220      	movs	r2, #32
 8006c90:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2220      	movs	r2, #32
 8006c98:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8006c9c:	2300      	movs	r3, #0
}
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	3708      	adds	r7, #8
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	bd80      	pop	{r7, pc}
	...

08006ca8 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b086      	sub	sp, #24
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	60f8      	str	r0, [r7, #12]
 8006cb0:	60b9      	str	r1, [r7, #8]
 8006cb2:	4613      	mov	r3, r2
 8006cb4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006cbc:	b2db      	uxtb	r3, r3
 8006cbe:	2b20      	cmp	r3, #32
 8006cc0:	d166      	bne.n	8006d90 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8006cc2:	68bb      	ldr	r3, [r7, #8]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d002      	beq.n	8006cce <HAL_UART_Receive_DMA+0x26>
 8006cc8:	88fb      	ldrh	r3, [r7, #6]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d101      	bne.n	8006cd2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8006cce:	2301      	movs	r3, #1
 8006cd0:	e05f      	b.n	8006d92 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006cd8:	2b01      	cmp	r3, #1
 8006cda:	d101      	bne.n	8006ce0 <HAL_UART_Receive_DMA+0x38>
 8006cdc:	2302      	movs	r3, #2
 8006cde:	e058      	b.n	8006d92 <HAL_UART_Receive_DMA+0xea>
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	2201      	movs	r2, #1
 8006ce4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8006ce8:	68ba      	ldr	r2, [r7, #8]
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	88fa      	ldrh	r2, [r7, #6]
 8006cf2:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	2222      	movs	r2, #34	; 0x22
 8006cfe:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d06:	4a25      	ldr	r2, [pc, #148]	; (8006d9c <HAL_UART_Receive_DMA+0xf4>)
 8006d08:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d0e:	4a24      	ldr	r2, [pc, #144]	; (8006da0 <HAL_UART_Receive_DMA+0xf8>)
 8006d10:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d16:	4a23      	ldr	r2, [pc, #140]	; (8006da4 <HAL_UART_Receive_DMA+0xfc>)
 8006d18:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d1e:	2200      	movs	r2, #0
 8006d20:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 8006d22:	f107 0308 	add.w	r3, r7, #8
 8006d26:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	3304      	adds	r3, #4
 8006d32:	4619      	mov	r1, r3
 8006d34:	697b      	ldr	r3, [r7, #20]
 8006d36:	681a      	ldr	r2, [r3, #0]
 8006d38:	88fb      	ldrh	r3, [r7, #6]
 8006d3a:	f7fd feb1 	bl	8004aa0 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8006d3e:	2300      	movs	r3, #0
 8006d40:	613b      	str	r3, [r7, #16]
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	613b      	str	r3, [r7, #16]
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	685b      	ldr	r3, [r3, #4]
 8006d50:	613b      	str	r3, [r7, #16]
 8006d52:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	2200      	movs	r2, #0
 8006d58:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	68da      	ldr	r2, [r3, #12]
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006d6a:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	695a      	ldr	r2, [r3, #20]
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f042 0201 	orr.w	r2, r2, #1
 8006d7a:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	695a      	ldr	r2, [r3, #20]
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006d8a:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	e000      	b.n	8006d92 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8006d90:	2302      	movs	r3, #2
  }
}
 8006d92:	4618      	mov	r0, r3
 8006d94:	3718      	adds	r7, #24
 8006d96:	46bd      	mov	sp, r7
 8006d98:	bd80      	pop	{r7, pc}
 8006d9a:	bf00      	nop
 8006d9c:	08007151 	.word	0x08007151
 8006da0:	080071b9 	.word	0x080071b9
 8006da4:	080071d5 	.word	0x080071d5

08006da8 <HAL_UART_DMAPause>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAPause(UART_HandleTypeDef *huart)
{
 8006da8:	b480      	push	{r7}
 8006daa:	b085      	sub	sp, #20
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006db0:	2300      	movs	r3, #0
 8006db2:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006dba:	2b01      	cmp	r3, #1
 8006dbc:	d101      	bne.n	8006dc2 <HAL_UART_DMAPause+0x1a>
 8006dbe:	2302      	movs	r3, #2
 8006dc0:	e050      	b.n	8006e64 <HAL_UART_DMAPause+0xbc>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2201      	movs	r2, #1
 8006dc6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	695b      	ldr	r3, [r3, #20]
 8006dd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dd4:	2b80      	cmp	r3, #128	; 0x80
 8006dd6:	bf0c      	ite	eq
 8006dd8:	2301      	moveq	r3, #1
 8006dda:	2300      	movne	r3, #0
 8006ddc:	b2db      	uxtb	r3, r3
 8006dde:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006de6:	b2db      	uxtb	r3, r3
 8006de8:	2b21      	cmp	r3, #33	; 0x21
 8006dea:	d10a      	bne.n	8006e02 <HAL_UART_DMAPause+0x5a>
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d007      	beq.n	8006e02 <HAL_UART_DMAPause+0x5a>
  {
    /* Disable the UART DMA Tx request */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	695a      	ldr	r2, [r3, #20]
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006e00:	615a      	str	r2, [r3, #20]
  }

  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	695b      	ldr	r3, [r3, #20]
 8006e08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e0c:	2b40      	cmp	r3, #64	; 0x40
 8006e0e:	bf0c      	ite	eq
 8006e10:	2301      	moveq	r3, #1
 8006e12:	2300      	movne	r3, #0
 8006e14:	b2db      	uxtb	r3, r3
 8006e16:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006e1e:	b2db      	uxtb	r3, r3
 8006e20:	2b22      	cmp	r3, #34	; 0x22
 8006e22:	d11a      	bne.n	8006e5a <HAL_UART_DMAPause+0xb2>
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d017      	beq.n	8006e5a <HAL_UART_DMAPause+0xb2>
  {
    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	68da      	ldr	r2, [r3, #12]
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006e38:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	695a      	ldr	r2, [r3, #20]
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f022 0201 	bic.w	r2, r2, #1
 8006e48:	615a      	str	r2, [r3, #20]

    /* Disable the UART DMA Rx request */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	695a      	ldr	r2, [r3, #20]
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e58:	615a      	str	r2, [r3, #20]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8006e62:	2300      	movs	r3, #0
}
 8006e64:	4618      	mov	r0, r3
 8006e66:	3714      	adds	r7, #20
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6e:	4770      	bx	lr

08006e70 <HAL_UART_DMAResume>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAResume(UART_HandleTypeDef *huart)
{
 8006e70:	b480      	push	{r7}
 8006e72:	b085      	sub	sp, #20
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006e7e:	2b01      	cmp	r3, #1
 8006e80:	d101      	bne.n	8006e86 <HAL_UART_DMAResume+0x16>
 8006e82:	2302      	movs	r3, #2
 8006e84:	e03f      	b.n	8006f06 <HAL_UART_DMAResume+0x96>
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2201      	movs	r2, #1
 8006e8a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006e94:	b2db      	uxtb	r3, r3
 8006e96:	2b21      	cmp	r3, #33	; 0x21
 8006e98:	d107      	bne.n	8006eaa <HAL_UART_DMAResume+0x3a>
  {
    /* Enable the UART DMA Tx request */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	695a      	ldr	r2, [r3, #20]
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006ea8:	615a      	str	r2, [r3, #20]
  }

  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006eb0:	b2db      	uxtb	r3, r3
 8006eb2:	2b22      	cmp	r3, #34	; 0x22
 8006eb4:	d122      	bne.n	8006efc <HAL_UART_DMAResume+0x8c>
  {
    /* Clear the Overrun flag before resuming the Rx transfer*/
    __HAL_UART_CLEAR_OREFLAG(huart);
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	60fb      	str	r3, [r7, #12]
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	60fb      	str	r3, [r7, #12]
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	685b      	ldr	r3, [r3, #4]
 8006ec8:	60fb      	str	r3, [r7, #12]
 8006eca:	68fb      	ldr	r3, [r7, #12]

    /* Reenable PE and ERR (Frame error, noise error, overrun error) interrupts */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	68da      	ldr	r2, [r3, #12]
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006eda:	60da      	str	r2, [r3, #12]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	695a      	ldr	r2, [r3, #20]
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f042 0201 	orr.w	r2, r2, #1
 8006eea:	615a      	str	r2, [r3, #20]

    /* Enable the UART DMA Rx request */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	695a      	ldr	r2, [r3, #20]
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006efa:	615a      	str	r2, [r3, #20]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2200      	movs	r2, #0
 8006f00:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8006f04:	2300      	movs	r3, #0
}
 8006f06:	4618      	mov	r0, r3
 8006f08:	3714      	adds	r7, #20
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f10:	4770      	bx	lr
	...

08006f14 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b088      	sub	sp, #32
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	68db      	ldr	r3, [r3, #12]
 8006f2a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	695b      	ldr	r3, [r3, #20]
 8006f32:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8006f34:	2300      	movs	r3, #0
 8006f36:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8006f38:	2300      	movs	r3, #0
 8006f3a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006f3c:	69fb      	ldr	r3, [r7, #28]
 8006f3e:	f003 030f 	and.w	r3, r3, #15
 8006f42:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8006f44:	693b      	ldr	r3, [r7, #16]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d10d      	bne.n	8006f66 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006f4a:	69fb      	ldr	r3, [r7, #28]
 8006f4c:	f003 0320 	and.w	r3, r3, #32
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d008      	beq.n	8006f66 <HAL_UART_IRQHandler+0x52>
 8006f54:	69bb      	ldr	r3, [r7, #24]
 8006f56:	f003 0320 	and.w	r3, r3, #32
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d003      	beq.n	8006f66 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f000 fa38 	bl	80073d4 <UART_Receive_IT>
      return;
 8006f64:	e0d0      	b.n	8007108 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006f66:	693b      	ldr	r3, [r7, #16]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	f000 80b0 	beq.w	80070ce <HAL_UART_IRQHandler+0x1ba>
 8006f6e:	697b      	ldr	r3, [r7, #20]
 8006f70:	f003 0301 	and.w	r3, r3, #1
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d105      	bne.n	8006f84 <HAL_UART_IRQHandler+0x70>
 8006f78:	69bb      	ldr	r3, [r7, #24]
 8006f7a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	f000 80a5 	beq.w	80070ce <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006f84:	69fb      	ldr	r3, [r7, #28]
 8006f86:	f003 0301 	and.w	r3, r3, #1
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d00a      	beq.n	8006fa4 <HAL_UART_IRQHandler+0x90>
 8006f8e:	69bb      	ldr	r3, [r7, #24]
 8006f90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d005      	beq.n	8006fa4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f9c:	f043 0201 	orr.w	r2, r3, #1
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006fa4:	69fb      	ldr	r3, [r7, #28]
 8006fa6:	f003 0304 	and.w	r3, r3, #4
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d00a      	beq.n	8006fc4 <HAL_UART_IRQHandler+0xb0>
 8006fae:	697b      	ldr	r3, [r7, #20]
 8006fb0:	f003 0301 	and.w	r3, r3, #1
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d005      	beq.n	8006fc4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fbc:	f043 0202 	orr.w	r2, r3, #2
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006fc4:	69fb      	ldr	r3, [r7, #28]
 8006fc6:	f003 0302 	and.w	r3, r3, #2
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d00a      	beq.n	8006fe4 <HAL_UART_IRQHandler+0xd0>
 8006fce:	697b      	ldr	r3, [r7, #20]
 8006fd0:	f003 0301 	and.w	r3, r3, #1
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d005      	beq.n	8006fe4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fdc:	f043 0204 	orr.w	r2, r3, #4
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8006fe4:	69fb      	ldr	r3, [r7, #28]
 8006fe6:	f003 0308 	and.w	r3, r3, #8
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d00f      	beq.n	800700e <HAL_UART_IRQHandler+0xfa>
 8006fee:	69bb      	ldr	r3, [r7, #24]
 8006ff0:	f003 0320 	and.w	r3, r3, #32
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d104      	bne.n	8007002 <HAL_UART_IRQHandler+0xee>
 8006ff8:	697b      	ldr	r3, [r7, #20]
 8006ffa:	f003 0301 	and.w	r3, r3, #1
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d005      	beq.n	800700e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007006:	f043 0208 	orr.w	r2, r3, #8
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007012:	2b00      	cmp	r3, #0
 8007014:	d077      	beq.n	8007106 <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007016:	69fb      	ldr	r3, [r7, #28]
 8007018:	f003 0320 	and.w	r3, r3, #32
 800701c:	2b00      	cmp	r3, #0
 800701e:	d007      	beq.n	8007030 <HAL_UART_IRQHandler+0x11c>
 8007020:	69bb      	ldr	r3, [r7, #24]
 8007022:	f003 0320 	and.w	r3, r3, #32
 8007026:	2b00      	cmp	r3, #0
 8007028:	d002      	beq.n	8007030 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800702a:	6878      	ldr	r0, [r7, #4]
 800702c:	f000 f9d2 	bl	80073d4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	695b      	ldr	r3, [r3, #20]
 8007036:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800703a:	2b40      	cmp	r3, #64	; 0x40
 800703c:	bf0c      	ite	eq
 800703e:	2301      	moveq	r3, #1
 8007040:	2300      	movne	r3, #0
 8007042:	b2db      	uxtb	r3, r3
 8007044:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800704a:	f003 0308 	and.w	r3, r3, #8
 800704e:	2b00      	cmp	r3, #0
 8007050:	d102      	bne.n	8007058 <HAL_UART_IRQHandler+0x144>
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d031      	beq.n	80070bc <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007058:	6878      	ldr	r0, [r7, #4]
 800705a:	f000 f91b 	bl	8007294 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	695b      	ldr	r3, [r3, #20]
 8007064:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007068:	2b40      	cmp	r3, #64	; 0x40
 800706a:	d123      	bne.n	80070b4 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	695a      	ldr	r2, [r3, #20]
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800707a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007080:	2b00      	cmp	r3, #0
 8007082:	d013      	beq.n	80070ac <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007088:	4a21      	ldr	r2, [pc, #132]	; (8007110 <HAL_UART_IRQHandler+0x1fc>)
 800708a:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007090:	4618      	mov	r0, r3
 8007092:	f7fd fd5d 	bl	8004b50 <HAL_DMA_Abort_IT>
 8007096:	4603      	mov	r3, r0
 8007098:	2b00      	cmp	r3, #0
 800709a:	d016      	beq.n	80070ca <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070a2:	687a      	ldr	r2, [r7, #4]
 80070a4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80070a6:	4610      	mov	r0, r2
 80070a8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070aa:	e00e      	b.n	80070ca <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80070ac:	6878      	ldr	r0, [r7, #4]
 80070ae:	f000 f845 	bl	800713c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070b2:	e00a      	b.n	80070ca <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80070b4:	6878      	ldr	r0, [r7, #4]
 80070b6:	f000 f841 	bl	800713c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070ba:	e006      	b.n	80070ca <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80070bc:	6878      	ldr	r0, [r7, #4]
 80070be:	f000 f83d 	bl	800713c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2200      	movs	r2, #0
 80070c6:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80070c8:	e01d      	b.n	8007106 <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070ca:	bf00      	nop
    return;
 80070cc:	e01b      	b.n	8007106 <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80070ce:	69fb      	ldr	r3, [r7, #28]
 80070d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d008      	beq.n	80070ea <HAL_UART_IRQHandler+0x1d6>
 80070d8:	69bb      	ldr	r3, [r7, #24]
 80070da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d003      	beq.n	80070ea <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80070e2:	6878      	ldr	r0, [r7, #4]
 80070e4:	f000 f908 	bl	80072f8 <UART_Transmit_IT>
    return;
 80070e8:	e00e      	b.n	8007108 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80070ea:	69fb      	ldr	r3, [r7, #28]
 80070ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d009      	beq.n	8007108 <HAL_UART_IRQHandler+0x1f4>
 80070f4:	69bb      	ldr	r3, [r7, #24]
 80070f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d004      	beq.n	8007108 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 80070fe:	6878      	ldr	r0, [r7, #4]
 8007100:	f000 f950 	bl	80073a4 <UART_EndTransmit_IT>
    return;
 8007104:	e000      	b.n	8007108 <HAL_UART_IRQHandler+0x1f4>
    return;
 8007106:	bf00      	nop
  }
}
 8007108:	3720      	adds	r7, #32
 800710a:	46bd      	mov	sp, r7
 800710c:	bd80      	pop	{r7, pc}
 800710e:	bf00      	nop
 8007110:	080072d1 	.word	0x080072d1

08007114 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007114:	b480      	push	{r7}
 8007116:	b083      	sub	sp, #12
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800711c:	bf00      	nop
 800711e:	370c      	adds	r7, #12
 8007120:	46bd      	mov	sp, r7
 8007122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007126:	4770      	bx	lr

08007128 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007128:	b480      	push	{r7}
 800712a:	b083      	sub	sp, #12
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007130:	bf00      	nop
 8007132:	370c      	adds	r7, #12
 8007134:	46bd      	mov	sp, r7
 8007136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713a:	4770      	bx	lr

0800713c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800713c:	b480      	push	{r7}
 800713e:	b083      	sub	sp, #12
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007144:	bf00      	nop
 8007146:	370c      	adds	r7, #12
 8007148:	46bd      	mov	sp, r7
 800714a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714e:	4770      	bx	lr

08007150 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b084      	sub	sp, #16
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800715c:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007168:	2b00      	cmp	r3, #0
 800716a:	d11e      	bne.n	80071aa <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	2200      	movs	r2, #0
 8007170:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	68da      	ldr	r2, [r3, #12]
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007180:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	695a      	ldr	r2, [r3, #20]
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f022 0201 	bic.w	r2, r2, #1
 8007190:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	695a      	ldr	r2, [r3, #20]
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80071a0:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	2220      	movs	r2, #32
 80071a6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 80071aa:	68f8      	ldr	r0, [r7, #12]
 80071ac:	f7f9 fffc 	bl	80011a8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80071b0:	bf00      	nop
 80071b2:	3710      	adds	r7, #16
 80071b4:	46bd      	mov	sp, r7
 80071b6:	bd80      	pop	{r7, pc}

080071b8 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b084      	sub	sp, #16
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071c4:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 80071c6:	68f8      	ldr	r0, [r7, #12]
 80071c8:	f7ff ffae 	bl	8007128 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80071cc:	bf00      	nop
 80071ce:	3710      	adds	r7, #16
 80071d0:	46bd      	mov	sp, r7
 80071d2:	bd80      	pop	{r7, pc}

080071d4 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b084      	sub	sp, #16
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80071dc:	2300      	movs	r3, #0
 80071de:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071e4:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80071e6:	68bb      	ldr	r3, [r7, #8]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	695b      	ldr	r3, [r3, #20]
 80071ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071f0:	2b80      	cmp	r3, #128	; 0x80
 80071f2:	bf0c      	ite	eq
 80071f4:	2301      	moveq	r3, #1
 80071f6:	2300      	movne	r3, #0
 80071f8:	b2db      	uxtb	r3, r3
 80071fa:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80071fc:	68bb      	ldr	r3, [r7, #8]
 80071fe:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007202:	b2db      	uxtb	r3, r3
 8007204:	2b21      	cmp	r3, #33	; 0x21
 8007206:	d108      	bne.n	800721a <UART_DMAError+0x46>
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d005      	beq.n	800721a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800720e:	68bb      	ldr	r3, [r7, #8]
 8007210:	2200      	movs	r2, #0
 8007212:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8007214:	68b8      	ldr	r0, [r7, #8]
 8007216:	f000 f827 	bl	8007268 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800721a:	68bb      	ldr	r3, [r7, #8]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	695b      	ldr	r3, [r3, #20]
 8007220:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007224:	2b40      	cmp	r3, #64	; 0x40
 8007226:	bf0c      	ite	eq
 8007228:	2301      	moveq	r3, #1
 800722a:	2300      	movne	r3, #0
 800722c:	b2db      	uxtb	r3, r3
 800722e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007230:	68bb      	ldr	r3, [r7, #8]
 8007232:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007236:	b2db      	uxtb	r3, r3
 8007238:	2b22      	cmp	r3, #34	; 0x22
 800723a:	d108      	bne.n	800724e <UART_DMAError+0x7a>
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d005      	beq.n	800724e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007242:	68bb      	ldr	r3, [r7, #8]
 8007244:	2200      	movs	r2, #0
 8007246:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8007248:	68b8      	ldr	r0, [r7, #8]
 800724a:	f000 f823 	bl	8007294 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800724e:	68bb      	ldr	r3, [r7, #8]
 8007250:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007252:	f043 0210 	orr.w	r2, r3, #16
 8007256:	68bb      	ldr	r3, [r7, #8]
 8007258:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800725a:	68b8      	ldr	r0, [r7, #8]
 800725c:	f7ff ff6e 	bl	800713c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007260:	bf00      	nop
 8007262:	3710      	adds	r7, #16
 8007264:	46bd      	mov	sp, r7
 8007266:	bd80      	pop	{r7, pc}

08007268 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007268:	b480      	push	{r7}
 800726a:	b083      	sub	sp, #12
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	68da      	ldr	r2, [r3, #12]
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800727e:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2220      	movs	r2, #32
 8007284:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8007288:	bf00      	nop
 800728a:	370c      	adds	r7, #12
 800728c:	46bd      	mov	sp, r7
 800728e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007292:	4770      	bx	lr

08007294 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007294:	b480      	push	{r7}
 8007296:	b083      	sub	sp, #12
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	68da      	ldr	r2, [r3, #12]
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80072aa:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	695a      	ldr	r2, [r3, #20]
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f022 0201 	bic.w	r2, r2, #1
 80072ba:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2220      	movs	r2, #32
 80072c0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80072c4:	bf00      	nop
 80072c6:	370c      	adds	r7, #12
 80072c8:	46bd      	mov	sp, r7
 80072ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ce:	4770      	bx	lr

080072d0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b084      	sub	sp, #16
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072dc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	2200      	movs	r2, #0
 80072e2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	2200      	movs	r2, #0
 80072e8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80072ea:	68f8      	ldr	r0, [r7, #12]
 80072ec:	f7ff ff26 	bl	800713c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80072f0:	bf00      	nop
 80072f2:	3710      	adds	r7, #16
 80072f4:	46bd      	mov	sp, r7
 80072f6:	bd80      	pop	{r7, pc}

080072f8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80072f8:	b480      	push	{r7}
 80072fa:	b085      	sub	sp, #20
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007306:	b2db      	uxtb	r3, r3
 8007308:	2b21      	cmp	r3, #33	; 0x21
 800730a:	d144      	bne.n	8007396 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	689b      	ldr	r3, [r3, #8]
 8007310:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007314:	d11a      	bne.n	800734c <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6a1b      	ldr	r3, [r3, #32]
 800731a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	881b      	ldrh	r3, [r3, #0]
 8007320:	461a      	mov	r2, r3
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800732a:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	691b      	ldr	r3, [r3, #16]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d105      	bne.n	8007340 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6a1b      	ldr	r3, [r3, #32]
 8007338:	1c9a      	adds	r2, r3, #2
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	621a      	str	r2, [r3, #32]
 800733e:	e00e      	b.n	800735e <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	6a1b      	ldr	r3, [r3, #32]
 8007344:	1c5a      	adds	r2, r3, #1
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	621a      	str	r2, [r3, #32]
 800734a:	e008      	b.n	800735e <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6a1b      	ldr	r3, [r3, #32]
 8007350:	1c59      	adds	r1, r3, #1
 8007352:	687a      	ldr	r2, [r7, #4]
 8007354:	6211      	str	r1, [r2, #32]
 8007356:	781a      	ldrb	r2, [r3, #0]
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007362:	b29b      	uxth	r3, r3
 8007364:	3b01      	subs	r3, #1
 8007366:	b29b      	uxth	r3, r3
 8007368:	687a      	ldr	r2, [r7, #4]
 800736a:	4619      	mov	r1, r3
 800736c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800736e:	2b00      	cmp	r3, #0
 8007370:	d10f      	bne.n	8007392 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	68da      	ldr	r2, [r3, #12]
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007380:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	68da      	ldr	r2, [r3, #12]
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007390:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007392:	2300      	movs	r3, #0
 8007394:	e000      	b.n	8007398 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8007396:	2302      	movs	r3, #2
  }
}
 8007398:	4618      	mov	r0, r3
 800739a:	3714      	adds	r7, #20
 800739c:	46bd      	mov	sp, r7
 800739e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a2:	4770      	bx	lr

080073a4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b082      	sub	sp, #8
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	68da      	ldr	r2, [r3, #12]
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80073ba:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2220      	movs	r2, #32
 80073c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80073c4:	6878      	ldr	r0, [r7, #4]
 80073c6:	f7ff fea5 	bl	8007114 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80073ca:	2300      	movs	r3, #0
}
 80073cc:	4618      	mov	r0, r3
 80073ce:	3708      	adds	r7, #8
 80073d0:	46bd      	mov	sp, r7
 80073d2:	bd80      	pop	{r7, pc}

080073d4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b084      	sub	sp, #16
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80073e2:	b2db      	uxtb	r3, r3
 80073e4:	2b22      	cmp	r3, #34	; 0x22
 80073e6:	d171      	bne.n	80074cc <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	689b      	ldr	r3, [r3, #8]
 80073ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073f0:	d123      	bne.n	800743a <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073f6:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	691b      	ldr	r3, [r3, #16]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d10e      	bne.n	800741e <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	685b      	ldr	r3, [r3, #4]
 8007406:	b29b      	uxth	r3, r3
 8007408:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800740c:	b29a      	uxth	r2, r3
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007416:	1c9a      	adds	r2, r3, #2
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	629a      	str	r2, [r3, #40]	; 0x28
 800741c:	e029      	b.n	8007472 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	685b      	ldr	r3, [r3, #4]
 8007424:	b29b      	uxth	r3, r3
 8007426:	b2db      	uxtb	r3, r3
 8007428:	b29a      	uxth	r2, r3
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007432:	1c5a      	adds	r2, r3, #1
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	629a      	str	r2, [r3, #40]	; 0x28
 8007438:	e01b      	b.n	8007472 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	691b      	ldr	r3, [r3, #16]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d10a      	bne.n	8007458 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	6858      	ldr	r0, [r3, #4]
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800744c:	1c59      	adds	r1, r3, #1
 800744e:	687a      	ldr	r2, [r7, #4]
 8007450:	6291      	str	r1, [r2, #40]	; 0x28
 8007452:	b2c2      	uxtb	r2, r0
 8007454:	701a      	strb	r2, [r3, #0]
 8007456:	e00c      	b.n	8007472 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	685b      	ldr	r3, [r3, #4]
 800745e:	b2da      	uxtb	r2, r3
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007464:	1c58      	adds	r0, r3, #1
 8007466:	6879      	ldr	r1, [r7, #4]
 8007468:	6288      	str	r0, [r1, #40]	; 0x28
 800746a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800746e:	b2d2      	uxtb	r2, r2
 8007470:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007476:	b29b      	uxth	r3, r3
 8007478:	3b01      	subs	r3, #1
 800747a:	b29b      	uxth	r3, r3
 800747c:	687a      	ldr	r2, [r7, #4]
 800747e:	4619      	mov	r1, r3
 8007480:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007482:	2b00      	cmp	r3, #0
 8007484:	d120      	bne.n	80074c8 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	68da      	ldr	r2, [r3, #12]
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f022 0220 	bic.w	r2, r2, #32
 8007494:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	68da      	ldr	r2, [r3, #12]
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80074a4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	695a      	ldr	r2, [r3, #20]
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f022 0201 	bic.w	r2, r2, #1
 80074b4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2220      	movs	r2, #32
 80074ba:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80074be:	6878      	ldr	r0, [r7, #4]
 80074c0:	f7f9 fe72 	bl	80011a8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80074c4:	2300      	movs	r3, #0
 80074c6:	e002      	b.n	80074ce <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80074c8:	2300      	movs	r3, #0
 80074ca:	e000      	b.n	80074ce <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80074cc:	2302      	movs	r3, #2
  }
}
 80074ce:	4618      	mov	r0, r3
 80074d0:	3710      	adds	r7, #16
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bd80      	pop	{r7, pc}
	...

080074d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80074d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074dc:	b0bd      	sub	sp, #244	; 0xf4
 80074de:	af00      	add	r7, sp, #0
 80074e0:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80074e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	691b      	ldr	r3, [r3, #16]
 80074ec:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80074f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074f4:	68d9      	ldr	r1, [r3, #12]
 80074f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074fa:	681a      	ldr	r2, [r3, #0]
 80074fc:	ea40 0301 	orr.w	r3, r0, r1
 8007500:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007502:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007506:	689a      	ldr	r2, [r3, #8]
 8007508:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800750c:	691b      	ldr	r3, [r3, #16]
 800750e:	431a      	orrs	r2, r3
 8007510:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007514:	695b      	ldr	r3, [r3, #20]
 8007516:	431a      	orrs	r2, r3
 8007518:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800751c:	69db      	ldr	r3, [r3, #28]
 800751e:	4313      	orrs	r3, r2
 8007520:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 8007524:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	68db      	ldr	r3, [r3, #12]
 800752c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007530:	f021 010c 	bic.w	r1, r1, #12
 8007534:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007538:	681a      	ldr	r2, [r3, #0]
 800753a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800753e:	430b      	orrs	r3, r1
 8007540:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007542:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	695b      	ldr	r3, [r3, #20]
 800754a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800754e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007552:	6999      	ldr	r1, [r3, #24]
 8007554:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007558:	681a      	ldr	r2, [r3, #0]
 800755a:	ea40 0301 	orr.w	r3, r0, r1
 800755e:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007560:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007564:	69db      	ldr	r3, [r3, #28]
 8007566:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800756a:	f040 81a5 	bne.w	80078b8 <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800756e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007572:	681a      	ldr	r2, [r3, #0]
 8007574:	4bcd      	ldr	r3, [pc, #820]	; (80078ac <UART_SetConfig+0x3d4>)
 8007576:	429a      	cmp	r2, r3
 8007578:	d006      	beq.n	8007588 <UART_SetConfig+0xb0>
 800757a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800757e:	681a      	ldr	r2, [r3, #0]
 8007580:	4bcb      	ldr	r3, [pc, #812]	; (80078b0 <UART_SetConfig+0x3d8>)
 8007582:	429a      	cmp	r2, r3
 8007584:	f040 80cb 	bne.w	800771e <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007588:	f7fe fb84 	bl	8005c94 <HAL_RCC_GetPCLK2Freq>
 800758c:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007590:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007594:	461c      	mov	r4, r3
 8007596:	f04f 0500 	mov.w	r5, #0
 800759a:	4622      	mov	r2, r4
 800759c:	462b      	mov	r3, r5
 800759e:	1891      	adds	r1, r2, r2
 80075a0:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 80075a4:	415b      	adcs	r3, r3
 80075a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80075aa:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80075ae:	1912      	adds	r2, r2, r4
 80075b0:	eb45 0303 	adc.w	r3, r5, r3
 80075b4:	f04f 0000 	mov.w	r0, #0
 80075b8:	f04f 0100 	mov.w	r1, #0
 80075bc:	00d9      	lsls	r1, r3, #3
 80075be:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80075c2:	00d0      	lsls	r0, r2, #3
 80075c4:	4602      	mov	r2, r0
 80075c6:	460b      	mov	r3, r1
 80075c8:	1911      	adds	r1, r2, r4
 80075ca:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 80075ce:	416b      	adcs	r3, r5
 80075d0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80075d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075d8:	685b      	ldr	r3, [r3, #4]
 80075da:	461a      	mov	r2, r3
 80075dc:	f04f 0300 	mov.w	r3, #0
 80075e0:	1891      	adds	r1, r2, r2
 80075e2:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 80075e6:	415b      	adcs	r3, r3
 80075e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80075ec:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 80075f0:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 80075f4:	f7f9 fb1a 	bl	8000c2c <__aeabi_uldivmod>
 80075f8:	4602      	mov	r2, r0
 80075fa:	460b      	mov	r3, r1
 80075fc:	4bad      	ldr	r3, [pc, #692]	; (80078b4 <UART_SetConfig+0x3dc>)
 80075fe:	fba3 2302 	umull	r2, r3, r3, r2
 8007602:	095b      	lsrs	r3, r3, #5
 8007604:	011e      	lsls	r6, r3, #4
 8007606:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800760a:	461c      	mov	r4, r3
 800760c:	f04f 0500 	mov.w	r5, #0
 8007610:	4622      	mov	r2, r4
 8007612:	462b      	mov	r3, r5
 8007614:	1891      	adds	r1, r2, r2
 8007616:	67b9      	str	r1, [r7, #120]	; 0x78
 8007618:	415b      	adcs	r3, r3
 800761a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800761c:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8007620:	1912      	adds	r2, r2, r4
 8007622:	eb45 0303 	adc.w	r3, r5, r3
 8007626:	f04f 0000 	mov.w	r0, #0
 800762a:	f04f 0100 	mov.w	r1, #0
 800762e:	00d9      	lsls	r1, r3, #3
 8007630:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007634:	00d0      	lsls	r0, r2, #3
 8007636:	4602      	mov	r2, r0
 8007638:	460b      	mov	r3, r1
 800763a:	1911      	adds	r1, r2, r4
 800763c:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8007640:	416b      	adcs	r3, r5
 8007642:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007646:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800764a:	685b      	ldr	r3, [r3, #4]
 800764c:	461a      	mov	r2, r3
 800764e:	f04f 0300 	mov.w	r3, #0
 8007652:	1891      	adds	r1, r2, r2
 8007654:	6739      	str	r1, [r7, #112]	; 0x70
 8007656:	415b      	adcs	r3, r3
 8007658:	677b      	str	r3, [r7, #116]	; 0x74
 800765a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800765e:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8007662:	f7f9 fae3 	bl	8000c2c <__aeabi_uldivmod>
 8007666:	4602      	mov	r2, r0
 8007668:	460b      	mov	r3, r1
 800766a:	4b92      	ldr	r3, [pc, #584]	; (80078b4 <UART_SetConfig+0x3dc>)
 800766c:	fba3 1302 	umull	r1, r3, r3, r2
 8007670:	095b      	lsrs	r3, r3, #5
 8007672:	2164      	movs	r1, #100	; 0x64
 8007674:	fb01 f303 	mul.w	r3, r1, r3
 8007678:	1ad3      	subs	r3, r2, r3
 800767a:	00db      	lsls	r3, r3, #3
 800767c:	3332      	adds	r3, #50	; 0x32
 800767e:	4a8d      	ldr	r2, [pc, #564]	; (80078b4 <UART_SetConfig+0x3dc>)
 8007680:	fba2 2303 	umull	r2, r3, r2, r3
 8007684:	095b      	lsrs	r3, r3, #5
 8007686:	005b      	lsls	r3, r3, #1
 8007688:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800768c:	441e      	add	r6, r3
 800768e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007692:	4618      	mov	r0, r3
 8007694:	f04f 0100 	mov.w	r1, #0
 8007698:	4602      	mov	r2, r0
 800769a:	460b      	mov	r3, r1
 800769c:	1894      	adds	r4, r2, r2
 800769e:	66bc      	str	r4, [r7, #104]	; 0x68
 80076a0:	415b      	adcs	r3, r3
 80076a2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80076a4:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80076a8:	1812      	adds	r2, r2, r0
 80076aa:	eb41 0303 	adc.w	r3, r1, r3
 80076ae:	f04f 0400 	mov.w	r4, #0
 80076b2:	f04f 0500 	mov.w	r5, #0
 80076b6:	00dd      	lsls	r5, r3, #3
 80076b8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80076bc:	00d4      	lsls	r4, r2, #3
 80076be:	4622      	mov	r2, r4
 80076c0:	462b      	mov	r3, r5
 80076c2:	1814      	adds	r4, r2, r0
 80076c4:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 80076c8:	414b      	adcs	r3, r1
 80076ca:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80076ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076d2:	685b      	ldr	r3, [r3, #4]
 80076d4:	461a      	mov	r2, r3
 80076d6:	f04f 0300 	mov.w	r3, #0
 80076da:	1891      	adds	r1, r2, r2
 80076dc:	6639      	str	r1, [r7, #96]	; 0x60
 80076de:	415b      	adcs	r3, r3
 80076e0:	667b      	str	r3, [r7, #100]	; 0x64
 80076e2:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80076e6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80076ea:	f7f9 fa9f 	bl	8000c2c <__aeabi_uldivmod>
 80076ee:	4602      	mov	r2, r0
 80076f0:	460b      	mov	r3, r1
 80076f2:	4b70      	ldr	r3, [pc, #448]	; (80078b4 <UART_SetConfig+0x3dc>)
 80076f4:	fba3 1302 	umull	r1, r3, r3, r2
 80076f8:	095b      	lsrs	r3, r3, #5
 80076fa:	2164      	movs	r1, #100	; 0x64
 80076fc:	fb01 f303 	mul.w	r3, r1, r3
 8007700:	1ad3      	subs	r3, r2, r3
 8007702:	00db      	lsls	r3, r3, #3
 8007704:	3332      	adds	r3, #50	; 0x32
 8007706:	4a6b      	ldr	r2, [pc, #428]	; (80078b4 <UART_SetConfig+0x3dc>)
 8007708:	fba2 2303 	umull	r2, r3, r2, r3
 800770c:	095b      	lsrs	r3, r3, #5
 800770e:	f003 0207 	and.w	r2, r3, #7
 8007712:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	4432      	add	r2, r6
 800771a:	609a      	str	r2, [r3, #8]
 800771c:	e26d      	b.n	8007bfa <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800771e:	f7fe faa5 	bl	8005c6c <HAL_RCC_GetPCLK1Freq>
 8007722:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007726:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800772a:	461c      	mov	r4, r3
 800772c:	f04f 0500 	mov.w	r5, #0
 8007730:	4622      	mov	r2, r4
 8007732:	462b      	mov	r3, r5
 8007734:	1891      	adds	r1, r2, r2
 8007736:	65b9      	str	r1, [r7, #88]	; 0x58
 8007738:	415b      	adcs	r3, r3
 800773a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800773c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007740:	1912      	adds	r2, r2, r4
 8007742:	eb45 0303 	adc.w	r3, r5, r3
 8007746:	f04f 0000 	mov.w	r0, #0
 800774a:	f04f 0100 	mov.w	r1, #0
 800774e:	00d9      	lsls	r1, r3, #3
 8007750:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007754:	00d0      	lsls	r0, r2, #3
 8007756:	4602      	mov	r2, r0
 8007758:	460b      	mov	r3, r1
 800775a:	1911      	adds	r1, r2, r4
 800775c:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8007760:	416b      	adcs	r3, r5
 8007762:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007766:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800776a:	685b      	ldr	r3, [r3, #4]
 800776c:	461a      	mov	r2, r3
 800776e:	f04f 0300 	mov.w	r3, #0
 8007772:	1891      	adds	r1, r2, r2
 8007774:	6539      	str	r1, [r7, #80]	; 0x50
 8007776:	415b      	adcs	r3, r3
 8007778:	657b      	str	r3, [r7, #84]	; 0x54
 800777a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800777e:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8007782:	f7f9 fa53 	bl	8000c2c <__aeabi_uldivmod>
 8007786:	4602      	mov	r2, r0
 8007788:	460b      	mov	r3, r1
 800778a:	4b4a      	ldr	r3, [pc, #296]	; (80078b4 <UART_SetConfig+0x3dc>)
 800778c:	fba3 2302 	umull	r2, r3, r3, r2
 8007790:	095b      	lsrs	r3, r3, #5
 8007792:	011e      	lsls	r6, r3, #4
 8007794:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007798:	461c      	mov	r4, r3
 800779a:	f04f 0500 	mov.w	r5, #0
 800779e:	4622      	mov	r2, r4
 80077a0:	462b      	mov	r3, r5
 80077a2:	1891      	adds	r1, r2, r2
 80077a4:	64b9      	str	r1, [r7, #72]	; 0x48
 80077a6:	415b      	adcs	r3, r3
 80077a8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80077aa:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80077ae:	1912      	adds	r2, r2, r4
 80077b0:	eb45 0303 	adc.w	r3, r5, r3
 80077b4:	f04f 0000 	mov.w	r0, #0
 80077b8:	f04f 0100 	mov.w	r1, #0
 80077bc:	00d9      	lsls	r1, r3, #3
 80077be:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80077c2:	00d0      	lsls	r0, r2, #3
 80077c4:	4602      	mov	r2, r0
 80077c6:	460b      	mov	r3, r1
 80077c8:	1911      	adds	r1, r2, r4
 80077ca:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 80077ce:	416b      	adcs	r3, r5
 80077d0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80077d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077d8:	685b      	ldr	r3, [r3, #4]
 80077da:	461a      	mov	r2, r3
 80077dc:	f04f 0300 	mov.w	r3, #0
 80077e0:	1891      	adds	r1, r2, r2
 80077e2:	6439      	str	r1, [r7, #64]	; 0x40
 80077e4:	415b      	adcs	r3, r3
 80077e6:	647b      	str	r3, [r7, #68]	; 0x44
 80077e8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80077ec:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 80077f0:	f7f9 fa1c 	bl	8000c2c <__aeabi_uldivmod>
 80077f4:	4602      	mov	r2, r0
 80077f6:	460b      	mov	r3, r1
 80077f8:	4b2e      	ldr	r3, [pc, #184]	; (80078b4 <UART_SetConfig+0x3dc>)
 80077fa:	fba3 1302 	umull	r1, r3, r3, r2
 80077fe:	095b      	lsrs	r3, r3, #5
 8007800:	2164      	movs	r1, #100	; 0x64
 8007802:	fb01 f303 	mul.w	r3, r1, r3
 8007806:	1ad3      	subs	r3, r2, r3
 8007808:	00db      	lsls	r3, r3, #3
 800780a:	3332      	adds	r3, #50	; 0x32
 800780c:	4a29      	ldr	r2, [pc, #164]	; (80078b4 <UART_SetConfig+0x3dc>)
 800780e:	fba2 2303 	umull	r2, r3, r2, r3
 8007812:	095b      	lsrs	r3, r3, #5
 8007814:	005b      	lsls	r3, r3, #1
 8007816:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800781a:	441e      	add	r6, r3
 800781c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007820:	4618      	mov	r0, r3
 8007822:	f04f 0100 	mov.w	r1, #0
 8007826:	4602      	mov	r2, r0
 8007828:	460b      	mov	r3, r1
 800782a:	1894      	adds	r4, r2, r2
 800782c:	63bc      	str	r4, [r7, #56]	; 0x38
 800782e:	415b      	adcs	r3, r3
 8007830:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007832:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007836:	1812      	adds	r2, r2, r0
 8007838:	eb41 0303 	adc.w	r3, r1, r3
 800783c:	f04f 0400 	mov.w	r4, #0
 8007840:	f04f 0500 	mov.w	r5, #0
 8007844:	00dd      	lsls	r5, r3, #3
 8007846:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800784a:	00d4      	lsls	r4, r2, #3
 800784c:	4622      	mov	r2, r4
 800784e:	462b      	mov	r3, r5
 8007850:	1814      	adds	r4, r2, r0
 8007852:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 8007856:	414b      	adcs	r3, r1
 8007858:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800785c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007860:	685b      	ldr	r3, [r3, #4]
 8007862:	461a      	mov	r2, r3
 8007864:	f04f 0300 	mov.w	r3, #0
 8007868:	1891      	adds	r1, r2, r2
 800786a:	6339      	str	r1, [r7, #48]	; 0x30
 800786c:	415b      	adcs	r3, r3
 800786e:	637b      	str	r3, [r7, #52]	; 0x34
 8007870:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007874:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007878:	f7f9 f9d8 	bl	8000c2c <__aeabi_uldivmod>
 800787c:	4602      	mov	r2, r0
 800787e:	460b      	mov	r3, r1
 8007880:	4b0c      	ldr	r3, [pc, #48]	; (80078b4 <UART_SetConfig+0x3dc>)
 8007882:	fba3 1302 	umull	r1, r3, r3, r2
 8007886:	095b      	lsrs	r3, r3, #5
 8007888:	2164      	movs	r1, #100	; 0x64
 800788a:	fb01 f303 	mul.w	r3, r1, r3
 800788e:	1ad3      	subs	r3, r2, r3
 8007890:	00db      	lsls	r3, r3, #3
 8007892:	3332      	adds	r3, #50	; 0x32
 8007894:	4a07      	ldr	r2, [pc, #28]	; (80078b4 <UART_SetConfig+0x3dc>)
 8007896:	fba2 2303 	umull	r2, r3, r2, r3
 800789a:	095b      	lsrs	r3, r3, #5
 800789c:	f003 0207 	and.w	r2, r3, #7
 80078a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	4432      	add	r2, r6
 80078a8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80078aa:	e1a6      	b.n	8007bfa <UART_SetConfig+0x722>
 80078ac:	40011000 	.word	0x40011000
 80078b0:	40011400 	.word	0x40011400
 80078b4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80078b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078bc:	681a      	ldr	r2, [r3, #0]
 80078be:	4bd1      	ldr	r3, [pc, #836]	; (8007c04 <UART_SetConfig+0x72c>)
 80078c0:	429a      	cmp	r2, r3
 80078c2:	d006      	beq.n	80078d2 <UART_SetConfig+0x3fa>
 80078c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078c8:	681a      	ldr	r2, [r3, #0]
 80078ca:	4bcf      	ldr	r3, [pc, #828]	; (8007c08 <UART_SetConfig+0x730>)
 80078cc:	429a      	cmp	r2, r3
 80078ce:	f040 80ca 	bne.w	8007a66 <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 80078d2:	f7fe f9df 	bl	8005c94 <HAL_RCC_GetPCLK2Freq>
 80078d6:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80078da:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80078de:	461c      	mov	r4, r3
 80078e0:	f04f 0500 	mov.w	r5, #0
 80078e4:	4622      	mov	r2, r4
 80078e6:	462b      	mov	r3, r5
 80078e8:	1891      	adds	r1, r2, r2
 80078ea:	62b9      	str	r1, [r7, #40]	; 0x28
 80078ec:	415b      	adcs	r3, r3
 80078ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80078f0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80078f4:	1912      	adds	r2, r2, r4
 80078f6:	eb45 0303 	adc.w	r3, r5, r3
 80078fa:	f04f 0000 	mov.w	r0, #0
 80078fe:	f04f 0100 	mov.w	r1, #0
 8007902:	00d9      	lsls	r1, r3, #3
 8007904:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007908:	00d0      	lsls	r0, r2, #3
 800790a:	4602      	mov	r2, r0
 800790c:	460b      	mov	r3, r1
 800790e:	eb12 0a04 	adds.w	sl, r2, r4
 8007912:	eb43 0b05 	adc.w	fp, r3, r5
 8007916:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800791a:	685b      	ldr	r3, [r3, #4]
 800791c:	4618      	mov	r0, r3
 800791e:	f04f 0100 	mov.w	r1, #0
 8007922:	f04f 0200 	mov.w	r2, #0
 8007926:	f04f 0300 	mov.w	r3, #0
 800792a:	008b      	lsls	r3, r1, #2
 800792c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007930:	0082      	lsls	r2, r0, #2
 8007932:	4650      	mov	r0, sl
 8007934:	4659      	mov	r1, fp
 8007936:	f7f9 f979 	bl	8000c2c <__aeabi_uldivmod>
 800793a:	4602      	mov	r2, r0
 800793c:	460b      	mov	r3, r1
 800793e:	4bb3      	ldr	r3, [pc, #716]	; (8007c0c <UART_SetConfig+0x734>)
 8007940:	fba3 2302 	umull	r2, r3, r3, r2
 8007944:	095b      	lsrs	r3, r3, #5
 8007946:	011e      	lsls	r6, r3, #4
 8007948:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800794c:	4618      	mov	r0, r3
 800794e:	f04f 0100 	mov.w	r1, #0
 8007952:	4602      	mov	r2, r0
 8007954:	460b      	mov	r3, r1
 8007956:	1894      	adds	r4, r2, r2
 8007958:	623c      	str	r4, [r7, #32]
 800795a:	415b      	adcs	r3, r3
 800795c:	627b      	str	r3, [r7, #36]	; 0x24
 800795e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007962:	1812      	adds	r2, r2, r0
 8007964:	eb41 0303 	adc.w	r3, r1, r3
 8007968:	f04f 0400 	mov.w	r4, #0
 800796c:	f04f 0500 	mov.w	r5, #0
 8007970:	00dd      	lsls	r5, r3, #3
 8007972:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007976:	00d4      	lsls	r4, r2, #3
 8007978:	4622      	mov	r2, r4
 800797a:	462b      	mov	r3, r5
 800797c:	1814      	adds	r4, r2, r0
 800797e:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8007982:	414b      	adcs	r3, r1
 8007984:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007988:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800798c:	685b      	ldr	r3, [r3, #4]
 800798e:	4618      	mov	r0, r3
 8007990:	f04f 0100 	mov.w	r1, #0
 8007994:	f04f 0200 	mov.w	r2, #0
 8007998:	f04f 0300 	mov.w	r3, #0
 800799c:	008b      	lsls	r3, r1, #2
 800799e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80079a2:	0082      	lsls	r2, r0, #2
 80079a4:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 80079a8:	f7f9 f940 	bl	8000c2c <__aeabi_uldivmod>
 80079ac:	4602      	mov	r2, r0
 80079ae:	460b      	mov	r3, r1
 80079b0:	4b96      	ldr	r3, [pc, #600]	; (8007c0c <UART_SetConfig+0x734>)
 80079b2:	fba3 1302 	umull	r1, r3, r3, r2
 80079b6:	095b      	lsrs	r3, r3, #5
 80079b8:	2164      	movs	r1, #100	; 0x64
 80079ba:	fb01 f303 	mul.w	r3, r1, r3
 80079be:	1ad3      	subs	r3, r2, r3
 80079c0:	011b      	lsls	r3, r3, #4
 80079c2:	3332      	adds	r3, #50	; 0x32
 80079c4:	4a91      	ldr	r2, [pc, #580]	; (8007c0c <UART_SetConfig+0x734>)
 80079c6:	fba2 2303 	umull	r2, r3, r2, r3
 80079ca:	095b      	lsrs	r3, r3, #5
 80079cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80079d0:	441e      	add	r6, r3
 80079d2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80079d6:	4618      	mov	r0, r3
 80079d8:	f04f 0100 	mov.w	r1, #0
 80079dc:	4602      	mov	r2, r0
 80079de:	460b      	mov	r3, r1
 80079e0:	1894      	adds	r4, r2, r2
 80079e2:	61bc      	str	r4, [r7, #24]
 80079e4:	415b      	adcs	r3, r3
 80079e6:	61fb      	str	r3, [r7, #28]
 80079e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80079ec:	1812      	adds	r2, r2, r0
 80079ee:	eb41 0303 	adc.w	r3, r1, r3
 80079f2:	f04f 0400 	mov.w	r4, #0
 80079f6:	f04f 0500 	mov.w	r5, #0
 80079fa:	00dd      	lsls	r5, r3, #3
 80079fc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007a00:	00d4      	lsls	r4, r2, #3
 8007a02:	4622      	mov	r2, r4
 8007a04:	462b      	mov	r3, r5
 8007a06:	1814      	adds	r4, r2, r0
 8007a08:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 8007a0c:	414b      	adcs	r3, r1
 8007a0e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007a12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a16:	685b      	ldr	r3, [r3, #4]
 8007a18:	4618      	mov	r0, r3
 8007a1a:	f04f 0100 	mov.w	r1, #0
 8007a1e:	f04f 0200 	mov.w	r2, #0
 8007a22:	f04f 0300 	mov.w	r3, #0
 8007a26:	008b      	lsls	r3, r1, #2
 8007a28:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007a2c:	0082      	lsls	r2, r0, #2
 8007a2e:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8007a32:	f7f9 f8fb 	bl	8000c2c <__aeabi_uldivmod>
 8007a36:	4602      	mov	r2, r0
 8007a38:	460b      	mov	r3, r1
 8007a3a:	4b74      	ldr	r3, [pc, #464]	; (8007c0c <UART_SetConfig+0x734>)
 8007a3c:	fba3 1302 	umull	r1, r3, r3, r2
 8007a40:	095b      	lsrs	r3, r3, #5
 8007a42:	2164      	movs	r1, #100	; 0x64
 8007a44:	fb01 f303 	mul.w	r3, r1, r3
 8007a48:	1ad3      	subs	r3, r2, r3
 8007a4a:	011b      	lsls	r3, r3, #4
 8007a4c:	3332      	adds	r3, #50	; 0x32
 8007a4e:	4a6f      	ldr	r2, [pc, #444]	; (8007c0c <UART_SetConfig+0x734>)
 8007a50:	fba2 2303 	umull	r2, r3, r2, r3
 8007a54:	095b      	lsrs	r3, r3, #5
 8007a56:	f003 020f 	and.w	r2, r3, #15
 8007a5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	4432      	add	r2, r6
 8007a62:	609a      	str	r2, [r3, #8]
 8007a64:	e0c9      	b.n	8007bfa <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 8007a66:	f7fe f901 	bl	8005c6c <HAL_RCC_GetPCLK1Freq>
 8007a6a:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007a6e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007a72:	461c      	mov	r4, r3
 8007a74:	f04f 0500 	mov.w	r5, #0
 8007a78:	4622      	mov	r2, r4
 8007a7a:	462b      	mov	r3, r5
 8007a7c:	1891      	adds	r1, r2, r2
 8007a7e:	6139      	str	r1, [r7, #16]
 8007a80:	415b      	adcs	r3, r3
 8007a82:	617b      	str	r3, [r7, #20]
 8007a84:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007a88:	1912      	adds	r2, r2, r4
 8007a8a:	eb45 0303 	adc.w	r3, r5, r3
 8007a8e:	f04f 0000 	mov.w	r0, #0
 8007a92:	f04f 0100 	mov.w	r1, #0
 8007a96:	00d9      	lsls	r1, r3, #3
 8007a98:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007a9c:	00d0      	lsls	r0, r2, #3
 8007a9e:	4602      	mov	r2, r0
 8007aa0:	460b      	mov	r3, r1
 8007aa2:	eb12 0804 	adds.w	r8, r2, r4
 8007aa6:	eb43 0905 	adc.w	r9, r3, r5
 8007aaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007aae:	685b      	ldr	r3, [r3, #4]
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	f04f 0100 	mov.w	r1, #0
 8007ab6:	f04f 0200 	mov.w	r2, #0
 8007aba:	f04f 0300 	mov.w	r3, #0
 8007abe:	008b      	lsls	r3, r1, #2
 8007ac0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007ac4:	0082      	lsls	r2, r0, #2
 8007ac6:	4640      	mov	r0, r8
 8007ac8:	4649      	mov	r1, r9
 8007aca:	f7f9 f8af 	bl	8000c2c <__aeabi_uldivmod>
 8007ace:	4602      	mov	r2, r0
 8007ad0:	460b      	mov	r3, r1
 8007ad2:	4b4e      	ldr	r3, [pc, #312]	; (8007c0c <UART_SetConfig+0x734>)
 8007ad4:	fba3 2302 	umull	r2, r3, r3, r2
 8007ad8:	095b      	lsrs	r3, r3, #5
 8007ada:	011e      	lsls	r6, r3, #4
 8007adc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	f04f 0100 	mov.w	r1, #0
 8007ae6:	4602      	mov	r2, r0
 8007ae8:	460b      	mov	r3, r1
 8007aea:	1894      	adds	r4, r2, r2
 8007aec:	60bc      	str	r4, [r7, #8]
 8007aee:	415b      	adcs	r3, r3
 8007af0:	60fb      	str	r3, [r7, #12]
 8007af2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007af6:	1812      	adds	r2, r2, r0
 8007af8:	eb41 0303 	adc.w	r3, r1, r3
 8007afc:	f04f 0400 	mov.w	r4, #0
 8007b00:	f04f 0500 	mov.w	r5, #0
 8007b04:	00dd      	lsls	r5, r3, #3
 8007b06:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007b0a:	00d4      	lsls	r4, r2, #3
 8007b0c:	4622      	mov	r2, r4
 8007b0e:	462b      	mov	r3, r5
 8007b10:	1814      	adds	r4, r2, r0
 8007b12:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8007b16:	414b      	adcs	r3, r1
 8007b18:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007b1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b20:	685b      	ldr	r3, [r3, #4]
 8007b22:	4618      	mov	r0, r3
 8007b24:	f04f 0100 	mov.w	r1, #0
 8007b28:	f04f 0200 	mov.w	r2, #0
 8007b2c:	f04f 0300 	mov.w	r3, #0
 8007b30:	008b      	lsls	r3, r1, #2
 8007b32:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007b36:	0082      	lsls	r2, r0, #2
 8007b38:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007b3c:	f7f9 f876 	bl	8000c2c <__aeabi_uldivmod>
 8007b40:	4602      	mov	r2, r0
 8007b42:	460b      	mov	r3, r1
 8007b44:	4b31      	ldr	r3, [pc, #196]	; (8007c0c <UART_SetConfig+0x734>)
 8007b46:	fba3 1302 	umull	r1, r3, r3, r2
 8007b4a:	095b      	lsrs	r3, r3, #5
 8007b4c:	2164      	movs	r1, #100	; 0x64
 8007b4e:	fb01 f303 	mul.w	r3, r1, r3
 8007b52:	1ad3      	subs	r3, r2, r3
 8007b54:	011b      	lsls	r3, r3, #4
 8007b56:	3332      	adds	r3, #50	; 0x32
 8007b58:	4a2c      	ldr	r2, [pc, #176]	; (8007c0c <UART_SetConfig+0x734>)
 8007b5a:	fba2 2303 	umull	r2, r3, r2, r3
 8007b5e:	095b      	lsrs	r3, r3, #5
 8007b60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007b64:	441e      	add	r6, r3
 8007b66:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	f04f 0100 	mov.w	r1, #0
 8007b70:	4602      	mov	r2, r0
 8007b72:	460b      	mov	r3, r1
 8007b74:	1894      	adds	r4, r2, r2
 8007b76:	603c      	str	r4, [r7, #0]
 8007b78:	415b      	adcs	r3, r3
 8007b7a:	607b      	str	r3, [r7, #4]
 8007b7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b80:	1812      	adds	r2, r2, r0
 8007b82:	eb41 0303 	adc.w	r3, r1, r3
 8007b86:	f04f 0400 	mov.w	r4, #0
 8007b8a:	f04f 0500 	mov.w	r5, #0
 8007b8e:	00dd      	lsls	r5, r3, #3
 8007b90:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007b94:	00d4      	lsls	r4, r2, #3
 8007b96:	4622      	mov	r2, r4
 8007b98:	462b      	mov	r3, r5
 8007b9a:	1814      	adds	r4, r2, r0
 8007b9c:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8007ba0:	414b      	adcs	r3, r1
 8007ba2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007ba6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007baa:	685b      	ldr	r3, [r3, #4]
 8007bac:	4618      	mov	r0, r3
 8007bae:	f04f 0100 	mov.w	r1, #0
 8007bb2:	f04f 0200 	mov.w	r2, #0
 8007bb6:	f04f 0300 	mov.w	r3, #0
 8007bba:	008b      	lsls	r3, r1, #2
 8007bbc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007bc0:	0082      	lsls	r2, r0, #2
 8007bc2:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8007bc6:	f7f9 f831 	bl	8000c2c <__aeabi_uldivmod>
 8007bca:	4602      	mov	r2, r0
 8007bcc:	460b      	mov	r3, r1
 8007bce:	4b0f      	ldr	r3, [pc, #60]	; (8007c0c <UART_SetConfig+0x734>)
 8007bd0:	fba3 1302 	umull	r1, r3, r3, r2
 8007bd4:	095b      	lsrs	r3, r3, #5
 8007bd6:	2164      	movs	r1, #100	; 0x64
 8007bd8:	fb01 f303 	mul.w	r3, r1, r3
 8007bdc:	1ad3      	subs	r3, r2, r3
 8007bde:	011b      	lsls	r3, r3, #4
 8007be0:	3332      	adds	r3, #50	; 0x32
 8007be2:	4a0a      	ldr	r2, [pc, #40]	; (8007c0c <UART_SetConfig+0x734>)
 8007be4:	fba2 2303 	umull	r2, r3, r2, r3
 8007be8:	095b      	lsrs	r3, r3, #5
 8007bea:	f003 020f 	and.w	r2, r3, #15
 8007bee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	4432      	add	r2, r6
 8007bf6:	609a      	str	r2, [r3, #8]
}
 8007bf8:	e7ff      	b.n	8007bfa <UART_SetConfig+0x722>
 8007bfa:	bf00      	nop
 8007bfc:	37f4      	adds	r7, #244	; 0xf4
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c04:	40011000 	.word	0x40011000
 8007c08:	40011400 	.word	0x40011400
 8007c0c:	51eb851f 	.word	0x51eb851f

08007c10 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007c10:	b480      	push	{r7}
 8007c12:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8007c14:	bf00      	nop
 8007c16:	46bd      	mov	sp, r7
 8007c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1c:	4770      	bx	lr
	...

08007c20 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007c20:	b480      	push	{r7}
 8007c22:	b085      	sub	sp, #20
 8007c24:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007c26:	f3ef 8305 	mrs	r3, IPSR
 8007c2a:	60bb      	str	r3, [r7, #8]
  return(result);
 8007c2c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d10f      	bne.n	8007c52 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007c32:	f3ef 8310 	mrs	r3, PRIMASK
 8007c36:	607b      	str	r3, [r7, #4]
  return(result);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d105      	bne.n	8007c4a <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007c3e:	f3ef 8311 	mrs	r3, BASEPRI
 8007c42:	603b      	str	r3, [r7, #0]
  return(result);
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d007      	beq.n	8007c5a <osKernelInitialize+0x3a>
 8007c4a:	4b0e      	ldr	r3, [pc, #56]	; (8007c84 <osKernelInitialize+0x64>)
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	2b02      	cmp	r3, #2
 8007c50:	d103      	bne.n	8007c5a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8007c52:	f06f 0305 	mvn.w	r3, #5
 8007c56:	60fb      	str	r3, [r7, #12]
 8007c58:	e00c      	b.n	8007c74 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007c5a:	4b0a      	ldr	r3, [pc, #40]	; (8007c84 <osKernelInitialize+0x64>)
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d105      	bne.n	8007c6e <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007c62:	4b08      	ldr	r3, [pc, #32]	; (8007c84 <osKernelInitialize+0x64>)
 8007c64:	2201      	movs	r2, #1
 8007c66:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007c68:	2300      	movs	r3, #0
 8007c6a:	60fb      	str	r3, [r7, #12]
 8007c6c:	e002      	b.n	8007c74 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8007c6e:	f04f 33ff 	mov.w	r3, #4294967295
 8007c72:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8007c74:	68fb      	ldr	r3, [r7, #12]
}
 8007c76:	4618      	mov	r0, r3
 8007c78:	3714      	adds	r7, #20
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c80:	4770      	bx	lr
 8007c82:	bf00      	nop
 8007c84:	20004f38 	.word	0x20004f38

08007c88 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b084      	sub	sp, #16
 8007c8c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007c8e:	f3ef 8305 	mrs	r3, IPSR
 8007c92:	60bb      	str	r3, [r7, #8]
  return(result);
 8007c94:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d10f      	bne.n	8007cba <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007c9a:	f3ef 8310 	mrs	r3, PRIMASK
 8007c9e:	607b      	str	r3, [r7, #4]
  return(result);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d105      	bne.n	8007cb2 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007ca6:	f3ef 8311 	mrs	r3, BASEPRI
 8007caa:	603b      	str	r3, [r7, #0]
  return(result);
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d007      	beq.n	8007cc2 <osKernelStart+0x3a>
 8007cb2:	4b0f      	ldr	r3, [pc, #60]	; (8007cf0 <osKernelStart+0x68>)
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	2b02      	cmp	r3, #2
 8007cb8:	d103      	bne.n	8007cc2 <osKernelStart+0x3a>
    stat = osErrorISR;
 8007cba:	f06f 0305 	mvn.w	r3, #5
 8007cbe:	60fb      	str	r3, [r7, #12]
 8007cc0:	e010      	b.n	8007ce4 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007cc2:	4b0b      	ldr	r3, [pc, #44]	; (8007cf0 <osKernelStart+0x68>)
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	2b01      	cmp	r3, #1
 8007cc8:	d109      	bne.n	8007cde <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007cca:	f7ff ffa1 	bl	8007c10 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007cce:	4b08      	ldr	r3, [pc, #32]	; (8007cf0 <osKernelStart+0x68>)
 8007cd0:	2202      	movs	r2, #2
 8007cd2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007cd4:	f001 fdec 	bl	80098b0 <vTaskStartScheduler>
      stat = osOK;
 8007cd8:	2300      	movs	r3, #0
 8007cda:	60fb      	str	r3, [r7, #12]
 8007cdc:	e002      	b.n	8007ce4 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8007cde:	f04f 33ff 	mov.w	r3, #4294967295
 8007ce2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8007ce4:	68fb      	ldr	r3, [r7, #12]
}
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	3710      	adds	r7, #16
 8007cea:	46bd      	mov	sp, r7
 8007cec:	bd80      	pop	{r7, pc}
 8007cee:	bf00      	nop
 8007cf0:	20004f38 	.word	0x20004f38

08007cf4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b090      	sub	sp, #64	; 0x40
 8007cf8:	af04      	add	r7, sp, #16
 8007cfa:	60f8      	str	r0, [r7, #12]
 8007cfc:	60b9      	str	r1, [r7, #8]
 8007cfe:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007d00:	2300      	movs	r3, #0
 8007d02:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007d04:	f3ef 8305 	mrs	r3, IPSR
 8007d08:	61fb      	str	r3, [r7, #28]
  return(result);
 8007d0a:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	f040 808f 	bne.w	8007e30 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007d12:	f3ef 8310 	mrs	r3, PRIMASK
 8007d16:	61bb      	str	r3, [r7, #24]
  return(result);
 8007d18:	69bb      	ldr	r3, [r7, #24]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d105      	bne.n	8007d2a <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007d1e:	f3ef 8311 	mrs	r3, BASEPRI
 8007d22:	617b      	str	r3, [r7, #20]
  return(result);
 8007d24:	697b      	ldr	r3, [r7, #20]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d003      	beq.n	8007d32 <osThreadNew+0x3e>
 8007d2a:	4b44      	ldr	r3, [pc, #272]	; (8007e3c <osThreadNew+0x148>)
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	2b02      	cmp	r3, #2
 8007d30:	d07e      	beq.n	8007e30 <osThreadNew+0x13c>
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d07b      	beq.n	8007e30 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8007d38:	2380      	movs	r3, #128	; 0x80
 8007d3a:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8007d3c:	2318      	movs	r3, #24
 8007d3e:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8007d40:	2300      	movs	r3, #0
 8007d42:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8007d44:	f04f 33ff 	mov.w	r3, #4294967295
 8007d48:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d045      	beq.n	8007ddc <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d002      	beq.n	8007d5e <osThreadNew+0x6a>
        name = attr->name;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	699b      	ldr	r3, [r3, #24]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d002      	beq.n	8007d6c <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	699b      	ldr	r3, [r3, #24]
 8007d6a:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d008      	beq.n	8007d84 <osThreadNew+0x90>
 8007d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d74:	2b38      	cmp	r3, #56	; 0x38
 8007d76:	d805      	bhi.n	8007d84 <osThreadNew+0x90>
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	685b      	ldr	r3, [r3, #4]
 8007d7c:	f003 0301 	and.w	r3, r3, #1
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d001      	beq.n	8007d88 <osThreadNew+0x94>
        return (NULL);
 8007d84:	2300      	movs	r3, #0
 8007d86:	e054      	b.n	8007e32 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	695b      	ldr	r3, [r3, #20]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d003      	beq.n	8007d98 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	695b      	ldr	r3, [r3, #20]
 8007d94:	089b      	lsrs	r3, r3, #2
 8007d96:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	689b      	ldr	r3, [r3, #8]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d00e      	beq.n	8007dbe <osThreadNew+0xca>
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	68db      	ldr	r3, [r3, #12]
 8007da4:	2b5b      	cmp	r3, #91	; 0x5b
 8007da6:	d90a      	bls.n	8007dbe <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d006      	beq.n	8007dbe <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	695b      	ldr	r3, [r3, #20]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d002      	beq.n	8007dbe <osThreadNew+0xca>
        mem = 1;
 8007db8:	2301      	movs	r3, #1
 8007dba:	623b      	str	r3, [r7, #32]
 8007dbc:	e010      	b.n	8007de0 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	689b      	ldr	r3, [r3, #8]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d10c      	bne.n	8007de0 <osThreadNew+0xec>
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	68db      	ldr	r3, [r3, #12]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d108      	bne.n	8007de0 <osThreadNew+0xec>
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	691b      	ldr	r3, [r3, #16]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d104      	bne.n	8007de0 <osThreadNew+0xec>
          mem = 0;
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	623b      	str	r3, [r7, #32]
 8007dda:	e001      	b.n	8007de0 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8007ddc:	2300      	movs	r3, #0
 8007dde:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8007de0:	6a3b      	ldr	r3, [r7, #32]
 8007de2:	2b01      	cmp	r3, #1
 8007de4:	d110      	bne.n	8007e08 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8007dea:	687a      	ldr	r2, [r7, #4]
 8007dec:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007dee:	9202      	str	r2, [sp, #8]
 8007df0:	9301      	str	r3, [sp, #4]
 8007df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007df4:	9300      	str	r3, [sp, #0]
 8007df6:	68bb      	ldr	r3, [r7, #8]
 8007df8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007dfa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007dfc:	68f8      	ldr	r0, [r7, #12]
 8007dfe:	f001 fb81 	bl	8009504 <xTaskCreateStatic>
 8007e02:	4603      	mov	r3, r0
 8007e04:	613b      	str	r3, [r7, #16]
 8007e06:	e013      	b.n	8007e30 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8007e08:	6a3b      	ldr	r3, [r7, #32]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d110      	bne.n	8007e30 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e10:	b29a      	uxth	r2, r3
 8007e12:	f107 0310 	add.w	r3, r7, #16
 8007e16:	9301      	str	r3, [sp, #4]
 8007e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e1a:	9300      	str	r3, [sp, #0]
 8007e1c:	68bb      	ldr	r3, [r7, #8]
 8007e1e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007e20:	68f8      	ldr	r0, [r7, #12]
 8007e22:	f001 fbcc 	bl	80095be <xTaskCreate>
 8007e26:	4603      	mov	r3, r0
 8007e28:	2b01      	cmp	r3, #1
 8007e2a:	d001      	beq.n	8007e30 <osThreadNew+0x13c>
          hTask = NULL;
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007e30:	693b      	ldr	r3, [r7, #16]
}
 8007e32:	4618      	mov	r0, r3
 8007e34:	3730      	adds	r7, #48	; 0x30
 8007e36:	46bd      	mov	sp, r7
 8007e38:	bd80      	pop	{r7, pc}
 8007e3a:	bf00      	nop
 8007e3c:	20004f38 	.word	0x20004f38

08007e40 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b086      	sub	sp, #24
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007e48:	f3ef 8305 	mrs	r3, IPSR
 8007e4c:	613b      	str	r3, [r7, #16]
  return(result);
 8007e4e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d10f      	bne.n	8007e74 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007e54:	f3ef 8310 	mrs	r3, PRIMASK
 8007e58:	60fb      	str	r3, [r7, #12]
  return(result);
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d105      	bne.n	8007e6c <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007e60:	f3ef 8311 	mrs	r3, BASEPRI
 8007e64:	60bb      	str	r3, [r7, #8]
  return(result);
 8007e66:	68bb      	ldr	r3, [r7, #8]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d007      	beq.n	8007e7c <osDelay+0x3c>
 8007e6c:	4b0a      	ldr	r3, [pc, #40]	; (8007e98 <osDelay+0x58>)
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	2b02      	cmp	r3, #2
 8007e72:	d103      	bne.n	8007e7c <osDelay+0x3c>
    stat = osErrorISR;
 8007e74:	f06f 0305 	mvn.w	r3, #5
 8007e78:	617b      	str	r3, [r7, #20]
 8007e7a:	e007      	b.n	8007e8c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d002      	beq.n	8007e8c <osDelay+0x4c>
      vTaskDelay(ticks);
 8007e86:	6878      	ldr	r0, [r7, #4]
 8007e88:	f001 fcde 	bl	8009848 <vTaskDelay>
    }
  }

  return (stat);
 8007e8c:	697b      	ldr	r3, [r7, #20]
}
 8007e8e:	4618      	mov	r0, r3
 8007e90:	3718      	adds	r7, #24
 8007e92:	46bd      	mov	sp, r7
 8007e94:	bd80      	pop	{r7, pc}
 8007e96:	bf00      	nop
 8007e98:	20004f38 	.word	0x20004f38

08007e9c <osEventFlagsNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b088      	sub	sp, #32
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007ea8:	f3ef 8305 	mrs	r3, IPSR
 8007eac:	617b      	str	r3, [r7, #20]
  return(result);
 8007eae:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ()) {
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d13d      	bne.n	8007f30 <osEventFlagsNew+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007eb4:	f3ef 8310 	mrs	r3, PRIMASK
 8007eb8:	613b      	str	r3, [r7, #16]
  return(result);
 8007eba:	693b      	ldr	r3, [r7, #16]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d105      	bne.n	8007ecc <osEventFlagsNew+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007ec0:	f3ef 8311 	mrs	r3, BASEPRI
 8007ec4:	60fb      	str	r3, [r7, #12]
  return(result);
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d003      	beq.n	8007ed4 <osEventFlagsNew+0x38>
 8007ecc:	4b1b      	ldr	r3, [pc, #108]	; (8007f3c <osEventFlagsNew+0xa0>)
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	2b02      	cmp	r3, #2
 8007ed2:	d02d      	beq.n	8007f30 <osEventFlagsNew+0x94>
    mem = -1;
 8007ed4:	f04f 33ff 	mov.w	r3, #4294967295
 8007ed8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d015      	beq.n	8007f0c <osEventFlagsNew+0x70>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	689b      	ldr	r3, [r3, #8]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d006      	beq.n	8007ef6 <osEventFlagsNew+0x5a>
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	68db      	ldr	r3, [r3, #12]
 8007eec:	2b1f      	cmp	r3, #31
 8007eee:	d902      	bls.n	8007ef6 <osEventFlagsNew+0x5a>
        mem = 1;
 8007ef0:	2301      	movs	r3, #1
 8007ef2:	61bb      	str	r3, [r7, #24]
 8007ef4:	e00c      	b.n	8007f10 <osEventFlagsNew+0x74>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	689b      	ldr	r3, [r3, #8]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d108      	bne.n	8007f10 <osEventFlagsNew+0x74>
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	68db      	ldr	r3, [r3, #12]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d104      	bne.n	8007f10 <osEventFlagsNew+0x74>
          mem = 0;
 8007f06:	2300      	movs	r3, #0
 8007f08:	61bb      	str	r3, [r7, #24]
 8007f0a:	e001      	b.n	8007f10 <osEventFlagsNew+0x74>
        }
      }
    }
    else {
      mem = 0;
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007f10:	69bb      	ldr	r3, [r7, #24]
 8007f12:	2b01      	cmp	r3, #1
 8007f14:	d106      	bne.n	8007f24 <osEventFlagsNew+0x88>
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	689b      	ldr	r3, [r3, #8]
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	f000 f9f2 	bl	8008304 <xEventGroupCreateStatic>
 8007f20:	61f8      	str	r0, [r7, #28]
 8007f22:	e005      	b.n	8007f30 <osEventFlagsNew+0x94>
    }
    else {
      if (mem == 0) {
 8007f24:	69bb      	ldr	r3, [r7, #24]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d102      	bne.n	8007f30 <osEventFlagsNew+0x94>
        hEventGroup = xEventGroupCreate();
 8007f2a:	f000 fa22 	bl	8008372 <xEventGroupCreate>
 8007f2e:	61f8      	str	r0, [r7, #28]
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8007f30:	69fb      	ldr	r3, [r7, #28]
}
 8007f32:	4618      	mov	r0, r3
 8007f34:	3720      	adds	r7, #32
 8007f36:	46bd      	mov	sp, r7
 8007f38:	bd80      	pop	{r7, pc}
 8007f3a:	bf00      	nop
 8007f3c:	20004f38 	.word	0x20004f38

08007f40 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b088      	sub	sp, #32
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
 8007f48:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	61bb      	str	r3, [r7, #24]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8007f4e:	69bb      	ldr	r3, [r7, #24]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d004      	beq.n	8007f5e <osEventFlagsSet+0x1e>
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d003      	beq.n	8007f66 <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 8007f5e:	f06f 0303 	mvn.w	r3, #3
 8007f62:	61fb      	str	r3, [r7, #28]
 8007f64:	e03a      	b.n	8007fdc <osEventFlagsSet+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007f66:	f3ef 8305 	mrs	r3, IPSR
 8007f6a:	617b      	str	r3, [r7, #20]
  return(result);
 8007f6c:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d10f      	bne.n	8007f92 <osEventFlagsSet+0x52>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f72:	f3ef 8310 	mrs	r3, PRIMASK
 8007f76:	613b      	str	r3, [r7, #16]
  return(result);
 8007f78:	693b      	ldr	r3, [r7, #16]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d105      	bne.n	8007f8a <osEventFlagsSet+0x4a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007f7e:	f3ef 8311 	mrs	r3, BASEPRI
 8007f82:	60fb      	str	r3, [r7, #12]
  return(result);
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d021      	beq.n	8007fce <osEventFlagsSet+0x8e>
 8007f8a:	4b17      	ldr	r3, [pc, #92]	; (8007fe8 <osEventFlagsSet+0xa8>)
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	2b02      	cmp	r3, #2
 8007f90:	d11d      	bne.n	8007fce <osEventFlagsSet+0x8e>
    yield = pdFALSE;
 8007f92:	2300      	movs	r3, #0
 8007f94:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8007f96:	f107 0308 	add.w	r3, r7, #8
 8007f9a:	461a      	mov	r2, r3
 8007f9c:	6839      	ldr	r1, [r7, #0]
 8007f9e:	69b8      	ldr	r0, [r7, #24]
 8007fa0:	f000 fc08 	bl	80087b4 <xEventGroupSetBitsFromISR>
 8007fa4:	4603      	mov	r3, r0
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d103      	bne.n	8007fb2 <osEventFlagsSet+0x72>
      rflags = (uint32_t)osErrorResource;
 8007faa:	f06f 0302 	mvn.w	r3, #2
 8007fae:	61fb      	str	r3, [r7, #28]
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8007fb0:	e013      	b.n	8007fda <osEventFlagsSet+0x9a>
    } else {
      rflags = flags;
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	61fb      	str	r3, [r7, #28]
      portYIELD_FROM_ISR (yield);
 8007fb6:	68bb      	ldr	r3, [r7, #8]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d00e      	beq.n	8007fda <osEventFlagsSet+0x9a>
 8007fbc:	4b0b      	ldr	r3, [pc, #44]	; (8007fec <osEventFlagsSet+0xac>)
 8007fbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007fc2:	601a      	str	r2, [r3, #0]
 8007fc4:	f3bf 8f4f 	dsb	sy
 8007fc8:	f3bf 8f6f 	isb	sy
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8007fcc:	e005      	b.n	8007fda <osEventFlagsSet+0x9a>
    }
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8007fce:	6839      	ldr	r1, [r7, #0]
 8007fd0:	69b8      	ldr	r0, [r7, #24]
 8007fd2:	f000 fb27 	bl	8008624 <xEventGroupSetBits>
 8007fd6:	61f8      	str	r0, [r7, #28]
 8007fd8:	e000      	b.n	8007fdc <osEventFlagsSet+0x9c>
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8007fda:	bf00      	nop
  }

  return (rflags);
 8007fdc:	69fb      	ldr	r3, [r7, #28]
}
 8007fde:	4618      	mov	r0, r3
 8007fe0:	3720      	adds	r7, #32
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	bd80      	pop	{r7, pc}
 8007fe6:	bf00      	nop
 8007fe8:	20004f38 	.word	0x20004f38
 8007fec:	e000ed04 	.word	0xe000ed04

08007ff0 <osEventFlagsClear>:

uint32_t osEventFlagsClear (osEventFlagsId_t ef_id, uint32_t flags) {
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b088      	sub	sp, #32
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
 8007ff8:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	61bb      	str	r3, [r7, #24]
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8007ffe:	69bb      	ldr	r3, [r7, #24]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d004      	beq.n	800800e <osEventFlagsClear+0x1e>
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800800a:	2b00      	cmp	r3, #0
 800800c:	d003      	beq.n	8008016 <osEventFlagsClear+0x26>
    rflags = (uint32_t)osErrorParameter;
 800800e:	f06f 0303 	mvn.w	r3, #3
 8008012:	61fb      	str	r3, [r7, #28]
 8008014:	e029      	b.n	800806a <osEventFlagsClear+0x7a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008016:	f3ef 8305 	mrs	r3, IPSR
 800801a:	617b      	str	r3, [r7, #20]
  return(result);
 800801c:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800801e:	2b00      	cmp	r3, #0
 8008020:	d10f      	bne.n	8008042 <osEventFlagsClear+0x52>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008022:	f3ef 8310 	mrs	r3, PRIMASK
 8008026:	613b      	str	r3, [r7, #16]
  return(result);
 8008028:	693b      	ldr	r3, [r7, #16]
 800802a:	2b00      	cmp	r3, #0
 800802c:	d105      	bne.n	800803a <osEventFlagsClear+0x4a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800802e:	f3ef 8311 	mrs	r3, BASEPRI
 8008032:	60fb      	str	r3, [r7, #12]
  return(result);
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d012      	beq.n	8008060 <osEventFlagsClear+0x70>
 800803a:	4b0e      	ldr	r3, [pc, #56]	; (8008074 <osEventFlagsClear+0x84>)
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	2b02      	cmp	r3, #2
 8008040:	d10e      	bne.n	8008060 <osEventFlagsClear+0x70>
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 8008042:	69b8      	ldr	r0, [r7, #24]
 8008044:	f000 faca 	bl	80085dc <xEventGroupGetBitsFromISR>
 8008048:	61f8      	str	r0, [r7, #28]

    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 800804a:	6839      	ldr	r1, [r7, #0]
 800804c:	69b8      	ldr	r0, [r7, #24]
 800804e:	f000 fab1 	bl	80085b4 <xEventGroupClearBitsFromISR>
 8008052:	4603      	mov	r3, r0
 8008054:	2b00      	cmp	r3, #0
 8008056:	d108      	bne.n	800806a <osEventFlagsClear+0x7a>
      rflags = (uint32_t)osErrorResource;
 8008058:	f06f 0302 	mvn.w	r3, #2
 800805c:	61fb      	str	r3, [r7, #28]
    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 800805e:	e004      	b.n	800806a <osEventFlagsClear+0x7a>
    }
  }
  else {
    rflags = xEventGroupClearBits (hEventGroup, (EventBits_t)flags);
 8008060:	6839      	ldr	r1, [r7, #0]
 8008062:	69b8      	ldr	r0, [r7, #24]
 8008064:	f000 fa6e 	bl	8008544 <xEventGroupClearBits>
 8008068:	61f8      	str	r0, [r7, #28]
  }

  return (rflags);
 800806a:	69fb      	ldr	r3, [r7, #28]
}
 800806c:	4618      	mov	r0, r3
 800806e:	3720      	adds	r7, #32
 8008070:	46bd      	mov	sp, r7
 8008072:	bd80      	pop	{r7, pc}
 8008074:	20004f38 	.word	0x20004f38

08008078 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8008078:	b580      	push	{r7, lr}
 800807a:	b08e      	sub	sp, #56	; 0x38
 800807c:	af02      	add	r7, sp, #8
 800807e:	60f8      	str	r0, [r7, #12]
 8008080:	60b9      	str	r1, [r7, #8]
 8008082:	607a      	str	r2, [r7, #4]
 8008084:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	623b      	str	r3, [r7, #32]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800808a:	6a3b      	ldr	r3, [r7, #32]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d004      	beq.n	800809a <osEventFlagsWait+0x22>
 8008090:	68bb      	ldr	r3, [r7, #8]
 8008092:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8008096:	2b00      	cmp	r3, #0
 8008098:	d003      	beq.n	80080a2 <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 800809a:	f06f 0303 	mvn.w	r3, #3
 800809e:	627b      	str	r3, [r7, #36]	; 0x24
 80080a0:	e059      	b.n	8008156 <osEventFlagsWait+0xde>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80080a2:	f3ef 8305 	mrs	r3, IPSR
 80080a6:	61fb      	str	r3, [r7, #28]
  return(result);
 80080a8:	69fb      	ldr	r3, [r7, #28]
  }
  else if (IS_IRQ()) {
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d10f      	bne.n	80080ce <osEventFlagsWait+0x56>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80080ae:	f3ef 8310 	mrs	r3, PRIMASK
 80080b2:	61bb      	str	r3, [r7, #24]
  return(result);
 80080b4:	69bb      	ldr	r3, [r7, #24]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d105      	bne.n	80080c6 <osEventFlagsWait+0x4e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80080ba:	f3ef 8311 	mrs	r3, BASEPRI
 80080be:	617b      	str	r3, [r7, #20]
  return(result);
 80080c0:	697b      	ldr	r3, [r7, #20]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d007      	beq.n	80080d6 <osEventFlagsWait+0x5e>
 80080c6:	4b26      	ldr	r3, [pc, #152]	; (8008160 <osEventFlagsWait+0xe8>)
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	2b02      	cmp	r3, #2
 80080cc:	d103      	bne.n	80080d6 <osEventFlagsWait+0x5e>
    rflags = (uint32_t)osErrorISR;
 80080ce:	f06f 0305 	mvn.w	r3, #5
 80080d2:	627b      	str	r3, [r7, #36]	; 0x24
 80080d4:	e03f      	b.n	8008156 <osEventFlagsWait+0xde>
  }
  else {
    if (options & osFlagsWaitAll) {
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	f003 0301 	and.w	r3, r3, #1
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d002      	beq.n	80080e6 <osEventFlagsWait+0x6e>
      wait_all = pdTRUE;
 80080e0:	2301      	movs	r3, #1
 80080e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80080e4:	e001      	b.n	80080ea <osEventFlagsWait+0x72>
    } else {
      wait_all = pdFAIL;
 80080e6:	2300      	movs	r3, #0
 80080e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    if (options & osFlagsNoClear) {
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	f003 0302 	and.w	r3, r3, #2
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d002      	beq.n	80080fa <osEventFlagsWait+0x82>
      exit_clr = pdFAIL;
 80080f4:	2300      	movs	r3, #0
 80080f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80080f8:	e001      	b.n	80080fe <osEventFlagsWait+0x86>
    } else {
      exit_clr = pdTRUE;
 80080fa:	2301      	movs	r3, #1
 80080fc:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	9300      	str	r3, [sp, #0]
 8008102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008104:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008106:	68b9      	ldr	r1, [r7, #8]
 8008108:	6a38      	ldr	r0, [r7, #32]
 800810a:	f000 f94d 	bl	80083a8 <xEventGroupWaitBits>
 800810e:	6278      	str	r0, [r7, #36]	; 0x24

    if (options & osFlagsWaitAll) {
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	f003 0301 	and.w	r3, r3, #1
 8008116:	2b00      	cmp	r3, #0
 8008118:	d00e      	beq.n	8008138 <osEventFlagsWait+0xc0>
      if (flags != rflags) {
 800811a:	68ba      	ldr	r2, [r7, #8]
 800811c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800811e:	429a      	cmp	r2, r3
 8008120:	d019      	beq.n	8008156 <osEventFlagsWait+0xde>
        if (timeout > 0U) {
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	2b00      	cmp	r3, #0
 8008126:	d003      	beq.n	8008130 <osEventFlagsWait+0xb8>
          rflags = (uint32_t)osErrorTimeout;
 8008128:	f06f 0301 	mvn.w	r3, #1
 800812c:	627b      	str	r3, [r7, #36]	; 0x24
 800812e:	e012      	b.n	8008156 <osEventFlagsWait+0xde>
        } else {
          rflags = (uint32_t)osErrorResource;
 8008130:	f06f 0302 	mvn.w	r3, #2
 8008134:	627b      	str	r3, [r7, #36]	; 0x24
 8008136:	e00e      	b.n	8008156 <osEventFlagsWait+0xde>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8008138:	68ba      	ldr	r2, [r7, #8]
 800813a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800813c:	4013      	ands	r3, r2
 800813e:	2b00      	cmp	r3, #0
 8008140:	d109      	bne.n	8008156 <osEventFlagsWait+0xde>
        if (timeout > 0U) {
 8008142:	683b      	ldr	r3, [r7, #0]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d003      	beq.n	8008150 <osEventFlagsWait+0xd8>
          rflags = (uint32_t)osErrorTimeout;
 8008148:	f06f 0301 	mvn.w	r3, #1
 800814c:	627b      	str	r3, [r7, #36]	; 0x24
 800814e:	e002      	b.n	8008156 <osEventFlagsWait+0xde>
        } else {
          rflags = (uint32_t)osErrorResource;
 8008150:	f06f 0302 	mvn.w	r3, #2
 8008154:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }
  }

  return (rflags);
 8008156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008158:	4618      	mov	r0, r3
 800815a:	3730      	adds	r7, #48	; 0x30
 800815c:	46bd      	mov	sp, r7
 800815e:	bd80      	pop	{r7, pc}
 8008160:	20004f38 	.word	0x20004f38

08008164 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8008164:	b580      	push	{r7, lr}
 8008166:	b08c      	sub	sp, #48	; 0x30
 8008168:	af02      	add	r7, sp, #8
 800816a:	60f8      	str	r0, [r7, #12]
 800816c:	60b9      	str	r1, [r7, #8]
 800816e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8008170:	2300      	movs	r3, #0
 8008172:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008174:	f3ef 8305 	mrs	r3, IPSR
 8008178:	61bb      	str	r3, [r7, #24]
  return(result);
 800817a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800817c:	2b00      	cmp	r3, #0
 800817e:	f040 8086 	bne.w	800828e <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008182:	f3ef 8310 	mrs	r3, PRIMASK
 8008186:	617b      	str	r3, [r7, #20]
  return(result);
 8008188:	697b      	ldr	r3, [r7, #20]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d105      	bne.n	800819a <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800818e:	f3ef 8311 	mrs	r3, BASEPRI
 8008192:	613b      	str	r3, [r7, #16]
  return(result);
 8008194:	693b      	ldr	r3, [r7, #16]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d003      	beq.n	80081a2 <osSemaphoreNew+0x3e>
 800819a:	4b3f      	ldr	r3, [pc, #252]	; (8008298 <osSemaphoreNew+0x134>)
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	2b02      	cmp	r3, #2
 80081a0:	d075      	beq.n	800828e <osSemaphoreNew+0x12a>
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d072      	beq.n	800828e <osSemaphoreNew+0x12a>
 80081a8:	68ba      	ldr	r2, [r7, #8]
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	429a      	cmp	r2, r3
 80081ae:	d86e      	bhi.n	800828e <osSemaphoreNew+0x12a>
    mem = -1;
 80081b0:	f04f 33ff 	mov.w	r3, #4294967295
 80081b4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d015      	beq.n	80081e8 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	689b      	ldr	r3, [r3, #8]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d006      	beq.n	80081d2 <osSemaphoreNew+0x6e>
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	68db      	ldr	r3, [r3, #12]
 80081c8:	2b4f      	cmp	r3, #79	; 0x4f
 80081ca:	d902      	bls.n	80081d2 <osSemaphoreNew+0x6e>
        mem = 1;
 80081cc:	2301      	movs	r3, #1
 80081ce:	623b      	str	r3, [r7, #32]
 80081d0:	e00c      	b.n	80081ec <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	689b      	ldr	r3, [r3, #8]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d108      	bne.n	80081ec <osSemaphoreNew+0x88>
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	68db      	ldr	r3, [r3, #12]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d104      	bne.n	80081ec <osSemaphoreNew+0x88>
          mem = 0;
 80081e2:	2300      	movs	r3, #0
 80081e4:	623b      	str	r3, [r7, #32]
 80081e6:	e001      	b.n	80081ec <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 80081e8:	2300      	movs	r3, #0
 80081ea:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 80081ec:	6a3b      	ldr	r3, [r7, #32]
 80081ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081f2:	d04c      	beq.n	800828e <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	2b01      	cmp	r3, #1
 80081f8:	d128      	bne.n	800824c <osSemaphoreNew+0xe8>
        if (mem == 1) {
 80081fa:	6a3b      	ldr	r3, [r7, #32]
 80081fc:	2b01      	cmp	r3, #1
 80081fe:	d10a      	bne.n	8008216 <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	689b      	ldr	r3, [r3, #8]
 8008204:	2203      	movs	r2, #3
 8008206:	9200      	str	r2, [sp, #0]
 8008208:	2200      	movs	r2, #0
 800820a:	2100      	movs	r1, #0
 800820c:	2001      	movs	r0, #1
 800820e:	f000 fc01 	bl	8008a14 <xQueueGenericCreateStatic>
 8008212:	6278      	str	r0, [r7, #36]	; 0x24
 8008214:	e005      	b.n	8008222 <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8008216:	2203      	movs	r2, #3
 8008218:	2100      	movs	r1, #0
 800821a:	2001      	movs	r0, #1
 800821c:	f000 fc72 	bl	8008b04 <xQueueGenericCreate>
 8008220:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8008222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008224:	2b00      	cmp	r3, #0
 8008226:	d022      	beq.n	800826e <osSemaphoreNew+0x10a>
 8008228:	68bb      	ldr	r3, [r7, #8]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d01f      	beq.n	800826e <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800822e:	2300      	movs	r3, #0
 8008230:	2200      	movs	r2, #0
 8008232:	2100      	movs	r1, #0
 8008234:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008236:	f000 fd33 	bl	8008ca0 <xQueueGenericSend>
 800823a:	4603      	mov	r3, r0
 800823c:	2b01      	cmp	r3, #1
 800823e:	d016      	beq.n	800826e <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 8008240:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008242:	f000 ffa3 	bl	800918c <vQueueDelete>
            hSemaphore = NULL;
 8008246:	2300      	movs	r3, #0
 8008248:	627b      	str	r3, [r7, #36]	; 0x24
 800824a:	e010      	b.n	800826e <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 800824c:	6a3b      	ldr	r3, [r7, #32]
 800824e:	2b01      	cmp	r3, #1
 8008250:	d108      	bne.n	8008264 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	689b      	ldr	r3, [r3, #8]
 8008256:	461a      	mov	r2, r3
 8008258:	68b9      	ldr	r1, [r7, #8]
 800825a:	68f8      	ldr	r0, [r7, #12]
 800825c:	f000 fcb5 	bl	8008bca <xQueueCreateCountingSemaphoreStatic>
 8008260:	6278      	str	r0, [r7, #36]	; 0x24
 8008262:	e004      	b.n	800826e <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8008264:	68b9      	ldr	r1, [r7, #8]
 8008266:	68f8      	ldr	r0, [r7, #12]
 8008268:	f000 fce6 	bl	8008c38 <xQueueCreateCountingSemaphore>
 800826c:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800826e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008270:	2b00      	cmp	r3, #0
 8008272:	d00c      	beq.n	800828e <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d003      	beq.n	8008282 <osSemaphoreNew+0x11e>
          name = attr->name;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	61fb      	str	r3, [r7, #28]
 8008280:	e001      	b.n	8008286 <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 8008282:	2300      	movs	r3, #0
 8008284:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8008286:	69f9      	ldr	r1, [r7, #28]
 8008288:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800828a:	f001 f8b3 	bl	80093f4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800828e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008290:	4618      	mov	r0, r3
 8008292:	3728      	adds	r7, #40	; 0x28
 8008294:	46bd      	mov	sp, r7
 8008296:	bd80      	pop	{r7, pc}
 8008298:	20004f38 	.word	0x20004f38

0800829c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800829c:	b480      	push	{r7}
 800829e:	b085      	sub	sp, #20
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	60f8      	str	r0, [r7, #12]
 80082a4:	60b9      	str	r1, [r7, #8]
 80082a6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	4a07      	ldr	r2, [pc, #28]	; (80082c8 <vApplicationGetIdleTaskMemory+0x2c>)
 80082ac:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80082ae:	68bb      	ldr	r3, [r7, #8]
 80082b0:	4a06      	ldr	r2, [pc, #24]	; (80082cc <vApplicationGetIdleTaskMemory+0x30>)
 80082b2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2280      	movs	r2, #128	; 0x80
 80082b8:	601a      	str	r2, [r3, #0]
}
 80082ba:	bf00      	nop
 80082bc:	3714      	adds	r7, #20
 80082be:	46bd      	mov	sp, r7
 80082c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c4:	4770      	bx	lr
 80082c6:	bf00      	nop
 80082c8:	20004f3c 	.word	0x20004f3c
 80082cc:	20004f98 	.word	0x20004f98

080082d0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80082d0:	b480      	push	{r7}
 80082d2:	b085      	sub	sp, #20
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	60f8      	str	r0, [r7, #12]
 80082d8:	60b9      	str	r1, [r7, #8]
 80082da:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	4a07      	ldr	r2, [pc, #28]	; (80082fc <vApplicationGetTimerTaskMemory+0x2c>)
 80082e0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80082e2:	68bb      	ldr	r3, [r7, #8]
 80082e4:	4a06      	ldr	r2, [pc, #24]	; (8008300 <vApplicationGetTimerTaskMemory+0x30>)
 80082e6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80082ee:	601a      	str	r2, [r3, #0]
}
 80082f0:	bf00      	nop
 80082f2:	3714      	adds	r7, #20
 80082f4:	46bd      	mov	sp, r7
 80082f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fa:	4770      	bx	lr
 80082fc:	20005198 	.word	0x20005198
 8008300:	200051f4 	.word	0x200051f4

08008304 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8008304:	b580      	push	{r7, lr}
 8008306:	b086      	sub	sp, #24
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d10a      	bne.n	8008328 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008316:	f383 8811 	msr	BASEPRI, r3
 800831a:	f3bf 8f6f 	isb	sy
 800831e:	f3bf 8f4f 	dsb	sy
 8008322:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008324:	bf00      	nop
 8008326:	e7fe      	b.n	8008326 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8008328:	2320      	movs	r3, #32
 800832a:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 800832c:	68bb      	ldr	r3, [r7, #8]
 800832e:	2b20      	cmp	r3, #32
 8008330:	d00a      	beq.n	8008348 <xEventGroupCreateStatic+0x44>
	__asm volatile
 8008332:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008336:	f383 8811 	msr	BASEPRI, r3
 800833a:	f3bf 8f6f 	isb	sy
 800833e:	f3bf 8f4f 	dsb	sy
 8008342:	60fb      	str	r3, [r7, #12]
}
 8008344:	bf00      	nop
 8008346:	e7fe      	b.n	8008346 <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 800834c:	697b      	ldr	r3, [r7, #20]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d00a      	beq.n	8008368 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 8008352:	697b      	ldr	r3, [r7, #20]
 8008354:	2200      	movs	r2, #0
 8008356:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8008358:	697b      	ldr	r3, [r7, #20]
 800835a:	3304      	adds	r3, #4
 800835c:	4618      	mov	r0, r3
 800835e:	f000 fa3d 	bl	80087dc <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8008362:	697b      	ldr	r3, [r7, #20]
 8008364:	2201      	movs	r2, #1
 8008366:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8008368:	697b      	ldr	r3, [r7, #20]
	}
 800836a:	4618      	mov	r0, r3
 800836c:	3718      	adds	r7, #24
 800836e:	46bd      	mov	sp, r7
 8008370:	bd80      	pop	{r7, pc}

08008372 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8008372:	b580      	push	{r7, lr}
 8008374:	b082      	sub	sp, #8
 8008376:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8008378:	2020      	movs	r0, #32
 800837a:	f002 fe35 	bl	800afe8 <pvPortMalloc>
 800837e:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d00a      	beq.n	800839c <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	2200      	movs	r2, #0
 800838a:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	3304      	adds	r3, #4
 8008390:	4618      	mov	r0, r3
 8008392:	f000 fa23 	bl	80087dc <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	2200      	movs	r2, #0
 800839a:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 800839c:	687b      	ldr	r3, [r7, #4]
	}
 800839e:	4618      	mov	r0, r3
 80083a0:	3708      	adds	r7, #8
 80083a2:	46bd      	mov	sp, r7
 80083a4:	bd80      	pop	{r7, pc}
	...

080083a8 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b090      	sub	sp, #64	; 0x40
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	60f8      	str	r0, [r7, #12]
 80083b0:	60b9      	str	r1, [r7, #8]
 80083b2:	607a      	str	r2, [r7, #4]
 80083b4:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 80083ba:	2300      	movs	r3, #0
 80083bc:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 80083be:	2300      	movs	r3, #0
 80083c0:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d10a      	bne.n	80083de <xEventGroupWaitBits+0x36>
	__asm volatile
 80083c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083cc:	f383 8811 	msr	BASEPRI, r3
 80083d0:	f3bf 8f6f 	isb	sy
 80083d4:	f3bf 8f4f 	dsb	sy
 80083d8:	623b      	str	r3, [r7, #32]
}
 80083da:	bf00      	nop
 80083dc:	e7fe      	b.n	80083dc <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80083de:	68bb      	ldr	r3, [r7, #8]
 80083e0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d00a      	beq.n	80083fe <xEventGroupWaitBits+0x56>
	__asm volatile
 80083e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083ec:	f383 8811 	msr	BASEPRI, r3
 80083f0:	f3bf 8f6f 	isb	sy
 80083f4:	f3bf 8f4f 	dsb	sy
 80083f8:	61fb      	str	r3, [r7, #28]
}
 80083fa:	bf00      	nop
 80083fc:	e7fe      	b.n	80083fc <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 80083fe:	68bb      	ldr	r3, [r7, #8]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d10a      	bne.n	800841a <xEventGroupWaitBits+0x72>
	__asm volatile
 8008404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008408:	f383 8811 	msr	BASEPRI, r3
 800840c:	f3bf 8f6f 	isb	sy
 8008410:	f3bf 8f4f 	dsb	sy
 8008414:	61bb      	str	r3, [r7, #24]
}
 8008416:	bf00      	nop
 8008418:	e7fe      	b.n	8008418 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800841a:	f001 ff2f 	bl	800a27c <xTaskGetSchedulerState>
 800841e:	4603      	mov	r3, r0
 8008420:	2b00      	cmp	r3, #0
 8008422:	d102      	bne.n	800842a <xEventGroupWaitBits+0x82>
 8008424:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008426:	2b00      	cmp	r3, #0
 8008428:	d101      	bne.n	800842e <xEventGroupWaitBits+0x86>
 800842a:	2301      	movs	r3, #1
 800842c:	e000      	b.n	8008430 <xEventGroupWaitBits+0x88>
 800842e:	2300      	movs	r3, #0
 8008430:	2b00      	cmp	r3, #0
 8008432:	d10a      	bne.n	800844a <xEventGroupWaitBits+0xa2>
	__asm volatile
 8008434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008438:	f383 8811 	msr	BASEPRI, r3
 800843c:	f3bf 8f6f 	isb	sy
 8008440:	f3bf 8f4f 	dsb	sy
 8008444:	617b      	str	r3, [r7, #20]
}
 8008446:	bf00      	nop
 8008448:	e7fe      	b.n	8008448 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 800844a:	f001 fa97 	bl	800997c <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 800844e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8008454:	683a      	ldr	r2, [r7, #0]
 8008456:	68b9      	ldr	r1, [r7, #8]
 8008458:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800845a:	f000 f988 	bl	800876e <prvTestWaitCondition>
 800845e:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8008460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008462:	2b00      	cmp	r3, #0
 8008464:	d00e      	beq.n	8008484 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8008466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008468:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 800846a:	2300      	movs	r3, #0
 800846c:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d028      	beq.n	80084c6 <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8008474:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008476:	681a      	ldr	r2, [r3, #0]
 8008478:	68bb      	ldr	r3, [r7, #8]
 800847a:	43db      	mvns	r3, r3
 800847c:	401a      	ands	r2, r3
 800847e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008480:	601a      	str	r2, [r3, #0]
 8008482:	e020      	b.n	80084c6 <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8008484:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008486:	2b00      	cmp	r3, #0
 8008488:	d104      	bne.n	8008494 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 800848a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800848c:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 800848e:	2301      	movs	r3, #1
 8008490:	633b      	str	r3, [r7, #48]	; 0x30
 8008492:	e018      	b.n	80084c6 <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2b00      	cmp	r3, #0
 8008498:	d003      	beq.n	80084a2 <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 800849a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800849c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80084a0:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 80084a2:	683b      	ldr	r3, [r7, #0]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d003      	beq.n	80084b0 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 80084a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084aa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80084ae:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 80084b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084b2:	1d18      	adds	r0, r3, #4
 80084b4:	68ba      	ldr	r2, [r7, #8]
 80084b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084b8:	4313      	orrs	r3, r2
 80084ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80084bc:	4619      	mov	r1, r3
 80084be:	f001 fc55 	bl	8009d6c <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 80084c2:	2300      	movs	r3, #0
 80084c4:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 80084c6:	f001 fa67 	bl	8009998 <xTaskResumeAll>
 80084ca:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 80084cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d031      	beq.n	8008536 <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 80084d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d107      	bne.n	80084e8 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 80084d8:	4b19      	ldr	r3, [pc, #100]	; (8008540 <xEventGroupWaitBits+0x198>)
 80084da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084de:	601a      	str	r2, [r3, #0]
 80084e0:	f3bf 8f4f 	dsb	sy
 80084e4:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 80084e8:	f001 ff54 	bl	800a394 <uxTaskResetEventItemValue>
 80084ec:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 80084ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d11a      	bne.n	800852e <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 80084f8:	f002 fc54 	bl	800ada4 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 80084fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8008502:	683a      	ldr	r2, [r7, #0]
 8008504:	68b9      	ldr	r1, [r7, #8]
 8008506:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008508:	f000 f931 	bl	800876e <prvTestWaitCondition>
 800850c:	4603      	mov	r3, r0
 800850e:	2b00      	cmp	r3, #0
 8008510:	d009      	beq.n	8008526 <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	2b00      	cmp	r3, #0
 8008516:	d006      	beq.n	8008526 <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8008518:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800851a:	681a      	ldr	r2, [r3, #0]
 800851c:	68bb      	ldr	r3, [r7, #8]
 800851e:	43db      	mvns	r3, r3
 8008520:	401a      	ands	r2, r3
 8008522:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008524:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8008526:	2301      	movs	r3, #1
 8008528:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 800852a:	f002 fc6b 	bl	800ae04 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 800852e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008530:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008534:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8008536:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008538:	4618      	mov	r0, r3
 800853a:	3740      	adds	r7, #64	; 0x40
 800853c:	46bd      	mov	sp, r7
 800853e:	bd80      	pop	{r7, pc}
 8008540:	e000ed04 	.word	0xe000ed04

08008544 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 8008544:	b580      	push	{r7, lr}
 8008546:	b086      	sub	sp, #24
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
 800854c:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	2b00      	cmp	r3, #0
 8008556:	d10a      	bne.n	800856e <xEventGroupClearBits+0x2a>
	__asm volatile
 8008558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800855c:	f383 8811 	msr	BASEPRI, r3
 8008560:	f3bf 8f6f 	isb	sy
 8008564:	f3bf 8f4f 	dsb	sy
 8008568:	60fb      	str	r3, [r7, #12]
}
 800856a:	bf00      	nop
 800856c:	e7fe      	b.n	800856c <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8008574:	2b00      	cmp	r3, #0
 8008576:	d00a      	beq.n	800858e <xEventGroupClearBits+0x4a>
	__asm volatile
 8008578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800857c:	f383 8811 	msr	BASEPRI, r3
 8008580:	f3bf 8f6f 	isb	sy
 8008584:	f3bf 8f4f 	dsb	sy
 8008588:	60bb      	str	r3, [r7, #8]
}
 800858a:	bf00      	nop
 800858c:	e7fe      	b.n	800858c <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 800858e:	f002 fc09 	bl	800ada4 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 8008592:	697b      	ldr	r3, [r7, #20]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8008598:	697b      	ldr	r3, [r7, #20]
 800859a:	681a      	ldr	r2, [r3, #0]
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	43db      	mvns	r3, r3
 80085a0:	401a      	ands	r2, r3
 80085a2:	697b      	ldr	r3, [r7, #20]
 80085a4:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 80085a6:	f002 fc2d 	bl	800ae04 <vPortExitCritical>

	return uxReturn;
 80085aa:	693b      	ldr	r3, [r7, #16]
}
 80085ac:	4618      	mov	r0, r3
 80085ae:	3718      	adds	r7, #24
 80085b0:	46bd      	mov	sp, r7
 80085b2:	bd80      	pop	{r7, pc}

080085b4 <xEventGroupClearBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
	{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b084      	sub	sp, #16
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
 80085bc:	6039      	str	r1, [r7, #0]
		BaseType_t xReturn;

		traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToClear, NULL ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 80085be:	2300      	movs	r3, #0
 80085c0:	683a      	ldr	r2, [r7, #0]
 80085c2:	6879      	ldr	r1, [r7, #4]
 80085c4:	4804      	ldr	r0, [pc, #16]	; (80085d8 <xEventGroupClearBitsFromISR+0x24>)
 80085c6:	f002 fa9f 	bl	800ab08 <xTimerPendFunctionCallFromISR>
 80085ca:	60f8      	str	r0, [r7, #12]

		return xReturn;
 80085cc:	68fb      	ldr	r3, [r7, #12]
	}
 80085ce:	4618      	mov	r0, r3
 80085d0:	3710      	adds	r7, #16
 80085d2:	46bd      	mov	sp, r7
 80085d4:	bd80      	pop	{r7, pc}
 80085d6:	bf00      	nop
 80085d8:	08008755 	.word	0x08008755

080085dc <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
 80085dc:	b480      	push	{r7}
 80085de:	b089      	sub	sp, #36	; 0x24
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
UBaseType_t uxSavedInterruptStatus;
EventGroup_t const * const pxEventBits = xEventGroup;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	61fb      	str	r3, [r7, #28]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80085e8:	f3ef 8211 	mrs	r2, BASEPRI
 80085ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085f0:	f383 8811 	msr	BASEPRI, r3
 80085f4:	f3bf 8f6f 	isb	sy
 80085f8:	f3bf 8f4f 	dsb	sy
 80085fc:	60fa      	str	r2, [r7, #12]
 80085fe:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008600:	68fb      	ldr	r3, [r7, #12]
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008602:	61bb      	str	r3, [r7, #24]
	{
		uxReturn = pxEventBits->uxEventBits;
 8008604:	69fb      	ldr	r3, [r7, #28]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	617b      	str	r3, [r7, #20]
 800860a:	69bb      	ldr	r3, [r7, #24]
 800860c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800860e:	693b      	ldr	r3, [r7, #16]
 8008610:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008614:	bf00      	nop
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
 8008616:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
 8008618:	4618      	mov	r0, r3
 800861a:	3724      	adds	r7, #36	; 0x24
 800861c:	46bd      	mov	sp, r7
 800861e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008622:	4770      	bx	lr

08008624 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8008624:	b580      	push	{r7, lr}
 8008626:	b08e      	sub	sp, #56	; 0x38
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
 800862c:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 800862e:	2300      	movs	r3, #0
 8008630:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8008636:	2300      	movs	r3, #0
 8008638:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	2b00      	cmp	r3, #0
 800863e:	d10a      	bne.n	8008656 <xEventGroupSetBits+0x32>
	__asm volatile
 8008640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008644:	f383 8811 	msr	BASEPRI, r3
 8008648:	f3bf 8f6f 	isb	sy
 800864c:	f3bf 8f4f 	dsb	sy
 8008650:	613b      	str	r3, [r7, #16]
}
 8008652:	bf00      	nop
 8008654:	e7fe      	b.n	8008654 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8008656:	683b      	ldr	r3, [r7, #0]
 8008658:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800865c:	2b00      	cmp	r3, #0
 800865e:	d00a      	beq.n	8008676 <xEventGroupSetBits+0x52>
	__asm volatile
 8008660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008664:	f383 8811 	msr	BASEPRI, r3
 8008668:	f3bf 8f6f 	isb	sy
 800866c:	f3bf 8f4f 	dsb	sy
 8008670:	60fb      	str	r3, [r7, #12]
}
 8008672:	bf00      	nop
 8008674:	e7fe      	b.n	8008674 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8008676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008678:	3304      	adds	r3, #4
 800867a:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800867c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800867e:	3308      	adds	r3, #8
 8008680:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8008682:	f001 f97b 	bl	800997c <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8008686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008688:	68db      	ldr	r3, [r3, #12]
 800868a:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 800868c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800868e:	681a      	ldr	r2, [r3, #0]
 8008690:	683b      	ldr	r3, [r7, #0]
 8008692:	431a      	orrs	r2, r3
 8008694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008696:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8008698:	e03c      	b.n	8008714 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 800869a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800869c:	685b      	ldr	r3, [r3, #4]
 800869e:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 80086a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 80086a6:	2300      	movs	r3, #0
 80086a8:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 80086aa:	69bb      	ldr	r3, [r7, #24]
 80086ac:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80086b0:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 80086b2:	69bb      	ldr	r3, [r7, #24]
 80086b4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80086b8:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 80086ba:	697b      	ldr	r3, [r7, #20]
 80086bc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d108      	bne.n	80086d6 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 80086c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086c6:	681a      	ldr	r2, [r3, #0]
 80086c8:	69bb      	ldr	r3, [r7, #24]
 80086ca:	4013      	ands	r3, r2
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d00b      	beq.n	80086e8 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 80086d0:	2301      	movs	r3, #1
 80086d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80086d4:	e008      	b.n	80086e8 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 80086d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086d8:	681a      	ldr	r2, [r3, #0]
 80086da:	69bb      	ldr	r3, [r7, #24]
 80086dc:	4013      	ands	r3, r2
 80086de:	69ba      	ldr	r2, [r7, #24]
 80086e0:	429a      	cmp	r2, r3
 80086e2:	d101      	bne.n	80086e8 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 80086e4:	2301      	movs	r3, #1
 80086e6:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 80086e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d010      	beq.n	8008710 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 80086ee:	697b      	ldr	r3, [r7, #20]
 80086f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d003      	beq.n	8008700 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 80086f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80086fa:	69bb      	ldr	r3, [r7, #24]
 80086fc:	4313      	orrs	r3, r2
 80086fe:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8008700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008708:	4619      	mov	r1, r3
 800870a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800870c:	f001 fbfa 	bl	8009f04 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8008710:	69fb      	ldr	r3, [r7, #28]
 8008712:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8008714:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008716:	6a3b      	ldr	r3, [r7, #32]
 8008718:	429a      	cmp	r2, r3
 800871a:	d1be      	bne.n	800869a <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800871c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800871e:	681a      	ldr	r2, [r3, #0]
 8008720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008722:	43db      	mvns	r3, r3
 8008724:	401a      	ands	r2, r3
 8008726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008728:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 800872a:	f001 f935 	bl	8009998 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 800872e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008730:	681b      	ldr	r3, [r3, #0]
}
 8008732:	4618      	mov	r0, r3
 8008734:	3738      	adds	r7, #56	; 0x38
 8008736:	46bd      	mov	sp, r7
 8008738:	bd80      	pop	{r7, pc}

0800873a <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 800873a:	b580      	push	{r7, lr}
 800873c:	b082      	sub	sp, #8
 800873e:	af00      	add	r7, sp, #0
 8008740:	6078      	str	r0, [r7, #4]
 8008742:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8008744:	6839      	ldr	r1, [r7, #0]
 8008746:	6878      	ldr	r0, [r7, #4]
 8008748:	f7ff ff6c 	bl	8008624 <xEventGroupSetBits>
}
 800874c:	bf00      	nop
 800874e:	3708      	adds	r7, #8
 8008750:	46bd      	mov	sp, r7
 8008752:	bd80      	pop	{r7, pc}

08008754 <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
 8008754:	b580      	push	{r7, lr}
 8008756:	b082      	sub	sp, #8
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
 800875c:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 800875e:	6839      	ldr	r1, [r7, #0]
 8008760:	6878      	ldr	r0, [r7, #4]
 8008762:	f7ff feef 	bl	8008544 <xEventGroupClearBits>
}
 8008766:	bf00      	nop
 8008768:	3708      	adds	r7, #8
 800876a:	46bd      	mov	sp, r7
 800876c:	bd80      	pop	{r7, pc}

0800876e <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 800876e:	b480      	push	{r7}
 8008770:	b087      	sub	sp, #28
 8008772:	af00      	add	r7, sp, #0
 8008774:	60f8      	str	r0, [r7, #12]
 8008776:	60b9      	str	r1, [r7, #8]
 8008778:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 800877a:	2300      	movs	r3, #0
 800877c:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d107      	bne.n	8008794 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8008784:	68fa      	ldr	r2, [r7, #12]
 8008786:	68bb      	ldr	r3, [r7, #8]
 8008788:	4013      	ands	r3, r2
 800878a:	2b00      	cmp	r3, #0
 800878c:	d00a      	beq.n	80087a4 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800878e:	2301      	movs	r3, #1
 8008790:	617b      	str	r3, [r7, #20]
 8008792:	e007      	b.n	80087a4 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8008794:	68fa      	ldr	r2, [r7, #12]
 8008796:	68bb      	ldr	r3, [r7, #8]
 8008798:	4013      	ands	r3, r2
 800879a:	68ba      	ldr	r2, [r7, #8]
 800879c:	429a      	cmp	r2, r3
 800879e:	d101      	bne.n	80087a4 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80087a0:	2301      	movs	r3, #1
 80087a2:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 80087a4:	697b      	ldr	r3, [r7, #20]
}
 80087a6:	4618      	mov	r0, r3
 80087a8:	371c      	adds	r7, #28
 80087aa:	46bd      	mov	sp, r7
 80087ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b0:	4770      	bx	lr
	...

080087b4 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b086      	sub	sp, #24
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	60f8      	str	r0, [r7, #12]
 80087bc:	60b9      	str	r1, [r7, #8]
 80087be:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	68ba      	ldr	r2, [r7, #8]
 80087c4:	68f9      	ldr	r1, [r7, #12]
 80087c6:	4804      	ldr	r0, [pc, #16]	; (80087d8 <xEventGroupSetBitsFromISR+0x24>)
 80087c8:	f002 f99e 	bl	800ab08 <xTimerPendFunctionCallFromISR>
 80087cc:	6178      	str	r0, [r7, #20]

		return xReturn;
 80087ce:	697b      	ldr	r3, [r7, #20]
	}
 80087d0:	4618      	mov	r0, r3
 80087d2:	3718      	adds	r7, #24
 80087d4:	46bd      	mov	sp, r7
 80087d6:	bd80      	pop	{r7, pc}
 80087d8:	0800873b 	.word	0x0800873b

080087dc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80087dc:	b480      	push	{r7}
 80087de:	b083      	sub	sp, #12
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	f103 0208 	add.w	r2, r3, #8
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	f04f 32ff 	mov.w	r2, #4294967295
 80087f4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	f103 0208 	add.w	r2, r3, #8
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	f103 0208 	add.w	r2, r3, #8
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	2200      	movs	r2, #0
 800880e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008810:	bf00      	nop
 8008812:	370c      	adds	r7, #12
 8008814:	46bd      	mov	sp, r7
 8008816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881a:	4770      	bx	lr

0800881c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800881c:	b480      	push	{r7}
 800881e:	b083      	sub	sp, #12
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	2200      	movs	r2, #0
 8008828:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800882a:	bf00      	nop
 800882c:	370c      	adds	r7, #12
 800882e:	46bd      	mov	sp, r7
 8008830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008834:	4770      	bx	lr

08008836 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008836:	b480      	push	{r7}
 8008838:	b085      	sub	sp, #20
 800883a:	af00      	add	r7, sp, #0
 800883c:	6078      	str	r0, [r7, #4]
 800883e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	685b      	ldr	r3, [r3, #4]
 8008844:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	68fa      	ldr	r2, [r7, #12]
 800884a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	689a      	ldr	r2, [r3, #8]
 8008850:	683b      	ldr	r3, [r7, #0]
 8008852:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	689b      	ldr	r3, [r3, #8]
 8008858:	683a      	ldr	r2, [r7, #0]
 800885a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	683a      	ldr	r2, [r7, #0]
 8008860:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008862:	683b      	ldr	r3, [r7, #0]
 8008864:	687a      	ldr	r2, [r7, #4]
 8008866:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	1c5a      	adds	r2, r3, #1
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	601a      	str	r2, [r3, #0]
}
 8008872:	bf00      	nop
 8008874:	3714      	adds	r7, #20
 8008876:	46bd      	mov	sp, r7
 8008878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887c:	4770      	bx	lr

0800887e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800887e:	b480      	push	{r7}
 8008880:	b085      	sub	sp, #20
 8008882:	af00      	add	r7, sp, #0
 8008884:	6078      	str	r0, [r7, #4]
 8008886:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008888:	683b      	ldr	r3, [r7, #0]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800888e:	68bb      	ldr	r3, [r7, #8]
 8008890:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008894:	d103      	bne.n	800889e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	691b      	ldr	r3, [r3, #16]
 800889a:	60fb      	str	r3, [r7, #12]
 800889c:	e00c      	b.n	80088b8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	3308      	adds	r3, #8
 80088a2:	60fb      	str	r3, [r7, #12]
 80088a4:	e002      	b.n	80088ac <vListInsert+0x2e>
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	685b      	ldr	r3, [r3, #4]
 80088aa:	60fb      	str	r3, [r7, #12]
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	685b      	ldr	r3, [r3, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	68ba      	ldr	r2, [r7, #8]
 80088b4:	429a      	cmp	r2, r3
 80088b6:	d2f6      	bcs.n	80088a6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	685a      	ldr	r2, [r3, #4]
 80088bc:	683b      	ldr	r3, [r7, #0]
 80088be:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80088c0:	683b      	ldr	r3, [r7, #0]
 80088c2:	685b      	ldr	r3, [r3, #4]
 80088c4:	683a      	ldr	r2, [r7, #0]
 80088c6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80088c8:	683b      	ldr	r3, [r7, #0]
 80088ca:	68fa      	ldr	r2, [r7, #12]
 80088cc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	683a      	ldr	r2, [r7, #0]
 80088d2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80088d4:	683b      	ldr	r3, [r7, #0]
 80088d6:	687a      	ldr	r2, [r7, #4]
 80088d8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	1c5a      	adds	r2, r3, #1
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	601a      	str	r2, [r3, #0]
}
 80088e4:	bf00      	nop
 80088e6:	3714      	adds	r7, #20
 80088e8:	46bd      	mov	sp, r7
 80088ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ee:	4770      	bx	lr

080088f0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80088f0:	b480      	push	{r7}
 80088f2:	b085      	sub	sp, #20
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	691b      	ldr	r3, [r3, #16]
 80088fc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	685b      	ldr	r3, [r3, #4]
 8008902:	687a      	ldr	r2, [r7, #4]
 8008904:	6892      	ldr	r2, [r2, #8]
 8008906:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	689b      	ldr	r3, [r3, #8]
 800890c:	687a      	ldr	r2, [r7, #4]
 800890e:	6852      	ldr	r2, [r2, #4]
 8008910:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	685b      	ldr	r3, [r3, #4]
 8008916:	687a      	ldr	r2, [r7, #4]
 8008918:	429a      	cmp	r2, r3
 800891a:	d103      	bne.n	8008924 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	689a      	ldr	r2, [r3, #8]
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	2200      	movs	r2, #0
 8008928:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	1e5a      	subs	r2, r3, #1
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	681b      	ldr	r3, [r3, #0]
}
 8008938:	4618      	mov	r0, r3
 800893a:	3714      	adds	r7, #20
 800893c:	46bd      	mov	sp, r7
 800893e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008942:	4770      	bx	lr

08008944 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008944:	b580      	push	{r7, lr}
 8008946:	b084      	sub	sp, #16
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
 800894c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d10a      	bne.n	800896e <xQueueGenericReset+0x2a>
	__asm volatile
 8008958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800895c:	f383 8811 	msr	BASEPRI, r3
 8008960:	f3bf 8f6f 	isb	sy
 8008964:	f3bf 8f4f 	dsb	sy
 8008968:	60bb      	str	r3, [r7, #8]
}
 800896a:	bf00      	nop
 800896c:	e7fe      	b.n	800896c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800896e:	f002 fa19 	bl	800ada4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	681a      	ldr	r2, [r3, #0]
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800897a:	68f9      	ldr	r1, [r7, #12]
 800897c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800897e:	fb01 f303 	mul.w	r3, r1, r3
 8008982:	441a      	add	r2, r3
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	2200      	movs	r2, #0
 800898c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	681a      	ldr	r2, [r3, #0]
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	681a      	ldr	r2, [r3, #0]
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800899e:	3b01      	subs	r3, #1
 80089a0:	68f9      	ldr	r1, [r7, #12]
 80089a2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80089a4:	fb01 f303 	mul.w	r3, r1, r3
 80089a8:	441a      	add	r2, r3
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	22ff      	movs	r2, #255	; 0xff
 80089b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	22ff      	movs	r2, #255	; 0xff
 80089ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80089be:	683b      	ldr	r3, [r7, #0]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d114      	bne.n	80089ee <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	691b      	ldr	r3, [r3, #16]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d01a      	beq.n	8008a02 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	3310      	adds	r3, #16
 80089d0:	4618      	mov	r0, r3
 80089d2:	f001 fa33 	bl	8009e3c <xTaskRemoveFromEventList>
 80089d6:	4603      	mov	r3, r0
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d012      	beq.n	8008a02 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80089dc:	4b0c      	ldr	r3, [pc, #48]	; (8008a10 <xQueueGenericReset+0xcc>)
 80089de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089e2:	601a      	str	r2, [r3, #0]
 80089e4:	f3bf 8f4f 	dsb	sy
 80089e8:	f3bf 8f6f 	isb	sy
 80089ec:	e009      	b.n	8008a02 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	3310      	adds	r3, #16
 80089f2:	4618      	mov	r0, r3
 80089f4:	f7ff fef2 	bl	80087dc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	3324      	adds	r3, #36	; 0x24
 80089fc:	4618      	mov	r0, r3
 80089fe:	f7ff feed 	bl	80087dc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008a02:	f002 f9ff 	bl	800ae04 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008a06:	2301      	movs	r3, #1
}
 8008a08:	4618      	mov	r0, r3
 8008a0a:	3710      	adds	r7, #16
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	bd80      	pop	{r7, pc}
 8008a10:	e000ed04 	.word	0xe000ed04

08008a14 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b08e      	sub	sp, #56	; 0x38
 8008a18:	af02      	add	r7, sp, #8
 8008a1a:	60f8      	str	r0, [r7, #12]
 8008a1c:	60b9      	str	r1, [r7, #8]
 8008a1e:	607a      	str	r2, [r7, #4]
 8008a20:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d10a      	bne.n	8008a3e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008a28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a2c:	f383 8811 	msr	BASEPRI, r3
 8008a30:	f3bf 8f6f 	isb	sy
 8008a34:	f3bf 8f4f 	dsb	sy
 8008a38:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008a3a:	bf00      	nop
 8008a3c:	e7fe      	b.n	8008a3c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008a3e:	683b      	ldr	r3, [r7, #0]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d10a      	bne.n	8008a5a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a48:	f383 8811 	msr	BASEPRI, r3
 8008a4c:	f3bf 8f6f 	isb	sy
 8008a50:	f3bf 8f4f 	dsb	sy
 8008a54:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008a56:	bf00      	nop
 8008a58:	e7fe      	b.n	8008a58 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d002      	beq.n	8008a66 <xQueueGenericCreateStatic+0x52>
 8008a60:	68bb      	ldr	r3, [r7, #8]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d001      	beq.n	8008a6a <xQueueGenericCreateStatic+0x56>
 8008a66:	2301      	movs	r3, #1
 8008a68:	e000      	b.n	8008a6c <xQueueGenericCreateStatic+0x58>
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d10a      	bne.n	8008a86 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a74:	f383 8811 	msr	BASEPRI, r3
 8008a78:	f3bf 8f6f 	isb	sy
 8008a7c:	f3bf 8f4f 	dsb	sy
 8008a80:	623b      	str	r3, [r7, #32]
}
 8008a82:	bf00      	nop
 8008a84:	e7fe      	b.n	8008a84 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d102      	bne.n	8008a92 <xQueueGenericCreateStatic+0x7e>
 8008a8c:	68bb      	ldr	r3, [r7, #8]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d101      	bne.n	8008a96 <xQueueGenericCreateStatic+0x82>
 8008a92:	2301      	movs	r3, #1
 8008a94:	e000      	b.n	8008a98 <xQueueGenericCreateStatic+0x84>
 8008a96:	2300      	movs	r3, #0
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d10a      	bne.n	8008ab2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aa0:	f383 8811 	msr	BASEPRI, r3
 8008aa4:	f3bf 8f6f 	isb	sy
 8008aa8:	f3bf 8f4f 	dsb	sy
 8008aac:	61fb      	str	r3, [r7, #28]
}
 8008aae:	bf00      	nop
 8008ab0:	e7fe      	b.n	8008ab0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008ab2:	2350      	movs	r3, #80	; 0x50
 8008ab4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008ab6:	697b      	ldr	r3, [r7, #20]
 8008ab8:	2b50      	cmp	r3, #80	; 0x50
 8008aba:	d00a      	beq.n	8008ad2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ac0:	f383 8811 	msr	BASEPRI, r3
 8008ac4:	f3bf 8f6f 	isb	sy
 8008ac8:	f3bf 8f4f 	dsb	sy
 8008acc:	61bb      	str	r3, [r7, #24]
}
 8008ace:	bf00      	nop
 8008ad0:	e7fe      	b.n	8008ad0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008ad2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008ad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d00d      	beq.n	8008afa <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ae0:	2201      	movs	r2, #1
 8008ae2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008ae6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008aec:	9300      	str	r3, [sp, #0]
 8008aee:	4613      	mov	r3, r2
 8008af0:	687a      	ldr	r2, [r7, #4]
 8008af2:	68b9      	ldr	r1, [r7, #8]
 8008af4:	68f8      	ldr	r0, [r7, #12]
 8008af6:	f000 f845 	bl	8008b84 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008afc:	4618      	mov	r0, r3
 8008afe:	3730      	adds	r7, #48	; 0x30
 8008b00:	46bd      	mov	sp, r7
 8008b02:	bd80      	pop	{r7, pc}

08008b04 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b08a      	sub	sp, #40	; 0x28
 8008b08:	af02      	add	r7, sp, #8
 8008b0a:	60f8      	str	r0, [r7, #12]
 8008b0c:	60b9      	str	r1, [r7, #8]
 8008b0e:	4613      	mov	r3, r2
 8008b10:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d10a      	bne.n	8008b2e <xQueueGenericCreate+0x2a>
	__asm volatile
 8008b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b1c:	f383 8811 	msr	BASEPRI, r3
 8008b20:	f3bf 8f6f 	isb	sy
 8008b24:	f3bf 8f4f 	dsb	sy
 8008b28:	613b      	str	r3, [r7, #16]
}
 8008b2a:	bf00      	nop
 8008b2c:	e7fe      	b.n	8008b2c <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8008b2e:	68bb      	ldr	r3, [r7, #8]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d102      	bne.n	8008b3a <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8008b34:	2300      	movs	r3, #0
 8008b36:	61fb      	str	r3, [r7, #28]
 8008b38:	e004      	b.n	8008b44 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	68ba      	ldr	r2, [r7, #8]
 8008b3e:	fb02 f303 	mul.w	r3, r2, r3
 8008b42:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008b44:	69fb      	ldr	r3, [r7, #28]
 8008b46:	3350      	adds	r3, #80	; 0x50
 8008b48:	4618      	mov	r0, r3
 8008b4a:	f002 fa4d 	bl	800afe8 <pvPortMalloc>
 8008b4e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008b50:	69bb      	ldr	r3, [r7, #24]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d011      	beq.n	8008b7a <xQueueGenericCreate+0x76>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008b56:	69bb      	ldr	r3, [r7, #24]
 8008b58:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008b5a:	697b      	ldr	r3, [r7, #20]
 8008b5c:	3350      	adds	r3, #80	; 0x50
 8008b5e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008b60:	69bb      	ldr	r3, [r7, #24]
 8008b62:	2200      	movs	r2, #0
 8008b64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008b68:	79fa      	ldrb	r2, [r7, #7]
 8008b6a:	69bb      	ldr	r3, [r7, #24]
 8008b6c:	9300      	str	r3, [sp, #0]
 8008b6e:	4613      	mov	r3, r2
 8008b70:	697a      	ldr	r2, [r7, #20]
 8008b72:	68b9      	ldr	r1, [r7, #8]
 8008b74:	68f8      	ldr	r0, [r7, #12]
 8008b76:	f000 f805 	bl	8008b84 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008b7a:	69bb      	ldr	r3, [r7, #24]
	}
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	3720      	adds	r7, #32
 8008b80:	46bd      	mov	sp, r7
 8008b82:	bd80      	pop	{r7, pc}

08008b84 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b084      	sub	sp, #16
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	60f8      	str	r0, [r7, #12]
 8008b8c:	60b9      	str	r1, [r7, #8]
 8008b8e:	607a      	str	r2, [r7, #4]
 8008b90:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008b92:	68bb      	ldr	r3, [r7, #8]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d103      	bne.n	8008ba0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008b98:	69bb      	ldr	r3, [r7, #24]
 8008b9a:	69ba      	ldr	r2, [r7, #24]
 8008b9c:	601a      	str	r2, [r3, #0]
 8008b9e:	e002      	b.n	8008ba6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008ba0:	69bb      	ldr	r3, [r7, #24]
 8008ba2:	687a      	ldr	r2, [r7, #4]
 8008ba4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008ba6:	69bb      	ldr	r3, [r7, #24]
 8008ba8:	68fa      	ldr	r2, [r7, #12]
 8008baa:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008bac:	69bb      	ldr	r3, [r7, #24]
 8008bae:	68ba      	ldr	r2, [r7, #8]
 8008bb0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008bb2:	2101      	movs	r1, #1
 8008bb4:	69b8      	ldr	r0, [r7, #24]
 8008bb6:	f7ff fec5 	bl	8008944 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008bba:	69bb      	ldr	r3, [r7, #24]
 8008bbc:	78fa      	ldrb	r2, [r7, #3]
 8008bbe:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008bc2:	bf00      	nop
 8008bc4:	3710      	adds	r7, #16
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	bd80      	pop	{r7, pc}

08008bca <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8008bca:	b580      	push	{r7, lr}
 8008bcc:	b08a      	sub	sp, #40	; 0x28
 8008bce:	af02      	add	r7, sp, #8
 8008bd0:	60f8      	str	r0, [r7, #12]
 8008bd2:	60b9      	str	r1, [r7, #8]
 8008bd4:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d10a      	bne.n	8008bf2 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8008bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008be0:	f383 8811 	msr	BASEPRI, r3
 8008be4:	f3bf 8f6f 	isb	sy
 8008be8:	f3bf 8f4f 	dsb	sy
 8008bec:	61bb      	str	r3, [r7, #24]
}
 8008bee:	bf00      	nop
 8008bf0:	e7fe      	b.n	8008bf0 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8008bf2:	68ba      	ldr	r2, [r7, #8]
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	429a      	cmp	r2, r3
 8008bf8:	d90a      	bls.n	8008c10 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8008bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bfe:	f383 8811 	msr	BASEPRI, r3
 8008c02:	f3bf 8f6f 	isb	sy
 8008c06:	f3bf 8f4f 	dsb	sy
 8008c0a:	617b      	str	r3, [r7, #20]
}
 8008c0c:	bf00      	nop
 8008c0e:	e7fe      	b.n	8008c0e <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008c10:	2302      	movs	r3, #2
 8008c12:	9300      	str	r3, [sp, #0]
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	2200      	movs	r2, #0
 8008c18:	2100      	movs	r1, #0
 8008c1a:	68f8      	ldr	r0, [r7, #12]
 8008c1c:	f7ff fefa 	bl	8008a14 <xQueueGenericCreateStatic>
 8008c20:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8008c22:	69fb      	ldr	r3, [r7, #28]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d002      	beq.n	8008c2e <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008c28:	69fb      	ldr	r3, [r7, #28]
 8008c2a:	68ba      	ldr	r2, [r7, #8]
 8008c2c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8008c2e:	69fb      	ldr	r3, [r7, #28]
	}
 8008c30:	4618      	mov	r0, r3
 8008c32:	3720      	adds	r7, #32
 8008c34:	46bd      	mov	sp, r7
 8008c36:	bd80      	pop	{r7, pc}

08008c38 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b086      	sub	sp, #24
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
 8008c40:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d10a      	bne.n	8008c5e <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8008c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c4c:	f383 8811 	msr	BASEPRI, r3
 8008c50:	f3bf 8f6f 	isb	sy
 8008c54:	f3bf 8f4f 	dsb	sy
 8008c58:	613b      	str	r3, [r7, #16]
}
 8008c5a:	bf00      	nop
 8008c5c:	e7fe      	b.n	8008c5c <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8008c5e:	683a      	ldr	r2, [r7, #0]
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	429a      	cmp	r2, r3
 8008c64:	d90a      	bls.n	8008c7c <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8008c66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c6a:	f383 8811 	msr	BASEPRI, r3
 8008c6e:	f3bf 8f6f 	isb	sy
 8008c72:	f3bf 8f4f 	dsb	sy
 8008c76:	60fb      	str	r3, [r7, #12]
}
 8008c78:	bf00      	nop
 8008c7a:	e7fe      	b.n	8008c7a <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008c7c:	2202      	movs	r2, #2
 8008c7e:	2100      	movs	r1, #0
 8008c80:	6878      	ldr	r0, [r7, #4]
 8008c82:	f7ff ff3f 	bl	8008b04 <xQueueGenericCreate>
 8008c86:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8008c88:	697b      	ldr	r3, [r7, #20]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d002      	beq.n	8008c94 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008c8e:	697b      	ldr	r3, [r7, #20]
 8008c90:	683a      	ldr	r2, [r7, #0]
 8008c92:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8008c94:	697b      	ldr	r3, [r7, #20]
	}
 8008c96:	4618      	mov	r0, r3
 8008c98:	3718      	adds	r7, #24
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	bd80      	pop	{r7, pc}
	...

08008ca0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b08e      	sub	sp, #56	; 0x38
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	60f8      	str	r0, [r7, #12]
 8008ca8:	60b9      	str	r1, [r7, #8]
 8008caa:	607a      	str	r2, [r7, #4]
 8008cac:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008cae:	2300      	movs	r3, #0
 8008cb0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d10a      	bne.n	8008cd2 <xQueueGenericSend+0x32>
	__asm volatile
 8008cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cc0:	f383 8811 	msr	BASEPRI, r3
 8008cc4:	f3bf 8f6f 	isb	sy
 8008cc8:	f3bf 8f4f 	dsb	sy
 8008ccc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008cce:	bf00      	nop
 8008cd0:	e7fe      	b.n	8008cd0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008cd2:	68bb      	ldr	r3, [r7, #8]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d103      	bne.n	8008ce0 <xQueueGenericSend+0x40>
 8008cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d101      	bne.n	8008ce4 <xQueueGenericSend+0x44>
 8008ce0:	2301      	movs	r3, #1
 8008ce2:	e000      	b.n	8008ce6 <xQueueGenericSend+0x46>
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d10a      	bne.n	8008d00 <xQueueGenericSend+0x60>
	__asm volatile
 8008cea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cee:	f383 8811 	msr	BASEPRI, r3
 8008cf2:	f3bf 8f6f 	isb	sy
 8008cf6:	f3bf 8f4f 	dsb	sy
 8008cfa:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008cfc:	bf00      	nop
 8008cfe:	e7fe      	b.n	8008cfe <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008d00:	683b      	ldr	r3, [r7, #0]
 8008d02:	2b02      	cmp	r3, #2
 8008d04:	d103      	bne.n	8008d0e <xQueueGenericSend+0x6e>
 8008d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d0a:	2b01      	cmp	r3, #1
 8008d0c:	d101      	bne.n	8008d12 <xQueueGenericSend+0x72>
 8008d0e:	2301      	movs	r3, #1
 8008d10:	e000      	b.n	8008d14 <xQueueGenericSend+0x74>
 8008d12:	2300      	movs	r3, #0
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d10a      	bne.n	8008d2e <xQueueGenericSend+0x8e>
	__asm volatile
 8008d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d1c:	f383 8811 	msr	BASEPRI, r3
 8008d20:	f3bf 8f6f 	isb	sy
 8008d24:	f3bf 8f4f 	dsb	sy
 8008d28:	623b      	str	r3, [r7, #32]
}
 8008d2a:	bf00      	nop
 8008d2c:	e7fe      	b.n	8008d2c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008d2e:	f001 faa5 	bl	800a27c <xTaskGetSchedulerState>
 8008d32:	4603      	mov	r3, r0
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d102      	bne.n	8008d3e <xQueueGenericSend+0x9e>
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d101      	bne.n	8008d42 <xQueueGenericSend+0xa2>
 8008d3e:	2301      	movs	r3, #1
 8008d40:	e000      	b.n	8008d44 <xQueueGenericSend+0xa4>
 8008d42:	2300      	movs	r3, #0
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d10a      	bne.n	8008d5e <xQueueGenericSend+0xbe>
	__asm volatile
 8008d48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d4c:	f383 8811 	msr	BASEPRI, r3
 8008d50:	f3bf 8f6f 	isb	sy
 8008d54:	f3bf 8f4f 	dsb	sy
 8008d58:	61fb      	str	r3, [r7, #28]
}
 8008d5a:	bf00      	nop
 8008d5c:	e7fe      	b.n	8008d5c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008d5e:	f002 f821 	bl	800ada4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d6a:	429a      	cmp	r2, r3
 8008d6c:	d302      	bcc.n	8008d74 <xQueueGenericSend+0xd4>
 8008d6e:	683b      	ldr	r3, [r7, #0]
 8008d70:	2b02      	cmp	r3, #2
 8008d72:	d129      	bne.n	8008dc8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008d74:	683a      	ldr	r2, [r7, #0]
 8008d76:	68b9      	ldr	r1, [r7, #8]
 8008d78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008d7a:	f000 fa2a 	bl	80091d2 <prvCopyDataToQueue>
 8008d7e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d010      	beq.n	8008daa <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d8a:	3324      	adds	r3, #36	; 0x24
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	f001 f855 	bl	8009e3c <xTaskRemoveFromEventList>
 8008d92:	4603      	mov	r3, r0
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d013      	beq.n	8008dc0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008d98:	4b3f      	ldr	r3, [pc, #252]	; (8008e98 <xQueueGenericSend+0x1f8>)
 8008d9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d9e:	601a      	str	r2, [r3, #0]
 8008da0:	f3bf 8f4f 	dsb	sy
 8008da4:	f3bf 8f6f 	isb	sy
 8008da8:	e00a      	b.n	8008dc0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d007      	beq.n	8008dc0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008db0:	4b39      	ldr	r3, [pc, #228]	; (8008e98 <xQueueGenericSend+0x1f8>)
 8008db2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008db6:	601a      	str	r2, [r3, #0]
 8008db8:	f3bf 8f4f 	dsb	sy
 8008dbc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008dc0:	f002 f820 	bl	800ae04 <vPortExitCritical>
				return pdPASS;
 8008dc4:	2301      	movs	r3, #1
 8008dc6:	e063      	b.n	8008e90 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d103      	bne.n	8008dd6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008dce:	f002 f819 	bl	800ae04 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	e05c      	b.n	8008e90 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008dd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d106      	bne.n	8008dea <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008ddc:	f107 0314 	add.w	r3, r7, #20
 8008de0:	4618      	mov	r0, r3
 8008de2:	f001 f8f1 	bl	8009fc8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008de6:	2301      	movs	r3, #1
 8008de8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008dea:	f002 f80b 	bl	800ae04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008dee:	f000 fdc5 	bl	800997c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008df2:	f001 ffd7 	bl	800ada4 <vPortEnterCritical>
 8008df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008df8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008dfc:	b25b      	sxtb	r3, r3
 8008dfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e02:	d103      	bne.n	8008e0c <xQueueGenericSend+0x16c>
 8008e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e06:	2200      	movs	r2, #0
 8008e08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e0e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008e12:	b25b      	sxtb	r3, r3
 8008e14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e18:	d103      	bne.n	8008e22 <xQueueGenericSend+0x182>
 8008e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008e22:	f001 ffef 	bl	800ae04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008e26:	1d3a      	adds	r2, r7, #4
 8008e28:	f107 0314 	add.w	r3, r7, #20
 8008e2c:	4611      	mov	r1, r2
 8008e2e:	4618      	mov	r0, r3
 8008e30:	f001 f8e0 	bl	8009ff4 <xTaskCheckForTimeOut>
 8008e34:	4603      	mov	r3, r0
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d124      	bne.n	8008e84 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008e3a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008e3c:	f000 fac1 	bl	80093c2 <prvIsQueueFull>
 8008e40:	4603      	mov	r3, r0
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d018      	beq.n	8008e78 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e48:	3310      	adds	r3, #16
 8008e4a:	687a      	ldr	r2, [r7, #4]
 8008e4c:	4611      	mov	r1, r2
 8008e4e:	4618      	mov	r0, r3
 8008e50:	f000 ff68 	bl	8009d24 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008e54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008e56:	f000 fa4c 	bl	80092f2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008e5a:	f000 fd9d 	bl	8009998 <xTaskResumeAll>
 8008e5e:	4603      	mov	r3, r0
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	f47f af7c 	bne.w	8008d5e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8008e66:	4b0c      	ldr	r3, [pc, #48]	; (8008e98 <xQueueGenericSend+0x1f8>)
 8008e68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e6c:	601a      	str	r2, [r3, #0]
 8008e6e:	f3bf 8f4f 	dsb	sy
 8008e72:	f3bf 8f6f 	isb	sy
 8008e76:	e772      	b.n	8008d5e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008e78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008e7a:	f000 fa3a 	bl	80092f2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008e7e:	f000 fd8b 	bl	8009998 <xTaskResumeAll>
 8008e82:	e76c      	b.n	8008d5e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008e84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008e86:	f000 fa34 	bl	80092f2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008e8a:	f000 fd85 	bl	8009998 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008e8e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008e90:	4618      	mov	r0, r3
 8008e92:	3738      	adds	r7, #56	; 0x38
 8008e94:	46bd      	mov	sp, r7
 8008e96:	bd80      	pop	{r7, pc}
 8008e98:	e000ed04 	.word	0xe000ed04

08008e9c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b08e      	sub	sp, #56	; 0x38
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	60f8      	str	r0, [r7, #12]
 8008ea4:	60b9      	str	r1, [r7, #8]
 8008ea6:	607a      	str	r2, [r7, #4]
 8008ea8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d10a      	bne.n	8008eca <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eb8:	f383 8811 	msr	BASEPRI, r3
 8008ebc:	f3bf 8f6f 	isb	sy
 8008ec0:	f3bf 8f4f 	dsb	sy
 8008ec4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008ec6:	bf00      	nop
 8008ec8:	e7fe      	b.n	8008ec8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008eca:	68bb      	ldr	r3, [r7, #8]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d103      	bne.n	8008ed8 <xQueueGenericSendFromISR+0x3c>
 8008ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d101      	bne.n	8008edc <xQueueGenericSendFromISR+0x40>
 8008ed8:	2301      	movs	r3, #1
 8008eda:	e000      	b.n	8008ede <xQueueGenericSendFromISR+0x42>
 8008edc:	2300      	movs	r3, #0
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d10a      	bne.n	8008ef8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8008ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ee6:	f383 8811 	msr	BASEPRI, r3
 8008eea:	f3bf 8f6f 	isb	sy
 8008eee:	f3bf 8f4f 	dsb	sy
 8008ef2:	623b      	str	r3, [r7, #32]
}
 8008ef4:	bf00      	nop
 8008ef6:	e7fe      	b.n	8008ef6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008ef8:	683b      	ldr	r3, [r7, #0]
 8008efa:	2b02      	cmp	r3, #2
 8008efc:	d103      	bne.n	8008f06 <xQueueGenericSendFromISR+0x6a>
 8008efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f02:	2b01      	cmp	r3, #1
 8008f04:	d101      	bne.n	8008f0a <xQueueGenericSendFromISR+0x6e>
 8008f06:	2301      	movs	r3, #1
 8008f08:	e000      	b.n	8008f0c <xQueueGenericSendFromISR+0x70>
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d10a      	bne.n	8008f26 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f14:	f383 8811 	msr	BASEPRI, r3
 8008f18:	f3bf 8f6f 	isb	sy
 8008f1c:	f3bf 8f4f 	dsb	sy
 8008f20:	61fb      	str	r3, [r7, #28]
}
 8008f22:	bf00      	nop
 8008f24:	e7fe      	b.n	8008f24 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008f26:	f002 f81f 	bl	800af68 <vPortValidateInterruptPriority>
	__asm volatile
 8008f2a:	f3ef 8211 	mrs	r2, BASEPRI
 8008f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f32:	f383 8811 	msr	BASEPRI, r3
 8008f36:	f3bf 8f6f 	isb	sy
 8008f3a:	f3bf 8f4f 	dsb	sy
 8008f3e:	61ba      	str	r2, [r7, #24]
 8008f40:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8008f42:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008f44:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f4e:	429a      	cmp	r2, r3
 8008f50:	d302      	bcc.n	8008f58 <xQueueGenericSendFromISR+0xbc>
 8008f52:	683b      	ldr	r3, [r7, #0]
 8008f54:	2b02      	cmp	r3, #2
 8008f56:	d12c      	bne.n	8008fb2 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f5a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008f5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008f62:	683a      	ldr	r2, [r7, #0]
 8008f64:	68b9      	ldr	r1, [r7, #8]
 8008f66:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008f68:	f000 f933 	bl	80091d2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008f6c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8008f70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f74:	d112      	bne.n	8008f9c <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d016      	beq.n	8008fac <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f80:	3324      	adds	r3, #36	; 0x24
 8008f82:	4618      	mov	r0, r3
 8008f84:	f000 ff5a 	bl	8009e3c <xTaskRemoveFromEventList>
 8008f88:	4603      	mov	r3, r0
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d00e      	beq.n	8008fac <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d00b      	beq.n	8008fac <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	2201      	movs	r2, #1
 8008f98:	601a      	str	r2, [r3, #0]
 8008f9a:	e007      	b.n	8008fac <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008f9c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008fa0:	3301      	adds	r3, #1
 8008fa2:	b2db      	uxtb	r3, r3
 8008fa4:	b25a      	sxtb	r2, r3
 8008fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fa8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008fac:	2301      	movs	r3, #1
 8008fae:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8008fb0:	e001      	b.n	8008fb6 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	637b      	str	r3, [r7, #52]	; 0x34
 8008fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fb8:	613b      	str	r3, [r7, #16]
	__asm volatile
 8008fba:	693b      	ldr	r3, [r7, #16]
 8008fbc:	f383 8811 	msr	BASEPRI, r3
}
 8008fc0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008fc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	3738      	adds	r7, #56	; 0x38
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	bd80      	pop	{r7, pc}

08008fcc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	b08c      	sub	sp, #48	; 0x30
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	60f8      	str	r0, [r7, #12]
 8008fd4:	60b9      	str	r1, [r7, #8]
 8008fd6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008fd8:	2300      	movs	r3, #0
 8008fda:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d10a      	bne.n	8008ffc <xQueueReceive+0x30>
	__asm volatile
 8008fe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fea:	f383 8811 	msr	BASEPRI, r3
 8008fee:	f3bf 8f6f 	isb	sy
 8008ff2:	f3bf 8f4f 	dsb	sy
 8008ff6:	623b      	str	r3, [r7, #32]
}
 8008ff8:	bf00      	nop
 8008ffa:	e7fe      	b.n	8008ffa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008ffc:	68bb      	ldr	r3, [r7, #8]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d103      	bne.n	800900a <xQueueReceive+0x3e>
 8009002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009006:	2b00      	cmp	r3, #0
 8009008:	d101      	bne.n	800900e <xQueueReceive+0x42>
 800900a:	2301      	movs	r3, #1
 800900c:	e000      	b.n	8009010 <xQueueReceive+0x44>
 800900e:	2300      	movs	r3, #0
 8009010:	2b00      	cmp	r3, #0
 8009012:	d10a      	bne.n	800902a <xQueueReceive+0x5e>
	__asm volatile
 8009014:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009018:	f383 8811 	msr	BASEPRI, r3
 800901c:	f3bf 8f6f 	isb	sy
 8009020:	f3bf 8f4f 	dsb	sy
 8009024:	61fb      	str	r3, [r7, #28]
}
 8009026:	bf00      	nop
 8009028:	e7fe      	b.n	8009028 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800902a:	f001 f927 	bl	800a27c <xTaskGetSchedulerState>
 800902e:	4603      	mov	r3, r0
 8009030:	2b00      	cmp	r3, #0
 8009032:	d102      	bne.n	800903a <xQueueReceive+0x6e>
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	2b00      	cmp	r3, #0
 8009038:	d101      	bne.n	800903e <xQueueReceive+0x72>
 800903a:	2301      	movs	r3, #1
 800903c:	e000      	b.n	8009040 <xQueueReceive+0x74>
 800903e:	2300      	movs	r3, #0
 8009040:	2b00      	cmp	r3, #0
 8009042:	d10a      	bne.n	800905a <xQueueReceive+0x8e>
	__asm volatile
 8009044:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009048:	f383 8811 	msr	BASEPRI, r3
 800904c:	f3bf 8f6f 	isb	sy
 8009050:	f3bf 8f4f 	dsb	sy
 8009054:	61bb      	str	r3, [r7, #24]
}
 8009056:	bf00      	nop
 8009058:	e7fe      	b.n	8009058 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800905a:	f001 fea3 	bl	800ada4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800905e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009062:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009066:	2b00      	cmp	r3, #0
 8009068:	d01f      	beq.n	80090aa <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800906a:	68b9      	ldr	r1, [r7, #8]
 800906c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800906e:	f000 f91a 	bl	80092a6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009074:	1e5a      	subs	r2, r3, #1
 8009076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009078:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800907a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800907c:	691b      	ldr	r3, [r3, #16]
 800907e:	2b00      	cmp	r3, #0
 8009080:	d00f      	beq.n	80090a2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009084:	3310      	adds	r3, #16
 8009086:	4618      	mov	r0, r3
 8009088:	f000 fed8 	bl	8009e3c <xTaskRemoveFromEventList>
 800908c:	4603      	mov	r3, r0
 800908e:	2b00      	cmp	r3, #0
 8009090:	d007      	beq.n	80090a2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009092:	4b3d      	ldr	r3, [pc, #244]	; (8009188 <xQueueReceive+0x1bc>)
 8009094:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009098:	601a      	str	r2, [r3, #0]
 800909a:	f3bf 8f4f 	dsb	sy
 800909e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80090a2:	f001 feaf 	bl	800ae04 <vPortExitCritical>
				return pdPASS;
 80090a6:	2301      	movs	r3, #1
 80090a8:	e069      	b.n	800917e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d103      	bne.n	80090b8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80090b0:	f001 fea8 	bl	800ae04 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80090b4:	2300      	movs	r3, #0
 80090b6:	e062      	b.n	800917e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80090b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d106      	bne.n	80090cc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80090be:	f107 0310 	add.w	r3, r7, #16
 80090c2:	4618      	mov	r0, r3
 80090c4:	f000 ff80 	bl	8009fc8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80090c8:	2301      	movs	r3, #1
 80090ca:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80090cc:	f001 fe9a 	bl	800ae04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80090d0:	f000 fc54 	bl	800997c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80090d4:	f001 fe66 	bl	800ada4 <vPortEnterCritical>
 80090d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090da:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80090de:	b25b      	sxtb	r3, r3
 80090e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090e4:	d103      	bne.n	80090ee <xQueueReceive+0x122>
 80090e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090e8:	2200      	movs	r2, #0
 80090ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80090ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80090f4:	b25b      	sxtb	r3, r3
 80090f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090fa:	d103      	bne.n	8009104 <xQueueReceive+0x138>
 80090fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090fe:	2200      	movs	r2, #0
 8009100:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009104:	f001 fe7e 	bl	800ae04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009108:	1d3a      	adds	r2, r7, #4
 800910a:	f107 0310 	add.w	r3, r7, #16
 800910e:	4611      	mov	r1, r2
 8009110:	4618      	mov	r0, r3
 8009112:	f000 ff6f 	bl	8009ff4 <xTaskCheckForTimeOut>
 8009116:	4603      	mov	r3, r0
 8009118:	2b00      	cmp	r3, #0
 800911a:	d123      	bne.n	8009164 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800911c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800911e:	f000 f93a 	bl	8009396 <prvIsQueueEmpty>
 8009122:	4603      	mov	r3, r0
 8009124:	2b00      	cmp	r3, #0
 8009126:	d017      	beq.n	8009158 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800912a:	3324      	adds	r3, #36	; 0x24
 800912c:	687a      	ldr	r2, [r7, #4]
 800912e:	4611      	mov	r1, r2
 8009130:	4618      	mov	r0, r3
 8009132:	f000 fdf7 	bl	8009d24 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009136:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009138:	f000 f8db 	bl	80092f2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800913c:	f000 fc2c 	bl	8009998 <xTaskResumeAll>
 8009140:	4603      	mov	r3, r0
 8009142:	2b00      	cmp	r3, #0
 8009144:	d189      	bne.n	800905a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8009146:	4b10      	ldr	r3, [pc, #64]	; (8009188 <xQueueReceive+0x1bc>)
 8009148:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800914c:	601a      	str	r2, [r3, #0]
 800914e:	f3bf 8f4f 	dsb	sy
 8009152:	f3bf 8f6f 	isb	sy
 8009156:	e780      	b.n	800905a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009158:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800915a:	f000 f8ca 	bl	80092f2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800915e:	f000 fc1b 	bl	8009998 <xTaskResumeAll>
 8009162:	e77a      	b.n	800905a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009164:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009166:	f000 f8c4 	bl	80092f2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800916a:	f000 fc15 	bl	8009998 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800916e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009170:	f000 f911 	bl	8009396 <prvIsQueueEmpty>
 8009174:	4603      	mov	r3, r0
 8009176:	2b00      	cmp	r3, #0
 8009178:	f43f af6f 	beq.w	800905a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800917c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800917e:	4618      	mov	r0, r3
 8009180:	3730      	adds	r7, #48	; 0x30
 8009182:	46bd      	mov	sp, r7
 8009184:	bd80      	pop	{r7, pc}
 8009186:	bf00      	nop
 8009188:	e000ed04 	.word	0xe000ed04

0800918c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800918c:	b580      	push	{r7, lr}
 800918e:	b084      	sub	sp, #16
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	2b00      	cmp	r3, #0
 800919c:	d10a      	bne.n	80091b4 <vQueueDelete+0x28>
	__asm volatile
 800919e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091a2:	f383 8811 	msr	BASEPRI, r3
 80091a6:	f3bf 8f6f 	isb	sy
 80091aa:	f3bf 8f4f 	dsb	sy
 80091ae:	60bb      	str	r3, [r7, #8]
}
 80091b0:	bf00      	nop
 80091b2:	e7fe      	b.n	80091b2 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80091b4:	68f8      	ldr	r0, [r7, #12]
 80091b6:	f000 f947 	bl	8009448 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d102      	bne.n	80091ca <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 80091c4:	68f8      	ldr	r0, [r7, #12]
 80091c6:	f001 ffd3 	bl	800b170 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80091ca:	bf00      	nop
 80091cc:	3710      	adds	r7, #16
 80091ce:	46bd      	mov	sp, r7
 80091d0:	bd80      	pop	{r7, pc}

080091d2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80091d2:	b580      	push	{r7, lr}
 80091d4:	b086      	sub	sp, #24
 80091d6:	af00      	add	r7, sp, #0
 80091d8:	60f8      	str	r0, [r7, #12]
 80091da:	60b9      	str	r1, [r7, #8]
 80091dc:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80091de:	2300      	movs	r3, #0
 80091e0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091e6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d10d      	bne.n	800920c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d14d      	bne.n	8009294 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	689b      	ldr	r3, [r3, #8]
 80091fc:	4618      	mov	r0, r3
 80091fe:	f001 f85b 	bl	800a2b8 <xTaskPriorityDisinherit>
 8009202:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	2200      	movs	r2, #0
 8009208:	609a      	str	r2, [r3, #8]
 800920a:	e043      	b.n	8009294 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	2b00      	cmp	r3, #0
 8009210:	d119      	bne.n	8009246 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	6858      	ldr	r0, [r3, #4]
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800921a:	461a      	mov	r2, r3
 800921c:	68b9      	ldr	r1, [r7, #8]
 800921e:	f002 f8e1 	bl	800b3e4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	685a      	ldr	r2, [r3, #4]
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800922a:	441a      	add	r2, r3
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	685a      	ldr	r2, [r3, #4]
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	689b      	ldr	r3, [r3, #8]
 8009238:	429a      	cmp	r2, r3
 800923a:	d32b      	bcc.n	8009294 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	681a      	ldr	r2, [r3, #0]
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	605a      	str	r2, [r3, #4]
 8009244:	e026      	b.n	8009294 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	68d8      	ldr	r0, [r3, #12]
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800924e:	461a      	mov	r2, r3
 8009250:	68b9      	ldr	r1, [r7, #8]
 8009252:	f002 f8c7 	bl	800b3e4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	68da      	ldr	r2, [r3, #12]
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800925e:	425b      	negs	r3, r3
 8009260:	441a      	add	r2, r3
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	68da      	ldr	r2, [r3, #12]
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	429a      	cmp	r2, r3
 8009270:	d207      	bcs.n	8009282 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	689a      	ldr	r2, [r3, #8]
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800927a:	425b      	negs	r3, r3
 800927c:	441a      	add	r2, r3
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	2b02      	cmp	r3, #2
 8009286:	d105      	bne.n	8009294 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009288:	693b      	ldr	r3, [r7, #16]
 800928a:	2b00      	cmp	r3, #0
 800928c:	d002      	beq.n	8009294 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800928e:	693b      	ldr	r3, [r7, #16]
 8009290:	3b01      	subs	r3, #1
 8009292:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009294:	693b      	ldr	r3, [r7, #16]
 8009296:	1c5a      	adds	r2, r3, #1
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800929c:	697b      	ldr	r3, [r7, #20]
}
 800929e:	4618      	mov	r0, r3
 80092a0:	3718      	adds	r7, #24
 80092a2:	46bd      	mov	sp, r7
 80092a4:	bd80      	pop	{r7, pc}

080092a6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80092a6:	b580      	push	{r7, lr}
 80092a8:	b082      	sub	sp, #8
 80092aa:	af00      	add	r7, sp, #0
 80092ac:	6078      	str	r0, [r7, #4]
 80092ae:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d018      	beq.n	80092ea <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	68da      	ldr	r2, [r3, #12]
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092c0:	441a      	add	r2, r3
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	68da      	ldr	r2, [r3, #12]
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	689b      	ldr	r3, [r3, #8]
 80092ce:	429a      	cmp	r2, r3
 80092d0:	d303      	bcc.n	80092da <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681a      	ldr	r2, [r3, #0]
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	68d9      	ldr	r1, [r3, #12]
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092e2:	461a      	mov	r2, r3
 80092e4:	6838      	ldr	r0, [r7, #0]
 80092e6:	f002 f87d 	bl	800b3e4 <memcpy>
	}
}
 80092ea:	bf00      	nop
 80092ec:	3708      	adds	r7, #8
 80092ee:	46bd      	mov	sp, r7
 80092f0:	bd80      	pop	{r7, pc}

080092f2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80092f2:	b580      	push	{r7, lr}
 80092f4:	b084      	sub	sp, #16
 80092f6:	af00      	add	r7, sp, #0
 80092f8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80092fa:	f001 fd53 	bl	800ada4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009304:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009306:	e011      	b.n	800932c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800930c:	2b00      	cmp	r3, #0
 800930e:	d012      	beq.n	8009336 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	3324      	adds	r3, #36	; 0x24
 8009314:	4618      	mov	r0, r3
 8009316:	f000 fd91 	bl	8009e3c <xTaskRemoveFromEventList>
 800931a:	4603      	mov	r3, r0
 800931c:	2b00      	cmp	r3, #0
 800931e:	d001      	beq.n	8009324 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009320:	f000 feca 	bl	800a0b8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009324:	7bfb      	ldrb	r3, [r7, #15]
 8009326:	3b01      	subs	r3, #1
 8009328:	b2db      	uxtb	r3, r3
 800932a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800932c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009330:	2b00      	cmp	r3, #0
 8009332:	dce9      	bgt.n	8009308 <prvUnlockQueue+0x16>
 8009334:	e000      	b.n	8009338 <prvUnlockQueue+0x46>
					break;
 8009336:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	22ff      	movs	r2, #255	; 0xff
 800933c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009340:	f001 fd60 	bl	800ae04 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009344:	f001 fd2e 	bl	800ada4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800934e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009350:	e011      	b.n	8009376 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	691b      	ldr	r3, [r3, #16]
 8009356:	2b00      	cmp	r3, #0
 8009358:	d012      	beq.n	8009380 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	3310      	adds	r3, #16
 800935e:	4618      	mov	r0, r3
 8009360:	f000 fd6c 	bl	8009e3c <xTaskRemoveFromEventList>
 8009364:	4603      	mov	r3, r0
 8009366:	2b00      	cmp	r3, #0
 8009368:	d001      	beq.n	800936e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800936a:	f000 fea5 	bl	800a0b8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800936e:	7bbb      	ldrb	r3, [r7, #14]
 8009370:	3b01      	subs	r3, #1
 8009372:	b2db      	uxtb	r3, r3
 8009374:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009376:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800937a:	2b00      	cmp	r3, #0
 800937c:	dce9      	bgt.n	8009352 <prvUnlockQueue+0x60>
 800937e:	e000      	b.n	8009382 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009380:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	22ff      	movs	r2, #255	; 0xff
 8009386:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800938a:	f001 fd3b 	bl	800ae04 <vPortExitCritical>
}
 800938e:	bf00      	nop
 8009390:	3710      	adds	r7, #16
 8009392:	46bd      	mov	sp, r7
 8009394:	bd80      	pop	{r7, pc}

08009396 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009396:	b580      	push	{r7, lr}
 8009398:	b084      	sub	sp, #16
 800939a:	af00      	add	r7, sp, #0
 800939c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800939e:	f001 fd01 	bl	800ada4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d102      	bne.n	80093b0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80093aa:	2301      	movs	r3, #1
 80093ac:	60fb      	str	r3, [r7, #12]
 80093ae:	e001      	b.n	80093b4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80093b0:	2300      	movs	r3, #0
 80093b2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80093b4:	f001 fd26 	bl	800ae04 <vPortExitCritical>

	return xReturn;
 80093b8:	68fb      	ldr	r3, [r7, #12]
}
 80093ba:	4618      	mov	r0, r3
 80093bc:	3710      	adds	r7, #16
 80093be:	46bd      	mov	sp, r7
 80093c0:	bd80      	pop	{r7, pc}

080093c2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80093c2:	b580      	push	{r7, lr}
 80093c4:	b084      	sub	sp, #16
 80093c6:	af00      	add	r7, sp, #0
 80093c8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80093ca:	f001 fceb 	bl	800ada4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093d6:	429a      	cmp	r2, r3
 80093d8:	d102      	bne.n	80093e0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80093da:	2301      	movs	r3, #1
 80093dc:	60fb      	str	r3, [r7, #12]
 80093de:	e001      	b.n	80093e4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80093e0:	2300      	movs	r3, #0
 80093e2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80093e4:	f001 fd0e 	bl	800ae04 <vPortExitCritical>

	return xReturn;
 80093e8:	68fb      	ldr	r3, [r7, #12]
}
 80093ea:	4618      	mov	r0, r3
 80093ec:	3710      	adds	r7, #16
 80093ee:	46bd      	mov	sp, r7
 80093f0:	bd80      	pop	{r7, pc}
	...

080093f4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80093f4:	b480      	push	{r7}
 80093f6:	b085      	sub	sp, #20
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
 80093fc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80093fe:	2300      	movs	r3, #0
 8009400:	60fb      	str	r3, [r7, #12]
 8009402:	e014      	b.n	800942e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009404:	4a0f      	ldr	r2, [pc, #60]	; (8009444 <vQueueAddToRegistry+0x50>)
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d10b      	bne.n	8009428 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009410:	490c      	ldr	r1, [pc, #48]	; (8009444 <vQueueAddToRegistry+0x50>)
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	683a      	ldr	r2, [r7, #0]
 8009416:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800941a:	4a0a      	ldr	r2, [pc, #40]	; (8009444 <vQueueAddToRegistry+0x50>)
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	00db      	lsls	r3, r3, #3
 8009420:	4413      	add	r3, r2
 8009422:	687a      	ldr	r2, [r7, #4]
 8009424:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009426:	e006      	b.n	8009436 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	3301      	adds	r3, #1
 800942c:	60fb      	str	r3, [r7, #12]
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	2b07      	cmp	r3, #7
 8009432:	d9e7      	bls.n	8009404 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009434:	bf00      	nop
 8009436:	bf00      	nop
 8009438:	3714      	adds	r7, #20
 800943a:	46bd      	mov	sp, r7
 800943c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009440:	4770      	bx	lr
 8009442:	bf00      	nop
 8009444:	20009ed0 	.word	0x20009ed0

08009448 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8009448:	b480      	push	{r7}
 800944a:	b085      	sub	sp, #20
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009450:	2300      	movs	r3, #0
 8009452:	60fb      	str	r3, [r7, #12]
 8009454:	e016      	b.n	8009484 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8009456:	4a10      	ldr	r2, [pc, #64]	; (8009498 <vQueueUnregisterQueue+0x50>)
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	00db      	lsls	r3, r3, #3
 800945c:	4413      	add	r3, r2
 800945e:	685b      	ldr	r3, [r3, #4]
 8009460:	687a      	ldr	r2, [r7, #4]
 8009462:	429a      	cmp	r2, r3
 8009464:	d10b      	bne.n	800947e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8009466:	4a0c      	ldr	r2, [pc, #48]	; (8009498 <vQueueUnregisterQueue+0x50>)
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	2100      	movs	r1, #0
 800946c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8009470:	4a09      	ldr	r2, [pc, #36]	; (8009498 <vQueueUnregisterQueue+0x50>)
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	00db      	lsls	r3, r3, #3
 8009476:	4413      	add	r3, r2
 8009478:	2200      	movs	r2, #0
 800947a:	605a      	str	r2, [r3, #4]
				break;
 800947c:	e006      	b.n	800948c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	3301      	adds	r3, #1
 8009482:	60fb      	str	r3, [r7, #12]
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	2b07      	cmp	r3, #7
 8009488:	d9e5      	bls.n	8009456 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800948a:	bf00      	nop
 800948c:	bf00      	nop
 800948e:	3714      	adds	r7, #20
 8009490:	46bd      	mov	sp, r7
 8009492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009496:	4770      	bx	lr
 8009498:	20009ed0 	.word	0x20009ed0

0800949c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800949c:	b580      	push	{r7, lr}
 800949e:	b086      	sub	sp, #24
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	60f8      	str	r0, [r7, #12]
 80094a4:	60b9      	str	r1, [r7, #8]
 80094a6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80094ac:	f001 fc7a 	bl	800ada4 <vPortEnterCritical>
 80094b0:	697b      	ldr	r3, [r7, #20]
 80094b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80094b6:	b25b      	sxtb	r3, r3
 80094b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094bc:	d103      	bne.n	80094c6 <vQueueWaitForMessageRestricted+0x2a>
 80094be:	697b      	ldr	r3, [r7, #20]
 80094c0:	2200      	movs	r2, #0
 80094c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80094c6:	697b      	ldr	r3, [r7, #20]
 80094c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80094cc:	b25b      	sxtb	r3, r3
 80094ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094d2:	d103      	bne.n	80094dc <vQueueWaitForMessageRestricted+0x40>
 80094d4:	697b      	ldr	r3, [r7, #20]
 80094d6:	2200      	movs	r2, #0
 80094d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80094dc:	f001 fc92 	bl	800ae04 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80094e0:	697b      	ldr	r3, [r7, #20]
 80094e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d106      	bne.n	80094f6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80094e8:	697b      	ldr	r3, [r7, #20]
 80094ea:	3324      	adds	r3, #36	; 0x24
 80094ec:	687a      	ldr	r2, [r7, #4]
 80094ee:	68b9      	ldr	r1, [r7, #8]
 80094f0:	4618      	mov	r0, r3
 80094f2:	f000 fc77 	bl	8009de4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80094f6:	6978      	ldr	r0, [r7, #20]
 80094f8:	f7ff fefb 	bl	80092f2 <prvUnlockQueue>
	}
 80094fc:	bf00      	nop
 80094fe:	3718      	adds	r7, #24
 8009500:	46bd      	mov	sp, r7
 8009502:	bd80      	pop	{r7, pc}

08009504 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009504:	b580      	push	{r7, lr}
 8009506:	b08e      	sub	sp, #56	; 0x38
 8009508:	af04      	add	r7, sp, #16
 800950a:	60f8      	str	r0, [r7, #12]
 800950c:	60b9      	str	r1, [r7, #8]
 800950e:	607a      	str	r2, [r7, #4]
 8009510:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009512:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009514:	2b00      	cmp	r3, #0
 8009516:	d10a      	bne.n	800952e <xTaskCreateStatic+0x2a>
	__asm volatile
 8009518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800951c:	f383 8811 	msr	BASEPRI, r3
 8009520:	f3bf 8f6f 	isb	sy
 8009524:	f3bf 8f4f 	dsb	sy
 8009528:	623b      	str	r3, [r7, #32]
}
 800952a:	bf00      	nop
 800952c:	e7fe      	b.n	800952c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800952e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009530:	2b00      	cmp	r3, #0
 8009532:	d10a      	bne.n	800954a <xTaskCreateStatic+0x46>
	__asm volatile
 8009534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009538:	f383 8811 	msr	BASEPRI, r3
 800953c:	f3bf 8f6f 	isb	sy
 8009540:	f3bf 8f4f 	dsb	sy
 8009544:	61fb      	str	r3, [r7, #28]
}
 8009546:	bf00      	nop
 8009548:	e7fe      	b.n	8009548 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800954a:	235c      	movs	r3, #92	; 0x5c
 800954c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800954e:	693b      	ldr	r3, [r7, #16]
 8009550:	2b5c      	cmp	r3, #92	; 0x5c
 8009552:	d00a      	beq.n	800956a <xTaskCreateStatic+0x66>
	__asm volatile
 8009554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009558:	f383 8811 	msr	BASEPRI, r3
 800955c:	f3bf 8f6f 	isb	sy
 8009560:	f3bf 8f4f 	dsb	sy
 8009564:	61bb      	str	r3, [r7, #24]
}
 8009566:	bf00      	nop
 8009568:	e7fe      	b.n	8009568 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800956a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800956c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800956e:	2b00      	cmp	r3, #0
 8009570:	d01e      	beq.n	80095b0 <xTaskCreateStatic+0xac>
 8009572:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009574:	2b00      	cmp	r3, #0
 8009576:	d01b      	beq.n	80095b0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800957a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800957c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800957e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009580:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009584:	2202      	movs	r2, #2
 8009586:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800958a:	2300      	movs	r3, #0
 800958c:	9303      	str	r3, [sp, #12]
 800958e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009590:	9302      	str	r3, [sp, #8]
 8009592:	f107 0314 	add.w	r3, r7, #20
 8009596:	9301      	str	r3, [sp, #4]
 8009598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800959a:	9300      	str	r3, [sp, #0]
 800959c:	683b      	ldr	r3, [r7, #0]
 800959e:	687a      	ldr	r2, [r7, #4]
 80095a0:	68b9      	ldr	r1, [r7, #8]
 80095a2:	68f8      	ldr	r0, [r7, #12]
 80095a4:	f000 f850 	bl	8009648 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80095a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80095aa:	f000 f8dd 	bl	8009768 <prvAddNewTaskToReadyList>
 80095ae:	e001      	b.n	80095b4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80095b0:	2300      	movs	r3, #0
 80095b2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80095b4:	697b      	ldr	r3, [r7, #20]
	}
 80095b6:	4618      	mov	r0, r3
 80095b8:	3728      	adds	r7, #40	; 0x28
 80095ba:	46bd      	mov	sp, r7
 80095bc:	bd80      	pop	{r7, pc}

080095be <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80095be:	b580      	push	{r7, lr}
 80095c0:	b08c      	sub	sp, #48	; 0x30
 80095c2:	af04      	add	r7, sp, #16
 80095c4:	60f8      	str	r0, [r7, #12]
 80095c6:	60b9      	str	r1, [r7, #8]
 80095c8:	603b      	str	r3, [r7, #0]
 80095ca:	4613      	mov	r3, r2
 80095cc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80095ce:	88fb      	ldrh	r3, [r7, #6]
 80095d0:	009b      	lsls	r3, r3, #2
 80095d2:	4618      	mov	r0, r3
 80095d4:	f001 fd08 	bl	800afe8 <pvPortMalloc>
 80095d8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80095da:	697b      	ldr	r3, [r7, #20]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d00e      	beq.n	80095fe <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80095e0:	205c      	movs	r0, #92	; 0x5c
 80095e2:	f001 fd01 	bl	800afe8 <pvPortMalloc>
 80095e6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80095e8:	69fb      	ldr	r3, [r7, #28]
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d003      	beq.n	80095f6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80095ee:	69fb      	ldr	r3, [r7, #28]
 80095f0:	697a      	ldr	r2, [r7, #20]
 80095f2:	631a      	str	r2, [r3, #48]	; 0x30
 80095f4:	e005      	b.n	8009602 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80095f6:	6978      	ldr	r0, [r7, #20]
 80095f8:	f001 fdba 	bl	800b170 <vPortFree>
 80095fc:	e001      	b.n	8009602 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80095fe:	2300      	movs	r3, #0
 8009600:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009602:	69fb      	ldr	r3, [r7, #28]
 8009604:	2b00      	cmp	r3, #0
 8009606:	d017      	beq.n	8009638 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009608:	69fb      	ldr	r3, [r7, #28]
 800960a:	2200      	movs	r2, #0
 800960c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009610:	88fa      	ldrh	r2, [r7, #6]
 8009612:	2300      	movs	r3, #0
 8009614:	9303      	str	r3, [sp, #12]
 8009616:	69fb      	ldr	r3, [r7, #28]
 8009618:	9302      	str	r3, [sp, #8]
 800961a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800961c:	9301      	str	r3, [sp, #4]
 800961e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009620:	9300      	str	r3, [sp, #0]
 8009622:	683b      	ldr	r3, [r7, #0]
 8009624:	68b9      	ldr	r1, [r7, #8]
 8009626:	68f8      	ldr	r0, [r7, #12]
 8009628:	f000 f80e 	bl	8009648 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800962c:	69f8      	ldr	r0, [r7, #28]
 800962e:	f000 f89b 	bl	8009768 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009632:	2301      	movs	r3, #1
 8009634:	61bb      	str	r3, [r7, #24]
 8009636:	e002      	b.n	800963e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009638:	f04f 33ff 	mov.w	r3, #4294967295
 800963c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800963e:	69bb      	ldr	r3, [r7, #24]
	}
 8009640:	4618      	mov	r0, r3
 8009642:	3720      	adds	r7, #32
 8009644:	46bd      	mov	sp, r7
 8009646:	bd80      	pop	{r7, pc}

08009648 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009648:	b580      	push	{r7, lr}
 800964a:	b088      	sub	sp, #32
 800964c:	af00      	add	r7, sp, #0
 800964e:	60f8      	str	r0, [r7, #12]
 8009650:	60b9      	str	r1, [r7, #8]
 8009652:	607a      	str	r2, [r7, #4]
 8009654:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009658:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	009b      	lsls	r3, r3, #2
 800965e:	461a      	mov	r2, r3
 8009660:	21a5      	movs	r1, #165	; 0xa5
 8009662:	f001 fecd 	bl	800b400 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009668:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009670:	3b01      	subs	r3, #1
 8009672:	009b      	lsls	r3, r3, #2
 8009674:	4413      	add	r3, r2
 8009676:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009678:	69bb      	ldr	r3, [r7, #24]
 800967a:	f023 0307 	bic.w	r3, r3, #7
 800967e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009680:	69bb      	ldr	r3, [r7, #24]
 8009682:	f003 0307 	and.w	r3, r3, #7
 8009686:	2b00      	cmp	r3, #0
 8009688:	d00a      	beq.n	80096a0 <prvInitialiseNewTask+0x58>
	__asm volatile
 800968a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800968e:	f383 8811 	msr	BASEPRI, r3
 8009692:	f3bf 8f6f 	isb	sy
 8009696:	f3bf 8f4f 	dsb	sy
 800969a:	617b      	str	r3, [r7, #20]
}
 800969c:	bf00      	nop
 800969e:	e7fe      	b.n	800969e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80096a0:	68bb      	ldr	r3, [r7, #8]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d01f      	beq.n	80096e6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80096a6:	2300      	movs	r3, #0
 80096a8:	61fb      	str	r3, [r7, #28]
 80096aa:	e012      	b.n	80096d2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80096ac:	68ba      	ldr	r2, [r7, #8]
 80096ae:	69fb      	ldr	r3, [r7, #28]
 80096b0:	4413      	add	r3, r2
 80096b2:	7819      	ldrb	r1, [r3, #0]
 80096b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80096b6:	69fb      	ldr	r3, [r7, #28]
 80096b8:	4413      	add	r3, r2
 80096ba:	3334      	adds	r3, #52	; 0x34
 80096bc:	460a      	mov	r2, r1
 80096be:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80096c0:	68ba      	ldr	r2, [r7, #8]
 80096c2:	69fb      	ldr	r3, [r7, #28]
 80096c4:	4413      	add	r3, r2
 80096c6:	781b      	ldrb	r3, [r3, #0]
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d006      	beq.n	80096da <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80096cc:	69fb      	ldr	r3, [r7, #28]
 80096ce:	3301      	adds	r3, #1
 80096d0:	61fb      	str	r3, [r7, #28]
 80096d2:	69fb      	ldr	r3, [r7, #28]
 80096d4:	2b0f      	cmp	r3, #15
 80096d6:	d9e9      	bls.n	80096ac <prvInitialiseNewTask+0x64>
 80096d8:	e000      	b.n	80096dc <prvInitialiseNewTask+0x94>
			{
				break;
 80096da:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80096dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096de:	2200      	movs	r2, #0
 80096e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80096e4:	e003      	b.n	80096ee <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80096e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096e8:	2200      	movs	r2, #0
 80096ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80096ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096f0:	2b37      	cmp	r3, #55	; 0x37
 80096f2:	d901      	bls.n	80096f8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80096f4:	2337      	movs	r3, #55	; 0x37
 80096f6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80096f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80096fc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80096fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009700:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009702:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009706:	2200      	movs	r2, #0
 8009708:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800970a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800970c:	3304      	adds	r3, #4
 800970e:	4618      	mov	r0, r3
 8009710:	f7ff f884 	bl	800881c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009716:	3318      	adds	r3, #24
 8009718:	4618      	mov	r0, r3
 800971a:	f7ff f87f 	bl	800881c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800971e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009720:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009722:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009726:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800972a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800972c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800972e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009730:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009732:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009736:	2200      	movs	r2, #0
 8009738:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800973a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800973c:	2200      	movs	r2, #0
 800973e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009742:	683a      	ldr	r2, [r7, #0]
 8009744:	68f9      	ldr	r1, [r7, #12]
 8009746:	69b8      	ldr	r0, [r7, #24]
 8009748:	f001 f9fe 	bl	800ab48 <pxPortInitialiseStack>
 800974c:	4602      	mov	r2, r0
 800974e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009750:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009754:	2b00      	cmp	r3, #0
 8009756:	d002      	beq.n	800975e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800975a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800975c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800975e:	bf00      	nop
 8009760:	3720      	adds	r7, #32
 8009762:	46bd      	mov	sp, r7
 8009764:	bd80      	pop	{r7, pc}
	...

08009768 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009768:	b580      	push	{r7, lr}
 800976a:	b082      	sub	sp, #8
 800976c:	af00      	add	r7, sp, #0
 800976e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009770:	f001 fb18 	bl	800ada4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009774:	4b2d      	ldr	r3, [pc, #180]	; (800982c <prvAddNewTaskToReadyList+0xc4>)
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	3301      	adds	r3, #1
 800977a:	4a2c      	ldr	r2, [pc, #176]	; (800982c <prvAddNewTaskToReadyList+0xc4>)
 800977c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800977e:	4b2c      	ldr	r3, [pc, #176]	; (8009830 <prvAddNewTaskToReadyList+0xc8>)
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	2b00      	cmp	r3, #0
 8009784:	d109      	bne.n	800979a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009786:	4a2a      	ldr	r2, [pc, #168]	; (8009830 <prvAddNewTaskToReadyList+0xc8>)
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800978c:	4b27      	ldr	r3, [pc, #156]	; (800982c <prvAddNewTaskToReadyList+0xc4>)
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	2b01      	cmp	r3, #1
 8009792:	d110      	bne.n	80097b6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009794:	f000 fcb4 	bl	800a100 <prvInitialiseTaskLists>
 8009798:	e00d      	b.n	80097b6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800979a:	4b26      	ldr	r3, [pc, #152]	; (8009834 <prvAddNewTaskToReadyList+0xcc>)
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d109      	bne.n	80097b6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80097a2:	4b23      	ldr	r3, [pc, #140]	; (8009830 <prvAddNewTaskToReadyList+0xc8>)
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097ac:	429a      	cmp	r2, r3
 80097ae:	d802      	bhi.n	80097b6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80097b0:	4a1f      	ldr	r2, [pc, #124]	; (8009830 <prvAddNewTaskToReadyList+0xc8>)
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80097b6:	4b20      	ldr	r3, [pc, #128]	; (8009838 <prvAddNewTaskToReadyList+0xd0>)
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	3301      	adds	r3, #1
 80097bc:	4a1e      	ldr	r2, [pc, #120]	; (8009838 <prvAddNewTaskToReadyList+0xd0>)
 80097be:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80097c0:	4b1d      	ldr	r3, [pc, #116]	; (8009838 <prvAddNewTaskToReadyList+0xd0>)
 80097c2:	681a      	ldr	r2, [r3, #0]
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097cc:	4b1b      	ldr	r3, [pc, #108]	; (800983c <prvAddNewTaskToReadyList+0xd4>)
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	429a      	cmp	r2, r3
 80097d2:	d903      	bls.n	80097dc <prvAddNewTaskToReadyList+0x74>
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097d8:	4a18      	ldr	r2, [pc, #96]	; (800983c <prvAddNewTaskToReadyList+0xd4>)
 80097da:	6013      	str	r3, [r2, #0]
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097e0:	4613      	mov	r3, r2
 80097e2:	009b      	lsls	r3, r3, #2
 80097e4:	4413      	add	r3, r2
 80097e6:	009b      	lsls	r3, r3, #2
 80097e8:	4a15      	ldr	r2, [pc, #84]	; (8009840 <prvAddNewTaskToReadyList+0xd8>)
 80097ea:	441a      	add	r2, r3
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	3304      	adds	r3, #4
 80097f0:	4619      	mov	r1, r3
 80097f2:	4610      	mov	r0, r2
 80097f4:	f7ff f81f 	bl	8008836 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80097f8:	f001 fb04 	bl	800ae04 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80097fc:	4b0d      	ldr	r3, [pc, #52]	; (8009834 <prvAddNewTaskToReadyList+0xcc>)
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	2b00      	cmp	r3, #0
 8009802:	d00e      	beq.n	8009822 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009804:	4b0a      	ldr	r3, [pc, #40]	; (8009830 <prvAddNewTaskToReadyList+0xc8>)
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800980e:	429a      	cmp	r2, r3
 8009810:	d207      	bcs.n	8009822 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009812:	4b0c      	ldr	r3, [pc, #48]	; (8009844 <prvAddNewTaskToReadyList+0xdc>)
 8009814:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009818:	601a      	str	r2, [r3, #0]
 800981a:	f3bf 8f4f 	dsb	sy
 800981e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009822:	bf00      	nop
 8009824:	3708      	adds	r7, #8
 8009826:	46bd      	mov	sp, r7
 8009828:	bd80      	pop	{r7, pc}
 800982a:	bf00      	nop
 800982c:	20005ac8 	.word	0x20005ac8
 8009830:	200055f4 	.word	0x200055f4
 8009834:	20005ad4 	.word	0x20005ad4
 8009838:	20005ae4 	.word	0x20005ae4
 800983c:	20005ad0 	.word	0x20005ad0
 8009840:	200055f8 	.word	0x200055f8
 8009844:	e000ed04 	.word	0xe000ed04

08009848 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009848:	b580      	push	{r7, lr}
 800984a:	b084      	sub	sp, #16
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009850:	2300      	movs	r3, #0
 8009852:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	2b00      	cmp	r3, #0
 8009858:	d017      	beq.n	800988a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800985a:	4b13      	ldr	r3, [pc, #76]	; (80098a8 <vTaskDelay+0x60>)
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	2b00      	cmp	r3, #0
 8009860:	d00a      	beq.n	8009878 <vTaskDelay+0x30>
	__asm volatile
 8009862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009866:	f383 8811 	msr	BASEPRI, r3
 800986a:	f3bf 8f6f 	isb	sy
 800986e:	f3bf 8f4f 	dsb	sy
 8009872:	60bb      	str	r3, [r7, #8]
}
 8009874:	bf00      	nop
 8009876:	e7fe      	b.n	8009876 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009878:	f000 f880 	bl	800997c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800987c:	2100      	movs	r1, #0
 800987e:	6878      	ldr	r0, [r7, #4]
 8009880:	f000 fda0 	bl	800a3c4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009884:	f000 f888 	bl	8009998 <xTaskResumeAll>
 8009888:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	2b00      	cmp	r3, #0
 800988e:	d107      	bne.n	80098a0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009890:	4b06      	ldr	r3, [pc, #24]	; (80098ac <vTaskDelay+0x64>)
 8009892:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009896:	601a      	str	r2, [r3, #0]
 8009898:	f3bf 8f4f 	dsb	sy
 800989c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80098a0:	bf00      	nop
 80098a2:	3710      	adds	r7, #16
 80098a4:	46bd      	mov	sp, r7
 80098a6:	bd80      	pop	{r7, pc}
 80098a8:	20005af0 	.word	0x20005af0
 80098ac:	e000ed04 	.word	0xe000ed04

080098b0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80098b0:	b580      	push	{r7, lr}
 80098b2:	b08a      	sub	sp, #40	; 0x28
 80098b4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80098b6:	2300      	movs	r3, #0
 80098b8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80098ba:	2300      	movs	r3, #0
 80098bc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80098be:	463a      	mov	r2, r7
 80098c0:	1d39      	adds	r1, r7, #4
 80098c2:	f107 0308 	add.w	r3, r7, #8
 80098c6:	4618      	mov	r0, r3
 80098c8:	f7fe fce8 	bl	800829c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80098cc:	6839      	ldr	r1, [r7, #0]
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	68ba      	ldr	r2, [r7, #8]
 80098d2:	9202      	str	r2, [sp, #8]
 80098d4:	9301      	str	r3, [sp, #4]
 80098d6:	2300      	movs	r3, #0
 80098d8:	9300      	str	r3, [sp, #0]
 80098da:	2300      	movs	r3, #0
 80098dc:	460a      	mov	r2, r1
 80098de:	4921      	ldr	r1, [pc, #132]	; (8009964 <vTaskStartScheduler+0xb4>)
 80098e0:	4821      	ldr	r0, [pc, #132]	; (8009968 <vTaskStartScheduler+0xb8>)
 80098e2:	f7ff fe0f 	bl	8009504 <xTaskCreateStatic>
 80098e6:	4603      	mov	r3, r0
 80098e8:	4a20      	ldr	r2, [pc, #128]	; (800996c <vTaskStartScheduler+0xbc>)
 80098ea:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80098ec:	4b1f      	ldr	r3, [pc, #124]	; (800996c <vTaskStartScheduler+0xbc>)
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d002      	beq.n	80098fa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80098f4:	2301      	movs	r3, #1
 80098f6:	617b      	str	r3, [r7, #20]
 80098f8:	e001      	b.n	80098fe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80098fa:	2300      	movs	r3, #0
 80098fc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80098fe:	697b      	ldr	r3, [r7, #20]
 8009900:	2b01      	cmp	r3, #1
 8009902:	d102      	bne.n	800990a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009904:	f000 fdb2 	bl	800a46c <xTimerCreateTimerTask>
 8009908:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800990a:	697b      	ldr	r3, [r7, #20]
 800990c:	2b01      	cmp	r3, #1
 800990e:	d116      	bne.n	800993e <vTaskStartScheduler+0x8e>
	__asm volatile
 8009910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009914:	f383 8811 	msr	BASEPRI, r3
 8009918:	f3bf 8f6f 	isb	sy
 800991c:	f3bf 8f4f 	dsb	sy
 8009920:	613b      	str	r3, [r7, #16]
}
 8009922:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009924:	4b12      	ldr	r3, [pc, #72]	; (8009970 <vTaskStartScheduler+0xc0>)
 8009926:	f04f 32ff 	mov.w	r2, #4294967295
 800992a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800992c:	4b11      	ldr	r3, [pc, #68]	; (8009974 <vTaskStartScheduler+0xc4>)
 800992e:	2201      	movs	r2, #1
 8009930:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009932:	4b11      	ldr	r3, [pc, #68]	; (8009978 <vTaskStartScheduler+0xc8>)
 8009934:	2200      	movs	r2, #0
 8009936:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009938:	f001 f992 	bl	800ac60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800993c:	e00e      	b.n	800995c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800993e:	697b      	ldr	r3, [r7, #20]
 8009940:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009944:	d10a      	bne.n	800995c <vTaskStartScheduler+0xac>
	__asm volatile
 8009946:	f04f 0350 	mov.w	r3, #80	; 0x50
 800994a:	f383 8811 	msr	BASEPRI, r3
 800994e:	f3bf 8f6f 	isb	sy
 8009952:	f3bf 8f4f 	dsb	sy
 8009956:	60fb      	str	r3, [r7, #12]
}
 8009958:	bf00      	nop
 800995a:	e7fe      	b.n	800995a <vTaskStartScheduler+0xaa>
}
 800995c:	bf00      	nop
 800995e:	3718      	adds	r7, #24
 8009960:	46bd      	mov	sp, r7
 8009962:	bd80      	pop	{r7, pc}
 8009964:	0800c618 	.word	0x0800c618
 8009968:	0800a0d1 	.word	0x0800a0d1
 800996c:	20005aec 	.word	0x20005aec
 8009970:	20005ae8 	.word	0x20005ae8
 8009974:	20005ad4 	.word	0x20005ad4
 8009978:	20005acc 	.word	0x20005acc

0800997c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800997c:	b480      	push	{r7}
 800997e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8009980:	4b04      	ldr	r3, [pc, #16]	; (8009994 <vTaskSuspendAll+0x18>)
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	3301      	adds	r3, #1
 8009986:	4a03      	ldr	r2, [pc, #12]	; (8009994 <vTaskSuspendAll+0x18>)
 8009988:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800998a:	bf00      	nop
 800998c:	46bd      	mov	sp, r7
 800998e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009992:	4770      	bx	lr
 8009994:	20005af0 	.word	0x20005af0

08009998 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009998:	b580      	push	{r7, lr}
 800999a:	b084      	sub	sp, #16
 800999c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800999e:	2300      	movs	r3, #0
 80099a0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80099a2:	2300      	movs	r3, #0
 80099a4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80099a6:	4b42      	ldr	r3, [pc, #264]	; (8009ab0 <xTaskResumeAll+0x118>)
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d10a      	bne.n	80099c4 <xTaskResumeAll+0x2c>
	__asm volatile
 80099ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099b2:	f383 8811 	msr	BASEPRI, r3
 80099b6:	f3bf 8f6f 	isb	sy
 80099ba:	f3bf 8f4f 	dsb	sy
 80099be:	603b      	str	r3, [r7, #0]
}
 80099c0:	bf00      	nop
 80099c2:	e7fe      	b.n	80099c2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80099c4:	f001 f9ee 	bl	800ada4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80099c8:	4b39      	ldr	r3, [pc, #228]	; (8009ab0 <xTaskResumeAll+0x118>)
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	3b01      	subs	r3, #1
 80099ce:	4a38      	ldr	r2, [pc, #224]	; (8009ab0 <xTaskResumeAll+0x118>)
 80099d0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80099d2:	4b37      	ldr	r3, [pc, #220]	; (8009ab0 <xTaskResumeAll+0x118>)
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d162      	bne.n	8009aa0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80099da:	4b36      	ldr	r3, [pc, #216]	; (8009ab4 <xTaskResumeAll+0x11c>)
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d05e      	beq.n	8009aa0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80099e2:	e02f      	b.n	8009a44 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80099e4:	4b34      	ldr	r3, [pc, #208]	; (8009ab8 <xTaskResumeAll+0x120>)
 80099e6:	68db      	ldr	r3, [r3, #12]
 80099e8:	68db      	ldr	r3, [r3, #12]
 80099ea:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	3318      	adds	r3, #24
 80099f0:	4618      	mov	r0, r3
 80099f2:	f7fe ff7d 	bl	80088f0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	3304      	adds	r3, #4
 80099fa:	4618      	mov	r0, r3
 80099fc:	f7fe ff78 	bl	80088f0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a04:	4b2d      	ldr	r3, [pc, #180]	; (8009abc <xTaskResumeAll+0x124>)
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	429a      	cmp	r2, r3
 8009a0a:	d903      	bls.n	8009a14 <xTaskResumeAll+0x7c>
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a10:	4a2a      	ldr	r2, [pc, #168]	; (8009abc <xTaskResumeAll+0x124>)
 8009a12:	6013      	str	r3, [r2, #0]
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a18:	4613      	mov	r3, r2
 8009a1a:	009b      	lsls	r3, r3, #2
 8009a1c:	4413      	add	r3, r2
 8009a1e:	009b      	lsls	r3, r3, #2
 8009a20:	4a27      	ldr	r2, [pc, #156]	; (8009ac0 <xTaskResumeAll+0x128>)
 8009a22:	441a      	add	r2, r3
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	3304      	adds	r3, #4
 8009a28:	4619      	mov	r1, r3
 8009a2a:	4610      	mov	r0, r2
 8009a2c:	f7fe ff03 	bl	8008836 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a34:	4b23      	ldr	r3, [pc, #140]	; (8009ac4 <xTaskResumeAll+0x12c>)
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a3a:	429a      	cmp	r2, r3
 8009a3c:	d302      	bcc.n	8009a44 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8009a3e:	4b22      	ldr	r3, [pc, #136]	; (8009ac8 <xTaskResumeAll+0x130>)
 8009a40:	2201      	movs	r2, #1
 8009a42:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009a44:	4b1c      	ldr	r3, [pc, #112]	; (8009ab8 <xTaskResumeAll+0x120>)
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d1cb      	bne.n	80099e4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d001      	beq.n	8009a56 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009a52:	f000 fbf3 	bl	800a23c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8009a56:	4b1d      	ldr	r3, [pc, #116]	; (8009acc <xTaskResumeAll+0x134>)
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d010      	beq.n	8009a84 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009a62:	f000 f847 	bl	8009af4 <xTaskIncrementTick>
 8009a66:	4603      	mov	r3, r0
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d002      	beq.n	8009a72 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009a6c:	4b16      	ldr	r3, [pc, #88]	; (8009ac8 <xTaskResumeAll+0x130>)
 8009a6e:	2201      	movs	r2, #1
 8009a70:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	3b01      	subs	r3, #1
 8009a76:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d1f1      	bne.n	8009a62 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8009a7e:	4b13      	ldr	r3, [pc, #76]	; (8009acc <xTaskResumeAll+0x134>)
 8009a80:	2200      	movs	r2, #0
 8009a82:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009a84:	4b10      	ldr	r3, [pc, #64]	; (8009ac8 <xTaskResumeAll+0x130>)
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d009      	beq.n	8009aa0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009a8c:	2301      	movs	r3, #1
 8009a8e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009a90:	4b0f      	ldr	r3, [pc, #60]	; (8009ad0 <xTaskResumeAll+0x138>)
 8009a92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a96:	601a      	str	r2, [r3, #0]
 8009a98:	f3bf 8f4f 	dsb	sy
 8009a9c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009aa0:	f001 f9b0 	bl	800ae04 <vPortExitCritical>

	return xAlreadyYielded;
 8009aa4:	68bb      	ldr	r3, [r7, #8]
}
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	3710      	adds	r7, #16
 8009aaa:	46bd      	mov	sp, r7
 8009aac:	bd80      	pop	{r7, pc}
 8009aae:	bf00      	nop
 8009ab0:	20005af0 	.word	0x20005af0
 8009ab4:	20005ac8 	.word	0x20005ac8
 8009ab8:	20005a88 	.word	0x20005a88
 8009abc:	20005ad0 	.word	0x20005ad0
 8009ac0:	200055f8 	.word	0x200055f8
 8009ac4:	200055f4 	.word	0x200055f4
 8009ac8:	20005adc 	.word	0x20005adc
 8009acc:	20005ad8 	.word	0x20005ad8
 8009ad0:	e000ed04 	.word	0xe000ed04

08009ad4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009ad4:	b480      	push	{r7}
 8009ad6:	b083      	sub	sp, #12
 8009ad8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009ada:	4b05      	ldr	r3, [pc, #20]	; (8009af0 <xTaskGetTickCount+0x1c>)
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009ae0:	687b      	ldr	r3, [r7, #4]
}
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	370c      	adds	r7, #12
 8009ae6:	46bd      	mov	sp, r7
 8009ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aec:	4770      	bx	lr
 8009aee:	bf00      	nop
 8009af0:	20005acc 	.word	0x20005acc

08009af4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009af4:	b580      	push	{r7, lr}
 8009af6:	b086      	sub	sp, #24
 8009af8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009afa:	2300      	movs	r3, #0
 8009afc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009afe:	4b4f      	ldr	r3, [pc, #316]	; (8009c3c <xTaskIncrementTick+0x148>)
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	f040 8089 	bne.w	8009c1a <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009b08:	4b4d      	ldr	r3, [pc, #308]	; (8009c40 <xTaskIncrementTick+0x14c>)
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	3301      	adds	r3, #1
 8009b0e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009b10:	4a4b      	ldr	r2, [pc, #300]	; (8009c40 <xTaskIncrementTick+0x14c>)
 8009b12:	693b      	ldr	r3, [r7, #16]
 8009b14:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009b16:	693b      	ldr	r3, [r7, #16]
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d120      	bne.n	8009b5e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009b1c:	4b49      	ldr	r3, [pc, #292]	; (8009c44 <xTaskIncrementTick+0x150>)
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d00a      	beq.n	8009b3c <xTaskIncrementTick+0x48>
	__asm volatile
 8009b26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b2a:	f383 8811 	msr	BASEPRI, r3
 8009b2e:	f3bf 8f6f 	isb	sy
 8009b32:	f3bf 8f4f 	dsb	sy
 8009b36:	603b      	str	r3, [r7, #0]
}
 8009b38:	bf00      	nop
 8009b3a:	e7fe      	b.n	8009b3a <xTaskIncrementTick+0x46>
 8009b3c:	4b41      	ldr	r3, [pc, #260]	; (8009c44 <xTaskIncrementTick+0x150>)
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	60fb      	str	r3, [r7, #12]
 8009b42:	4b41      	ldr	r3, [pc, #260]	; (8009c48 <xTaskIncrementTick+0x154>)
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	4a3f      	ldr	r2, [pc, #252]	; (8009c44 <xTaskIncrementTick+0x150>)
 8009b48:	6013      	str	r3, [r2, #0]
 8009b4a:	4a3f      	ldr	r2, [pc, #252]	; (8009c48 <xTaskIncrementTick+0x154>)
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	6013      	str	r3, [r2, #0]
 8009b50:	4b3e      	ldr	r3, [pc, #248]	; (8009c4c <xTaskIncrementTick+0x158>)
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	3301      	adds	r3, #1
 8009b56:	4a3d      	ldr	r2, [pc, #244]	; (8009c4c <xTaskIncrementTick+0x158>)
 8009b58:	6013      	str	r3, [r2, #0]
 8009b5a:	f000 fb6f 	bl	800a23c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009b5e:	4b3c      	ldr	r3, [pc, #240]	; (8009c50 <xTaskIncrementTick+0x15c>)
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	693a      	ldr	r2, [r7, #16]
 8009b64:	429a      	cmp	r2, r3
 8009b66:	d349      	bcc.n	8009bfc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009b68:	4b36      	ldr	r3, [pc, #216]	; (8009c44 <xTaskIncrementTick+0x150>)
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d104      	bne.n	8009b7c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009b72:	4b37      	ldr	r3, [pc, #220]	; (8009c50 <xTaskIncrementTick+0x15c>)
 8009b74:	f04f 32ff 	mov.w	r2, #4294967295
 8009b78:	601a      	str	r2, [r3, #0]
					break;
 8009b7a:	e03f      	b.n	8009bfc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b7c:	4b31      	ldr	r3, [pc, #196]	; (8009c44 <xTaskIncrementTick+0x150>)
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	68db      	ldr	r3, [r3, #12]
 8009b82:	68db      	ldr	r3, [r3, #12]
 8009b84:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009b86:	68bb      	ldr	r3, [r7, #8]
 8009b88:	685b      	ldr	r3, [r3, #4]
 8009b8a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009b8c:	693a      	ldr	r2, [r7, #16]
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	429a      	cmp	r2, r3
 8009b92:	d203      	bcs.n	8009b9c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009b94:	4a2e      	ldr	r2, [pc, #184]	; (8009c50 <xTaskIncrementTick+0x15c>)
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009b9a:	e02f      	b.n	8009bfc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009b9c:	68bb      	ldr	r3, [r7, #8]
 8009b9e:	3304      	adds	r3, #4
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	f7fe fea5 	bl	80088f0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009ba6:	68bb      	ldr	r3, [r7, #8]
 8009ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d004      	beq.n	8009bb8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009bae:	68bb      	ldr	r3, [r7, #8]
 8009bb0:	3318      	adds	r3, #24
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	f7fe fe9c 	bl	80088f0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009bb8:	68bb      	ldr	r3, [r7, #8]
 8009bba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bbc:	4b25      	ldr	r3, [pc, #148]	; (8009c54 <xTaskIncrementTick+0x160>)
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	429a      	cmp	r2, r3
 8009bc2:	d903      	bls.n	8009bcc <xTaskIncrementTick+0xd8>
 8009bc4:	68bb      	ldr	r3, [r7, #8]
 8009bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bc8:	4a22      	ldr	r2, [pc, #136]	; (8009c54 <xTaskIncrementTick+0x160>)
 8009bca:	6013      	str	r3, [r2, #0]
 8009bcc:	68bb      	ldr	r3, [r7, #8]
 8009bce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bd0:	4613      	mov	r3, r2
 8009bd2:	009b      	lsls	r3, r3, #2
 8009bd4:	4413      	add	r3, r2
 8009bd6:	009b      	lsls	r3, r3, #2
 8009bd8:	4a1f      	ldr	r2, [pc, #124]	; (8009c58 <xTaskIncrementTick+0x164>)
 8009bda:	441a      	add	r2, r3
 8009bdc:	68bb      	ldr	r3, [r7, #8]
 8009bde:	3304      	adds	r3, #4
 8009be0:	4619      	mov	r1, r3
 8009be2:	4610      	mov	r0, r2
 8009be4:	f7fe fe27 	bl	8008836 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009be8:	68bb      	ldr	r3, [r7, #8]
 8009bea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bec:	4b1b      	ldr	r3, [pc, #108]	; (8009c5c <xTaskIncrementTick+0x168>)
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bf2:	429a      	cmp	r2, r3
 8009bf4:	d3b8      	bcc.n	8009b68 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009bf6:	2301      	movs	r3, #1
 8009bf8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009bfa:	e7b5      	b.n	8009b68 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009bfc:	4b17      	ldr	r3, [pc, #92]	; (8009c5c <xTaskIncrementTick+0x168>)
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c02:	4915      	ldr	r1, [pc, #84]	; (8009c58 <xTaskIncrementTick+0x164>)
 8009c04:	4613      	mov	r3, r2
 8009c06:	009b      	lsls	r3, r3, #2
 8009c08:	4413      	add	r3, r2
 8009c0a:	009b      	lsls	r3, r3, #2
 8009c0c:	440b      	add	r3, r1
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	2b01      	cmp	r3, #1
 8009c12:	d907      	bls.n	8009c24 <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 8009c14:	2301      	movs	r3, #1
 8009c16:	617b      	str	r3, [r7, #20]
 8009c18:	e004      	b.n	8009c24 <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8009c1a:	4b11      	ldr	r3, [pc, #68]	; (8009c60 <xTaskIncrementTick+0x16c>)
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	3301      	adds	r3, #1
 8009c20:	4a0f      	ldr	r2, [pc, #60]	; (8009c60 <xTaskIncrementTick+0x16c>)
 8009c22:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8009c24:	4b0f      	ldr	r3, [pc, #60]	; (8009c64 <xTaskIncrementTick+0x170>)
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d001      	beq.n	8009c30 <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 8009c2c:	2301      	movs	r3, #1
 8009c2e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009c30:	697b      	ldr	r3, [r7, #20]
}
 8009c32:	4618      	mov	r0, r3
 8009c34:	3718      	adds	r7, #24
 8009c36:	46bd      	mov	sp, r7
 8009c38:	bd80      	pop	{r7, pc}
 8009c3a:	bf00      	nop
 8009c3c:	20005af0 	.word	0x20005af0
 8009c40:	20005acc 	.word	0x20005acc
 8009c44:	20005a80 	.word	0x20005a80
 8009c48:	20005a84 	.word	0x20005a84
 8009c4c:	20005ae0 	.word	0x20005ae0
 8009c50:	20005ae8 	.word	0x20005ae8
 8009c54:	20005ad0 	.word	0x20005ad0
 8009c58:	200055f8 	.word	0x200055f8
 8009c5c:	200055f4 	.word	0x200055f4
 8009c60:	20005ad8 	.word	0x20005ad8
 8009c64:	20005adc 	.word	0x20005adc

08009c68 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009c68:	b480      	push	{r7}
 8009c6a:	b085      	sub	sp, #20
 8009c6c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009c6e:	4b28      	ldr	r3, [pc, #160]	; (8009d10 <vTaskSwitchContext+0xa8>)
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d003      	beq.n	8009c7e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009c76:	4b27      	ldr	r3, [pc, #156]	; (8009d14 <vTaskSwitchContext+0xac>)
 8009c78:	2201      	movs	r2, #1
 8009c7a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009c7c:	e041      	b.n	8009d02 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8009c7e:	4b25      	ldr	r3, [pc, #148]	; (8009d14 <vTaskSwitchContext+0xac>)
 8009c80:	2200      	movs	r2, #0
 8009c82:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c84:	4b24      	ldr	r3, [pc, #144]	; (8009d18 <vTaskSwitchContext+0xb0>)
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	60fb      	str	r3, [r7, #12]
 8009c8a:	e010      	b.n	8009cae <vTaskSwitchContext+0x46>
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d10a      	bne.n	8009ca8 <vTaskSwitchContext+0x40>
	__asm volatile
 8009c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c96:	f383 8811 	msr	BASEPRI, r3
 8009c9a:	f3bf 8f6f 	isb	sy
 8009c9e:	f3bf 8f4f 	dsb	sy
 8009ca2:	607b      	str	r3, [r7, #4]
}
 8009ca4:	bf00      	nop
 8009ca6:	e7fe      	b.n	8009ca6 <vTaskSwitchContext+0x3e>
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	3b01      	subs	r3, #1
 8009cac:	60fb      	str	r3, [r7, #12]
 8009cae:	491b      	ldr	r1, [pc, #108]	; (8009d1c <vTaskSwitchContext+0xb4>)
 8009cb0:	68fa      	ldr	r2, [r7, #12]
 8009cb2:	4613      	mov	r3, r2
 8009cb4:	009b      	lsls	r3, r3, #2
 8009cb6:	4413      	add	r3, r2
 8009cb8:	009b      	lsls	r3, r3, #2
 8009cba:	440b      	add	r3, r1
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d0e4      	beq.n	8009c8c <vTaskSwitchContext+0x24>
 8009cc2:	68fa      	ldr	r2, [r7, #12]
 8009cc4:	4613      	mov	r3, r2
 8009cc6:	009b      	lsls	r3, r3, #2
 8009cc8:	4413      	add	r3, r2
 8009cca:	009b      	lsls	r3, r3, #2
 8009ccc:	4a13      	ldr	r2, [pc, #76]	; (8009d1c <vTaskSwitchContext+0xb4>)
 8009cce:	4413      	add	r3, r2
 8009cd0:	60bb      	str	r3, [r7, #8]
 8009cd2:	68bb      	ldr	r3, [r7, #8]
 8009cd4:	685b      	ldr	r3, [r3, #4]
 8009cd6:	685a      	ldr	r2, [r3, #4]
 8009cd8:	68bb      	ldr	r3, [r7, #8]
 8009cda:	605a      	str	r2, [r3, #4]
 8009cdc:	68bb      	ldr	r3, [r7, #8]
 8009cde:	685a      	ldr	r2, [r3, #4]
 8009ce0:	68bb      	ldr	r3, [r7, #8]
 8009ce2:	3308      	adds	r3, #8
 8009ce4:	429a      	cmp	r2, r3
 8009ce6:	d104      	bne.n	8009cf2 <vTaskSwitchContext+0x8a>
 8009ce8:	68bb      	ldr	r3, [r7, #8]
 8009cea:	685b      	ldr	r3, [r3, #4]
 8009cec:	685a      	ldr	r2, [r3, #4]
 8009cee:	68bb      	ldr	r3, [r7, #8]
 8009cf0:	605a      	str	r2, [r3, #4]
 8009cf2:	68bb      	ldr	r3, [r7, #8]
 8009cf4:	685b      	ldr	r3, [r3, #4]
 8009cf6:	68db      	ldr	r3, [r3, #12]
 8009cf8:	4a09      	ldr	r2, [pc, #36]	; (8009d20 <vTaskSwitchContext+0xb8>)
 8009cfa:	6013      	str	r3, [r2, #0]
 8009cfc:	4a06      	ldr	r2, [pc, #24]	; (8009d18 <vTaskSwitchContext+0xb0>)
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	6013      	str	r3, [r2, #0]
}
 8009d02:	bf00      	nop
 8009d04:	3714      	adds	r7, #20
 8009d06:	46bd      	mov	sp, r7
 8009d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d0c:	4770      	bx	lr
 8009d0e:	bf00      	nop
 8009d10:	20005af0 	.word	0x20005af0
 8009d14:	20005adc 	.word	0x20005adc
 8009d18:	20005ad0 	.word	0x20005ad0
 8009d1c:	200055f8 	.word	0x200055f8
 8009d20:	200055f4 	.word	0x200055f4

08009d24 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009d24:	b580      	push	{r7, lr}
 8009d26:	b084      	sub	sp, #16
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	6078      	str	r0, [r7, #4]
 8009d2c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d10a      	bne.n	8009d4a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d38:	f383 8811 	msr	BASEPRI, r3
 8009d3c:	f3bf 8f6f 	isb	sy
 8009d40:	f3bf 8f4f 	dsb	sy
 8009d44:	60fb      	str	r3, [r7, #12]
}
 8009d46:	bf00      	nop
 8009d48:	e7fe      	b.n	8009d48 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009d4a:	4b07      	ldr	r3, [pc, #28]	; (8009d68 <vTaskPlaceOnEventList+0x44>)
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	3318      	adds	r3, #24
 8009d50:	4619      	mov	r1, r3
 8009d52:	6878      	ldr	r0, [r7, #4]
 8009d54:	f7fe fd93 	bl	800887e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009d58:	2101      	movs	r1, #1
 8009d5a:	6838      	ldr	r0, [r7, #0]
 8009d5c:	f000 fb32 	bl	800a3c4 <prvAddCurrentTaskToDelayedList>
}
 8009d60:	bf00      	nop
 8009d62:	3710      	adds	r7, #16
 8009d64:	46bd      	mov	sp, r7
 8009d66:	bd80      	pop	{r7, pc}
 8009d68:	200055f4 	.word	0x200055f4

08009d6c <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8009d6c:	b580      	push	{r7, lr}
 8009d6e:	b086      	sub	sp, #24
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	60f8      	str	r0, [r7, #12]
 8009d74:	60b9      	str	r1, [r7, #8]
 8009d76:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d10a      	bne.n	8009d94 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 8009d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d82:	f383 8811 	msr	BASEPRI, r3
 8009d86:	f3bf 8f6f 	isb	sy
 8009d8a:	f3bf 8f4f 	dsb	sy
 8009d8e:	617b      	str	r3, [r7, #20]
}
 8009d90:	bf00      	nop
 8009d92:	e7fe      	b.n	8009d92 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8009d94:	4b11      	ldr	r3, [pc, #68]	; (8009ddc <vTaskPlaceOnUnorderedEventList+0x70>)
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d10a      	bne.n	8009db2 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8009d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009da0:	f383 8811 	msr	BASEPRI, r3
 8009da4:	f3bf 8f6f 	isb	sy
 8009da8:	f3bf 8f4f 	dsb	sy
 8009dac:	613b      	str	r3, [r7, #16]
}
 8009dae:	bf00      	nop
 8009db0:	e7fe      	b.n	8009db0 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8009db2:	4b0b      	ldr	r3, [pc, #44]	; (8009de0 <vTaskPlaceOnUnorderedEventList+0x74>)
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	68ba      	ldr	r2, [r7, #8]
 8009db8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8009dbc:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009dbe:	4b08      	ldr	r3, [pc, #32]	; (8009de0 <vTaskPlaceOnUnorderedEventList+0x74>)
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	3318      	adds	r3, #24
 8009dc4:	4619      	mov	r1, r3
 8009dc6:	68f8      	ldr	r0, [r7, #12]
 8009dc8:	f7fe fd35 	bl	8008836 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009dcc:	2101      	movs	r1, #1
 8009dce:	6878      	ldr	r0, [r7, #4]
 8009dd0:	f000 faf8 	bl	800a3c4 <prvAddCurrentTaskToDelayedList>
}
 8009dd4:	bf00      	nop
 8009dd6:	3718      	adds	r7, #24
 8009dd8:	46bd      	mov	sp, r7
 8009dda:	bd80      	pop	{r7, pc}
 8009ddc:	20005af0 	.word	0x20005af0
 8009de0:	200055f4 	.word	0x200055f4

08009de4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009de4:	b580      	push	{r7, lr}
 8009de6:	b086      	sub	sp, #24
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	60f8      	str	r0, [r7, #12]
 8009dec:	60b9      	str	r1, [r7, #8]
 8009dee:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d10a      	bne.n	8009e0c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8009df6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dfa:	f383 8811 	msr	BASEPRI, r3
 8009dfe:	f3bf 8f6f 	isb	sy
 8009e02:	f3bf 8f4f 	dsb	sy
 8009e06:	617b      	str	r3, [r7, #20]
}
 8009e08:	bf00      	nop
 8009e0a:	e7fe      	b.n	8009e0a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009e0c:	4b0a      	ldr	r3, [pc, #40]	; (8009e38 <vTaskPlaceOnEventListRestricted+0x54>)
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	3318      	adds	r3, #24
 8009e12:	4619      	mov	r1, r3
 8009e14:	68f8      	ldr	r0, [r7, #12]
 8009e16:	f7fe fd0e 	bl	8008836 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d002      	beq.n	8009e26 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8009e20:	f04f 33ff 	mov.w	r3, #4294967295
 8009e24:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009e26:	6879      	ldr	r1, [r7, #4]
 8009e28:	68b8      	ldr	r0, [r7, #8]
 8009e2a:	f000 facb 	bl	800a3c4 <prvAddCurrentTaskToDelayedList>
	}
 8009e2e:	bf00      	nop
 8009e30:	3718      	adds	r7, #24
 8009e32:	46bd      	mov	sp, r7
 8009e34:	bd80      	pop	{r7, pc}
 8009e36:	bf00      	nop
 8009e38:	200055f4 	.word	0x200055f4

08009e3c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009e3c:	b580      	push	{r7, lr}
 8009e3e:	b086      	sub	sp, #24
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	68db      	ldr	r3, [r3, #12]
 8009e48:	68db      	ldr	r3, [r3, #12]
 8009e4a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009e4c:	693b      	ldr	r3, [r7, #16]
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d10a      	bne.n	8009e68 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8009e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e56:	f383 8811 	msr	BASEPRI, r3
 8009e5a:	f3bf 8f6f 	isb	sy
 8009e5e:	f3bf 8f4f 	dsb	sy
 8009e62:	60fb      	str	r3, [r7, #12]
}
 8009e64:	bf00      	nop
 8009e66:	e7fe      	b.n	8009e66 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009e68:	693b      	ldr	r3, [r7, #16]
 8009e6a:	3318      	adds	r3, #24
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	f7fe fd3f 	bl	80088f0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009e72:	4b1e      	ldr	r3, [pc, #120]	; (8009eec <xTaskRemoveFromEventList+0xb0>)
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d11d      	bne.n	8009eb6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009e7a:	693b      	ldr	r3, [r7, #16]
 8009e7c:	3304      	adds	r3, #4
 8009e7e:	4618      	mov	r0, r3
 8009e80:	f7fe fd36 	bl	80088f0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009e84:	693b      	ldr	r3, [r7, #16]
 8009e86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e88:	4b19      	ldr	r3, [pc, #100]	; (8009ef0 <xTaskRemoveFromEventList+0xb4>)
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	429a      	cmp	r2, r3
 8009e8e:	d903      	bls.n	8009e98 <xTaskRemoveFromEventList+0x5c>
 8009e90:	693b      	ldr	r3, [r7, #16]
 8009e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e94:	4a16      	ldr	r2, [pc, #88]	; (8009ef0 <xTaskRemoveFromEventList+0xb4>)
 8009e96:	6013      	str	r3, [r2, #0]
 8009e98:	693b      	ldr	r3, [r7, #16]
 8009e9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e9c:	4613      	mov	r3, r2
 8009e9e:	009b      	lsls	r3, r3, #2
 8009ea0:	4413      	add	r3, r2
 8009ea2:	009b      	lsls	r3, r3, #2
 8009ea4:	4a13      	ldr	r2, [pc, #76]	; (8009ef4 <xTaskRemoveFromEventList+0xb8>)
 8009ea6:	441a      	add	r2, r3
 8009ea8:	693b      	ldr	r3, [r7, #16]
 8009eaa:	3304      	adds	r3, #4
 8009eac:	4619      	mov	r1, r3
 8009eae:	4610      	mov	r0, r2
 8009eb0:	f7fe fcc1 	bl	8008836 <vListInsertEnd>
 8009eb4:	e005      	b.n	8009ec2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009eb6:	693b      	ldr	r3, [r7, #16]
 8009eb8:	3318      	adds	r3, #24
 8009eba:	4619      	mov	r1, r3
 8009ebc:	480e      	ldr	r0, [pc, #56]	; (8009ef8 <xTaskRemoveFromEventList+0xbc>)
 8009ebe:	f7fe fcba 	bl	8008836 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009ec2:	693b      	ldr	r3, [r7, #16]
 8009ec4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ec6:	4b0d      	ldr	r3, [pc, #52]	; (8009efc <xTaskRemoveFromEventList+0xc0>)
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ecc:	429a      	cmp	r2, r3
 8009ece:	d905      	bls.n	8009edc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009ed0:	2301      	movs	r3, #1
 8009ed2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009ed4:	4b0a      	ldr	r3, [pc, #40]	; (8009f00 <xTaskRemoveFromEventList+0xc4>)
 8009ed6:	2201      	movs	r2, #1
 8009ed8:	601a      	str	r2, [r3, #0]
 8009eda:	e001      	b.n	8009ee0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009edc:	2300      	movs	r3, #0
 8009ede:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009ee0:	697b      	ldr	r3, [r7, #20]
}
 8009ee2:	4618      	mov	r0, r3
 8009ee4:	3718      	adds	r7, #24
 8009ee6:	46bd      	mov	sp, r7
 8009ee8:	bd80      	pop	{r7, pc}
 8009eea:	bf00      	nop
 8009eec:	20005af0 	.word	0x20005af0
 8009ef0:	20005ad0 	.word	0x20005ad0
 8009ef4:	200055f8 	.word	0x200055f8
 8009ef8:	20005a88 	.word	0x20005a88
 8009efc:	200055f4 	.word	0x200055f4
 8009f00:	20005adc 	.word	0x20005adc

08009f04 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8009f04:	b580      	push	{r7, lr}
 8009f06:	b086      	sub	sp, #24
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	6078      	str	r0, [r7, #4]
 8009f0c:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8009f0e:	4b29      	ldr	r3, [pc, #164]	; (8009fb4 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d10a      	bne.n	8009f2c <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8009f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f1a:	f383 8811 	msr	BASEPRI, r3
 8009f1e:	f3bf 8f6f 	isb	sy
 8009f22:	f3bf 8f4f 	dsb	sy
 8009f26:	613b      	str	r3, [r7, #16]
}
 8009f28:	bf00      	nop
 8009f2a:	e7fe      	b.n	8009f2a <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8009f2c:	683b      	ldr	r3, [r7, #0]
 8009f2e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	68db      	ldr	r3, [r3, #12]
 8009f3a:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8009f3c:	697b      	ldr	r3, [r7, #20]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d10a      	bne.n	8009f58 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 8009f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f46:	f383 8811 	msr	BASEPRI, r3
 8009f4a:	f3bf 8f6f 	isb	sy
 8009f4e:	f3bf 8f4f 	dsb	sy
 8009f52:	60fb      	str	r3, [r7, #12]
}
 8009f54:	bf00      	nop
 8009f56:	e7fe      	b.n	8009f56 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8009f58:	6878      	ldr	r0, [r7, #4]
 8009f5a:	f7fe fcc9 	bl	80088f0 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009f5e:	697b      	ldr	r3, [r7, #20]
 8009f60:	3304      	adds	r3, #4
 8009f62:	4618      	mov	r0, r3
 8009f64:	f7fe fcc4 	bl	80088f0 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8009f68:	697b      	ldr	r3, [r7, #20]
 8009f6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f6c:	4b12      	ldr	r3, [pc, #72]	; (8009fb8 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	429a      	cmp	r2, r3
 8009f72:	d903      	bls.n	8009f7c <vTaskRemoveFromUnorderedEventList+0x78>
 8009f74:	697b      	ldr	r3, [r7, #20]
 8009f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f78:	4a0f      	ldr	r2, [pc, #60]	; (8009fb8 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8009f7a:	6013      	str	r3, [r2, #0]
 8009f7c:	697b      	ldr	r3, [r7, #20]
 8009f7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f80:	4613      	mov	r3, r2
 8009f82:	009b      	lsls	r3, r3, #2
 8009f84:	4413      	add	r3, r2
 8009f86:	009b      	lsls	r3, r3, #2
 8009f88:	4a0c      	ldr	r2, [pc, #48]	; (8009fbc <vTaskRemoveFromUnorderedEventList+0xb8>)
 8009f8a:	441a      	add	r2, r3
 8009f8c:	697b      	ldr	r3, [r7, #20]
 8009f8e:	3304      	adds	r3, #4
 8009f90:	4619      	mov	r1, r3
 8009f92:	4610      	mov	r0, r2
 8009f94:	f7fe fc4f 	bl	8008836 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009f98:	697b      	ldr	r3, [r7, #20]
 8009f9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f9c:	4b08      	ldr	r3, [pc, #32]	; (8009fc0 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fa2:	429a      	cmp	r2, r3
 8009fa4:	d902      	bls.n	8009fac <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8009fa6:	4b07      	ldr	r3, [pc, #28]	; (8009fc4 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8009fa8:	2201      	movs	r2, #1
 8009faa:	601a      	str	r2, [r3, #0]
	}
}
 8009fac:	bf00      	nop
 8009fae:	3718      	adds	r7, #24
 8009fb0:	46bd      	mov	sp, r7
 8009fb2:	bd80      	pop	{r7, pc}
 8009fb4:	20005af0 	.word	0x20005af0
 8009fb8:	20005ad0 	.word	0x20005ad0
 8009fbc:	200055f8 	.word	0x200055f8
 8009fc0:	200055f4 	.word	0x200055f4
 8009fc4:	20005adc 	.word	0x20005adc

08009fc8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009fc8:	b480      	push	{r7}
 8009fca:	b083      	sub	sp, #12
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009fd0:	4b06      	ldr	r3, [pc, #24]	; (8009fec <vTaskInternalSetTimeOutState+0x24>)
 8009fd2:	681a      	ldr	r2, [r3, #0]
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009fd8:	4b05      	ldr	r3, [pc, #20]	; (8009ff0 <vTaskInternalSetTimeOutState+0x28>)
 8009fda:	681a      	ldr	r2, [r3, #0]
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	605a      	str	r2, [r3, #4]
}
 8009fe0:	bf00      	nop
 8009fe2:	370c      	adds	r7, #12
 8009fe4:	46bd      	mov	sp, r7
 8009fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fea:	4770      	bx	lr
 8009fec:	20005ae0 	.word	0x20005ae0
 8009ff0:	20005acc 	.word	0x20005acc

08009ff4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009ff4:	b580      	push	{r7, lr}
 8009ff6:	b088      	sub	sp, #32
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	6078      	str	r0, [r7, #4]
 8009ffc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	2b00      	cmp	r3, #0
 800a002:	d10a      	bne.n	800a01a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a004:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a008:	f383 8811 	msr	BASEPRI, r3
 800a00c:	f3bf 8f6f 	isb	sy
 800a010:	f3bf 8f4f 	dsb	sy
 800a014:	613b      	str	r3, [r7, #16]
}
 800a016:	bf00      	nop
 800a018:	e7fe      	b.n	800a018 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a01a:	683b      	ldr	r3, [r7, #0]
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d10a      	bne.n	800a036 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a020:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a024:	f383 8811 	msr	BASEPRI, r3
 800a028:	f3bf 8f6f 	isb	sy
 800a02c:	f3bf 8f4f 	dsb	sy
 800a030:	60fb      	str	r3, [r7, #12]
}
 800a032:	bf00      	nop
 800a034:	e7fe      	b.n	800a034 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a036:	f000 feb5 	bl	800ada4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a03a:	4b1d      	ldr	r3, [pc, #116]	; (800a0b0 <xTaskCheckForTimeOut+0xbc>)
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	685b      	ldr	r3, [r3, #4]
 800a044:	69ba      	ldr	r2, [r7, #24]
 800a046:	1ad3      	subs	r3, r2, r3
 800a048:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a04a:	683b      	ldr	r3, [r7, #0]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a052:	d102      	bne.n	800a05a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a054:	2300      	movs	r3, #0
 800a056:	61fb      	str	r3, [r7, #28]
 800a058:	e023      	b.n	800a0a2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681a      	ldr	r2, [r3, #0]
 800a05e:	4b15      	ldr	r3, [pc, #84]	; (800a0b4 <xTaskCheckForTimeOut+0xc0>)
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	429a      	cmp	r2, r3
 800a064:	d007      	beq.n	800a076 <xTaskCheckForTimeOut+0x82>
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	685b      	ldr	r3, [r3, #4]
 800a06a:	69ba      	ldr	r2, [r7, #24]
 800a06c:	429a      	cmp	r2, r3
 800a06e:	d302      	bcc.n	800a076 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a070:	2301      	movs	r3, #1
 800a072:	61fb      	str	r3, [r7, #28]
 800a074:	e015      	b.n	800a0a2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a076:	683b      	ldr	r3, [r7, #0]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	697a      	ldr	r2, [r7, #20]
 800a07c:	429a      	cmp	r2, r3
 800a07e:	d20b      	bcs.n	800a098 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a080:	683b      	ldr	r3, [r7, #0]
 800a082:	681a      	ldr	r2, [r3, #0]
 800a084:	697b      	ldr	r3, [r7, #20]
 800a086:	1ad2      	subs	r2, r2, r3
 800a088:	683b      	ldr	r3, [r7, #0]
 800a08a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a08c:	6878      	ldr	r0, [r7, #4]
 800a08e:	f7ff ff9b 	bl	8009fc8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a092:	2300      	movs	r3, #0
 800a094:	61fb      	str	r3, [r7, #28]
 800a096:	e004      	b.n	800a0a2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a098:	683b      	ldr	r3, [r7, #0]
 800a09a:	2200      	movs	r2, #0
 800a09c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a09e:	2301      	movs	r3, #1
 800a0a0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a0a2:	f000 feaf 	bl	800ae04 <vPortExitCritical>

	return xReturn;
 800a0a6:	69fb      	ldr	r3, [r7, #28]
}
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	3720      	adds	r7, #32
 800a0ac:	46bd      	mov	sp, r7
 800a0ae:	bd80      	pop	{r7, pc}
 800a0b0:	20005acc 	.word	0x20005acc
 800a0b4:	20005ae0 	.word	0x20005ae0

0800a0b8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a0b8:	b480      	push	{r7}
 800a0ba:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a0bc:	4b03      	ldr	r3, [pc, #12]	; (800a0cc <vTaskMissedYield+0x14>)
 800a0be:	2201      	movs	r2, #1
 800a0c0:	601a      	str	r2, [r3, #0]
}
 800a0c2:	bf00      	nop
 800a0c4:	46bd      	mov	sp, r7
 800a0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ca:	4770      	bx	lr
 800a0cc:	20005adc 	.word	0x20005adc

0800a0d0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a0d0:	b580      	push	{r7, lr}
 800a0d2:	b082      	sub	sp, #8
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a0d8:	f000 f852 	bl	800a180 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a0dc:	4b06      	ldr	r3, [pc, #24]	; (800a0f8 <prvIdleTask+0x28>)
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	2b01      	cmp	r3, #1
 800a0e2:	d9f9      	bls.n	800a0d8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a0e4:	4b05      	ldr	r3, [pc, #20]	; (800a0fc <prvIdleTask+0x2c>)
 800a0e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a0ea:	601a      	str	r2, [r3, #0]
 800a0ec:	f3bf 8f4f 	dsb	sy
 800a0f0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a0f4:	e7f0      	b.n	800a0d8 <prvIdleTask+0x8>
 800a0f6:	bf00      	nop
 800a0f8:	200055f8 	.word	0x200055f8
 800a0fc:	e000ed04 	.word	0xe000ed04

0800a100 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a100:	b580      	push	{r7, lr}
 800a102:	b082      	sub	sp, #8
 800a104:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a106:	2300      	movs	r3, #0
 800a108:	607b      	str	r3, [r7, #4]
 800a10a:	e00c      	b.n	800a126 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a10c:	687a      	ldr	r2, [r7, #4]
 800a10e:	4613      	mov	r3, r2
 800a110:	009b      	lsls	r3, r3, #2
 800a112:	4413      	add	r3, r2
 800a114:	009b      	lsls	r3, r3, #2
 800a116:	4a12      	ldr	r2, [pc, #72]	; (800a160 <prvInitialiseTaskLists+0x60>)
 800a118:	4413      	add	r3, r2
 800a11a:	4618      	mov	r0, r3
 800a11c:	f7fe fb5e 	bl	80087dc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	3301      	adds	r3, #1
 800a124:	607b      	str	r3, [r7, #4]
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	2b37      	cmp	r3, #55	; 0x37
 800a12a:	d9ef      	bls.n	800a10c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a12c:	480d      	ldr	r0, [pc, #52]	; (800a164 <prvInitialiseTaskLists+0x64>)
 800a12e:	f7fe fb55 	bl	80087dc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a132:	480d      	ldr	r0, [pc, #52]	; (800a168 <prvInitialiseTaskLists+0x68>)
 800a134:	f7fe fb52 	bl	80087dc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a138:	480c      	ldr	r0, [pc, #48]	; (800a16c <prvInitialiseTaskLists+0x6c>)
 800a13a:	f7fe fb4f 	bl	80087dc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a13e:	480c      	ldr	r0, [pc, #48]	; (800a170 <prvInitialiseTaskLists+0x70>)
 800a140:	f7fe fb4c 	bl	80087dc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a144:	480b      	ldr	r0, [pc, #44]	; (800a174 <prvInitialiseTaskLists+0x74>)
 800a146:	f7fe fb49 	bl	80087dc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a14a:	4b0b      	ldr	r3, [pc, #44]	; (800a178 <prvInitialiseTaskLists+0x78>)
 800a14c:	4a05      	ldr	r2, [pc, #20]	; (800a164 <prvInitialiseTaskLists+0x64>)
 800a14e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a150:	4b0a      	ldr	r3, [pc, #40]	; (800a17c <prvInitialiseTaskLists+0x7c>)
 800a152:	4a05      	ldr	r2, [pc, #20]	; (800a168 <prvInitialiseTaskLists+0x68>)
 800a154:	601a      	str	r2, [r3, #0]
}
 800a156:	bf00      	nop
 800a158:	3708      	adds	r7, #8
 800a15a:	46bd      	mov	sp, r7
 800a15c:	bd80      	pop	{r7, pc}
 800a15e:	bf00      	nop
 800a160:	200055f8 	.word	0x200055f8
 800a164:	20005a58 	.word	0x20005a58
 800a168:	20005a6c 	.word	0x20005a6c
 800a16c:	20005a88 	.word	0x20005a88
 800a170:	20005a9c 	.word	0x20005a9c
 800a174:	20005ab4 	.word	0x20005ab4
 800a178:	20005a80 	.word	0x20005a80
 800a17c:	20005a84 	.word	0x20005a84

0800a180 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a180:	b580      	push	{r7, lr}
 800a182:	b082      	sub	sp, #8
 800a184:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a186:	e019      	b.n	800a1bc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a188:	f000 fe0c 	bl	800ada4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a18c:	4b10      	ldr	r3, [pc, #64]	; (800a1d0 <prvCheckTasksWaitingTermination+0x50>)
 800a18e:	68db      	ldr	r3, [r3, #12]
 800a190:	68db      	ldr	r3, [r3, #12]
 800a192:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	3304      	adds	r3, #4
 800a198:	4618      	mov	r0, r3
 800a19a:	f7fe fba9 	bl	80088f0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a19e:	4b0d      	ldr	r3, [pc, #52]	; (800a1d4 <prvCheckTasksWaitingTermination+0x54>)
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	3b01      	subs	r3, #1
 800a1a4:	4a0b      	ldr	r2, [pc, #44]	; (800a1d4 <prvCheckTasksWaitingTermination+0x54>)
 800a1a6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a1a8:	4b0b      	ldr	r3, [pc, #44]	; (800a1d8 <prvCheckTasksWaitingTermination+0x58>)
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	3b01      	subs	r3, #1
 800a1ae:	4a0a      	ldr	r2, [pc, #40]	; (800a1d8 <prvCheckTasksWaitingTermination+0x58>)
 800a1b0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a1b2:	f000 fe27 	bl	800ae04 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a1b6:	6878      	ldr	r0, [r7, #4]
 800a1b8:	f000 f810 	bl	800a1dc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a1bc:	4b06      	ldr	r3, [pc, #24]	; (800a1d8 <prvCheckTasksWaitingTermination+0x58>)
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d1e1      	bne.n	800a188 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a1c4:	bf00      	nop
 800a1c6:	bf00      	nop
 800a1c8:	3708      	adds	r7, #8
 800a1ca:	46bd      	mov	sp, r7
 800a1cc:	bd80      	pop	{r7, pc}
 800a1ce:	bf00      	nop
 800a1d0:	20005a9c 	.word	0x20005a9c
 800a1d4:	20005ac8 	.word	0x20005ac8
 800a1d8:	20005ab0 	.word	0x20005ab0

0800a1dc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a1dc:	b580      	push	{r7, lr}
 800a1de:	b084      	sub	sp, #16
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d108      	bne.n	800a200 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	f000 ffbc 	bl	800b170 <vPortFree>
				vPortFree( pxTCB );
 800a1f8:	6878      	ldr	r0, [r7, #4]
 800a1fa:	f000 ffb9 	bl	800b170 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a1fe:	e018      	b.n	800a232 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a206:	2b01      	cmp	r3, #1
 800a208:	d103      	bne.n	800a212 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800a20a:	6878      	ldr	r0, [r7, #4]
 800a20c:	f000 ffb0 	bl	800b170 <vPortFree>
	}
 800a210:	e00f      	b.n	800a232 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a218:	2b02      	cmp	r3, #2
 800a21a:	d00a      	beq.n	800a232 <prvDeleteTCB+0x56>
	__asm volatile
 800a21c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a220:	f383 8811 	msr	BASEPRI, r3
 800a224:	f3bf 8f6f 	isb	sy
 800a228:	f3bf 8f4f 	dsb	sy
 800a22c:	60fb      	str	r3, [r7, #12]
}
 800a22e:	bf00      	nop
 800a230:	e7fe      	b.n	800a230 <prvDeleteTCB+0x54>
	}
 800a232:	bf00      	nop
 800a234:	3710      	adds	r7, #16
 800a236:	46bd      	mov	sp, r7
 800a238:	bd80      	pop	{r7, pc}
	...

0800a23c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a23c:	b480      	push	{r7}
 800a23e:	b083      	sub	sp, #12
 800a240:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a242:	4b0c      	ldr	r3, [pc, #48]	; (800a274 <prvResetNextTaskUnblockTime+0x38>)
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d104      	bne.n	800a256 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a24c:	4b0a      	ldr	r3, [pc, #40]	; (800a278 <prvResetNextTaskUnblockTime+0x3c>)
 800a24e:	f04f 32ff 	mov.w	r2, #4294967295
 800a252:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a254:	e008      	b.n	800a268 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a256:	4b07      	ldr	r3, [pc, #28]	; (800a274 <prvResetNextTaskUnblockTime+0x38>)
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	68db      	ldr	r3, [r3, #12]
 800a25c:	68db      	ldr	r3, [r3, #12]
 800a25e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	685b      	ldr	r3, [r3, #4]
 800a264:	4a04      	ldr	r2, [pc, #16]	; (800a278 <prvResetNextTaskUnblockTime+0x3c>)
 800a266:	6013      	str	r3, [r2, #0]
}
 800a268:	bf00      	nop
 800a26a:	370c      	adds	r7, #12
 800a26c:	46bd      	mov	sp, r7
 800a26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a272:	4770      	bx	lr
 800a274:	20005a80 	.word	0x20005a80
 800a278:	20005ae8 	.word	0x20005ae8

0800a27c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a27c:	b480      	push	{r7}
 800a27e:	b083      	sub	sp, #12
 800a280:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a282:	4b0b      	ldr	r3, [pc, #44]	; (800a2b0 <xTaskGetSchedulerState+0x34>)
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	2b00      	cmp	r3, #0
 800a288:	d102      	bne.n	800a290 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a28a:	2301      	movs	r3, #1
 800a28c:	607b      	str	r3, [r7, #4]
 800a28e:	e008      	b.n	800a2a2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a290:	4b08      	ldr	r3, [pc, #32]	; (800a2b4 <xTaskGetSchedulerState+0x38>)
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	2b00      	cmp	r3, #0
 800a296:	d102      	bne.n	800a29e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a298:	2302      	movs	r3, #2
 800a29a:	607b      	str	r3, [r7, #4]
 800a29c:	e001      	b.n	800a2a2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a29e:	2300      	movs	r3, #0
 800a2a0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a2a2:	687b      	ldr	r3, [r7, #4]
	}
 800a2a4:	4618      	mov	r0, r3
 800a2a6:	370c      	adds	r7, #12
 800a2a8:	46bd      	mov	sp, r7
 800a2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ae:	4770      	bx	lr
 800a2b0:	20005ad4 	.word	0x20005ad4
 800a2b4:	20005af0 	.word	0x20005af0

0800a2b8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	b086      	sub	sp, #24
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d056      	beq.n	800a37c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a2ce:	4b2e      	ldr	r3, [pc, #184]	; (800a388 <xTaskPriorityDisinherit+0xd0>)
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	693a      	ldr	r2, [r7, #16]
 800a2d4:	429a      	cmp	r2, r3
 800a2d6:	d00a      	beq.n	800a2ee <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a2d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2dc:	f383 8811 	msr	BASEPRI, r3
 800a2e0:	f3bf 8f6f 	isb	sy
 800a2e4:	f3bf 8f4f 	dsb	sy
 800a2e8:	60fb      	str	r3, [r7, #12]
}
 800a2ea:	bf00      	nop
 800a2ec:	e7fe      	b.n	800a2ec <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a2ee:	693b      	ldr	r3, [r7, #16]
 800a2f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d10a      	bne.n	800a30c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800a2f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2fa:	f383 8811 	msr	BASEPRI, r3
 800a2fe:	f3bf 8f6f 	isb	sy
 800a302:	f3bf 8f4f 	dsb	sy
 800a306:	60bb      	str	r3, [r7, #8]
}
 800a308:	bf00      	nop
 800a30a:	e7fe      	b.n	800a30a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800a30c:	693b      	ldr	r3, [r7, #16]
 800a30e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a310:	1e5a      	subs	r2, r3, #1
 800a312:	693b      	ldr	r3, [r7, #16]
 800a314:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a316:	693b      	ldr	r3, [r7, #16]
 800a318:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a31a:	693b      	ldr	r3, [r7, #16]
 800a31c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a31e:	429a      	cmp	r2, r3
 800a320:	d02c      	beq.n	800a37c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a322:	693b      	ldr	r3, [r7, #16]
 800a324:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a326:	2b00      	cmp	r3, #0
 800a328:	d128      	bne.n	800a37c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a32a:	693b      	ldr	r3, [r7, #16]
 800a32c:	3304      	adds	r3, #4
 800a32e:	4618      	mov	r0, r3
 800a330:	f7fe fade 	bl	80088f0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a334:	693b      	ldr	r3, [r7, #16]
 800a336:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a338:	693b      	ldr	r3, [r7, #16]
 800a33a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a33c:	693b      	ldr	r3, [r7, #16]
 800a33e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a340:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a344:	693b      	ldr	r3, [r7, #16]
 800a346:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a348:	693b      	ldr	r3, [r7, #16]
 800a34a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a34c:	4b0f      	ldr	r3, [pc, #60]	; (800a38c <xTaskPriorityDisinherit+0xd4>)
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	429a      	cmp	r2, r3
 800a352:	d903      	bls.n	800a35c <xTaskPriorityDisinherit+0xa4>
 800a354:	693b      	ldr	r3, [r7, #16]
 800a356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a358:	4a0c      	ldr	r2, [pc, #48]	; (800a38c <xTaskPriorityDisinherit+0xd4>)
 800a35a:	6013      	str	r3, [r2, #0]
 800a35c:	693b      	ldr	r3, [r7, #16]
 800a35e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a360:	4613      	mov	r3, r2
 800a362:	009b      	lsls	r3, r3, #2
 800a364:	4413      	add	r3, r2
 800a366:	009b      	lsls	r3, r3, #2
 800a368:	4a09      	ldr	r2, [pc, #36]	; (800a390 <xTaskPriorityDisinherit+0xd8>)
 800a36a:	441a      	add	r2, r3
 800a36c:	693b      	ldr	r3, [r7, #16]
 800a36e:	3304      	adds	r3, #4
 800a370:	4619      	mov	r1, r3
 800a372:	4610      	mov	r0, r2
 800a374:	f7fe fa5f 	bl	8008836 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a378:	2301      	movs	r3, #1
 800a37a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a37c:	697b      	ldr	r3, [r7, #20]
	}
 800a37e:	4618      	mov	r0, r3
 800a380:	3718      	adds	r7, #24
 800a382:	46bd      	mov	sp, r7
 800a384:	bd80      	pop	{r7, pc}
 800a386:	bf00      	nop
 800a388:	200055f4 	.word	0x200055f4
 800a38c:	20005ad0 	.word	0x20005ad0
 800a390:	200055f8 	.word	0x200055f8

0800a394 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 800a394:	b480      	push	{r7}
 800a396:	b083      	sub	sp, #12
 800a398:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800a39a:	4b09      	ldr	r3, [pc, #36]	; (800a3c0 <uxTaskResetEventItemValue+0x2c>)
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	699b      	ldr	r3, [r3, #24]
 800a3a0:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a3a2:	4b07      	ldr	r3, [pc, #28]	; (800a3c0 <uxTaskResetEventItemValue+0x2c>)
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3a8:	4b05      	ldr	r3, [pc, #20]	; (800a3c0 <uxTaskResetEventItemValue+0x2c>)
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 800a3b0:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800a3b2:	687b      	ldr	r3, [r7, #4]
}
 800a3b4:	4618      	mov	r0, r3
 800a3b6:	370c      	adds	r7, #12
 800a3b8:	46bd      	mov	sp, r7
 800a3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3be:	4770      	bx	lr
 800a3c0:	200055f4 	.word	0x200055f4

0800a3c4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a3c4:	b580      	push	{r7, lr}
 800a3c6:	b084      	sub	sp, #16
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	6078      	str	r0, [r7, #4]
 800a3cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a3ce:	4b21      	ldr	r3, [pc, #132]	; (800a454 <prvAddCurrentTaskToDelayedList+0x90>)
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a3d4:	4b20      	ldr	r3, [pc, #128]	; (800a458 <prvAddCurrentTaskToDelayedList+0x94>)
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	3304      	adds	r3, #4
 800a3da:	4618      	mov	r0, r3
 800a3dc:	f7fe fa88 	bl	80088f0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3e6:	d10a      	bne.n	800a3fe <prvAddCurrentTaskToDelayedList+0x3a>
 800a3e8:	683b      	ldr	r3, [r7, #0]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d007      	beq.n	800a3fe <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a3ee:	4b1a      	ldr	r3, [pc, #104]	; (800a458 <prvAddCurrentTaskToDelayedList+0x94>)
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	3304      	adds	r3, #4
 800a3f4:	4619      	mov	r1, r3
 800a3f6:	4819      	ldr	r0, [pc, #100]	; (800a45c <prvAddCurrentTaskToDelayedList+0x98>)
 800a3f8:	f7fe fa1d 	bl	8008836 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a3fc:	e026      	b.n	800a44c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a3fe:	68fa      	ldr	r2, [r7, #12]
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	4413      	add	r3, r2
 800a404:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a406:	4b14      	ldr	r3, [pc, #80]	; (800a458 <prvAddCurrentTaskToDelayedList+0x94>)
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	68ba      	ldr	r2, [r7, #8]
 800a40c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a40e:	68ba      	ldr	r2, [r7, #8]
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	429a      	cmp	r2, r3
 800a414:	d209      	bcs.n	800a42a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a416:	4b12      	ldr	r3, [pc, #72]	; (800a460 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a418:	681a      	ldr	r2, [r3, #0]
 800a41a:	4b0f      	ldr	r3, [pc, #60]	; (800a458 <prvAddCurrentTaskToDelayedList+0x94>)
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	3304      	adds	r3, #4
 800a420:	4619      	mov	r1, r3
 800a422:	4610      	mov	r0, r2
 800a424:	f7fe fa2b 	bl	800887e <vListInsert>
}
 800a428:	e010      	b.n	800a44c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a42a:	4b0e      	ldr	r3, [pc, #56]	; (800a464 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a42c:	681a      	ldr	r2, [r3, #0]
 800a42e:	4b0a      	ldr	r3, [pc, #40]	; (800a458 <prvAddCurrentTaskToDelayedList+0x94>)
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	3304      	adds	r3, #4
 800a434:	4619      	mov	r1, r3
 800a436:	4610      	mov	r0, r2
 800a438:	f7fe fa21 	bl	800887e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a43c:	4b0a      	ldr	r3, [pc, #40]	; (800a468 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	68ba      	ldr	r2, [r7, #8]
 800a442:	429a      	cmp	r2, r3
 800a444:	d202      	bcs.n	800a44c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a446:	4a08      	ldr	r2, [pc, #32]	; (800a468 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a448:	68bb      	ldr	r3, [r7, #8]
 800a44a:	6013      	str	r3, [r2, #0]
}
 800a44c:	bf00      	nop
 800a44e:	3710      	adds	r7, #16
 800a450:	46bd      	mov	sp, r7
 800a452:	bd80      	pop	{r7, pc}
 800a454:	20005acc 	.word	0x20005acc
 800a458:	200055f4 	.word	0x200055f4
 800a45c:	20005ab4 	.word	0x20005ab4
 800a460:	20005a84 	.word	0x20005a84
 800a464:	20005a80 	.word	0x20005a80
 800a468:	20005ae8 	.word	0x20005ae8

0800a46c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a46c:	b580      	push	{r7, lr}
 800a46e:	b08a      	sub	sp, #40	; 0x28
 800a470:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a472:	2300      	movs	r3, #0
 800a474:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a476:	f000 fb07 	bl	800aa88 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a47a:	4b1c      	ldr	r3, [pc, #112]	; (800a4ec <xTimerCreateTimerTask+0x80>)
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d021      	beq.n	800a4c6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a482:	2300      	movs	r3, #0
 800a484:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a486:	2300      	movs	r3, #0
 800a488:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a48a:	1d3a      	adds	r2, r7, #4
 800a48c:	f107 0108 	add.w	r1, r7, #8
 800a490:	f107 030c 	add.w	r3, r7, #12
 800a494:	4618      	mov	r0, r3
 800a496:	f7fd ff1b 	bl	80082d0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a49a:	6879      	ldr	r1, [r7, #4]
 800a49c:	68bb      	ldr	r3, [r7, #8]
 800a49e:	68fa      	ldr	r2, [r7, #12]
 800a4a0:	9202      	str	r2, [sp, #8]
 800a4a2:	9301      	str	r3, [sp, #4]
 800a4a4:	2302      	movs	r3, #2
 800a4a6:	9300      	str	r3, [sp, #0]
 800a4a8:	2300      	movs	r3, #0
 800a4aa:	460a      	mov	r2, r1
 800a4ac:	4910      	ldr	r1, [pc, #64]	; (800a4f0 <xTimerCreateTimerTask+0x84>)
 800a4ae:	4811      	ldr	r0, [pc, #68]	; (800a4f4 <xTimerCreateTimerTask+0x88>)
 800a4b0:	f7ff f828 	bl	8009504 <xTaskCreateStatic>
 800a4b4:	4603      	mov	r3, r0
 800a4b6:	4a10      	ldr	r2, [pc, #64]	; (800a4f8 <xTimerCreateTimerTask+0x8c>)
 800a4b8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a4ba:	4b0f      	ldr	r3, [pc, #60]	; (800a4f8 <xTimerCreateTimerTask+0x8c>)
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d001      	beq.n	800a4c6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a4c2:	2301      	movs	r3, #1
 800a4c4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a4c6:	697b      	ldr	r3, [r7, #20]
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d10a      	bne.n	800a4e2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800a4cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4d0:	f383 8811 	msr	BASEPRI, r3
 800a4d4:	f3bf 8f6f 	isb	sy
 800a4d8:	f3bf 8f4f 	dsb	sy
 800a4dc:	613b      	str	r3, [r7, #16]
}
 800a4de:	bf00      	nop
 800a4e0:	e7fe      	b.n	800a4e0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a4e2:	697b      	ldr	r3, [r7, #20]
}
 800a4e4:	4618      	mov	r0, r3
 800a4e6:	3718      	adds	r7, #24
 800a4e8:	46bd      	mov	sp, r7
 800a4ea:	bd80      	pop	{r7, pc}
 800a4ec:	20005b24 	.word	0x20005b24
 800a4f0:	0800c620 	.word	0x0800c620
 800a4f4:	0800a631 	.word	0x0800a631
 800a4f8:	20005b28 	.word	0x20005b28

0800a4fc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a4fc:	b580      	push	{r7, lr}
 800a4fe:	b08a      	sub	sp, #40	; 0x28
 800a500:	af00      	add	r7, sp, #0
 800a502:	60f8      	str	r0, [r7, #12]
 800a504:	60b9      	str	r1, [r7, #8]
 800a506:	607a      	str	r2, [r7, #4]
 800a508:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a50a:	2300      	movs	r3, #0
 800a50c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	2b00      	cmp	r3, #0
 800a512:	d10a      	bne.n	800a52a <xTimerGenericCommand+0x2e>
	__asm volatile
 800a514:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a518:	f383 8811 	msr	BASEPRI, r3
 800a51c:	f3bf 8f6f 	isb	sy
 800a520:	f3bf 8f4f 	dsb	sy
 800a524:	623b      	str	r3, [r7, #32]
}
 800a526:	bf00      	nop
 800a528:	e7fe      	b.n	800a528 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a52a:	4b1a      	ldr	r3, [pc, #104]	; (800a594 <xTimerGenericCommand+0x98>)
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d02a      	beq.n	800a588 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a532:	68bb      	ldr	r3, [r7, #8]
 800a534:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a53e:	68bb      	ldr	r3, [r7, #8]
 800a540:	2b05      	cmp	r3, #5
 800a542:	dc18      	bgt.n	800a576 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a544:	f7ff fe9a 	bl	800a27c <xTaskGetSchedulerState>
 800a548:	4603      	mov	r3, r0
 800a54a:	2b02      	cmp	r3, #2
 800a54c:	d109      	bne.n	800a562 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a54e:	4b11      	ldr	r3, [pc, #68]	; (800a594 <xTimerGenericCommand+0x98>)
 800a550:	6818      	ldr	r0, [r3, #0]
 800a552:	f107 0110 	add.w	r1, r7, #16
 800a556:	2300      	movs	r3, #0
 800a558:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a55a:	f7fe fba1 	bl	8008ca0 <xQueueGenericSend>
 800a55e:	6278      	str	r0, [r7, #36]	; 0x24
 800a560:	e012      	b.n	800a588 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a562:	4b0c      	ldr	r3, [pc, #48]	; (800a594 <xTimerGenericCommand+0x98>)
 800a564:	6818      	ldr	r0, [r3, #0]
 800a566:	f107 0110 	add.w	r1, r7, #16
 800a56a:	2300      	movs	r3, #0
 800a56c:	2200      	movs	r2, #0
 800a56e:	f7fe fb97 	bl	8008ca0 <xQueueGenericSend>
 800a572:	6278      	str	r0, [r7, #36]	; 0x24
 800a574:	e008      	b.n	800a588 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a576:	4b07      	ldr	r3, [pc, #28]	; (800a594 <xTimerGenericCommand+0x98>)
 800a578:	6818      	ldr	r0, [r3, #0]
 800a57a:	f107 0110 	add.w	r1, r7, #16
 800a57e:	2300      	movs	r3, #0
 800a580:	683a      	ldr	r2, [r7, #0]
 800a582:	f7fe fc8b 	bl	8008e9c <xQueueGenericSendFromISR>
 800a586:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a58a:	4618      	mov	r0, r3
 800a58c:	3728      	adds	r7, #40	; 0x28
 800a58e:	46bd      	mov	sp, r7
 800a590:	bd80      	pop	{r7, pc}
 800a592:	bf00      	nop
 800a594:	20005b24 	.word	0x20005b24

0800a598 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a598:	b580      	push	{r7, lr}
 800a59a:	b088      	sub	sp, #32
 800a59c:	af02      	add	r7, sp, #8
 800a59e:	6078      	str	r0, [r7, #4]
 800a5a0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a5a2:	4b22      	ldr	r3, [pc, #136]	; (800a62c <prvProcessExpiredTimer+0x94>)
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	68db      	ldr	r3, [r3, #12]
 800a5a8:	68db      	ldr	r3, [r3, #12]
 800a5aa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a5ac:	697b      	ldr	r3, [r7, #20]
 800a5ae:	3304      	adds	r3, #4
 800a5b0:	4618      	mov	r0, r3
 800a5b2:	f7fe f99d 	bl	80088f0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a5b6:	697b      	ldr	r3, [r7, #20]
 800a5b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a5bc:	f003 0304 	and.w	r3, r3, #4
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d022      	beq.n	800a60a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a5c4:	697b      	ldr	r3, [r7, #20]
 800a5c6:	699a      	ldr	r2, [r3, #24]
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	18d1      	adds	r1, r2, r3
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	683a      	ldr	r2, [r7, #0]
 800a5d0:	6978      	ldr	r0, [r7, #20]
 800a5d2:	f000 f8d1 	bl	800a778 <prvInsertTimerInActiveList>
 800a5d6:	4603      	mov	r3, r0
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d01f      	beq.n	800a61c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a5dc:	2300      	movs	r3, #0
 800a5de:	9300      	str	r3, [sp, #0]
 800a5e0:	2300      	movs	r3, #0
 800a5e2:	687a      	ldr	r2, [r7, #4]
 800a5e4:	2100      	movs	r1, #0
 800a5e6:	6978      	ldr	r0, [r7, #20]
 800a5e8:	f7ff ff88 	bl	800a4fc <xTimerGenericCommand>
 800a5ec:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a5ee:	693b      	ldr	r3, [r7, #16]
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d113      	bne.n	800a61c <prvProcessExpiredTimer+0x84>
	__asm volatile
 800a5f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5f8:	f383 8811 	msr	BASEPRI, r3
 800a5fc:	f3bf 8f6f 	isb	sy
 800a600:	f3bf 8f4f 	dsb	sy
 800a604:	60fb      	str	r3, [r7, #12]
}
 800a606:	bf00      	nop
 800a608:	e7fe      	b.n	800a608 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a60a:	697b      	ldr	r3, [r7, #20]
 800a60c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a610:	f023 0301 	bic.w	r3, r3, #1
 800a614:	b2da      	uxtb	r2, r3
 800a616:	697b      	ldr	r3, [r7, #20]
 800a618:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a61c:	697b      	ldr	r3, [r7, #20]
 800a61e:	6a1b      	ldr	r3, [r3, #32]
 800a620:	6978      	ldr	r0, [r7, #20]
 800a622:	4798      	blx	r3
}
 800a624:	bf00      	nop
 800a626:	3718      	adds	r7, #24
 800a628:	46bd      	mov	sp, r7
 800a62a:	bd80      	pop	{r7, pc}
 800a62c:	20005b1c 	.word	0x20005b1c

0800a630 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a630:	b580      	push	{r7, lr}
 800a632:	b084      	sub	sp, #16
 800a634:	af00      	add	r7, sp, #0
 800a636:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a638:	f107 0308 	add.w	r3, r7, #8
 800a63c:	4618      	mov	r0, r3
 800a63e:	f000 f857 	bl	800a6f0 <prvGetNextExpireTime>
 800a642:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a644:	68bb      	ldr	r3, [r7, #8]
 800a646:	4619      	mov	r1, r3
 800a648:	68f8      	ldr	r0, [r7, #12]
 800a64a:	f000 f803 	bl	800a654 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a64e:	f000 f8d5 	bl	800a7fc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a652:	e7f1      	b.n	800a638 <prvTimerTask+0x8>

0800a654 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a654:	b580      	push	{r7, lr}
 800a656:	b084      	sub	sp, #16
 800a658:	af00      	add	r7, sp, #0
 800a65a:	6078      	str	r0, [r7, #4]
 800a65c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a65e:	f7ff f98d 	bl	800997c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a662:	f107 0308 	add.w	r3, r7, #8
 800a666:	4618      	mov	r0, r3
 800a668:	f000 f866 	bl	800a738 <prvSampleTimeNow>
 800a66c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a66e:	68bb      	ldr	r3, [r7, #8]
 800a670:	2b00      	cmp	r3, #0
 800a672:	d130      	bne.n	800a6d6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a674:	683b      	ldr	r3, [r7, #0]
 800a676:	2b00      	cmp	r3, #0
 800a678:	d10a      	bne.n	800a690 <prvProcessTimerOrBlockTask+0x3c>
 800a67a:	687a      	ldr	r2, [r7, #4]
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	429a      	cmp	r2, r3
 800a680:	d806      	bhi.n	800a690 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a682:	f7ff f989 	bl	8009998 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a686:	68f9      	ldr	r1, [r7, #12]
 800a688:	6878      	ldr	r0, [r7, #4]
 800a68a:	f7ff ff85 	bl	800a598 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a68e:	e024      	b.n	800a6da <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a690:	683b      	ldr	r3, [r7, #0]
 800a692:	2b00      	cmp	r3, #0
 800a694:	d008      	beq.n	800a6a8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a696:	4b13      	ldr	r3, [pc, #76]	; (800a6e4 <prvProcessTimerOrBlockTask+0x90>)
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d101      	bne.n	800a6a4 <prvProcessTimerOrBlockTask+0x50>
 800a6a0:	2301      	movs	r3, #1
 800a6a2:	e000      	b.n	800a6a6 <prvProcessTimerOrBlockTask+0x52>
 800a6a4:	2300      	movs	r3, #0
 800a6a6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a6a8:	4b0f      	ldr	r3, [pc, #60]	; (800a6e8 <prvProcessTimerOrBlockTask+0x94>)
 800a6aa:	6818      	ldr	r0, [r3, #0]
 800a6ac:	687a      	ldr	r2, [r7, #4]
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	1ad3      	subs	r3, r2, r3
 800a6b2:	683a      	ldr	r2, [r7, #0]
 800a6b4:	4619      	mov	r1, r3
 800a6b6:	f7fe fef1 	bl	800949c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a6ba:	f7ff f96d 	bl	8009998 <xTaskResumeAll>
 800a6be:	4603      	mov	r3, r0
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d10a      	bne.n	800a6da <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a6c4:	4b09      	ldr	r3, [pc, #36]	; (800a6ec <prvProcessTimerOrBlockTask+0x98>)
 800a6c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a6ca:	601a      	str	r2, [r3, #0]
 800a6cc:	f3bf 8f4f 	dsb	sy
 800a6d0:	f3bf 8f6f 	isb	sy
}
 800a6d4:	e001      	b.n	800a6da <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a6d6:	f7ff f95f 	bl	8009998 <xTaskResumeAll>
}
 800a6da:	bf00      	nop
 800a6dc:	3710      	adds	r7, #16
 800a6de:	46bd      	mov	sp, r7
 800a6e0:	bd80      	pop	{r7, pc}
 800a6e2:	bf00      	nop
 800a6e4:	20005b20 	.word	0x20005b20
 800a6e8:	20005b24 	.word	0x20005b24
 800a6ec:	e000ed04 	.word	0xe000ed04

0800a6f0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a6f0:	b480      	push	{r7}
 800a6f2:	b085      	sub	sp, #20
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a6f8:	4b0e      	ldr	r3, [pc, #56]	; (800a734 <prvGetNextExpireTime+0x44>)
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d101      	bne.n	800a706 <prvGetNextExpireTime+0x16>
 800a702:	2201      	movs	r2, #1
 800a704:	e000      	b.n	800a708 <prvGetNextExpireTime+0x18>
 800a706:	2200      	movs	r2, #0
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	2b00      	cmp	r3, #0
 800a712:	d105      	bne.n	800a720 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a714:	4b07      	ldr	r3, [pc, #28]	; (800a734 <prvGetNextExpireTime+0x44>)
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	68db      	ldr	r3, [r3, #12]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	60fb      	str	r3, [r7, #12]
 800a71e:	e001      	b.n	800a724 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a720:	2300      	movs	r3, #0
 800a722:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a724:	68fb      	ldr	r3, [r7, #12]
}
 800a726:	4618      	mov	r0, r3
 800a728:	3714      	adds	r7, #20
 800a72a:	46bd      	mov	sp, r7
 800a72c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a730:	4770      	bx	lr
 800a732:	bf00      	nop
 800a734:	20005b1c 	.word	0x20005b1c

0800a738 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a738:	b580      	push	{r7, lr}
 800a73a:	b084      	sub	sp, #16
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a740:	f7ff f9c8 	bl	8009ad4 <xTaskGetTickCount>
 800a744:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a746:	4b0b      	ldr	r3, [pc, #44]	; (800a774 <prvSampleTimeNow+0x3c>)
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	68fa      	ldr	r2, [r7, #12]
 800a74c:	429a      	cmp	r2, r3
 800a74e:	d205      	bcs.n	800a75c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a750:	f000 f936 	bl	800a9c0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	2201      	movs	r2, #1
 800a758:	601a      	str	r2, [r3, #0]
 800a75a:	e002      	b.n	800a762 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	2200      	movs	r2, #0
 800a760:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a762:	4a04      	ldr	r2, [pc, #16]	; (800a774 <prvSampleTimeNow+0x3c>)
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a768:	68fb      	ldr	r3, [r7, #12]
}
 800a76a:	4618      	mov	r0, r3
 800a76c:	3710      	adds	r7, #16
 800a76e:	46bd      	mov	sp, r7
 800a770:	bd80      	pop	{r7, pc}
 800a772:	bf00      	nop
 800a774:	20005b2c 	.word	0x20005b2c

0800a778 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a778:	b580      	push	{r7, lr}
 800a77a:	b086      	sub	sp, #24
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	60f8      	str	r0, [r7, #12]
 800a780:	60b9      	str	r1, [r7, #8]
 800a782:	607a      	str	r2, [r7, #4]
 800a784:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a786:	2300      	movs	r3, #0
 800a788:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	68ba      	ldr	r2, [r7, #8]
 800a78e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	68fa      	ldr	r2, [r7, #12]
 800a794:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a796:	68ba      	ldr	r2, [r7, #8]
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	429a      	cmp	r2, r3
 800a79c:	d812      	bhi.n	800a7c4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a79e:	687a      	ldr	r2, [r7, #4]
 800a7a0:	683b      	ldr	r3, [r7, #0]
 800a7a2:	1ad2      	subs	r2, r2, r3
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	699b      	ldr	r3, [r3, #24]
 800a7a8:	429a      	cmp	r2, r3
 800a7aa:	d302      	bcc.n	800a7b2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a7ac:	2301      	movs	r3, #1
 800a7ae:	617b      	str	r3, [r7, #20]
 800a7b0:	e01b      	b.n	800a7ea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a7b2:	4b10      	ldr	r3, [pc, #64]	; (800a7f4 <prvInsertTimerInActiveList+0x7c>)
 800a7b4:	681a      	ldr	r2, [r3, #0]
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	3304      	adds	r3, #4
 800a7ba:	4619      	mov	r1, r3
 800a7bc:	4610      	mov	r0, r2
 800a7be:	f7fe f85e 	bl	800887e <vListInsert>
 800a7c2:	e012      	b.n	800a7ea <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a7c4:	687a      	ldr	r2, [r7, #4]
 800a7c6:	683b      	ldr	r3, [r7, #0]
 800a7c8:	429a      	cmp	r2, r3
 800a7ca:	d206      	bcs.n	800a7da <prvInsertTimerInActiveList+0x62>
 800a7cc:	68ba      	ldr	r2, [r7, #8]
 800a7ce:	683b      	ldr	r3, [r7, #0]
 800a7d0:	429a      	cmp	r2, r3
 800a7d2:	d302      	bcc.n	800a7da <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a7d4:	2301      	movs	r3, #1
 800a7d6:	617b      	str	r3, [r7, #20]
 800a7d8:	e007      	b.n	800a7ea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a7da:	4b07      	ldr	r3, [pc, #28]	; (800a7f8 <prvInsertTimerInActiveList+0x80>)
 800a7dc:	681a      	ldr	r2, [r3, #0]
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	3304      	adds	r3, #4
 800a7e2:	4619      	mov	r1, r3
 800a7e4:	4610      	mov	r0, r2
 800a7e6:	f7fe f84a 	bl	800887e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a7ea:	697b      	ldr	r3, [r7, #20]
}
 800a7ec:	4618      	mov	r0, r3
 800a7ee:	3718      	adds	r7, #24
 800a7f0:	46bd      	mov	sp, r7
 800a7f2:	bd80      	pop	{r7, pc}
 800a7f4:	20005b20 	.word	0x20005b20
 800a7f8:	20005b1c 	.word	0x20005b1c

0800a7fc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a7fc:	b580      	push	{r7, lr}
 800a7fe:	b08e      	sub	sp, #56	; 0x38
 800a800:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a802:	e0ca      	b.n	800a99a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	2b00      	cmp	r3, #0
 800a808:	da18      	bge.n	800a83c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a80a:	1d3b      	adds	r3, r7, #4
 800a80c:	3304      	adds	r3, #4
 800a80e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a812:	2b00      	cmp	r3, #0
 800a814:	d10a      	bne.n	800a82c <prvProcessReceivedCommands+0x30>
	__asm volatile
 800a816:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a81a:	f383 8811 	msr	BASEPRI, r3
 800a81e:	f3bf 8f6f 	isb	sy
 800a822:	f3bf 8f4f 	dsb	sy
 800a826:	61fb      	str	r3, [r7, #28]
}
 800a828:	bf00      	nop
 800a82a:	e7fe      	b.n	800a82a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a82c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a832:	6850      	ldr	r0, [r2, #4]
 800a834:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a836:	6892      	ldr	r2, [r2, #8]
 800a838:	4611      	mov	r1, r2
 800a83a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	2b00      	cmp	r3, #0
 800a840:	f2c0 80aa 	blt.w	800a998 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a84a:	695b      	ldr	r3, [r3, #20]
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d004      	beq.n	800a85a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a852:	3304      	adds	r3, #4
 800a854:	4618      	mov	r0, r3
 800a856:	f7fe f84b 	bl	80088f0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a85a:	463b      	mov	r3, r7
 800a85c:	4618      	mov	r0, r3
 800a85e:	f7ff ff6b 	bl	800a738 <prvSampleTimeNow>
 800a862:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	2b09      	cmp	r3, #9
 800a868:	f200 8097 	bhi.w	800a99a <prvProcessReceivedCommands+0x19e>
 800a86c:	a201      	add	r2, pc, #4	; (adr r2, 800a874 <prvProcessReceivedCommands+0x78>)
 800a86e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a872:	bf00      	nop
 800a874:	0800a89d 	.word	0x0800a89d
 800a878:	0800a89d 	.word	0x0800a89d
 800a87c:	0800a89d 	.word	0x0800a89d
 800a880:	0800a911 	.word	0x0800a911
 800a884:	0800a925 	.word	0x0800a925
 800a888:	0800a96f 	.word	0x0800a96f
 800a88c:	0800a89d 	.word	0x0800a89d
 800a890:	0800a89d 	.word	0x0800a89d
 800a894:	0800a911 	.word	0x0800a911
 800a898:	0800a925 	.word	0x0800a925
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a89c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a89e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a8a2:	f043 0301 	orr.w	r3, r3, #1
 800a8a6:	b2da      	uxtb	r2, r3
 800a8a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a8ae:	68ba      	ldr	r2, [r7, #8]
 800a8b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8b2:	699b      	ldr	r3, [r3, #24]
 800a8b4:	18d1      	adds	r1, r2, r3
 800a8b6:	68bb      	ldr	r3, [r7, #8]
 800a8b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a8ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a8bc:	f7ff ff5c 	bl	800a778 <prvInsertTimerInActiveList>
 800a8c0:	4603      	mov	r3, r0
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d069      	beq.n	800a99a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a8c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8c8:	6a1b      	ldr	r3, [r3, #32]
 800a8ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a8cc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a8ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a8d4:	f003 0304 	and.w	r3, r3, #4
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d05e      	beq.n	800a99a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a8dc:	68ba      	ldr	r2, [r7, #8]
 800a8de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8e0:	699b      	ldr	r3, [r3, #24]
 800a8e2:	441a      	add	r2, r3
 800a8e4:	2300      	movs	r3, #0
 800a8e6:	9300      	str	r3, [sp, #0]
 800a8e8:	2300      	movs	r3, #0
 800a8ea:	2100      	movs	r1, #0
 800a8ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a8ee:	f7ff fe05 	bl	800a4fc <xTimerGenericCommand>
 800a8f2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a8f4:	6a3b      	ldr	r3, [r7, #32]
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d14f      	bne.n	800a99a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800a8fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8fe:	f383 8811 	msr	BASEPRI, r3
 800a902:	f3bf 8f6f 	isb	sy
 800a906:	f3bf 8f4f 	dsb	sy
 800a90a:	61bb      	str	r3, [r7, #24]
}
 800a90c:	bf00      	nop
 800a90e:	e7fe      	b.n	800a90e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a912:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a916:	f023 0301 	bic.w	r3, r3, #1
 800a91a:	b2da      	uxtb	r2, r3
 800a91c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a91e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800a922:	e03a      	b.n	800a99a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a926:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a92a:	f043 0301 	orr.w	r3, r3, #1
 800a92e:	b2da      	uxtb	r2, r3
 800a930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a932:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a936:	68ba      	ldr	r2, [r7, #8]
 800a938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a93a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a93c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a93e:	699b      	ldr	r3, [r3, #24]
 800a940:	2b00      	cmp	r3, #0
 800a942:	d10a      	bne.n	800a95a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800a944:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a948:	f383 8811 	msr	BASEPRI, r3
 800a94c:	f3bf 8f6f 	isb	sy
 800a950:	f3bf 8f4f 	dsb	sy
 800a954:	617b      	str	r3, [r7, #20]
}
 800a956:	bf00      	nop
 800a958:	e7fe      	b.n	800a958 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a95a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a95c:	699a      	ldr	r2, [r3, #24]
 800a95e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a960:	18d1      	adds	r1, r2, r3
 800a962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a964:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a966:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a968:	f7ff ff06 	bl	800a778 <prvInsertTimerInActiveList>
					break;
 800a96c:	e015      	b.n	800a99a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a96e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a970:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a974:	f003 0302 	and.w	r3, r3, #2
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d103      	bne.n	800a984 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800a97c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a97e:	f000 fbf7 	bl	800b170 <vPortFree>
 800a982:	e00a      	b.n	800a99a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a986:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a98a:	f023 0301 	bic.w	r3, r3, #1
 800a98e:	b2da      	uxtb	r2, r3
 800a990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a992:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a996:	e000      	b.n	800a99a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800a998:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a99a:	4b08      	ldr	r3, [pc, #32]	; (800a9bc <prvProcessReceivedCommands+0x1c0>)
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	1d39      	adds	r1, r7, #4
 800a9a0:	2200      	movs	r2, #0
 800a9a2:	4618      	mov	r0, r3
 800a9a4:	f7fe fb12 	bl	8008fcc <xQueueReceive>
 800a9a8:	4603      	mov	r3, r0
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	f47f af2a 	bne.w	800a804 <prvProcessReceivedCommands+0x8>
	}
}
 800a9b0:	bf00      	nop
 800a9b2:	bf00      	nop
 800a9b4:	3730      	adds	r7, #48	; 0x30
 800a9b6:	46bd      	mov	sp, r7
 800a9b8:	bd80      	pop	{r7, pc}
 800a9ba:	bf00      	nop
 800a9bc:	20005b24 	.word	0x20005b24

0800a9c0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a9c0:	b580      	push	{r7, lr}
 800a9c2:	b088      	sub	sp, #32
 800a9c4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a9c6:	e048      	b.n	800aa5a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a9c8:	4b2d      	ldr	r3, [pc, #180]	; (800aa80 <prvSwitchTimerLists+0xc0>)
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	68db      	ldr	r3, [r3, #12]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a9d2:	4b2b      	ldr	r3, [pc, #172]	; (800aa80 <prvSwitchTimerLists+0xc0>)
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	68db      	ldr	r3, [r3, #12]
 800a9d8:	68db      	ldr	r3, [r3, #12]
 800a9da:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	3304      	adds	r3, #4
 800a9e0:	4618      	mov	r0, r3
 800a9e2:	f7fd ff85 	bl	80088f0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	6a1b      	ldr	r3, [r3, #32]
 800a9ea:	68f8      	ldr	r0, [r7, #12]
 800a9ec:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a9f4:	f003 0304 	and.w	r3, r3, #4
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d02e      	beq.n	800aa5a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	699b      	ldr	r3, [r3, #24]
 800aa00:	693a      	ldr	r2, [r7, #16]
 800aa02:	4413      	add	r3, r2
 800aa04:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800aa06:	68ba      	ldr	r2, [r7, #8]
 800aa08:	693b      	ldr	r3, [r7, #16]
 800aa0a:	429a      	cmp	r2, r3
 800aa0c:	d90e      	bls.n	800aa2c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	68ba      	ldr	r2, [r7, #8]
 800aa12:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	68fa      	ldr	r2, [r7, #12]
 800aa18:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800aa1a:	4b19      	ldr	r3, [pc, #100]	; (800aa80 <prvSwitchTimerLists+0xc0>)
 800aa1c:	681a      	ldr	r2, [r3, #0]
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	3304      	adds	r3, #4
 800aa22:	4619      	mov	r1, r3
 800aa24:	4610      	mov	r0, r2
 800aa26:	f7fd ff2a 	bl	800887e <vListInsert>
 800aa2a:	e016      	b.n	800aa5a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800aa2c:	2300      	movs	r3, #0
 800aa2e:	9300      	str	r3, [sp, #0]
 800aa30:	2300      	movs	r3, #0
 800aa32:	693a      	ldr	r2, [r7, #16]
 800aa34:	2100      	movs	r1, #0
 800aa36:	68f8      	ldr	r0, [r7, #12]
 800aa38:	f7ff fd60 	bl	800a4fc <xTimerGenericCommand>
 800aa3c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d10a      	bne.n	800aa5a <prvSwitchTimerLists+0x9a>
	__asm volatile
 800aa44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa48:	f383 8811 	msr	BASEPRI, r3
 800aa4c:	f3bf 8f6f 	isb	sy
 800aa50:	f3bf 8f4f 	dsb	sy
 800aa54:	603b      	str	r3, [r7, #0]
}
 800aa56:	bf00      	nop
 800aa58:	e7fe      	b.n	800aa58 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800aa5a:	4b09      	ldr	r3, [pc, #36]	; (800aa80 <prvSwitchTimerLists+0xc0>)
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d1b1      	bne.n	800a9c8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800aa64:	4b06      	ldr	r3, [pc, #24]	; (800aa80 <prvSwitchTimerLists+0xc0>)
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800aa6a:	4b06      	ldr	r3, [pc, #24]	; (800aa84 <prvSwitchTimerLists+0xc4>)
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	4a04      	ldr	r2, [pc, #16]	; (800aa80 <prvSwitchTimerLists+0xc0>)
 800aa70:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800aa72:	4a04      	ldr	r2, [pc, #16]	; (800aa84 <prvSwitchTimerLists+0xc4>)
 800aa74:	697b      	ldr	r3, [r7, #20]
 800aa76:	6013      	str	r3, [r2, #0]
}
 800aa78:	bf00      	nop
 800aa7a:	3718      	adds	r7, #24
 800aa7c:	46bd      	mov	sp, r7
 800aa7e:	bd80      	pop	{r7, pc}
 800aa80:	20005b1c 	.word	0x20005b1c
 800aa84:	20005b20 	.word	0x20005b20

0800aa88 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800aa88:	b580      	push	{r7, lr}
 800aa8a:	b082      	sub	sp, #8
 800aa8c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800aa8e:	f000 f989 	bl	800ada4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800aa92:	4b15      	ldr	r3, [pc, #84]	; (800aae8 <prvCheckForValidListAndQueue+0x60>)
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d120      	bne.n	800aadc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800aa9a:	4814      	ldr	r0, [pc, #80]	; (800aaec <prvCheckForValidListAndQueue+0x64>)
 800aa9c:	f7fd fe9e 	bl	80087dc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800aaa0:	4813      	ldr	r0, [pc, #76]	; (800aaf0 <prvCheckForValidListAndQueue+0x68>)
 800aaa2:	f7fd fe9b 	bl	80087dc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800aaa6:	4b13      	ldr	r3, [pc, #76]	; (800aaf4 <prvCheckForValidListAndQueue+0x6c>)
 800aaa8:	4a10      	ldr	r2, [pc, #64]	; (800aaec <prvCheckForValidListAndQueue+0x64>)
 800aaaa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800aaac:	4b12      	ldr	r3, [pc, #72]	; (800aaf8 <prvCheckForValidListAndQueue+0x70>)
 800aaae:	4a10      	ldr	r2, [pc, #64]	; (800aaf0 <prvCheckForValidListAndQueue+0x68>)
 800aab0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800aab2:	2300      	movs	r3, #0
 800aab4:	9300      	str	r3, [sp, #0]
 800aab6:	4b11      	ldr	r3, [pc, #68]	; (800aafc <prvCheckForValidListAndQueue+0x74>)
 800aab8:	4a11      	ldr	r2, [pc, #68]	; (800ab00 <prvCheckForValidListAndQueue+0x78>)
 800aaba:	2110      	movs	r1, #16
 800aabc:	200a      	movs	r0, #10
 800aabe:	f7fd ffa9 	bl	8008a14 <xQueueGenericCreateStatic>
 800aac2:	4603      	mov	r3, r0
 800aac4:	4a08      	ldr	r2, [pc, #32]	; (800aae8 <prvCheckForValidListAndQueue+0x60>)
 800aac6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800aac8:	4b07      	ldr	r3, [pc, #28]	; (800aae8 <prvCheckForValidListAndQueue+0x60>)
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d005      	beq.n	800aadc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800aad0:	4b05      	ldr	r3, [pc, #20]	; (800aae8 <prvCheckForValidListAndQueue+0x60>)
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	490b      	ldr	r1, [pc, #44]	; (800ab04 <prvCheckForValidListAndQueue+0x7c>)
 800aad6:	4618      	mov	r0, r3
 800aad8:	f7fe fc8c 	bl	80093f4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800aadc:	f000 f992 	bl	800ae04 <vPortExitCritical>
}
 800aae0:	bf00      	nop
 800aae2:	46bd      	mov	sp, r7
 800aae4:	bd80      	pop	{r7, pc}
 800aae6:	bf00      	nop
 800aae8:	20005b24 	.word	0x20005b24
 800aaec:	20005af4 	.word	0x20005af4
 800aaf0:	20005b08 	.word	0x20005b08
 800aaf4:	20005b1c 	.word	0x20005b1c
 800aaf8:	20005b20 	.word	0x20005b20
 800aafc:	20005bd0 	.word	0x20005bd0
 800ab00:	20005b30 	.word	0x20005b30
 800ab04:	0800c628 	.word	0x0800c628

0800ab08 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800ab08:	b580      	push	{r7, lr}
 800ab0a:	b08a      	sub	sp, #40	; 0x28
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	60f8      	str	r0, [r7, #12]
 800ab10:	60b9      	str	r1, [r7, #8]
 800ab12:	607a      	str	r2, [r7, #4]
 800ab14:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 800ab16:	f06f 0301 	mvn.w	r3, #1
 800ab1a:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 800ab20:	68bb      	ldr	r3, [r7, #8]
 800ab22:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ab28:	4b06      	ldr	r3, [pc, #24]	; (800ab44 <xTimerPendFunctionCallFromISR+0x3c>)
 800ab2a:	6818      	ldr	r0, [r3, #0]
 800ab2c:	f107 0114 	add.w	r1, r7, #20
 800ab30:	2300      	movs	r3, #0
 800ab32:	683a      	ldr	r2, [r7, #0]
 800ab34:	f7fe f9b2 	bl	8008e9c <xQueueGenericSendFromISR>
 800ab38:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 800ab3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800ab3c:	4618      	mov	r0, r3
 800ab3e:	3728      	adds	r7, #40	; 0x28
 800ab40:	46bd      	mov	sp, r7
 800ab42:	bd80      	pop	{r7, pc}
 800ab44:	20005b24 	.word	0x20005b24

0800ab48 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ab48:	b480      	push	{r7}
 800ab4a:	b085      	sub	sp, #20
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	60f8      	str	r0, [r7, #12]
 800ab50:	60b9      	str	r1, [r7, #8]
 800ab52:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	3b04      	subs	r3, #4
 800ab58:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ab60:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	3b04      	subs	r3, #4
 800ab66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ab68:	68bb      	ldr	r3, [r7, #8]
 800ab6a:	f023 0201 	bic.w	r2, r3, #1
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	3b04      	subs	r3, #4
 800ab76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ab78:	4a0c      	ldr	r2, [pc, #48]	; (800abac <pxPortInitialiseStack+0x64>)
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	3b14      	subs	r3, #20
 800ab82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ab84:	687a      	ldr	r2, [r7, #4]
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	3b04      	subs	r3, #4
 800ab8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	f06f 0202 	mvn.w	r2, #2
 800ab96:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	3b20      	subs	r3, #32
 800ab9c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ab9e:	68fb      	ldr	r3, [r7, #12]
}
 800aba0:	4618      	mov	r0, r3
 800aba2:	3714      	adds	r7, #20
 800aba4:	46bd      	mov	sp, r7
 800aba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abaa:	4770      	bx	lr
 800abac:	0800abb1 	.word	0x0800abb1

0800abb0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800abb0:	b480      	push	{r7}
 800abb2:	b085      	sub	sp, #20
 800abb4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800abb6:	2300      	movs	r3, #0
 800abb8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800abba:	4b12      	ldr	r3, [pc, #72]	; (800ac04 <prvTaskExitError+0x54>)
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abc2:	d00a      	beq.n	800abda <prvTaskExitError+0x2a>
	__asm volatile
 800abc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abc8:	f383 8811 	msr	BASEPRI, r3
 800abcc:	f3bf 8f6f 	isb	sy
 800abd0:	f3bf 8f4f 	dsb	sy
 800abd4:	60fb      	str	r3, [r7, #12]
}
 800abd6:	bf00      	nop
 800abd8:	e7fe      	b.n	800abd8 <prvTaskExitError+0x28>
	__asm volatile
 800abda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abde:	f383 8811 	msr	BASEPRI, r3
 800abe2:	f3bf 8f6f 	isb	sy
 800abe6:	f3bf 8f4f 	dsb	sy
 800abea:	60bb      	str	r3, [r7, #8]
}
 800abec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800abee:	bf00      	nop
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d0fc      	beq.n	800abf0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800abf6:	bf00      	nop
 800abf8:	bf00      	nop
 800abfa:	3714      	adds	r7, #20
 800abfc:	46bd      	mov	sp, r7
 800abfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac02:	4770      	bx	lr
 800ac04:	20000014 	.word	0x20000014
	...

0800ac10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ac10:	4b07      	ldr	r3, [pc, #28]	; (800ac30 <pxCurrentTCBConst2>)
 800ac12:	6819      	ldr	r1, [r3, #0]
 800ac14:	6808      	ldr	r0, [r1, #0]
 800ac16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac1a:	f380 8809 	msr	PSP, r0
 800ac1e:	f3bf 8f6f 	isb	sy
 800ac22:	f04f 0000 	mov.w	r0, #0
 800ac26:	f380 8811 	msr	BASEPRI, r0
 800ac2a:	4770      	bx	lr
 800ac2c:	f3af 8000 	nop.w

0800ac30 <pxCurrentTCBConst2>:
 800ac30:	200055f4 	.word	0x200055f4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ac34:	bf00      	nop
 800ac36:	bf00      	nop

0800ac38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ac38:	4808      	ldr	r0, [pc, #32]	; (800ac5c <prvPortStartFirstTask+0x24>)
 800ac3a:	6800      	ldr	r0, [r0, #0]
 800ac3c:	6800      	ldr	r0, [r0, #0]
 800ac3e:	f380 8808 	msr	MSP, r0
 800ac42:	f04f 0000 	mov.w	r0, #0
 800ac46:	f380 8814 	msr	CONTROL, r0
 800ac4a:	b662      	cpsie	i
 800ac4c:	b661      	cpsie	f
 800ac4e:	f3bf 8f4f 	dsb	sy
 800ac52:	f3bf 8f6f 	isb	sy
 800ac56:	df00      	svc	0
 800ac58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ac5a:	bf00      	nop
 800ac5c:	e000ed08 	.word	0xe000ed08

0800ac60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ac60:	b580      	push	{r7, lr}
 800ac62:	b086      	sub	sp, #24
 800ac64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ac66:	4b46      	ldr	r3, [pc, #280]	; (800ad80 <xPortStartScheduler+0x120>)
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	4a46      	ldr	r2, [pc, #280]	; (800ad84 <xPortStartScheduler+0x124>)
 800ac6c:	4293      	cmp	r3, r2
 800ac6e:	d10a      	bne.n	800ac86 <xPortStartScheduler+0x26>
	__asm volatile
 800ac70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac74:	f383 8811 	msr	BASEPRI, r3
 800ac78:	f3bf 8f6f 	isb	sy
 800ac7c:	f3bf 8f4f 	dsb	sy
 800ac80:	613b      	str	r3, [r7, #16]
}
 800ac82:	bf00      	nop
 800ac84:	e7fe      	b.n	800ac84 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ac86:	4b3e      	ldr	r3, [pc, #248]	; (800ad80 <xPortStartScheduler+0x120>)
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	4a3f      	ldr	r2, [pc, #252]	; (800ad88 <xPortStartScheduler+0x128>)
 800ac8c:	4293      	cmp	r3, r2
 800ac8e:	d10a      	bne.n	800aca6 <xPortStartScheduler+0x46>
	__asm volatile
 800ac90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac94:	f383 8811 	msr	BASEPRI, r3
 800ac98:	f3bf 8f6f 	isb	sy
 800ac9c:	f3bf 8f4f 	dsb	sy
 800aca0:	60fb      	str	r3, [r7, #12]
}
 800aca2:	bf00      	nop
 800aca4:	e7fe      	b.n	800aca4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800aca6:	4b39      	ldr	r3, [pc, #228]	; (800ad8c <xPortStartScheduler+0x12c>)
 800aca8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800acaa:	697b      	ldr	r3, [r7, #20]
 800acac:	781b      	ldrb	r3, [r3, #0]
 800acae:	b2db      	uxtb	r3, r3
 800acb0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800acb2:	697b      	ldr	r3, [r7, #20]
 800acb4:	22ff      	movs	r2, #255	; 0xff
 800acb6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800acb8:	697b      	ldr	r3, [r7, #20]
 800acba:	781b      	ldrb	r3, [r3, #0]
 800acbc:	b2db      	uxtb	r3, r3
 800acbe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800acc0:	78fb      	ldrb	r3, [r7, #3]
 800acc2:	b2db      	uxtb	r3, r3
 800acc4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800acc8:	b2da      	uxtb	r2, r3
 800acca:	4b31      	ldr	r3, [pc, #196]	; (800ad90 <xPortStartScheduler+0x130>)
 800accc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800acce:	4b31      	ldr	r3, [pc, #196]	; (800ad94 <xPortStartScheduler+0x134>)
 800acd0:	2207      	movs	r2, #7
 800acd2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800acd4:	e009      	b.n	800acea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800acd6:	4b2f      	ldr	r3, [pc, #188]	; (800ad94 <xPortStartScheduler+0x134>)
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	3b01      	subs	r3, #1
 800acdc:	4a2d      	ldr	r2, [pc, #180]	; (800ad94 <xPortStartScheduler+0x134>)
 800acde:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ace0:	78fb      	ldrb	r3, [r7, #3]
 800ace2:	b2db      	uxtb	r3, r3
 800ace4:	005b      	lsls	r3, r3, #1
 800ace6:	b2db      	uxtb	r3, r3
 800ace8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800acea:	78fb      	ldrb	r3, [r7, #3]
 800acec:	b2db      	uxtb	r3, r3
 800acee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800acf2:	2b80      	cmp	r3, #128	; 0x80
 800acf4:	d0ef      	beq.n	800acd6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800acf6:	4b27      	ldr	r3, [pc, #156]	; (800ad94 <xPortStartScheduler+0x134>)
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	f1c3 0307 	rsb	r3, r3, #7
 800acfe:	2b04      	cmp	r3, #4
 800ad00:	d00a      	beq.n	800ad18 <xPortStartScheduler+0xb8>
	__asm volatile
 800ad02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad06:	f383 8811 	msr	BASEPRI, r3
 800ad0a:	f3bf 8f6f 	isb	sy
 800ad0e:	f3bf 8f4f 	dsb	sy
 800ad12:	60bb      	str	r3, [r7, #8]
}
 800ad14:	bf00      	nop
 800ad16:	e7fe      	b.n	800ad16 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ad18:	4b1e      	ldr	r3, [pc, #120]	; (800ad94 <xPortStartScheduler+0x134>)
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	021b      	lsls	r3, r3, #8
 800ad1e:	4a1d      	ldr	r2, [pc, #116]	; (800ad94 <xPortStartScheduler+0x134>)
 800ad20:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ad22:	4b1c      	ldr	r3, [pc, #112]	; (800ad94 <xPortStartScheduler+0x134>)
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ad2a:	4a1a      	ldr	r2, [pc, #104]	; (800ad94 <xPortStartScheduler+0x134>)
 800ad2c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	b2da      	uxtb	r2, r3
 800ad32:	697b      	ldr	r3, [r7, #20]
 800ad34:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ad36:	4b18      	ldr	r3, [pc, #96]	; (800ad98 <xPortStartScheduler+0x138>)
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	4a17      	ldr	r2, [pc, #92]	; (800ad98 <xPortStartScheduler+0x138>)
 800ad3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ad40:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ad42:	4b15      	ldr	r3, [pc, #84]	; (800ad98 <xPortStartScheduler+0x138>)
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	4a14      	ldr	r2, [pc, #80]	; (800ad98 <xPortStartScheduler+0x138>)
 800ad48:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ad4c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ad4e:	f000 f8dd 	bl	800af0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ad52:	4b12      	ldr	r3, [pc, #72]	; (800ad9c <xPortStartScheduler+0x13c>)
 800ad54:	2200      	movs	r2, #0
 800ad56:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ad58:	f000 f8fc 	bl	800af54 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ad5c:	4b10      	ldr	r3, [pc, #64]	; (800ada0 <xPortStartScheduler+0x140>)
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	4a0f      	ldr	r2, [pc, #60]	; (800ada0 <xPortStartScheduler+0x140>)
 800ad62:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ad66:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ad68:	f7ff ff66 	bl	800ac38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ad6c:	f7fe ff7c 	bl	8009c68 <vTaskSwitchContext>
	prvTaskExitError();
 800ad70:	f7ff ff1e 	bl	800abb0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ad74:	2300      	movs	r3, #0
}
 800ad76:	4618      	mov	r0, r3
 800ad78:	3718      	adds	r7, #24
 800ad7a:	46bd      	mov	sp, r7
 800ad7c:	bd80      	pop	{r7, pc}
 800ad7e:	bf00      	nop
 800ad80:	e000ed00 	.word	0xe000ed00
 800ad84:	410fc271 	.word	0x410fc271
 800ad88:	410fc270 	.word	0x410fc270
 800ad8c:	e000e400 	.word	0xe000e400
 800ad90:	20005c20 	.word	0x20005c20
 800ad94:	20005c24 	.word	0x20005c24
 800ad98:	e000ed20 	.word	0xe000ed20
 800ad9c:	20000014 	.word	0x20000014
 800ada0:	e000ef34 	.word	0xe000ef34

0800ada4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ada4:	b480      	push	{r7}
 800ada6:	b083      	sub	sp, #12
 800ada8:	af00      	add	r7, sp, #0
	__asm volatile
 800adaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adae:	f383 8811 	msr	BASEPRI, r3
 800adb2:	f3bf 8f6f 	isb	sy
 800adb6:	f3bf 8f4f 	dsb	sy
 800adba:	607b      	str	r3, [r7, #4]
}
 800adbc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800adbe:	4b0f      	ldr	r3, [pc, #60]	; (800adfc <vPortEnterCritical+0x58>)
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	3301      	adds	r3, #1
 800adc4:	4a0d      	ldr	r2, [pc, #52]	; (800adfc <vPortEnterCritical+0x58>)
 800adc6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800adc8:	4b0c      	ldr	r3, [pc, #48]	; (800adfc <vPortEnterCritical+0x58>)
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	2b01      	cmp	r3, #1
 800adce:	d10f      	bne.n	800adf0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800add0:	4b0b      	ldr	r3, [pc, #44]	; (800ae00 <vPortEnterCritical+0x5c>)
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	b2db      	uxtb	r3, r3
 800add6:	2b00      	cmp	r3, #0
 800add8:	d00a      	beq.n	800adf0 <vPortEnterCritical+0x4c>
	__asm volatile
 800adda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adde:	f383 8811 	msr	BASEPRI, r3
 800ade2:	f3bf 8f6f 	isb	sy
 800ade6:	f3bf 8f4f 	dsb	sy
 800adea:	603b      	str	r3, [r7, #0]
}
 800adec:	bf00      	nop
 800adee:	e7fe      	b.n	800adee <vPortEnterCritical+0x4a>
	}
}
 800adf0:	bf00      	nop
 800adf2:	370c      	adds	r7, #12
 800adf4:	46bd      	mov	sp, r7
 800adf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adfa:	4770      	bx	lr
 800adfc:	20000014 	.word	0x20000014
 800ae00:	e000ed04 	.word	0xe000ed04

0800ae04 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ae04:	b480      	push	{r7}
 800ae06:	b083      	sub	sp, #12
 800ae08:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ae0a:	4b12      	ldr	r3, [pc, #72]	; (800ae54 <vPortExitCritical+0x50>)
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d10a      	bne.n	800ae28 <vPortExitCritical+0x24>
	__asm volatile
 800ae12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae16:	f383 8811 	msr	BASEPRI, r3
 800ae1a:	f3bf 8f6f 	isb	sy
 800ae1e:	f3bf 8f4f 	dsb	sy
 800ae22:	607b      	str	r3, [r7, #4]
}
 800ae24:	bf00      	nop
 800ae26:	e7fe      	b.n	800ae26 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ae28:	4b0a      	ldr	r3, [pc, #40]	; (800ae54 <vPortExitCritical+0x50>)
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	3b01      	subs	r3, #1
 800ae2e:	4a09      	ldr	r2, [pc, #36]	; (800ae54 <vPortExitCritical+0x50>)
 800ae30:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ae32:	4b08      	ldr	r3, [pc, #32]	; (800ae54 <vPortExitCritical+0x50>)
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d105      	bne.n	800ae46 <vPortExitCritical+0x42>
 800ae3a:	2300      	movs	r3, #0
 800ae3c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ae3e:	683b      	ldr	r3, [r7, #0]
 800ae40:	f383 8811 	msr	BASEPRI, r3
}
 800ae44:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ae46:	bf00      	nop
 800ae48:	370c      	adds	r7, #12
 800ae4a:	46bd      	mov	sp, r7
 800ae4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae50:	4770      	bx	lr
 800ae52:	bf00      	nop
 800ae54:	20000014 	.word	0x20000014
	...

0800ae60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ae60:	f3ef 8009 	mrs	r0, PSP
 800ae64:	f3bf 8f6f 	isb	sy
 800ae68:	4b15      	ldr	r3, [pc, #84]	; (800aec0 <pxCurrentTCBConst>)
 800ae6a:	681a      	ldr	r2, [r3, #0]
 800ae6c:	f01e 0f10 	tst.w	lr, #16
 800ae70:	bf08      	it	eq
 800ae72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ae76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae7a:	6010      	str	r0, [r2, #0]
 800ae7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ae80:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ae84:	f380 8811 	msr	BASEPRI, r0
 800ae88:	f3bf 8f4f 	dsb	sy
 800ae8c:	f3bf 8f6f 	isb	sy
 800ae90:	f7fe feea 	bl	8009c68 <vTaskSwitchContext>
 800ae94:	f04f 0000 	mov.w	r0, #0
 800ae98:	f380 8811 	msr	BASEPRI, r0
 800ae9c:	bc09      	pop	{r0, r3}
 800ae9e:	6819      	ldr	r1, [r3, #0]
 800aea0:	6808      	ldr	r0, [r1, #0]
 800aea2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aea6:	f01e 0f10 	tst.w	lr, #16
 800aeaa:	bf08      	it	eq
 800aeac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800aeb0:	f380 8809 	msr	PSP, r0
 800aeb4:	f3bf 8f6f 	isb	sy
 800aeb8:	4770      	bx	lr
 800aeba:	bf00      	nop
 800aebc:	f3af 8000 	nop.w

0800aec0 <pxCurrentTCBConst>:
 800aec0:	200055f4 	.word	0x200055f4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800aec4:	bf00      	nop
 800aec6:	bf00      	nop

0800aec8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800aec8:	b580      	push	{r7, lr}
 800aeca:	b082      	sub	sp, #8
 800aecc:	af00      	add	r7, sp, #0
	__asm volatile
 800aece:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aed2:	f383 8811 	msr	BASEPRI, r3
 800aed6:	f3bf 8f6f 	isb	sy
 800aeda:	f3bf 8f4f 	dsb	sy
 800aede:	607b      	str	r3, [r7, #4]
}
 800aee0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800aee2:	f7fe fe07 	bl	8009af4 <xTaskIncrementTick>
 800aee6:	4603      	mov	r3, r0
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d003      	beq.n	800aef4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800aeec:	4b06      	ldr	r3, [pc, #24]	; (800af08 <SysTick_Handler+0x40>)
 800aeee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aef2:	601a      	str	r2, [r3, #0]
 800aef4:	2300      	movs	r3, #0
 800aef6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800aef8:	683b      	ldr	r3, [r7, #0]
 800aefa:	f383 8811 	msr	BASEPRI, r3
}
 800aefe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800af00:	bf00      	nop
 800af02:	3708      	adds	r7, #8
 800af04:	46bd      	mov	sp, r7
 800af06:	bd80      	pop	{r7, pc}
 800af08:	e000ed04 	.word	0xe000ed04

0800af0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800af0c:	b480      	push	{r7}
 800af0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800af10:	4b0b      	ldr	r3, [pc, #44]	; (800af40 <vPortSetupTimerInterrupt+0x34>)
 800af12:	2200      	movs	r2, #0
 800af14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800af16:	4b0b      	ldr	r3, [pc, #44]	; (800af44 <vPortSetupTimerInterrupt+0x38>)
 800af18:	2200      	movs	r2, #0
 800af1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800af1c:	4b0a      	ldr	r3, [pc, #40]	; (800af48 <vPortSetupTimerInterrupt+0x3c>)
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	4a0a      	ldr	r2, [pc, #40]	; (800af4c <vPortSetupTimerInterrupt+0x40>)
 800af22:	fba2 2303 	umull	r2, r3, r2, r3
 800af26:	099b      	lsrs	r3, r3, #6
 800af28:	4a09      	ldr	r2, [pc, #36]	; (800af50 <vPortSetupTimerInterrupt+0x44>)
 800af2a:	3b01      	subs	r3, #1
 800af2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800af2e:	4b04      	ldr	r3, [pc, #16]	; (800af40 <vPortSetupTimerInterrupt+0x34>)
 800af30:	2207      	movs	r2, #7
 800af32:	601a      	str	r2, [r3, #0]
}
 800af34:	bf00      	nop
 800af36:	46bd      	mov	sp, r7
 800af38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af3c:	4770      	bx	lr
 800af3e:	bf00      	nop
 800af40:	e000e010 	.word	0xe000e010
 800af44:	e000e018 	.word	0xe000e018
 800af48:	20000000 	.word	0x20000000
 800af4c:	10624dd3 	.word	0x10624dd3
 800af50:	e000e014 	.word	0xe000e014

0800af54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800af54:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800af64 <vPortEnableVFP+0x10>
 800af58:	6801      	ldr	r1, [r0, #0]
 800af5a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800af5e:	6001      	str	r1, [r0, #0]
 800af60:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800af62:	bf00      	nop
 800af64:	e000ed88 	.word	0xe000ed88

0800af68 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800af68:	b480      	push	{r7}
 800af6a:	b085      	sub	sp, #20
 800af6c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800af6e:	f3ef 8305 	mrs	r3, IPSR
 800af72:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	2b0f      	cmp	r3, #15
 800af78:	d914      	bls.n	800afa4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800af7a:	4a17      	ldr	r2, [pc, #92]	; (800afd8 <vPortValidateInterruptPriority+0x70>)
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	4413      	add	r3, r2
 800af80:	781b      	ldrb	r3, [r3, #0]
 800af82:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800af84:	4b15      	ldr	r3, [pc, #84]	; (800afdc <vPortValidateInterruptPriority+0x74>)
 800af86:	781b      	ldrb	r3, [r3, #0]
 800af88:	7afa      	ldrb	r2, [r7, #11]
 800af8a:	429a      	cmp	r2, r3
 800af8c:	d20a      	bcs.n	800afa4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800af8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af92:	f383 8811 	msr	BASEPRI, r3
 800af96:	f3bf 8f6f 	isb	sy
 800af9a:	f3bf 8f4f 	dsb	sy
 800af9e:	607b      	str	r3, [r7, #4]
}
 800afa0:	bf00      	nop
 800afa2:	e7fe      	b.n	800afa2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800afa4:	4b0e      	ldr	r3, [pc, #56]	; (800afe0 <vPortValidateInterruptPriority+0x78>)
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800afac:	4b0d      	ldr	r3, [pc, #52]	; (800afe4 <vPortValidateInterruptPriority+0x7c>)
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	429a      	cmp	r2, r3
 800afb2:	d90a      	bls.n	800afca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800afb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afb8:	f383 8811 	msr	BASEPRI, r3
 800afbc:	f3bf 8f6f 	isb	sy
 800afc0:	f3bf 8f4f 	dsb	sy
 800afc4:	603b      	str	r3, [r7, #0]
}
 800afc6:	bf00      	nop
 800afc8:	e7fe      	b.n	800afc8 <vPortValidateInterruptPriority+0x60>
	}
 800afca:	bf00      	nop
 800afcc:	3714      	adds	r7, #20
 800afce:	46bd      	mov	sp, r7
 800afd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd4:	4770      	bx	lr
 800afd6:	bf00      	nop
 800afd8:	e000e3f0 	.word	0xe000e3f0
 800afdc:	20005c20 	.word	0x20005c20
 800afe0:	e000ed0c 	.word	0xe000ed0c
 800afe4:	20005c24 	.word	0x20005c24

0800afe8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800afe8:	b580      	push	{r7, lr}
 800afea:	b08a      	sub	sp, #40	; 0x28
 800afec:	af00      	add	r7, sp, #0
 800afee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800aff0:	2300      	movs	r3, #0
 800aff2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800aff4:	f7fe fcc2 	bl	800997c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800aff8:	4b58      	ldr	r3, [pc, #352]	; (800b15c <pvPortMalloc+0x174>)
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	2b00      	cmp	r3, #0
 800affe:	d101      	bne.n	800b004 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b000:	f000 f910 	bl	800b224 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b004:	4b56      	ldr	r3, [pc, #344]	; (800b160 <pvPortMalloc+0x178>)
 800b006:	681a      	ldr	r2, [r3, #0]
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	4013      	ands	r3, r2
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	f040 808e 	bne.w	800b12e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	2b00      	cmp	r3, #0
 800b016:	d01d      	beq.n	800b054 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b018:	2208      	movs	r2, #8
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	4413      	add	r3, r2
 800b01e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	f003 0307 	and.w	r3, r3, #7
 800b026:	2b00      	cmp	r3, #0
 800b028:	d014      	beq.n	800b054 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	f023 0307 	bic.w	r3, r3, #7
 800b030:	3308      	adds	r3, #8
 800b032:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	f003 0307 	and.w	r3, r3, #7
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d00a      	beq.n	800b054 <pvPortMalloc+0x6c>
	__asm volatile
 800b03e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b042:	f383 8811 	msr	BASEPRI, r3
 800b046:	f3bf 8f6f 	isb	sy
 800b04a:	f3bf 8f4f 	dsb	sy
 800b04e:	617b      	str	r3, [r7, #20]
}
 800b050:	bf00      	nop
 800b052:	e7fe      	b.n	800b052 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	2b00      	cmp	r3, #0
 800b058:	d069      	beq.n	800b12e <pvPortMalloc+0x146>
 800b05a:	4b42      	ldr	r3, [pc, #264]	; (800b164 <pvPortMalloc+0x17c>)
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	687a      	ldr	r2, [r7, #4]
 800b060:	429a      	cmp	r2, r3
 800b062:	d864      	bhi.n	800b12e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b064:	4b40      	ldr	r3, [pc, #256]	; (800b168 <pvPortMalloc+0x180>)
 800b066:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b068:	4b3f      	ldr	r3, [pc, #252]	; (800b168 <pvPortMalloc+0x180>)
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b06e:	e004      	b.n	800b07a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b072:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b07a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b07c:	685b      	ldr	r3, [r3, #4]
 800b07e:	687a      	ldr	r2, [r7, #4]
 800b080:	429a      	cmp	r2, r3
 800b082:	d903      	bls.n	800b08c <pvPortMalloc+0xa4>
 800b084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d1f1      	bne.n	800b070 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b08c:	4b33      	ldr	r3, [pc, #204]	; (800b15c <pvPortMalloc+0x174>)
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b092:	429a      	cmp	r2, r3
 800b094:	d04b      	beq.n	800b12e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b096:	6a3b      	ldr	r3, [r7, #32]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	2208      	movs	r2, #8
 800b09c:	4413      	add	r3, r2
 800b09e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b0a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0a2:	681a      	ldr	r2, [r3, #0]
 800b0a4:	6a3b      	ldr	r3, [r7, #32]
 800b0a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b0a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0aa:	685a      	ldr	r2, [r3, #4]
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	1ad2      	subs	r2, r2, r3
 800b0b0:	2308      	movs	r3, #8
 800b0b2:	005b      	lsls	r3, r3, #1
 800b0b4:	429a      	cmp	r2, r3
 800b0b6:	d91f      	bls.n	800b0f8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b0b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	4413      	add	r3, r2
 800b0be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b0c0:	69bb      	ldr	r3, [r7, #24]
 800b0c2:	f003 0307 	and.w	r3, r3, #7
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d00a      	beq.n	800b0e0 <pvPortMalloc+0xf8>
	__asm volatile
 800b0ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0ce:	f383 8811 	msr	BASEPRI, r3
 800b0d2:	f3bf 8f6f 	isb	sy
 800b0d6:	f3bf 8f4f 	dsb	sy
 800b0da:	613b      	str	r3, [r7, #16]
}
 800b0dc:	bf00      	nop
 800b0de:	e7fe      	b.n	800b0de <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b0e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0e2:	685a      	ldr	r2, [r3, #4]
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	1ad2      	subs	r2, r2, r3
 800b0e8:	69bb      	ldr	r3, [r7, #24]
 800b0ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b0ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0ee:	687a      	ldr	r2, [r7, #4]
 800b0f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b0f2:	69b8      	ldr	r0, [r7, #24]
 800b0f4:	f000 f8f8 	bl	800b2e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b0f8:	4b1a      	ldr	r3, [pc, #104]	; (800b164 <pvPortMalloc+0x17c>)
 800b0fa:	681a      	ldr	r2, [r3, #0]
 800b0fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0fe:	685b      	ldr	r3, [r3, #4]
 800b100:	1ad3      	subs	r3, r2, r3
 800b102:	4a18      	ldr	r2, [pc, #96]	; (800b164 <pvPortMalloc+0x17c>)
 800b104:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b106:	4b17      	ldr	r3, [pc, #92]	; (800b164 <pvPortMalloc+0x17c>)
 800b108:	681a      	ldr	r2, [r3, #0]
 800b10a:	4b18      	ldr	r3, [pc, #96]	; (800b16c <pvPortMalloc+0x184>)
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	429a      	cmp	r2, r3
 800b110:	d203      	bcs.n	800b11a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b112:	4b14      	ldr	r3, [pc, #80]	; (800b164 <pvPortMalloc+0x17c>)
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	4a15      	ldr	r2, [pc, #84]	; (800b16c <pvPortMalloc+0x184>)
 800b118:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b11a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b11c:	685a      	ldr	r2, [r3, #4]
 800b11e:	4b10      	ldr	r3, [pc, #64]	; (800b160 <pvPortMalloc+0x178>)
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	431a      	orrs	r2, r3
 800b124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b126:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b12a:	2200      	movs	r2, #0
 800b12c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b12e:	f7fe fc33 	bl	8009998 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b132:	69fb      	ldr	r3, [r7, #28]
 800b134:	f003 0307 	and.w	r3, r3, #7
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d00a      	beq.n	800b152 <pvPortMalloc+0x16a>
	__asm volatile
 800b13c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b140:	f383 8811 	msr	BASEPRI, r3
 800b144:	f3bf 8f6f 	isb	sy
 800b148:	f3bf 8f4f 	dsb	sy
 800b14c:	60fb      	str	r3, [r7, #12]
}
 800b14e:	bf00      	nop
 800b150:	e7fe      	b.n	800b150 <pvPortMalloc+0x168>
	return pvReturn;
 800b152:	69fb      	ldr	r3, [r7, #28]
}
 800b154:	4618      	mov	r0, r3
 800b156:	3728      	adds	r7, #40	; 0x28
 800b158:	46bd      	mov	sp, r7
 800b15a:	bd80      	pop	{r7, pc}
 800b15c:	20009830 	.word	0x20009830
 800b160:	2000983c 	.word	0x2000983c
 800b164:	20009834 	.word	0x20009834
 800b168:	20009828 	.word	0x20009828
 800b16c:	20009838 	.word	0x20009838

0800b170 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b170:	b580      	push	{r7, lr}
 800b172:	b086      	sub	sp, #24
 800b174:	af00      	add	r7, sp, #0
 800b176:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d048      	beq.n	800b214 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b182:	2308      	movs	r3, #8
 800b184:	425b      	negs	r3, r3
 800b186:	697a      	ldr	r2, [r7, #20]
 800b188:	4413      	add	r3, r2
 800b18a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b18c:	697b      	ldr	r3, [r7, #20]
 800b18e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b190:	693b      	ldr	r3, [r7, #16]
 800b192:	685a      	ldr	r2, [r3, #4]
 800b194:	4b21      	ldr	r3, [pc, #132]	; (800b21c <vPortFree+0xac>)
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	4013      	ands	r3, r2
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d10a      	bne.n	800b1b4 <vPortFree+0x44>
	__asm volatile
 800b19e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1a2:	f383 8811 	msr	BASEPRI, r3
 800b1a6:	f3bf 8f6f 	isb	sy
 800b1aa:	f3bf 8f4f 	dsb	sy
 800b1ae:	60fb      	str	r3, [r7, #12]
}
 800b1b0:	bf00      	nop
 800b1b2:	e7fe      	b.n	800b1b2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b1b4:	693b      	ldr	r3, [r7, #16]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d00a      	beq.n	800b1d2 <vPortFree+0x62>
	__asm volatile
 800b1bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1c0:	f383 8811 	msr	BASEPRI, r3
 800b1c4:	f3bf 8f6f 	isb	sy
 800b1c8:	f3bf 8f4f 	dsb	sy
 800b1cc:	60bb      	str	r3, [r7, #8]
}
 800b1ce:	bf00      	nop
 800b1d0:	e7fe      	b.n	800b1d0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b1d2:	693b      	ldr	r3, [r7, #16]
 800b1d4:	685a      	ldr	r2, [r3, #4]
 800b1d6:	4b11      	ldr	r3, [pc, #68]	; (800b21c <vPortFree+0xac>)
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	4013      	ands	r3, r2
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d019      	beq.n	800b214 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b1e0:	693b      	ldr	r3, [r7, #16]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d115      	bne.n	800b214 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b1e8:	693b      	ldr	r3, [r7, #16]
 800b1ea:	685a      	ldr	r2, [r3, #4]
 800b1ec:	4b0b      	ldr	r3, [pc, #44]	; (800b21c <vPortFree+0xac>)
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	43db      	mvns	r3, r3
 800b1f2:	401a      	ands	r2, r3
 800b1f4:	693b      	ldr	r3, [r7, #16]
 800b1f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b1f8:	f7fe fbc0 	bl	800997c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b1fc:	693b      	ldr	r3, [r7, #16]
 800b1fe:	685a      	ldr	r2, [r3, #4]
 800b200:	4b07      	ldr	r3, [pc, #28]	; (800b220 <vPortFree+0xb0>)
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	4413      	add	r3, r2
 800b206:	4a06      	ldr	r2, [pc, #24]	; (800b220 <vPortFree+0xb0>)
 800b208:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b20a:	6938      	ldr	r0, [r7, #16]
 800b20c:	f000 f86c 	bl	800b2e8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800b210:	f7fe fbc2 	bl	8009998 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b214:	bf00      	nop
 800b216:	3718      	adds	r7, #24
 800b218:	46bd      	mov	sp, r7
 800b21a:	bd80      	pop	{r7, pc}
 800b21c:	2000983c 	.word	0x2000983c
 800b220:	20009834 	.word	0x20009834

0800b224 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b224:	b480      	push	{r7}
 800b226:	b085      	sub	sp, #20
 800b228:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b22a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800b22e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b230:	4b27      	ldr	r3, [pc, #156]	; (800b2d0 <prvHeapInit+0xac>)
 800b232:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	f003 0307 	and.w	r3, r3, #7
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d00c      	beq.n	800b258 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	3307      	adds	r3, #7
 800b242:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	f023 0307 	bic.w	r3, r3, #7
 800b24a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b24c:	68ba      	ldr	r2, [r7, #8]
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	1ad3      	subs	r3, r2, r3
 800b252:	4a1f      	ldr	r2, [pc, #124]	; (800b2d0 <prvHeapInit+0xac>)
 800b254:	4413      	add	r3, r2
 800b256:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b25c:	4a1d      	ldr	r2, [pc, #116]	; (800b2d4 <prvHeapInit+0xb0>)
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b262:	4b1c      	ldr	r3, [pc, #112]	; (800b2d4 <prvHeapInit+0xb0>)
 800b264:	2200      	movs	r2, #0
 800b266:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	68ba      	ldr	r2, [r7, #8]
 800b26c:	4413      	add	r3, r2
 800b26e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b270:	2208      	movs	r2, #8
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	1a9b      	subs	r3, r3, r2
 800b276:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	f023 0307 	bic.w	r3, r3, #7
 800b27e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	4a15      	ldr	r2, [pc, #84]	; (800b2d8 <prvHeapInit+0xb4>)
 800b284:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b286:	4b14      	ldr	r3, [pc, #80]	; (800b2d8 <prvHeapInit+0xb4>)
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	2200      	movs	r2, #0
 800b28c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b28e:	4b12      	ldr	r3, [pc, #72]	; (800b2d8 <prvHeapInit+0xb4>)
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	2200      	movs	r2, #0
 800b294:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b29a:	683b      	ldr	r3, [r7, #0]
 800b29c:	68fa      	ldr	r2, [r7, #12]
 800b29e:	1ad2      	subs	r2, r2, r3
 800b2a0:	683b      	ldr	r3, [r7, #0]
 800b2a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b2a4:	4b0c      	ldr	r3, [pc, #48]	; (800b2d8 <prvHeapInit+0xb4>)
 800b2a6:	681a      	ldr	r2, [r3, #0]
 800b2a8:	683b      	ldr	r3, [r7, #0]
 800b2aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b2ac:	683b      	ldr	r3, [r7, #0]
 800b2ae:	685b      	ldr	r3, [r3, #4]
 800b2b0:	4a0a      	ldr	r2, [pc, #40]	; (800b2dc <prvHeapInit+0xb8>)
 800b2b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b2b4:	683b      	ldr	r3, [r7, #0]
 800b2b6:	685b      	ldr	r3, [r3, #4]
 800b2b8:	4a09      	ldr	r2, [pc, #36]	; (800b2e0 <prvHeapInit+0xbc>)
 800b2ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b2bc:	4b09      	ldr	r3, [pc, #36]	; (800b2e4 <prvHeapInit+0xc0>)
 800b2be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b2c2:	601a      	str	r2, [r3, #0]
}
 800b2c4:	bf00      	nop
 800b2c6:	3714      	adds	r7, #20
 800b2c8:	46bd      	mov	sp, r7
 800b2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ce:	4770      	bx	lr
 800b2d0:	20005c28 	.word	0x20005c28
 800b2d4:	20009828 	.word	0x20009828
 800b2d8:	20009830 	.word	0x20009830
 800b2dc:	20009838 	.word	0x20009838
 800b2e0:	20009834 	.word	0x20009834
 800b2e4:	2000983c 	.word	0x2000983c

0800b2e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b2e8:	b480      	push	{r7}
 800b2ea:	b085      	sub	sp, #20
 800b2ec:	af00      	add	r7, sp, #0
 800b2ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b2f0:	4b28      	ldr	r3, [pc, #160]	; (800b394 <prvInsertBlockIntoFreeList+0xac>)
 800b2f2:	60fb      	str	r3, [r7, #12]
 800b2f4:	e002      	b.n	800b2fc <prvInsertBlockIntoFreeList+0x14>
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	60fb      	str	r3, [r7, #12]
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	687a      	ldr	r2, [r7, #4]
 800b302:	429a      	cmp	r2, r3
 800b304:	d8f7      	bhi.n	800b2f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	685b      	ldr	r3, [r3, #4]
 800b30e:	68ba      	ldr	r2, [r7, #8]
 800b310:	4413      	add	r3, r2
 800b312:	687a      	ldr	r2, [r7, #4]
 800b314:	429a      	cmp	r2, r3
 800b316:	d108      	bne.n	800b32a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	685a      	ldr	r2, [r3, #4]
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	685b      	ldr	r3, [r3, #4]
 800b320:	441a      	add	r2, r3
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	685b      	ldr	r3, [r3, #4]
 800b332:	68ba      	ldr	r2, [r7, #8]
 800b334:	441a      	add	r2, r3
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	429a      	cmp	r2, r3
 800b33c:	d118      	bne.n	800b370 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	681a      	ldr	r2, [r3, #0]
 800b342:	4b15      	ldr	r3, [pc, #84]	; (800b398 <prvInsertBlockIntoFreeList+0xb0>)
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	429a      	cmp	r2, r3
 800b348:	d00d      	beq.n	800b366 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	685a      	ldr	r2, [r3, #4]
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	685b      	ldr	r3, [r3, #4]
 800b354:	441a      	add	r2, r3
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	681a      	ldr	r2, [r3, #0]
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	601a      	str	r2, [r3, #0]
 800b364:	e008      	b.n	800b378 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b366:	4b0c      	ldr	r3, [pc, #48]	; (800b398 <prvInsertBlockIntoFreeList+0xb0>)
 800b368:	681a      	ldr	r2, [r3, #0]
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	601a      	str	r2, [r3, #0]
 800b36e:	e003      	b.n	800b378 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	681a      	ldr	r2, [r3, #0]
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b378:	68fa      	ldr	r2, [r7, #12]
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	429a      	cmp	r2, r3
 800b37e:	d002      	beq.n	800b386 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	687a      	ldr	r2, [r7, #4]
 800b384:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b386:	bf00      	nop
 800b388:	3714      	adds	r7, #20
 800b38a:	46bd      	mov	sp, r7
 800b38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b390:	4770      	bx	lr
 800b392:	bf00      	nop
 800b394:	20009828 	.word	0x20009828
 800b398:	20009830 	.word	0x20009830

0800b39c <__libc_init_array>:
 800b39c:	b570      	push	{r4, r5, r6, lr}
 800b39e:	4d0d      	ldr	r5, [pc, #52]	; (800b3d4 <__libc_init_array+0x38>)
 800b3a0:	4c0d      	ldr	r4, [pc, #52]	; (800b3d8 <__libc_init_array+0x3c>)
 800b3a2:	1b64      	subs	r4, r4, r5
 800b3a4:	10a4      	asrs	r4, r4, #2
 800b3a6:	2600      	movs	r6, #0
 800b3a8:	42a6      	cmp	r6, r4
 800b3aa:	d109      	bne.n	800b3c0 <__libc_init_array+0x24>
 800b3ac:	4d0b      	ldr	r5, [pc, #44]	; (800b3dc <__libc_init_array+0x40>)
 800b3ae:	4c0c      	ldr	r4, [pc, #48]	; (800b3e0 <__libc_init_array+0x44>)
 800b3b0:	f001 f8f8 	bl	800c5a4 <_init>
 800b3b4:	1b64      	subs	r4, r4, r5
 800b3b6:	10a4      	asrs	r4, r4, #2
 800b3b8:	2600      	movs	r6, #0
 800b3ba:	42a6      	cmp	r6, r4
 800b3bc:	d105      	bne.n	800b3ca <__libc_init_array+0x2e>
 800b3be:	bd70      	pop	{r4, r5, r6, pc}
 800b3c0:	f855 3b04 	ldr.w	r3, [r5], #4
 800b3c4:	4798      	blx	r3
 800b3c6:	3601      	adds	r6, #1
 800b3c8:	e7ee      	b.n	800b3a8 <__libc_init_array+0xc>
 800b3ca:	f855 3b04 	ldr.w	r3, [r5], #4
 800b3ce:	4798      	blx	r3
 800b3d0:	3601      	adds	r6, #1
 800b3d2:	e7f2      	b.n	800b3ba <__libc_init_array+0x1e>
 800b3d4:	0800c810 	.word	0x0800c810
 800b3d8:	0800c810 	.word	0x0800c810
 800b3dc:	0800c810 	.word	0x0800c810
 800b3e0:	0800c814 	.word	0x0800c814

0800b3e4 <memcpy>:
 800b3e4:	440a      	add	r2, r1
 800b3e6:	4291      	cmp	r1, r2
 800b3e8:	f100 33ff 	add.w	r3, r0, #4294967295
 800b3ec:	d100      	bne.n	800b3f0 <memcpy+0xc>
 800b3ee:	4770      	bx	lr
 800b3f0:	b510      	push	{r4, lr}
 800b3f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b3f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b3fa:	4291      	cmp	r1, r2
 800b3fc:	d1f9      	bne.n	800b3f2 <memcpy+0xe>
 800b3fe:	bd10      	pop	{r4, pc}

0800b400 <memset>:
 800b400:	4402      	add	r2, r0
 800b402:	4603      	mov	r3, r0
 800b404:	4293      	cmp	r3, r2
 800b406:	d100      	bne.n	800b40a <memset+0xa>
 800b408:	4770      	bx	lr
 800b40a:	f803 1b01 	strb.w	r1, [r3], #1
 800b40e:	e7f9      	b.n	800b404 <memset+0x4>

0800b410 <rand>:
 800b410:	4b17      	ldr	r3, [pc, #92]	; (800b470 <rand+0x60>)
 800b412:	b510      	push	{r4, lr}
 800b414:	681c      	ldr	r4, [r3, #0]
 800b416:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b418:	b9b3      	cbnz	r3, 800b448 <rand+0x38>
 800b41a:	2018      	movs	r0, #24
 800b41c:	f000 f868 	bl	800b4f0 <malloc>
 800b420:	63a0      	str	r0, [r4, #56]	; 0x38
 800b422:	b928      	cbnz	r0, 800b430 <rand+0x20>
 800b424:	4602      	mov	r2, r0
 800b426:	4b13      	ldr	r3, [pc, #76]	; (800b474 <rand+0x64>)
 800b428:	4813      	ldr	r0, [pc, #76]	; (800b478 <rand+0x68>)
 800b42a:	214e      	movs	r1, #78	; 0x4e
 800b42c:	f000 f830 	bl	800b490 <__assert_func>
 800b430:	4a12      	ldr	r2, [pc, #72]	; (800b47c <rand+0x6c>)
 800b432:	4b13      	ldr	r3, [pc, #76]	; (800b480 <rand+0x70>)
 800b434:	e9c0 2300 	strd	r2, r3, [r0]
 800b438:	4b12      	ldr	r3, [pc, #72]	; (800b484 <rand+0x74>)
 800b43a:	6083      	str	r3, [r0, #8]
 800b43c:	230b      	movs	r3, #11
 800b43e:	8183      	strh	r3, [r0, #12]
 800b440:	2201      	movs	r2, #1
 800b442:	2300      	movs	r3, #0
 800b444:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800b448:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b44a:	480f      	ldr	r0, [pc, #60]	; (800b488 <rand+0x78>)
 800b44c:	690a      	ldr	r2, [r1, #16]
 800b44e:	694b      	ldr	r3, [r1, #20]
 800b450:	4c0e      	ldr	r4, [pc, #56]	; (800b48c <rand+0x7c>)
 800b452:	4350      	muls	r0, r2
 800b454:	fb04 0003 	mla	r0, r4, r3, r0
 800b458:	fba2 3404 	umull	r3, r4, r2, r4
 800b45c:	1c5a      	adds	r2, r3, #1
 800b45e:	4404      	add	r4, r0
 800b460:	f144 0000 	adc.w	r0, r4, #0
 800b464:	e9c1 2004 	strd	r2, r0, [r1, #16]
 800b468:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800b46c:	bd10      	pop	{r4, pc}
 800b46e:	bf00      	nop
 800b470:	20000018 	.word	0x20000018
 800b474:	0800c6c0 	.word	0x0800c6c0
 800b478:	0800c6d7 	.word	0x0800c6d7
 800b47c:	abcd330e 	.word	0xabcd330e
 800b480:	e66d1234 	.word	0xe66d1234
 800b484:	0005deec 	.word	0x0005deec
 800b488:	5851f42d 	.word	0x5851f42d
 800b48c:	4c957f2d 	.word	0x4c957f2d

0800b490 <__assert_func>:
 800b490:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b492:	4614      	mov	r4, r2
 800b494:	461a      	mov	r2, r3
 800b496:	4b09      	ldr	r3, [pc, #36]	; (800b4bc <__assert_func+0x2c>)
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	4605      	mov	r5, r0
 800b49c:	68d8      	ldr	r0, [r3, #12]
 800b49e:	b14c      	cbz	r4, 800b4b4 <__assert_func+0x24>
 800b4a0:	4b07      	ldr	r3, [pc, #28]	; (800b4c0 <__assert_func+0x30>)
 800b4a2:	9100      	str	r1, [sp, #0]
 800b4a4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b4a8:	4906      	ldr	r1, [pc, #24]	; (800b4c4 <__assert_func+0x34>)
 800b4aa:	462b      	mov	r3, r5
 800b4ac:	f000 f80e 	bl	800b4cc <fiprintf>
 800b4b0:	f000 fc8e 	bl	800bdd0 <abort>
 800b4b4:	4b04      	ldr	r3, [pc, #16]	; (800b4c8 <__assert_func+0x38>)
 800b4b6:	461c      	mov	r4, r3
 800b4b8:	e7f3      	b.n	800b4a2 <__assert_func+0x12>
 800b4ba:	bf00      	nop
 800b4bc:	20000018 	.word	0x20000018
 800b4c0:	0800c736 	.word	0x0800c736
 800b4c4:	0800c743 	.word	0x0800c743
 800b4c8:	0800c771 	.word	0x0800c771

0800b4cc <fiprintf>:
 800b4cc:	b40e      	push	{r1, r2, r3}
 800b4ce:	b503      	push	{r0, r1, lr}
 800b4d0:	4601      	mov	r1, r0
 800b4d2:	ab03      	add	r3, sp, #12
 800b4d4:	4805      	ldr	r0, [pc, #20]	; (800b4ec <fiprintf+0x20>)
 800b4d6:	f853 2b04 	ldr.w	r2, [r3], #4
 800b4da:	6800      	ldr	r0, [r0, #0]
 800b4dc:	9301      	str	r3, [sp, #4]
 800b4de:	f000 f8e3 	bl	800b6a8 <_vfiprintf_r>
 800b4e2:	b002      	add	sp, #8
 800b4e4:	f85d eb04 	ldr.w	lr, [sp], #4
 800b4e8:	b003      	add	sp, #12
 800b4ea:	4770      	bx	lr
 800b4ec:	20000018 	.word	0x20000018

0800b4f0 <malloc>:
 800b4f0:	4b02      	ldr	r3, [pc, #8]	; (800b4fc <malloc+0xc>)
 800b4f2:	4601      	mov	r1, r0
 800b4f4:	6818      	ldr	r0, [r3, #0]
 800b4f6:	f000 b853 	b.w	800b5a0 <_malloc_r>
 800b4fa:	bf00      	nop
 800b4fc:	20000018 	.word	0x20000018

0800b500 <_free_r>:
 800b500:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b502:	2900      	cmp	r1, #0
 800b504:	d048      	beq.n	800b598 <_free_r+0x98>
 800b506:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b50a:	9001      	str	r0, [sp, #4]
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	f1a1 0404 	sub.w	r4, r1, #4
 800b512:	bfb8      	it	lt
 800b514:	18e4      	addlt	r4, r4, r3
 800b516:	f000 fe81 	bl	800c21c <__malloc_lock>
 800b51a:	4a20      	ldr	r2, [pc, #128]	; (800b59c <_free_r+0x9c>)
 800b51c:	9801      	ldr	r0, [sp, #4]
 800b51e:	6813      	ldr	r3, [r2, #0]
 800b520:	4615      	mov	r5, r2
 800b522:	b933      	cbnz	r3, 800b532 <_free_r+0x32>
 800b524:	6063      	str	r3, [r4, #4]
 800b526:	6014      	str	r4, [r2, #0]
 800b528:	b003      	add	sp, #12
 800b52a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b52e:	f000 be7b 	b.w	800c228 <__malloc_unlock>
 800b532:	42a3      	cmp	r3, r4
 800b534:	d90b      	bls.n	800b54e <_free_r+0x4e>
 800b536:	6821      	ldr	r1, [r4, #0]
 800b538:	1862      	adds	r2, r4, r1
 800b53a:	4293      	cmp	r3, r2
 800b53c:	bf04      	itt	eq
 800b53e:	681a      	ldreq	r2, [r3, #0]
 800b540:	685b      	ldreq	r3, [r3, #4]
 800b542:	6063      	str	r3, [r4, #4]
 800b544:	bf04      	itt	eq
 800b546:	1852      	addeq	r2, r2, r1
 800b548:	6022      	streq	r2, [r4, #0]
 800b54a:	602c      	str	r4, [r5, #0]
 800b54c:	e7ec      	b.n	800b528 <_free_r+0x28>
 800b54e:	461a      	mov	r2, r3
 800b550:	685b      	ldr	r3, [r3, #4]
 800b552:	b10b      	cbz	r3, 800b558 <_free_r+0x58>
 800b554:	42a3      	cmp	r3, r4
 800b556:	d9fa      	bls.n	800b54e <_free_r+0x4e>
 800b558:	6811      	ldr	r1, [r2, #0]
 800b55a:	1855      	adds	r5, r2, r1
 800b55c:	42a5      	cmp	r5, r4
 800b55e:	d10b      	bne.n	800b578 <_free_r+0x78>
 800b560:	6824      	ldr	r4, [r4, #0]
 800b562:	4421      	add	r1, r4
 800b564:	1854      	adds	r4, r2, r1
 800b566:	42a3      	cmp	r3, r4
 800b568:	6011      	str	r1, [r2, #0]
 800b56a:	d1dd      	bne.n	800b528 <_free_r+0x28>
 800b56c:	681c      	ldr	r4, [r3, #0]
 800b56e:	685b      	ldr	r3, [r3, #4]
 800b570:	6053      	str	r3, [r2, #4]
 800b572:	4421      	add	r1, r4
 800b574:	6011      	str	r1, [r2, #0]
 800b576:	e7d7      	b.n	800b528 <_free_r+0x28>
 800b578:	d902      	bls.n	800b580 <_free_r+0x80>
 800b57a:	230c      	movs	r3, #12
 800b57c:	6003      	str	r3, [r0, #0]
 800b57e:	e7d3      	b.n	800b528 <_free_r+0x28>
 800b580:	6825      	ldr	r5, [r4, #0]
 800b582:	1961      	adds	r1, r4, r5
 800b584:	428b      	cmp	r3, r1
 800b586:	bf04      	itt	eq
 800b588:	6819      	ldreq	r1, [r3, #0]
 800b58a:	685b      	ldreq	r3, [r3, #4]
 800b58c:	6063      	str	r3, [r4, #4]
 800b58e:	bf04      	itt	eq
 800b590:	1949      	addeq	r1, r1, r5
 800b592:	6021      	streq	r1, [r4, #0]
 800b594:	6054      	str	r4, [r2, #4]
 800b596:	e7c7      	b.n	800b528 <_free_r+0x28>
 800b598:	b003      	add	sp, #12
 800b59a:	bd30      	pop	{r4, r5, pc}
 800b59c:	20009840 	.word	0x20009840

0800b5a0 <_malloc_r>:
 800b5a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5a2:	1ccd      	adds	r5, r1, #3
 800b5a4:	f025 0503 	bic.w	r5, r5, #3
 800b5a8:	3508      	adds	r5, #8
 800b5aa:	2d0c      	cmp	r5, #12
 800b5ac:	bf38      	it	cc
 800b5ae:	250c      	movcc	r5, #12
 800b5b0:	2d00      	cmp	r5, #0
 800b5b2:	4606      	mov	r6, r0
 800b5b4:	db01      	blt.n	800b5ba <_malloc_r+0x1a>
 800b5b6:	42a9      	cmp	r1, r5
 800b5b8:	d903      	bls.n	800b5c2 <_malloc_r+0x22>
 800b5ba:	230c      	movs	r3, #12
 800b5bc:	6033      	str	r3, [r6, #0]
 800b5be:	2000      	movs	r0, #0
 800b5c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b5c2:	f000 fe2b 	bl	800c21c <__malloc_lock>
 800b5c6:	4921      	ldr	r1, [pc, #132]	; (800b64c <_malloc_r+0xac>)
 800b5c8:	680a      	ldr	r2, [r1, #0]
 800b5ca:	4614      	mov	r4, r2
 800b5cc:	b99c      	cbnz	r4, 800b5f6 <_malloc_r+0x56>
 800b5ce:	4f20      	ldr	r7, [pc, #128]	; (800b650 <_malloc_r+0xb0>)
 800b5d0:	683b      	ldr	r3, [r7, #0]
 800b5d2:	b923      	cbnz	r3, 800b5de <_malloc_r+0x3e>
 800b5d4:	4621      	mov	r1, r4
 800b5d6:	4630      	mov	r0, r6
 800b5d8:	f000 fb2a 	bl	800bc30 <_sbrk_r>
 800b5dc:	6038      	str	r0, [r7, #0]
 800b5de:	4629      	mov	r1, r5
 800b5e0:	4630      	mov	r0, r6
 800b5e2:	f000 fb25 	bl	800bc30 <_sbrk_r>
 800b5e6:	1c43      	adds	r3, r0, #1
 800b5e8:	d123      	bne.n	800b632 <_malloc_r+0x92>
 800b5ea:	230c      	movs	r3, #12
 800b5ec:	6033      	str	r3, [r6, #0]
 800b5ee:	4630      	mov	r0, r6
 800b5f0:	f000 fe1a 	bl	800c228 <__malloc_unlock>
 800b5f4:	e7e3      	b.n	800b5be <_malloc_r+0x1e>
 800b5f6:	6823      	ldr	r3, [r4, #0]
 800b5f8:	1b5b      	subs	r3, r3, r5
 800b5fa:	d417      	bmi.n	800b62c <_malloc_r+0x8c>
 800b5fc:	2b0b      	cmp	r3, #11
 800b5fe:	d903      	bls.n	800b608 <_malloc_r+0x68>
 800b600:	6023      	str	r3, [r4, #0]
 800b602:	441c      	add	r4, r3
 800b604:	6025      	str	r5, [r4, #0]
 800b606:	e004      	b.n	800b612 <_malloc_r+0x72>
 800b608:	6863      	ldr	r3, [r4, #4]
 800b60a:	42a2      	cmp	r2, r4
 800b60c:	bf0c      	ite	eq
 800b60e:	600b      	streq	r3, [r1, #0]
 800b610:	6053      	strne	r3, [r2, #4]
 800b612:	4630      	mov	r0, r6
 800b614:	f000 fe08 	bl	800c228 <__malloc_unlock>
 800b618:	f104 000b 	add.w	r0, r4, #11
 800b61c:	1d23      	adds	r3, r4, #4
 800b61e:	f020 0007 	bic.w	r0, r0, #7
 800b622:	1ac2      	subs	r2, r0, r3
 800b624:	d0cc      	beq.n	800b5c0 <_malloc_r+0x20>
 800b626:	1a1b      	subs	r3, r3, r0
 800b628:	50a3      	str	r3, [r4, r2]
 800b62a:	e7c9      	b.n	800b5c0 <_malloc_r+0x20>
 800b62c:	4622      	mov	r2, r4
 800b62e:	6864      	ldr	r4, [r4, #4]
 800b630:	e7cc      	b.n	800b5cc <_malloc_r+0x2c>
 800b632:	1cc4      	adds	r4, r0, #3
 800b634:	f024 0403 	bic.w	r4, r4, #3
 800b638:	42a0      	cmp	r0, r4
 800b63a:	d0e3      	beq.n	800b604 <_malloc_r+0x64>
 800b63c:	1a21      	subs	r1, r4, r0
 800b63e:	4630      	mov	r0, r6
 800b640:	f000 faf6 	bl	800bc30 <_sbrk_r>
 800b644:	3001      	adds	r0, #1
 800b646:	d1dd      	bne.n	800b604 <_malloc_r+0x64>
 800b648:	e7cf      	b.n	800b5ea <_malloc_r+0x4a>
 800b64a:	bf00      	nop
 800b64c:	20009840 	.word	0x20009840
 800b650:	20009844 	.word	0x20009844

0800b654 <__sfputc_r>:
 800b654:	6893      	ldr	r3, [r2, #8]
 800b656:	3b01      	subs	r3, #1
 800b658:	2b00      	cmp	r3, #0
 800b65a:	b410      	push	{r4}
 800b65c:	6093      	str	r3, [r2, #8]
 800b65e:	da08      	bge.n	800b672 <__sfputc_r+0x1e>
 800b660:	6994      	ldr	r4, [r2, #24]
 800b662:	42a3      	cmp	r3, r4
 800b664:	db01      	blt.n	800b66a <__sfputc_r+0x16>
 800b666:	290a      	cmp	r1, #10
 800b668:	d103      	bne.n	800b672 <__sfputc_r+0x1e>
 800b66a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b66e:	f000 baef 	b.w	800bc50 <__swbuf_r>
 800b672:	6813      	ldr	r3, [r2, #0]
 800b674:	1c58      	adds	r0, r3, #1
 800b676:	6010      	str	r0, [r2, #0]
 800b678:	7019      	strb	r1, [r3, #0]
 800b67a:	4608      	mov	r0, r1
 800b67c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b680:	4770      	bx	lr

0800b682 <__sfputs_r>:
 800b682:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b684:	4606      	mov	r6, r0
 800b686:	460f      	mov	r7, r1
 800b688:	4614      	mov	r4, r2
 800b68a:	18d5      	adds	r5, r2, r3
 800b68c:	42ac      	cmp	r4, r5
 800b68e:	d101      	bne.n	800b694 <__sfputs_r+0x12>
 800b690:	2000      	movs	r0, #0
 800b692:	e007      	b.n	800b6a4 <__sfputs_r+0x22>
 800b694:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b698:	463a      	mov	r2, r7
 800b69a:	4630      	mov	r0, r6
 800b69c:	f7ff ffda 	bl	800b654 <__sfputc_r>
 800b6a0:	1c43      	adds	r3, r0, #1
 800b6a2:	d1f3      	bne.n	800b68c <__sfputs_r+0xa>
 800b6a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b6a8 <_vfiprintf_r>:
 800b6a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6ac:	460d      	mov	r5, r1
 800b6ae:	b09d      	sub	sp, #116	; 0x74
 800b6b0:	4614      	mov	r4, r2
 800b6b2:	4698      	mov	r8, r3
 800b6b4:	4606      	mov	r6, r0
 800b6b6:	b118      	cbz	r0, 800b6c0 <_vfiprintf_r+0x18>
 800b6b8:	6983      	ldr	r3, [r0, #24]
 800b6ba:	b90b      	cbnz	r3, 800b6c0 <_vfiprintf_r+0x18>
 800b6bc:	f000 fcaa 	bl	800c014 <__sinit>
 800b6c0:	4b89      	ldr	r3, [pc, #548]	; (800b8e8 <_vfiprintf_r+0x240>)
 800b6c2:	429d      	cmp	r5, r3
 800b6c4:	d11b      	bne.n	800b6fe <_vfiprintf_r+0x56>
 800b6c6:	6875      	ldr	r5, [r6, #4]
 800b6c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b6ca:	07d9      	lsls	r1, r3, #31
 800b6cc:	d405      	bmi.n	800b6da <_vfiprintf_r+0x32>
 800b6ce:	89ab      	ldrh	r3, [r5, #12]
 800b6d0:	059a      	lsls	r2, r3, #22
 800b6d2:	d402      	bmi.n	800b6da <_vfiprintf_r+0x32>
 800b6d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b6d6:	f000 fd3b 	bl	800c150 <__retarget_lock_acquire_recursive>
 800b6da:	89ab      	ldrh	r3, [r5, #12]
 800b6dc:	071b      	lsls	r3, r3, #28
 800b6de:	d501      	bpl.n	800b6e4 <_vfiprintf_r+0x3c>
 800b6e0:	692b      	ldr	r3, [r5, #16]
 800b6e2:	b9eb      	cbnz	r3, 800b720 <_vfiprintf_r+0x78>
 800b6e4:	4629      	mov	r1, r5
 800b6e6:	4630      	mov	r0, r6
 800b6e8:	f000 fb04 	bl	800bcf4 <__swsetup_r>
 800b6ec:	b1c0      	cbz	r0, 800b720 <_vfiprintf_r+0x78>
 800b6ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b6f0:	07dc      	lsls	r4, r3, #31
 800b6f2:	d50e      	bpl.n	800b712 <_vfiprintf_r+0x6a>
 800b6f4:	f04f 30ff 	mov.w	r0, #4294967295
 800b6f8:	b01d      	add	sp, #116	; 0x74
 800b6fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6fe:	4b7b      	ldr	r3, [pc, #492]	; (800b8ec <_vfiprintf_r+0x244>)
 800b700:	429d      	cmp	r5, r3
 800b702:	d101      	bne.n	800b708 <_vfiprintf_r+0x60>
 800b704:	68b5      	ldr	r5, [r6, #8]
 800b706:	e7df      	b.n	800b6c8 <_vfiprintf_r+0x20>
 800b708:	4b79      	ldr	r3, [pc, #484]	; (800b8f0 <_vfiprintf_r+0x248>)
 800b70a:	429d      	cmp	r5, r3
 800b70c:	bf08      	it	eq
 800b70e:	68f5      	ldreq	r5, [r6, #12]
 800b710:	e7da      	b.n	800b6c8 <_vfiprintf_r+0x20>
 800b712:	89ab      	ldrh	r3, [r5, #12]
 800b714:	0598      	lsls	r0, r3, #22
 800b716:	d4ed      	bmi.n	800b6f4 <_vfiprintf_r+0x4c>
 800b718:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b71a:	f000 fd1a 	bl	800c152 <__retarget_lock_release_recursive>
 800b71e:	e7e9      	b.n	800b6f4 <_vfiprintf_r+0x4c>
 800b720:	2300      	movs	r3, #0
 800b722:	9309      	str	r3, [sp, #36]	; 0x24
 800b724:	2320      	movs	r3, #32
 800b726:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b72a:	f8cd 800c 	str.w	r8, [sp, #12]
 800b72e:	2330      	movs	r3, #48	; 0x30
 800b730:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b8f4 <_vfiprintf_r+0x24c>
 800b734:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b738:	f04f 0901 	mov.w	r9, #1
 800b73c:	4623      	mov	r3, r4
 800b73e:	469a      	mov	sl, r3
 800b740:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b744:	b10a      	cbz	r2, 800b74a <_vfiprintf_r+0xa2>
 800b746:	2a25      	cmp	r2, #37	; 0x25
 800b748:	d1f9      	bne.n	800b73e <_vfiprintf_r+0x96>
 800b74a:	ebba 0b04 	subs.w	fp, sl, r4
 800b74e:	d00b      	beq.n	800b768 <_vfiprintf_r+0xc0>
 800b750:	465b      	mov	r3, fp
 800b752:	4622      	mov	r2, r4
 800b754:	4629      	mov	r1, r5
 800b756:	4630      	mov	r0, r6
 800b758:	f7ff ff93 	bl	800b682 <__sfputs_r>
 800b75c:	3001      	adds	r0, #1
 800b75e:	f000 80aa 	beq.w	800b8b6 <_vfiprintf_r+0x20e>
 800b762:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b764:	445a      	add	r2, fp
 800b766:	9209      	str	r2, [sp, #36]	; 0x24
 800b768:	f89a 3000 	ldrb.w	r3, [sl]
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	f000 80a2 	beq.w	800b8b6 <_vfiprintf_r+0x20e>
 800b772:	2300      	movs	r3, #0
 800b774:	f04f 32ff 	mov.w	r2, #4294967295
 800b778:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b77c:	f10a 0a01 	add.w	sl, sl, #1
 800b780:	9304      	str	r3, [sp, #16]
 800b782:	9307      	str	r3, [sp, #28]
 800b784:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b788:	931a      	str	r3, [sp, #104]	; 0x68
 800b78a:	4654      	mov	r4, sl
 800b78c:	2205      	movs	r2, #5
 800b78e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b792:	4858      	ldr	r0, [pc, #352]	; (800b8f4 <_vfiprintf_r+0x24c>)
 800b794:	f7f4 fd2c 	bl	80001f0 <memchr>
 800b798:	9a04      	ldr	r2, [sp, #16]
 800b79a:	b9d8      	cbnz	r0, 800b7d4 <_vfiprintf_r+0x12c>
 800b79c:	06d1      	lsls	r1, r2, #27
 800b79e:	bf44      	itt	mi
 800b7a0:	2320      	movmi	r3, #32
 800b7a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b7a6:	0713      	lsls	r3, r2, #28
 800b7a8:	bf44      	itt	mi
 800b7aa:	232b      	movmi	r3, #43	; 0x2b
 800b7ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b7b0:	f89a 3000 	ldrb.w	r3, [sl]
 800b7b4:	2b2a      	cmp	r3, #42	; 0x2a
 800b7b6:	d015      	beq.n	800b7e4 <_vfiprintf_r+0x13c>
 800b7b8:	9a07      	ldr	r2, [sp, #28]
 800b7ba:	4654      	mov	r4, sl
 800b7bc:	2000      	movs	r0, #0
 800b7be:	f04f 0c0a 	mov.w	ip, #10
 800b7c2:	4621      	mov	r1, r4
 800b7c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b7c8:	3b30      	subs	r3, #48	; 0x30
 800b7ca:	2b09      	cmp	r3, #9
 800b7cc:	d94e      	bls.n	800b86c <_vfiprintf_r+0x1c4>
 800b7ce:	b1b0      	cbz	r0, 800b7fe <_vfiprintf_r+0x156>
 800b7d0:	9207      	str	r2, [sp, #28]
 800b7d2:	e014      	b.n	800b7fe <_vfiprintf_r+0x156>
 800b7d4:	eba0 0308 	sub.w	r3, r0, r8
 800b7d8:	fa09 f303 	lsl.w	r3, r9, r3
 800b7dc:	4313      	orrs	r3, r2
 800b7de:	9304      	str	r3, [sp, #16]
 800b7e0:	46a2      	mov	sl, r4
 800b7e2:	e7d2      	b.n	800b78a <_vfiprintf_r+0xe2>
 800b7e4:	9b03      	ldr	r3, [sp, #12]
 800b7e6:	1d19      	adds	r1, r3, #4
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	9103      	str	r1, [sp, #12]
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	bfbb      	ittet	lt
 800b7f0:	425b      	neglt	r3, r3
 800b7f2:	f042 0202 	orrlt.w	r2, r2, #2
 800b7f6:	9307      	strge	r3, [sp, #28]
 800b7f8:	9307      	strlt	r3, [sp, #28]
 800b7fa:	bfb8      	it	lt
 800b7fc:	9204      	strlt	r2, [sp, #16]
 800b7fe:	7823      	ldrb	r3, [r4, #0]
 800b800:	2b2e      	cmp	r3, #46	; 0x2e
 800b802:	d10c      	bne.n	800b81e <_vfiprintf_r+0x176>
 800b804:	7863      	ldrb	r3, [r4, #1]
 800b806:	2b2a      	cmp	r3, #42	; 0x2a
 800b808:	d135      	bne.n	800b876 <_vfiprintf_r+0x1ce>
 800b80a:	9b03      	ldr	r3, [sp, #12]
 800b80c:	1d1a      	adds	r2, r3, #4
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	9203      	str	r2, [sp, #12]
 800b812:	2b00      	cmp	r3, #0
 800b814:	bfb8      	it	lt
 800b816:	f04f 33ff 	movlt.w	r3, #4294967295
 800b81a:	3402      	adds	r4, #2
 800b81c:	9305      	str	r3, [sp, #20]
 800b81e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b904 <_vfiprintf_r+0x25c>
 800b822:	7821      	ldrb	r1, [r4, #0]
 800b824:	2203      	movs	r2, #3
 800b826:	4650      	mov	r0, sl
 800b828:	f7f4 fce2 	bl	80001f0 <memchr>
 800b82c:	b140      	cbz	r0, 800b840 <_vfiprintf_r+0x198>
 800b82e:	2340      	movs	r3, #64	; 0x40
 800b830:	eba0 000a 	sub.w	r0, r0, sl
 800b834:	fa03 f000 	lsl.w	r0, r3, r0
 800b838:	9b04      	ldr	r3, [sp, #16]
 800b83a:	4303      	orrs	r3, r0
 800b83c:	3401      	adds	r4, #1
 800b83e:	9304      	str	r3, [sp, #16]
 800b840:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b844:	482c      	ldr	r0, [pc, #176]	; (800b8f8 <_vfiprintf_r+0x250>)
 800b846:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b84a:	2206      	movs	r2, #6
 800b84c:	f7f4 fcd0 	bl	80001f0 <memchr>
 800b850:	2800      	cmp	r0, #0
 800b852:	d03f      	beq.n	800b8d4 <_vfiprintf_r+0x22c>
 800b854:	4b29      	ldr	r3, [pc, #164]	; (800b8fc <_vfiprintf_r+0x254>)
 800b856:	bb1b      	cbnz	r3, 800b8a0 <_vfiprintf_r+0x1f8>
 800b858:	9b03      	ldr	r3, [sp, #12]
 800b85a:	3307      	adds	r3, #7
 800b85c:	f023 0307 	bic.w	r3, r3, #7
 800b860:	3308      	adds	r3, #8
 800b862:	9303      	str	r3, [sp, #12]
 800b864:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b866:	443b      	add	r3, r7
 800b868:	9309      	str	r3, [sp, #36]	; 0x24
 800b86a:	e767      	b.n	800b73c <_vfiprintf_r+0x94>
 800b86c:	fb0c 3202 	mla	r2, ip, r2, r3
 800b870:	460c      	mov	r4, r1
 800b872:	2001      	movs	r0, #1
 800b874:	e7a5      	b.n	800b7c2 <_vfiprintf_r+0x11a>
 800b876:	2300      	movs	r3, #0
 800b878:	3401      	adds	r4, #1
 800b87a:	9305      	str	r3, [sp, #20]
 800b87c:	4619      	mov	r1, r3
 800b87e:	f04f 0c0a 	mov.w	ip, #10
 800b882:	4620      	mov	r0, r4
 800b884:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b888:	3a30      	subs	r2, #48	; 0x30
 800b88a:	2a09      	cmp	r2, #9
 800b88c:	d903      	bls.n	800b896 <_vfiprintf_r+0x1ee>
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d0c5      	beq.n	800b81e <_vfiprintf_r+0x176>
 800b892:	9105      	str	r1, [sp, #20]
 800b894:	e7c3      	b.n	800b81e <_vfiprintf_r+0x176>
 800b896:	fb0c 2101 	mla	r1, ip, r1, r2
 800b89a:	4604      	mov	r4, r0
 800b89c:	2301      	movs	r3, #1
 800b89e:	e7f0      	b.n	800b882 <_vfiprintf_r+0x1da>
 800b8a0:	ab03      	add	r3, sp, #12
 800b8a2:	9300      	str	r3, [sp, #0]
 800b8a4:	462a      	mov	r2, r5
 800b8a6:	4b16      	ldr	r3, [pc, #88]	; (800b900 <_vfiprintf_r+0x258>)
 800b8a8:	a904      	add	r1, sp, #16
 800b8aa:	4630      	mov	r0, r6
 800b8ac:	f3af 8000 	nop.w
 800b8b0:	4607      	mov	r7, r0
 800b8b2:	1c78      	adds	r0, r7, #1
 800b8b4:	d1d6      	bne.n	800b864 <_vfiprintf_r+0x1bc>
 800b8b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b8b8:	07d9      	lsls	r1, r3, #31
 800b8ba:	d405      	bmi.n	800b8c8 <_vfiprintf_r+0x220>
 800b8bc:	89ab      	ldrh	r3, [r5, #12]
 800b8be:	059a      	lsls	r2, r3, #22
 800b8c0:	d402      	bmi.n	800b8c8 <_vfiprintf_r+0x220>
 800b8c2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b8c4:	f000 fc45 	bl	800c152 <__retarget_lock_release_recursive>
 800b8c8:	89ab      	ldrh	r3, [r5, #12]
 800b8ca:	065b      	lsls	r3, r3, #25
 800b8cc:	f53f af12 	bmi.w	800b6f4 <_vfiprintf_r+0x4c>
 800b8d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b8d2:	e711      	b.n	800b6f8 <_vfiprintf_r+0x50>
 800b8d4:	ab03      	add	r3, sp, #12
 800b8d6:	9300      	str	r3, [sp, #0]
 800b8d8:	462a      	mov	r2, r5
 800b8da:	4b09      	ldr	r3, [pc, #36]	; (800b900 <_vfiprintf_r+0x258>)
 800b8dc:	a904      	add	r1, sp, #16
 800b8de:	4630      	mov	r0, r6
 800b8e0:	f000 f880 	bl	800b9e4 <_printf_i>
 800b8e4:	e7e4      	b.n	800b8b0 <_vfiprintf_r+0x208>
 800b8e6:	bf00      	nop
 800b8e8:	0800c7c8 	.word	0x0800c7c8
 800b8ec:	0800c7e8 	.word	0x0800c7e8
 800b8f0:	0800c7a8 	.word	0x0800c7a8
 800b8f4:	0800c772 	.word	0x0800c772
 800b8f8:	0800c77c 	.word	0x0800c77c
 800b8fc:	00000000 	.word	0x00000000
 800b900:	0800b683 	.word	0x0800b683
 800b904:	0800c778 	.word	0x0800c778

0800b908 <_printf_common>:
 800b908:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b90c:	4616      	mov	r6, r2
 800b90e:	4699      	mov	r9, r3
 800b910:	688a      	ldr	r2, [r1, #8]
 800b912:	690b      	ldr	r3, [r1, #16]
 800b914:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b918:	4293      	cmp	r3, r2
 800b91a:	bfb8      	it	lt
 800b91c:	4613      	movlt	r3, r2
 800b91e:	6033      	str	r3, [r6, #0]
 800b920:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b924:	4607      	mov	r7, r0
 800b926:	460c      	mov	r4, r1
 800b928:	b10a      	cbz	r2, 800b92e <_printf_common+0x26>
 800b92a:	3301      	adds	r3, #1
 800b92c:	6033      	str	r3, [r6, #0]
 800b92e:	6823      	ldr	r3, [r4, #0]
 800b930:	0699      	lsls	r1, r3, #26
 800b932:	bf42      	ittt	mi
 800b934:	6833      	ldrmi	r3, [r6, #0]
 800b936:	3302      	addmi	r3, #2
 800b938:	6033      	strmi	r3, [r6, #0]
 800b93a:	6825      	ldr	r5, [r4, #0]
 800b93c:	f015 0506 	ands.w	r5, r5, #6
 800b940:	d106      	bne.n	800b950 <_printf_common+0x48>
 800b942:	f104 0a19 	add.w	sl, r4, #25
 800b946:	68e3      	ldr	r3, [r4, #12]
 800b948:	6832      	ldr	r2, [r6, #0]
 800b94a:	1a9b      	subs	r3, r3, r2
 800b94c:	42ab      	cmp	r3, r5
 800b94e:	dc26      	bgt.n	800b99e <_printf_common+0x96>
 800b950:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b954:	1e13      	subs	r3, r2, #0
 800b956:	6822      	ldr	r2, [r4, #0]
 800b958:	bf18      	it	ne
 800b95a:	2301      	movne	r3, #1
 800b95c:	0692      	lsls	r2, r2, #26
 800b95e:	d42b      	bmi.n	800b9b8 <_printf_common+0xb0>
 800b960:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b964:	4649      	mov	r1, r9
 800b966:	4638      	mov	r0, r7
 800b968:	47c0      	blx	r8
 800b96a:	3001      	adds	r0, #1
 800b96c:	d01e      	beq.n	800b9ac <_printf_common+0xa4>
 800b96e:	6823      	ldr	r3, [r4, #0]
 800b970:	68e5      	ldr	r5, [r4, #12]
 800b972:	6832      	ldr	r2, [r6, #0]
 800b974:	f003 0306 	and.w	r3, r3, #6
 800b978:	2b04      	cmp	r3, #4
 800b97a:	bf08      	it	eq
 800b97c:	1aad      	subeq	r5, r5, r2
 800b97e:	68a3      	ldr	r3, [r4, #8]
 800b980:	6922      	ldr	r2, [r4, #16]
 800b982:	bf0c      	ite	eq
 800b984:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b988:	2500      	movne	r5, #0
 800b98a:	4293      	cmp	r3, r2
 800b98c:	bfc4      	itt	gt
 800b98e:	1a9b      	subgt	r3, r3, r2
 800b990:	18ed      	addgt	r5, r5, r3
 800b992:	2600      	movs	r6, #0
 800b994:	341a      	adds	r4, #26
 800b996:	42b5      	cmp	r5, r6
 800b998:	d11a      	bne.n	800b9d0 <_printf_common+0xc8>
 800b99a:	2000      	movs	r0, #0
 800b99c:	e008      	b.n	800b9b0 <_printf_common+0xa8>
 800b99e:	2301      	movs	r3, #1
 800b9a0:	4652      	mov	r2, sl
 800b9a2:	4649      	mov	r1, r9
 800b9a4:	4638      	mov	r0, r7
 800b9a6:	47c0      	blx	r8
 800b9a8:	3001      	adds	r0, #1
 800b9aa:	d103      	bne.n	800b9b4 <_printf_common+0xac>
 800b9ac:	f04f 30ff 	mov.w	r0, #4294967295
 800b9b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9b4:	3501      	adds	r5, #1
 800b9b6:	e7c6      	b.n	800b946 <_printf_common+0x3e>
 800b9b8:	18e1      	adds	r1, r4, r3
 800b9ba:	1c5a      	adds	r2, r3, #1
 800b9bc:	2030      	movs	r0, #48	; 0x30
 800b9be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b9c2:	4422      	add	r2, r4
 800b9c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b9c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b9cc:	3302      	adds	r3, #2
 800b9ce:	e7c7      	b.n	800b960 <_printf_common+0x58>
 800b9d0:	2301      	movs	r3, #1
 800b9d2:	4622      	mov	r2, r4
 800b9d4:	4649      	mov	r1, r9
 800b9d6:	4638      	mov	r0, r7
 800b9d8:	47c0      	blx	r8
 800b9da:	3001      	adds	r0, #1
 800b9dc:	d0e6      	beq.n	800b9ac <_printf_common+0xa4>
 800b9de:	3601      	adds	r6, #1
 800b9e0:	e7d9      	b.n	800b996 <_printf_common+0x8e>
	...

0800b9e4 <_printf_i>:
 800b9e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b9e8:	460c      	mov	r4, r1
 800b9ea:	4691      	mov	r9, r2
 800b9ec:	7e27      	ldrb	r7, [r4, #24]
 800b9ee:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b9f0:	2f78      	cmp	r7, #120	; 0x78
 800b9f2:	4680      	mov	r8, r0
 800b9f4:	469a      	mov	sl, r3
 800b9f6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b9fa:	d807      	bhi.n	800ba0c <_printf_i+0x28>
 800b9fc:	2f62      	cmp	r7, #98	; 0x62
 800b9fe:	d80a      	bhi.n	800ba16 <_printf_i+0x32>
 800ba00:	2f00      	cmp	r7, #0
 800ba02:	f000 80d8 	beq.w	800bbb6 <_printf_i+0x1d2>
 800ba06:	2f58      	cmp	r7, #88	; 0x58
 800ba08:	f000 80a3 	beq.w	800bb52 <_printf_i+0x16e>
 800ba0c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ba10:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ba14:	e03a      	b.n	800ba8c <_printf_i+0xa8>
 800ba16:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ba1a:	2b15      	cmp	r3, #21
 800ba1c:	d8f6      	bhi.n	800ba0c <_printf_i+0x28>
 800ba1e:	a001      	add	r0, pc, #4	; (adr r0, 800ba24 <_printf_i+0x40>)
 800ba20:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800ba24:	0800ba7d 	.word	0x0800ba7d
 800ba28:	0800ba91 	.word	0x0800ba91
 800ba2c:	0800ba0d 	.word	0x0800ba0d
 800ba30:	0800ba0d 	.word	0x0800ba0d
 800ba34:	0800ba0d 	.word	0x0800ba0d
 800ba38:	0800ba0d 	.word	0x0800ba0d
 800ba3c:	0800ba91 	.word	0x0800ba91
 800ba40:	0800ba0d 	.word	0x0800ba0d
 800ba44:	0800ba0d 	.word	0x0800ba0d
 800ba48:	0800ba0d 	.word	0x0800ba0d
 800ba4c:	0800ba0d 	.word	0x0800ba0d
 800ba50:	0800bb9d 	.word	0x0800bb9d
 800ba54:	0800bac1 	.word	0x0800bac1
 800ba58:	0800bb7f 	.word	0x0800bb7f
 800ba5c:	0800ba0d 	.word	0x0800ba0d
 800ba60:	0800ba0d 	.word	0x0800ba0d
 800ba64:	0800bbbf 	.word	0x0800bbbf
 800ba68:	0800ba0d 	.word	0x0800ba0d
 800ba6c:	0800bac1 	.word	0x0800bac1
 800ba70:	0800ba0d 	.word	0x0800ba0d
 800ba74:	0800ba0d 	.word	0x0800ba0d
 800ba78:	0800bb87 	.word	0x0800bb87
 800ba7c:	680b      	ldr	r3, [r1, #0]
 800ba7e:	1d1a      	adds	r2, r3, #4
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	600a      	str	r2, [r1, #0]
 800ba84:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ba88:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ba8c:	2301      	movs	r3, #1
 800ba8e:	e0a3      	b.n	800bbd8 <_printf_i+0x1f4>
 800ba90:	6825      	ldr	r5, [r4, #0]
 800ba92:	6808      	ldr	r0, [r1, #0]
 800ba94:	062e      	lsls	r6, r5, #24
 800ba96:	f100 0304 	add.w	r3, r0, #4
 800ba9a:	d50a      	bpl.n	800bab2 <_printf_i+0xce>
 800ba9c:	6805      	ldr	r5, [r0, #0]
 800ba9e:	600b      	str	r3, [r1, #0]
 800baa0:	2d00      	cmp	r5, #0
 800baa2:	da03      	bge.n	800baac <_printf_i+0xc8>
 800baa4:	232d      	movs	r3, #45	; 0x2d
 800baa6:	426d      	negs	r5, r5
 800baa8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800baac:	485e      	ldr	r0, [pc, #376]	; (800bc28 <_printf_i+0x244>)
 800baae:	230a      	movs	r3, #10
 800bab0:	e019      	b.n	800bae6 <_printf_i+0x102>
 800bab2:	f015 0f40 	tst.w	r5, #64	; 0x40
 800bab6:	6805      	ldr	r5, [r0, #0]
 800bab8:	600b      	str	r3, [r1, #0]
 800baba:	bf18      	it	ne
 800babc:	b22d      	sxthne	r5, r5
 800babe:	e7ef      	b.n	800baa0 <_printf_i+0xbc>
 800bac0:	680b      	ldr	r3, [r1, #0]
 800bac2:	6825      	ldr	r5, [r4, #0]
 800bac4:	1d18      	adds	r0, r3, #4
 800bac6:	6008      	str	r0, [r1, #0]
 800bac8:	0628      	lsls	r0, r5, #24
 800baca:	d501      	bpl.n	800bad0 <_printf_i+0xec>
 800bacc:	681d      	ldr	r5, [r3, #0]
 800bace:	e002      	b.n	800bad6 <_printf_i+0xf2>
 800bad0:	0669      	lsls	r1, r5, #25
 800bad2:	d5fb      	bpl.n	800bacc <_printf_i+0xe8>
 800bad4:	881d      	ldrh	r5, [r3, #0]
 800bad6:	4854      	ldr	r0, [pc, #336]	; (800bc28 <_printf_i+0x244>)
 800bad8:	2f6f      	cmp	r7, #111	; 0x6f
 800bada:	bf0c      	ite	eq
 800badc:	2308      	moveq	r3, #8
 800bade:	230a      	movne	r3, #10
 800bae0:	2100      	movs	r1, #0
 800bae2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bae6:	6866      	ldr	r6, [r4, #4]
 800bae8:	60a6      	str	r6, [r4, #8]
 800baea:	2e00      	cmp	r6, #0
 800baec:	bfa2      	ittt	ge
 800baee:	6821      	ldrge	r1, [r4, #0]
 800baf0:	f021 0104 	bicge.w	r1, r1, #4
 800baf4:	6021      	strge	r1, [r4, #0]
 800baf6:	b90d      	cbnz	r5, 800bafc <_printf_i+0x118>
 800baf8:	2e00      	cmp	r6, #0
 800bafa:	d04d      	beq.n	800bb98 <_printf_i+0x1b4>
 800bafc:	4616      	mov	r6, r2
 800bafe:	fbb5 f1f3 	udiv	r1, r5, r3
 800bb02:	fb03 5711 	mls	r7, r3, r1, r5
 800bb06:	5dc7      	ldrb	r7, [r0, r7]
 800bb08:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bb0c:	462f      	mov	r7, r5
 800bb0e:	42bb      	cmp	r3, r7
 800bb10:	460d      	mov	r5, r1
 800bb12:	d9f4      	bls.n	800bafe <_printf_i+0x11a>
 800bb14:	2b08      	cmp	r3, #8
 800bb16:	d10b      	bne.n	800bb30 <_printf_i+0x14c>
 800bb18:	6823      	ldr	r3, [r4, #0]
 800bb1a:	07df      	lsls	r7, r3, #31
 800bb1c:	d508      	bpl.n	800bb30 <_printf_i+0x14c>
 800bb1e:	6923      	ldr	r3, [r4, #16]
 800bb20:	6861      	ldr	r1, [r4, #4]
 800bb22:	4299      	cmp	r1, r3
 800bb24:	bfde      	ittt	le
 800bb26:	2330      	movle	r3, #48	; 0x30
 800bb28:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bb2c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800bb30:	1b92      	subs	r2, r2, r6
 800bb32:	6122      	str	r2, [r4, #16]
 800bb34:	f8cd a000 	str.w	sl, [sp]
 800bb38:	464b      	mov	r3, r9
 800bb3a:	aa03      	add	r2, sp, #12
 800bb3c:	4621      	mov	r1, r4
 800bb3e:	4640      	mov	r0, r8
 800bb40:	f7ff fee2 	bl	800b908 <_printf_common>
 800bb44:	3001      	adds	r0, #1
 800bb46:	d14c      	bne.n	800bbe2 <_printf_i+0x1fe>
 800bb48:	f04f 30ff 	mov.w	r0, #4294967295
 800bb4c:	b004      	add	sp, #16
 800bb4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb52:	4835      	ldr	r0, [pc, #212]	; (800bc28 <_printf_i+0x244>)
 800bb54:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800bb58:	6823      	ldr	r3, [r4, #0]
 800bb5a:	680e      	ldr	r6, [r1, #0]
 800bb5c:	061f      	lsls	r7, r3, #24
 800bb5e:	f856 5b04 	ldr.w	r5, [r6], #4
 800bb62:	600e      	str	r6, [r1, #0]
 800bb64:	d514      	bpl.n	800bb90 <_printf_i+0x1ac>
 800bb66:	07d9      	lsls	r1, r3, #31
 800bb68:	bf44      	itt	mi
 800bb6a:	f043 0320 	orrmi.w	r3, r3, #32
 800bb6e:	6023      	strmi	r3, [r4, #0]
 800bb70:	b91d      	cbnz	r5, 800bb7a <_printf_i+0x196>
 800bb72:	6823      	ldr	r3, [r4, #0]
 800bb74:	f023 0320 	bic.w	r3, r3, #32
 800bb78:	6023      	str	r3, [r4, #0]
 800bb7a:	2310      	movs	r3, #16
 800bb7c:	e7b0      	b.n	800bae0 <_printf_i+0xfc>
 800bb7e:	6823      	ldr	r3, [r4, #0]
 800bb80:	f043 0320 	orr.w	r3, r3, #32
 800bb84:	6023      	str	r3, [r4, #0]
 800bb86:	2378      	movs	r3, #120	; 0x78
 800bb88:	4828      	ldr	r0, [pc, #160]	; (800bc2c <_printf_i+0x248>)
 800bb8a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bb8e:	e7e3      	b.n	800bb58 <_printf_i+0x174>
 800bb90:	065e      	lsls	r6, r3, #25
 800bb92:	bf48      	it	mi
 800bb94:	b2ad      	uxthmi	r5, r5
 800bb96:	e7e6      	b.n	800bb66 <_printf_i+0x182>
 800bb98:	4616      	mov	r6, r2
 800bb9a:	e7bb      	b.n	800bb14 <_printf_i+0x130>
 800bb9c:	680b      	ldr	r3, [r1, #0]
 800bb9e:	6826      	ldr	r6, [r4, #0]
 800bba0:	6960      	ldr	r0, [r4, #20]
 800bba2:	1d1d      	adds	r5, r3, #4
 800bba4:	600d      	str	r5, [r1, #0]
 800bba6:	0635      	lsls	r5, r6, #24
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	d501      	bpl.n	800bbb0 <_printf_i+0x1cc>
 800bbac:	6018      	str	r0, [r3, #0]
 800bbae:	e002      	b.n	800bbb6 <_printf_i+0x1d2>
 800bbb0:	0671      	lsls	r1, r6, #25
 800bbb2:	d5fb      	bpl.n	800bbac <_printf_i+0x1c8>
 800bbb4:	8018      	strh	r0, [r3, #0]
 800bbb6:	2300      	movs	r3, #0
 800bbb8:	6123      	str	r3, [r4, #16]
 800bbba:	4616      	mov	r6, r2
 800bbbc:	e7ba      	b.n	800bb34 <_printf_i+0x150>
 800bbbe:	680b      	ldr	r3, [r1, #0]
 800bbc0:	1d1a      	adds	r2, r3, #4
 800bbc2:	600a      	str	r2, [r1, #0]
 800bbc4:	681e      	ldr	r6, [r3, #0]
 800bbc6:	6862      	ldr	r2, [r4, #4]
 800bbc8:	2100      	movs	r1, #0
 800bbca:	4630      	mov	r0, r6
 800bbcc:	f7f4 fb10 	bl	80001f0 <memchr>
 800bbd0:	b108      	cbz	r0, 800bbd6 <_printf_i+0x1f2>
 800bbd2:	1b80      	subs	r0, r0, r6
 800bbd4:	6060      	str	r0, [r4, #4]
 800bbd6:	6863      	ldr	r3, [r4, #4]
 800bbd8:	6123      	str	r3, [r4, #16]
 800bbda:	2300      	movs	r3, #0
 800bbdc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bbe0:	e7a8      	b.n	800bb34 <_printf_i+0x150>
 800bbe2:	6923      	ldr	r3, [r4, #16]
 800bbe4:	4632      	mov	r2, r6
 800bbe6:	4649      	mov	r1, r9
 800bbe8:	4640      	mov	r0, r8
 800bbea:	47d0      	blx	sl
 800bbec:	3001      	adds	r0, #1
 800bbee:	d0ab      	beq.n	800bb48 <_printf_i+0x164>
 800bbf0:	6823      	ldr	r3, [r4, #0]
 800bbf2:	079b      	lsls	r3, r3, #30
 800bbf4:	d413      	bmi.n	800bc1e <_printf_i+0x23a>
 800bbf6:	68e0      	ldr	r0, [r4, #12]
 800bbf8:	9b03      	ldr	r3, [sp, #12]
 800bbfa:	4298      	cmp	r0, r3
 800bbfc:	bfb8      	it	lt
 800bbfe:	4618      	movlt	r0, r3
 800bc00:	e7a4      	b.n	800bb4c <_printf_i+0x168>
 800bc02:	2301      	movs	r3, #1
 800bc04:	4632      	mov	r2, r6
 800bc06:	4649      	mov	r1, r9
 800bc08:	4640      	mov	r0, r8
 800bc0a:	47d0      	blx	sl
 800bc0c:	3001      	adds	r0, #1
 800bc0e:	d09b      	beq.n	800bb48 <_printf_i+0x164>
 800bc10:	3501      	adds	r5, #1
 800bc12:	68e3      	ldr	r3, [r4, #12]
 800bc14:	9903      	ldr	r1, [sp, #12]
 800bc16:	1a5b      	subs	r3, r3, r1
 800bc18:	42ab      	cmp	r3, r5
 800bc1a:	dcf2      	bgt.n	800bc02 <_printf_i+0x21e>
 800bc1c:	e7eb      	b.n	800bbf6 <_printf_i+0x212>
 800bc1e:	2500      	movs	r5, #0
 800bc20:	f104 0619 	add.w	r6, r4, #25
 800bc24:	e7f5      	b.n	800bc12 <_printf_i+0x22e>
 800bc26:	bf00      	nop
 800bc28:	0800c783 	.word	0x0800c783
 800bc2c:	0800c794 	.word	0x0800c794

0800bc30 <_sbrk_r>:
 800bc30:	b538      	push	{r3, r4, r5, lr}
 800bc32:	4d06      	ldr	r5, [pc, #24]	; (800bc4c <_sbrk_r+0x1c>)
 800bc34:	2300      	movs	r3, #0
 800bc36:	4604      	mov	r4, r0
 800bc38:	4608      	mov	r0, r1
 800bc3a:	602b      	str	r3, [r5, #0]
 800bc3c:	f000 fc9a 	bl	800c574 <_sbrk>
 800bc40:	1c43      	adds	r3, r0, #1
 800bc42:	d102      	bne.n	800bc4a <_sbrk_r+0x1a>
 800bc44:	682b      	ldr	r3, [r5, #0]
 800bc46:	b103      	cbz	r3, 800bc4a <_sbrk_r+0x1a>
 800bc48:	6023      	str	r3, [r4, #0]
 800bc4a:	bd38      	pop	{r3, r4, r5, pc}
 800bc4c:	20009f1c 	.word	0x20009f1c

0800bc50 <__swbuf_r>:
 800bc50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc52:	460e      	mov	r6, r1
 800bc54:	4614      	mov	r4, r2
 800bc56:	4605      	mov	r5, r0
 800bc58:	b118      	cbz	r0, 800bc62 <__swbuf_r+0x12>
 800bc5a:	6983      	ldr	r3, [r0, #24]
 800bc5c:	b90b      	cbnz	r3, 800bc62 <__swbuf_r+0x12>
 800bc5e:	f000 f9d9 	bl	800c014 <__sinit>
 800bc62:	4b21      	ldr	r3, [pc, #132]	; (800bce8 <__swbuf_r+0x98>)
 800bc64:	429c      	cmp	r4, r3
 800bc66:	d12b      	bne.n	800bcc0 <__swbuf_r+0x70>
 800bc68:	686c      	ldr	r4, [r5, #4]
 800bc6a:	69a3      	ldr	r3, [r4, #24]
 800bc6c:	60a3      	str	r3, [r4, #8]
 800bc6e:	89a3      	ldrh	r3, [r4, #12]
 800bc70:	071a      	lsls	r2, r3, #28
 800bc72:	d52f      	bpl.n	800bcd4 <__swbuf_r+0x84>
 800bc74:	6923      	ldr	r3, [r4, #16]
 800bc76:	b36b      	cbz	r3, 800bcd4 <__swbuf_r+0x84>
 800bc78:	6923      	ldr	r3, [r4, #16]
 800bc7a:	6820      	ldr	r0, [r4, #0]
 800bc7c:	1ac0      	subs	r0, r0, r3
 800bc7e:	6963      	ldr	r3, [r4, #20]
 800bc80:	b2f6      	uxtb	r6, r6
 800bc82:	4283      	cmp	r3, r0
 800bc84:	4637      	mov	r7, r6
 800bc86:	dc04      	bgt.n	800bc92 <__swbuf_r+0x42>
 800bc88:	4621      	mov	r1, r4
 800bc8a:	4628      	mov	r0, r5
 800bc8c:	f000 f92e 	bl	800beec <_fflush_r>
 800bc90:	bb30      	cbnz	r0, 800bce0 <__swbuf_r+0x90>
 800bc92:	68a3      	ldr	r3, [r4, #8]
 800bc94:	3b01      	subs	r3, #1
 800bc96:	60a3      	str	r3, [r4, #8]
 800bc98:	6823      	ldr	r3, [r4, #0]
 800bc9a:	1c5a      	adds	r2, r3, #1
 800bc9c:	6022      	str	r2, [r4, #0]
 800bc9e:	701e      	strb	r6, [r3, #0]
 800bca0:	6963      	ldr	r3, [r4, #20]
 800bca2:	3001      	adds	r0, #1
 800bca4:	4283      	cmp	r3, r0
 800bca6:	d004      	beq.n	800bcb2 <__swbuf_r+0x62>
 800bca8:	89a3      	ldrh	r3, [r4, #12]
 800bcaa:	07db      	lsls	r3, r3, #31
 800bcac:	d506      	bpl.n	800bcbc <__swbuf_r+0x6c>
 800bcae:	2e0a      	cmp	r6, #10
 800bcb0:	d104      	bne.n	800bcbc <__swbuf_r+0x6c>
 800bcb2:	4621      	mov	r1, r4
 800bcb4:	4628      	mov	r0, r5
 800bcb6:	f000 f919 	bl	800beec <_fflush_r>
 800bcba:	b988      	cbnz	r0, 800bce0 <__swbuf_r+0x90>
 800bcbc:	4638      	mov	r0, r7
 800bcbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bcc0:	4b0a      	ldr	r3, [pc, #40]	; (800bcec <__swbuf_r+0x9c>)
 800bcc2:	429c      	cmp	r4, r3
 800bcc4:	d101      	bne.n	800bcca <__swbuf_r+0x7a>
 800bcc6:	68ac      	ldr	r4, [r5, #8]
 800bcc8:	e7cf      	b.n	800bc6a <__swbuf_r+0x1a>
 800bcca:	4b09      	ldr	r3, [pc, #36]	; (800bcf0 <__swbuf_r+0xa0>)
 800bccc:	429c      	cmp	r4, r3
 800bcce:	bf08      	it	eq
 800bcd0:	68ec      	ldreq	r4, [r5, #12]
 800bcd2:	e7ca      	b.n	800bc6a <__swbuf_r+0x1a>
 800bcd4:	4621      	mov	r1, r4
 800bcd6:	4628      	mov	r0, r5
 800bcd8:	f000 f80c 	bl	800bcf4 <__swsetup_r>
 800bcdc:	2800      	cmp	r0, #0
 800bcde:	d0cb      	beq.n	800bc78 <__swbuf_r+0x28>
 800bce0:	f04f 37ff 	mov.w	r7, #4294967295
 800bce4:	e7ea      	b.n	800bcbc <__swbuf_r+0x6c>
 800bce6:	bf00      	nop
 800bce8:	0800c7c8 	.word	0x0800c7c8
 800bcec:	0800c7e8 	.word	0x0800c7e8
 800bcf0:	0800c7a8 	.word	0x0800c7a8

0800bcf4 <__swsetup_r>:
 800bcf4:	4b32      	ldr	r3, [pc, #200]	; (800bdc0 <__swsetup_r+0xcc>)
 800bcf6:	b570      	push	{r4, r5, r6, lr}
 800bcf8:	681d      	ldr	r5, [r3, #0]
 800bcfa:	4606      	mov	r6, r0
 800bcfc:	460c      	mov	r4, r1
 800bcfe:	b125      	cbz	r5, 800bd0a <__swsetup_r+0x16>
 800bd00:	69ab      	ldr	r3, [r5, #24]
 800bd02:	b913      	cbnz	r3, 800bd0a <__swsetup_r+0x16>
 800bd04:	4628      	mov	r0, r5
 800bd06:	f000 f985 	bl	800c014 <__sinit>
 800bd0a:	4b2e      	ldr	r3, [pc, #184]	; (800bdc4 <__swsetup_r+0xd0>)
 800bd0c:	429c      	cmp	r4, r3
 800bd0e:	d10f      	bne.n	800bd30 <__swsetup_r+0x3c>
 800bd10:	686c      	ldr	r4, [r5, #4]
 800bd12:	89a3      	ldrh	r3, [r4, #12]
 800bd14:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bd18:	0719      	lsls	r1, r3, #28
 800bd1a:	d42c      	bmi.n	800bd76 <__swsetup_r+0x82>
 800bd1c:	06dd      	lsls	r5, r3, #27
 800bd1e:	d411      	bmi.n	800bd44 <__swsetup_r+0x50>
 800bd20:	2309      	movs	r3, #9
 800bd22:	6033      	str	r3, [r6, #0]
 800bd24:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bd28:	81a3      	strh	r3, [r4, #12]
 800bd2a:	f04f 30ff 	mov.w	r0, #4294967295
 800bd2e:	e03e      	b.n	800bdae <__swsetup_r+0xba>
 800bd30:	4b25      	ldr	r3, [pc, #148]	; (800bdc8 <__swsetup_r+0xd4>)
 800bd32:	429c      	cmp	r4, r3
 800bd34:	d101      	bne.n	800bd3a <__swsetup_r+0x46>
 800bd36:	68ac      	ldr	r4, [r5, #8]
 800bd38:	e7eb      	b.n	800bd12 <__swsetup_r+0x1e>
 800bd3a:	4b24      	ldr	r3, [pc, #144]	; (800bdcc <__swsetup_r+0xd8>)
 800bd3c:	429c      	cmp	r4, r3
 800bd3e:	bf08      	it	eq
 800bd40:	68ec      	ldreq	r4, [r5, #12]
 800bd42:	e7e6      	b.n	800bd12 <__swsetup_r+0x1e>
 800bd44:	0758      	lsls	r0, r3, #29
 800bd46:	d512      	bpl.n	800bd6e <__swsetup_r+0x7a>
 800bd48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bd4a:	b141      	cbz	r1, 800bd5e <__swsetup_r+0x6a>
 800bd4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bd50:	4299      	cmp	r1, r3
 800bd52:	d002      	beq.n	800bd5a <__swsetup_r+0x66>
 800bd54:	4630      	mov	r0, r6
 800bd56:	f7ff fbd3 	bl	800b500 <_free_r>
 800bd5a:	2300      	movs	r3, #0
 800bd5c:	6363      	str	r3, [r4, #52]	; 0x34
 800bd5e:	89a3      	ldrh	r3, [r4, #12]
 800bd60:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bd64:	81a3      	strh	r3, [r4, #12]
 800bd66:	2300      	movs	r3, #0
 800bd68:	6063      	str	r3, [r4, #4]
 800bd6a:	6923      	ldr	r3, [r4, #16]
 800bd6c:	6023      	str	r3, [r4, #0]
 800bd6e:	89a3      	ldrh	r3, [r4, #12]
 800bd70:	f043 0308 	orr.w	r3, r3, #8
 800bd74:	81a3      	strh	r3, [r4, #12]
 800bd76:	6923      	ldr	r3, [r4, #16]
 800bd78:	b94b      	cbnz	r3, 800bd8e <__swsetup_r+0x9a>
 800bd7a:	89a3      	ldrh	r3, [r4, #12]
 800bd7c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bd80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bd84:	d003      	beq.n	800bd8e <__swsetup_r+0x9a>
 800bd86:	4621      	mov	r1, r4
 800bd88:	4630      	mov	r0, r6
 800bd8a:	f000 fa07 	bl	800c19c <__smakebuf_r>
 800bd8e:	89a0      	ldrh	r0, [r4, #12]
 800bd90:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bd94:	f010 0301 	ands.w	r3, r0, #1
 800bd98:	d00a      	beq.n	800bdb0 <__swsetup_r+0xbc>
 800bd9a:	2300      	movs	r3, #0
 800bd9c:	60a3      	str	r3, [r4, #8]
 800bd9e:	6963      	ldr	r3, [r4, #20]
 800bda0:	425b      	negs	r3, r3
 800bda2:	61a3      	str	r3, [r4, #24]
 800bda4:	6923      	ldr	r3, [r4, #16]
 800bda6:	b943      	cbnz	r3, 800bdba <__swsetup_r+0xc6>
 800bda8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bdac:	d1ba      	bne.n	800bd24 <__swsetup_r+0x30>
 800bdae:	bd70      	pop	{r4, r5, r6, pc}
 800bdb0:	0781      	lsls	r1, r0, #30
 800bdb2:	bf58      	it	pl
 800bdb4:	6963      	ldrpl	r3, [r4, #20]
 800bdb6:	60a3      	str	r3, [r4, #8]
 800bdb8:	e7f4      	b.n	800bda4 <__swsetup_r+0xb0>
 800bdba:	2000      	movs	r0, #0
 800bdbc:	e7f7      	b.n	800bdae <__swsetup_r+0xba>
 800bdbe:	bf00      	nop
 800bdc0:	20000018 	.word	0x20000018
 800bdc4:	0800c7c8 	.word	0x0800c7c8
 800bdc8:	0800c7e8 	.word	0x0800c7e8
 800bdcc:	0800c7a8 	.word	0x0800c7a8

0800bdd0 <abort>:
 800bdd0:	b508      	push	{r3, lr}
 800bdd2:	2006      	movs	r0, #6
 800bdd4:	f000 fa56 	bl	800c284 <raise>
 800bdd8:	2001      	movs	r0, #1
 800bdda:	f000 fbe1 	bl	800c5a0 <_exit>
	...

0800bde0 <__sflush_r>:
 800bde0:	898a      	ldrh	r2, [r1, #12]
 800bde2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bde6:	4605      	mov	r5, r0
 800bde8:	0710      	lsls	r0, r2, #28
 800bdea:	460c      	mov	r4, r1
 800bdec:	d458      	bmi.n	800bea0 <__sflush_r+0xc0>
 800bdee:	684b      	ldr	r3, [r1, #4]
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	dc05      	bgt.n	800be00 <__sflush_r+0x20>
 800bdf4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	dc02      	bgt.n	800be00 <__sflush_r+0x20>
 800bdfa:	2000      	movs	r0, #0
 800bdfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be00:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800be02:	2e00      	cmp	r6, #0
 800be04:	d0f9      	beq.n	800bdfa <__sflush_r+0x1a>
 800be06:	2300      	movs	r3, #0
 800be08:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800be0c:	682f      	ldr	r7, [r5, #0]
 800be0e:	602b      	str	r3, [r5, #0]
 800be10:	d032      	beq.n	800be78 <__sflush_r+0x98>
 800be12:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800be14:	89a3      	ldrh	r3, [r4, #12]
 800be16:	075a      	lsls	r2, r3, #29
 800be18:	d505      	bpl.n	800be26 <__sflush_r+0x46>
 800be1a:	6863      	ldr	r3, [r4, #4]
 800be1c:	1ac0      	subs	r0, r0, r3
 800be1e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800be20:	b10b      	cbz	r3, 800be26 <__sflush_r+0x46>
 800be22:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800be24:	1ac0      	subs	r0, r0, r3
 800be26:	2300      	movs	r3, #0
 800be28:	4602      	mov	r2, r0
 800be2a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800be2c:	6a21      	ldr	r1, [r4, #32]
 800be2e:	4628      	mov	r0, r5
 800be30:	47b0      	blx	r6
 800be32:	1c43      	adds	r3, r0, #1
 800be34:	89a3      	ldrh	r3, [r4, #12]
 800be36:	d106      	bne.n	800be46 <__sflush_r+0x66>
 800be38:	6829      	ldr	r1, [r5, #0]
 800be3a:	291d      	cmp	r1, #29
 800be3c:	d82c      	bhi.n	800be98 <__sflush_r+0xb8>
 800be3e:	4a2a      	ldr	r2, [pc, #168]	; (800bee8 <__sflush_r+0x108>)
 800be40:	40ca      	lsrs	r2, r1
 800be42:	07d6      	lsls	r6, r2, #31
 800be44:	d528      	bpl.n	800be98 <__sflush_r+0xb8>
 800be46:	2200      	movs	r2, #0
 800be48:	6062      	str	r2, [r4, #4]
 800be4a:	04d9      	lsls	r1, r3, #19
 800be4c:	6922      	ldr	r2, [r4, #16]
 800be4e:	6022      	str	r2, [r4, #0]
 800be50:	d504      	bpl.n	800be5c <__sflush_r+0x7c>
 800be52:	1c42      	adds	r2, r0, #1
 800be54:	d101      	bne.n	800be5a <__sflush_r+0x7a>
 800be56:	682b      	ldr	r3, [r5, #0]
 800be58:	b903      	cbnz	r3, 800be5c <__sflush_r+0x7c>
 800be5a:	6560      	str	r0, [r4, #84]	; 0x54
 800be5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800be5e:	602f      	str	r7, [r5, #0]
 800be60:	2900      	cmp	r1, #0
 800be62:	d0ca      	beq.n	800bdfa <__sflush_r+0x1a>
 800be64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800be68:	4299      	cmp	r1, r3
 800be6a:	d002      	beq.n	800be72 <__sflush_r+0x92>
 800be6c:	4628      	mov	r0, r5
 800be6e:	f7ff fb47 	bl	800b500 <_free_r>
 800be72:	2000      	movs	r0, #0
 800be74:	6360      	str	r0, [r4, #52]	; 0x34
 800be76:	e7c1      	b.n	800bdfc <__sflush_r+0x1c>
 800be78:	6a21      	ldr	r1, [r4, #32]
 800be7a:	2301      	movs	r3, #1
 800be7c:	4628      	mov	r0, r5
 800be7e:	47b0      	blx	r6
 800be80:	1c41      	adds	r1, r0, #1
 800be82:	d1c7      	bne.n	800be14 <__sflush_r+0x34>
 800be84:	682b      	ldr	r3, [r5, #0]
 800be86:	2b00      	cmp	r3, #0
 800be88:	d0c4      	beq.n	800be14 <__sflush_r+0x34>
 800be8a:	2b1d      	cmp	r3, #29
 800be8c:	d001      	beq.n	800be92 <__sflush_r+0xb2>
 800be8e:	2b16      	cmp	r3, #22
 800be90:	d101      	bne.n	800be96 <__sflush_r+0xb6>
 800be92:	602f      	str	r7, [r5, #0]
 800be94:	e7b1      	b.n	800bdfa <__sflush_r+0x1a>
 800be96:	89a3      	ldrh	r3, [r4, #12]
 800be98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800be9c:	81a3      	strh	r3, [r4, #12]
 800be9e:	e7ad      	b.n	800bdfc <__sflush_r+0x1c>
 800bea0:	690f      	ldr	r7, [r1, #16]
 800bea2:	2f00      	cmp	r7, #0
 800bea4:	d0a9      	beq.n	800bdfa <__sflush_r+0x1a>
 800bea6:	0793      	lsls	r3, r2, #30
 800bea8:	680e      	ldr	r6, [r1, #0]
 800beaa:	bf08      	it	eq
 800beac:	694b      	ldreq	r3, [r1, #20]
 800beae:	600f      	str	r7, [r1, #0]
 800beb0:	bf18      	it	ne
 800beb2:	2300      	movne	r3, #0
 800beb4:	eba6 0807 	sub.w	r8, r6, r7
 800beb8:	608b      	str	r3, [r1, #8]
 800beba:	f1b8 0f00 	cmp.w	r8, #0
 800bebe:	dd9c      	ble.n	800bdfa <__sflush_r+0x1a>
 800bec0:	6a21      	ldr	r1, [r4, #32]
 800bec2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bec4:	4643      	mov	r3, r8
 800bec6:	463a      	mov	r2, r7
 800bec8:	4628      	mov	r0, r5
 800beca:	47b0      	blx	r6
 800becc:	2800      	cmp	r0, #0
 800bece:	dc06      	bgt.n	800bede <__sflush_r+0xfe>
 800bed0:	89a3      	ldrh	r3, [r4, #12]
 800bed2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bed6:	81a3      	strh	r3, [r4, #12]
 800bed8:	f04f 30ff 	mov.w	r0, #4294967295
 800bedc:	e78e      	b.n	800bdfc <__sflush_r+0x1c>
 800bede:	4407      	add	r7, r0
 800bee0:	eba8 0800 	sub.w	r8, r8, r0
 800bee4:	e7e9      	b.n	800beba <__sflush_r+0xda>
 800bee6:	bf00      	nop
 800bee8:	20400001 	.word	0x20400001

0800beec <_fflush_r>:
 800beec:	b538      	push	{r3, r4, r5, lr}
 800beee:	690b      	ldr	r3, [r1, #16]
 800bef0:	4605      	mov	r5, r0
 800bef2:	460c      	mov	r4, r1
 800bef4:	b913      	cbnz	r3, 800befc <_fflush_r+0x10>
 800bef6:	2500      	movs	r5, #0
 800bef8:	4628      	mov	r0, r5
 800befa:	bd38      	pop	{r3, r4, r5, pc}
 800befc:	b118      	cbz	r0, 800bf06 <_fflush_r+0x1a>
 800befe:	6983      	ldr	r3, [r0, #24]
 800bf00:	b90b      	cbnz	r3, 800bf06 <_fflush_r+0x1a>
 800bf02:	f000 f887 	bl	800c014 <__sinit>
 800bf06:	4b14      	ldr	r3, [pc, #80]	; (800bf58 <_fflush_r+0x6c>)
 800bf08:	429c      	cmp	r4, r3
 800bf0a:	d11b      	bne.n	800bf44 <_fflush_r+0x58>
 800bf0c:	686c      	ldr	r4, [r5, #4]
 800bf0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d0ef      	beq.n	800bef6 <_fflush_r+0xa>
 800bf16:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bf18:	07d0      	lsls	r0, r2, #31
 800bf1a:	d404      	bmi.n	800bf26 <_fflush_r+0x3a>
 800bf1c:	0599      	lsls	r1, r3, #22
 800bf1e:	d402      	bmi.n	800bf26 <_fflush_r+0x3a>
 800bf20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bf22:	f000 f915 	bl	800c150 <__retarget_lock_acquire_recursive>
 800bf26:	4628      	mov	r0, r5
 800bf28:	4621      	mov	r1, r4
 800bf2a:	f7ff ff59 	bl	800bde0 <__sflush_r>
 800bf2e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bf30:	07da      	lsls	r2, r3, #31
 800bf32:	4605      	mov	r5, r0
 800bf34:	d4e0      	bmi.n	800bef8 <_fflush_r+0xc>
 800bf36:	89a3      	ldrh	r3, [r4, #12]
 800bf38:	059b      	lsls	r3, r3, #22
 800bf3a:	d4dd      	bmi.n	800bef8 <_fflush_r+0xc>
 800bf3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bf3e:	f000 f908 	bl	800c152 <__retarget_lock_release_recursive>
 800bf42:	e7d9      	b.n	800bef8 <_fflush_r+0xc>
 800bf44:	4b05      	ldr	r3, [pc, #20]	; (800bf5c <_fflush_r+0x70>)
 800bf46:	429c      	cmp	r4, r3
 800bf48:	d101      	bne.n	800bf4e <_fflush_r+0x62>
 800bf4a:	68ac      	ldr	r4, [r5, #8]
 800bf4c:	e7df      	b.n	800bf0e <_fflush_r+0x22>
 800bf4e:	4b04      	ldr	r3, [pc, #16]	; (800bf60 <_fflush_r+0x74>)
 800bf50:	429c      	cmp	r4, r3
 800bf52:	bf08      	it	eq
 800bf54:	68ec      	ldreq	r4, [r5, #12]
 800bf56:	e7da      	b.n	800bf0e <_fflush_r+0x22>
 800bf58:	0800c7c8 	.word	0x0800c7c8
 800bf5c:	0800c7e8 	.word	0x0800c7e8
 800bf60:	0800c7a8 	.word	0x0800c7a8

0800bf64 <std>:
 800bf64:	2300      	movs	r3, #0
 800bf66:	b510      	push	{r4, lr}
 800bf68:	4604      	mov	r4, r0
 800bf6a:	e9c0 3300 	strd	r3, r3, [r0]
 800bf6e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bf72:	6083      	str	r3, [r0, #8]
 800bf74:	8181      	strh	r1, [r0, #12]
 800bf76:	6643      	str	r3, [r0, #100]	; 0x64
 800bf78:	81c2      	strh	r2, [r0, #14]
 800bf7a:	6183      	str	r3, [r0, #24]
 800bf7c:	4619      	mov	r1, r3
 800bf7e:	2208      	movs	r2, #8
 800bf80:	305c      	adds	r0, #92	; 0x5c
 800bf82:	f7ff fa3d 	bl	800b400 <memset>
 800bf86:	4b05      	ldr	r3, [pc, #20]	; (800bf9c <std+0x38>)
 800bf88:	6263      	str	r3, [r4, #36]	; 0x24
 800bf8a:	4b05      	ldr	r3, [pc, #20]	; (800bfa0 <std+0x3c>)
 800bf8c:	62a3      	str	r3, [r4, #40]	; 0x28
 800bf8e:	4b05      	ldr	r3, [pc, #20]	; (800bfa4 <std+0x40>)
 800bf90:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bf92:	4b05      	ldr	r3, [pc, #20]	; (800bfa8 <std+0x44>)
 800bf94:	6224      	str	r4, [r4, #32]
 800bf96:	6323      	str	r3, [r4, #48]	; 0x30
 800bf98:	bd10      	pop	{r4, pc}
 800bf9a:	bf00      	nop
 800bf9c:	0800c2bd 	.word	0x0800c2bd
 800bfa0:	0800c2df 	.word	0x0800c2df
 800bfa4:	0800c317 	.word	0x0800c317
 800bfa8:	0800c33b 	.word	0x0800c33b

0800bfac <_cleanup_r>:
 800bfac:	4901      	ldr	r1, [pc, #4]	; (800bfb4 <_cleanup_r+0x8>)
 800bfae:	f000 b8af 	b.w	800c110 <_fwalk_reent>
 800bfb2:	bf00      	nop
 800bfb4:	0800beed 	.word	0x0800beed

0800bfb8 <__sfmoreglue>:
 800bfb8:	b570      	push	{r4, r5, r6, lr}
 800bfba:	1e4a      	subs	r2, r1, #1
 800bfbc:	2568      	movs	r5, #104	; 0x68
 800bfbe:	4355      	muls	r5, r2
 800bfc0:	460e      	mov	r6, r1
 800bfc2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800bfc6:	f7ff faeb 	bl	800b5a0 <_malloc_r>
 800bfca:	4604      	mov	r4, r0
 800bfcc:	b140      	cbz	r0, 800bfe0 <__sfmoreglue+0x28>
 800bfce:	2100      	movs	r1, #0
 800bfd0:	e9c0 1600 	strd	r1, r6, [r0]
 800bfd4:	300c      	adds	r0, #12
 800bfd6:	60a0      	str	r0, [r4, #8]
 800bfd8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800bfdc:	f7ff fa10 	bl	800b400 <memset>
 800bfe0:	4620      	mov	r0, r4
 800bfe2:	bd70      	pop	{r4, r5, r6, pc}

0800bfe4 <__sfp_lock_acquire>:
 800bfe4:	4801      	ldr	r0, [pc, #4]	; (800bfec <__sfp_lock_acquire+0x8>)
 800bfe6:	f000 b8b3 	b.w	800c150 <__retarget_lock_acquire_recursive>
 800bfea:	bf00      	nop
 800bfec:	20009f18 	.word	0x20009f18

0800bff0 <__sfp_lock_release>:
 800bff0:	4801      	ldr	r0, [pc, #4]	; (800bff8 <__sfp_lock_release+0x8>)
 800bff2:	f000 b8ae 	b.w	800c152 <__retarget_lock_release_recursive>
 800bff6:	bf00      	nop
 800bff8:	20009f18 	.word	0x20009f18

0800bffc <__sinit_lock_acquire>:
 800bffc:	4801      	ldr	r0, [pc, #4]	; (800c004 <__sinit_lock_acquire+0x8>)
 800bffe:	f000 b8a7 	b.w	800c150 <__retarget_lock_acquire_recursive>
 800c002:	bf00      	nop
 800c004:	20009f13 	.word	0x20009f13

0800c008 <__sinit_lock_release>:
 800c008:	4801      	ldr	r0, [pc, #4]	; (800c010 <__sinit_lock_release+0x8>)
 800c00a:	f000 b8a2 	b.w	800c152 <__retarget_lock_release_recursive>
 800c00e:	bf00      	nop
 800c010:	20009f13 	.word	0x20009f13

0800c014 <__sinit>:
 800c014:	b510      	push	{r4, lr}
 800c016:	4604      	mov	r4, r0
 800c018:	f7ff fff0 	bl	800bffc <__sinit_lock_acquire>
 800c01c:	69a3      	ldr	r3, [r4, #24]
 800c01e:	b11b      	cbz	r3, 800c028 <__sinit+0x14>
 800c020:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c024:	f7ff bff0 	b.w	800c008 <__sinit_lock_release>
 800c028:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c02c:	6523      	str	r3, [r4, #80]	; 0x50
 800c02e:	4b13      	ldr	r3, [pc, #76]	; (800c07c <__sinit+0x68>)
 800c030:	4a13      	ldr	r2, [pc, #76]	; (800c080 <__sinit+0x6c>)
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	62a2      	str	r2, [r4, #40]	; 0x28
 800c036:	42a3      	cmp	r3, r4
 800c038:	bf04      	itt	eq
 800c03a:	2301      	moveq	r3, #1
 800c03c:	61a3      	streq	r3, [r4, #24]
 800c03e:	4620      	mov	r0, r4
 800c040:	f000 f820 	bl	800c084 <__sfp>
 800c044:	6060      	str	r0, [r4, #4]
 800c046:	4620      	mov	r0, r4
 800c048:	f000 f81c 	bl	800c084 <__sfp>
 800c04c:	60a0      	str	r0, [r4, #8]
 800c04e:	4620      	mov	r0, r4
 800c050:	f000 f818 	bl	800c084 <__sfp>
 800c054:	2200      	movs	r2, #0
 800c056:	60e0      	str	r0, [r4, #12]
 800c058:	2104      	movs	r1, #4
 800c05a:	6860      	ldr	r0, [r4, #4]
 800c05c:	f7ff ff82 	bl	800bf64 <std>
 800c060:	68a0      	ldr	r0, [r4, #8]
 800c062:	2201      	movs	r2, #1
 800c064:	2109      	movs	r1, #9
 800c066:	f7ff ff7d 	bl	800bf64 <std>
 800c06a:	68e0      	ldr	r0, [r4, #12]
 800c06c:	2202      	movs	r2, #2
 800c06e:	2112      	movs	r1, #18
 800c070:	f7ff ff78 	bl	800bf64 <std>
 800c074:	2301      	movs	r3, #1
 800c076:	61a3      	str	r3, [r4, #24]
 800c078:	e7d2      	b.n	800c020 <__sinit+0xc>
 800c07a:	bf00      	nop
 800c07c:	0800c6bc 	.word	0x0800c6bc
 800c080:	0800bfad 	.word	0x0800bfad

0800c084 <__sfp>:
 800c084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c086:	4607      	mov	r7, r0
 800c088:	f7ff ffac 	bl	800bfe4 <__sfp_lock_acquire>
 800c08c:	4b1e      	ldr	r3, [pc, #120]	; (800c108 <__sfp+0x84>)
 800c08e:	681e      	ldr	r6, [r3, #0]
 800c090:	69b3      	ldr	r3, [r6, #24]
 800c092:	b913      	cbnz	r3, 800c09a <__sfp+0x16>
 800c094:	4630      	mov	r0, r6
 800c096:	f7ff ffbd 	bl	800c014 <__sinit>
 800c09a:	3648      	adds	r6, #72	; 0x48
 800c09c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c0a0:	3b01      	subs	r3, #1
 800c0a2:	d503      	bpl.n	800c0ac <__sfp+0x28>
 800c0a4:	6833      	ldr	r3, [r6, #0]
 800c0a6:	b30b      	cbz	r3, 800c0ec <__sfp+0x68>
 800c0a8:	6836      	ldr	r6, [r6, #0]
 800c0aa:	e7f7      	b.n	800c09c <__sfp+0x18>
 800c0ac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c0b0:	b9d5      	cbnz	r5, 800c0e8 <__sfp+0x64>
 800c0b2:	4b16      	ldr	r3, [pc, #88]	; (800c10c <__sfp+0x88>)
 800c0b4:	60e3      	str	r3, [r4, #12]
 800c0b6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c0ba:	6665      	str	r5, [r4, #100]	; 0x64
 800c0bc:	f000 f847 	bl	800c14e <__retarget_lock_init_recursive>
 800c0c0:	f7ff ff96 	bl	800bff0 <__sfp_lock_release>
 800c0c4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c0c8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c0cc:	6025      	str	r5, [r4, #0]
 800c0ce:	61a5      	str	r5, [r4, #24]
 800c0d0:	2208      	movs	r2, #8
 800c0d2:	4629      	mov	r1, r5
 800c0d4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c0d8:	f7ff f992 	bl	800b400 <memset>
 800c0dc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c0e0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c0e4:	4620      	mov	r0, r4
 800c0e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c0e8:	3468      	adds	r4, #104	; 0x68
 800c0ea:	e7d9      	b.n	800c0a0 <__sfp+0x1c>
 800c0ec:	2104      	movs	r1, #4
 800c0ee:	4638      	mov	r0, r7
 800c0f0:	f7ff ff62 	bl	800bfb8 <__sfmoreglue>
 800c0f4:	4604      	mov	r4, r0
 800c0f6:	6030      	str	r0, [r6, #0]
 800c0f8:	2800      	cmp	r0, #0
 800c0fa:	d1d5      	bne.n	800c0a8 <__sfp+0x24>
 800c0fc:	f7ff ff78 	bl	800bff0 <__sfp_lock_release>
 800c100:	230c      	movs	r3, #12
 800c102:	603b      	str	r3, [r7, #0]
 800c104:	e7ee      	b.n	800c0e4 <__sfp+0x60>
 800c106:	bf00      	nop
 800c108:	0800c6bc 	.word	0x0800c6bc
 800c10c:	ffff0001 	.word	0xffff0001

0800c110 <_fwalk_reent>:
 800c110:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c114:	4606      	mov	r6, r0
 800c116:	4688      	mov	r8, r1
 800c118:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c11c:	2700      	movs	r7, #0
 800c11e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c122:	f1b9 0901 	subs.w	r9, r9, #1
 800c126:	d505      	bpl.n	800c134 <_fwalk_reent+0x24>
 800c128:	6824      	ldr	r4, [r4, #0]
 800c12a:	2c00      	cmp	r4, #0
 800c12c:	d1f7      	bne.n	800c11e <_fwalk_reent+0xe>
 800c12e:	4638      	mov	r0, r7
 800c130:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c134:	89ab      	ldrh	r3, [r5, #12]
 800c136:	2b01      	cmp	r3, #1
 800c138:	d907      	bls.n	800c14a <_fwalk_reent+0x3a>
 800c13a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c13e:	3301      	adds	r3, #1
 800c140:	d003      	beq.n	800c14a <_fwalk_reent+0x3a>
 800c142:	4629      	mov	r1, r5
 800c144:	4630      	mov	r0, r6
 800c146:	47c0      	blx	r8
 800c148:	4307      	orrs	r7, r0
 800c14a:	3568      	adds	r5, #104	; 0x68
 800c14c:	e7e9      	b.n	800c122 <_fwalk_reent+0x12>

0800c14e <__retarget_lock_init_recursive>:
 800c14e:	4770      	bx	lr

0800c150 <__retarget_lock_acquire_recursive>:
 800c150:	4770      	bx	lr

0800c152 <__retarget_lock_release_recursive>:
 800c152:	4770      	bx	lr

0800c154 <__swhatbuf_r>:
 800c154:	b570      	push	{r4, r5, r6, lr}
 800c156:	460e      	mov	r6, r1
 800c158:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c15c:	2900      	cmp	r1, #0
 800c15e:	b096      	sub	sp, #88	; 0x58
 800c160:	4614      	mov	r4, r2
 800c162:	461d      	mov	r5, r3
 800c164:	da07      	bge.n	800c176 <__swhatbuf_r+0x22>
 800c166:	2300      	movs	r3, #0
 800c168:	602b      	str	r3, [r5, #0]
 800c16a:	89b3      	ldrh	r3, [r6, #12]
 800c16c:	061a      	lsls	r2, r3, #24
 800c16e:	d410      	bmi.n	800c192 <__swhatbuf_r+0x3e>
 800c170:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c174:	e00e      	b.n	800c194 <__swhatbuf_r+0x40>
 800c176:	466a      	mov	r2, sp
 800c178:	f000 f906 	bl	800c388 <_fstat_r>
 800c17c:	2800      	cmp	r0, #0
 800c17e:	dbf2      	blt.n	800c166 <__swhatbuf_r+0x12>
 800c180:	9a01      	ldr	r2, [sp, #4]
 800c182:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c186:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c18a:	425a      	negs	r2, r3
 800c18c:	415a      	adcs	r2, r3
 800c18e:	602a      	str	r2, [r5, #0]
 800c190:	e7ee      	b.n	800c170 <__swhatbuf_r+0x1c>
 800c192:	2340      	movs	r3, #64	; 0x40
 800c194:	2000      	movs	r0, #0
 800c196:	6023      	str	r3, [r4, #0]
 800c198:	b016      	add	sp, #88	; 0x58
 800c19a:	bd70      	pop	{r4, r5, r6, pc}

0800c19c <__smakebuf_r>:
 800c19c:	898b      	ldrh	r3, [r1, #12]
 800c19e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c1a0:	079d      	lsls	r5, r3, #30
 800c1a2:	4606      	mov	r6, r0
 800c1a4:	460c      	mov	r4, r1
 800c1a6:	d507      	bpl.n	800c1b8 <__smakebuf_r+0x1c>
 800c1a8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c1ac:	6023      	str	r3, [r4, #0]
 800c1ae:	6123      	str	r3, [r4, #16]
 800c1b0:	2301      	movs	r3, #1
 800c1b2:	6163      	str	r3, [r4, #20]
 800c1b4:	b002      	add	sp, #8
 800c1b6:	bd70      	pop	{r4, r5, r6, pc}
 800c1b8:	ab01      	add	r3, sp, #4
 800c1ba:	466a      	mov	r2, sp
 800c1bc:	f7ff ffca 	bl	800c154 <__swhatbuf_r>
 800c1c0:	9900      	ldr	r1, [sp, #0]
 800c1c2:	4605      	mov	r5, r0
 800c1c4:	4630      	mov	r0, r6
 800c1c6:	f7ff f9eb 	bl	800b5a0 <_malloc_r>
 800c1ca:	b948      	cbnz	r0, 800c1e0 <__smakebuf_r+0x44>
 800c1cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c1d0:	059a      	lsls	r2, r3, #22
 800c1d2:	d4ef      	bmi.n	800c1b4 <__smakebuf_r+0x18>
 800c1d4:	f023 0303 	bic.w	r3, r3, #3
 800c1d8:	f043 0302 	orr.w	r3, r3, #2
 800c1dc:	81a3      	strh	r3, [r4, #12]
 800c1de:	e7e3      	b.n	800c1a8 <__smakebuf_r+0xc>
 800c1e0:	4b0d      	ldr	r3, [pc, #52]	; (800c218 <__smakebuf_r+0x7c>)
 800c1e2:	62b3      	str	r3, [r6, #40]	; 0x28
 800c1e4:	89a3      	ldrh	r3, [r4, #12]
 800c1e6:	6020      	str	r0, [r4, #0]
 800c1e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c1ec:	81a3      	strh	r3, [r4, #12]
 800c1ee:	9b00      	ldr	r3, [sp, #0]
 800c1f0:	6163      	str	r3, [r4, #20]
 800c1f2:	9b01      	ldr	r3, [sp, #4]
 800c1f4:	6120      	str	r0, [r4, #16]
 800c1f6:	b15b      	cbz	r3, 800c210 <__smakebuf_r+0x74>
 800c1f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c1fc:	4630      	mov	r0, r6
 800c1fe:	f000 f8d5 	bl	800c3ac <_isatty_r>
 800c202:	b128      	cbz	r0, 800c210 <__smakebuf_r+0x74>
 800c204:	89a3      	ldrh	r3, [r4, #12]
 800c206:	f023 0303 	bic.w	r3, r3, #3
 800c20a:	f043 0301 	orr.w	r3, r3, #1
 800c20e:	81a3      	strh	r3, [r4, #12]
 800c210:	89a0      	ldrh	r0, [r4, #12]
 800c212:	4305      	orrs	r5, r0
 800c214:	81a5      	strh	r5, [r4, #12]
 800c216:	e7cd      	b.n	800c1b4 <__smakebuf_r+0x18>
 800c218:	0800bfad 	.word	0x0800bfad

0800c21c <__malloc_lock>:
 800c21c:	4801      	ldr	r0, [pc, #4]	; (800c224 <__malloc_lock+0x8>)
 800c21e:	f7ff bf97 	b.w	800c150 <__retarget_lock_acquire_recursive>
 800c222:	bf00      	nop
 800c224:	20009f14 	.word	0x20009f14

0800c228 <__malloc_unlock>:
 800c228:	4801      	ldr	r0, [pc, #4]	; (800c230 <__malloc_unlock+0x8>)
 800c22a:	f7ff bf92 	b.w	800c152 <__retarget_lock_release_recursive>
 800c22e:	bf00      	nop
 800c230:	20009f14 	.word	0x20009f14

0800c234 <_raise_r>:
 800c234:	291f      	cmp	r1, #31
 800c236:	b538      	push	{r3, r4, r5, lr}
 800c238:	4604      	mov	r4, r0
 800c23a:	460d      	mov	r5, r1
 800c23c:	d904      	bls.n	800c248 <_raise_r+0x14>
 800c23e:	2316      	movs	r3, #22
 800c240:	6003      	str	r3, [r0, #0]
 800c242:	f04f 30ff 	mov.w	r0, #4294967295
 800c246:	bd38      	pop	{r3, r4, r5, pc}
 800c248:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c24a:	b112      	cbz	r2, 800c252 <_raise_r+0x1e>
 800c24c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c250:	b94b      	cbnz	r3, 800c266 <_raise_r+0x32>
 800c252:	4620      	mov	r0, r4
 800c254:	f000 f830 	bl	800c2b8 <_getpid_r>
 800c258:	462a      	mov	r2, r5
 800c25a:	4601      	mov	r1, r0
 800c25c:	4620      	mov	r0, r4
 800c25e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c262:	f000 b817 	b.w	800c294 <_kill_r>
 800c266:	2b01      	cmp	r3, #1
 800c268:	d00a      	beq.n	800c280 <_raise_r+0x4c>
 800c26a:	1c59      	adds	r1, r3, #1
 800c26c:	d103      	bne.n	800c276 <_raise_r+0x42>
 800c26e:	2316      	movs	r3, #22
 800c270:	6003      	str	r3, [r0, #0]
 800c272:	2001      	movs	r0, #1
 800c274:	e7e7      	b.n	800c246 <_raise_r+0x12>
 800c276:	2400      	movs	r4, #0
 800c278:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c27c:	4628      	mov	r0, r5
 800c27e:	4798      	blx	r3
 800c280:	2000      	movs	r0, #0
 800c282:	e7e0      	b.n	800c246 <_raise_r+0x12>

0800c284 <raise>:
 800c284:	4b02      	ldr	r3, [pc, #8]	; (800c290 <raise+0xc>)
 800c286:	4601      	mov	r1, r0
 800c288:	6818      	ldr	r0, [r3, #0]
 800c28a:	f7ff bfd3 	b.w	800c234 <_raise_r>
 800c28e:	bf00      	nop
 800c290:	20000018 	.word	0x20000018

0800c294 <_kill_r>:
 800c294:	b538      	push	{r3, r4, r5, lr}
 800c296:	4d07      	ldr	r5, [pc, #28]	; (800c2b4 <_kill_r+0x20>)
 800c298:	2300      	movs	r3, #0
 800c29a:	4604      	mov	r4, r0
 800c29c:	4608      	mov	r0, r1
 800c29e:	4611      	mov	r1, r2
 800c2a0:	602b      	str	r3, [r5, #0]
 800c2a2:	f000 f94f 	bl	800c544 <_kill>
 800c2a6:	1c43      	adds	r3, r0, #1
 800c2a8:	d102      	bne.n	800c2b0 <_kill_r+0x1c>
 800c2aa:	682b      	ldr	r3, [r5, #0]
 800c2ac:	b103      	cbz	r3, 800c2b0 <_kill_r+0x1c>
 800c2ae:	6023      	str	r3, [r4, #0]
 800c2b0:	bd38      	pop	{r3, r4, r5, pc}
 800c2b2:	bf00      	nop
 800c2b4:	20009f1c 	.word	0x20009f1c

0800c2b8 <_getpid_r>:
 800c2b8:	f000 b934 	b.w	800c524 <_getpid>

0800c2bc <__sread>:
 800c2bc:	b510      	push	{r4, lr}
 800c2be:	460c      	mov	r4, r1
 800c2c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c2c4:	f000 f894 	bl	800c3f0 <_read_r>
 800c2c8:	2800      	cmp	r0, #0
 800c2ca:	bfab      	itete	ge
 800c2cc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c2ce:	89a3      	ldrhlt	r3, [r4, #12]
 800c2d0:	181b      	addge	r3, r3, r0
 800c2d2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c2d6:	bfac      	ite	ge
 800c2d8:	6563      	strge	r3, [r4, #84]	; 0x54
 800c2da:	81a3      	strhlt	r3, [r4, #12]
 800c2dc:	bd10      	pop	{r4, pc}

0800c2de <__swrite>:
 800c2de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c2e2:	461f      	mov	r7, r3
 800c2e4:	898b      	ldrh	r3, [r1, #12]
 800c2e6:	05db      	lsls	r3, r3, #23
 800c2e8:	4605      	mov	r5, r0
 800c2ea:	460c      	mov	r4, r1
 800c2ec:	4616      	mov	r6, r2
 800c2ee:	d505      	bpl.n	800c2fc <__swrite+0x1e>
 800c2f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c2f4:	2302      	movs	r3, #2
 800c2f6:	2200      	movs	r2, #0
 800c2f8:	f000 f868 	bl	800c3cc <_lseek_r>
 800c2fc:	89a3      	ldrh	r3, [r4, #12]
 800c2fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c302:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c306:	81a3      	strh	r3, [r4, #12]
 800c308:	4632      	mov	r2, r6
 800c30a:	463b      	mov	r3, r7
 800c30c:	4628      	mov	r0, r5
 800c30e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c312:	f000 b817 	b.w	800c344 <_write_r>

0800c316 <__sseek>:
 800c316:	b510      	push	{r4, lr}
 800c318:	460c      	mov	r4, r1
 800c31a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c31e:	f000 f855 	bl	800c3cc <_lseek_r>
 800c322:	1c43      	adds	r3, r0, #1
 800c324:	89a3      	ldrh	r3, [r4, #12]
 800c326:	bf15      	itete	ne
 800c328:	6560      	strne	r0, [r4, #84]	; 0x54
 800c32a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c32e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c332:	81a3      	strheq	r3, [r4, #12]
 800c334:	bf18      	it	ne
 800c336:	81a3      	strhne	r3, [r4, #12]
 800c338:	bd10      	pop	{r4, pc}

0800c33a <__sclose>:
 800c33a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c33e:	f000 b813 	b.w	800c368 <_close_r>
	...

0800c344 <_write_r>:
 800c344:	b538      	push	{r3, r4, r5, lr}
 800c346:	4d07      	ldr	r5, [pc, #28]	; (800c364 <_write_r+0x20>)
 800c348:	4604      	mov	r4, r0
 800c34a:	4608      	mov	r0, r1
 800c34c:	4611      	mov	r1, r2
 800c34e:	2200      	movs	r2, #0
 800c350:	602a      	str	r2, [r5, #0]
 800c352:	461a      	mov	r2, r3
 800c354:	f000 f91c 	bl	800c590 <_write>
 800c358:	1c43      	adds	r3, r0, #1
 800c35a:	d102      	bne.n	800c362 <_write_r+0x1e>
 800c35c:	682b      	ldr	r3, [r5, #0]
 800c35e:	b103      	cbz	r3, 800c362 <_write_r+0x1e>
 800c360:	6023      	str	r3, [r4, #0]
 800c362:	bd38      	pop	{r3, r4, r5, pc}
 800c364:	20009f1c 	.word	0x20009f1c

0800c368 <_close_r>:
 800c368:	b538      	push	{r3, r4, r5, lr}
 800c36a:	4d06      	ldr	r5, [pc, #24]	; (800c384 <_close_r+0x1c>)
 800c36c:	2300      	movs	r3, #0
 800c36e:	4604      	mov	r4, r0
 800c370:	4608      	mov	r0, r1
 800c372:	602b      	str	r3, [r5, #0]
 800c374:	f000 f8c6 	bl	800c504 <_close>
 800c378:	1c43      	adds	r3, r0, #1
 800c37a:	d102      	bne.n	800c382 <_close_r+0x1a>
 800c37c:	682b      	ldr	r3, [r5, #0]
 800c37e:	b103      	cbz	r3, 800c382 <_close_r+0x1a>
 800c380:	6023      	str	r3, [r4, #0]
 800c382:	bd38      	pop	{r3, r4, r5, pc}
 800c384:	20009f1c 	.word	0x20009f1c

0800c388 <_fstat_r>:
 800c388:	b538      	push	{r3, r4, r5, lr}
 800c38a:	4d07      	ldr	r5, [pc, #28]	; (800c3a8 <_fstat_r+0x20>)
 800c38c:	2300      	movs	r3, #0
 800c38e:	4604      	mov	r4, r0
 800c390:	4608      	mov	r0, r1
 800c392:	4611      	mov	r1, r2
 800c394:	602b      	str	r3, [r5, #0]
 800c396:	f000 f8bd 	bl	800c514 <_fstat>
 800c39a:	1c43      	adds	r3, r0, #1
 800c39c:	d102      	bne.n	800c3a4 <_fstat_r+0x1c>
 800c39e:	682b      	ldr	r3, [r5, #0]
 800c3a0:	b103      	cbz	r3, 800c3a4 <_fstat_r+0x1c>
 800c3a2:	6023      	str	r3, [r4, #0]
 800c3a4:	bd38      	pop	{r3, r4, r5, pc}
 800c3a6:	bf00      	nop
 800c3a8:	20009f1c 	.word	0x20009f1c

0800c3ac <_isatty_r>:
 800c3ac:	b538      	push	{r3, r4, r5, lr}
 800c3ae:	4d06      	ldr	r5, [pc, #24]	; (800c3c8 <_isatty_r+0x1c>)
 800c3b0:	2300      	movs	r3, #0
 800c3b2:	4604      	mov	r4, r0
 800c3b4:	4608      	mov	r0, r1
 800c3b6:	602b      	str	r3, [r5, #0]
 800c3b8:	f000 f8bc 	bl	800c534 <_isatty>
 800c3bc:	1c43      	adds	r3, r0, #1
 800c3be:	d102      	bne.n	800c3c6 <_isatty_r+0x1a>
 800c3c0:	682b      	ldr	r3, [r5, #0]
 800c3c2:	b103      	cbz	r3, 800c3c6 <_isatty_r+0x1a>
 800c3c4:	6023      	str	r3, [r4, #0]
 800c3c6:	bd38      	pop	{r3, r4, r5, pc}
 800c3c8:	20009f1c 	.word	0x20009f1c

0800c3cc <_lseek_r>:
 800c3cc:	b538      	push	{r3, r4, r5, lr}
 800c3ce:	4d07      	ldr	r5, [pc, #28]	; (800c3ec <_lseek_r+0x20>)
 800c3d0:	4604      	mov	r4, r0
 800c3d2:	4608      	mov	r0, r1
 800c3d4:	4611      	mov	r1, r2
 800c3d6:	2200      	movs	r2, #0
 800c3d8:	602a      	str	r2, [r5, #0]
 800c3da:	461a      	mov	r2, r3
 800c3dc:	f000 f8ba 	bl	800c554 <_lseek>
 800c3e0:	1c43      	adds	r3, r0, #1
 800c3e2:	d102      	bne.n	800c3ea <_lseek_r+0x1e>
 800c3e4:	682b      	ldr	r3, [r5, #0]
 800c3e6:	b103      	cbz	r3, 800c3ea <_lseek_r+0x1e>
 800c3e8:	6023      	str	r3, [r4, #0]
 800c3ea:	bd38      	pop	{r3, r4, r5, pc}
 800c3ec:	20009f1c 	.word	0x20009f1c

0800c3f0 <_read_r>:
 800c3f0:	b538      	push	{r3, r4, r5, lr}
 800c3f2:	4d07      	ldr	r5, [pc, #28]	; (800c410 <_read_r+0x20>)
 800c3f4:	4604      	mov	r4, r0
 800c3f6:	4608      	mov	r0, r1
 800c3f8:	4611      	mov	r1, r2
 800c3fa:	2200      	movs	r2, #0
 800c3fc:	602a      	str	r2, [r5, #0]
 800c3fe:	461a      	mov	r2, r3
 800c400:	f000 f8b0 	bl	800c564 <_read>
 800c404:	1c43      	adds	r3, r0, #1
 800c406:	d102      	bne.n	800c40e <_read_r+0x1e>
 800c408:	682b      	ldr	r3, [r5, #0]
 800c40a:	b103      	cbz	r3, 800c40e <_read_r+0x1e>
 800c40c:	6023      	str	r3, [r4, #0]
 800c40e:	bd38      	pop	{r3, r4, r5, pc}
 800c410:	20009f1c 	.word	0x20009f1c

0800c414 <fmax>:
 800c414:	b508      	push	{r3, lr}
 800c416:	ed2d 8b04 	vpush	{d8-d9}
 800c41a:	eeb0 8a40 	vmov.f32	s16, s0
 800c41e:	eef0 8a60 	vmov.f32	s17, s1
 800c422:	eeb0 9a41 	vmov.f32	s18, s2
 800c426:	eef0 9a61 	vmov.f32	s19, s3
 800c42a:	f000 f841 	bl	800c4b0 <__fpclassifyd>
 800c42e:	b168      	cbz	r0, 800c44c <fmax+0x38>
 800c430:	eeb0 0a49 	vmov.f32	s0, s18
 800c434:	eef0 0a69 	vmov.f32	s1, s19
 800c438:	f000 f83a 	bl	800c4b0 <__fpclassifyd>
 800c43c:	b150      	cbz	r0, 800c454 <fmax+0x40>
 800c43e:	ec53 2b19 	vmov	r2, r3, d9
 800c442:	ec51 0b18 	vmov	r0, r1, d8
 800c446:	f7f4 fb6f 	bl	8000b28 <__aeabi_dcmpgt>
 800c44a:	b918      	cbnz	r0, 800c454 <fmax+0x40>
 800c44c:	eeb0 8a49 	vmov.f32	s16, s18
 800c450:	eef0 8a69 	vmov.f32	s17, s19
 800c454:	eeb0 0a48 	vmov.f32	s0, s16
 800c458:	eef0 0a68 	vmov.f32	s1, s17
 800c45c:	ecbd 8b04 	vpop	{d8-d9}
 800c460:	bd08      	pop	{r3, pc}

0800c462 <fmin>:
 800c462:	b508      	push	{r3, lr}
 800c464:	ed2d 8b04 	vpush	{d8-d9}
 800c468:	eeb0 8a40 	vmov.f32	s16, s0
 800c46c:	eef0 8a60 	vmov.f32	s17, s1
 800c470:	eeb0 9a41 	vmov.f32	s18, s2
 800c474:	eef0 9a61 	vmov.f32	s19, s3
 800c478:	f000 f81a 	bl	800c4b0 <__fpclassifyd>
 800c47c:	b168      	cbz	r0, 800c49a <fmin+0x38>
 800c47e:	eeb0 0a49 	vmov.f32	s0, s18
 800c482:	eef0 0a69 	vmov.f32	s1, s19
 800c486:	f000 f813 	bl	800c4b0 <__fpclassifyd>
 800c48a:	b150      	cbz	r0, 800c4a2 <fmin+0x40>
 800c48c:	ec53 2b19 	vmov	r2, r3, d9
 800c490:	ec51 0b18 	vmov	r0, r1, d8
 800c494:	f7f4 fb2a 	bl	8000aec <__aeabi_dcmplt>
 800c498:	b918      	cbnz	r0, 800c4a2 <fmin+0x40>
 800c49a:	eeb0 8a49 	vmov.f32	s16, s18
 800c49e:	eef0 8a69 	vmov.f32	s17, s19
 800c4a2:	eeb0 0a48 	vmov.f32	s0, s16
 800c4a6:	eef0 0a68 	vmov.f32	s1, s17
 800c4aa:	ecbd 8b04 	vpop	{d8-d9}
 800c4ae:	bd08      	pop	{r3, pc}

0800c4b0 <__fpclassifyd>:
 800c4b0:	ec51 0b10 	vmov	r0, r1, d0
 800c4b4:	b510      	push	{r4, lr}
 800c4b6:	f031 4400 	bics.w	r4, r1, #2147483648	; 0x80000000
 800c4ba:	460b      	mov	r3, r1
 800c4bc:	d019      	beq.n	800c4f2 <__fpclassifyd+0x42>
 800c4be:	f5a1 1280 	sub.w	r2, r1, #1048576	; 0x100000
 800c4c2:	490e      	ldr	r1, [pc, #56]	; (800c4fc <__fpclassifyd+0x4c>)
 800c4c4:	428a      	cmp	r2, r1
 800c4c6:	d90e      	bls.n	800c4e6 <__fpclassifyd+0x36>
 800c4c8:	f103 42ff 	add.w	r2, r3, #2139095040	; 0x7f800000
 800c4cc:	f502 02e0 	add.w	r2, r2, #7340032	; 0x700000
 800c4d0:	428a      	cmp	r2, r1
 800c4d2:	d908      	bls.n	800c4e6 <__fpclassifyd+0x36>
 800c4d4:	4a0a      	ldr	r2, [pc, #40]	; (800c500 <__fpclassifyd+0x50>)
 800c4d6:	4213      	tst	r3, r2
 800c4d8:	d007      	beq.n	800c4ea <__fpclassifyd+0x3a>
 800c4da:	4294      	cmp	r4, r2
 800c4dc:	d107      	bne.n	800c4ee <__fpclassifyd+0x3e>
 800c4de:	fab0 f080 	clz	r0, r0
 800c4e2:	0940      	lsrs	r0, r0, #5
 800c4e4:	bd10      	pop	{r4, pc}
 800c4e6:	2004      	movs	r0, #4
 800c4e8:	e7fc      	b.n	800c4e4 <__fpclassifyd+0x34>
 800c4ea:	2003      	movs	r0, #3
 800c4ec:	e7fa      	b.n	800c4e4 <__fpclassifyd+0x34>
 800c4ee:	2000      	movs	r0, #0
 800c4f0:	e7f8      	b.n	800c4e4 <__fpclassifyd+0x34>
 800c4f2:	2800      	cmp	r0, #0
 800c4f4:	d1ee      	bne.n	800c4d4 <__fpclassifyd+0x24>
 800c4f6:	2002      	movs	r0, #2
 800c4f8:	e7f4      	b.n	800c4e4 <__fpclassifyd+0x34>
 800c4fa:	bf00      	nop
 800c4fc:	7fdfffff 	.word	0x7fdfffff
 800c500:	7ff00000 	.word	0x7ff00000

0800c504 <_close>:
 800c504:	4b02      	ldr	r3, [pc, #8]	; (800c510 <_close+0xc>)
 800c506:	2258      	movs	r2, #88	; 0x58
 800c508:	601a      	str	r2, [r3, #0]
 800c50a:	f04f 30ff 	mov.w	r0, #4294967295
 800c50e:	4770      	bx	lr
 800c510:	20009f1c 	.word	0x20009f1c

0800c514 <_fstat>:
 800c514:	4b02      	ldr	r3, [pc, #8]	; (800c520 <_fstat+0xc>)
 800c516:	2258      	movs	r2, #88	; 0x58
 800c518:	601a      	str	r2, [r3, #0]
 800c51a:	f04f 30ff 	mov.w	r0, #4294967295
 800c51e:	4770      	bx	lr
 800c520:	20009f1c 	.word	0x20009f1c

0800c524 <_getpid>:
 800c524:	4b02      	ldr	r3, [pc, #8]	; (800c530 <_getpid+0xc>)
 800c526:	2258      	movs	r2, #88	; 0x58
 800c528:	601a      	str	r2, [r3, #0]
 800c52a:	f04f 30ff 	mov.w	r0, #4294967295
 800c52e:	4770      	bx	lr
 800c530:	20009f1c 	.word	0x20009f1c

0800c534 <_isatty>:
 800c534:	4b02      	ldr	r3, [pc, #8]	; (800c540 <_isatty+0xc>)
 800c536:	2258      	movs	r2, #88	; 0x58
 800c538:	601a      	str	r2, [r3, #0]
 800c53a:	2000      	movs	r0, #0
 800c53c:	4770      	bx	lr
 800c53e:	bf00      	nop
 800c540:	20009f1c 	.word	0x20009f1c

0800c544 <_kill>:
 800c544:	4b02      	ldr	r3, [pc, #8]	; (800c550 <_kill+0xc>)
 800c546:	2258      	movs	r2, #88	; 0x58
 800c548:	601a      	str	r2, [r3, #0]
 800c54a:	f04f 30ff 	mov.w	r0, #4294967295
 800c54e:	4770      	bx	lr
 800c550:	20009f1c 	.word	0x20009f1c

0800c554 <_lseek>:
 800c554:	4b02      	ldr	r3, [pc, #8]	; (800c560 <_lseek+0xc>)
 800c556:	2258      	movs	r2, #88	; 0x58
 800c558:	601a      	str	r2, [r3, #0]
 800c55a:	f04f 30ff 	mov.w	r0, #4294967295
 800c55e:	4770      	bx	lr
 800c560:	20009f1c 	.word	0x20009f1c

0800c564 <_read>:
 800c564:	4b02      	ldr	r3, [pc, #8]	; (800c570 <_read+0xc>)
 800c566:	2258      	movs	r2, #88	; 0x58
 800c568:	601a      	str	r2, [r3, #0]
 800c56a:	f04f 30ff 	mov.w	r0, #4294967295
 800c56e:	4770      	bx	lr
 800c570:	20009f1c 	.word	0x20009f1c

0800c574 <_sbrk>:
 800c574:	4b04      	ldr	r3, [pc, #16]	; (800c588 <_sbrk+0x14>)
 800c576:	6819      	ldr	r1, [r3, #0]
 800c578:	4602      	mov	r2, r0
 800c57a:	b909      	cbnz	r1, 800c580 <_sbrk+0xc>
 800c57c:	4903      	ldr	r1, [pc, #12]	; (800c58c <_sbrk+0x18>)
 800c57e:	6019      	str	r1, [r3, #0]
 800c580:	6818      	ldr	r0, [r3, #0]
 800c582:	4402      	add	r2, r0
 800c584:	601a      	str	r2, [r3, #0]
 800c586:	4770      	bx	lr
 800c588:	20009848 	.word	0x20009848
 800c58c:	20009f20 	.word	0x20009f20

0800c590 <_write>:
 800c590:	4b02      	ldr	r3, [pc, #8]	; (800c59c <_write+0xc>)
 800c592:	2258      	movs	r2, #88	; 0x58
 800c594:	601a      	str	r2, [r3, #0]
 800c596:	f04f 30ff 	mov.w	r0, #4294967295
 800c59a:	4770      	bx	lr
 800c59c:	20009f1c 	.word	0x20009f1c

0800c5a0 <_exit>:
 800c5a0:	e7fe      	b.n	800c5a0 <_exit>
	...

0800c5a4 <_init>:
 800c5a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5a6:	bf00      	nop
 800c5a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c5aa:	bc08      	pop	{r3}
 800c5ac:	469e      	mov	lr, r3
 800c5ae:	4770      	bx	lr

0800c5b0 <_fini>:
 800c5b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5b2:	bf00      	nop
 800c5b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c5b6:	bc08      	pop	{r3}
 800c5b8:	469e      	mov	lr, r3
 800c5ba:	4770      	bx	lr
