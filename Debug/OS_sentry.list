
OS_sentry.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b2d8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  0800b488  0800b488  0001b488  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b5ac  0800b5ac  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  0800b5ac  0800b5ac  0001b5ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b5b4  0800b5b4  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b5b4  0800b5b4  0001b5b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b5b8  0800b5b8  0001b5b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  0800b5bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009e98  20000018  0800b5d4  00020018  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20009eb0  0800b5d4  00029eb0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00032764  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000607c  00000000  00000000  000527ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ad8  00000000  00000000  00058828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001830  00000000  00000000  0005a300  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a150  00000000  00000000  0005bb30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002342a  00000000  00000000  00085c80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e7489  00000000  00000000  000a90aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00190533  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006da0  00000000  00000000  00190588  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000018 	.word	0x20000018
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800b470 	.word	0x0800b470

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000001c 	.word	0x2000001c
 80001ec:	0800b470 	.word	0x0800b470

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	; 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	3c01      	subs	r4, #1
 800032c:	bf28      	it	cs
 800032e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000332:	d2e9      	bcs.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004da:	bf08      	it	eq
 80004dc:	4770      	bxeq	lr
 80004de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004e2:	bf04      	itt	eq
 80004e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e71c      	b.n	8000334 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_ul2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	e00a      	b.n	8000522 <__aeabi_l2d+0x16>

0800050c <__aeabi_l2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800051a:	d502      	bpl.n	8000522 <__aeabi_l2d+0x16>
 800051c:	4240      	negs	r0, r0
 800051e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000522:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000526:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052e:	f43f aed8 	beq.w	80002e2 <__adddf3+0xe6>
 8000532:	f04f 0203 	mov.w	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054a:	f1c2 0320 	rsb	r3, r2, #32
 800054e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000552:	fa20 f002 	lsr.w	r0, r0, r2
 8000556:	fa01 fe03 	lsl.w	lr, r1, r3
 800055a:	ea40 000e 	orr.w	r0, r0, lr
 800055e:	fa21 f102 	lsr.w	r1, r1, r2
 8000562:	4414      	add	r4, r2
 8000564:	e6bd      	b.n	80002e2 <__adddf3+0xe6>
 8000566:	bf00      	nop

08000568 <__aeabi_dmul>:
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800056e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000572:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000576:	bf1d      	ittte	ne
 8000578:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800057c:	ea94 0f0c 	teqne	r4, ip
 8000580:	ea95 0f0c 	teqne	r5, ip
 8000584:	f000 f8de 	bleq	8000744 <__aeabi_dmul+0x1dc>
 8000588:	442c      	add	r4, r5
 800058a:	ea81 0603 	eor.w	r6, r1, r3
 800058e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000592:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000596:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800059a:	bf18      	it	ne
 800059c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a8:	d038      	beq.n	800061c <__aeabi_dmul+0xb4>
 80005aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005be:	f04f 0600 	mov.w	r6, #0
 80005c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c6:	f09c 0f00 	teq	ip, #0
 80005ca:	bf18      	it	ne
 80005cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005dc:	d204      	bcs.n	80005e8 <__aeabi_dmul+0x80>
 80005de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005e2:	416d      	adcs	r5, r5
 80005e4:	eb46 0606 	adc.w	r6, r6, r6
 80005e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000600:	bf88      	it	hi
 8000602:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000606:	d81e      	bhi.n	8000646 <__aeabi_dmul+0xde>
 8000608:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800060c:	bf08      	it	eq
 800060e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000612:	f150 0000 	adcs.w	r0, r0, #0
 8000616:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000620:	ea46 0101 	orr.w	r1, r6, r1
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	ea81 0103 	eor.w	r1, r1, r3
 800062c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000630:	bfc2      	ittt	gt
 8000632:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000636:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800063a:	bd70      	popgt	{r4, r5, r6, pc}
 800063c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000640:	f04f 0e00 	mov.w	lr, #0
 8000644:	3c01      	subs	r4, #1
 8000646:	f300 80ab 	bgt.w	80007a0 <__aeabi_dmul+0x238>
 800064a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800064e:	bfde      	ittt	le
 8000650:	2000      	movle	r0, #0
 8000652:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd70      	pople	{r4, r5, r6, pc}
 8000658:	f1c4 0400 	rsb	r4, r4, #0
 800065c:	3c20      	subs	r4, #32
 800065e:	da35      	bge.n	80006cc <__aeabi_dmul+0x164>
 8000660:	340c      	adds	r4, #12
 8000662:	dc1b      	bgt.n	800069c <__aeabi_dmul+0x134>
 8000664:	f104 0414 	add.w	r4, r4, #20
 8000668:	f1c4 0520 	rsb	r5, r4, #32
 800066c:	fa00 f305 	lsl.w	r3, r0, r5
 8000670:	fa20 f004 	lsr.w	r0, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea40 0002 	orr.w	r0, r0, r2
 800067c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000680:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000684:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000688:	fa21 f604 	lsr.w	r6, r1, r4
 800068c:	eb42 0106 	adc.w	r1, r2, r6
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 040c 	rsb	r4, r4, #12
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f304 	lsl.w	r3, r0, r4
 80006a8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ac:	fa01 f204 	lsl.w	r2, r1, r4
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006bc:	f141 0100 	adc.w	r1, r1, #0
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f205 	lsl.w	r2, r0, r5
 80006d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d8:	fa20 f304 	lsr.w	r3, r0, r4
 80006dc:	fa01 f205 	lsl.w	r2, r1, r5
 80006e0:	ea43 0302 	orr.w	r3, r3, r2
 80006e4:	fa21 f004 	lsr.w	r0, r1, r4
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	fa21 f204 	lsr.w	r2, r1, r4
 80006f0:	ea20 0002 	bic.w	r0, r0, r2
 80006f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f094 0f00 	teq	r4, #0
 8000708:	d10f      	bne.n	800072a <__aeabi_dmul+0x1c2>
 800070a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800070e:	0040      	lsls	r0, r0, #1
 8000710:	eb41 0101 	adc.w	r1, r1, r1
 8000714:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3c01      	subeq	r4, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1a6>
 800071e:	ea41 0106 	orr.w	r1, r1, r6
 8000722:	f095 0f00 	teq	r5, #0
 8000726:	bf18      	it	ne
 8000728:	4770      	bxne	lr
 800072a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800072e:	0052      	lsls	r2, r2, #1
 8000730:	eb43 0303 	adc.w	r3, r3, r3
 8000734:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3d01      	subeq	r5, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1c6>
 800073e:	ea43 0306 	orr.w	r3, r3, r6
 8000742:	4770      	bx	lr
 8000744:	ea94 0f0c 	teq	r4, ip
 8000748:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800074c:	bf18      	it	ne
 800074e:	ea95 0f0c 	teqne	r5, ip
 8000752:	d00c      	beq.n	800076e <__aeabi_dmul+0x206>
 8000754:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000758:	bf18      	it	ne
 800075a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075e:	d1d1      	bne.n	8000704 <__aeabi_dmul+0x19c>
 8000760:	ea81 0103 	eor.w	r1, r1, r3
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd70      	pop	{r4, r5, r6, pc}
 800076e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000772:	bf06      	itte	eq
 8000774:	4610      	moveq	r0, r2
 8000776:	4619      	moveq	r1, r3
 8000778:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077c:	d019      	beq.n	80007b2 <__aeabi_dmul+0x24a>
 800077e:	ea94 0f0c 	teq	r4, ip
 8000782:	d102      	bne.n	800078a <__aeabi_dmul+0x222>
 8000784:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000788:	d113      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800078a:	ea95 0f0c 	teq	r5, ip
 800078e:	d105      	bne.n	800079c <__aeabi_dmul+0x234>
 8000790:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000794:	bf1c      	itt	ne
 8000796:	4610      	movne	r0, r2
 8000798:	4619      	movne	r1, r3
 800079a:	d10a      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800079c:	ea81 0103 	eor.w	r1, r1, r3
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ac:	f04f 0000 	mov.w	r0, #0
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ba:	bd70      	pop	{r4, r5, r6, pc}

080007bc <__aeabi_ddiv>:
 80007bc:	b570      	push	{r4, r5, r6, lr}
 80007be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ca:	bf1d      	ittte	ne
 80007cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d0:	ea94 0f0c 	teqne	r4, ip
 80007d4:	ea95 0f0c 	teqne	r5, ip
 80007d8:	f000 f8a7 	bleq	800092a <__aeabi_ddiv+0x16e>
 80007dc:	eba4 0405 	sub.w	r4, r4, r5
 80007e0:	ea81 0e03 	eor.w	lr, r1, r3
 80007e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007ec:	f000 8088 	beq.w	8000900 <__aeabi_ddiv+0x144>
 80007f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000800:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000804:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000808:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800080c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000810:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000814:	429d      	cmp	r5, r3
 8000816:	bf08      	it	eq
 8000818:	4296      	cmpeq	r6, r2
 800081a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800081e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000822:	d202      	bcs.n	800082a <__aeabi_ddiv+0x6e>
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	1ab6      	subs	r6, r6, r2
 800082c:	eb65 0503 	sbc.w	r5, r5, r3
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800083a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000898:	ea55 0e06 	orrs.w	lr, r5, r6
 800089c:	d018      	beq.n	80008d0 <__aeabi_ddiv+0x114>
 800089e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ba:	d1c0      	bne.n	800083e <__aeabi_ddiv+0x82>
 80008bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c0:	d10b      	bne.n	80008da <__aeabi_ddiv+0x11e>
 80008c2:	ea41 0100 	orr.w	r1, r1, r0
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ce:	e7b6      	b.n	800083e <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d4:	bf04      	itt	eq
 80008d6:	4301      	orreq	r1, r0
 80008d8:	2000      	moveq	r0, #0
 80008da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008de:	bf88      	it	hi
 80008e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e4:	f63f aeaf 	bhi.w	8000646 <__aeabi_dmul+0xde>
 80008e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008ec:	bf04      	itt	eq
 80008ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f6:	f150 0000 	adcs.w	r0, r0, #0
 80008fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	pop	{r4, r5, r6, pc}
 8000900:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000904:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000908:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800090c:	bfc2      	ittt	gt
 800090e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000912:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000916:	bd70      	popgt	{r4, r5, r6, pc}
 8000918:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800091c:	f04f 0e00 	mov.w	lr, #0
 8000920:	3c01      	subs	r4, #1
 8000922:	e690      	b.n	8000646 <__aeabi_dmul+0xde>
 8000924:	ea45 0e06 	orr.w	lr, r5, r6
 8000928:	e68d      	b.n	8000646 <__aeabi_dmul+0xde>
 800092a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	bf08      	it	eq
 8000934:	ea95 0f0c 	teqeq	r5, ip
 8000938:	f43f af3b 	beq.w	80007b2 <__aeabi_dmul+0x24a>
 800093c:	ea94 0f0c 	teq	r4, ip
 8000940:	d10a      	bne.n	8000958 <__aeabi_ddiv+0x19c>
 8000942:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000946:	f47f af34 	bne.w	80007b2 <__aeabi_dmul+0x24a>
 800094a:	ea95 0f0c 	teq	r5, ip
 800094e:	f47f af25 	bne.w	800079c <__aeabi_dmul+0x234>
 8000952:	4610      	mov	r0, r2
 8000954:	4619      	mov	r1, r3
 8000956:	e72c      	b.n	80007b2 <__aeabi_dmul+0x24a>
 8000958:	ea95 0f0c 	teq	r5, ip
 800095c:	d106      	bne.n	800096c <__aeabi_ddiv+0x1b0>
 800095e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000962:	f43f aefd 	beq.w	8000760 <__aeabi_dmul+0x1f8>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e722      	b.n	80007b2 <__aeabi_dmul+0x24a>
 800096c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000970:	bf18      	it	ne
 8000972:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000976:	f47f aec5 	bne.w	8000704 <__aeabi_dmul+0x19c>
 800097a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097e:	f47f af0d 	bne.w	800079c <__aeabi_dmul+0x234>
 8000982:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000986:	f47f aeeb 	bne.w	8000760 <__aeabi_dmul+0x1f8>
 800098a:	e712      	b.n	80007b2 <__aeabi_dmul+0x24a>

0800098c <__gedf2>:
 800098c:	f04f 3cff 	mov.w	ip, #4294967295
 8000990:	e006      	b.n	80009a0 <__cmpdf2+0x4>
 8000992:	bf00      	nop

08000994 <__ledf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	e002      	b.n	80009a0 <__cmpdf2+0x4>
 800099a:	bf00      	nop

0800099c <__cmpdf2>:
 800099c:	f04f 0c01 	mov.w	ip, #1
 80009a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009b6:	d01b      	beq.n	80009f0 <__cmpdf2+0x54>
 80009b8:	b001      	add	sp, #4
 80009ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009be:	bf0c      	ite	eq
 80009c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009c4:	ea91 0f03 	teqne	r1, r3
 80009c8:	bf02      	ittt	eq
 80009ca:	ea90 0f02 	teqeq	r0, r2
 80009ce:	2000      	moveq	r0, #0
 80009d0:	4770      	bxeq	lr
 80009d2:	f110 0f00 	cmn.w	r0, #0
 80009d6:	ea91 0f03 	teq	r1, r3
 80009da:	bf58      	it	pl
 80009dc:	4299      	cmppl	r1, r3
 80009de:	bf08      	it	eq
 80009e0:	4290      	cmpeq	r0, r2
 80009e2:	bf2c      	ite	cs
 80009e4:	17d8      	asrcs	r0, r3, #31
 80009e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ea:	f040 0001 	orr.w	r0, r0, #1
 80009ee:	4770      	bx	lr
 80009f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d102      	bne.n	8000a00 <__cmpdf2+0x64>
 80009fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009fe:	d107      	bne.n	8000a10 <__cmpdf2+0x74>
 8000a00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	d1d6      	bne.n	80009b8 <__cmpdf2+0x1c>
 8000a0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a0e:	d0d3      	beq.n	80009b8 <__cmpdf2+0x1c>
 8000a10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdrcmple>:
 8000a18:	4684      	mov	ip, r0
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4662      	mov	r2, ip
 8000a1e:	468c      	mov	ip, r1
 8000a20:	4619      	mov	r1, r3
 8000a22:	4663      	mov	r3, ip
 8000a24:	e000      	b.n	8000a28 <__aeabi_cdcmpeq>
 8000a26:	bf00      	nop

08000a28 <__aeabi_cdcmpeq>:
 8000a28:	b501      	push	{r0, lr}
 8000a2a:	f7ff ffb7 	bl	800099c <__cmpdf2>
 8000a2e:	2800      	cmp	r0, #0
 8000a30:	bf48      	it	mi
 8000a32:	f110 0f00 	cmnmi.w	r0, #0
 8000a36:	bd01      	pop	{r0, pc}

08000a38 <__aeabi_dcmpeq>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff fff4 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a40:	bf0c      	ite	eq
 8000a42:	2001      	moveq	r0, #1
 8000a44:	2000      	movne	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmplt>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffea 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a54:	bf34      	ite	cc
 8000a56:	2001      	movcc	r0, #1
 8000a58:	2000      	movcs	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmple>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffe0 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a68:	bf94      	ite	ls
 8000a6a:	2001      	movls	r0, #1
 8000a6c:	2000      	movhi	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpge>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffce 	bl	8000a18 <__aeabi_cdrcmple>
 8000a7c:	bf94      	ite	ls
 8000a7e:	2001      	movls	r0, #1
 8000a80:	2000      	movhi	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmpgt>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffc4 	bl	8000a18 <__aeabi_cdrcmple>
 8000a90:	bf34      	ite	cc
 8000a92:	2001      	movcc	r0, #1
 8000a94:	2000      	movcs	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2iz>:
 8000a9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa4:	d215      	bcs.n	8000ad2 <__aeabi_d2iz+0x36>
 8000aa6:	d511      	bpl.n	8000acc <__aeabi_d2iz+0x30>
 8000aa8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab0:	d912      	bls.n	8000ad8 <__aeabi_d2iz+0x3c>
 8000ab2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000abe:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ac2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac6:	bf18      	it	ne
 8000ac8:	4240      	negne	r0, r0
 8000aca:	4770      	bx	lr
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ad6:	d105      	bne.n	8000ae4 <__aeabi_d2iz+0x48>
 8000ad8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000adc:	bf08      	it	eq
 8000ade:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ae2:	4770      	bx	lr
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_d2f>:
 8000aec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000af4:	bf24      	itt	cs
 8000af6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000afa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000afe:	d90d      	bls.n	8000b1c <__aeabi_d2f+0x30>
 8000b00:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b04:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b08:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b0c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b10:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b14:	bf08      	it	eq
 8000b16:	f020 0001 	biceq.w	r0, r0, #1
 8000b1a:	4770      	bx	lr
 8000b1c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b20:	d121      	bne.n	8000b66 <__aeabi_d2f+0x7a>
 8000b22:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b26:	bfbc      	itt	lt
 8000b28:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b2c:	4770      	bxlt	lr
 8000b2e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b32:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b36:	f1c2 0218 	rsb	r2, r2, #24
 8000b3a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b3e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b42:	fa20 f002 	lsr.w	r0, r0, r2
 8000b46:	bf18      	it	ne
 8000b48:	f040 0001 	orrne.w	r0, r0, #1
 8000b4c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b50:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b54:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b58:	ea40 000c 	orr.w	r0, r0, ip
 8000b5c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b60:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b64:	e7cc      	b.n	8000b00 <__aeabi_d2f+0x14>
 8000b66:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b6a:	d107      	bne.n	8000b7c <__aeabi_d2f+0x90>
 8000b6c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b70:	bf1e      	ittt	ne
 8000b72:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b76:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b7a:	4770      	bxne	lr
 8000b7c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b80:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b84:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop

08000b8c <__aeabi_uldivmod>:
 8000b8c:	b953      	cbnz	r3, 8000ba4 <__aeabi_uldivmod+0x18>
 8000b8e:	b94a      	cbnz	r2, 8000ba4 <__aeabi_uldivmod+0x18>
 8000b90:	2900      	cmp	r1, #0
 8000b92:	bf08      	it	eq
 8000b94:	2800      	cmpeq	r0, #0
 8000b96:	bf1c      	itt	ne
 8000b98:	f04f 31ff 	movne.w	r1, #4294967295
 8000b9c:	f04f 30ff 	movne.w	r0, #4294967295
 8000ba0:	f000 b96e 	b.w	8000e80 <__aeabi_idiv0>
 8000ba4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ba8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bac:	f000 f806 	bl	8000bbc <__udivmoddi4>
 8000bb0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bb8:	b004      	add	sp, #16
 8000bba:	4770      	bx	lr

08000bbc <__udivmoddi4>:
 8000bbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bc0:	9d08      	ldr	r5, [sp, #32]
 8000bc2:	4604      	mov	r4, r0
 8000bc4:	468c      	mov	ip, r1
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	f040 8083 	bne.w	8000cd2 <__udivmoddi4+0x116>
 8000bcc:	428a      	cmp	r2, r1
 8000bce:	4617      	mov	r7, r2
 8000bd0:	d947      	bls.n	8000c62 <__udivmoddi4+0xa6>
 8000bd2:	fab2 f282 	clz	r2, r2
 8000bd6:	b142      	cbz	r2, 8000bea <__udivmoddi4+0x2e>
 8000bd8:	f1c2 0020 	rsb	r0, r2, #32
 8000bdc:	fa24 f000 	lsr.w	r0, r4, r0
 8000be0:	4091      	lsls	r1, r2
 8000be2:	4097      	lsls	r7, r2
 8000be4:	ea40 0c01 	orr.w	ip, r0, r1
 8000be8:	4094      	lsls	r4, r2
 8000bea:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000bee:	0c23      	lsrs	r3, r4, #16
 8000bf0:	fbbc f6f8 	udiv	r6, ip, r8
 8000bf4:	fa1f fe87 	uxth.w	lr, r7
 8000bf8:	fb08 c116 	mls	r1, r8, r6, ip
 8000bfc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c00:	fb06 f10e 	mul.w	r1, r6, lr
 8000c04:	4299      	cmp	r1, r3
 8000c06:	d909      	bls.n	8000c1c <__udivmoddi4+0x60>
 8000c08:	18fb      	adds	r3, r7, r3
 8000c0a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c0e:	f080 8119 	bcs.w	8000e44 <__udivmoddi4+0x288>
 8000c12:	4299      	cmp	r1, r3
 8000c14:	f240 8116 	bls.w	8000e44 <__udivmoddi4+0x288>
 8000c18:	3e02      	subs	r6, #2
 8000c1a:	443b      	add	r3, r7
 8000c1c:	1a5b      	subs	r3, r3, r1
 8000c1e:	b2a4      	uxth	r4, r4
 8000c20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c24:	fb08 3310 	mls	r3, r8, r0, r3
 8000c28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c2c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c30:	45a6      	cmp	lr, r4
 8000c32:	d909      	bls.n	8000c48 <__udivmoddi4+0x8c>
 8000c34:	193c      	adds	r4, r7, r4
 8000c36:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c3a:	f080 8105 	bcs.w	8000e48 <__udivmoddi4+0x28c>
 8000c3e:	45a6      	cmp	lr, r4
 8000c40:	f240 8102 	bls.w	8000e48 <__udivmoddi4+0x28c>
 8000c44:	3802      	subs	r0, #2
 8000c46:	443c      	add	r4, r7
 8000c48:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c4c:	eba4 040e 	sub.w	r4, r4, lr
 8000c50:	2600      	movs	r6, #0
 8000c52:	b11d      	cbz	r5, 8000c5c <__udivmoddi4+0xa0>
 8000c54:	40d4      	lsrs	r4, r2
 8000c56:	2300      	movs	r3, #0
 8000c58:	e9c5 4300 	strd	r4, r3, [r5]
 8000c5c:	4631      	mov	r1, r6
 8000c5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c62:	b902      	cbnz	r2, 8000c66 <__udivmoddi4+0xaa>
 8000c64:	deff      	udf	#255	; 0xff
 8000c66:	fab2 f282 	clz	r2, r2
 8000c6a:	2a00      	cmp	r2, #0
 8000c6c:	d150      	bne.n	8000d10 <__udivmoddi4+0x154>
 8000c6e:	1bcb      	subs	r3, r1, r7
 8000c70:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c74:	fa1f f887 	uxth.w	r8, r7
 8000c78:	2601      	movs	r6, #1
 8000c7a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c7e:	0c21      	lsrs	r1, r4, #16
 8000c80:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c88:	fb08 f30c 	mul.w	r3, r8, ip
 8000c8c:	428b      	cmp	r3, r1
 8000c8e:	d907      	bls.n	8000ca0 <__udivmoddi4+0xe4>
 8000c90:	1879      	adds	r1, r7, r1
 8000c92:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c96:	d202      	bcs.n	8000c9e <__udivmoddi4+0xe2>
 8000c98:	428b      	cmp	r3, r1
 8000c9a:	f200 80e9 	bhi.w	8000e70 <__udivmoddi4+0x2b4>
 8000c9e:	4684      	mov	ip, r0
 8000ca0:	1ac9      	subs	r1, r1, r3
 8000ca2:	b2a3      	uxth	r3, r4
 8000ca4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ca8:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cac:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cb0:	fb08 f800 	mul.w	r8, r8, r0
 8000cb4:	45a0      	cmp	r8, r4
 8000cb6:	d907      	bls.n	8000cc8 <__udivmoddi4+0x10c>
 8000cb8:	193c      	adds	r4, r7, r4
 8000cba:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cbe:	d202      	bcs.n	8000cc6 <__udivmoddi4+0x10a>
 8000cc0:	45a0      	cmp	r8, r4
 8000cc2:	f200 80d9 	bhi.w	8000e78 <__udivmoddi4+0x2bc>
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	eba4 0408 	sub.w	r4, r4, r8
 8000ccc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cd0:	e7bf      	b.n	8000c52 <__udivmoddi4+0x96>
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d909      	bls.n	8000cea <__udivmoddi4+0x12e>
 8000cd6:	2d00      	cmp	r5, #0
 8000cd8:	f000 80b1 	beq.w	8000e3e <__udivmoddi4+0x282>
 8000cdc:	2600      	movs	r6, #0
 8000cde:	e9c5 0100 	strd	r0, r1, [r5]
 8000ce2:	4630      	mov	r0, r6
 8000ce4:	4631      	mov	r1, r6
 8000ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cea:	fab3 f683 	clz	r6, r3
 8000cee:	2e00      	cmp	r6, #0
 8000cf0:	d14a      	bne.n	8000d88 <__udivmoddi4+0x1cc>
 8000cf2:	428b      	cmp	r3, r1
 8000cf4:	d302      	bcc.n	8000cfc <__udivmoddi4+0x140>
 8000cf6:	4282      	cmp	r2, r0
 8000cf8:	f200 80b8 	bhi.w	8000e6c <__udivmoddi4+0x2b0>
 8000cfc:	1a84      	subs	r4, r0, r2
 8000cfe:	eb61 0103 	sbc.w	r1, r1, r3
 8000d02:	2001      	movs	r0, #1
 8000d04:	468c      	mov	ip, r1
 8000d06:	2d00      	cmp	r5, #0
 8000d08:	d0a8      	beq.n	8000c5c <__udivmoddi4+0xa0>
 8000d0a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d0e:	e7a5      	b.n	8000c5c <__udivmoddi4+0xa0>
 8000d10:	f1c2 0320 	rsb	r3, r2, #32
 8000d14:	fa20 f603 	lsr.w	r6, r0, r3
 8000d18:	4097      	lsls	r7, r2
 8000d1a:	fa01 f002 	lsl.w	r0, r1, r2
 8000d1e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d22:	40d9      	lsrs	r1, r3
 8000d24:	4330      	orrs	r0, r6
 8000d26:	0c03      	lsrs	r3, r0, #16
 8000d28:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d2c:	fa1f f887 	uxth.w	r8, r7
 8000d30:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d34:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d38:	fb06 f108 	mul.w	r1, r6, r8
 8000d3c:	4299      	cmp	r1, r3
 8000d3e:	fa04 f402 	lsl.w	r4, r4, r2
 8000d42:	d909      	bls.n	8000d58 <__udivmoddi4+0x19c>
 8000d44:	18fb      	adds	r3, r7, r3
 8000d46:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d4a:	f080 808d 	bcs.w	8000e68 <__udivmoddi4+0x2ac>
 8000d4e:	4299      	cmp	r1, r3
 8000d50:	f240 808a 	bls.w	8000e68 <__udivmoddi4+0x2ac>
 8000d54:	3e02      	subs	r6, #2
 8000d56:	443b      	add	r3, r7
 8000d58:	1a5b      	subs	r3, r3, r1
 8000d5a:	b281      	uxth	r1, r0
 8000d5c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d60:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d68:	fb00 f308 	mul.w	r3, r0, r8
 8000d6c:	428b      	cmp	r3, r1
 8000d6e:	d907      	bls.n	8000d80 <__udivmoddi4+0x1c4>
 8000d70:	1879      	adds	r1, r7, r1
 8000d72:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d76:	d273      	bcs.n	8000e60 <__udivmoddi4+0x2a4>
 8000d78:	428b      	cmp	r3, r1
 8000d7a:	d971      	bls.n	8000e60 <__udivmoddi4+0x2a4>
 8000d7c:	3802      	subs	r0, #2
 8000d7e:	4439      	add	r1, r7
 8000d80:	1acb      	subs	r3, r1, r3
 8000d82:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d86:	e778      	b.n	8000c7a <__udivmoddi4+0xbe>
 8000d88:	f1c6 0c20 	rsb	ip, r6, #32
 8000d8c:	fa03 f406 	lsl.w	r4, r3, r6
 8000d90:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d94:	431c      	orrs	r4, r3
 8000d96:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d9a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d9e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000da2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000da6:	431f      	orrs	r7, r3
 8000da8:	0c3b      	lsrs	r3, r7, #16
 8000daa:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dae:	fa1f f884 	uxth.w	r8, r4
 8000db2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000db6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dba:	fb09 fa08 	mul.w	sl, r9, r8
 8000dbe:	458a      	cmp	sl, r1
 8000dc0:	fa02 f206 	lsl.w	r2, r2, r6
 8000dc4:	fa00 f306 	lsl.w	r3, r0, r6
 8000dc8:	d908      	bls.n	8000ddc <__udivmoddi4+0x220>
 8000dca:	1861      	adds	r1, r4, r1
 8000dcc:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dd0:	d248      	bcs.n	8000e64 <__udivmoddi4+0x2a8>
 8000dd2:	458a      	cmp	sl, r1
 8000dd4:	d946      	bls.n	8000e64 <__udivmoddi4+0x2a8>
 8000dd6:	f1a9 0902 	sub.w	r9, r9, #2
 8000dda:	4421      	add	r1, r4
 8000ddc:	eba1 010a 	sub.w	r1, r1, sl
 8000de0:	b2bf      	uxth	r7, r7
 8000de2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000de6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000dea:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000dee:	fb00 f808 	mul.w	r8, r0, r8
 8000df2:	45b8      	cmp	r8, r7
 8000df4:	d907      	bls.n	8000e06 <__udivmoddi4+0x24a>
 8000df6:	19e7      	adds	r7, r4, r7
 8000df8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dfc:	d22e      	bcs.n	8000e5c <__udivmoddi4+0x2a0>
 8000dfe:	45b8      	cmp	r8, r7
 8000e00:	d92c      	bls.n	8000e5c <__udivmoddi4+0x2a0>
 8000e02:	3802      	subs	r0, #2
 8000e04:	4427      	add	r7, r4
 8000e06:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e0a:	eba7 0708 	sub.w	r7, r7, r8
 8000e0e:	fba0 8902 	umull	r8, r9, r0, r2
 8000e12:	454f      	cmp	r7, r9
 8000e14:	46c6      	mov	lr, r8
 8000e16:	4649      	mov	r1, r9
 8000e18:	d31a      	bcc.n	8000e50 <__udivmoddi4+0x294>
 8000e1a:	d017      	beq.n	8000e4c <__udivmoddi4+0x290>
 8000e1c:	b15d      	cbz	r5, 8000e36 <__udivmoddi4+0x27a>
 8000e1e:	ebb3 020e 	subs.w	r2, r3, lr
 8000e22:	eb67 0701 	sbc.w	r7, r7, r1
 8000e26:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e2a:	40f2      	lsrs	r2, r6
 8000e2c:	ea4c 0202 	orr.w	r2, ip, r2
 8000e30:	40f7      	lsrs	r7, r6
 8000e32:	e9c5 2700 	strd	r2, r7, [r5]
 8000e36:	2600      	movs	r6, #0
 8000e38:	4631      	mov	r1, r6
 8000e3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e3e:	462e      	mov	r6, r5
 8000e40:	4628      	mov	r0, r5
 8000e42:	e70b      	b.n	8000c5c <__udivmoddi4+0xa0>
 8000e44:	4606      	mov	r6, r0
 8000e46:	e6e9      	b.n	8000c1c <__udivmoddi4+0x60>
 8000e48:	4618      	mov	r0, r3
 8000e4a:	e6fd      	b.n	8000c48 <__udivmoddi4+0x8c>
 8000e4c:	4543      	cmp	r3, r8
 8000e4e:	d2e5      	bcs.n	8000e1c <__udivmoddi4+0x260>
 8000e50:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e54:	eb69 0104 	sbc.w	r1, r9, r4
 8000e58:	3801      	subs	r0, #1
 8000e5a:	e7df      	b.n	8000e1c <__udivmoddi4+0x260>
 8000e5c:	4608      	mov	r0, r1
 8000e5e:	e7d2      	b.n	8000e06 <__udivmoddi4+0x24a>
 8000e60:	4660      	mov	r0, ip
 8000e62:	e78d      	b.n	8000d80 <__udivmoddi4+0x1c4>
 8000e64:	4681      	mov	r9, r0
 8000e66:	e7b9      	b.n	8000ddc <__udivmoddi4+0x220>
 8000e68:	4666      	mov	r6, ip
 8000e6a:	e775      	b.n	8000d58 <__udivmoddi4+0x19c>
 8000e6c:	4630      	mov	r0, r6
 8000e6e:	e74a      	b.n	8000d06 <__udivmoddi4+0x14a>
 8000e70:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e74:	4439      	add	r1, r7
 8000e76:	e713      	b.n	8000ca0 <__udivmoddi4+0xe4>
 8000e78:	3802      	subs	r0, #2
 8000e7a:	443c      	add	r4, r7
 8000e7c:	e724      	b.n	8000cc8 <__udivmoddi4+0x10c>
 8000e7e:	bf00      	nop

08000e80 <__aeabi_idiv0>:
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop

08000e84 <buzzer>:

#include "board_lib.h"
#include "bsp_buzzer.h"

void buzzer(uint16_t freq)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b083      	sub	sp, #12
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	80fb      	strh	r3, [r7, #6]
	if (freq == 0)
 8000e8e:	88fb      	ldrh	r3, [r7, #6]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d104      	bne.n	8000e9e <buzzer+0x1a>
	{
		htim12.Instance->CCR1 = 0;
 8000e94:	4b0b      	ldr	r3, [pc, #44]	; (8000ec4 <buzzer+0x40>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	2200      	movs	r2, #0
 8000e9a:	635a      	str	r2, [r3, #52]	; 0x34
	else
	{
		__HAL_TIM_SET_PRESCALER(&htim12, (84 * 500/freq));
		htim12.Instance->CCR1 = 500;
	}
}
 8000e9c:	e00c      	b.n	8000eb8 <buzzer+0x34>
		__HAL_TIM_SET_PRESCALER(&htim12, (84 * 500/freq));
 8000e9e:	88fb      	ldrh	r3, [r7, #6]
 8000ea0:	f24a 4210 	movw	r2, #42000	; 0xa410
 8000ea4:	fb92 f2f3 	sdiv	r2, r2, r3
 8000ea8:	4b06      	ldr	r3, [pc, #24]	; (8000ec4 <buzzer+0x40>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	629a      	str	r2, [r3, #40]	; 0x28
		htim12.Instance->CCR1 = 500;
 8000eae:	4b05      	ldr	r3, [pc, #20]	; (8000ec4 <buzzer+0x40>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000eb6:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000eb8:	bf00      	nop
 8000eba:	370c      	adds	r7, #12
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr
 8000ec4:	20009a04 	.word	0x20009a04

08000ec8 <buzzer_init>:


void buzzer_init()
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
	  HAL_TIM_PWM_Start(&htim12,TIM_CHANNEL_1);
 8000ecc:	2100      	movs	r1, #0
 8000ece:	4804      	ldr	r0, [pc, #16]	; (8000ee0 <buzzer_init+0x18>)
 8000ed0:	f005 f832 	bl	8005f38 <HAL_TIM_PWM_Start>
	  htim12.Instance->CCR1 = 0;
 8000ed4:	4b02      	ldr	r3, [pc, #8]	; (8000ee0 <buzzer_init+0x18>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	2200      	movs	r2, #0
 8000eda:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000edc:	bf00      	nop
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	20009a04 	.word	0x20009a04

08000ee4 <HAL_CAN_RxFifo0MsgPendingCallback>:

/**
 * HAL internal callback function that calls abstracted ISR for ease of use.
 * Define can_ISR() elsewhere in code to define behaviour of CAN receive ISR.
 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
	can_ISR(hcan);
 8000eec:	6878      	ldr	r0, [r7, #4]
 8000eee:	f001 fa83 	bl	80023f8 <can_ISR>
}
 8000ef2:	bf00      	nop
 8000ef4:	3708      	adds	r7, #8
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}

08000efa <can_get_msg>:

HAL_StatusTypeDef can_get_msg(CAN_HandleTypeDef *hcan, CAN_RxHeaderTypeDef *rx_msg_header, uint8_t *rx_buffer)
{
 8000efa:	b580      	push	{r7, lr}
 8000efc:	b084      	sub	sp, #16
 8000efe:	af00      	add	r7, sp, #0
 8000f00:	60f8      	str	r0, [r7, #12]
 8000f02:	60b9      	str	r1, [r7, #8]
 8000f04:	607a      	str	r2, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, rx_msg_header, rx_buffer);
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	68ba      	ldr	r2, [r7, #8]
 8000f0a:	2100      	movs	r1, #0
 8000f0c:	68f8      	ldr	r0, [r7, #12]
 8000f0e:	f003 f8d6 	bl	80040be <HAL_CAN_GetRxMessage>
	return HAL_OK;
 8000f12:	2300      	movs	r3, #0
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	3710      	adds	r7, #16
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}

08000f1c <can_start>:


/**
 * CAN1 and CAN2 are handled slightly differently.
 */
void can_start(CAN_HandleTypeDef *hcan) {
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b08c      	sub	sp, #48	; 0x30
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
    CAN_FilterTypeDef can_filter_st = {0};
 8000f24:	f107 0308 	add.w	r3, r7, #8
 8000f28:	2228      	movs	r2, #40	; 0x28
 8000f2a:	2100      	movs	r1, #0
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f00a fa97 	bl	800b460 <memset>
    can_filter_st.FilterActivation = ENABLE;
 8000f32:	2301      	movs	r3, #1
 8000f34:	62bb      	str	r3, [r7, #40]	; 0x28
	can_filter_st.FilterMode = CAN_FILTERMODE_IDMASK;
 8000f36:	2300      	movs	r3, #0
 8000f38:	623b      	str	r3, [r7, #32]
	can_filter_st.FilterScale = CAN_FILTERSCALE_32BIT;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	627b      	str	r3, [r7, #36]	; 0x24
	can_filter_st.FilterIdHigh = 0x0000;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	60bb      	str	r3, [r7, #8]
	can_filter_st.FilterIdLow = 0x0000;
 8000f42:	2300      	movs	r3, #0
 8000f44:	60fb      	str	r3, [r7, #12]
	can_filter_st.FilterMaskIdHigh = 0x0000;
 8000f46:	2300      	movs	r3, #0
 8000f48:	613b      	str	r3, [r7, #16]
	can_filter_st.FilterMaskIdLow = 0x0000;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	617b      	str	r3, [r7, #20]
    can_filter_st.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	61bb      	str	r3, [r7, #24]
    // can_filter_st.FilterFIFOAssignment = CAN_RX_FIFO1; // Uncomment line if using RX1 queue as well.

	if (hcan->Instance == CAN1) {
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4a10      	ldr	r2, [pc, #64]	; (8000f98 <can_start+0x7c>)
 8000f58:	4293      	cmp	r3, r2
 8000f5a:	d102      	bne.n	8000f62 <can_start+0x46>
	    can_filter_st.FilterBank = 0;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	61fb      	str	r3, [r7, #28]
 8000f60:	e008      	b.n	8000f74 <can_start+0x58>
	} else if (hcan->Instance == CAN2) {
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4a0d      	ldr	r2, [pc, #52]	; (8000f9c <can_start+0x80>)
 8000f68:	4293      	cmp	r3, r2
 8000f6a:	d103      	bne.n	8000f74 <can_start+0x58>
		can_filter_st.SlaveStartFilterBank = 14;
 8000f6c:	230e      	movs	r3, #14
 8000f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
		can_filter_st.FilterBank = 14;
 8000f70:	230e      	movs	r3, #14
 8000f72:	61fb      	str	r3, [r7, #28]
	}

    HAL_CAN_ConfigFilter(hcan, &can_filter_st);
 8000f74:	f107 0308 	add.w	r3, r7, #8
 8000f78:	4619      	mov	r1, r3
 8000f7a:	6878      	ldr	r0, [r7, #4]
 8000f7c:	f002 fea0 	bl	8003cc0 <HAL_CAN_ConfigFilter>
    HAL_CAN_Start(hcan);
 8000f80:	6878      	ldr	r0, [r7, #4]
 8000f82:	f002 ff7d 	bl	8003e80 <HAL_CAN_Start>
    HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000f86:	2102      	movs	r1, #2
 8000f88:	6878      	ldr	r0, [r7, #4]
 8000f8a:	f003 f9aa 	bl	80042e2 <HAL_CAN_ActivateNotification>
    // HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO1_MSG_PENDING); // Uncomment line if using RX1 queue as well.
}
 8000f8e:	bf00      	nop
 8000f90:	3730      	adds	r7, #48	; 0x30
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	40006400 	.word	0x40006400
 8000f9c:	40006800 	.word	0x40006800

08000fa0 <dbus_remote_start>:
/**
 * This function starts the circular DMA for receiving on a UART port. It is specifically
 * written for the UART1 port for DBUS interface from the controller.
 */
HAL_StatusTypeDef dbus_remote_start(uint8_t *pData)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b086      	sub	sp, #24
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
	UART_HandleTypeDef *huart = &DBUS_UART;
 8000fa8:	4b33      	ldr	r3, [pc, #204]	; (8001078 <dbus_remote_start+0xd8>)
 8000faa:	617b      	str	r3, [r7, #20]
	uint32_t *tmp;

	/* Check that a Rx process is not already ongoing */
	if (huart->RxState == HAL_UART_STATE_READY) {
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8000fb2:	b2db      	uxtb	r3, r3
 8000fb4:	2b20      	cmp	r3, #32
 8000fb6:	d15a      	bne.n	800106e <dbus_remote_start+0xce>
		if ((pData == NULL) || (REMOTE_DATA_SIZE == 0U)) {
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d101      	bne.n	8000fc2 <dbus_remote_start+0x22>
			return HAL_ERROR;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	e056      	b.n	8001070 <dbus_remote_start+0xd0>
		}

		/* Process Locked */
		__HAL_LOCK(huart);
 8000fc2:	697b      	ldr	r3, [r7, #20]
 8000fc4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000fc8:	2b01      	cmp	r3, #1
 8000fca:	d101      	bne.n	8000fd0 <dbus_remote_start+0x30>
 8000fcc:	2302      	movs	r3, #2
 8000fce:	e04f      	b.n	8001070 <dbus_remote_start+0xd0>
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

		huart->pRxBuffPtr = pData;
 8000fd8:	687a      	ldr	r2, [r7, #4]
 8000fda:	697b      	ldr	r3, [r7, #20]
 8000fdc:	629a      	str	r2, [r3, #40]	; 0x28
		huart->RxXferSize = REMOTE_DATA_SIZE;
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	2212      	movs	r2, #18
 8000fe2:	859a      	strh	r2, [r3, #44]	; 0x2c

		huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	63da      	str	r2, [r3, #60]	; 0x3c
		huart->RxState = HAL_UART_STATE_BUSY_RX;
 8000fea:	697b      	ldr	r3, [r7, #20]
 8000fec:	2222      	movs	r2, #34	; 0x22
 8000fee:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

		/* Set the UART DMA transfer complete callback */
		huart->hdmarx->XferCpltCallback = dbus_remote_ISR;
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ff6:	4a21      	ldr	r2, [pc, #132]	; (800107c <dbus_remote_start+0xdc>)
 8000ff8:	63da      	str	r2, [r3, #60]	; 0x3c

		/* Set the DMA abort callback */
		huart->hdmarx->XferAbortCallback = NULL;
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ffe:	2200      	movs	r2, #0
 8001000:	651a      	str	r2, [r3, #80]	; 0x50

		/* Enable the DMA stream */
		tmp = (uint32_t *)&pData;
 8001002:	1d3b      	adds	r3, r7, #4
 8001004:	613b      	str	r3, [r7, #16]
		HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, REMOTE_DATA_SIZE);
 8001006:	697b      	ldr	r3, [r7, #20]
 8001008:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	3304      	adds	r3, #4
 8001010:	4619      	mov	r1, r3
 8001012:	693b      	ldr	r3, [r7, #16]
 8001014:	681a      	ldr	r2, [r3, #0]
 8001016:	2312      	movs	r3, #18
 8001018:	f003 fd70 	bl	8004afc <HAL_DMA_Start_IT>

		/* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
		__HAL_UART_CLEAR_OREFLAG(huart);
 800101c:	2300      	movs	r3, #0
 800101e:	60fb      	str	r3, [r7, #12]
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	60fb      	str	r3, [r7, #12]
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	60fb      	str	r3, [r7, #12]
 8001030:	68fb      	ldr	r3, [r7, #12]

		/* Process Unlocked */
		__HAL_UNLOCK(huart);
 8001032:	697b      	ldr	r3, [r7, #20]
 8001034:	2200      	movs	r2, #0
 8001036:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

		/* Enable the UART Parity Error Interrupt */
		SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800103a:	697b      	ldr	r3, [r7, #20]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	68da      	ldr	r2, [r3, #12]
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001048:	60da      	str	r2, [r3, #12]

		/* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
		SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	695a      	ldr	r2, [r3, #20]
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f042 0201 	orr.w	r2, r2, #1
 8001058:	615a      	str	r2, [r3, #20]

		/* Enable the DMA transfer for the receiver request by setting the DMAR bit
	    in the UART CR3 register */
		SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	695a      	ldr	r2, [r3, #20]
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001068:	615a      	str	r2, [r3, #20]

		return HAL_OK;
 800106a:	2300      	movs	r3, #0
 800106c:	e000      	b.n	8001070 <dbus_remote_start+0xd0>
	} else {
		return HAL_BUSY;
 800106e:	2302      	movs	r3, #2
	}
}
 8001070:	4618      	mov	r0, r3
 8001072:	3718      	adds	r7, #24
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	20009ba4 	.word	0x20009ba4
 800107c:	0800354d 	.word	0x0800354d

08001080 <GPIO_ToggleBits>:
 *      Author: Kai Yang
 */

#include "bsp_led.h"

void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin){
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
 8001088:	460b      	mov	r3, r1
 800108a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  /* points to address of GPIOx register and does bitwise XOR with bit GPIO_Pin */
  GPIOx->ODR ^= GPIO_Pin;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	695a      	ldr	r2, [r3, #20]
 8001090:	887b      	ldrh	r3, [r7, #2]
 8001092:	405a      	eors	r2, r3
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	615a      	str	r2, [r3, #20]
}
 8001098:	bf00      	nop
 800109a:	370c      	adds	r7, #12
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr

080010a4 <led_green_off>:

/* calls HAL library function to directly write pin.             */
/* LEDs are active low, so SET (1) == off, while RESET (0) == on */
/* Definitions for LED port and pins are given in main.h file    */
void led_green_off(void){
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_SET);
 80010a8:	2201      	movs	r2, #1
 80010aa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010ae:	4802      	ldr	r0, [pc, #8]	; (80010b8 <led_green_off+0x14>)
 80010b0:	f004 f9b4 	bl	800541c <HAL_GPIO_WritePin>
}
 80010b4:	bf00      	nop
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	40021400 	.word	0x40021400

080010bc <led_on>:

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_SET);
}

void led_on(void){
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);
 80010c0:	2200      	movs	r2, #0
 80010c2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010c6:	4805      	ldr	r0, [pc, #20]	; (80010dc <led_on+0x20>)
 80010c8:	f004 f9a8 	bl	800541c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, GPIO_PIN_RESET);
 80010cc:	2200      	movs	r2, #0
 80010ce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010d2:	4803      	ldr	r0, [pc, #12]	; (80010e0 <led_on+0x24>)
 80010d4:	f004 f9a2 	bl	800541c <HAL_GPIO_WritePin>
}
 80010d8:	bf00      	nop
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	40021000 	.word	0x40021000
 80010e0:	40021400 	.word	0x40021400

080010e4 <led_toggle>:
void led_toggle(void){
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
	GPIO_ToggleBits(GPIOE, GPIO_PIN_11);
 80010e8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010ec:	4804      	ldr	r0, [pc, #16]	; (8001100 <led_toggle+0x1c>)
 80010ee:	f7ff ffc7 	bl	8001080 <GPIO_ToggleBits>
	GPIO_ToggleBits(GPIOF, GPIO_PIN_14);
 80010f2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010f6:	4803      	ldr	r0, [pc, #12]	; (8001104 <led_toggle+0x20>)
 80010f8:	f7ff ffc2 	bl	8001080 <GPIO_ToggleBits>
}
 80010fc:	bf00      	nop
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	40021000 	.word	0x40021000
 8001104:	40021400 	.word	0x40021400

08001108 <HAL_UART_RxCpltCallback>:
{
	HAL_UART_Transmit(huart, tx_buffer, buffer_size, timeout);
	return HAL_OK;
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle) {
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
	usart_ISR(UartHandle);
 8001110:	6878      	ldr	r0, [r7, #4]
 8001112:	f001 fb81 	bl	8002818 <usart_ISR>
}
 8001116:	bf00      	nop
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
	...

08001120 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 8001124:	4b17      	ldr	r3, [pc, #92]	; (8001184 <MX_CAN1_Init+0x64>)
 8001126:	4a18      	ldr	r2, [pc, #96]	; (8001188 <MX_CAN1_Init+0x68>)
 8001128:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 800112a:	4b16      	ldr	r3, [pc, #88]	; (8001184 <MX_CAN1_Init+0x64>)
 800112c:	2203      	movs	r2, #3
 800112e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001130:	4b14      	ldr	r3, [pc, #80]	; (8001184 <MX_CAN1_Init+0x64>)
 8001132:	2200      	movs	r2, #0
 8001134:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001136:	4b13      	ldr	r3, [pc, #76]	; (8001184 <MX_CAN1_Init+0x64>)
 8001138:	2200      	movs	r2, #0
 800113a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_9TQ;
 800113c:	4b11      	ldr	r3, [pc, #68]	; (8001184 <MX_CAN1_Init+0x64>)
 800113e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001142:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 8001144:	4b0f      	ldr	r3, [pc, #60]	; (8001184 <MX_CAN1_Init+0x64>)
 8001146:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 800114a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800114c:	4b0d      	ldr	r3, [pc, #52]	; (8001184 <MX_CAN1_Init+0x64>)
 800114e:	2200      	movs	r2, #0
 8001150:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001152:	4b0c      	ldr	r3, [pc, #48]	; (8001184 <MX_CAN1_Init+0x64>)
 8001154:	2200      	movs	r2, #0
 8001156:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001158:	4b0a      	ldr	r3, [pc, #40]	; (8001184 <MX_CAN1_Init+0x64>)
 800115a:	2200      	movs	r2, #0
 800115c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800115e:	4b09      	ldr	r3, [pc, #36]	; (8001184 <MX_CAN1_Init+0x64>)
 8001160:	2200      	movs	r2, #0
 8001162:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001164:	4b07      	ldr	r3, [pc, #28]	; (8001184 <MX_CAN1_Init+0x64>)
 8001166:	2200      	movs	r2, #0
 8001168:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800116a:	4b06      	ldr	r3, [pc, #24]	; (8001184 <MX_CAN1_Init+0x64>)
 800116c:	2200      	movs	r2, #0
 800116e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001170:	4804      	ldr	r0, [pc, #16]	; (8001184 <MX_CAN1_Init+0x64>)
 8001172:	f002 fca9 	bl	8003ac8 <HAL_CAN_Init>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 800117c:	f000 fb54 	bl	8001828 <Error_Handler>
  }

}
 8001180:	bf00      	nop
 8001182:	bd80      	pop	{r7, pc}
 8001184:	2000980c 	.word	0x2000980c
 8001188:	40006400 	.word	0x40006400

0800118c <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0

  hcan2.Instance = CAN2;
 8001190:	4b17      	ldr	r3, [pc, #92]	; (80011f0 <MX_CAN2_Init+0x64>)
 8001192:	4a18      	ldr	r2, [pc, #96]	; (80011f4 <MX_CAN2_Init+0x68>)
 8001194:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 3;
 8001196:	4b16      	ldr	r3, [pc, #88]	; (80011f0 <MX_CAN2_Init+0x64>)
 8001198:	2203      	movs	r2, #3
 800119a:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 800119c:	4b14      	ldr	r3, [pc, #80]	; (80011f0 <MX_CAN2_Init+0x64>)
 800119e:	2200      	movs	r2, #0
 80011a0:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80011a2:	4b13      	ldr	r3, [pc, #76]	; (80011f0 <MX_CAN2_Init+0x64>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_9TQ;
 80011a8:	4b11      	ldr	r3, [pc, #68]	; (80011f0 <MX_CAN2_Init+0x64>)
 80011aa:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80011ae:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_4TQ;
 80011b0:	4b0f      	ldr	r3, [pc, #60]	; (80011f0 <MX_CAN2_Init+0x64>)
 80011b2:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 80011b6:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 80011b8:	4b0d      	ldr	r3, [pc, #52]	; (80011f0 <MX_CAN2_Init+0x64>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 80011be:	4b0c      	ldr	r3, [pc, #48]	; (80011f0 <MX_CAN2_Init+0x64>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 80011c4:	4b0a      	ldr	r3, [pc, #40]	; (80011f0 <MX_CAN2_Init+0x64>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 80011ca:	4b09      	ldr	r3, [pc, #36]	; (80011f0 <MX_CAN2_Init+0x64>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 80011d0:	4b07      	ldr	r3, [pc, #28]	; (80011f0 <MX_CAN2_Init+0x64>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 80011d6:	4b06      	ldr	r3, [pc, #24]	; (80011f0 <MX_CAN2_Init+0x64>)
 80011d8:	2200      	movs	r2, #0
 80011da:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80011dc:	4804      	ldr	r0, [pc, #16]	; (80011f0 <MX_CAN2_Init+0x64>)
 80011de:	f002 fc73 	bl	8003ac8 <HAL_CAN_Init>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 80011e8:	f000 fb1e 	bl	8001828 <Error_Handler>
  }

}
 80011ec:	bf00      	nop
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	200097e4 	.word	0x200097e4
 80011f4:	40006800 	.word	0x40006800

080011f8 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b08c      	sub	sp, #48	; 0x30
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001200:	f107 031c 	add.w	r3, r7, #28
 8001204:	2200      	movs	r2, #0
 8001206:	601a      	str	r2, [r3, #0]
 8001208:	605a      	str	r2, [r3, #4]
 800120a:	609a      	str	r2, [r3, #8]
 800120c:	60da      	str	r2, [r3, #12]
 800120e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a4a      	ldr	r2, [pc, #296]	; (8001340 <HAL_CAN_MspInit+0x148>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d13d      	bne.n	8001296 <HAL_CAN_MspInit+0x9e>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 800121a:	4b4a      	ldr	r3, [pc, #296]	; (8001344 <HAL_CAN_MspInit+0x14c>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	3301      	adds	r3, #1
 8001220:	4a48      	ldr	r2, [pc, #288]	; (8001344 <HAL_CAN_MspInit+0x14c>)
 8001222:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001224:	4b47      	ldr	r3, [pc, #284]	; (8001344 <HAL_CAN_MspInit+0x14c>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	2b01      	cmp	r3, #1
 800122a:	d10d      	bne.n	8001248 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800122c:	2300      	movs	r3, #0
 800122e:	61bb      	str	r3, [r7, #24]
 8001230:	4b45      	ldr	r3, [pc, #276]	; (8001348 <HAL_CAN_MspInit+0x150>)
 8001232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001234:	4a44      	ldr	r2, [pc, #272]	; (8001348 <HAL_CAN_MspInit+0x150>)
 8001236:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800123a:	6413      	str	r3, [r2, #64]	; 0x40
 800123c:	4b42      	ldr	r3, [pc, #264]	; (8001348 <HAL_CAN_MspInit+0x150>)
 800123e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001240:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001244:	61bb      	str	r3, [r7, #24]
 8001246:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001248:	2300      	movs	r3, #0
 800124a:	617b      	str	r3, [r7, #20]
 800124c:	4b3e      	ldr	r3, [pc, #248]	; (8001348 <HAL_CAN_MspInit+0x150>)
 800124e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001250:	4a3d      	ldr	r2, [pc, #244]	; (8001348 <HAL_CAN_MspInit+0x150>)
 8001252:	f043 0308 	orr.w	r3, r3, #8
 8001256:	6313      	str	r3, [r2, #48]	; 0x30
 8001258:	4b3b      	ldr	r3, [pc, #236]	; (8001348 <HAL_CAN_MspInit+0x150>)
 800125a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125c:	f003 0308 	and.w	r3, r3, #8
 8001260:	617b      	str	r3, [r7, #20]
 8001262:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001264:	2303      	movs	r3, #3
 8001266:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001268:	2302      	movs	r3, #2
 800126a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126c:	2300      	movs	r3, #0
 800126e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001270:	2303      	movs	r3, #3
 8001272:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001274:	2309      	movs	r3, #9
 8001276:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001278:	f107 031c 	add.w	r3, r7, #28
 800127c:	4619      	mov	r1, r3
 800127e:	4833      	ldr	r0, [pc, #204]	; (800134c <HAL_CAN_MspInit+0x154>)
 8001280:	f003 ff20 	bl	80050c4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8001284:	2200      	movs	r2, #0
 8001286:	2105      	movs	r1, #5
 8001288:	2014      	movs	r0, #20
 800128a:	f003 fb5f 	bl	800494c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800128e:	2014      	movs	r0, #20
 8001290:	f003 fb78 	bl	8004984 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 8001294:	e050      	b.n	8001338 <HAL_CAN_MspInit+0x140>
  else if(canHandle->Instance==CAN2)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4a2d      	ldr	r2, [pc, #180]	; (8001350 <HAL_CAN_MspInit+0x158>)
 800129c:	4293      	cmp	r3, r2
 800129e:	d14b      	bne.n	8001338 <HAL_CAN_MspInit+0x140>
    __HAL_RCC_CAN2_CLK_ENABLE();
 80012a0:	2300      	movs	r3, #0
 80012a2:	613b      	str	r3, [r7, #16]
 80012a4:	4b28      	ldr	r3, [pc, #160]	; (8001348 <HAL_CAN_MspInit+0x150>)
 80012a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a8:	4a27      	ldr	r2, [pc, #156]	; (8001348 <HAL_CAN_MspInit+0x150>)
 80012aa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80012ae:	6413      	str	r3, [r2, #64]	; 0x40
 80012b0:	4b25      	ldr	r3, [pc, #148]	; (8001348 <HAL_CAN_MspInit+0x150>)
 80012b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80012b8:	613b      	str	r3, [r7, #16]
 80012ba:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 80012bc:	4b21      	ldr	r3, [pc, #132]	; (8001344 <HAL_CAN_MspInit+0x14c>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	3301      	adds	r3, #1
 80012c2:	4a20      	ldr	r2, [pc, #128]	; (8001344 <HAL_CAN_MspInit+0x14c>)
 80012c4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80012c6:	4b1f      	ldr	r3, [pc, #124]	; (8001344 <HAL_CAN_MspInit+0x14c>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	2b01      	cmp	r3, #1
 80012cc:	d10d      	bne.n	80012ea <HAL_CAN_MspInit+0xf2>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80012ce:	2300      	movs	r3, #0
 80012d0:	60fb      	str	r3, [r7, #12]
 80012d2:	4b1d      	ldr	r3, [pc, #116]	; (8001348 <HAL_CAN_MspInit+0x150>)
 80012d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d6:	4a1c      	ldr	r2, [pc, #112]	; (8001348 <HAL_CAN_MspInit+0x150>)
 80012d8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80012dc:	6413      	str	r3, [r2, #64]	; 0x40
 80012de:	4b1a      	ldr	r3, [pc, #104]	; (8001348 <HAL_CAN_MspInit+0x150>)
 80012e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012e6:	60fb      	str	r3, [r7, #12]
 80012e8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ea:	2300      	movs	r3, #0
 80012ec:	60bb      	str	r3, [r7, #8]
 80012ee:	4b16      	ldr	r3, [pc, #88]	; (8001348 <HAL_CAN_MspInit+0x150>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f2:	4a15      	ldr	r2, [pc, #84]	; (8001348 <HAL_CAN_MspInit+0x150>)
 80012f4:	f043 0302 	orr.w	r3, r3, #2
 80012f8:	6313      	str	r3, [r2, #48]	; 0x30
 80012fa:	4b13      	ldr	r3, [pc, #76]	; (8001348 <HAL_CAN_MspInit+0x150>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fe:	f003 0302 	and.w	r3, r3, #2
 8001302:	60bb      	str	r3, [r7, #8]
 8001304:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001306:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800130a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800130c:	2302      	movs	r3, #2
 800130e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001310:	2300      	movs	r3, #0
 8001312:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001314:	2303      	movs	r3, #3
 8001316:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8001318:	2309      	movs	r3, #9
 800131a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800131c:	f107 031c 	add.w	r3, r7, #28
 8001320:	4619      	mov	r1, r3
 8001322:	480c      	ldr	r0, [pc, #48]	; (8001354 <HAL_CAN_MspInit+0x15c>)
 8001324:	f003 fece 	bl	80050c4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 5, 0);
 8001328:	2200      	movs	r2, #0
 800132a:	2105      	movs	r1, #5
 800132c:	2040      	movs	r0, #64	; 0x40
 800132e:	f003 fb0d 	bl	800494c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8001332:	2040      	movs	r0, #64	; 0x40
 8001334:	f003 fb26 	bl	8004984 <HAL_NVIC_EnableIRQ>
}
 8001338:	bf00      	nop
 800133a:	3730      	adds	r7, #48	; 0x30
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	40006400 	.word	0x40006400
 8001344:	20000048 	.word	0x20000048
 8001348:	40023800 	.word	0x40023800
 800134c:	40020c00 	.word	0x40020c00
 8001350:	40006800 	.word	0x40006800
 8001354:	40020400 	.word	0x40020400

08001358 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800135e:	2300      	movs	r3, #0
 8001360:	607b      	str	r3, [r7, #4]
 8001362:	4b23      	ldr	r3, [pc, #140]	; (80013f0 <MX_DMA_Init+0x98>)
 8001364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001366:	4a22      	ldr	r2, [pc, #136]	; (80013f0 <MX_DMA_Init+0x98>)
 8001368:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800136c:	6313      	str	r3, [r2, #48]	; 0x30
 800136e:	4b20      	ldr	r3, [pc, #128]	; (80013f0 <MX_DMA_Init+0x98>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001372:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001376:	607b      	str	r3, [r7, #4]
 8001378:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800137a:	2300      	movs	r3, #0
 800137c:	603b      	str	r3, [r7, #0]
 800137e:	4b1c      	ldr	r3, [pc, #112]	; (80013f0 <MX_DMA_Init+0x98>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001382:	4a1b      	ldr	r2, [pc, #108]	; (80013f0 <MX_DMA_Init+0x98>)
 8001384:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001388:	6313      	str	r3, [r2, #48]	; 0x30
 800138a:	4b19      	ldr	r3, [pc, #100]	; (80013f0 <MX_DMA_Init+0x98>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001392:	603b      	str	r3, [r7, #0]
 8001394:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8001396:	2200      	movs	r2, #0
 8001398:	2105      	movs	r1, #5
 800139a:	200e      	movs	r0, #14
 800139c:	f003 fad6 	bl	800494c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80013a0:	200e      	movs	r0, #14
 80013a2:	f003 faef 	bl	8004984 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 80013a6:	2200      	movs	r2, #0
 80013a8:	2105      	movs	r1, #5
 80013aa:	2039      	movs	r0, #57	; 0x39
 80013ac:	f003 face 	bl	800494c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80013b0:	2039      	movs	r0, #57	; 0x39
 80013b2:	f003 fae7 	bl	8004984 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 80013b6:	2200      	movs	r2, #0
 80013b8:	2105      	movs	r1, #5
 80013ba:	203a      	movs	r0, #58	; 0x3a
 80013bc:	f003 fac6 	bl	800494c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80013c0:	203a      	movs	r0, #58	; 0x3a
 80013c2:	f003 fadf 	bl	8004984 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 80013c6:	2200      	movs	r2, #0
 80013c8:	2105      	movs	r1, #5
 80013ca:	203b      	movs	r0, #59	; 0x3b
 80013cc:	f003 fabe 	bl	800494c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80013d0:	203b      	movs	r0, #59	; 0x3b
 80013d2:	f003 fad7 	bl	8004984 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 5, 0);
 80013d6:	2200      	movs	r2, #0
 80013d8:	2105      	movs	r1, #5
 80013da:	203c      	movs	r0, #60	; 0x3c
 80013dc:	f003 fab6 	bl	800494c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 80013e0:	203c      	movs	r0, #60	; 0x3c
 80013e2:	f003 facf 	bl	8004984 <HAL_NVIC_EnableIRQ>

}
 80013e6:	bf00      	nop
 80013e8:	3708      	adds	r7, #8
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	40023800 	.word	0x40023800

080013f4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
//	startup_task();
	gimbal_data_flag = osEventFlagsNew(NULL);
 80013f8:	2000      	movs	r0, #0
 80013fa:	f006 fd7d 	bl	8007ef8 <osEventFlagsNew>
 80013fe:	4603      	mov	r3, r0
 8001400:	4a21      	ldr	r2, [pc, #132]	; (8001488 <MX_FREERTOS_Init+0x94>)
 8001402:	6013      	str	r3, [r2, #0]
	chassis_data_flag = osEventFlagsNew(NULL);
 8001404:	2000      	movs	r0, #0
 8001406:	f006 fd77 	bl	8007ef8 <osEventFlagsNew>
 800140a:	4603      	mov	r3, r0
 800140c:	4a1f      	ldr	r2, [pc, #124]	; (800148c <MX_FREERTOS_Init+0x98>)
 800140e:	6013      	str	r3, [r2, #0]
	gun_data_flag = osEventFlagsNew(NULL);
 8001410:	2000      	movs	r0, #0
 8001412:	f006 fd71 	bl	8007ef8 <osEventFlagsNew>
 8001416:	4603      	mov	r3, r0
 8001418:	4a1d      	ldr	r2, [pc, #116]	; (8001490 <MX_FREERTOS_Init+0x9c>)
 800141a:	6013      	str	r3, [r2, #0]
	rc_data_flag = osEventFlagsNew(NULL);
 800141c:	2000      	movs	r0, #0
 800141e:	f006 fd6b 	bl	8007ef8 <osEventFlagsNew>
 8001422:	4603      	mov	r3, r0
 8001424:	4a1b      	ldr	r2, [pc, #108]	; (8001494 <MX_FREERTOS_Init+0xa0>)
 8001426:	6013      	str	r3, [r2, #0]
	control_data_flag = osEventFlagsNew(NULL);
 8001428:	2000      	movs	r0, #0
 800142a:	f006 fd65 	bl	8007ef8 <osEventFlagsNew>
 800142e:	4603      	mov	r3, r0
 8001430:	4a19      	ldr	r2, [pc, #100]	; (8001498 <MX_FREERTOS_Init+0xa4>)
 8001432:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
	sem_refUart = osSemaphoreNew(ISR_SEMAPHORE_COUNT, 0, NULL);
 8001434:	2200      	movs	r2, #0
 8001436:	2100      	movs	r1, #0
 8001438:	2001      	movs	r0, #1
 800143a:	f006 fec1 	bl	80081c0 <osSemaphoreNew>
 800143e:	4603      	mov	r3, r0
 8001440:	4a16      	ldr	r2, [pc, #88]	; (800149c <MX_FREERTOS_Init+0xa8>)
 8001442:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001444:	4a16      	ldr	r2, [pc, #88]	; (80014a0 <MX_FREERTOS_Init+0xac>)
 8001446:	2100      	movs	r1, #0
 8001448:	4816      	ldr	r0, [pc, #88]	; (80014a4 <MX_FREERTOS_Init+0xb0>)
 800144a:	f006 fc81 	bl	8007d50 <osThreadNew>
 800144e:	4603      	mov	r3, r0
 8001450:	4a15      	ldr	r2, [pc, #84]	; (80014a8 <MX_FREERTOS_Init+0xb4>)
 8001452:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  //todo: adjust priorities
  //Threads creation
  	gimbal_control_task_handle   = osThreadNew(gimbal_control_task, NULL, &high2_priority_task_attributes);
 8001454:	4a15      	ldr	r2, [pc, #84]	; (80014ac <MX_FREERTOS_Init+0xb8>)
 8001456:	2100      	movs	r1, #0
 8001458:	4815      	ldr	r0, [pc, #84]	; (80014b0 <MX_FREERTOS_Init+0xbc>)
 800145a:	f006 fc79 	bl	8007d50 <osThreadNew>
 800145e:	4603      	mov	r3, r0
 8001460:	4a14      	ldr	r2, [pc, #80]	; (80014b4 <MX_FREERTOS_Init+0xc0>)
 8001462:	6013      	str	r3, [r2, #0]
  	movement_control_task_handle = osThreadNew(movement_control_task, NULL, &low2_priority_task_attributes);//run now
 8001464:	4a14      	ldr	r2, [pc, #80]	; (80014b8 <MX_FREERTOS_Init+0xc4>)
 8001466:	2100      	movs	r1, #0
 8001468:	4814      	ldr	r0, [pc, #80]	; (80014bc <MX_FREERTOS_Init+0xc8>)
 800146a:	f006 fc71 	bl	8007d50 <osThreadNew>
 800146e:	4603      	mov	r3, r0
 8001470:	4a13      	ldr	r2, [pc, #76]	; (80014c0 <MX_FREERTOS_Init+0xcc>)
 8001472:	6013      	str	r3, [r2, #0]
  	gun_control_task_handle = osThreadNew(gun_control_task, NULL, &low_priority_task_attributes);
 8001474:	4a13      	ldr	r2, [pc, #76]	; (80014c4 <MX_FREERTOS_Init+0xd0>)
 8001476:	2100      	movs	r1, #0
 8001478:	4813      	ldr	r0, [pc, #76]	; (80014c8 <MX_FREERTOS_Init+0xd4>)
 800147a:	f006 fc69 	bl	8007d50 <osThreadNew>
 800147e:	4603      	mov	r3, r0
 8001480:	4a12      	ldr	r2, [pc, #72]	; (80014cc <MX_FREERTOS_Init+0xd8>)
 8001482:	6013      	str	r3, [r2, #0]
  	//todo: add event flags
	//Signals when a certain event has occurred

  /* USER CODE END RTOS_EVENTS */

}
 8001484:	bf00      	nop
 8001486:	bd80      	pop	{r7, pc}
 8001488:	20009840 	.word	0x20009840
 800148c:	2000985c 	.word	0x2000985c
 8001490:	20009844 	.word	0x20009844
 8001494:	20009838 	.word	0x20009838
 8001498:	20009848 	.word	0x20009848
 800149c:	20009858 	.word	0x20009858
 80014a0:	0800b568 	.word	0x0800b568
 80014a4:	080014d1 	.word	0x080014d1
 80014a8:	20009834 	.word	0x20009834
 80014ac:	0800b544 	.word	0x0800b544
 80014b0:	080028b9 	.word	0x080028b9
 80014b4:	20009860 	.word	0x20009860
 80014b8:	0800b520 	.word	0x0800b520
 80014bc:	08003465 	.word	0x08003465
 80014c0:	2000983c 	.word	0x2000983c
 80014c4:	0800b4fc 	.word	0x0800b4fc
 80014c8:	08002d31 	.word	0x08002d31
 80014cc:	20009850 	.word	0x20009850

080014d0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80014d8:	2001      	movs	r0, #1
 80014da:	f006 fcdf 	bl	8007e9c <osDelay>
 80014de:	e7fb      	b.n	80014d8 <StartDefaultTask+0x8>

080014e0 <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PA7   ------> SPI1_MOSI
*/
void MX_GPIO_Init(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b08c      	sub	sp, #48	; 0x30
 80014e4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e6:	f107 031c 	add.w	r3, r7, #28
 80014ea:	2200      	movs	r2, #0
 80014ec:	601a      	str	r2, [r3, #0]
 80014ee:	605a      	str	r2, [r3, #4]
 80014f0:	609a      	str	r2, [r3, #8]
 80014f2:	60da      	str	r2, [r3, #12]
 80014f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80014f6:	2300      	movs	r3, #0
 80014f8:	61bb      	str	r3, [r7, #24]
 80014fa:	4b74      	ldr	r3, [pc, #464]	; (80016cc <MX_GPIO_Init+0x1ec>)
 80014fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fe:	4a73      	ldr	r2, [pc, #460]	; (80016cc <MX_GPIO_Init+0x1ec>)
 8001500:	f043 0310 	orr.w	r3, r3, #16
 8001504:	6313      	str	r3, [r2, #48]	; 0x30
 8001506:	4b71      	ldr	r3, [pc, #452]	; (80016cc <MX_GPIO_Init+0x1ec>)
 8001508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150a:	f003 0310 	and.w	r3, r3, #16
 800150e:	61bb      	str	r3, [r7, #24]
 8001510:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001512:	2300      	movs	r3, #0
 8001514:	617b      	str	r3, [r7, #20]
 8001516:	4b6d      	ldr	r3, [pc, #436]	; (80016cc <MX_GPIO_Init+0x1ec>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151a:	4a6c      	ldr	r2, [pc, #432]	; (80016cc <MX_GPIO_Init+0x1ec>)
 800151c:	f043 0302 	orr.w	r3, r3, #2
 8001520:	6313      	str	r3, [r2, #48]	; 0x30
 8001522:	4b6a      	ldr	r3, [pc, #424]	; (80016cc <MX_GPIO_Init+0x1ec>)
 8001524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001526:	f003 0302 	and.w	r3, r3, #2
 800152a:	617b      	str	r3, [r7, #20]
 800152c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800152e:	2300      	movs	r3, #0
 8001530:	613b      	str	r3, [r7, #16]
 8001532:	4b66      	ldr	r3, [pc, #408]	; (80016cc <MX_GPIO_Init+0x1ec>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001536:	4a65      	ldr	r2, [pc, #404]	; (80016cc <MX_GPIO_Init+0x1ec>)
 8001538:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800153c:	6313      	str	r3, [r2, #48]	; 0x30
 800153e:	4b63      	ldr	r3, [pc, #396]	; (80016cc <MX_GPIO_Init+0x1ec>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001542:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001546:	613b      	str	r3, [r7, #16]
 8001548:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800154a:	2300      	movs	r3, #0
 800154c:	60fb      	str	r3, [r7, #12]
 800154e:	4b5f      	ldr	r3, [pc, #380]	; (80016cc <MX_GPIO_Init+0x1ec>)
 8001550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001552:	4a5e      	ldr	r2, [pc, #376]	; (80016cc <MX_GPIO_Init+0x1ec>)
 8001554:	f043 0308 	orr.w	r3, r3, #8
 8001558:	6313      	str	r3, [r2, #48]	; 0x30
 800155a:	4b5c      	ldr	r3, [pc, #368]	; (80016cc <MX_GPIO_Init+0x1ec>)
 800155c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155e:	f003 0308 	and.w	r3, r3, #8
 8001562:	60fb      	str	r3, [r7, #12]
 8001564:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001566:	2300      	movs	r3, #0
 8001568:	60bb      	str	r3, [r7, #8]
 800156a:	4b58      	ldr	r3, [pc, #352]	; (80016cc <MX_GPIO_Init+0x1ec>)
 800156c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156e:	4a57      	ldr	r2, [pc, #348]	; (80016cc <MX_GPIO_Init+0x1ec>)
 8001570:	f043 0301 	orr.w	r3, r3, #1
 8001574:	6313      	str	r3, [r2, #48]	; 0x30
 8001576:	4b55      	ldr	r3, [pc, #340]	; (80016cc <MX_GPIO_Init+0x1ec>)
 8001578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157a:	f003 0301 	and.w	r3, r3, #1
 800157e:	60bb      	str	r3, [r7, #8]
 8001580:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001582:	2300      	movs	r3, #0
 8001584:	607b      	str	r3, [r7, #4]
 8001586:	4b51      	ldr	r3, [pc, #324]	; (80016cc <MX_GPIO_Init+0x1ec>)
 8001588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158a:	4a50      	ldr	r2, [pc, #320]	; (80016cc <MX_GPIO_Init+0x1ec>)
 800158c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001590:	6313      	str	r3, [r2, #48]	; 0x30
 8001592:	4b4e      	ldr	r3, [pc, #312]	; (80016cc <MX_GPIO_Init+0x1ec>)
 8001594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001596:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800159a:	607b      	str	r3, [r7, #4]
 800159c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800159e:	2300      	movs	r3, #0
 80015a0:	603b      	str	r3, [r7, #0]
 80015a2:	4b4a      	ldr	r3, [pc, #296]	; (80016cc <MX_GPIO_Init+0x1ec>)
 80015a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a6:	4a49      	ldr	r2, [pc, #292]	; (80016cc <MX_GPIO_Init+0x1ec>)
 80015a8:	f043 0320 	orr.w	r3, r3, #32
 80015ac:	6313      	str	r3, [r2, #48]	; 0x30
 80015ae:	4b47      	ldr	r3, [pc, #284]	; (80016cc <MX_GPIO_Init+0x1ec>)
 80015b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b2:	f003 0320 	and.w	r3, r3, #32
 80015b6:	603b      	str	r3, [r7, #0]
 80015b8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, PWR_A_Pin|PWR_B_Pin|PWR_C_Pin|PWR_D_Pin, GPIO_PIN_SET);
 80015ba:	2201      	movs	r2, #1
 80015bc:	213c      	movs	r1, #60	; 0x3c
 80015be:	4844      	ldr	r0, [pc, #272]	; (80016d0 <MX_GPIO_Init+0x1f0>)
 80015c0:	f003 ff2c 	bl	800541c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6|LED_G_Pin, GPIO_PIN_RESET);
 80015c4:	2200      	movs	r2, #0
 80015c6:	f244 0140 	movw	r1, #16448	; 0x4040
 80015ca:	4842      	ldr	r0, [pc, #264]	; (80016d4 <MX_GPIO_Init+0x1f4>)
 80015cc:	f003 ff26 	bl	800541c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_RESET);
 80015d0:	2200      	movs	r2, #0
 80015d2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015d6:	4840      	ldr	r0, [pc, #256]	; (80016d8 <MX_GPIO_Init+0x1f8>)
 80015d8:	f003 ff20 	bl	800541c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IST_INT_Pin;
 80015dc:	2308      	movs	r3, #8
 80015de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015e0:	4b3e      	ldr	r3, [pc, #248]	; (80016dc <MX_GPIO_Init+0x1fc>)
 80015e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80015e4:	2302      	movs	r3, #2
 80015e6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(IST_INT_GPIO_Port, &GPIO_InitStruct);
 80015e8:	f107 031c 	add.w	r3, r7, #28
 80015ec:	4619      	mov	r1, r3
 80015ee:	483a      	ldr	r0, [pc, #232]	; (80016d8 <MX_GPIO_Init+0x1f8>)
 80015f0:	f003 fd68 	bl	80050c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MPU_INT_Pin;
 80015f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015fa:	4b38      	ldr	r3, [pc, #224]	; (80016dc <MX_GPIO_Init+0x1fc>)
 80015fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80015fe:	2302      	movs	r3, #2
 8001600:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MPU_INT_GPIO_Port, &GPIO_InitStruct);
 8001602:	f107 031c 	add.w	r3, r7, #28
 8001606:	4619      	mov	r1, r3
 8001608:	4835      	ldr	r0, [pc, #212]	; (80016e0 <MX_GPIO_Init+0x200>)
 800160a:	f003 fd5b 	bl	80050c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin PHPin */
  GPIO_InitStruct.Pin = PWR_A_Pin|PWR_B_Pin|PWR_C_Pin|PWR_D_Pin;
 800160e:	233c      	movs	r3, #60	; 0x3c
 8001610:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001612:	2301      	movs	r3, #1
 8001614:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001616:	2301      	movs	r3, #1
 8001618:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800161a:	2300      	movs	r3, #0
 800161c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800161e:	f107 031c 	add.w	r3, r7, #28
 8001622:	4619      	mov	r1, r3
 8001624:	482a      	ldr	r0, [pc, #168]	; (80016d0 <MX_GPIO_Init+0x1f0>)
 8001626:	f003 fd4d 	bl	80050c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800162a:	2340      	movs	r3, #64	; 0x40
 800162c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800162e:	2301      	movs	r3, #1
 8001630:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001632:	2302      	movs	r3, #2
 8001634:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001636:	2301      	movs	r3, #1
 8001638:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800163a:	f107 031c 	add.w	r3, r7, #28
 800163e:	4619      	mov	r1, r3
 8001640:	4824      	ldr	r0, [pc, #144]	; (80016d4 <MX_GPIO_Init+0x1f4>)
 8001642:	f003 fd3f 	bl	80050c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_R_Pin;
 8001646:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800164a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800164c:	2301      	movs	r3, #1
 800164e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001650:	2300      	movs	r3, #0
 8001652:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001654:	2300      	movs	r3, #0
 8001656:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_R_GPIO_Port, &GPIO_InitStruct);
 8001658:	f107 031c 	add.w	r3, r7, #28
 800165c:	4619      	mov	r1, r3
 800165e:	481e      	ldr	r0, [pc, #120]	; (80016d8 <MX_GPIO_Init+0x1f8>)
 8001660:	f003 fd30 	bl	80050c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001664:	2380      	movs	r3, #128	; 0x80
 8001666:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001668:	2302      	movs	r3, #2
 800166a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166c:	2300      	movs	r3, #0
 800166e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001670:	2303      	movs	r3, #3
 8001672:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001674:	2305      	movs	r3, #5
 8001676:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001678:	f107 031c 	add.w	r3, r7, #28
 800167c:	4619      	mov	r1, r3
 800167e:	4819      	ldr	r0, [pc, #100]	; (80016e4 <MX_GPIO_Init+0x204>)
 8001680:	f003 fd20 	bl	80050c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_G_Pin;
 8001684:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001688:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800168a:	2301      	movs	r3, #1
 800168c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168e:	2300      	movs	r3, #0
 8001690:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001692:	2300      	movs	r3, #0
 8001694:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_G_GPIO_Port, &GPIO_InitStruct);
 8001696:	f107 031c 	add.w	r3, r7, #28
 800169a:	4619      	mov	r1, r3
 800169c:	480d      	ldr	r0, [pc, #52]	; (80016d4 <MX_GPIO_Init+0x1f4>)
 800169e:	f003 fd11 	bl	80050c4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 80016a2:	2200      	movs	r2, #0
 80016a4:	2105      	movs	r1, #5
 80016a6:	2009      	movs	r0, #9
 80016a8:	f003 f950 	bl	800494c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80016ac:	2009      	movs	r0, #9
 80016ae:	f003 f969 	bl	8004984 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80016b2:	2200      	movs	r2, #0
 80016b4:	2105      	movs	r1, #5
 80016b6:	2017      	movs	r0, #23
 80016b8:	f003 f948 	bl	800494c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80016bc:	2017      	movs	r0, #23
 80016be:	f003 f961 	bl	8004984 <HAL_NVIC_EnableIRQ>

}
 80016c2:	bf00      	nop
 80016c4:	3730      	adds	r7, #48	; 0x30
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	40023800 	.word	0x40023800
 80016d0:	40021c00 	.word	0x40021c00
 80016d4:	40021400 	.word	0x40021400
 80016d8:	40021000 	.word	0x40021000
 80016dc:	10110000 	.word	0x10110000
 80016e0:	40020400 	.word	0x40020400
 80016e4:	40020000 	.word	0x40020000

080016e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016ec:	f002 f986 	bl	80039fc <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016f0:	f000 f81e 	bl	8001730 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016f4:	f7ff fef4 	bl	80014e0 <MX_GPIO_Init>
  MX_DMA_Init();
 80016f8:	f7ff fe2e 	bl	8001358 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80016fc:	f000 fc78 	bl	8001ff0 <MX_USART1_UART_Init>
  MX_CAN1_Init();
 8001700:	f7ff fd0e 	bl	8001120 <MX_CAN1_Init>
  MX_USART6_UART_Init();
 8001704:	f000 fca0 	bl	8002048 <MX_USART6_UART_Init>
  MX_SPI5_Init();
 8001708:	f000 f894 	bl	8001834 <MX_SPI5_Init>
  MX_TIM12_Init();
 800170c:	f000 fb3e 	bl	8001d8c <MX_TIM12_Init>
  MX_CAN2_Init();
 8001710:	f7ff fd3c 	bl	800118c <MX_CAN2_Init>
  MX_TIM4_Init();
 8001714:	f000 fac0 	bl	8001c98 <MX_TIM4_Init>
  MX_UART7_Init();
 8001718:	f000 fc40 	bl	8001f9c <MX_UART7_Init>
  /* USER CODE BEGIN 2 */

  startup_task();
 800171c:	f002 f844 	bl	80037a8 <startup_task>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001720:	f006 faac 	bl	8007c7c <osKernelInitialize>
  MX_FREERTOS_Init();
 8001724:	f7ff fe66 	bl	80013f4 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8001728:	f006 fadc 	bl	8007ce4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800172c:	e7fe      	b.n	800172c <main+0x44>
	...

08001730 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b094      	sub	sp, #80	; 0x50
 8001734:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001736:	f107 0320 	add.w	r3, r7, #32
 800173a:	2230      	movs	r2, #48	; 0x30
 800173c:	2100      	movs	r1, #0
 800173e:	4618      	mov	r0, r3
 8001740:	f009 fe8e 	bl	800b460 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001744:	f107 030c 	add.w	r3, r7, #12
 8001748:	2200      	movs	r2, #0
 800174a:	601a      	str	r2, [r3, #0]
 800174c:	605a      	str	r2, [r3, #4]
 800174e:	609a      	str	r2, [r3, #8]
 8001750:	60da      	str	r2, [r3, #12]
 8001752:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001754:	2300      	movs	r3, #0
 8001756:	60bb      	str	r3, [r7, #8]
 8001758:	4b28      	ldr	r3, [pc, #160]	; (80017fc <SystemClock_Config+0xcc>)
 800175a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175c:	4a27      	ldr	r2, [pc, #156]	; (80017fc <SystemClock_Config+0xcc>)
 800175e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001762:	6413      	str	r3, [r2, #64]	; 0x40
 8001764:	4b25      	ldr	r3, [pc, #148]	; (80017fc <SystemClock_Config+0xcc>)
 8001766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001768:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800176c:	60bb      	str	r3, [r7, #8]
 800176e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001770:	2300      	movs	r3, #0
 8001772:	607b      	str	r3, [r7, #4]
 8001774:	4b22      	ldr	r3, [pc, #136]	; (8001800 <SystemClock_Config+0xd0>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a21      	ldr	r2, [pc, #132]	; (8001800 <SystemClock_Config+0xd0>)
 800177a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800177e:	6013      	str	r3, [r2, #0]
 8001780:	4b1f      	ldr	r3, [pc, #124]	; (8001800 <SystemClock_Config+0xd0>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001788:	607b      	str	r3, [r7, #4]
 800178a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800178c:	2301      	movs	r3, #1
 800178e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001790:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001794:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001796:	2302      	movs	r3, #2
 8001798:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800179a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800179e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 80017a0:	2306      	movs	r3, #6
 80017a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80017a4:	23a8      	movs	r3, #168	; 0xa8
 80017a6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80017a8:	2302      	movs	r3, #2
 80017aa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80017ac:	2304      	movs	r3, #4
 80017ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017b0:	f107 0320 	add.w	r3, r7, #32
 80017b4:	4618      	mov	r0, r3
 80017b6:	f003 fe6f 	bl	8005498 <HAL_RCC_OscConfig>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d001      	beq.n	80017c4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80017c0:	f000 f832 	bl	8001828 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017c4:	230f      	movs	r3, #15
 80017c6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017c8:	2302      	movs	r3, #2
 80017ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017cc:	2300      	movs	r3, #0
 80017ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80017d0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80017d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80017d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017da:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80017dc:	f107 030c 	add.w	r3, r7, #12
 80017e0:	2105      	movs	r1, #5
 80017e2:	4618      	mov	r0, r3
 80017e4:	f004 f8c8 	bl	8005978 <HAL_RCC_ClockConfig>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80017ee:	f000 f81b 	bl	8001828 <Error_Handler>
  }
}
 80017f2:	bf00      	nop
 80017f4:	3750      	adds	r7, #80	; 0x50
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	40023800 	.word	0x40023800
 8001800:	40007000 	.word	0x40007000

08001804 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a04      	ldr	r2, [pc, #16]	; (8001824 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d101      	bne.n	800181a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001816:	f002 f913 	bl	8003a40 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800181a:	bf00      	nop
 800181c:	3708      	adds	r7, #8
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	40000400 	.word	0x40000400

08001828 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800182c:	b672      	cpsid	i
}
 800182e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001830:	e7fe      	b.n	8001830 <Error_Handler+0x8>
	...

08001834 <MX_SPI5_Init>:
DMA_HandleTypeDef hdma_spi5_rx;
DMA_HandleTypeDef hdma_spi5_tx;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0

  hspi5.Instance = SPI5;
 8001838:	4b17      	ldr	r3, [pc, #92]	; (8001898 <MX_SPI5_Init+0x64>)
 800183a:	4a18      	ldr	r2, [pc, #96]	; (800189c <MX_SPI5_Init+0x68>)
 800183c:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800183e:	4b16      	ldr	r3, [pc, #88]	; (8001898 <MX_SPI5_Init+0x64>)
 8001840:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001844:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001846:	4b14      	ldr	r3, [pc, #80]	; (8001898 <MX_SPI5_Init+0x64>)
 8001848:	2200      	movs	r2, #0
 800184a:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 800184c:	4b12      	ldr	r3, [pc, #72]	; (8001898 <MX_SPI5_Init+0x64>)
 800184e:	2200      	movs	r2, #0
 8001850:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001852:	4b11      	ldr	r3, [pc, #68]	; (8001898 <MX_SPI5_Init+0x64>)
 8001854:	2200      	movs	r2, #0
 8001856:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001858:	4b0f      	ldr	r3, [pc, #60]	; (8001898 <MX_SPI5_Init+0x64>)
 800185a:	2200      	movs	r2, #0
 800185c:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800185e:	4b0e      	ldr	r3, [pc, #56]	; (8001898 <MX_SPI5_Init+0x64>)
 8001860:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001864:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001866:	4b0c      	ldr	r3, [pc, #48]	; (8001898 <MX_SPI5_Init+0x64>)
 8001868:	2200      	movs	r2, #0
 800186a:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800186c:	4b0a      	ldr	r3, [pc, #40]	; (8001898 <MX_SPI5_Init+0x64>)
 800186e:	2200      	movs	r2, #0
 8001870:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001872:	4b09      	ldr	r3, [pc, #36]	; (8001898 <MX_SPI5_Init+0x64>)
 8001874:	2200      	movs	r2, #0
 8001876:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001878:	4b07      	ldr	r3, [pc, #28]	; (8001898 <MX_SPI5_Init+0x64>)
 800187a:	2200      	movs	r2, #0
 800187c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 800187e:	4b06      	ldr	r3, [pc, #24]	; (8001898 <MX_SPI5_Init+0x64>)
 8001880:	220a      	movs	r2, #10
 8001882:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001884:	4804      	ldr	r0, [pc, #16]	; (8001898 <MX_SPI5_Init+0x64>)
 8001886:	f004 fa79 	bl	8005d7c <HAL_SPI_Init>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d001      	beq.n	8001894 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8001890:	f7ff ffca 	bl	8001828 <Error_Handler>
  }

}
 8001894:	bf00      	nop
 8001896:	bd80      	pop	{r7, pc}
 8001898:	2000986c 	.word	0x2000986c
 800189c:	40015000 	.word	0x40015000

080018a0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b08a      	sub	sp, #40	; 0x28
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a8:	f107 0314 	add.w	r3, r7, #20
 80018ac:	2200      	movs	r2, #0
 80018ae:	601a      	str	r2, [r3, #0]
 80018b0:	605a      	str	r2, [r3, #4]
 80018b2:	609a      	str	r2, [r3, #8]
 80018b4:	60da      	str	r2, [r3, #12]
 80018b6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a4d      	ldr	r2, [pc, #308]	; (80019f4 <HAL_SPI_MspInit+0x154>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	f040 8094 	bne.w	80019ec <HAL_SPI_MspInit+0x14c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80018c4:	2300      	movs	r3, #0
 80018c6:	613b      	str	r3, [r7, #16]
 80018c8:	4b4b      	ldr	r3, [pc, #300]	; (80019f8 <HAL_SPI_MspInit+0x158>)
 80018ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018cc:	4a4a      	ldr	r2, [pc, #296]	; (80019f8 <HAL_SPI_MspInit+0x158>)
 80018ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80018d2:	6453      	str	r3, [r2, #68]	; 0x44
 80018d4:	4b48      	ldr	r3, [pc, #288]	; (80019f8 <HAL_SPI_MspInit+0x158>)
 80018d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018dc:	613b      	str	r3, [r7, #16]
 80018de:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80018e0:	2300      	movs	r3, #0
 80018e2:	60fb      	str	r3, [r7, #12]
 80018e4:	4b44      	ldr	r3, [pc, #272]	; (80019f8 <HAL_SPI_MspInit+0x158>)
 80018e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e8:	4a43      	ldr	r2, [pc, #268]	; (80019f8 <HAL_SPI_MspInit+0x158>)
 80018ea:	f043 0320 	orr.w	r3, r3, #32
 80018ee:	6313      	str	r3, [r2, #48]	; 0x30
 80018f0:	4b41      	ldr	r3, [pc, #260]	; (80019f8 <HAL_SPI_MspInit+0x158>)
 80018f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f4:	f003 0320 	and.w	r3, r3, #32
 80018f8:	60fb      	str	r3, [r7, #12]
 80018fa:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF9     ------> SPI5_MOSI
    PF8     ------> SPI5_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_8;
 80018fc:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001900:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001902:	2302      	movs	r3, #2
 8001904:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001906:	2300      	movs	r3, #0
 8001908:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800190a:	2303      	movs	r3, #3
 800190c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800190e:	2305      	movs	r3, #5
 8001910:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001912:	f107 0314 	add.w	r3, r7, #20
 8001916:	4619      	mov	r1, r3
 8001918:	4838      	ldr	r0, [pc, #224]	; (80019fc <HAL_SPI_MspInit+0x15c>)
 800191a:	f003 fbd3 	bl	80050c4 <HAL_GPIO_Init>

    /* SPI5 DMA Init */
    /* SPI5_RX Init */
    hdma_spi5_rx.Instance = DMA2_Stream3;
 800191e:	4b38      	ldr	r3, [pc, #224]	; (8001a00 <HAL_SPI_MspInit+0x160>)
 8001920:	4a38      	ldr	r2, [pc, #224]	; (8001a04 <HAL_SPI_MspInit+0x164>)
 8001922:	601a      	str	r2, [r3, #0]
    hdma_spi5_rx.Init.Channel = DMA_CHANNEL_2;
 8001924:	4b36      	ldr	r3, [pc, #216]	; (8001a00 <HAL_SPI_MspInit+0x160>)
 8001926:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800192a:	605a      	str	r2, [r3, #4]
    hdma_spi5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800192c:	4b34      	ldr	r3, [pc, #208]	; (8001a00 <HAL_SPI_MspInit+0x160>)
 800192e:	2200      	movs	r2, #0
 8001930:	609a      	str	r2, [r3, #8]
    hdma_spi5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001932:	4b33      	ldr	r3, [pc, #204]	; (8001a00 <HAL_SPI_MspInit+0x160>)
 8001934:	2200      	movs	r2, #0
 8001936:	60da      	str	r2, [r3, #12]
    hdma_spi5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001938:	4b31      	ldr	r3, [pc, #196]	; (8001a00 <HAL_SPI_MspInit+0x160>)
 800193a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800193e:	611a      	str	r2, [r3, #16]
    hdma_spi5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001940:	4b2f      	ldr	r3, [pc, #188]	; (8001a00 <HAL_SPI_MspInit+0x160>)
 8001942:	2200      	movs	r2, #0
 8001944:	615a      	str	r2, [r3, #20]
    hdma_spi5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001946:	4b2e      	ldr	r3, [pc, #184]	; (8001a00 <HAL_SPI_MspInit+0x160>)
 8001948:	2200      	movs	r2, #0
 800194a:	619a      	str	r2, [r3, #24]
    hdma_spi5_rx.Init.Mode = DMA_NORMAL;
 800194c:	4b2c      	ldr	r3, [pc, #176]	; (8001a00 <HAL_SPI_MspInit+0x160>)
 800194e:	2200      	movs	r2, #0
 8001950:	61da      	str	r2, [r3, #28]
    hdma_spi5_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001952:	4b2b      	ldr	r3, [pc, #172]	; (8001a00 <HAL_SPI_MspInit+0x160>)
 8001954:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001958:	621a      	str	r2, [r3, #32]
    hdma_spi5_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800195a:	4b29      	ldr	r3, [pc, #164]	; (8001a00 <HAL_SPI_MspInit+0x160>)
 800195c:	2204      	movs	r2, #4
 800195e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi5_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001960:	4b27      	ldr	r3, [pc, #156]	; (8001a00 <HAL_SPI_MspInit+0x160>)
 8001962:	2203      	movs	r2, #3
 8001964:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi5_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8001966:	4b26      	ldr	r3, [pc, #152]	; (8001a00 <HAL_SPI_MspInit+0x160>)
 8001968:	2200      	movs	r2, #0
 800196a:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi5_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800196c:	4b24      	ldr	r3, [pc, #144]	; (8001a00 <HAL_SPI_MspInit+0x160>)
 800196e:	2200      	movs	r2, #0
 8001970:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi5_rx) != HAL_OK)
 8001972:	4823      	ldr	r0, [pc, #140]	; (8001a00 <HAL_SPI_MspInit+0x160>)
 8001974:	f003 f814 	bl	80049a0 <HAL_DMA_Init>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <HAL_SPI_MspInit+0xe2>
    {
      Error_Handler();
 800197e:	f7ff ff53 	bl	8001828 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi5_rx);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	4a1e      	ldr	r2, [pc, #120]	; (8001a00 <HAL_SPI_MspInit+0x160>)
 8001986:	64da      	str	r2, [r3, #76]	; 0x4c
 8001988:	4a1d      	ldr	r2, [pc, #116]	; (8001a00 <HAL_SPI_MspInit+0x160>)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI5_TX Init */
    hdma_spi5_tx.Instance = DMA2_Stream4;
 800198e:	4b1e      	ldr	r3, [pc, #120]	; (8001a08 <HAL_SPI_MspInit+0x168>)
 8001990:	4a1e      	ldr	r2, [pc, #120]	; (8001a0c <HAL_SPI_MspInit+0x16c>)
 8001992:	601a      	str	r2, [r3, #0]
    hdma_spi5_tx.Init.Channel = DMA_CHANNEL_2;
 8001994:	4b1c      	ldr	r3, [pc, #112]	; (8001a08 <HAL_SPI_MspInit+0x168>)
 8001996:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800199a:	605a      	str	r2, [r3, #4]
    hdma_spi5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800199c:	4b1a      	ldr	r3, [pc, #104]	; (8001a08 <HAL_SPI_MspInit+0x168>)
 800199e:	2240      	movs	r2, #64	; 0x40
 80019a0:	609a      	str	r2, [r3, #8]
    hdma_spi5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019a2:	4b19      	ldr	r3, [pc, #100]	; (8001a08 <HAL_SPI_MspInit+0x168>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	60da      	str	r2, [r3, #12]
    hdma_spi5_tx.Init.MemInc = DMA_MINC_ENABLE;
 80019a8:	4b17      	ldr	r3, [pc, #92]	; (8001a08 <HAL_SPI_MspInit+0x168>)
 80019aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019ae:	611a      	str	r2, [r3, #16]
    hdma_spi5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80019b0:	4b15      	ldr	r3, [pc, #84]	; (8001a08 <HAL_SPI_MspInit+0x168>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	615a      	str	r2, [r3, #20]
    hdma_spi5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80019b6:	4b14      	ldr	r3, [pc, #80]	; (8001a08 <HAL_SPI_MspInit+0x168>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	619a      	str	r2, [r3, #24]
    hdma_spi5_tx.Init.Mode = DMA_NORMAL;
 80019bc:	4b12      	ldr	r3, [pc, #72]	; (8001a08 <HAL_SPI_MspInit+0x168>)
 80019be:	2200      	movs	r2, #0
 80019c0:	61da      	str	r2, [r3, #28]
    hdma_spi5_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80019c2:	4b11      	ldr	r3, [pc, #68]	; (8001a08 <HAL_SPI_MspInit+0x168>)
 80019c4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80019c8:	621a      	str	r2, [r3, #32]
    hdma_spi5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80019ca:	4b0f      	ldr	r3, [pc, #60]	; (8001a08 <HAL_SPI_MspInit+0x168>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi5_tx) != HAL_OK)
 80019d0:	480d      	ldr	r0, [pc, #52]	; (8001a08 <HAL_SPI_MspInit+0x168>)
 80019d2:	f002 ffe5 	bl	80049a0 <HAL_DMA_Init>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d001      	beq.n	80019e0 <HAL_SPI_MspInit+0x140>
    {
      Error_Handler();
 80019dc:	f7ff ff24 	bl	8001828 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi5_tx);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	4a09      	ldr	r2, [pc, #36]	; (8001a08 <HAL_SPI_MspInit+0x168>)
 80019e4:	649a      	str	r2, [r3, #72]	; 0x48
 80019e6:	4a08      	ldr	r2, [pc, #32]	; (8001a08 <HAL_SPI_MspInit+0x168>)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 80019ec:	bf00      	nop
 80019ee:	3728      	adds	r7, #40	; 0x28
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	40015000 	.word	0x40015000
 80019f8:	40023800 	.word	0x40023800
 80019fc:	40021400 	.word	0x40021400
 8001a00:	200098c4 	.word	0x200098c4
 8001a04:	40026458 	.word	0x40026458
 8001a08:	20009924 	.word	0x20009924
 8001a0c:	40026470 	.word	0x40026470

08001a10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a16:	2300      	movs	r3, #0
 8001a18:	607b      	str	r3, [r7, #4]
 8001a1a:	4b21      	ldr	r3, [pc, #132]	; (8001aa0 <HAL_MspInit+0x90>)
 8001a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a1e:	4a20      	ldr	r2, [pc, #128]	; (8001aa0 <HAL_MspInit+0x90>)
 8001a20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a24:	6453      	str	r3, [r2, #68]	; 0x44
 8001a26:	4b1e      	ldr	r3, [pc, #120]	; (8001aa0 <HAL_MspInit+0x90>)
 8001a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a2e:	607b      	str	r3, [r7, #4]
 8001a30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a32:	2300      	movs	r3, #0
 8001a34:	603b      	str	r3, [r7, #0]
 8001a36:	4b1a      	ldr	r3, [pc, #104]	; (8001aa0 <HAL_MspInit+0x90>)
 8001a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3a:	4a19      	ldr	r2, [pc, #100]	; (8001aa0 <HAL_MspInit+0x90>)
 8001a3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a40:	6413      	str	r3, [r2, #64]	; 0x40
 8001a42:	4b17      	ldr	r3, [pc, #92]	; (8001aa0 <HAL_MspInit+0x90>)
 8001a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a4a:	603b      	str	r3, [r7, #0]
 8001a4c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 1, 0);
 8001a4e:	2200      	movs	r2, #0
 8001a50:	2101      	movs	r1, #1
 8001a52:	f06f 000b 	mvn.w	r0, #11
 8001a56:	f002 ff79 	bl	800494c <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 2, 0);
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	2102      	movs	r1, #2
 8001a5e:	f06f 000a 	mvn.w	r0, #10
 8001a62:	f002 ff73 	bl	800494c <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 3, 0);
 8001a66:	2200      	movs	r2, #0
 8001a68:	2103      	movs	r1, #3
 8001a6a:	f06f 0009 	mvn.w	r0, #9
 8001a6e:	f002 ff6d 	bl	800494c <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 4, 0);
 8001a72:	2200      	movs	r2, #0
 8001a74:	2104      	movs	r1, #4
 8001a76:	f06f 0004 	mvn.w	r0, #4
 8001a7a:	f002 ff67 	bl	800494c <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 5, 0);
 8001a7e:	2200      	movs	r2, #0
 8001a80:	2105      	movs	r1, #5
 8001a82:	f06f 0003 	mvn.w	r0, #3
 8001a86:	f002 ff61 	bl	800494c <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	210f      	movs	r1, #15
 8001a8e:	f06f 0001 	mvn.w	r0, #1
 8001a92:	f002 ff5b 	bl	800494c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a96:	bf00      	nop
 8001a98:	3708      	adds	r7, #8
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	40023800 	.word	0x40023800

08001aa4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b08c      	sub	sp, #48	; 0x30
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001aac:	2300      	movs	r3, #0
 8001aae:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM3 IRQ priority */
  HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0);
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	6879      	ldr	r1, [r7, #4]
 8001ab8:	201d      	movs	r0, #29
 8001aba:	f002 ff47 	bl	800494c <HAL_NVIC_SetPriority>

  /* Enable the TIM3 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001abe:	201d      	movs	r0, #29
 8001ac0:	f002 ff60 	bl	8004984 <HAL_NVIC_EnableIRQ>
  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	60fb      	str	r3, [r7, #12]
 8001ac8:	4b1f      	ldr	r3, [pc, #124]	; (8001b48 <HAL_InitTick+0xa4>)
 8001aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001acc:	4a1e      	ldr	r2, [pc, #120]	; (8001b48 <HAL_InitTick+0xa4>)
 8001ace:	f043 0302 	orr.w	r3, r3, #2
 8001ad2:	6413      	str	r3, [r2, #64]	; 0x40
 8001ad4:	4b1c      	ldr	r3, [pc, #112]	; (8001b48 <HAL_InitTick+0xa4>)
 8001ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad8:	f003 0302 	and.w	r3, r3, #2
 8001adc:	60fb      	str	r3, [r7, #12]
 8001ade:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001ae0:	f107 0210 	add.w	r2, r7, #16
 8001ae4:	f107 0314 	add.w	r3, r7, #20
 8001ae8:	4611      	mov	r1, r2
 8001aea:	4618      	mov	r0, r3
 8001aec:	f004 f914 	bl	8005d18 <HAL_RCC_GetClockConfig>

  /* Compute TIM3 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001af0:	f004 f8ea 	bl	8005cc8 <HAL_RCC_GetPCLK1Freq>
 8001af4:	4603      	mov	r3, r0
 8001af6:	005b      	lsls	r3, r3, #1
 8001af8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001afc:	4a13      	ldr	r2, [pc, #76]	; (8001b4c <HAL_InitTick+0xa8>)
 8001afe:	fba2 2303 	umull	r2, r3, r2, r3
 8001b02:	0c9b      	lsrs	r3, r3, #18
 8001b04:	3b01      	subs	r3, #1
 8001b06:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8001b08:	4b11      	ldr	r3, [pc, #68]	; (8001b50 <HAL_InitTick+0xac>)
 8001b0a:	4a12      	ldr	r2, [pc, #72]	; (8001b54 <HAL_InitTick+0xb0>)
 8001b0c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8001b0e:	4b10      	ldr	r3, [pc, #64]	; (8001b50 <HAL_InitTick+0xac>)
 8001b10:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001b14:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8001b16:	4a0e      	ldr	r2, [pc, #56]	; (8001b50 <HAL_InitTick+0xac>)
 8001b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b1a:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8001b1c:	4b0c      	ldr	r3, [pc, #48]	; (8001b50 <HAL_InitTick+0xac>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b22:	4b0b      	ldr	r3, [pc, #44]	; (8001b50 <HAL_InitTick+0xac>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 8001b28:	4809      	ldr	r0, [pc, #36]	; (8001b50 <HAL_InitTick+0xac>)
 8001b2a:	f004 f98b 	bl	8005e44 <HAL_TIM_Base_Init>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d104      	bne.n	8001b3e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim3);
 8001b34:	4806      	ldr	r0, [pc, #24]	; (8001b50 <HAL_InitTick+0xac>)
 8001b36:	f004 f9b0 	bl	8005e9a <HAL_TIM_Base_Start_IT>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	e000      	b.n	8001b40 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	3730      	adds	r7, #48	; 0x30
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	40023800 	.word	0x40023800
 8001b4c:	431bde83 	.word	0x431bde83
 8001b50:	20009984 	.word	0x20009984
 8001b54:	40000400 	.word	0x40000400

08001b58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b5c:	e7fe      	b.n	8001b5c <NMI_Handler+0x4>

08001b5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b5e:	b480      	push	{r7}
 8001b60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b62:	e7fe      	b.n	8001b62 <HardFault_Handler+0x4>

08001b64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b68:	e7fe      	b.n	8001b68 <MemManage_Handler+0x4>

08001b6a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b6a:	b480      	push	{r7}
 8001b6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b6e:	e7fe      	b.n	8001b6e <BusFault_Handler+0x4>

08001b70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b74:	e7fe      	b.n	8001b74 <UsageFault_Handler+0x4>

08001b76 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b76:	b480      	push	{r7}
 8001b78:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b7a:	bf00      	nop
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr

08001b84 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8001b88:	2008      	movs	r0, #8
 8001b8a:	f003 fc61 	bl	8005450 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001b8e:	bf00      	nop
 8001b90:	bd80      	pop	{r7, pc}
	...

08001b94 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_rx);
 8001b98:	4802      	ldr	r0, [pc, #8]	; (8001ba4 <DMA1_Stream3_IRQHandler+0x10>)
 8001b9a:	f003 f829 	bl	8004bf0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001b9e:	bf00      	nop
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	20009ae4 	.word	0x20009ae4

08001ba8 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001bac:	4802      	ldr	r0, [pc, #8]	; (8001bb8 <CAN1_RX0_IRQHandler+0x10>)
 8001bae:	f002 fbe5 	bl	800437c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001bb2:	bf00      	nop
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	2000980c 	.word	0x2000980c

08001bbc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001bc0:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001bc4:	f003 fc44 	bl	8005450 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001bc8:	bf00      	nop
 8001bca:	bd80      	pop	{r7, pc}

08001bcc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001bd0:	4802      	ldr	r0, [pc, #8]	; (8001bdc <TIM3_IRQHandler+0x10>)
 8001bd2:	f004 f9ef 	bl	8005fb4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001bd6:	bf00      	nop
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	20009984 	.word	0x20009984

08001be0 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8001be4:	4802      	ldr	r0, [pc, #8]	; (8001bf0 <DMA2_Stream1_IRQHandler+0x10>)
 8001be6:	f003 f803 	bl	8004bf0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001bea:	bf00      	nop
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	20009a44 	.word	0x20009a44

08001bf4 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001bf8:	4802      	ldr	r0, [pc, #8]	; (8001c04 <DMA2_Stream2_IRQHandler+0x10>)
 8001bfa:	f002 fff9 	bl	8004bf0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001bfe:	bf00      	nop
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	20009b44 	.word	0x20009b44

08001c08 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi5_rx);
 8001c0c:	4802      	ldr	r0, [pc, #8]	; (8001c18 <DMA2_Stream3_IRQHandler+0x10>)
 8001c0e:	f002 ffef 	bl	8004bf0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001c12:	bf00      	nop
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	200098c4 	.word	0x200098c4

08001c1c <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi5_tx);
 8001c20:	4802      	ldr	r0, [pc, #8]	; (8001c2c <DMA2_Stream4_IRQHandler+0x10>)
 8001c22:	f002 ffe5 	bl	8004bf0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8001c26:	bf00      	nop
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	20009924 	.word	0x20009924

08001c30 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8001c34:	4802      	ldr	r0, [pc, #8]	; (8001c40 <CAN2_RX0_IRQHandler+0x10>)
 8001c36:	f002 fba1 	bl	800437c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8001c3a:	bf00      	nop
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	200097e4 	.word	0x200097e4

08001c44 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001c48:	4802      	ldr	r0, [pc, #8]	; (8001c54 <USART6_IRQHandler+0x10>)
 8001c4a:	f005 f991 	bl	8006f70 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001c4e:	bf00      	nop
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	20009be4 	.word	0x20009be4

08001c58 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8001c5c:	4802      	ldr	r0, [pc, #8]	; (8001c68 <UART7_IRQHandler+0x10>)
 8001c5e:	f005 f987 	bl	8006f70 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8001c62:	bf00      	nop
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	20009aa4 	.word	0x20009aa4

08001c6c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c70:	4b08      	ldr	r3, [pc, #32]	; (8001c94 <SystemInit+0x28>)
 8001c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c76:	4a07      	ldr	r2, [pc, #28]	; (8001c94 <SystemInit+0x28>)
 8001c78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001c80:	4b04      	ldr	r3, [pc, #16]	; (8001c94 <SystemInit+0x28>)
 8001c82:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001c86:	609a      	str	r2, [r3, #8]
#endif
}
 8001c88:	bf00      	nop
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr
 8001c92:	bf00      	nop
 8001c94:	e000ed00 	.word	0xe000ed00

08001c98 <MX_TIM4_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim12;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b08a      	sub	sp, #40	; 0x28
 8001c9c:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c9e:	f107 0320 	add.w	r3, r7, #32
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	601a      	str	r2, [r3, #0]
 8001ca6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ca8:	1d3b      	adds	r3, r7, #4
 8001caa:	2200      	movs	r2, #0
 8001cac:	601a      	str	r2, [r3, #0]
 8001cae:	605a      	str	r2, [r3, #4]
 8001cb0:	609a      	str	r2, [r3, #8]
 8001cb2:	60da      	str	r2, [r3, #12]
 8001cb4:	611a      	str	r2, [r3, #16]
 8001cb6:	615a      	str	r2, [r3, #20]
 8001cb8:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 8001cba:	4b32      	ldr	r3, [pc, #200]	; (8001d84 <MX_TIM4_Init+0xec>)
 8001cbc:	4a32      	ldr	r2, [pc, #200]	; (8001d88 <MX_TIM4_Init+0xf0>)
 8001cbe:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 84;
 8001cc0:	4b30      	ldr	r3, [pc, #192]	; (8001d84 <MX_TIM4_Init+0xec>)
 8001cc2:	2254      	movs	r2, #84	; 0x54
 8001cc4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cc6:	4b2f      	ldr	r3, [pc, #188]	; (8001d84 <MX_TIM4_Init+0xec>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 8001ccc:	4b2d      	ldr	r3, [pc, #180]	; (8001d84 <MX_TIM4_Init+0xec>)
 8001cce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001cd2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cd4:	4b2b      	ldr	r3, [pc, #172]	; (8001d84 <MX_TIM4_Init+0xec>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cda:	4b2a      	ldr	r3, [pc, #168]	; (8001d84 <MX_TIM4_Init+0xec>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001ce0:	4828      	ldr	r0, [pc, #160]	; (8001d84 <MX_TIM4_Init+0xec>)
 8001ce2:	f004 f8fe 	bl	8005ee2 <HAL_TIM_PWM_Init>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d001      	beq.n	8001cf0 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8001cec:	f7ff fd9c 	bl	8001828 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001cf8:	f107 0320 	add.w	r3, r7, #32
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	4821      	ldr	r0, [pc, #132]	; (8001d84 <MX_TIM4_Init+0xec>)
 8001d00:	f004 ff22 	bl	8006b48 <HAL_TIMEx_MasterConfigSynchronization>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d001      	beq.n	8001d0e <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8001d0a:	f7ff fd8d 	bl	8001828 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d0e:	2360      	movs	r3, #96	; 0x60
 8001d10:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001d12:	2300      	movs	r3, #0
 8001d14:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d16:	2300      	movs	r3, #0
 8001d18:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d1e:	1d3b      	adds	r3, r7, #4
 8001d20:	2200      	movs	r2, #0
 8001d22:	4619      	mov	r1, r3
 8001d24:	4817      	ldr	r0, [pc, #92]	; (8001d84 <MX_TIM4_Init+0xec>)
 8001d26:	f004 fa4d 	bl	80061c4 <HAL_TIM_PWM_ConfigChannel>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d001      	beq.n	8001d34 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8001d30:	f7ff fd7a 	bl	8001828 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001d34:	1d3b      	adds	r3, r7, #4
 8001d36:	2204      	movs	r2, #4
 8001d38:	4619      	mov	r1, r3
 8001d3a:	4812      	ldr	r0, [pc, #72]	; (8001d84 <MX_TIM4_Init+0xec>)
 8001d3c:	f004 fa42 	bl	80061c4 <HAL_TIM_PWM_ConfigChannel>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d001      	beq.n	8001d4a <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8001d46:	f7ff fd6f 	bl	8001828 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001d4a:	1d3b      	adds	r3, r7, #4
 8001d4c:	2208      	movs	r2, #8
 8001d4e:	4619      	mov	r1, r3
 8001d50:	480c      	ldr	r0, [pc, #48]	; (8001d84 <MX_TIM4_Init+0xec>)
 8001d52:	f004 fa37 	bl	80061c4 <HAL_TIM_PWM_ConfigChannel>
 8001d56:	4603      	mov	r3, r0
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d001      	beq.n	8001d60 <MX_TIM4_Init+0xc8>
  {
    Error_Handler();
 8001d5c:	f7ff fd64 	bl	8001828 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001d60:	1d3b      	adds	r3, r7, #4
 8001d62:	220c      	movs	r2, #12
 8001d64:	4619      	mov	r1, r3
 8001d66:	4807      	ldr	r0, [pc, #28]	; (8001d84 <MX_TIM4_Init+0xec>)
 8001d68:	f004 fa2c 	bl	80061c4 <HAL_TIM_PWM_ConfigChannel>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d001      	beq.n	8001d76 <MX_TIM4_Init+0xde>
  {
    Error_Handler();
 8001d72:	f7ff fd59 	bl	8001828 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim4);
 8001d76:	4803      	ldr	r0, [pc, #12]	; (8001d84 <MX_TIM4_Init+0xec>)
 8001d78:	f000 f8ae 	bl	8001ed8 <HAL_TIM_MspPostInit>

}
 8001d7c:	bf00      	nop
 8001d7e:	3728      	adds	r7, #40	; 0x28
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	200099c4 	.word	0x200099c4
 8001d88:	40000800 	.word	0x40000800

08001d8c <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b08c      	sub	sp, #48	; 0x30
 8001d90:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d92:	f107 0320 	add.w	r3, r7, #32
 8001d96:	2200      	movs	r2, #0
 8001d98:	601a      	str	r2, [r3, #0]
 8001d9a:	605a      	str	r2, [r3, #4]
 8001d9c:	609a      	str	r2, [r3, #8]
 8001d9e:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001da0:	1d3b      	adds	r3, r7, #4
 8001da2:	2200      	movs	r2, #0
 8001da4:	601a      	str	r2, [r3, #0]
 8001da6:	605a      	str	r2, [r3, #4]
 8001da8:	609a      	str	r2, [r3, #8]
 8001daa:	60da      	str	r2, [r3, #12]
 8001dac:	611a      	str	r2, [r3, #16]
 8001dae:	615a      	str	r2, [r3, #20]
 8001db0:	619a      	str	r2, [r3, #24]

  htim12.Instance = TIM12;
 8001db2:	4b25      	ldr	r3, [pc, #148]	; (8001e48 <MX_TIM12_Init+0xbc>)
 8001db4:	4a25      	ldr	r2, [pc, #148]	; (8001e4c <MX_TIM12_Init+0xc0>)
 8001db6:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 84;
 8001db8:	4b23      	ldr	r3, [pc, #140]	; (8001e48 <MX_TIM12_Init+0xbc>)
 8001dba:	2254      	movs	r2, #84	; 0x54
 8001dbc:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dbe:	4b22      	ldr	r3, [pc, #136]	; (8001e48 <MX_TIM12_Init+0xbc>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 1000;
 8001dc4:	4b20      	ldr	r3, [pc, #128]	; (8001e48 <MX_TIM12_Init+0xbc>)
 8001dc6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001dca:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dcc:	4b1e      	ldr	r3, [pc, #120]	; (8001e48 <MX_TIM12_Init+0xbc>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dd2:	4b1d      	ldr	r3, [pc, #116]	; (8001e48 <MX_TIM12_Init+0xbc>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8001dd8:	481b      	ldr	r0, [pc, #108]	; (8001e48 <MX_TIM12_Init+0xbc>)
 8001dda:	f004 f833 	bl	8005e44 <HAL_TIM_Base_Init>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d001      	beq.n	8001de8 <MX_TIM12_Init+0x5c>
  {
    Error_Handler();
 8001de4:	f7ff fd20 	bl	8001828 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001de8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dec:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8001dee:	f107 0320 	add.w	r3, r7, #32
 8001df2:	4619      	mov	r1, r3
 8001df4:	4814      	ldr	r0, [pc, #80]	; (8001e48 <MX_TIM12_Init+0xbc>)
 8001df6:	f004 faab 	bl	8006350 <HAL_TIM_ConfigClockSource>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d001      	beq.n	8001e04 <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 8001e00:	f7ff fd12 	bl	8001828 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001e04:	4810      	ldr	r0, [pc, #64]	; (8001e48 <MX_TIM12_Init+0xbc>)
 8001e06:	f004 f86c 	bl	8005ee2 <HAL_TIM_PWM_Init>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d001      	beq.n	8001e14 <MX_TIM12_Init+0x88>
  {
    Error_Handler();
 8001e10:	f7ff fd0a 	bl	8001828 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e14:	2360      	movs	r3, #96	; 0x60
 8001e16:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e20:	2300      	movs	r3, #0
 8001e22:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e24:	1d3b      	adds	r3, r7, #4
 8001e26:	2200      	movs	r2, #0
 8001e28:	4619      	mov	r1, r3
 8001e2a:	4807      	ldr	r0, [pc, #28]	; (8001e48 <MX_TIM12_Init+0xbc>)
 8001e2c:	f004 f9ca 	bl	80061c4 <HAL_TIM_PWM_ConfigChannel>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d001      	beq.n	8001e3a <MX_TIM12_Init+0xae>
  {
    Error_Handler();
 8001e36:	f7ff fcf7 	bl	8001828 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim12);
 8001e3a:	4803      	ldr	r0, [pc, #12]	; (8001e48 <MX_TIM12_Init+0xbc>)
 8001e3c:	f000 f84c 	bl	8001ed8 <HAL_TIM_MspPostInit>

}
 8001e40:	bf00      	nop
 8001e42:	3730      	adds	r7, #48	; 0x30
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	20009a04 	.word	0x20009a04
 8001e4c:	40001800 	.word	0x40001800

08001e50 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b085      	sub	sp, #20
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM4)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a0b      	ldr	r2, [pc, #44]	; (8001e8c <HAL_TIM_PWM_MspInit+0x3c>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d10d      	bne.n	8001e7e <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001e62:	2300      	movs	r3, #0
 8001e64:	60fb      	str	r3, [r7, #12]
 8001e66:	4b0a      	ldr	r3, [pc, #40]	; (8001e90 <HAL_TIM_PWM_MspInit+0x40>)
 8001e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6a:	4a09      	ldr	r2, [pc, #36]	; (8001e90 <HAL_TIM_PWM_MspInit+0x40>)
 8001e6c:	f043 0304 	orr.w	r3, r3, #4
 8001e70:	6413      	str	r3, [r2, #64]	; 0x40
 8001e72:	4b07      	ldr	r3, [pc, #28]	; (8001e90 <HAL_TIM_PWM_MspInit+0x40>)
 8001e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e76:	f003 0304 	and.w	r3, r3, #4
 8001e7a:	60fb      	str	r3, [r7, #12]
 8001e7c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001e7e:	bf00      	nop
 8001e80:	3714      	adds	r7, #20
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr
 8001e8a:	bf00      	nop
 8001e8c:	40000800 	.word	0x40000800
 8001e90:	40023800 	.word	0x40023800

08001e94 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b085      	sub	sp, #20
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM12)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a0b      	ldr	r2, [pc, #44]	; (8001ed0 <HAL_TIM_Base_MspInit+0x3c>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d10d      	bne.n	8001ec2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* TIM12 clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	60fb      	str	r3, [r7, #12]
 8001eaa:	4b0a      	ldr	r3, [pc, #40]	; (8001ed4 <HAL_TIM_Base_MspInit+0x40>)
 8001eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eae:	4a09      	ldr	r2, [pc, #36]	; (8001ed4 <HAL_TIM_Base_MspInit+0x40>)
 8001eb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001eb4:	6413      	str	r3, [r2, #64]	; 0x40
 8001eb6:	4b07      	ldr	r3, [pc, #28]	; (8001ed4 <HAL_TIM_Base_MspInit+0x40>)
 8001eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ebe:	60fb      	str	r3, [r7, #12]
 8001ec0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 8001ec2:	bf00      	nop
 8001ec4:	3714      	adds	r7, #20
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr
 8001ece:	bf00      	nop
 8001ed0:	40001800 	.word	0x40001800
 8001ed4:	40023800 	.word	0x40023800

08001ed8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b08a      	sub	sp, #40	; 0x28
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ee0:	f107 0314 	add.w	r3, r7, #20
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	601a      	str	r2, [r3, #0]
 8001ee8:	605a      	str	r2, [r3, #4]
 8001eea:	609a      	str	r2, [r3, #8]
 8001eec:	60da      	str	r2, [r3, #12]
 8001eee:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a24      	ldr	r2, [pc, #144]	; (8001f88 <HAL_TIM_MspPostInit+0xb0>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d11f      	bne.n	8001f3a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001efa:	2300      	movs	r3, #0
 8001efc:	613b      	str	r3, [r7, #16]
 8001efe:	4b23      	ldr	r3, [pc, #140]	; (8001f8c <HAL_TIM_MspPostInit+0xb4>)
 8001f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f02:	4a22      	ldr	r2, [pc, #136]	; (8001f8c <HAL_TIM_MspPostInit+0xb4>)
 8001f04:	f043 0308 	orr.w	r3, r3, #8
 8001f08:	6313      	str	r3, [r2, #48]	; 0x30
 8001f0a:	4b20      	ldr	r3, [pc, #128]	; (8001f8c <HAL_TIM_MspPostInit+0xb4>)
 8001f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0e:	f003 0308 	and.w	r3, r3, #8
 8001f12:	613b      	str	r3, [r7, #16]
 8001f14:	693b      	ldr	r3, [r7, #16]
    PD15     ------> TIM4_CH4
    PD14     ------> TIM4_CH3
    PD13     ------> TIM4_CH2
    PD12     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_12;
 8001f16:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001f1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f1c:	2302      	movs	r3, #2
 8001f1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f20:	2300      	movs	r3, #0
 8001f22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f24:	2300      	movs	r3, #0
 8001f26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001f28:	2302      	movs	r3, #2
 8001f2a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f2c:	f107 0314 	add.w	r3, r7, #20
 8001f30:	4619      	mov	r1, r3
 8001f32:	4817      	ldr	r0, [pc, #92]	; (8001f90 <HAL_TIM_MspPostInit+0xb8>)
 8001f34:	f003 f8c6 	bl	80050c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8001f38:	e022      	b.n	8001f80 <HAL_TIM_MspPostInit+0xa8>
  else if(timHandle->Instance==TIM12)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a15      	ldr	r2, [pc, #84]	; (8001f94 <HAL_TIM_MspPostInit+0xbc>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d11d      	bne.n	8001f80 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f44:	2300      	movs	r3, #0
 8001f46:	60fb      	str	r3, [r7, #12]
 8001f48:	4b10      	ldr	r3, [pc, #64]	; (8001f8c <HAL_TIM_MspPostInit+0xb4>)
 8001f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4c:	4a0f      	ldr	r2, [pc, #60]	; (8001f8c <HAL_TIM_MspPostInit+0xb4>)
 8001f4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f52:	6313      	str	r3, [r2, #48]	; 0x30
 8001f54:	4b0d      	ldr	r3, [pc, #52]	; (8001f8c <HAL_TIM_MspPostInit+0xb4>)
 8001f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f5c:	60fb      	str	r3, [r7, #12]
 8001f5e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001f60:	2340      	movs	r3, #64	; 0x40
 8001f62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f64:	2302      	movs	r3, #2
 8001f66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8001f70:	2309      	movs	r3, #9
 8001f72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001f74:	f107 0314 	add.w	r3, r7, #20
 8001f78:	4619      	mov	r1, r3
 8001f7a:	4807      	ldr	r0, [pc, #28]	; (8001f98 <HAL_TIM_MspPostInit+0xc0>)
 8001f7c:	f003 f8a2 	bl	80050c4 <HAL_GPIO_Init>
}
 8001f80:	bf00      	nop
 8001f82:	3728      	adds	r7, #40	; 0x28
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	40000800 	.word	0x40000800
 8001f8c:	40023800 	.word	0x40023800
 8001f90:	40020c00 	.word	0x40020c00
 8001f94:	40001800 	.word	0x40001800
 8001f98:	40021c00 	.word	0x40021c00

08001f9c <MX_UART7_Init>:
DMA_HandleTypeDef hdma_usart1_rx;
DMA_HandleTypeDef hdma_usart6_rx;

/* UART7 init function */
void MX_UART7_Init(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	af00      	add	r7, sp, #0

  huart7.Instance = UART7;
 8001fa0:	4b11      	ldr	r3, [pc, #68]	; (8001fe8 <MX_UART7_Init+0x4c>)
 8001fa2:	4a12      	ldr	r2, [pc, #72]	; (8001fec <MX_UART7_Init+0x50>)
 8001fa4:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8001fa6:	4b10      	ldr	r3, [pc, #64]	; (8001fe8 <MX_UART7_Init+0x4c>)
 8001fa8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001fac:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8001fae:	4b0e      	ldr	r3, [pc, #56]	; (8001fe8 <MX_UART7_Init+0x4c>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8001fb4:	4b0c      	ldr	r3, [pc, #48]	; (8001fe8 <MX_UART7_Init+0x4c>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8001fba:	4b0b      	ldr	r3, [pc, #44]	; (8001fe8 <MX_UART7_Init+0x4c>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8001fc0:	4b09      	ldr	r3, [pc, #36]	; (8001fe8 <MX_UART7_Init+0x4c>)
 8001fc2:	220c      	movs	r2, #12
 8001fc4:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fc6:	4b08      	ldr	r3, [pc, #32]	; (8001fe8 <MX_UART7_Init+0x4c>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fcc:	4b06      	ldr	r3, [pc, #24]	; (8001fe8 <MX_UART7_Init+0x4c>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8001fd2:	4805      	ldr	r0, [pc, #20]	; (8001fe8 <MX_UART7_Init+0x4c>)
 8001fd4:	f004 fe48 	bl	8006c68 <HAL_UART_Init>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d001      	beq.n	8001fe2 <MX_UART7_Init+0x46>
  {
    Error_Handler();
 8001fde:	f7ff fc23 	bl	8001828 <Error_Handler>
  }

}
 8001fe2:	bf00      	nop
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	20009aa4 	.word	0x20009aa4
 8001fec:	40007800 	.word	0x40007800

08001ff0 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8001ff4:	4b11      	ldr	r3, [pc, #68]	; (800203c <MX_USART1_UART_Init+0x4c>)
 8001ff6:	4a12      	ldr	r2, [pc, #72]	; (8002040 <MX_USART1_UART_Init+0x50>)
 8001ff8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 100000;
 8001ffa:	4b10      	ldr	r3, [pc, #64]	; (800203c <MX_USART1_UART_Init+0x4c>)
 8001ffc:	4a11      	ldr	r2, [pc, #68]	; (8002044 <MX_USART1_UART_Init+0x54>)
 8001ffe:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 8002000:	4b0e      	ldr	r3, [pc, #56]	; (800203c <MX_USART1_UART_Init+0x4c>)
 8002002:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002006:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002008:	4b0c      	ldr	r3, [pc, #48]	; (800203c <MX_USART1_UART_Init+0x4c>)
 800200a:	2200      	movs	r2, #0
 800200c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 800200e:	4b0b      	ldr	r3, [pc, #44]	; (800203c <MX_USART1_UART_Init+0x4c>)
 8002010:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002014:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_RX;
 8002016:	4b09      	ldr	r3, [pc, #36]	; (800203c <MX_USART1_UART_Init+0x4c>)
 8002018:	2204      	movs	r2, #4
 800201a:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800201c:	4b07      	ldr	r3, [pc, #28]	; (800203c <MX_USART1_UART_Init+0x4c>)
 800201e:	2200      	movs	r2, #0
 8002020:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002022:	4b06      	ldr	r3, [pc, #24]	; (800203c <MX_USART1_UART_Init+0x4c>)
 8002024:	2200      	movs	r2, #0
 8002026:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002028:	4804      	ldr	r0, [pc, #16]	; (800203c <MX_USART1_UART_Init+0x4c>)
 800202a:	f004 fe1d 	bl	8006c68 <HAL_UART_Init>
 800202e:	4603      	mov	r3, r0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d001      	beq.n	8002038 <MX_USART1_UART_Init+0x48>
  {
    Error_Handler();
 8002034:	f7ff fbf8 	bl	8001828 <Error_Handler>
  }

}
 8002038:	bf00      	nop
 800203a:	bd80      	pop	{r7, pc}
 800203c:	20009ba4 	.word	0x20009ba4
 8002040:	40011000 	.word	0x40011000
 8002044:	000186a0 	.word	0x000186a0

08002048 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	af00      	add	r7, sp, #0

  huart6.Instance = USART6;
 800204c:	4b11      	ldr	r3, [pc, #68]	; (8002094 <MX_USART6_UART_Init+0x4c>)
 800204e:	4a12      	ldr	r2, [pc, #72]	; (8002098 <MX_USART6_UART_Init+0x50>)
 8002050:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002052:	4b10      	ldr	r3, [pc, #64]	; (8002094 <MX_USART6_UART_Init+0x4c>)
 8002054:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002058:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800205a:	4b0e      	ldr	r3, [pc, #56]	; (8002094 <MX_USART6_UART_Init+0x4c>)
 800205c:	2200      	movs	r2, #0
 800205e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002060:	4b0c      	ldr	r3, [pc, #48]	; (8002094 <MX_USART6_UART_Init+0x4c>)
 8002062:	2200      	movs	r2, #0
 8002064:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002066:	4b0b      	ldr	r3, [pc, #44]	; (8002094 <MX_USART6_UART_Init+0x4c>)
 8002068:	2200      	movs	r2, #0
 800206a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_RX;
 800206c:	4b09      	ldr	r3, [pc, #36]	; (8002094 <MX_USART6_UART_Init+0x4c>)
 800206e:	2204      	movs	r2, #4
 8002070:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002072:	4b08      	ldr	r3, [pc, #32]	; (8002094 <MX_USART6_UART_Init+0x4c>)
 8002074:	2200      	movs	r2, #0
 8002076:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002078:	4b06      	ldr	r3, [pc, #24]	; (8002094 <MX_USART6_UART_Init+0x4c>)
 800207a:	2200      	movs	r2, #0
 800207c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800207e:	4805      	ldr	r0, [pc, #20]	; (8002094 <MX_USART6_UART_Init+0x4c>)
 8002080:	f004 fdf2 	bl	8006c68 <HAL_UART_Init>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d001      	beq.n	800208e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800208a:	f7ff fbcd 	bl	8001828 <Error_Handler>
  }

}
 800208e:	bf00      	nop
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	20009be4 	.word	0x20009be4
 8002098:	40011400 	.word	0x40011400

0800209c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b08e      	sub	sp, #56	; 0x38
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020a8:	2200      	movs	r2, #0
 80020aa:	601a      	str	r2, [r3, #0]
 80020ac:	605a      	str	r2, [r3, #4]
 80020ae:	609a      	str	r2, [r3, #8]
 80020b0:	60da      	str	r2, [r3, #12]
 80020b2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART7)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a74      	ldr	r2, [pc, #464]	; (800228c <HAL_UART_MspInit+0x1f0>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d164      	bne.n	8002188 <HAL_UART_MspInit+0xec>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* UART7 clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 80020be:	2300      	movs	r3, #0
 80020c0:	623b      	str	r3, [r7, #32]
 80020c2:	4b73      	ldr	r3, [pc, #460]	; (8002290 <HAL_UART_MspInit+0x1f4>)
 80020c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c6:	4a72      	ldr	r2, [pc, #456]	; (8002290 <HAL_UART_MspInit+0x1f4>)
 80020c8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80020cc:	6413      	str	r3, [r2, #64]	; 0x40
 80020ce:	4b70      	ldr	r3, [pc, #448]	; (8002290 <HAL_UART_MspInit+0x1f4>)
 80020d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80020d6:	623b      	str	r3, [r7, #32]
 80020d8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80020da:	2300      	movs	r3, #0
 80020dc:	61fb      	str	r3, [r7, #28]
 80020de:	4b6c      	ldr	r3, [pc, #432]	; (8002290 <HAL_UART_MspInit+0x1f4>)
 80020e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e2:	4a6b      	ldr	r2, [pc, #428]	; (8002290 <HAL_UART_MspInit+0x1f4>)
 80020e4:	f043 0310 	orr.w	r3, r3, #16
 80020e8:	6313      	str	r3, [r2, #48]	; 0x30
 80020ea:	4b69      	ldr	r3, [pc, #420]	; (8002290 <HAL_UART_MspInit+0x1f4>)
 80020ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ee:	f003 0310 	and.w	r3, r3, #16
 80020f2:	61fb      	str	r3, [r7, #28]
 80020f4:	69fb      	ldr	r3, [r7, #28]
    /**UART7 GPIO Configuration
    PE8     ------> UART7_TX
    PE7     ------> UART7_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_7;
 80020f6:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80020fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020fc:	2302      	movs	r3, #2
 80020fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002100:	2301      	movs	r3, #1
 8002102:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002104:	2303      	movs	r3, #3
 8002106:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8002108:	2308      	movs	r3, #8
 800210a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800210c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002110:	4619      	mov	r1, r3
 8002112:	4860      	ldr	r0, [pc, #384]	; (8002294 <HAL_UART_MspInit+0x1f8>)
 8002114:	f002 ffd6 	bl	80050c4 <HAL_GPIO_Init>

    /* UART7 DMA Init */
    /* UART7_RX Init */
    hdma_uart7_rx.Instance = DMA1_Stream3;
 8002118:	4b5f      	ldr	r3, [pc, #380]	; (8002298 <HAL_UART_MspInit+0x1fc>)
 800211a:	4a60      	ldr	r2, [pc, #384]	; (800229c <HAL_UART_MspInit+0x200>)
 800211c:	601a      	str	r2, [r3, #0]
    hdma_uart7_rx.Init.Channel = DMA_CHANNEL_5;
 800211e:	4b5e      	ldr	r3, [pc, #376]	; (8002298 <HAL_UART_MspInit+0x1fc>)
 8002120:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8002124:	605a      	str	r2, [r3, #4]
    hdma_uart7_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002126:	4b5c      	ldr	r3, [pc, #368]	; (8002298 <HAL_UART_MspInit+0x1fc>)
 8002128:	2200      	movs	r2, #0
 800212a:	609a      	str	r2, [r3, #8]
    hdma_uart7_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800212c:	4b5a      	ldr	r3, [pc, #360]	; (8002298 <HAL_UART_MspInit+0x1fc>)
 800212e:	2200      	movs	r2, #0
 8002130:	60da      	str	r2, [r3, #12]
    hdma_uart7_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002132:	4b59      	ldr	r3, [pc, #356]	; (8002298 <HAL_UART_MspInit+0x1fc>)
 8002134:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002138:	611a      	str	r2, [r3, #16]
    hdma_uart7_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800213a:	4b57      	ldr	r3, [pc, #348]	; (8002298 <HAL_UART_MspInit+0x1fc>)
 800213c:	2200      	movs	r2, #0
 800213e:	615a      	str	r2, [r3, #20]
    hdma_uart7_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002140:	4b55      	ldr	r3, [pc, #340]	; (8002298 <HAL_UART_MspInit+0x1fc>)
 8002142:	2200      	movs	r2, #0
 8002144:	619a      	str	r2, [r3, #24]
    hdma_uart7_rx.Init.Mode = DMA_CIRCULAR;
 8002146:	4b54      	ldr	r3, [pc, #336]	; (8002298 <HAL_UART_MspInit+0x1fc>)
 8002148:	f44f 7280 	mov.w	r2, #256	; 0x100
 800214c:	61da      	str	r2, [r3, #28]
    hdma_uart7_rx.Init.Priority = DMA_PRIORITY_LOW;
 800214e:	4b52      	ldr	r3, [pc, #328]	; (8002298 <HAL_UART_MspInit+0x1fc>)
 8002150:	2200      	movs	r2, #0
 8002152:	621a      	str	r2, [r3, #32]
    hdma_uart7_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002154:	4b50      	ldr	r3, [pc, #320]	; (8002298 <HAL_UART_MspInit+0x1fc>)
 8002156:	2200      	movs	r2, #0
 8002158:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart7_rx) != HAL_OK)
 800215a:	484f      	ldr	r0, [pc, #316]	; (8002298 <HAL_UART_MspInit+0x1fc>)
 800215c:	f002 fc20 	bl	80049a0 <HAL_DMA_Init>
 8002160:	4603      	mov	r3, r0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d001      	beq.n	800216a <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8002166:	f7ff fb5f 	bl	8001828 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart7_rx);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4a4a      	ldr	r2, [pc, #296]	; (8002298 <HAL_UART_MspInit+0x1fc>)
 800216e:	635a      	str	r2, [r3, #52]	; 0x34
 8002170:	4a49      	ldr	r2, [pc, #292]	; (8002298 <HAL_UART_MspInit+0x1fc>)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART7 interrupt Init */
    HAL_NVIC_SetPriority(UART7_IRQn, 5, 0);
 8002176:	2200      	movs	r2, #0
 8002178:	2105      	movs	r1, #5
 800217a:	2052      	movs	r0, #82	; 0x52
 800217c:	f002 fbe6 	bl	800494c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8002180:	2052      	movs	r0, #82	; 0x52
 8002182:	f002 fbff 	bl	8004984 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8002186:	e0fe      	b.n	8002386 <HAL_UART_MspInit+0x2ea>
  else if(uartHandle->Instance==USART1)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a44      	ldr	r2, [pc, #272]	; (80022a0 <HAL_UART_MspInit+0x204>)
 800218e:	4293      	cmp	r3, r2
 8002190:	f040 8090 	bne.w	80022b4 <HAL_UART_MspInit+0x218>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002194:	2300      	movs	r3, #0
 8002196:	61bb      	str	r3, [r7, #24]
 8002198:	4b3d      	ldr	r3, [pc, #244]	; (8002290 <HAL_UART_MspInit+0x1f4>)
 800219a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800219c:	4a3c      	ldr	r2, [pc, #240]	; (8002290 <HAL_UART_MspInit+0x1f4>)
 800219e:	f043 0310 	orr.w	r3, r3, #16
 80021a2:	6453      	str	r3, [r2, #68]	; 0x44
 80021a4:	4b3a      	ldr	r3, [pc, #232]	; (8002290 <HAL_UART_MspInit+0x1f4>)
 80021a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021a8:	f003 0310 	and.w	r3, r3, #16
 80021ac:	61bb      	str	r3, [r7, #24]
 80021ae:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021b0:	2300      	movs	r3, #0
 80021b2:	617b      	str	r3, [r7, #20]
 80021b4:	4b36      	ldr	r3, [pc, #216]	; (8002290 <HAL_UART_MspInit+0x1f4>)
 80021b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b8:	4a35      	ldr	r2, [pc, #212]	; (8002290 <HAL_UART_MspInit+0x1f4>)
 80021ba:	f043 0302 	orr.w	r3, r3, #2
 80021be:	6313      	str	r3, [r2, #48]	; 0x30
 80021c0:	4b33      	ldr	r3, [pc, #204]	; (8002290 <HAL_UART_MspInit+0x1f4>)
 80021c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c4:	f003 0302 	and.w	r3, r3, #2
 80021c8:	617b      	str	r3, [r7, #20]
 80021ca:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021cc:	2300      	movs	r3, #0
 80021ce:	613b      	str	r3, [r7, #16]
 80021d0:	4b2f      	ldr	r3, [pc, #188]	; (8002290 <HAL_UART_MspInit+0x1f4>)
 80021d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d4:	4a2e      	ldr	r2, [pc, #184]	; (8002290 <HAL_UART_MspInit+0x1f4>)
 80021d6:	f043 0301 	orr.w	r3, r3, #1
 80021da:	6313      	str	r3, [r2, #48]	; 0x30
 80021dc:	4b2c      	ldr	r3, [pc, #176]	; (8002290 <HAL_UART_MspInit+0x1f4>)
 80021de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e0:	f003 0301 	and.w	r3, r3, #1
 80021e4:	613b      	str	r3, [r7, #16]
 80021e6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80021e8:	2380      	movs	r3, #128	; 0x80
 80021ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ec:	2302      	movs	r3, #2
 80021ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f0:	2300      	movs	r3, #0
 80021f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021f4:	2303      	movs	r3, #3
 80021f6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80021f8:	2307      	movs	r3, #7
 80021fa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002200:	4619      	mov	r1, r3
 8002202:	4828      	ldr	r0, [pc, #160]	; (80022a4 <HAL_UART_MspInit+0x208>)
 8002204:	f002 ff5e 	bl	80050c4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002208:	f44f 7300 	mov.w	r3, #512	; 0x200
 800220c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800220e:	2302      	movs	r3, #2
 8002210:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002212:	2300      	movs	r3, #0
 8002214:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002216:	2303      	movs	r3, #3
 8002218:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800221a:	2307      	movs	r3, #7
 800221c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800221e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002222:	4619      	mov	r1, r3
 8002224:	4820      	ldr	r0, [pc, #128]	; (80022a8 <HAL_UART_MspInit+0x20c>)
 8002226:	f002 ff4d 	bl	80050c4 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 800222a:	4b20      	ldr	r3, [pc, #128]	; (80022ac <HAL_UART_MspInit+0x210>)
 800222c:	4a20      	ldr	r2, [pc, #128]	; (80022b0 <HAL_UART_MspInit+0x214>)
 800222e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8002230:	4b1e      	ldr	r3, [pc, #120]	; (80022ac <HAL_UART_MspInit+0x210>)
 8002232:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002236:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002238:	4b1c      	ldr	r3, [pc, #112]	; (80022ac <HAL_UART_MspInit+0x210>)
 800223a:	2200      	movs	r2, #0
 800223c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800223e:	4b1b      	ldr	r3, [pc, #108]	; (80022ac <HAL_UART_MspInit+0x210>)
 8002240:	2200      	movs	r2, #0
 8002242:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002244:	4b19      	ldr	r3, [pc, #100]	; (80022ac <HAL_UART_MspInit+0x210>)
 8002246:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800224a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800224c:	4b17      	ldr	r3, [pc, #92]	; (80022ac <HAL_UART_MspInit+0x210>)
 800224e:	2200      	movs	r2, #0
 8002250:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002252:	4b16      	ldr	r3, [pc, #88]	; (80022ac <HAL_UART_MspInit+0x210>)
 8002254:	2200      	movs	r2, #0
 8002256:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002258:	4b14      	ldr	r3, [pc, #80]	; (80022ac <HAL_UART_MspInit+0x210>)
 800225a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800225e:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002260:	4b12      	ldr	r3, [pc, #72]	; (80022ac <HAL_UART_MspInit+0x210>)
 8002262:	2200      	movs	r2, #0
 8002264:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002266:	4b11      	ldr	r3, [pc, #68]	; (80022ac <HAL_UART_MspInit+0x210>)
 8002268:	2200      	movs	r2, #0
 800226a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800226c:	480f      	ldr	r0, [pc, #60]	; (80022ac <HAL_UART_MspInit+0x210>)
 800226e:	f002 fb97 	bl	80049a0 <HAL_DMA_Init>
 8002272:	4603      	mov	r3, r0
 8002274:	2b00      	cmp	r3, #0
 8002276:	d001      	beq.n	800227c <HAL_UART_MspInit+0x1e0>
      Error_Handler();
 8002278:	f7ff fad6 	bl	8001828 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	4a0b      	ldr	r2, [pc, #44]	; (80022ac <HAL_UART_MspInit+0x210>)
 8002280:	635a      	str	r2, [r3, #52]	; 0x34
 8002282:	4a0a      	ldr	r2, [pc, #40]	; (80022ac <HAL_UART_MspInit+0x210>)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002288:	e07d      	b.n	8002386 <HAL_UART_MspInit+0x2ea>
 800228a:	bf00      	nop
 800228c:	40007800 	.word	0x40007800
 8002290:	40023800 	.word	0x40023800
 8002294:	40021000 	.word	0x40021000
 8002298:	20009ae4 	.word	0x20009ae4
 800229c:	40026058 	.word	0x40026058
 80022a0:	40011000 	.word	0x40011000
 80022a4:	40020400 	.word	0x40020400
 80022a8:	40020000 	.word	0x40020000
 80022ac:	20009b44 	.word	0x20009b44
 80022b0:	40026440 	.word	0x40026440
  else if(uartHandle->Instance==USART6)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a35      	ldr	r2, [pc, #212]	; (8002390 <HAL_UART_MspInit+0x2f4>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d163      	bne.n	8002386 <HAL_UART_MspInit+0x2ea>
    __HAL_RCC_USART6_CLK_ENABLE();
 80022be:	2300      	movs	r3, #0
 80022c0:	60fb      	str	r3, [r7, #12]
 80022c2:	4b34      	ldr	r3, [pc, #208]	; (8002394 <HAL_UART_MspInit+0x2f8>)
 80022c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022c6:	4a33      	ldr	r2, [pc, #204]	; (8002394 <HAL_UART_MspInit+0x2f8>)
 80022c8:	f043 0320 	orr.w	r3, r3, #32
 80022cc:	6453      	str	r3, [r2, #68]	; 0x44
 80022ce:	4b31      	ldr	r3, [pc, #196]	; (8002394 <HAL_UART_MspInit+0x2f8>)
 80022d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022d2:	f003 0320 	and.w	r3, r3, #32
 80022d6:	60fb      	str	r3, [r7, #12]
 80022d8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80022da:	2300      	movs	r3, #0
 80022dc:	60bb      	str	r3, [r7, #8]
 80022de:	4b2d      	ldr	r3, [pc, #180]	; (8002394 <HAL_UART_MspInit+0x2f8>)
 80022e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e2:	4a2c      	ldr	r2, [pc, #176]	; (8002394 <HAL_UART_MspInit+0x2f8>)
 80022e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80022e8:	6313      	str	r3, [r2, #48]	; 0x30
 80022ea:	4b2a      	ldr	r3, [pc, #168]	; (8002394 <HAL_UART_MspInit+0x2f8>)
 80022ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022f2:	60bb      	str	r3, [r7, #8]
 80022f4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_9;
 80022f6:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 80022fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022fc:	2302      	movs	r3, #2
 80022fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002300:	2300      	movs	r3, #0
 8002302:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002304:	2303      	movs	r3, #3
 8002306:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002308:	2308      	movs	r3, #8
 800230a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800230c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002310:	4619      	mov	r1, r3
 8002312:	4821      	ldr	r0, [pc, #132]	; (8002398 <HAL_UART_MspInit+0x2fc>)
 8002314:	f002 fed6 	bl	80050c4 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8002318:	4b20      	ldr	r3, [pc, #128]	; (800239c <HAL_UART_MspInit+0x300>)
 800231a:	4a21      	ldr	r2, [pc, #132]	; (80023a0 <HAL_UART_MspInit+0x304>)
 800231c:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 800231e:	4b1f      	ldr	r3, [pc, #124]	; (800239c <HAL_UART_MspInit+0x300>)
 8002320:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8002324:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002326:	4b1d      	ldr	r3, [pc, #116]	; (800239c <HAL_UART_MspInit+0x300>)
 8002328:	2200      	movs	r2, #0
 800232a:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800232c:	4b1b      	ldr	r3, [pc, #108]	; (800239c <HAL_UART_MspInit+0x300>)
 800232e:	2200      	movs	r2, #0
 8002330:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002332:	4b1a      	ldr	r3, [pc, #104]	; (800239c <HAL_UART_MspInit+0x300>)
 8002334:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002338:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800233a:	4b18      	ldr	r3, [pc, #96]	; (800239c <HAL_UART_MspInit+0x300>)
 800233c:	2200      	movs	r2, #0
 800233e:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002340:	4b16      	ldr	r3, [pc, #88]	; (800239c <HAL_UART_MspInit+0x300>)
 8002342:	2200      	movs	r2, #0
 8002344:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8002346:	4b15      	ldr	r3, [pc, #84]	; (800239c <HAL_UART_MspInit+0x300>)
 8002348:	f44f 7280 	mov.w	r2, #256	; 0x100
 800234c:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 800234e:	4b13      	ldr	r3, [pc, #76]	; (800239c <HAL_UART_MspInit+0x300>)
 8002350:	2200      	movs	r2, #0
 8002352:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002354:	4b11      	ldr	r3, [pc, #68]	; (800239c <HAL_UART_MspInit+0x300>)
 8002356:	2200      	movs	r2, #0
 8002358:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 800235a:	4810      	ldr	r0, [pc, #64]	; (800239c <HAL_UART_MspInit+0x300>)
 800235c:	f002 fb20 	bl	80049a0 <HAL_DMA_Init>
 8002360:	4603      	mov	r3, r0
 8002362:	2b00      	cmp	r3, #0
 8002364:	d001      	beq.n	800236a <HAL_UART_MspInit+0x2ce>
      Error_Handler();
 8002366:	f7ff fa5f 	bl	8001828 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	4a0b      	ldr	r2, [pc, #44]	; (800239c <HAL_UART_MspInit+0x300>)
 800236e:	635a      	str	r2, [r3, #52]	; 0x34
 8002370:	4a0a      	ldr	r2, [pc, #40]	; (800239c <HAL_UART_MspInit+0x300>)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8002376:	2200      	movs	r2, #0
 8002378:	2105      	movs	r1, #5
 800237a:	2047      	movs	r0, #71	; 0x47
 800237c:	f002 fae6 	bl	800494c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002380:	2047      	movs	r0, #71	; 0x47
 8002382:	f002 faff 	bl	8004984 <HAL_NVIC_EnableIRQ>
}
 8002386:	bf00      	nop
 8002388:	3738      	adds	r7, #56	; 0x38
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	40011400 	.word	0x40011400
 8002394:	40023800 	.word	0x40023800
 8002398:	40021800 	.word	0x40021800
 800239c:	20009a44 	.word	0x20009a44
 80023a0:	40026428 	.word	0x40026428

080023a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80023a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80023dc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80023a8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80023aa:	e003      	b.n	80023b4 <LoopCopyDataInit>

080023ac <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80023ac:	4b0c      	ldr	r3, [pc, #48]	; (80023e0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80023ae:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80023b0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80023b2:	3104      	adds	r1, #4

080023b4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80023b4:	480b      	ldr	r0, [pc, #44]	; (80023e4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80023b6:	4b0c      	ldr	r3, [pc, #48]	; (80023e8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80023b8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80023ba:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80023bc:	d3f6      	bcc.n	80023ac <CopyDataInit>
  ldr  r2, =_sbss
 80023be:	4a0b      	ldr	r2, [pc, #44]	; (80023ec <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80023c0:	e002      	b.n	80023c8 <LoopFillZerobss>

080023c2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80023c2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80023c4:	f842 3b04 	str.w	r3, [r2], #4

080023c8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80023c8:	4b09      	ldr	r3, [pc, #36]	; (80023f0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80023ca:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80023cc:	d3f9      	bcc.n	80023c2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80023ce:	f7ff fc4d 	bl	8001c6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80023d2:	f009 f813 	bl	800b3fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80023d6:	f7ff f987 	bl	80016e8 <main>
  bx  lr    
 80023da:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80023dc:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80023e0:	0800b5bc 	.word	0x0800b5bc
  ldr  r0, =_sdata
 80023e4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80023e8:	20000018 	.word	0x20000018
  ldr  r2, =_sbss
 80023ec:	20000018 	.word	0x20000018
  ldr  r3, = _ebss
 80023f0:	20009eb0 	.word	0x20009eb0

080023f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80023f4:	e7fe      	b.n	80023f4 <ADC_IRQHandler>
	...

080023f8 <can_ISR>:
/**
 * CAN ISR function, triggered upon RX_FIFO0_MSG_PENDING
 * converts the raw can data to the motor_data struct form as well
 */
void can_ISR(CAN_HandleTypeDef *hcan)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b094      	sub	sp, #80	; 0x50
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
	HAL_CAN_DeactivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_RX_FIFO0_FULL | CAN_IT_RX_FIFO0_OVERRUN);
 8002400:	210e      	movs	r1, #14
 8002402:	6878      	ldr	r0, [r7, #4]
 8002404:	f001 ff93 	bl	800432e <HAL_CAN_DeactivateNotification>
	if (hcan->Instance == CAN1)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a2f      	ldr	r2, [pc, #188]	; (80024cc <can_ISR+0xd4>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d129      	bne.n	8002466 <can_ISR+0x6e>
	{
		CAN_RxHeaderTypeDef rx_msg_header;
		uint8_t rx_buffer[CAN_BUFFER_SIZE];
		can_get_msg(&hcan1, &rx_msg_header, rx_buffer);
 8002412:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8002416:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800241a:	4619      	mov	r1, r3
 800241c:	482c      	ldr	r0, [pc, #176]	; (80024d0 <can_ISR+0xd8>)
 800241e:	f7fe fd6c 	bl	8000efa <can_get_msg>
		convert_raw_can_data(rx_msg_header.StdId, rx_buffer);
 8002422:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002424:	b29b      	uxth	r3, r3
 8002426:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800242a:	4611      	mov	r1, r2
 800242c:	4618      	mov	r0, r3
 800242e:	f000 f859 	bl	80024e4 <convert_raw_can_data>
		history[history_index++] = rx_msg_header.StdId;
 8002432:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002434:	4b27      	ldr	r3, [pc, #156]	; (80024d4 <can_ISR+0xdc>)
 8002436:	881b      	ldrh	r3, [r3, #0]
 8002438:	1c5a      	adds	r2, r3, #1
 800243a:	b290      	uxth	r0, r2
 800243c:	4a25      	ldr	r2, [pc, #148]	; (80024d4 <can_ISR+0xdc>)
 800243e:	8010      	strh	r0, [r2, #0]
 8002440:	461a      	mov	r2, r3
 8002442:	b289      	uxth	r1, r1
 8002444:	4b24      	ldr	r3, [pc, #144]	; (80024d8 <can_ISR+0xe0>)
 8002446:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		if (history_index >= 10000)
 800244a:	4b22      	ldr	r3, [pc, #136]	; (80024d4 <can_ISR+0xdc>)
 800244c:	881b      	ldrh	r3, [r3, #0]
 800244e:	f242 720f 	movw	r2, #9999	; 0x270f
 8002452:	4293      	cmp	r3, r2
 8002454:	d902      	bls.n	800245c <can_ISR+0x64>
		{
			history_index = 0;
 8002456:	4b1f      	ldr	r3, [pc, #124]	; (80024d4 <can_ISR+0xdc>)
 8002458:	2200      	movs	r2, #0
 800245a:	801a      	strh	r2, [r3, #0]
		}
		HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_RX_FIFO0_FULL	| CAN_IT_RX_FIFO0_OVERRUN);
 800245c:	210e      	movs	r1, #14
 800245e:	481c      	ldr	r0, [pc, #112]	; (80024d0 <can_ISR+0xd8>)
 8002460:	f001 ff3f 	bl	80042e2 <HAL_CAN_ActivateNotification>
		}

		HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_RX_FIFO0_FULL	| CAN_IT_RX_FIFO0_OVERRUN);
		// something
	}
}
 8002464:	e02d      	b.n	80024c2 <can_ISR+0xca>
	else if (hcan->Instance == CAN2)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a1c      	ldr	r2, [pc, #112]	; (80024dc <can_ISR+0xe4>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d128      	bne.n	80024c2 <can_ISR+0xca>
		can_get_msg(&hcan2, &rx_msg_header, rx_buffer);
 8002470:	f107 0208 	add.w	r2, r7, #8
 8002474:	f107 0310 	add.w	r3, r7, #16
 8002478:	4619      	mov	r1, r3
 800247a:	4819      	ldr	r0, [pc, #100]	; (80024e0 <can_ISR+0xe8>)
 800247c:	f7fe fd3d 	bl	8000efa <can_get_msg>
		convert_raw_can_data(rx_msg_header.StdId, rx_buffer);
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	b29b      	uxth	r3, r3
 8002484:	f107 0208 	add.w	r2, r7, #8
 8002488:	4611      	mov	r1, r2
 800248a:	4618      	mov	r0, r3
 800248c:	f000 f82a 	bl	80024e4 <convert_raw_can_data>
		history[history_index++] = rx_msg_header.StdId;
 8002490:	6939      	ldr	r1, [r7, #16]
 8002492:	4b10      	ldr	r3, [pc, #64]	; (80024d4 <can_ISR+0xdc>)
 8002494:	881b      	ldrh	r3, [r3, #0]
 8002496:	1c5a      	adds	r2, r3, #1
 8002498:	b290      	uxth	r0, r2
 800249a:	4a0e      	ldr	r2, [pc, #56]	; (80024d4 <can_ISR+0xdc>)
 800249c:	8010      	strh	r0, [r2, #0]
 800249e:	461a      	mov	r2, r3
 80024a0:	b289      	uxth	r1, r1
 80024a2:	4b0d      	ldr	r3, [pc, #52]	; (80024d8 <can_ISR+0xe0>)
 80024a4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		if (history_index >= 10000)
 80024a8:	4b0a      	ldr	r3, [pc, #40]	; (80024d4 <can_ISR+0xdc>)
 80024aa:	881b      	ldrh	r3, [r3, #0]
 80024ac:	f242 720f 	movw	r2, #9999	; 0x270f
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d902      	bls.n	80024ba <can_ISR+0xc2>
			history_index = 0;
 80024b4:	4b07      	ldr	r3, [pc, #28]	; (80024d4 <can_ISR+0xdc>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	801a      	strh	r2, [r3, #0]
		HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_RX_FIFO0_FULL	| CAN_IT_RX_FIFO0_OVERRUN);
 80024ba:	210e      	movs	r1, #14
 80024bc:	4808      	ldr	r0, [pc, #32]	; (80024e0 <can_ISR+0xe8>)
 80024be:	f001 ff10 	bl	80042e2 <HAL_CAN_ActivateNotification>
}
 80024c2:	bf00      	nop
 80024c4:	3750      	adds	r7, #80	; 0x50
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	40006400 	.word	0x40006400
 80024d0:	2000980c 	.word	0x2000980c
 80024d4:	20004e6c 	.word	0x20004e6c
 80024d8:	2000004c 	.word	0x2000004c
 80024dc:	40006800 	.word	0x40006800
 80024e0:	200097e4 	.word	0x200097e4

080024e4 <convert_raw_can_data>:
 *
 * For GM6020 motors, it recenters the motor angle data and converts it to radians.
 */

void convert_raw_can_data(uint16_t motor_id, uint8_t *rx_buffer)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b084      	sub	sp, #16
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	4603      	mov	r3, r0
 80024ec:	6039      	str	r1, [r7, #0]
 80024ee:	80fb      	strh	r3, [r7, #6]
	switch(motor_id)
 80024f0:	88fb      	ldrh	r3, [r7, #6]
 80024f2:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 80024f6:	2b09      	cmp	r3, #9
 80024f8:	f200 8124 	bhi.w	8002744 <convert_raw_can_data+0x260>
 80024fc:	a201      	add	r2, pc, #4	; (adr r2, 8002504 <convert_raw_can_data+0x20>)
 80024fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002502:	bf00      	nop
 8002504:	0800252d 	.word	0x0800252d
 8002508:	08002745 	.word	0x08002745
 800250c:	08002745 	.word	0x08002745
 8002510:	08002745 	.word	0x08002745
 8002514:	08002595 	.word	0x08002595
 8002518:	08002595 	.word	0x08002595
 800251c:	08002745 	.word	0x08002745
 8002520:	08002745 	.word	0x08002745
 8002524:	08002651 	.word	0x08002651
 8002528:	080026cb 	.word	0x080026cb
	{
		uint8_t feeder_id;
		case ID_CHASSIS:
		{
			canone_data.CHASSIS.id 					= motor_id;
 800252c:	4a88      	ldr	r2, [pc, #544]	; (8002750 <convert_raw_can_data+0x26c>)
 800252e:	88fb      	ldrh	r3, [r7, #6]
 8002530:	8013      	strh	r3, [r2, #0]
			canone_data.CHASSIS.angle				= (rx_buffer[0] << 8) | rx_buffer[1];
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	781b      	ldrb	r3, [r3, #0]
 8002536:	021b      	lsls	r3, r3, #8
 8002538:	b21a      	sxth	r2, r3
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	3301      	adds	r3, #1
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	b21b      	sxth	r3, r3
 8002542:	4313      	orrs	r3, r2
 8002544:	b21b      	sxth	r3, r3
 8002546:	b29a      	uxth	r2, r3
 8002548:	4b81      	ldr	r3, [pc, #516]	; (8002750 <convert_raw_can_data+0x26c>)
 800254a:	805a      	strh	r2, [r3, #2]
			canone_data.CHASSIS.rpm  				= (rx_buffer[2] << 8) | rx_buffer[3];
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	3302      	adds	r3, #2
 8002550:	781b      	ldrb	r3, [r3, #0]
 8002552:	021b      	lsls	r3, r3, #8
 8002554:	b21a      	sxth	r2, r3
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	3303      	adds	r3, #3
 800255a:	781b      	ldrb	r3, [r3, #0]
 800255c:	b21b      	sxth	r3, r3
 800255e:	4313      	orrs	r3, r2
 8002560:	b21a      	sxth	r2, r3
 8002562:	4b7b      	ldr	r3, [pc, #492]	; (8002750 <convert_raw_can_data+0x26c>)
 8002564:	809a      	strh	r2, [r3, #4]
			canone_data.CHASSIS.torque 				= (rx_buffer[4] << 8) | rx_buffer[5];
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	3304      	adds	r3, #4
 800256a:	781b      	ldrb	r3, [r3, #0]
 800256c:	021b      	lsls	r3, r3, #8
 800256e:	b21a      	sxth	r2, r3
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	3305      	adds	r3, #5
 8002574:	781b      	ldrb	r3, [r3, #0]
 8002576:	b21b      	sxth	r3, r3
 8002578:	4313      	orrs	r3, r2
 800257a:	b21a      	sxth	r2, r3
 800257c:	4b74      	ldr	r3, [pc, #464]	; (8002750 <convert_raw_can_data+0x26c>)
 800257e:	80da      	strh	r2, [r3, #6]
			canone_data.CHASSIS.temp 				= (rx_buffer[6]);
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	799a      	ldrb	r2, [r3, #6]
 8002584:	4b72      	ldr	r3, [pc, #456]	; (8002750 <convert_raw_can_data+0x26c>)
 8002586:	721a      	strb	r2, [r3, #8]
			osEventFlagsSet(chassis_data_flag, 0x10);
 8002588:	4b72      	ldr	r3, [pc, #456]	; (8002754 <convert_raw_can_data+0x270>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	2110      	movs	r1, #16
 800258e:	4618      	mov	r0, r3
 8002590:	f005 fd04 	bl	8007f9c <osEventFlagsSet>
		}

		case ID_FEEDER_R:
		case ID_FEEDER_L:
		{
			feeder_id = motor_id - 0x205;
 8002594:	88fb      	ldrh	r3, [r7, #6]
 8002596:	b2db      	uxtb	r3, r3
 8002598:	3b05      	subs	r3, #5
 800259a:	73fb      	strb	r3, [r7, #15]
			canone_data.FEEDER[feeder_id].id 			= motor_id;
 800259c:	7bfb      	ldrb	r3, [r7, #15]
 800259e:	4a6c      	ldr	r2, [pc, #432]	; (8002750 <convert_raw_can_data+0x26c>)
 80025a0:	3301      	adds	r3, #1
 80025a2:	2168      	movs	r1, #104	; 0x68
 80025a4:	fb01 f303 	mul.w	r3, r1, r3
 80025a8:	4413      	add	r3, r2
 80025aa:	88fa      	ldrh	r2, [r7, #6]
 80025ac:	801a      	strh	r2, [r3, #0]
			canone_data.FEEDER[feeder_id].angle			= (rx_buffer[0] << 8) | rx_buffer[1];
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	781b      	ldrb	r3, [r3, #0]
 80025b2:	021b      	lsls	r3, r3, #8
 80025b4:	b21a      	sxth	r2, r3
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	3301      	adds	r3, #1
 80025ba:	781b      	ldrb	r3, [r3, #0]
 80025bc:	b21b      	sxth	r3, r3
 80025be:	4313      	orrs	r3, r2
 80025c0:	b21a      	sxth	r2, r3
 80025c2:	7bfb      	ldrb	r3, [r7, #15]
 80025c4:	b290      	uxth	r0, r2
 80025c6:	4a62      	ldr	r2, [pc, #392]	; (8002750 <convert_raw_can_data+0x26c>)
 80025c8:	3301      	adds	r3, #1
 80025ca:	2168      	movs	r1, #104	; 0x68
 80025cc:	fb01 f303 	mul.w	r3, r1, r3
 80025d0:	4413      	add	r3, r2
 80025d2:	3302      	adds	r3, #2
 80025d4:	4602      	mov	r2, r0
 80025d6:	801a      	strh	r2, [r3, #0]
			canone_data.FEEDER[feeder_id].rpm  			= (rx_buffer[2] << 8) | rx_buffer[3];
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	3302      	adds	r3, #2
 80025dc:	781b      	ldrb	r3, [r3, #0]
 80025de:	021b      	lsls	r3, r3, #8
 80025e0:	b219      	sxth	r1, r3
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	3303      	adds	r3, #3
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	b21a      	sxth	r2, r3
 80025ea:	7bfb      	ldrb	r3, [r7, #15]
 80025ec:	430a      	orrs	r2, r1
 80025ee:	b210      	sxth	r0, r2
 80025f0:	4a57      	ldr	r2, [pc, #348]	; (8002750 <convert_raw_can_data+0x26c>)
 80025f2:	3301      	adds	r3, #1
 80025f4:	2168      	movs	r1, #104	; 0x68
 80025f6:	fb01 f303 	mul.w	r3, r1, r3
 80025fa:	4413      	add	r3, r2
 80025fc:	3304      	adds	r3, #4
 80025fe:	4602      	mov	r2, r0
 8002600:	801a      	strh	r2, [r3, #0]
			canone_data.FEEDER[feeder_id].torque		= (rx_buffer[4] << 8) | rx_buffer[5];
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	3304      	adds	r3, #4
 8002606:	781b      	ldrb	r3, [r3, #0]
 8002608:	021b      	lsls	r3, r3, #8
 800260a:	b219      	sxth	r1, r3
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	3305      	adds	r3, #5
 8002610:	781b      	ldrb	r3, [r3, #0]
 8002612:	b21a      	sxth	r2, r3
 8002614:	7bfb      	ldrb	r3, [r7, #15]
 8002616:	430a      	orrs	r2, r1
 8002618:	b210      	sxth	r0, r2
 800261a:	4a4d      	ldr	r2, [pc, #308]	; (8002750 <convert_raw_can_data+0x26c>)
 800261c:	3301      	adds	r3, #1
 800261e:	2168      	movs	r1, #104	; 0x68
 8002620:	fb01 f303 	mul.w	r3, r1, r3
 8002624:	4413      	add	r3, r2
 8002626:	3306      	adds	r3, #6
 8002628:	4602      	mov	r2, r0
 800262a:	801a      	strh	r2, [r3, #0]
			canone_data.FEEDER[feeder_id].temp 			= (rx_buffer[6]);
 800262c:	7bfb      	ldrb	r3, [r7, #15]
 800262e:	683a      	ldr	r2, [r7, #0]
 8002630:	7990      	ldrb	r0, [r2, #6]
 8002632:	4a47      	ldr	r2, [pc, #284]	; (8002750 <convert_raw_can_data+0x26c>)
 8002634:	2168      	movs	r1, #104	; 0x68
 8002636:	fb01 f303 	mul.w	r3, r1, r3
 800263a:	4413      	add	r3, r2
 800263c:	3370      	adds	r3, #112	; 0x70
 800263e:	4602      	mov	r2, r0
 8002640:	701a      	strb	r2, [r3, #0]
			osEventFlagsSet(gun_data_flag, 0x10);
 8002642:	4b45      	ldr	r3, [pc, #276]	; (8002758 <convert_raw_can_data+0x274>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	2110      	movs	r1, #16
 8002648:	4618      	mov	r0, r3
 800264a:	f005 fca7 	bl	8007f9c <osEventFlagsSet>
			break;
 800264e:	e07a      	b.n	8002746 <convert_raw_can_data+0x262>
		}

		case ID_PITCH:
		{
			canone_data.pitch.id 						= motor_id;
 8002650:	4a3f      	ldr	r2, [pc, #252]	; (8002750 <convert_raw_can_data+0x26c>)
 8002652:	88fb      	ldrh	r3, [r7, #6]
 8002654:	f8a2 3138 	strh.w	r3, [r2, #312]	; 0x138
			canone_data.pitch.real_angle				= (rx_buffer[0] << 8) | rx_buffer[1];
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	781b      	ldrb	r3, [r3, #0]
 800265c:	021b      	lsls	r3, r3, #8
 800265e:	b21a      	sxth	r2, r3
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	3301      	adds	r3, #1
 8002664:	781b      	ldrb	r3, [r3, #0]
 8002666:	b21b      	sxth	r3, r3
 8002668:	4313      	orrs	r3, r2
 800266a:	b21b      	sxth	r3, r3
 800266c:	b29a      	uxth	r2, r3
 800266e:	4b38      	ldr	r3, [pc, #224]	; (8002750 <convert_raw_can_data+0x26c>)
 8002670:	f8a3 213a 	strh.w	r2, [r3, #314]	; 0x13a
			canone_data.pitch.rpm  						= (rx_buffer[2] << 8) | rx_buffer[3];
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	3302      	adds	r3, #2
 8002678:	781b      	ldrb	r3, [r3, #0]
 800267a:	021b      	lsls	r3, r3, #8
 800267c:	b21a      	sxth	r2, r3
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	3303      	adds	r3, #3
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	b21b      	sxth	r3, r3
 8002686:	4313      	orrs	r3, r2
 8002688:	b21a      	sxth	r2, r3
 800268a:	4b31      	ldr	r3, [pc, #196]	; (8002750 <convert_raw_can_data+0x26c>)
 800268c:	f8a3 2140 	strh.w	r2, [r3, #320]	; 0x140
			canone_data.pitch.torque 					= (rx_buffer[4] << 8) | rx_buffer[5];
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	3304      	adds	r3, #4
 8002694:	781b      	ldrb	r3, [r3, #0]
 8002696:	021b      	lsls	r3, r3, #8
 8002698:	b21a      	sxth	r2, r3
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	3305      	adds	r3, #5
 800269e:	781b      	ldrb	r3, [r3, #0]
 80026a0:	b21b      	sxth	r3, r3
 80026a2:	4313      	orrs	r3, r2
 80026a4:	b21a      	sxth	r2, r3
 80026a6:	4b2a      	ldr	r3, [pc, #168]	; (8002750 <convert_raw_can_data+0x26c>)
 80026a8:	f8a3 2142 	strh.w	r2, [r3, #322]	; 0x142
			canone_data.pitch.temp 						= (rx_buffer[6]);
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	799a      	ldrb	r2, [r3, #6]
 80026b0:	4b27      	ldr	r3, [pc, #156]	; (8002750 <convert_raw_can_data+0x26c>)
 80026b2:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144
			gimbal_offset(&canone_data.pitch);
 80026b6:	4829      	ldr	r0, [pc, #164]	; (800275c <convert_raw_can_data+0x278>)
 80026b8:	f000 f856 	bl	8002768 <gimbal_offset>
			osEventFlagsSet(gimbal_data_flag, 0x10);
 80026bc:	4b28      	ldr	r3, [pc, #160]	; (8002760 <convert_raw_can_data+0x27c>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	2110      	movs	r1, #16
 80026c2:	4618      	mov	r0, r3
 80026c4:	f005 fc6a 	bl	8007f9c <osEventFlagsSet>
			break;
 80026c8:	e03d      	b.n	8002746 <convert_raw_can_data+0x262>
		}


		case ID_YAW:
		{
			canone_data.yaw.id 							= motor_id;
 80026ca:	4a21      	ldr	r2, [pc, #132]	; (8002750 <convert_raw_can_data+0x26c>)
 80026cc:	88fb      	ldrh	r3, [r7, #6]
 80026ce:	f8a2 31b8 	strh.w	r3, [r2, #440]	; 0x1b8
			canone_data.yaw.real_angle					= (rx_buffer[0] << 8) | rx_buffer[1];
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	021b      	lsls	r3, r3, #8
 80026d8:	b21a      	sxth	r2, r3
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	3301      	adds	r3, #1
 80026de:	781b      	ldrb	r3, [r3, #0]
 80026e0:	b21b      	sxth	r3, r3
 80026e2:	4313      	orrs	r3, r2
 80026e4:	b21b      	sxth	r3, r3
 80026e6:	b29a      	uxth	r2, r3
 80026e8:	4b19      	ldr	r3, [pc, #100]	; (8002750 <convert_raw_can_data+0x26c>)
 80026ea:	f8a3 21ba 	strh.w	r2, [r3, #442]	; 0x1ba
			canone_data.yaw.rpm  						= (rx_buffer[2] << 8) | rx_buffer[3];
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	3302      	adds	r3, #2
 80026f2:	781b      	ldrb	r3, [r3, #0]
 80026f4:	021b      	lsls	r3, r3, #8
 80026f6:	b21a      	sxth	r2, r3
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	3303      	adds	r3, #3
 80026fc:	781b      	ldrb	r3, [r3, #0]
 80026fe:	b21b      	sxth	r3, r3
 8002700:	4313      	orrs	r3, r2
 8002702:	b21a      	sxth	r2, r3
 8002704:	4b12      	ldr	r3, [pc, #72]	; (8002750 <convert_raw_can_data+0x26c>)
 8002706:	f8a3 21c0 	strh.w	r2, [r3, #448]	; 0x1c0
			canone_data.yaw.torque 						= (rx_buffer[4] << 8) | rx_buffer[5];
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	3304      	adds	r3, #4
 800270e:	781b      	ldrb	r3, [r3, #0]
 8002710:	021b      	lsls	r3, r3, #8
 8002712:	b21a      	sxth	r2, r3
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	3305      	adds	r3, #5
 8002718:	781b      	ldrb	r3, [r3, #0]
 800271a:	b21b      	sxth	r3, r3
 800271c:	4313      	orrs	r3, r2
 800271e:	b21a      	sxth	r2, r3
 8002720:	4b0b      	ldr	r3, [pc, #44]	; (8002750 <convert_raw_can_data+0x26c>)
 8002722:	f8a3 21c2 	strh.w	r2, [r3, #450]	; 0x1c2
			canone_data.yaw.temp 						= (rx_buffer[6]);
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	799a      	ldrb	r2, [r3, #6]
 800272a:	4b09      	ldr	r3, [pc, #36]	; (8002750 <convert_raw_can_data+0x26c>)
 800272c:	f883 21c4 	strb.w	r2, [r3, #452]	; 0x1c4
			gimbal_offset(&canone_data.yaw);
 8002730:	480c      	ldr	r0, [pc, #48]	; (8002764 <convert_raw_can_data+0x280>)
 8002732:	f000 f819 	bl	8002768 <gimbal_offset>
			osEventFlagsSet(gimbal_data_flag, 0x01);
 8002736:	4b0a      	ldr	r3, [pc, #40]	; (8002760 <convert_raw_can_data+0x27c>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	2101      	movs	r1, #1
 800273c:	4618      	mov	r0, r3
 800273e:	f005 fc2d 	bl	8007f9c <osEventFlagsSet>
			break;
 8002742:	e000      	b.n	8002746 <convert_raw_can_data+0x262>
		}
		default:
		{
			break;
 8002744:	bf00      	nop
		}
	}
}
 8002746:	bf00      	nop
 8002748:	3710      	adds	r7, #16
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	20009c28 	.word	0x20009c28
 8002754:	2000985c 	.word	0x2000985c
 8002758:	20009844 	.word	0x20009844
 800275c:	20009d60 	.word	0x20009d60
 8002760:	20009840 	.word	0x20009840
 8002764:	20009de0 	.word	0x20009de0

08002768 <gimbal_offset>:

/**
 * Centers the raw motor angle to between -Pi to +Pi
 */
void gimbal_offset(gimbal_data_t *gimbal_data)
{
 8002768:	b480      	push	{r7}
 800276a:	b083      	sub	sp, #12
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
	gimbal_data->adj_ang = gimbal_data->real_angle - gimbal_data->center_ang;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	885b      	ldrh	r3, [r3, #2]
 8002774:	461a      	mov	r2, r3
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	8a5b      	ldrh	r3, [r3, #18]
 800277a:	1ad3      	subs	r3, r2, r3
 800277c:	ee07 3a90 	vmov	s15, r3
 8002780:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	edc3 7a01 	vstr	s15, [r3, #4]
	gimbal_data->adj_ang = (float)gimbal_data->adj_ang/(GM6020_MAX_DEFLECTION) * PI; // convert to radians
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	ed93 7a01 	vldr	s14, [r3, #4]
 8002790:	eddf 6a1d 	vldr	s13, [pc, #116]	; 8002808 <gimbal_offset+0xa0>
 8002794:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002798:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800280c <gimbal_offset+0xa4>
 800279c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	edc3 7a01 	vstr	s15, [r3, #4]
	if (gimbal_data->adj_ang < -PI)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	edd3 7a01 	vldr	s15, [r3, #4]
 80027ac:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8002810 <gimbal_offset+0xa8>
 80027b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80027b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027b8:	d50a      	bpl.n	80027d0 <gimbal_offset+0x68>
	{
		gimbal_data->adj_ang += 2 * PI;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	edd3 7a01 	vldr	s15, [r3, #4]
 80027c0:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8002814 <gimbal_offset+0xac>
 80027c4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	edc3 7a01 	vstr	s15, [r3, #4]
	}
	else if (gimbal_data->adj_ang > PI)
	{
		gimbal_data->adj_ang -= 2 * PI;
	}
}
 80027ce:	e014      	b.n	80027fa <gimbal_offset+0x92>
	else if (gimbal_data->adj_ang > PI)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	edd3 7a01 	vldr	s15, [r3, #4]
 80027d6:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 800280c <gimbal_offset+0xa4>
 80027da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80027de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027e2:	dc00      	bgt.n	80027e6 <gimbal_offset+0x7e>
}
 80027e4:	e009      	b.n	80027fa <gimbal_offset+0x92>
		gimbal_data->adj_ang -= 2 * PI;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	edd3 7a01 	vldr	s15, [r3, #4]
 80027ec:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8002814 <gimbal_offset+0xac>
 80027f0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	edc3 7a01 	vstr	s15, [r3, #4]
}
 80027fa:	bf00      	nop
 80027fc:	370c      	adds	r7, #12
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr
 8002806:	bf00      	nop
 8002808:	45800000 	.word	0x45800000
 800280c:	40490fdb 	.word	0x40490fdb
 8002810:	c0490fdb 	.word	0xc0490fdb
 8002814:	40c90fdb 	.word	0x40c90fdb

08002818 <usart_ISR>:
extern osEventFlagsId_t gimbal_data_flag;
extern osEventFlagsId_t rc_data_flag;
extern osThreadId_t movement_control_task_handle;

void usart_ISR(UART_HandleTypeDef *UartHandle)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b082      	sub	sp, #8
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
	xavier_data.magic_number = ((xavier_rx_buffer[1] << 8) | xavier_rx_buffer[0]);
 8002820:	4b23      	ldr	r3, [pc, #140]	; (80028b0 <usart_ISR+0x98>)
 8002822:	785b      	ldrb	r3, [r3, #1]
 8002824:	021b      	lsls	r3, r3, #8
 8002826:	b21a      	sxth	r2, r3
 8002828:	4b21      	ldr	r3, [pc, #132]	; (80028b0 <usart_ISR+0x98>)
 800282a:	781b      	ldrb	r3, [r3, #0]
 800282c:	b21b      	sxth	r3, r3
 800282e:	4313      	orrs	r3, r2
 8002830:	b21a      	sxth	r2, r3
 8002832:	4b20      	ldr	r3, [pc, #128]	; (80028b4 <usart_ISR+0x9c>)
 8002834:	801a      	strh	r2, [r3, #0]
	xavier_data.yaw = ((xavier_rx_buffer[3] << 8) | xavier_rx_buffer[2]);
 8002836:	4b1e      	ldr	r3, [pc, #120]	; (80028b0 <usart_ISR+0x98>)
 8002838:	78db      	ldrb	r3, [r3, #3]
 800283a:	021b      	lsls	r3, r3, #8
 800283c:	b21a      	sxth	r2, r3
 800283e:	4b1c      	ldr	r3, [pc, #112]	; (80028b0 <usart_ISR+0x98>)
 8002840:	789b      	ldrb	r3, [r3, #2]
 8002842:	b21b      	sxth	r3, r3
 8002844:	4313      	orrs	r3, r2
 8002846:	b21a      	sxth	r2, r3
 8002848:	4b1a      	ldr	r3, [pc, #104]	; (80028b4 <usart_ISR+0x9c>)
 800284a:	809a      	strh	r2, [r3, #4]
	xavier_data.pitch = ((xavier_rx_buffer[5] << 8) | xavier_rx_buffer[4]);
 800284c:	4b18      	ldr	r3, [pc, #96]	; (80028b0 <usart_ISR+0x98>)
 800284e:	795b      	ldrb	r3, [r3, #5]
 8002850:	021b      	lsls	r3, r3, #8
 8002852:	b21a      	sxth	r2, r3
 8002854:	4b16      	ldr	r3, [pc, #88]	; (80028b0 <usart_ISR+0x98>)
 8002856:	791b      	ldrb	r3, [r3, #4]
 8002858:	b21b      	sxth	r3, r3
 800285a:	4313      	orrs	r3, r2
 800285c:	b21a      	sxth	r2, r3
 800285e:	4b15      	ldr	r3, [pc, #84]	; (80028b4 <usart_ISR+0x9c>)
 8002860:	805a      	strh	r2, [r3, #2]
	xavier_data.end_check = (xavier_rx_buffer[7] << 8) | xavier_rx_buffer[6];
 8002862:	4b13      	ldr	r3, [pc, #76]	; (80028b0 <usart_ISR+0x98>)
 8002864:	79db      	ldrb	r3, [r3, #7]
 8002866:	021b      	lsls	r3, r3, #8
 8002868:	b21a      	sxth	r2, r3
 800286a:	4b11      	ldr	r3, [pc, #68]	; (80028b0 <usart_ISR+0x98>)
 800286c:	799b      	ldrb	r3, [r3, #6]
 800286e:	b21b      	sxth	r3, r3
 8002870:	4313      	orrs	r3, r2
 8002872:	b21a      	sxth	r2, r3
 8002874:	4b0f      	ldr	r3, [pc, #60]	; (80028b4 <usart_ISR+0x9c>)
 8002876:	80da      	strh	r2, [r3, #6]
	if (xavier_data.magic_number != START_MAGIC_NUMBER || xavier_data.end_check != END_MAGIC_NUMBER)
 8002878:	4b0e      	ldr	r3, [pc, #56]	; (80028b4 <usart_ISR+0x9c>)
 800287a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800287e:	2b45      	cmp	r3, #69	; 0x45
 8002880:	d105      	bne.n	800288e <usart_ISR+0x76>
 8002882:	4b0c      	ldr	r3, [pc, #48]	; (80028b4 <usart_ISR+0x9c>)
 8002884:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002888:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 800288c:	d006      	beq.n	800289c <usart_ISR+0x84>
	{
		xavier_data.pitch = 0;
 800288e:	4b09      	ldr	r3, [pc, #36]	; (80028b4 <usart_ISR+0x9c>)
 8002890:	2200      	movs	r2, #0
 8002892:	805a      	strh	r2, [r3, #2]
		xavier_data.yaw = 0;
 8002894:	4b07      	ldr	r3, [pc, #28]	; (80028b4 <usart_ISR+0x9c>)
 8002896:	2200      	movs	r2, #0
 8002898:	809a      	strh	r2, [r3, #4]
 800289a:	e005      	b.n	80028a8 <usart_ISR+0x90>
	}
	else
	{
		//store previous data to account for bad data
		xavier_data.last_time = HAL_GetTick();
 800289c:	f001 f8e4 	bl	8003a68 <HAL_GetTick>
 80028a0:	4603      	mov	r3, r0
 80028a2:	4a04      	ldr	r2, [pc, #16]	; (80028b4 <usart_ISR+0x9c>)
 80028a4:	6093      	str	r3, [r2, #8]
	}
}
 80028a6:	bf00      	nop
 80028a8:	bf00      	nop
 80028aa:	3708      	adds	r7, #8
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	20004e78 	.word	0x20004e78
 80028b4:	20009e60 	.word	0x20009e60

080028b8 <gimbal_control_task>:
 * FreeRTOS task for gimbal controls
 * Has HIGH2 priority
 *
 */
void gimbal_control_task(void *argument)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b082      	sub	sp, #8
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(&XAVIER_UART, xavier_rx_buffer, OBC_DATA_SIZE);
 80028c0:	2208      	movs	r2, #8
 80028c2:	4906      	ldr	r1, [pc, #24]	; (80028dc <gimbal_control_task+0x24>)
 80028c4:	4806      	ldr	r0, [pc, #24]	; (80028e0 <gimbal_control_task+0x28>)
 80028c6:	f004 fa1d 	bl	8006d04 <HAL_UART_Receive_DMA>
    while(1)
    {
		gimbal_angle_control(&canone_data.pitch, &canone_data.yaw);
 80028ca:	4906      	ldr	r1, [pc, #24]	; (80028e4 <gimbal_control_task+0x2c>)
 80028cc:	4806      	ldr	r0, [pc, #24]	; (80028e8 <gimbal_control_task+0x30>)
 80028ce:	f000 f8cf 	bl	8002a70 <gimbal_angle_control>
		vTaskDelay(1);
 80028d2:	2001      	movs	r0, #1
 80028d4:	f006 ffe6 	bl	80098a4 <vTaskDelay>
		gimbal_angle_control(&canone_data.pitch, &canone_data.yaw);
 80028d8:	e7f7      	b.n	80028ca <gimbal_control_task+0x12>
 80028da:	bf00      	nop
 80028dc:	20004e78 	.word	0x20004e78
 80028e0:	20009be4 	.word	0x20009be4
 80028e4:	20009de0 	.word	0x20009de0
 80028e8:	20009d60 	.word	0x20009d60
 80028ec:	00000000 	.word	0x00000000

080028f0 <gimbalsweep>:
 * Need to check if having ID4 (i.e. 0x208) + having the launcher motors (ID 1-3, 0x201 to 0x203)
 * still provides a fast enough response for open source robots
 */

void gimbalsweep(gimbal_data_t *pitch_motor, gimbal_data_t *yaw_motor)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b082      	sub	sp, #8
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
 80028f8:	6039      	str	r1, [r7, #0]
	aimbot_mode = 1;
 80028fa:	4b57      	ldr	r3, [pc, #348]	; (8002a58 <gimbalsweep+0x168>)
 80028fc:	2201      	movs	r2, #1
 80028fe:	701a      	strb	r2, [r3, #0]
	if (sweeping_yaw == true){
 8002900:	4b56      	ldr	r3, [pc, #344]	; (8002a5c <gimbalsweep+0x16c>)
 8002902:	781b      	ldrb	r3, [r3, #0]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d04f      	beq.n	80029a8 <gimbalsweep+0xb8>
		if (sweep_right == true){
 8002908:	4b55      	ldr	r3, [pc, #340]	; (8002a60 <gimbalsweep+0x170>)
 800290a:	781b      	ldrb	r3, [r3, #0]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d025      	beq.n	800295c <gimbalsweep+0x6c>
			yaw += YAW_SWEEP_SPEED;
 8002910:	4b54      	ldr	r3, [pc, #336]	; (8002a64 <gimbalsweep+0x174>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4618      	mov	r0, r3
 8002916:	f7fd fdcf 	bl	80004b8 <__aeabi_f2d>
 800291a:	a34d      	add	r3, pc, #308	; (adr r3, 8002a50 <gimbalsweep+0x160>)
 800291c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002920:	f7fd fc6c 	bl	80001fc <__adddf3>
 8002924:	4602      	mov	r2, r0
 8002926:	460b      	mov	r3, r1
 8002928:	4610      	mov	r0, r2
 800292a:	4619      	mov	r1, r3
 800292c:	f7fe f8de 	bl	8000aec <__aeabi_d2f>
 8002930:	4603      	mov	r3, r0
 8002932:	4a4c      	ldr	r2, [pc, #304]	; (8002a64 <gimbalsweep+0x174>)
 8002934:	6013      	str	r3, [r2, #0]
			if (yaw > yaw_motor->max_ang){
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	ed93 7a06 	vldr	s14, [r3, #24]
 800293c:	4b49      	ldr	r3, [pc, #292]	; (8002a64 <gimbalsweep+0x174>)
 800293e:	edd3 7a00 	vldr	s15, [r3]
 8002942:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002946:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800294a:	d400      	bmi.n	800294e <gimbalsweep+0x5e>
				sweep_up = true;
				sweeping_yaw = true;
			}
		}
	}
}
 800294c:	e07b      	b.n	8002a46 <gimbalsweep+0x156>
				sweep_right = false;
 800294e:	4b44      	ldr	r3, [pc, #272]	; (8002a60 <gimbalsweep+0x170>)
 8002950:	2200      	movs	r2, #0
 8002952:	701a      	strb	r2, [r3, #0]
				sweeping_yaw = false;
 8002954:	4b41      	ldr	r3, [pc, #260]	; (8002a5c <gimbalsweep+0x16c>)
 8002956:	2200      	movs	r2, #0
 8002958:	701a      	strb	r2, [r3, #0]
}
 800295a:	e074      	b.n	8002a46 <gimbalsweep+0x156>
			yaw -= YAW_SWEEP_SPEED;
 800295c:	4b41      	ldr	r3, [pc, #260]	; (8002a64 <gimbalsweep+0x174>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4618      	mov	r0, r3
 8002962:	f7fd fda9 	bl	80004b8 <__aeabi_f2d>
 8002966:	a33a      	add	r3, pc, #232	; (adr r3, 8002a50 <gimbalsweep+0x160>)
 8002968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800296c:	f7fd fc44 	bl	80001f8 <__aeabi_dsub>
 8002970:	4602      	mov	r2, r0
 8002972:	460b      	mov	r3, r1
 8002974:	4610      	mov	r0, r2
 8002976:	4619      	mov	r1, r3
 8002978:	f7fe f8b8 	bl	8000aec <__aeabi_d2f>
 800297c:	4603      	mov	r3, r0
 800297e:	4a39      	ldr	r2, [pc, #228]	; (8002a64 <gimbalsweep+0x174>)
 8002980:	6013      	str	r3, [r2, #0]
			if (yaw < yaw_motor->min_ang){
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	ed93 7a07 	vldr	s14, [r3, #28]
 8002988:	4b36      	ldr	r3, [pc, #216]	; (8002a64 <gimbalsweep+0x174>)
 800298a:	edd3 7a00 	vldr	s15, [r3]
 800298e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002992:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002996:	dc00      	bgt.n	800299a <gimbalsweep+0xaa>
}
 8002998:	e055      	b.n	8002a46 <gimbalsweep+0x156>
				sweep_right = true;
 800299a:	4b31      	ldr	r3, [pc, #196]	; (8002a60 <gimbalsweep+0x170>)
 800299c:	2201      	movs	r2, #1
 800299e:	701a      	strb	r2, [r3, #0]
				sweeping_yaw = false;
 80029a0:	4b2e      	ldr	r3, [pc, #184]	; (8002a5c <gimbalsweep+0x16c>)
 80029a2:	2200      	movs	r2, #0
 80029a4:	701a      	strb	r2, [r3, #0]
}
 80029a6:	e04e      	b.n	8002a46 <gimbalsweep+0x156>
		if (sweep_up == true){
 80029a8:	4b2f      	ldr	r3, [pc, #188]	; (8002a68 <gimbalsweep+0x178>)
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d025      	beq.n	80029fc <gimbalsweep+0x10c>
			pitch += PITCH_SWEEP_SPEED;
 80029b0:	4b2e      	ldr	r3, [pc, #184]	; (8002a6c <gimbalsweep+0x17c>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4618      	mov	r0, r3
 80029b6:	f7fd fd7f 	bl	80004b8 <__aeabi_f2d>
 80029ba:	a325      	add	r3, pc, #148	; (adr r3, 8002a50 <gimbalsweep+0x160>)
 80029bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029c0:	f7fd fc1c 	bl	80001fc <__adddf3>
 80029c4:	4602      	mov	r2, r0
 80029c6:	460b      	mov	r3, r1
 80029c8:	4610      	mov	r0, r2
 80029ca:	4619      	mov	r1, r3
 80029cc:	f7fe f88e 	bl	8000aec <__aeabi_d2f>
 80029d0:	4603      	mov	r3, r0
 80029d2:	4a26      	ldr	r2, [pc, #152]	; (8002a6c <gimbalsweep+0x17c>)
 80029d4:	6013      	str	r3, [r2, #0]
			if (pitch > pitch_motor->max_ang){
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	ed93 7a06 	vldr	s14, [r3, #24]
 80029dc:	4b23      	ldr	r3, [pc, #140]	; (8002a6c <gimbalsweep+0x17c>)
 80029de:	edd3 7a00 	vldr	s15, [r3]
 80029e2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80029e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029ea:	d400      	bmi.n	80029ee <gimbalsweep+0xfe>
}
 80029ec:	e02b      	b.n	8002a46 <gimbalsweep+0x156>
				sweep_up = false;
 80029ee:	4b1e      	ldr	r3, [pc, #120]	; (8002a68 <gimbalsweep+0x178>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	701a      	strb	r2, [r3, #0]
				sweeping_yaw = true;
 80029f4:	4b19      	ldr	r3, [pc, #100]	; (8002a5c <gimbalsweep+0x16c>)
 80029f6:	2201      	movs	r2, #1
 80029f8:	701a      	strb	r2, [r3, #0]
}
 80029fa:	e024      	b.n	8002a46 <gimbalsweep+0x156>
			pitch -= PITCH_SWEEP_SPEED;
 80029fc:	4b1b      	ldr	r3, [pc, #108]	; (8002a6c <gimbalsweep+0x17c>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4618      	mov	r0, r3
 8002a02:	f7fd fd59 	bl	80004b8 <__aeabi_f2d>
 8002a06:	a312      	add	r3, pc, #72	; (adr r3, 8002a50 <gimbalsweep+0x160>)
 8002a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a0c:	f7fd fbf4 	bl	80001f8 <__aeabi_dsub>
 8002a10:	4602      	mov	r2, r0
 8002a12:	460b      	mov	r3, r1
 8002a14:	4610      	mov	r0, r2
 8002a16:	4619      	mov	r1, r3
 8002a18:	f7fe f868 	bl	8000aec <__aeabi_d2f>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	4a13      	ldr	r2, [pc, #76]	; (8002a6c <gimbalsweep+0x17c>)
 8002a20:	6013      	str	r3, [r2, #0]
			if (pitch < pitch_motor->min_ang){
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	ed93 7a07 	vldr	s14, [r3, #28]
 8002a28:	4b10      	ldr	r3, [pc, #64]	; (8002a6c <gimbalsweep+0x17c>)
 8002a2a:	edd3 7a00 	vldr	s15, [r3]
 8002a2e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002a32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a36:	dc00      	bgt.n	8002a3a <gimbalsweep+0x14a>
}
 8002a38:	e005      	b.n	8002a46 <gimbalsweep+0x156>
				sweep_up = true;
 8002a3a:	4b0b      	ldr	r3, [pc, #44]	; (8002a68 <gimbalsweep+0x178>)
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	701a      	strb	r2, [r3, #0]
				sweeping_yaw = true;
 8002a40:	4b06      	ldr	r3, [pc, #24]	; (8002a5c <gimbalsweep+0x16c>)
 8002a42:	2201      	movs	r2, #1
 8002a44:	701a      	strb	r2, [r3, #0]
}
 8002a46:	bf00      	nop
 8002a48:	3708      	adds	r7, #8
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	47ae147b 	.word	0x47ae147b
 8002a54:	3f847ae1 	.word	0x3f847ae1
 8002a58:	20004e6e 	.word	0x20004e6e
 8002a5c:	20000006 	.word	0x20000006
 8002a60:	20000004 	.word	0x20000004
 8002a64:	20004e74 	.word	0x20004e74
 8002a68:	20000005 	.word	0x20000005
 8002a6c:	20004e70 	.word	0x20004e70

08002a70 <gimbal_angle_control>:

void gimbal_angle_control(gimbal_data_t *pitch_motor, gimbal_data_t *yaw_motor)
{
 8002a70:	b5b0      	push	{r4, r5, r7, lr}
 8002a72:	b084      	sub	sp, #16
 8002a74:	af02      	add	r7, sp, #8
 8002a76:	6078      	str	r0, [r7, #4]
 8002a78:	6039      	str	r1, [r7, #0]

//todo: add in roll compensation
	if (remote_cmd.left_switch == aimbot_enable && remote_cmd.right_switch == random_movement)
 8002a7a:	4ba7      	ldr	r3, [pc, #668]	; (8002d18 <gimbal_angle_control+0x2a8>)
 8002a7c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	d109      	bne.n	8002a98 <gimbal_angle_control+0x28>
 8002a84:	4ba4      	ldr	r3, [pc, #656]	; (8002d18 <gimbal_angle_control+0x2a8>)
 8002a86:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8002a8a:	2b03      	cmp	r3, #3
 8002a8c:	d104      	bne.n	8002a98 <gimbal_angle_control+0x28>
	{
		//sweeps the four corners of its field of vision
		gimbalsweep(pitch_motor, yaw_motor);
 8002a8e:	6839      	ldr	r1, [r7, #0]
 8002a90:	6878      	ldr	r0, [r7, #4]
 8002a92:	f7ff ff2d 	bl	80028f0 <gimbalsweep>
 8002a96:	e0c3      	b.n	8002c20 <gimbal_angle_control+0x1b0>
	}
	else if (remote_cmd.left_switch == aimbot_enable)
 8002a98:	4b9f      	ldr	r3, [pc, #636]	; (8002d18 <gimbal_angle_control+0x2a8>)
 8002a9a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d157      	bne.n	8002b52 <gimbal_angle_control+0xe2>
	{
		aimbot_mode = 1;
 8002aa2:	4b9e      	ldr	r3, [pc, #632]	; (8002d1c <gimbal_angle_control+0x2ac>)
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	701a      	strb	r2, [r3, #0]
		pitch += (float)xavier_data.pitch/660 * PITCH_SPEED * PITCH_INVERT;
 8002aa8:	4b9d      	ldr	r3, [pc, #628]	; (8002d20 <gimbal_angle_control+0x2b0>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4618      	mov	r0, r3
 8002aae:	f7fd fd03 	bl	80004b8 <__aeabi_f2d>
 8002ab2:	4604      	mov	r4, r0
 8002ab4:	460d      	mov	r5, r1
 8002ab6:	4b9b      	ldr	r3, [pc, #620]	; (8002d24 <gimbal_angle_control+0x2b4>)
 8002ab8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002abc:	ee07 3a90 	vmov	s15, r3
 8002ac0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ac4:	ed9f 7a98 	vldr	s14, [pc, #608]	; 8002d28 <gimbal_angle_control+0x2b8>
 8002ac8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002acc:	ee16 0a90 	vmov	r0, s13
 8002ad0:	f7fd fcf2 	bl	80004b8 <__aeabi_f2d>
 8002ad4:	a38e      	add	r3, pc, #568	; (adr r3, 8002d10 <gimbal_angle_control+0x2a0>)
 8002ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ada:	f7fd fd45 	bl	8000568 <__aeabi_dmul>
 8002ade:	4602      	mov	r2, r0
 8002ae0:	460b      	mov	r3, r1
 8002ae2:	4620      	mov	r0, r4
 8002ae4:	4629      	mov	r1, r5
 8002ae6:	f7fd fb89 	bl	80001fc <__adddf3>
 8002aea:	4602      	mov	r2, r0
 8002aec:	460b      	mov	r3, r1
 8002aee:	4610      	mov	r0, r2
 8002af0:	4619      	mov	r1, r3
 8002af2:	f7fd fffb 	bl	8000aec <__aeabi_d2f>
 8002af6:	4603      	mov	r3, r0
 8002af8:	4a89      	ldr	r2, [pc, #548]	; (8002d20 <gimbal_angle_control+0x2b0>)
 8002afa:	6013      	str	r3, [r2, #0]
		yaw += (float)xavier_data.yaw/660 * YAW_SPEED * YAW_INVERT;
 8002afc:	4b8b      	ldr	r3, [pc, #556]	; (8002d2c <gimbal_angle_control+0x2bc>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4618      	mov	r0, r3
 8002b02:	f7fd fcd9 	bl	80004b8 <__aeabi_f2d>
 8002b06:	4604      	mov	r4, r0
 8002b08:	460d      	mov	r5, r1
 8002b0a:	4b86      	ldr	r3, [pc, #536]	; (8002d24 <gimbal_angle_control+0x2b4>)
 8002b0c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002b10:	ee07 3a90 	vmov	s15, r3
 8002b14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b18:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8002d28 <gimbal_angle_control+0x2b8>
 8002b1c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002b20:	ee16 0a90 	vmov	r0, s13
 8002b24:	f7fd fcc8 	bl	80004b8 <__aeabi_f2d>
 8002b28:	a379      	add	r3, pc, #484	; (adr r3, 8002d10 <gimbal_angle_control+0x2a0>)
 8002b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b2e:	f7fd fd1b 	bl	8000568 <__aeabi_dmul>
 8002b32:	4602      	mov	r2, r0
 8002b34:	460b      	mov	r3, r1
 8002b36:	4620      	mov	r0, r4
 8002b38:	4629      	mov	r1, r5
 8002b3a:	f7fd fb5f 	bl	80001fc <__adddf3>
 8002b3e:	4602      	mov	r2, r0
 8002b40:	460b      	mov	r3, r1
 8002b42:	4610      	mov	r0, r2
 8002b44:	4619      	mov	r1, r3
 8002b46:	f7fd ffd1 	bl	8000aec <__aeabi_d2f>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	4a77      	ldr	r2, [pc, #476]	; (8002d2c <gimbal_angle_control+0x2bc>)
 8002b4e:	6013      	str	r3, [r2, #0]
 8002b50:	e066      	b.n	8002c20 <gimbal_angle_control+0x1b0>
	}
	else if (remote_cmd.left_switch == teleopetate /*|| xavier_data.last_time + XAVIER_TIMEOUT < HAL_GetTick()*/)
 8002b52:	4b71      	ldr	r3, [pc, #452]	; (8002d18 <gimbal_angle_control+0x2a8>)
 8002b54:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8002b58:	2b02      	cmp	r3, #2
 8002b5a:	d161      	bne.n	8002c20 <gimbal_angle_control+0x1b0>
	{
		if (HAL_GetTick() - remote_cmd.last_time > REMOTE_TIMEOUT )
 8002b5c:	f000 ff84 	bl	8003a68 <HAL_GetTick>
 8002b60:	4602      	mov	r2, r0
 8002b62:	4b6d      	ldr	r3, [pc, #436]	; (8002d18 <gimbal_angle_control+0x2a8>)
 8002b64:	69db      	ldr	r3, [r3, #28]
 8002b66:	1ad3      	subs	r3, r2, r3
 8002b68:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002b6c:	d901      	bls.n	8002b72 <gimbal_angle_control+0x102>
		{
			dbus_reset();
 8002b6e:	f000 fddd 	bl	800372c <dbus_reset>
		}
		pitch += (float)remote_cmd.right_y/660 * PITCH_SPEED * PITCH_INVERT;
 8002b72:	4b6b      	ldr	r3, [pc, #428]	; (8002d20 <gimbal_angle_control+0x2b0>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4618      	mov	r0, r3
 8002b78:	f7fd fc9e 	bl	80004b8 <__aeabi_f2d>
 8002b7c:	4604      	mov	r4, r0
 8002b7e:	460d      	mov	r5, r1
 8002b80:	4b65      	ldr	r3, [pc, #404]	; (8002d18 <gimbal_angle_control+0x2a8>)
 8002b82:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002b86:	ee07 3a90 	vmov	s15, r3
 8002b8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b8e:	ed9f 7a66 	vldr	s14, [pc, #408]	; 8002d28 <gimbal_angle_control+0x2b8>
 8002b92:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002b96:	ee16 0a90 	vmov	r0, s13
 8002b9a:	f7fd fc8d 	bl	80004b8 <__aeabi_f2d>
 8002b9e:	a35c      	add	r3, pc, #368	; (adr r3, 8002d10 <gimbal_angle_control+0x2a0>)
 8002ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ba4:	f7fd fce0 	bl	8000568 <__aeabi_dmul>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	460b      	mov	r3, r1
 8002bac:	4620      	mov	r0, r4
 8002bae:	4629      	mov	r1, r5
 8002bb0:	f7fd fb24 	bl	80001fc <__adddf3>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	460b      	mov	r3, r1
 8002bb8:	4610      	mov	r0, r2
 8002bba:	4619      	mov	r1, r3
 8002bbc:	f7fd ff96 	bl	8000aec <__aeabi_d2f>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	4a57      	ldr	r2, [pc, #348]	; (8002d20 <gimbal_angle_control+0x2b0>)
 8002bc4:	6013      	str	r3, [r2, #0]
		yaw += (float)remote_cmd.right_x/660 * YAW_SPEED * YAW_INVERT;
 8002bc6:	4b59      	ldr	r3, [pc, #356]	; (8002d2c <gimbal_angle_control+0x2bc>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f7fd fc74 	bl	80004b8 <__aeabi_f2d>
 8002bd0:	4604      	mov	r4, r0
 8002bd2:	460d      	mov	r5, r1
 8002bd4:	4b50      	ldr	r3, [pc, #320]	; (8002d18 <gimbal_angle_control+0x2a8>)
 8002bd6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002bda:	ee07 3a90 	vmov	s15, r3
 8002bde:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002be2:	ed9f 7a51 	vldr	s14, [pc, #324]	; 8002d28 <gimbal_angle_control+0x2b8>
 8002be6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002bea:	ee16 0a90 	vmov	r0, s13
 8002bee:	f7fd fc63 	bl	80004b8 <__aeabi_f2d>
 8002bf2:	a347      	add	r3, pc, #284	; (adr r3, 8002d10 <gimbal_angle_control+0x2a0>)
 8002bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bf8:	f7fd fcb6 	bl	8000568 <__aeabi_dmul>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	460b      	mov	r3, r1
 8002c00:	4620      	mov	r0, r4
 8002c02:	4629      	mov	r1, r5
 8002c04:	f7fd fafa 	bl	80001fc <__adddf3>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	460b      	mov	r3, r1
 8002c0c:	4610      	mov	r0, r2
 8002c0e:	4619      	mov	r1, r3
 8002c10:	f7fd ff6c 	bl	8000aec <__aeabi_d2f>
 8002c14:	4603      	mov	r3, r0
 8002c16:	4a45      	ldr	r2, [pc, #276]	; (8002d2c <gimbal_angle_control+0x2bc>)
 8002c18:	6013      	str	r3, [r2, #0]
		aimbot_mode = 0;
 8002c1a:	4b40      	ldr	r3, [pc, #256]	; (8002d1c <gimbal_angle_control+0x2ac>)
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	701a      	strb	r2, [r3, #0]
	}

	if (pitch > pitch_motor->max_ang)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	ed93 7a06 	vldr	s14, [r3, #24]
 8002c26:	4b3e      	ldr	r3, [pc, #248]	; (8002d20 <gimbal_angle_control+0x2b0>)
 8002c28:	edd3 7a00 	vldr	s15, [r3]
 8002c2c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c34:	d503      	bpl.n	8002c3e <gimbal_angle_control+0x1ce>
	{
		pitch = pitch_motor->max_ang;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	699b      	ldr	r3, [r3, #24]
 8002c3a:	4a39      	ldr	r2, [pc, #228]	; (8002d20 <gimbal_angle_control+0x2b0>)
 8002c3c:	6013      	str	r3, [r2, #0]
	}
	if (pitch < pitch_motor->min_ang)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	ed93 7a07 	vldr	s14, [r3, #28]
 8002c44:	4b36      	ldr	r3, [pc, #216]	; (8002d20 <gimbal_angle_control+0x2b0>)
 8002c46:	edd3 7a00 	vldr	s15, [r3]
 8002c4a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c52:	dd03      	ble.n	8002c5c <gimbal_angle_control+0x1ec>
	{
		pitch = pitch_motor->min_ang;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	69db      	ldr	r3, [r3, #28]
 8002c58:	4a31      	ldr	r2, [pc, #196]	; (8002d20 <gimbal_angle_control+0x2b0>)
 8002c5a:	6013      	str	r3, [r2, #0]
	}


	if (yaw > yaw_motor->max_ang)
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	ed93 7a06 	vldr	s14, [r3, #24]
 8002c62:	4b32      	ldr	r3, [pc, #200]	; (8002d2c <gimbal_angle_control+0x2bc>)
 8002c64:	edd3 7a00 	vldr	s15, [r3]
 8002c68:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c70:	d503      	bpl.n	8002c7a <gimbal_angle_control+0x20a>
	{
		yaw = yaw_motor->max_ang;
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	699b      	ldr	r3, [r3, #24]
 8002c76:	4a2d      	ldr	r2, [pc, #180]	; (8002d2c <gimbal_angle_control+0x2bc>)
 8002c78:	6013      	str	r3, [r2, #0]
	}
	if (yaw < yaw_motor->min_ang)
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	ed93 7a07 	vldr	s14, [r3, #28]
 8002c80:	4b2a      	ldr	r3, [pc, #168]	; (8002d2c <gimbal_angle_control+0x2bc>)
 8002c82:	edd3 7a00 	vldr	s15, [r3]
 8002c86:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c8e:	dd03      	ble.n	8002c98 <gimbal_angle_control+0x228>
	{
		yaw = yaw_motor->min_ang;
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	69db      	ldr	r3, [r3, #28]
 8002c94:	4a25      	ldr	r2, [pc, #148]	; (8002d2c <gimbal_angle_control+0x2bc>)
 8002c96:	6013      	str	r3, [r2, #0]
	}

	angle_pid(pitch, pitch_motor->adj_ang, pitch_motor);
 8002c98:	4b21      	ldr	r3, [pc, #132]	; (8002d20 <gimbal_angle_control+0x2b0>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f7fd fc0b 	bl	80004b8 <__aeabi_f2d>
 8002ca2:	4604      	mov	r4, r0
 8002ca4:	460d      	mov	r5, r1
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	4618      	mov	r0, r3
 8002cac:	f7fd fc04 	bl	80004b8 <__aeabi_f2d>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	460b      	mov	r3, r1
 8002cb4:	6878      	ldr	r0, [r7, #4]
 8002cb6:	ec43 2b11 	vmov	d1, r2, r3
 8002cba:	ec45 4b10 	vmov	d0, r4, r5
 8002cbe:	f000 fa8b 	bl	80031d8 <angle_pid>
	angle_pid(yaw, yaw_motor->adj_ang, yaw_motor);
 8002cc2:	4b1a      	ldr	r3, [pc, #104]	; (8002d2c <gimbal_angle_control+0x2bc>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f7fd fbf6 	bl	80004b8 <__aeabi_f2d>
 8002ccc:	4604      	mov	r4, r0
 8002cce:	460d      	mov	r5, r1
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f7fd fbef 	bl	80004b8 <__aeabi_f2d>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	460b      	mov	r3, r1
 8002cde:	6838      	ldr	r0, [r7, #0]
 8002ce0:	ec43 2b11 	vmov	d1, r2, r3
 8002ce4:	ec45 4b10 	vmov	d0, r4, r5
 8002ce8:	f000 fa76 	bl	80031d8 <angle_pid>
	CANtwo_cmd(pitch_motor->pid.output, yaw_motor->pid.output, 0, 0, GIMBAL_ID);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	f9b3 007c 	ldrsh.w	r0, [r3, #124]	; 0x7c
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	f9b3 107c 	ldrsh.w	r1, [r3, #124]	; 0x7c
 8002cf8:	f240 23ff 	movw	r3, #767	; 0x2ff
 8002cfc:	9300      	str	r3, [sp, #0]
 8002cfe:	2300      	movs	r3, #0
 8002d00:	2200      	movs	r2, #0
 8002d02:	f000 fb31 	bl	8003368 <CANtwo_cmd>
}
 8002d06:	bf00      	nop
 8002d08:	3708      	adds	r7, #8
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bdb0      	pop	{r4, r5, r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	47ae147b 	.word	0x47ae147b
 8002d14:	3f847ae1 	.word	0x3f847ae1
 8002d18:	20004eb8 	.word	0x20004eb8
 8002d1c:	20004e6e 	.word	0x20004e6e
 8002d20:	20004e70 	.word	0x20004e70
 8002d24:	20009e60 	.word	0x20009e60
 8002d28:	44250000 	.word	0x44250000
 8002d2c:	20004e74 	.word	0x20004e74

08002d30 <gun_control_task>:
uint16_t max_pwm = 2200;


//TODO: Check rotation frequency, change to autonomous (currently dependent on RC)
void gun_control_task(void *argument)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b084      	sub	sp, #16
 8002d34:	af02      	add	r7, sp, #8
 8002d36:	6078      	str	r0, [r7, #4]
	//Starting PWM for 4 snail motors (grouped as 1&2 and 3&4),
	HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_1);	// PD12
 8002d38:	2100      	movs	r1, #0
 8002d3a:	482c      	ldr	r0, [pc, #176]	; (8002dec <gun_control_task+0xbc>)
 8002d3c:	f003 f8fc 	bl	8005f38 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_2); 	// PD13 (reversed)
 8002d40:	2104      	movs	r1, #4
 8002d42:	482a      	ldr	r0, [pc, #168]	; (8002dec <gun_control_task+0xbc>)
 8002d44:	f003 f8f8 	bl	8005f38 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_3);	// PD14
 8002d48:	2108      	movs	r1, #8
 8002d4a:	4828      	ldr	r0, [pc, #160]	; (8002dec <gun_control_task+0xbc>)
 8002d4c:	f003 f8f4 	bl	8005f38 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_4); 	// PD15 (reversed)
 8002d50:	210c      	movs	r1, #12
 8002d52:	4826      	ldr	r0, [pc, #152]	; (8002dec <gun_control_task+0xbc>)
 8002d54:	f003 f8f0 	bl	8005f38 <HAL_TIM_PWM_Start>
	htim4.Instance->ARR = rotation_freq;
 8002d58:	4b25      	ldr	r3, [pc, #148]	; (8002df0 <gun_control_task+0xc0>)
 8002d5a:	881a      	ldrh	r2, [r3, #0]
 8002d5c:	4b23      	ldr	r3, [pc, #140]	; (8002dec <gun_control_task+0xbc>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	62da      	str	r2, [r3, #44]	; 0x2c
*/

	while(1)
	{
		//refresh dbus data
		if (HAL_GetTick() - remote_cmd.last_time > REMOTE_TIMEOUT )
 8002d62:	f000 fe81 	bl	8003a68 <HAL_GetTick>
 8002d66:	4602      	mov	r2, r0
 8002d68:	4b22      	ldr	r3, [pc, #136]	; (8002df4 <gun_control_task+0xc4>)
 8002d6a:	69db      	ldr	r3, [r3, #28]
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002d72:	d907      	bls.n	8002d84 <gun_control_task+0x54>
		{
			dbus_reset();
 8002d74:	f000 fcda 	bl	800372c <dbus_reset>
			firing[0] = 0;
 8002d78:	4b1f      	ldr	r3, [pc, #124]	; (8002df8 <gun_control_task+0xc8>)
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	701a      	strb	r2, [r3, #0]
			firing[1] = 0;
 8002d7e:	4b1e      	ldr	r3, [pc, #120]	; (8002df8 <gun_control_task+0xc8>)
 8002d80:	2200      	movs	r2, #0
 8002d82:	705a      	strb	r2, [r3, #1]
		}
		//if firing and kill switch is not activated
		if(remote_cmd.right_switch == fire && remote_cmd.left_switch != kill)
 8002d84:	4b1b      	ldr	r3, [pc, #108]	; (8002df4 <gun_control_task+0xc4>)
 8002d86:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	d115      	bne.n	8002dba <gun_control_task+0x8a>
 8002d8e:	4b19      	ldr	r3, [pc, #100]	; (8002df4 <gun_control_task+0xc4>)
 8002d90:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8002d94:	2b03      	cmp	r3, #3
 8002d96:	d010      	beq.n	8002dba <gun_control_task+0x8a>
		{
			osEventFlagsWait(gun_data_flag, 0x10, osFlagsWaitAll, 100);
 8002d98:	4b18      	ldr	r3, [pc, #96]	; (8002dfc <gun_control_task+0xcc>)
 8002d9a:	6818      	ldr	r0, [r3, #0]
 8002d9c:	2364      	movs	r3, #100	; 0x64
 8002d9e:	2201      	movs	r2, #1
 8002da0:	2110      	movs	r1, #16
 8002da2:	f005 f997 	bl	80080d4 <osEventFlagsWait>
			launcher_control(canone_data.FEEDER);
 8002da6:	4816      	ldr	r0, [pc, #88]	; (8002e00 <gun_control_task+0xd0>)
 8002da8:	f000 f82e 	bl	8002e08 <launcher_control>
			osEventFlagsClear(gun_data_flag, 0x10);
 8002dac:	4b13      	ldr	r3, [pc, #76]	; (8002dfc <gun_control_task+0xcc>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	2110      	movs	r1, #16
 8002db2:	4618      	mov	r0, r3
 8002db4:	f005 f94a 	bl	800804c <osEventFlagsClear>
 8002db8:	e013      	b.n	8002de2 <gun_control_task+0xb2>
		}
		//otherwise kill the launcher
		else
		{
			pwm_output(-1,400);
 8002dba:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8002dbe:	20ff      	movs	r0, #255	; 0xff
 8002dc0:	f000 f91a 	bl	8002ff8 <pwm_output>
			CANone_cmd(0,0,0,0, LAUNCHER_ID);
 8002dc4:	f240 13ff 	movw	r3, #511	; 0x1ff
 8002dc8:	9300      	str	r3, [sp, #0]
 8002dca:	2300      	movs	r3, #0
 8002dcc:	2200      	movs	r2, #0
 8002dce:	2100      	movs	r1, #0
 8002dd0:	2000      	movs	r0, #0
 8002dd2:	f000 fa7f 	bl	80032d4 <CANone_cmd>
			firing[0] = 0;
 8002dd6:	4b08      	ldr	r3, [pc, #32]	; (8002df8 <gun_control_task+0xc8>)
 8002dd8:	2200      	movs	r2, #0
 8002dda:	701a      	strb	r2, [r3, #0]
			firing[1] = 0;
 8002ddc:	4b06      	ldr	r3, [pc, #24]	; (8002df8 <gun_control_task+0xc8>)
 8002dde:	2200      	movs	r2, #0
 8002de0:	705a      	strb	r2, [r3, #1]
		}
		//delays task for other tasks to run, CHECK THE VALUE
		vTaskDelay(CHASSIS_DELAY);
 8002de2:	2002      	movs	r0, #2
 8002de4:	f006 fd5e 	bl	80098a4 <vTaskDelay>
		if (HAL_GetTick() - remote_cmd.last_time > REMOTE_TIMEOUT )
 8002de8:	e7bb      	b.n	8002d62 <gun_control_task+0x32>
 8002dea:	bf00      	nop
 8002dec:	200099c4 	.word	0x200099c4
 8002df0:	20000008 	.word	0x20000008
 8002df4:	20004eb8 	.word	0x20004eb8
 8002df8:	20004e94 	.word	0x20004e94
 8002dfc:	20009844 	.word	0x20009844
 8002e00:	20009c90 	.word	0x20009c90
 8002e04:	00000000 	.word	0x00000000

08002e08 <launcher_control>:
	}
	osThreadTerminate(NULL);
}

void launcher_control(motor_data_t *feeders)
{
 8002e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e0c:	b087      	sub	sp, #28
 8002e0e:	af02      	add	r7, sp, #8
 8002e10:	6078      	str	r0, [r7, #4]
	int16_t feeder_output[2];

	for (int i = 0; i < 2; i++)
 8002e12:	2300      	movs	r3, #0
 8002e14:	60fb      	str	r3, [r7, #12]
 8002e16:	e0c9      	b.n	8002fac <launcher_control+0x1a4>
	{
		//Remember to change one of the motor direction according to data sheet since PWM cannot change direction.
		pwm_output(i,1300); // 0-100 (max speed), 50: 50% (?) of maximum speed = 1300 microseconds pulsewidth
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	f240 5114 	movw	r1, #1300	; 0x514
 8002e20:	4618      	mov	r0, r3
 8002e22:	f000 f8e9 	bl	8002ff8 <pwm_output>
		if (firing[i] == 0)
 8002e26:	4a70      	ldr	r2, [pc, #448]	; (8002fe8 <launcher_control+0x1e0>)
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	4413      	add	r3, r2
 8002e2c:	781b      	ldrb	r3, [r3, #0]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d10b      	bne.n	8002e4a <launcher_control+0x42>
		{
			firing[i] = 1;
 8002e32:	4a6d      	ldr	r2, [pc, #436]	; (8002fe8 <launcher_control+0x1e0>)
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	4413      	add	r3, r2
 8002e38:	2201      	movs	r2, #1
 8002e3a:	701a      	strb	r2, [r3, #0]
			start_time[i] = HAL_GetTick();
 8002e3c:	f000 fe14 	bl	8003a68 <HAL_GetTick>
 8002e40:	4602      	mov	r2, r0
 8002e42:	496a      	ldr	r1, [pc, #424]	; (8002fec <launcher_control+0x1e4>)
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		}
		if (start_time[i] + 500 < HAL_GetTick())
 8002e4a:	4a68      	ldr	r2, [pc, #416]	; (8002fec <launcher_control+0x1e4>)
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e52:	f503 76fa 	add.w	r6, r3, #500	; 0x1f4
 8002e56:	f000 fe07 	bl	8003a68 <HAL_GetTick>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	429e      	cmp	r6, r3
 8002e5e:	f080 8099 	bcs.w	8002f94 <launcher_control+0x18c>
		{
			if (fabs(feeders[i].torque) > FEEDER_JAM_TORQUE)
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2268      	movs	r2, #104	; 0x68
 8002e66:	fb02 f303 	mul.w	r3, r2, r3
 8002e6a:	687a      	ldr	r2, [r7, #4]
 8002e6c:	4413      	add	r3, r2
 8002e6e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002e72:	4618      	mov	r0, r3
 8002e74:	f7fd fb0e 	bl	8000494 <__aeabi_i2d>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	460b      	mov	r3, r1
 8002e7c:	4614      	mov	r4, r2
 8002e7e:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8002e82:	a357      	add	r3, pc, #348	; (adr r3, 8002fe0 <launcher_control+0x1d8>)
 8002e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e88:	4620      	mov	r0, r4
 8002e8a:	4629      	mov	r1, r5
 8002e8c:	f7fd fdfc 	bl	8000a88 <__aeabi_dcmpgt>
 8002e90:	4603      	mov	r3, r0
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d00b      	beq.n	8002eae <launcher_control+0xa6>
			{
				unjamming[i] = 1;
 8002e96:	4a56      	ldr	r2, [pc, #344]	; (8002ff0 <launcher_control+0x1e8>)
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	4413      	add	r3, r2
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	701a      	strb	r2, [r3, #0]
				jam_time[i] = HAL_GetTick();
 8002ea0:	f000 fde2 	bl	8003a68 <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	4953      	ldr	r1, [pc, #332]	; (8002ff4 <launcher_control+0x1ec>)
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			}

			//unjamming needed, check what feeder output to give
			if (unjamming[i] == 1)
 8002eae:	4a50      	ldr	r2, [pc, #320]	; (8002ff0 <launcher_control+0x1e8>)
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	4413      	add	r3, r2
 8002eb4:	781b      	ldrb	r3, [r3, #0]
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	d122      	bne.n	8002f00 <launcher_control+0xf8>
			{
				// feeder is unjamming itself successfully
				if (start_time[i] + FEEDER_UNJAM_TIME < HAL_GetTick())
 8002eba:	4a4c      	ldr	r2, [pc, #304]	; (8002fec <launcher_control+0x1e4>)
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ec2:	f103 0696 	add.w	r6, r3, #150	; 0x96
 8002ec6:	f000 fdcf 	bl	8003a68 <HAL_GetTick>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	429e      	cmp	r6, r3
 8002ece:	d20d      	bcs.n	8002eec <launcher_control+0xe4>
				{
					unjamming[i] = 0;
 8002ed0:	4a47      	ldr	r2, [pc, #284]	; (8002ff0 <launcher_control+0x1e8>)
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	4413      	add	r3, r2
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	701a      	strb	r2, [r3, #0]
					feeder_output[i] = FEEDER_SPEED;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	005b      	lsls	r3, r3, #1
 8002ede:	f107 0210 	add.w	r2, r7, #16
 8002ee2:	4413      	add	r3, r2
 8002ee4:	221e      	movs	r2, #30
 8002ee6:	f823 2c08 	strh.w	r2, [r3, #-8]
 8002eea:	e011      	b.n	8002f10 <launcher_control+0x108>
				}
				// feeder is unable to unjam, hence, send unjam speed
				else
				{
					feeder_output[i] = FEEDER_UNJAM_SPD;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	005b      	lsls	r3, r3, #1
 8002ef0:	f107 0210 	add.w	r2, r7, #16
 8002ef4:	4413      	add	r3, r2
 8002ef6:	f64f 72fb 	movw	r2, #65531	; 0xfffb
 8002efa:	f823 2c08 	strh.w	r2, [r3, #-8]
 8002efe:	e007      	b.n	8002f10 <launcher_control+0x108>
				}
			}
			else
			{
				feeder_output[i] = FEEDER_SPEED;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	005b      	lsls	r3, r3, #1
 8002f04:	f107 0210 	add.w	r2, r7, #16
 8002f08:	4413      	add	r3, r2
 8002f0a:	221e      	movs	r2, #30
 8002f0c:	f823 2c08 	strh.w	r2, [r3, #-8]
			}
			if (i== 0)
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d111      	bne.n	8002f3a <launcher_control+0x132>
			{
				feeder_output[i] *= -1;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	005b      	lsls	r3, r3, #1
 8002f1a:	f107 0210 	add.w	r2, r7, #16
 8002f1e:	4413      	add	r3, r2
 8002f20:	f933 3c08 	ldrsh.w	r3, [r3, #-8]
 8002f24:	b29b      	uxth	r3, r3
 8002f26:	425b      	negs	r3, r3
 8002f28:	b29b      	uxth	r3, r3
 8002f2a:	b21a      	sxth	r2, r3
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	005b      	lsls	r3, r3, #1
 8002f30:	f107 0110 	add.w	r1, r7, #16
 8002f34:	440b      	add	r3, r1
 8002f36:	f823 2c08 	strh.w	r2, [r3, #-8]
			}
			speed_pid(feeder_output[i] * 36,feeders[i].rpm, &feeders[i].pid);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	005b      	lsls	r3, r3, #1
 8002f3e:	f107 0210 	add.w	r2, r7, #16
 8002f42:	4413      	add	r3, r2
 8002f44:	f933 3c08 	ldrsh.w	r3, [r3, #-8]
 8002f48:	461a      	mov	r2, r3
 8002f4a:	4613      	mov	r3, r2
 8002f4c:	00db      	lsls	r3, r3, #3
 8002f4e:	4413      	add	r3, r2
 8002f50:	009b      	lsls	r3, r3, #2
 8002f52:	4618      	mov	r0, r3
 8002f54:	f7fd fa9e 	bl	8000494 <__aeabi_i2d>
 8002f58:	4680      	mov	r8, r0
 8002f5a:	4689      	mov	r9, r1
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2268      	movs	r2, #104	; 0x68
 8002f60:	fb02 f303 	mul.w	r3, r2, r3
 8002f64:	687a      	ldr	r2, [r7, #4]
 8002f66:	4413      	add	r3, r2
 8002f68:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f7fd fa91 	bl	8000494 <__aeabi_i2d>
 8002f72:	4682      	mov	sl, r0
 8002f74:	468b      	mov	fp, r1
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2268      	movs	r2, #104	; 0x68
 8002f7a:	fb02 f303 	mul.w	r3, r2, r3
 8002f7e:	687a      	ldr	r2, [r7, #4]
 8002f80:	4413      	add	r3, r2
 8002f82:	3310      	adds	r3, #16
 8002f84:	4618      	mov	r0, r3
 8002f86:	ec4b ab11 	vmov	d1, sl, fp
 8002f8a:	ec49 8b10 	vmov	d0, r8, r9
 8002f8e:	f000 f86b 	bl	8003068 <speed_pid>
 8002f92:	e008      	b.n	8002fa6 <launcher_control+0x19e>
		}
		else
		{
			feeders[i].pid.output = 0;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2268      	movs	r2, #104	; 0x68
 8002f98:	fb02 f303 	mul.w	r3, r2, r3
 8002f9c:	687a      	ldr	r2, [r7, #4]
 8002f9e:	4413      	add	r3, r2
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
	for (int i = 0; i < 2; i++)
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	3301      	adds	r3, #1
 8002faa:	60fb      	str	r3, [r7, #12]
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	f77f af32 	ble.w	8002e18 <launcher_control+0x10>
		}
	}
	CANone_cmd(feeders[0].pid.output, feeders[1].pid.output,0,0,LAUNCHER_ID);  //feeder M2006 id 5-6, identifier = 0x1ff
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	f9b3 0064 	ldrsh.w	r0, [r3, #100]	; 0x64
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	3368      	adds	r3, #104	; 0x68
 8002fbe:	f9b3 1064 	ldrsh.w	r1, [r3, #100]	; 0x64
 8002fc2:	f240 13ff 	movw	r3, #511	; 0x1ff
 8002fc6:	9300      	str	r3, [sp, #0]
 8002fc8:	2300      	movs	r3, #0
 8002fca:	2200      	movs	r2, #0
 8002fcc:	f000 f982 	bl	80032d4 <CANone_cmd>
}
 8002fd0:	bf00      	nop
 8002fd2:	3714      	adds	r7, #20
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002fda:	bf00      	nop
 8002fdc:	f3af 8000 	nop.w
 8002fe0:	00000000 	.word	0x00000000
 8002fe4:	40d00400 	.word	0x40d00400
 8002fe8:	20004e94 	.word	0x20004e94
 8002fec:	20004e88 	.word	0x20004e88
 8002ff0:	20004e90 	.word	0x20004e90
 8002ff4:	20004e80 	.word	0x20004e80

08002ff8 <pwm_output>:



void pwm_output(uint8_t timergroup, uint16_t output)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b083      	sub	sp, #12
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	4603      	mov	r3, r0
 8003000:	460a      	mov	r2, r1
 8003002:	71fb      	strb	r3, [r7, #7]
 8003004:	4613      	mov	r3, r2
 8003006:	80bb      	strh	r3, [r7, #4]
	if (timergroup == 0)
 8003008:	79fb      	ldrb	r3, [r7, #7]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d108      	bne.n	8003020 <pwm_output+0x28>
	{
		htim4.Instance->CCR1 = output;
 800300e:	4b15      	ldr	r3, [pc, #84]	; (8003064 <pwm_output+0x6c>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	88ba      	ldrh	r2, [r7, #4]
 8003014:	635a      	str	r2, [r3, #52]	; 0x34
		htim4.Instance->CCR2 = output;
 8003016:	4b13      	ldr	r3, [pc, #76]	; (8003064 <pwm_output+0x6c>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	88ba      	ldrh	r2, [r7, #4]
 800301c:	639a      	str	r2, [r3, #56]	; 0x38
		htim4.Instance->CCR2 = output;
		htim4.Instance->CCR3 = output;
		htim4.Instance->CCR4 = output;
	}

}
 800301e:	e01b      	b.n	8003058 <pwm_output+0x60>
	else if (timergroup == 1)
 8003020:	79fb      	ldrb	r3, [r7, #7]
 8003022:	2b01      	cmp	r3, #1
 8003024:	d108      	bne.n	8003038 <pwm_output+0x40>
		htim4.Instance->CCR3 = output;
 8003026:	4b0f      	ldr	r3, [pc, #60]	; (8003064 <pwm_output+0x6c>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	88ba      	ldrh	r2, [r7, #4]
 800302c:	63da      	str	r2, [r3, #60]	; 0x3c
		htim4.Instance->CCR4 = output;
 800302e:	4b0d      	ldr	r3, [pc, #52]	; (8003064 <pwm_output+0x6c>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	88ba      	ldrh	r2, [r7, #4]
 8003034:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003036:	e00f      	b.n	8003058 <pwm_output+0x60>
		htim4.Instance->CCR1 = output;
 8003038:	4b0a      	ldr	r3, [pc, #40]	; (8003064 <pwm_output+0x6c>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	88ba      	ldrh	r2, [r7, #4]
 800303e:	635a      	str	r2, [r3, #52]	; 0x34
		htim4.Instance->CCR2 = output;
 8003040:	4b08      	ldr	r3, [pc, #32]	; (8003064 <pwm_output+0x6c>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	88ba      	ldrh	r2, [r7, #4]
 8003046:	639a      	str	r2, [r3, #56]	; 0x38
		htim4.Instance->CCR3 = output;
 8003048:	4b06      	ldr	r3, [pc, #24]	; (8003064 <pwm_output+0x6c>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	88ba      	ldrh	r2, [r7, #4]
 800304e:	63da      	str	r2, [r3, #60]	; 0x3c
		htim4.Instance->CCR4 = output;
 8003050:	4b04      	ldr	r3, [pc, #16]	; (8003064 <pwm_output+0x6c>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	88ba      	ldrh	r2, [r7, #4]
 8003056:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003058:	bf00      	nop
 800305a:	370c      	adds	r7, #12
 800305c:	46bd      	mov	sp, r7
 800305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003062:	4770      	bx	lr
 8003064:	200099c4 	.word	0x200099c4

08003068 <speed_pid>:


//todo: clean this place

void speed_pid(double setpoint, double curr_pt, pid_data_t *pid)
{
 8003068:	b5b0      	push	{r4, r5, r7, lr}
 800306a:	b08c      	sub	sp, #48	; 0x30
 800306c:	af00      	add	r7, sp, #0
 800306e:	ed87 0b04 	vstr	d0, [r7, #16]
 8003072:	ed87 1b02 	vstr	d1, [r7, #8]
 8003076:	6078      	str	r0, [r7, #4]
	double Pout = 0;
 8003078:	f04f 0200 	mov.w	r2, #0
 800307c:	f04f 0300 	mov.w	r3, #0
 8003080:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	double Iout = 0;
 8003084:	f04f 0200 	mov.w	r2, #0
 8003088:	f04f 0300 	mov.w	r3, #0
 800308c:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double Dout = 0;
 8003090:	f04f 0200 	mov.w	r2, #0
 8003094:	f04f 0300 	mov.w	r3, #0
 8003098:	e9c7 2306 	strd	r2, r3, [r7, #24]
	pid->error[2] = pid->error[1];
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80030a2:	6879      	ldr	r1, [r7, #4]
 80030a4:	e9c1 2308 	strd	r2, r3, [r1, #32]
	pid->error[1] = pid->error[0];
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80030ae:	6879      	ldr	r1, [r7, #4]
 80030b0:	e9c1 2306 	strd	r2, r3, [r1, #24]
	pid->error[0] = setpoint - curr_pt;
 80030b4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80030b8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80030bc:	f7fd f89c 	bl	80001f8 <__aeabi_dsub>
 80030c0:	4602      	mov	r2, r0
 80030c2:	460b      	mov	r3, r1
 80030c4:	6879      	ldr	r1, [r7, #4]
 80030c6:	e9c1 2304 	strd	r2, r3, [r1, #16]
	Pout = pid->error[0] * pid->kp;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4618      	mov	r0, r3
 80030d6:	f7fd f9ef 	bl	80004b8 <__aeabi_f2d>
 80030da:	4602      	mov	r2, r0
 80030dc:	460b      	mov	r3, r1
 80030de:	4620      	mov	r0, r4
 80030e0:	4629      	mov	r1, r5
 80030e2:	f7fd fa41 	bl	8000568 <__aeabi_dmul>
 80030e6:	4602      	mov	r2, r0
 80030e8:	460b      	mov	r3, r1
 80030ea:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

    pid->error_buf[2] = pid->error_buf[1];
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80030f4:	6879      	ldr	r1, [r7, #4]
 80030f6:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
    pid->error_buf[1] = pid->error_buf[0];
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8003100:	6879      	ldr	r1, [r7, #4]
 8003102:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    pid->error_buf[0] = pid->error[0] - pid->error[1];
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003112:	f7fd f871 	bl	80001f8 <__aeabi_dsub>
 8003116:	4602      	mov	r2, r0
 8003118:	460b      	mov	r3, r1
 800311a:	6879      	ldr	r1, [r7, #4]
 800311c:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Dout = pid->error_buf[0] * pid->kd;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	4618      	mov	r0, r3
 800312c:	f7fd f9c4 	bl	80004b8 <__aeabi_f2d>
 8003130:	4602      	mov	r2, r0
 8003132:	460b      	mov	r3, r1
 8003134:	4620      	mov	r0, r4
 8003136:	4629      	mov	r1, r5
 8003138:	f7fd fa16 	bl	8000568 <__aeabi_dmul>
 800313c:	4602      	mov	r2, r0
 800313e:	460b      	mov	r3, r1
 8003140:	e9c7 2306 	strd	r2, r3, [r7, #24]

    Iout = pid->error[0] * pid->ki;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	4618      	mov	r0, r3
 8003150:	f7fd f9b2 	bl	80004b8 <__aeabi_f2d>
 8003154:	4602      	mov	r2, r0
 8003156:	460b      	mov	r3, r1
 8003158:	4620      	mov	r0, r4
 800315a:	4629      	mov	r1, r5
 800315c:	f7fd fa04 	bl	8000568 <__aeabi_dmul>
 8003160:	4602      	mov	r2, r0
 8003162:	460b      	mov	r3, r1
 8003164:	e9c7 2308 	strd	r2, r3, [r7, #32]
    pid->output += Pout + Iout + Dout;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	f9b3 3054 	ldrsh.w	r3, [r3, #84]	; 0x54
 800316e:	4618      	mov	r0, r3
 8003170:	f7fd f990 	bl	8000494 <__aeabi_i2d>
 8003174:	4604      	mov	r4, r0
 8003176:	460d      	mov	r5, r1
 8003178:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800317c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003180:	f7fd f83c 	bl	80001fc <__adddf3>
 8003184:	4602      	mov	r2, r0
 8003186:	460b      	mov	r3, r1
 8003188:	4610      	mov	r0, r2
 800318a:	4619      	mov	r1, r3
 800318c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003190:	f7fd f834 	bl	80001fc <__adddf3>
 8003194:	4602      	mov	r2, r0
 8003196:	460b      	mov	r3, r1
 8003198:	4620      	mov	r0, r4
 800319a:	4629      	mov	r1, r5
 800319c:	f7fd f82e 	bl	80001fc <__adddf3>
 80031a0:	4602      	mov	r2, r0
 80031a2:	460b      	mov	r3, r1
 80031a4:	4610      	mov	r0, r2
 80031a6:	4619      	mov	r1, r3
 80031a8:	f7fd fc78 	bl	8000a9c <__aeabi_d2iz>
 80031ac:	4603      	mov	r3, r0
 80031ae:	b21a      	sxth	r2, r3
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
//    double_limit(&Iout, pid->int_max);
    int_limit(&pid->output, pid->max_out);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	f103 0254 	add.w	r2, r3, #84	; 0x54
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	; 0x50
 80031c2:	4619      	mov	r1, r3
 80031c4:	4610      	mov	r0, r2
 80031c6:	f000 f927 	bl	8003418 <int_limit>
}
 80031ca:	bf00      	nop
 80031cc:	3730      	adds	r7, #48	; 0x30
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bdb0      	pop	{r4, r5, r7, pc}
 80031d2:	0000      	movs	r0, r0
 80031d4:	0000      	movs	r0, r0
	...

080031d8 <angle_pid>:


void angle_pid(double setpoint, double curr_pt, gimbal_data_t *motor)
{
 80031d8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80031dc:	b088      	sub	sp, #32
 80031de:	af00      	add	r7, sp, #0
 80031e0:	ed87 0b04 	vstr	d0, [r7, #16]
 80031e4:	ed87 1b02 	vstr	d1, [r7, #8]
 80031e8:	6078      	str	r0, [r7, #4]
	float ang_diff = (setpoint - curr_pt);
 80031ea:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80031ee:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80031f2:	f7fd f801 	bl	80001f8 <__aeabi_dsub>
 80031f6:	4602      	mov	r2, r0
 80031f8:	460b      	mov	r3, r1
 80031fa:	4610      	mov	r0, r2
 80031fc:	4619      	mov	r1, r3
 80031fe:	f7fd fc75 	bl	8000aec <__aeabi_d2f>
 8003202:	4603      	mov	r3, r0
 8003204:	61fb      	str	r3, [r7, #28]
	if (ang_diff > PI )
 8003206:	edd7 7a07 	vldr	s15, [r7, #28]
 800320a:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80032c8 <angle_pid+0xf0>
 800320e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003212:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003216:	dd08      	ble.n	800322a <angle_pid+0x52>
	{
		ang_diff -= 2 * PI;
 8003218:	edd7 7a07 	vldr	s15, [r7, #28]
 800321c:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80032cc <angle_pid+0xf4>
 8003220:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003224:	edc7 7a07 	vstr	s15, [r7, #28]
 8003228:	e010      	b.n	800324c <angle_pid+0x74>
	}
	else if(ang_diff < -PI)
 800322a:	edd7 7a07 	vldr	s15, [r7, #28]
 800322e:	ed9f 7a28 	vldr	s14, [pc, #160]	; 80032d0 <angle_pid+0xf8>
 8003232:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003236:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800323a:	d507      	bpl.n	800324c <angle_pid+0x74>
	{
		ang_diff += 2 * PI;
 800323c:	edd7 7a07 	vldr	s15, [r7, #28]
 8003240:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80032cc <angle_pid+0xf4>
 8003244:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003248:	edc7 7a07 	vstr	s15, [r7, #28]
	}

	int16_t set_rpm = (ang_diff) * motor->rpm_max / GIMBAL_MAX_ANGLE_DIFF;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8003252:	ee07 3a90 	vmov	s15, r3
 8003256:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800325a:	edd7 7a07 	vldr	s15, [r7, #28]
 800325e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003262:	ee17 0a90 	vmov	r0, s15
 8003266:	f7fd f927 	bl	80004b8 <__aeabi_f2d>
 800326a:	a315      	add	r3, pc, #84	; (adr r3, 80032c0 <angle_pid+0xe8>)
 800326c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003270:	f7fd faa4 	bl	80007bc <__aeabi_ddiv>
 8003274:	4602      	mov	r2, r0
 8003276:	460b      	mov	r3, r1
 8003278:	4610      	mov	r0, r2
 800327a:	4619      	mov	r1, r3
 800327c:	f7fd fc0e 	bl	8000a9c <__aeabi_d2iz>
 8003280:	4603      	mov	r3, r0
 8003282:	837b      	strh	r3, [r7, #26]
	speed_pid(set_rpm, motor->rpm, &motor->pid);
 8003284:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003288:	4618      	mov	r0, r3
 800328a:	f7fd f903 	bl	8000494 <__aeabi_i2d>
 800328e:	4604      	mov	r4, r0
 8003290:	460d      	mov	r5, r1
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003298:	4618      	mov	r0, r3
 800329a:	f7fd f8fb 	bl	8000494 <__aeabi_i2d>
 800329e:	4680      	mov	r8, r0
 80032a0:	4689      	mov	r9, r1
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	3328      	adds	r3, #40	; 0x28
 80032a6:	4618      	mov	r0, r3
 80032a8:	ec49 8b11 	vmov	d1, r8, r9
 80032ac:	ec45 4b10 	vmov	d0, r4, r5
 80032b0:	f7ff feda 	bl	8003068 <speed_pid>


}
 80032b4:	bf00      	nop
 80032b6:	3720      	adds	r7, #32
 80032b8:	46bd      	mov	sp, r7
 80032ba:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80032be:	bf00      	nop
 80032c0:	9999999a 	.word	0x9999999a
 80032c4:	3fb99999 	.word	0x3fb99999
 80032c8:	40490fdb 	.word	0x40490fdb
 80032cc:	40c90fdb 	.word	0x40c90fdb
 80032d0:	c0490fdb 	.word	0xc0490fdb

080032d4 <CANone_cmd>:
 * @param can_stdID: the header ID, i.e. 0x200, 0x1FF and 0x2FF
 *
 * @note: this function probably only works for DJI motors due to the 2 bytes each motors require
 */
void CANone_cmd(int16_t motor1, int16_t motor2, int16_t motor3, int16_t motor4, uint32_t can_stdID)
{
 80032d4:	b590      	push	{r4, r7, lr}
 80032d6:	b08d      	sub	sp, #52	; 0x34
 80032d8:	af00      	add	r7, sp, #0
 80032da:	4604      	mov	r4, r0
 80032dc:	4608      	mov	r0, r1
 80032de:	4611      	mov	r1, r2
 80032e0:	461a      	mov	r2, r3
 80032e2:	4623      	mov	r3, r4
 80032e4:	80fb      	strh	r3, [r7, #6]
 80032e6:	4603      	mov	r3, r0
 80032e8:	80bb      	strh	r3, [r7, #4]
 80032ea:	460b      	mov	r3, r1
 80032ec:	807b      	strh	r3, [r7, #2]
 80032ee:	4613      	mov	r3, r2
 80032f0:	803b      	strh	r3, [r7, #0]
	CAN_TxHeaderTypeDef  CANone_tx_message;
	uint8_t              CANone_send_data[8];
	uint32_t send_mail_box;
	CANone_tx_message.StdId = can_stdID;
 80032f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032f4:	61bb      	str	r3, [r7, #24]
	CANone_tx_message.IDE = CAN_ID_STD;
 80032f6:	2300      	movs	r3, #0
 80032f8:	623b      	str	r3, [r7, #32]
	CANone_tx_message.RTR = CAN_RTR_DATA;
 80032fa:	2300      	movs	r3, #0
 80032fc:	627b      	str	r3, [r7, #36]	; 0x24
	CANone_tx_message.DLC = 0x08;
 80032fe:	2308      	movs	r3, #8
 8003300:	62bb      	str	r3, [r7, #40]	; 0x28
	CANone_send_data[0] = motor1 >> 8;
 8003302:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003306:	121b      	asrs	r3, r3, #8
 8003308:	b21b      	sxth	r3, r3
 800330a:	b2db      	uxtb	r3, r3
 800330c:	743b      	strb	r3, [r7, #16]
	CANone_send_data[1] = motor1;
 800330e:	88fb      	ldrh	r3, [r7, #6]
 8003310:	b2db      	uxtb	r3, r3
 8003312:	747b      	strb	r3, [r7, #17]
	CANone_send_data[2] = motor2 >> 8;
 8003314:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003318:	121b      	asrs	r3, r3, #8
 800331a:	b21b      	sxth	r3, r3
 800331c:	b2db      	uxtb	r3, r3
 800331e:	74bb      	strb	r3, [r7, #18]
	CANone_send_data[3] = motor2;
 8003320:	88bb      	ldrh	r3, [r7, #4]
 8003322:	b2db      	uxtb	r3, r3
 8003324:	74fb      	strb	r3, [r7, #19]
	CANone_send_data[4] = motor3 >> 8;
 8003326:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800332a:	121b      	asrs	r3, r3, #8
 800332c:	b21b      	sxth	r3, r3
 800332e:	b2db      	uxtb	r3, r3
 8003330:	753b      	strb	r3, [r7, #20]
	CANone_send_data[5] = motor3;
 8003332:	887b      	ldrh	r3, [r7, #2]
 8003334:	b2db      	uxtb	r3, r3
 8003336:	757b      	strb	r3, [r7, #21]
	CANone_send_data[6] = motor4 >> 8;
 8003338:	f9b7 3000 	ldrsh.w	r3, [r7]
 800333c:	121b      	asrs	r3, r3, #8
 800333e:	b21b      	sxth	r3, r3
 8003340:	b2db      	uxtb	r3, r3
 8003342:	75bb      	strb	r3, [r7, #22]
	CANone_send_data[7] = motor4;
 8003344:	883b      	ldrh	r3, [r7, #0]
 8003346:	b2db      	uxtb	r3, r3
 8003348:	75fb      	strb	r3, [r7, #23]
	HAL_CAN_AddTxMessage(&hcan1, &CANone_tx_message, CANone_send_data, &send_mail_box);
 800334a:	f107 030c 	add.w	r3, r7, #12
 800334e:	f107 0210 	add.w	r2, r7, #16
 8003352:	f107 0118 	add.w	r1, r7, #24
 8003356:	4803      	ldr	r0, [pc, #12]	; (8003364 <CANone_cmd+0x90>)
 8003358:	f000 fdd6 	bl	8003f08 <HAL_CAN_AddTxMessage>
}
 800335c:	bf00      	nop
 800335e:	3734      	adds	r7, #52	; 0x34
 8003360:	46bd      	mov	sp, r7
 8003362:	bd90      	pop	{r4, r7, pc}
 8003364:	2000980c 	.word	0x2000980c

08003368 <CANtwo_cmd>:
 * @param can_stdID: the header ID, i.e. 0x200, 0x1FF and 0x2FF
 *
 * @note: this function probably only works for DJI motors due to the 2 bytes each motors require
 */
void CANtwo_cmd(int16_t motor1, int16_t motor2, int16_t motor3, int16_t motor4, uint32_t can_stdID)
{
 8003368:	b590      	push	{r4, r7, lr}
 800336a:	b085      	sub	sp, #20
 800336c:	af00      	add	r7, sp, #0
 800336e:	4604      	mov	r4, r0
 8003370:	4608      	mov	r0, r1
 8003372:	4611      	mov	r1, r2
 8003374:	461a      	mov	r2, r3
 8003376:	4623      	mov	r3, r4
 8003378:	80fb      	strh	r3, [r7, #6]
 800337a:	4603      	mov	r3, r0
 800337c:	80bb      	strh	r3, [r7, #4]
 800337e:	460b      	mov	r3, r1
 8003380:	807b      	strh	r3, [r7, #2]
 8003382:	4613      	mov	r3, r2
 8003384:	803b      	strh	r3, [r7, #0]
	static CAN_TxHeaderTypeDef  CANtwo_tx_message;
	static uint8_t              CANtwo_send_data[8];
	uint32_t send_mail_box;
	CANtwo_tx_message.StdId = can_stdID;
 8003386:	4a21      	ldr	r2, [pc, #132]	; (800340c <CANtwo_cmd+0xa4>)
 8003388:	6a3b      	ldr	r3, [r7, #32]
 800338a:	6013      	str	r3, [r2, #0]
	CANtwo_tx_message.IDE = CAN_ID_STD;
 800338c:	4b1f      	ldr	r3, [pc, #124]	; (800340c <CANtwo_cmd+0xa4>)
 800338e:	2200      	movs	r2, #0
 8003390:	609a      	str	r2, [r3, #8]
	CANtwo_tx_message.RTR = CAN_RTR_DATA;
 8003392:	4b1e      	ldr	r3, [pc, #120]	; (800340c <CANtwo_cmd+0xa4>)
 8003394:	2200      	movs	r2, #0
 8003396:	60da      	str	r2, [r3, #12]
	CANtwo_tx_message.DLC = 0x08;
 8003398:	4b1c      	ldr	r3, [pc, #112]	; (800340c <CANtwo_cmd+0xa4>)
 800339a:	2208      	movs	r2, #8
 800339c:	611a      	str	r2, [r3, #16]
	CANtwo_send_data[0] = motor1 >> 8;
 800339e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80033a2:	121b      	asrs	r3, r3, #8
 80033a4:	b21b      	sxth	r3, r3
 80033a6:	b2da      	uxtb	r2, r3
 80033a8:	4b19      	ldr	r3, [pc, #100]	; (8003410 <CANtwo_cmd+0xa8>)
 80033aa:	701a      	strb	r2, [r3, #0]
	CANtwo_send_data[1] = motor1;
 80033ac:	88fb      	ldrh	r3, [r7, #6]
 80033ae:	b2da      	uxtb	r2, r3
 80033b0:	4b17      	ldr	r3, [pc, #92]	; (8003410 <CANtwo_cmd+0xa8>)
 80033b2:	705a      	strb	r2, [r3, #1]
	CANtwo_send_data[2] = motor2 >> 8;
 80033b4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80033b8:	121b      	asrs	r3, r3, #8
 80033ba:	b21b      	sxth	r3, r3
 80033bc:	b2da      	uxtb	r2, r3
 80033be:	4b14      	ldr	r3, [pc, #80]	; (8003410 <CANtwo_cmd+0xa8>)
 80033c0:	709a      	strb	r2, [r3, #2]
	CANtwo_send_data[3] = motor2;
 80033c2:	88bb      	ldrh	r3, [r7, #4]
 80033c4:	b2da      	uxtb	r2, r3
 80033c6:	4b12      	ldr	r3, [pc, #72]	; (8003410 <CANtwo_cmd+0xa8>)
 80033c8:	70da      	strb	r2, [r3, #3]
	CANtwo_send_data[4] = motor3 >> 8;
 80033ca:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80033ce:	121b      	asrs	r3, r3, #8
 80033d0:	b21b      	sxth	r3, r3
 80033d2:	b2da      	uxtb	r2, r3
 80033d4:	4b0e      	ldr	r3, [pc, #56]	; (8003410 <CANtwo_cmd+0xa8>)
 80033d6:	711a      	strb	r2, [r3, #4]
	CANtwo_send_data[5] = motor3;
 80033d8:	887b      	ldrh	r3, [r7, #2]
 80033da:	b2da      	uxtb	r2, r3
 80033dc:	4b0c      	ldr	r3, [pc, #48]	; (8003410 <CANtwo_cmd+0xa8>)
 80033de:	715a      	strb	r2, [r3, #5]
	CANtwo_send_data[6] = motor4 >> 8;
 80033e0:	f9b7 3000 	ldrsh.w	r3, [r7]
 80033e4:	121b      	asrs	r3, r3, #8
 80033e6:	b21b      	sxth	r3, r3
 80033e8:	b2da      	uxtb	r2, r3
 80033ea:	4b09      	ldr	r3, [pc, #36]	; (8003410 <CANtwo_cmd+0xa8>)
 80033ec:	719a      	strb	r2, [r3, #6]
	CANtwo_send_data[7] = motor4;
 80033ee:	883b      	ldrh	r3, [r7, #0]
 80033f0:	b2da      	uxtb	r2, r3
 80033f2:	4b07      	ldr	r3, [pc, #28]	; (8003410 <CANtwo_cmd+0xa8>)
 80033f4:	71da      	strb	r2, [r3, #7]
	HAL_CAN_AddTxMessage(&hcan2, &CANtwo_tx_message, CANtwo_send_data, &send_mail_box);
 80033f6:	f107 030c 	add.w	r3, r7, #12
 80033fa:	4a05      	ldr	r2, [pc, #20]	; (8003410 <CANtwo_cmd+0xa8>)
 80033fc:	4903      	ldr	r1, [pc, #12]	; (800340c <CANtwo_cmd+0xa4>)
 80033fe:	4805      	ldr	r0, [pc, #20]	; (8003414 <CANtwo_cmd+0xac>)
 8003400:	f000 fd82 	bl	8003f08 <HAL_CAN_AddTxMessage>
}
 8003404:	bf00      	nop
 8003406:	3714      	adds	r7, #20
 8003408:	46bd      	mov	sp, r7
 800340a:	bd90      	pop	{r4, r7, pc}
 800340c:	20004e98 	.word	0x20004e98
 8003410:	20004eb0 	.word	0x20004eb0
 8003414:	200097e4 	.word	0x200097e4

08003418 <int_limit>:
	}

}

void int_limit(int16_t *vIn, int16_t max)
{
 8003418:	b480      	push	{r7}
 800341a:	b083      	sub	sp, #12
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
 8003420:	460b      	mov	r3, r1
 8003422:	807b      	strh	r3, [r7, #2]
	if (*vIn > max)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	f9b3 3000 	ldrsh.w	r3, [r3]
 800342a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800342e:	429a      	cmp	r2, r3
 8003430:	da03      	bge.n	800343a <int_limit+0x22>
	{
		*vIn = max;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	887a      	ldrh	r2, [r7, #2]
 8003436:	801a      	strh	r2, [r3, #0]
	}
	else if (*vIn < -max)
	{
		*vIn = -max;
	}
}
 8003438:	e00e      	b.n	8003458 <int_limit+0x40>
	else if (*vIn < -max)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003440:	461a      	mov	r2, r3
 8003442:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003446:	425b      	negs	r3, r3
 8003448:	429a      	cmp	r2, r3
 800344a:	da05      	bge.n	8003458 <int_limit+0x40>
		*vIn = -max;
 800344c:	887b      	ldrh	r3, [r7, #2]
 800344e:	425b      	negs	r3, r3
 8003450:	b29b      	uxth	r3, r3
 8003452:	b21a      	sxth	r2, r3
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	801a      	strh	r2, [r3, #0]
}
 8003458:	bf00      	nop
 800345a:	370c      	adds	r7, #12
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr

08003464 <movement_control_task>:

float current_position = START_POSITION;
uint16_t prev_chassis_motor_angle;

void movement_control_task(void *argument)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b084      	sub	sp, #16
 8003468:	af02      	add	r7, sp, #8
 800346a:	6078      	str	r0, [r7, #4]
	//prev_chassis_motor_angle = canone_data.CHASSIS->angle;
	while(1)
	{
		if (remote_cmd.left_switch != kill)
 800346c:	4b14      	ldr	r3, [pc, #80]	; (80034c0 <movement_control_task+0x5c>)
 800346e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8003472:	2b03      	cmp	r3, #3
 8003474:	d017      	beq.n	80034a6 <movement_control_task+0x42>
		{
			if(remote_cmd.left_switch == teleopetate)
 8003476:	4b12      	ldr	r3, [pc, #72]	; (80034c0 <movement_control_task+0x5c>)
 8003478:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800347c:	2b02      	cmp	r3, #2
 800347e:	d103      	bne.n	8003488 <movement_control_task+0x24>
			{
				chassis_motion_control(&canone_data.CHASSIS);
 8003480:	4810      	ldr	r0, [pc, #64]	; (80034c4 <movement_control_task+0x60>)
 8003482:	f000 f821 	bl	80034c8 <chassis_motion_control>
 8003486:	e017      	b.n	80034b8 <movement_control_task+0x54>
			}
			else if (remote_cmd.right_switch == random_movement)
 8003488:	4b0d      	ldr	r3, [pc, #52]	; (80034c0 <movement_control_task+0x5c>)
 800348a:	f993 3009 	ldrsb.w	r3, [r3, #9]
 800348e:	2b03      	cmp	r3, #3
 8003490:	d012      	beq.n	80034b8 <movement_control_task+0x54>
				//osEventFlagsClear(chassis_data_flag, 0x10);
			}
			else
			{
				// Stops chassis movement if aimbot decides to standby or fire launcher
				CANone_cmd(0,0,0,0,CHASSIS_ID);
 8003492:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003496:	9300      	str	r3, [sp, #0]
 8003498:	2300      	movs	r3, #0
 800349a:	2200      	movs	r2, #0
 800349c:	2100      	movs	r1, #0
 800349e:	2000      	movs	r0, #0
 80034a0:	f7ff ff18 	bl	80032d4 <CANone_cmd>
 80034a4:	e008      	b.n	80034b8 <movement_control_task+0x54>
			}
		}
		else
		{
			CANone_cmd(0,0,0,0,CHASSIS_ID);
 80034a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80034aa:	9300      	str	r3, [sp, #0]
 80034ac:	2300      	movs	r3, #0
 80034ae:	2200      	movs	r2, #0
 80034b0:	2100      	movs	r1, #0
 80034b2:	2000      	movs	r0, #0
 80034b4:	f7ff ff0e 	bl	80032d4 <CANone_cmd>
		}
		//delays task for other tasks to run
		vTaskDelay(CHASSIS_DELAY);
 80034b8:	2002      	movs	r0, #2
 80034ba:	f006 f9f3 	bl	80098a4 <vTaskDelay>
		if (remote_cmd.left_switch != kill)
 80034be:	e7d5      	b.n	800346c <movement_control_task+0x8>
 80034c0:	20004eb8 	.word	0x20004eb8
 80034c4:	20009c28 	.word	0x20009c28

080034c8 <chassis_motion_control>:
}
*/

//Movement restricted to along x axis (hence, only read in remote_cmd.left_x)
void chassis_motion_control(motor_data_t *motor)
{
 80034c8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80034cc:	b086      	sub	sp, #24
 80034ce:	af02      	add	r7, sp, #8
 80034d0:	6078      	str	r0, [r7, #4]
	int16_t out_wheel = 0;
 80034d2:	2300      	movs	r3, #0
 80034d4:	81fb      	strh	r3, [r7, #14]
	out_wheel = (MAX_SPEED * remote_cmd.left_x * 2)/(MAX_RC_VALUE);
 80034d6:	4b1b      	ldr	r3, [pc, #108]	; (8003544 <chassis_motion_control+0x7c>)
 80034d8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80034dc:	461a      	mov	r2, r3
 80034de:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 80034e2:	fb03 f302 	mul.w	r3, r3, r2
 80034e6:	4a18      	ldr	r2, [pc, #96]	; (8003548 <chassis_motion_control+0x80>)
 80034e8:	fb82 1203 	smull	r1, r2, r2, r3
 80034ec:	1252      	asrs	r2, r2, #9
 80034ee:	17db      	asrs	r3, r3, #31
 80034f0:	1ad3      	subs	r3, r2, r3
 80034f2:	81fb      	strh	r3, [r7, #14]
	speed_pid((double)out_wheel,(double)motor->rpm, &motor->pid);
 80034f4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80034f8:	4618      	mov	r0, r3
 80034fa:	f7fc ffcb 	bl	8000494 <__aeabi_i2d>
 80034fe:	4604      	mov	r4, r0
 8003500:	460d      	mov	r5, r1
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003508:	4618      	mov	r0, r3
 800350a:	f7fc ffc3 	bl	8000494 <__aeabi_i2d>
 800350e:	4680      	mov	r8, r0
 8003510:	4689      	mov	r9, r1
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	3310      	adds	r3, #16
 8003516:	4618      	mov	r0, r3
 8003518:	ec49 8b11 	vmov	d1, r8, r9
 800351c:	ec45 4b10 	vmov	d0, r4, r5
 8003520:	f7ff fda2 	bl	8003068 <speed_pid>
	CANone_cmd(motor->pid.output, 0, 0, 0, CHASSIS_ID);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	f9b3 0064 	ldrsh.w	r0, [r3, #100]	; 0x64
 800352a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800352e:	9300      	str	r3, [sp, #0]
 8003530:	2300      	movs	r3, #0
 8003532:	2200      	movs	r2, #0
 8003534:	2100      	movs	r1, #0
 8003536:	f7ff fecd 	bl	80032d4 <CANone_cmd>
	else
	{
		CANone_cmd(0,0,0,0,CHASSIS_ID);
	*/

}
 800353a:	bf00      	nop
 800353c:	3710      	adds	r7, #16
 800353e:	46bd      	mov	sp, r7
 8003540:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003544:	20004eb8 	.word	0x20004eb8
 8003548:	634c0635 	.word	0x634c0635

0800354c <dbus_remote_ISR>:
extern float pitch;
extern float yaw;


//Releases dbus semaphore when a dbus signal is detected by ISR
void dbus_remote_ISR(DMA_HandleTypeDef *hdma) {
 800354c:	b580      	push	{r7, lr}
 800354e:	b082      	sub	sp, #8
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
	remote_cmd.right_x = (remote_raw_data[0] | remote_raw_data[1] << 8) & 0x07FF;
 8003554:	4b71      	ldr	r3, [pc, #452]	; (800371c <dbus_remote_ISR+0x1d0>)
 8003556:	781b      	ldrb	r3, [r3, #0]
 8003558:	b21a      	sxth	r2, r3
 800355a:	4b70      	ldr	r3, [pc, #448]	; (800371c <dbus_remote_ISR+0x1d0>)
 800355c:	785b      	ldrb	r3, [r3, #1]
 800355e:	021b      	lsls	r3, r3, #8
 8003560:	b21b      	sxth	r3, r3
 8003562:	4313      	orrs	r3, r2
 8003564:	b21b      	sxth	r3, r3
 8003566:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800356a:	b21a      	sxth	r2, r3
 800356c:	4b6c      	ldr	r3, [pc, #432]	; (8003720 <dbus_remote_ISR+0x1d4>)
 800356e:	801a      	strh	r2, [r3, #0]
	remote_cmd.right_x -= JOYSTICK_OFFSET;
 8003570:	4b6b      	ldr	r3, [pc, #428]	; (8003720 <dbus_remote_ISR+0x1d4>)
 8003572:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003576:	b29b      	uxth	r3, r3
 8003578:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800357c:	b29b      	uxth	r3, r3
 800357e:	b21a      	sxth	r2, r3
 8003580:	4b67      	ldr	r3, [pc, #412]	; (8003720 <dbus_remote_ISR+0x1d4>)
 8003582:	801a      	strh	r2, [r3, #0]
	remote_cmd.right_y = (remote_raw_data[1] >> 3 | remote_raw_data[2] << 5) & 0x07FF;
 8003584:	4b65      	ldr	r3, [pc, #404]	; (800371c <dbus_remote_ISR+0x1d0>)
 8003586:	785b      	ldrb	r3, [r3, #1]
 8003588:	08db      	lsrs	r3, r3, #3
 800358a:	b2db      	uxtb	r3, r3
 800358c:	b21a      	sxth	r2, r3
 800358e:	4b63      	ldr	r3, [pc, #396]	; (800371c <dbus_remote_ISR+0x1d0>)
 8003590:	789b      	ldrb	r3, [r3, #2]
 8003592:	015b      	lsls	r3, r3, #5
 8003594:	b21b      	sxth	r3, r3
 8003596:	4313      	orrs	r3, r2
 8003598:	b21b      	sxth	r3, r3
 800359a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800359e:	b21a      	sxth	r2, r3
 80035a0:	4b5f      	ldr	r3, [pc, #380]	; (8003720 <dbus_remote_ISR+0x1d4>)
 80035a2:	805a      	strh	r2, [r3, #2]
	remote_cmd.right_y -= JOYSTICK_OFFSET;
 80035a4:	4b5e      	ldr	r3, [pc, #376]	; (8003720 <dbus_remote_ISR+0x1d4>)
 80035a6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80035aa:	b29b      	uxth	r3, r3
 80035ac:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80035b0:	b29b      	uxth	r3, r3
 80035b2:	b21a      	sxth	r2, r3
 80035b4:	4b5a      	ldr	r3, [pc, #360]	; (8003720 <dbus_remote_ISR+0x1d4>)
 80035b6:	805a      	strh	r2, [r3, #2]
	remote_cmd.left_x = (remote_raw_data[2] >> 6 | remote_raw_data[3] << 2 | remote_raw_data[4] << 10) & 0x07FF;
 80035b8:	4b58      	ldr	r3, [pc, #352]	; (800371c <dbus_remote_ISR+0x1d0>)
 80035ba:	789b      	ldrb	r3, [r3, #2]
 80035bc:	099b      	lsrs	r3, r3, #6
 80035be:	b2db      	uxtb	r3, r3
 80035c0:	b21a      	sxth	r2, r3
 80035c2:	4b56      	ldr	r3, [pc, #344]	; (800371c <dbus_remote_ISR+0x1d0>)
 80035c4:	78db      	ldrb	r3, [r3, #3]
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	b21b      	sxth	r3, r3
 80035ca:	4313      	orrs	r3, r2
 80035cc:	b21a      	sxth	r2, r3
 80035ce:	4b53      	ldr	r3, [pc, #332]	; (800371c <dbus_remote_ISR+0x1d0>)
 80035d0:	791b      	ldrb	r3, [r3, #4]
 80035d2:	029b      	lsls	r3, r3, #10
 80035d4:	b21b      	sxth	r3, r3
 80035d6:	4313      	orrs	r3, r2
 80035d8:	b21b      	sxth	r3, r3
 80035da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80035de:	b21a      	sxth	r2, r3
 80035e0:	4b4f      	ldr	r3, [pc, #316]	; (8003720 <dbus_remote_ISR+0x1d4>)
 80035e2:	809a      	strh	r2, [r3, #4]
	remote_cmd.left_x -= JOYSTICK_OFFSET;
 80035e4:	4b4e      	ldr	r3, [pc, #312]	; (8003720 <dbus_remote_ISR+0x1d4>)
 80035e6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80035ea:	b29b      	uxth	r3, r3
 80035ec:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80035f0:	b29b      	uxth	r3, r3
 80035f2:	b21a      	sxth	r2, r3
 80035f4:	4b4a      	ldr	r3, [pc, #296]	; (8003720 <dbus_remote_ISR+0x1d4>)
 80035f6:	809a      	strh	r2, [r3, #4]
	remote_cmd.left_y = (remote_raw_data[4] >> 1 | remote_raw_data[5] << 7) & 0x07FF;
 80035f8:	4b48      	ldr	r3, [pc, #288]	; (800371c <dbus_remote_ISR+0x1d0>)
 80035fa:	791b      	ldrb	r3, [r3, #4]
 80035fc:	085b      	lsrs	r3, r3, #1
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	b21a      	sxth	r2, r3
 8003602:	4b46      	ldr	r3, [pc, #280]	; (800371c <dbus_remote_ISR+0x1d0>)
 8003604:	795b      	ldrb	r3, [r3, #5]
 8003606:	01db      	lsls	r3, r3, #7
 8003608:	b21b      	sxth	r3, r3
 800360a:	4313      	orrs	r3, r2
 800360c:	b21b      	sxth	r3, r3
 800360e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003612:	b21a      	sxth	r2, r3
 8003614:	4b42      	ldr	r3, [pc, #264]	; (8003720 <dbus_remote_ISR+0x1d4>)
 8003616:	80da      	strh	r2, [r3, #6]
	remote_cmd.left_y -= JOYSTICK_OFFSET;
 8003618:	4b41      	ldr	r3, [pc, #260]	; (8003720 <dbus_remote_ISR+0x1d4>)
 800361a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800361e:	b29b      	uxth	r3, r3
 8003620:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8003624:	b29b      	uxth	r3, r3
 8003626:	b21a      	sxth	r2, r3
 8003628:	4b3d      	ldr	r3, [pc, #244]	; (8003720 <dbus_remote_ISR+0x1d4>)
 800362a:	80da      	strh	r2, [r3, #6]
	//Left switch position
	remote_cmd.left_switch = ((remote_raw_data[5] >> 4) & 0x000C) >> 2;
 800362c:	4b3b      	ldr	r3, [pc, #236]	; (800371c <dbus_remote_ISR+0x1d0>)
 800362e:	795b      	ldrb	r3, [r3, #5]
 8003630:	091b      	lsrs	r3, r3, #4
 8003632:	b2db      	uxtb	r3, r3
 8003634:	109b      	asrs	r3, r3, #2
 8003636:	b25b      	sxtb	r3, r3
 8003638:	f003 0303 	and.w	r3, r3, #3
 800363c:	b25a      	sxtb	r2, r3
 800363e:	4b38      	ldr	r3, [pc, #224]	; (8003720 <dbus_remote_ISR+0x1d4>)
 8003640:	721a      	strb	r2, [r3, #8]
	remote_cmd.right_switch = (remote_raw_data[5] >> 4) & 0x0003;
 8003642:	4b36      	ldr	r3, [pc, #216]	; (800371c <dbus_remote_ISR+0x1d0>)
 8003644:	795b      	ldrb	r3, [r3, #5]
 8003646:	091b      	lsrs	r3, r3, #4
 8003648:	b2db      	uxtb	r3, r3
 800364a:	b25b      	sxtb	r3, r3
 800364c:	f003 0303 	and.w	r3, r3, #3
 8003650:	b25a      	sxtb	r2, r3
 8003652:	4b33      	ldr	r3, [pc, #204]	; (8003720 <dbus_remote_ISR+0x1d4>)
 8003654:	725a      	strb	r2, [r3, #9]
	remote_cmd.mouse_x = ((int16_t)remote_raw_data[6] | ((int16_t)remote_raw_data[7] << 8));
 8003656:	4b31      	ldr	r3, [pc, #196]	; (800371c <dbus_remote_ISR+0x1d0>)
 8003658:	799b      	ldrb	r3, [r3, #6]
 800365a:	b21a      	sxth	r2, r3
 800365c:	4b2f      	ldr	r3, [pc, #188]	; (800371c <dbus_remote_ISR+0x1d0>)
 800365e:	79db      	ldrb	r3, [r3, #7]
 8003660:	021b      	lsls	r3, r3, #8
 8003662:	b21b      	sxth	r3, r3
 8003664:	4313      	orrs	r3, r2
 8003666:	b21a      	sxth	r2, r3
 8003668:	4b2d      	ldr	r3, [pc, #180]	; (8003720 <dbus_remote_ISR+0x1d4>)
 800366a:	815a      	strh	r2, [r3, #10]
	remote_cmd.mouse_y = ((int16_t)remote_raw_data[8] | ((int16_t)remote_raw_data[9] << 8));
 800366c:	4b2b      	ldr	r3, [pc, #172]	; (800371c <dbus_remote_ISR+0x1d0>)
 800366e:	7a1b      	ldrb	r3, [r3, #8]
 8003670:	b21a      	sxth	r2, r3
 8003672:	4b2a      	ldr	r3, [pc, #168]	; (800371c <dbus_remote_ISR+0x1d0>)
 8003674:	7a5b      	ldrb	r3, [r3, #9]
 8003676:	021b      	lsls	r3, r3, #8
 8003678:	b21b      	sxth	r3, r3
 800367a:	4313      	orrs	r3, r2
 800367c:	b21a      	sxth	r2, r3
 800367e:	4b28      	ldr	r3, [pc, #160]	; (8003720 <dbus_remote_ISR+0x1d4>)
 8003680:	819a      	strh	r2, [r3, #12]
	remote_cmd.mouse_z = ((int16_t)remote_raw_data[10] | ((int16_t)remote_raw_data[11] << 8));
 8003682:	4b26      	ldr	r3, [pc, #152]	; (800371c <dbus_remote_ISR+0x1d0>)
 8003684:	7a9b      	ldrb	r3, [r3, #10]
 8003686:	b21a      	sxth	r2, r3
 8003688:	4b24      	ldr	r3, [pc, #144]	; (800371c <dbus_remote_ISR+0x1d0>)
 800368a:	7adb      	ldrb	r3, [r3, #11]
 800368c:	021b      	lsls	r3, r3, #8
 800368e:	b21b      	sxth	r3, r3
 8003690:	4313      	orrs	r3, r2
 8003692:	b21a      	sxth	r2, r3
 8003694:	4b22      	ldr	r3, [pc, #136]	; (8003720 <dbus_remote_ISR+0x1d4>)
 8003696:	81da      	strh	r2, [r3, #14]
	remote_cmd.mouse_left = (remote_raw_data[12]);
 8003698:	4b20      	ldr	r3, [pc, #128]	; (800371c <dbus_remote_ISR+0x1d0>)
 800369a:	7b1b      	ldrb	r3, [r3, #12]
 800369c:	b25a      	sxtb	r2, r3
 800369e:	4b20      	ldr	r3, [pc, #128]	; (8003720 <dbus_remote_ISR+0x1d4>)
 80036a0:	761a      	strb	r2, [r3, #24]
	remote_cmd.mouse_right = (remote_raw_data[13]);
 80036a2:	4b1e      	ldr	r3, [pc, #120]	; (800371c <dbus_remote_ISR+0x1d0>)
 80036a4:	7b5b      	ldrb	r3, [r3, #13]
 80036a6:	b25a      	sxtb	r2, r3
 80036a8:	4b1d      	ldr	r3, [pc, #116]	; (8003720 <dbus_remote_ISR+0x1d4>)
 80036aa:	765a      	strb	r2, [r3, #25]
	remote_cmd.keyboard_keys = (remote_raw_data[14]);
 80036ac:	4b1b      	ldr	r3, [pc, #108]	; (800371c <dbus_remote_ISR+0x1d0>)
 80036ae:	7b9b      	ldrb	r3, [r3, #14]
 80036b0:	b21a      	sxth	r2, r3
 80036b2:	4b1b      	ldr	r3, [pc, #108]	; (8003720 <dbus_remote_ISR+0x1d4>)
 80036b4:	835a      	strh	r2, [r3, #26]
	remote_cmd.last_time = HAL_GetTick();
 80036b6:	f000 f9d7 	bl	8003a68 <HAL_GetTick>
 80036ba:	4603      	mov	r3, r0
 80036bc:	4a18      	ldr	r2, [pc, #96]	; (8003720 <dbus_remote_ISR+0x1d4>)
 80036be:	61d3      	str	r3, [r2, #28]
	if(remote_cmd.keyboard_keys & KEY_OFFSET_Q && remote_cmd.keyboard_keys & KEY_OFFSET_SHIFT
 80036c0:	4b17      	ldr	r3, [pc, #92]	; (8003720 <dbus_remote_ISR+0x1d4>)
 80036c2:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 80036c6:	b29b      	uxth	r3, r3
 80036c8:	f003 0310 	and.w	r3, r3, #16
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d01a      	beq.n	8003706 <dbus_remote_ISR+0x1ba>
 80036d0:	4b13      	ldr	r3, [pc, #76]	; (8003720 <dbus_remote_ISR+0x1d4>)
 80036d2:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 80036d6:	b29b      	uxth	r3, r3
 80036d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d012      	beq.n	8003706 <dbus_remote_ISR+0x1ba>
			&& remote_cmd.keyboard_keys & KEY_OFFSET_CTRL)
 80036e0:	4b0f      	ldr	r3, [pc, #60]	; (8003720 <dbus_remote_ISR+0x1d4>)
 80036e2:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 80036e6:	b29b      	uxth	r3, r3
 80036e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d00a      	beq.n	8003706 <dbus_remote_ISR+0x1ba>
	{
		if (remote_control_mode == 1)
 80036f0:	4b0c      	ldr	r3, [pc, #48]	; (8003724 <dbus_remote_ISR+0x1d8>)
 80036f2:	781b      	ldrb	r3, [r3, #0]
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d103      	bne.n	8003700 <dbus_remote_ISR+0x1b4>
		{
			remote_control_mode = 0;
 80036f8:	4b0a      	ldr	r3, [pc, #40]	; (8003724 <dbus_remote_ISR+0x1d8>)
 80036fa:	2200      	movs	r2, #0
 80036fc:	701a      	strb	r2, [r3, #0]
 80036fe:	e002      	b.n	8003706 <dbus_remote_ISR+0x1ba>
		}
		else
		{
			remote_control_mode = 1;
 8003700:	4b08      	ldr	r3, [pc, #32]	; (8003724 <dbus_remote_ISR+0x1d8>)
 8003702:	2201      	movs	r2, #1
 8003704:	701a      	strb	r2, [r3, #0]
		}
	}
	osEventFlagsSet(rc_data_flag, 0x1000);
 8003706:	4b08      	ldr	r3, [pc, #32]	; (8003728 <dbus_remote_ISR+0x1dc>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800370e:	4618      	mov	r0, r3
 8003710:	f004 fc44 	bl	8007f9c <osEventFlagsSet>
}
 8003714:	bf00      	nop
 8003716:	3708      	adds	r7, #8
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}
 800371c:	20000034 	.word	0x20000034
 8003720:	20004eb8 	.word	0x20004eb8
 8003724:	20004ed8 	.word	0x20004ed8
 8003728:	20009838 	.word	0x20009838

0800372c <dbus_reset>:

void dbus_reset()
{
 800372c:	b580      	push	{r7, lr}
 800372e:	af00      	add	r7, sp, #0
	HAL_UART_DMAPause(&huart1);
 8003730:	4818      	ldr	r0, [pc, #96]	; (8003794 <dbus_reset+0x68>)
 8003732:	f003 fb67 	bl	8006e04 <HAL_UART_DMAPause>
	remote_cmd.right_x = 0;
 8003736:	4b18      	ldr	r3, [pc, #96]	; (8003798 <dbus_reset+0x6c>)
 8003738:	2200      	movs	r2, #0
 800373a:	801a      	strh	r2, [r3, #0]
	remote_cmd.right_y = 0;
 800373c:	4b16      	ldr	r3, [pc, #88]	; (8003798 <dbus_reset+0x6c>)
 800373e:	2200      	movs	r2, #0
 8003740:	805a      	strh	r2, [r3, #2]
	remote_cmd.left_x = 0;
 8003742:	4b15      	ldr	r3, [pc, #84]	; (8003798 <dbus_reset+0x6c>)
 8003744:	2200      	movs	r2, #0
 8003746:	809a      	strh	r2, [r3, #4]
	remote_cmd.left_y = 0;
 8003748:	4b13      	ldr	r3, [pc, #76]	; (8003798 <dbus_reset+0x6c>)
 800374a:	2200      	movs	r2, #0
 800374c:	80da      	strh	r2, [r3, #6]
	remote_cmd.left_switch = 0;
 800374e:	4b12      	ldr	r3, [pc, #72]	; (8003798 <dbus_reset+0x6c>)
 8003750:	2200      	movs	r2, #0
 8003752:	721a      	strb	r2, [r3, #8]
	remote_cmd.mouse_x = 0;
 8003754:	4b10      	ldr	r3, [pc, #64]	; (8003798 <dbus_reset+0x6c>)
 8003756:	2200      	movs	r2, #0
 8003758:	815a      	strh	r2, [r3, #10]
	remote_cmd.mouse_y = 0;
 800375a:	4b0f      	ldr	r3, [pc, #60]	; (8003798 <dbus_reset+0x6c>)
 800375c:	2200      	movs	r2, #0
 800375e:	819a      	strh	r2, [r3, #12]
	remote_cmd.mouse_z = 0;
 8003760:	4b0d      	ldr	r3, [pc, #52]	; (8003798 <dbus_reset+0x6c>)
 8003762:	2200      	movs	r2, #0
 8003764:	81da      	strh	r2, [r3, #14]
	remote_cmd.mouse_left = (remote_raw_data[12]);
 8003766:	4b0d      	ldr	r3, [pc, #52]	; (800379c <dbus_reset+0x70>)
 8003768:	7b1b      	ldrb	r3, [r3, #12]
 800376a:	b25a      	sxtb	r2, r3
 800376c:	4b0a      	ldr	r3, [pc, #40]	; (8003798 <dbus_reset+0x6c>)
 800376e:	761a      	strb	r2, [r3, #24]
	remote_cmd.mouse_right = (remote_raw_data[13]);
 8003770:	4b0a      	ldr	r3, [pc, #40]	; (800379c <dbus_reset+0x70>)
 8003772:	7b5b      	ldrb	r3, [r3, #13]
 8003774:	b25a      	sxtb	r2, r3
 8003776:	4b08      	ldr	r3, [pc, #32]	; (8003798 <dbus_reset+0x6c>)
 8003778:	765a      	strb	r2, [r3, #25]
	pitch = 0;
 800377a:	4b09      	ldr	r3, [pc, #36]	; (80037a0 <dbus_reset+0x74>)
 800377c:	f04f 0200 	mov.w	r2, #0
 8003780:	601a      	str	r2, [r3, #0]
	yaw = 0;
 8003782:	4b08      	ldr	r3, [pc, #32]	; (80037a4 <dbus_reset+0x78>)
 8003784:	f04f 0200 	mov.w	r2, #0
 8003788:	601a      	str	r2, [r3, #0]
	HAL_UART_DMAResume(&huart1);
 800378a:	4802      	ldr	r0, [pc, #8]	; (8003794 <dbus_reset+0x68>)
 800378c:	f003 fb9e 	bl	8006ecc <HAL_UART_DMAResume>
}
 8003790:	bf00      	nop
 8003792:	bd80      	pop	{r7, pc}
 8003794:	20009ba4 	.word	0x20009ba4
 8003798:	20004eb8 	.word	0x20004eb8
 800379c:	20000034 	.word	0x20000034
 80037a0:	20004e70 	.word	0x20004e70
 80037a4:	20004e74 	.word	0x20004e74

080037a8 <startup_task>:
extern float pitch;
extern float yaw;


void startup_task()
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b082      	sub	sp, #8
 80037ac:	af00      	add	r7, sp, #0
	led_on();
 80037ae:	f7fd fc85 	bl	80010bc <led_on>
	//general init
	can_start(&hcan1);
 80037b2:	4862      	ldr	r0, [pc, #392]	; (800393c <startup_task+0x194>)
 80037b4:	f7fd fbb2 	bl	8000f1c <can_start>
	can_start(&hcan2);
 80037b8:	4861      	ldr	r0, [pc, #388]	; (8003940 <startup_task+0x198>)
 80037ba:	f7fd fbaf 	bl	8000f1c <can_start>
	buzzer_init();
 80037be:	f7fd fb83 	bl	8000ec8 <buzzer_init>
	dbus_remote_start(remote_raw_data);
 80037c2:	4860      	ldr	r0, [pc, #384]	; (8003944 <startup_task+0x19c>)
 80037c4:	f7fd fbec 	bl	8000fa0 <dbus_remote_start>
	HAL_Delay(STARTUP_DELAY);
 80037c8:	2064      	movs	r0, #100	; 0x64
 80037ca:	f000 f959 	bl	8003a80 <HAL_Delay>
	led_green_off();
 80037ce:	f7fd fc69 	bl	80010a4 <led_green_off>

	//PID values
	canone_data.CHASSIS.pid.max_out = CHASSIS_MAX_CURRENT;
 80037d2:	4b5d      	ldr	r3, [pc, #372]	; (8003948 <startup_task+0x1a0>)
 80037d4:	f643 4218 	movw	r2, #15384	; 0x3c18
 80037d8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	canone_data.CHASSIS.pid.min_out = CHASSIS_MIN_CURRENT;
 80037dc:	4b5a      	ldr	r3, [pc, #360]	; (8003948 <startup_task+0x1a0>)
 80037de:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80037e2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
	canone_data.CHASSIS.pid.kp = CHASSIS_KP;
 80037e6:	4b58      	ldr	r3, [pc, #352]	; (8003948 <startup_task+0x1a0>)
 80037e8:	4a58      	ldr	r2, [pc, #352]	; (800394c <startup_task+0x1a4>)
 80037ea:	611a      	str	r2, [r3, #16]
	canone_data.CHASSIS.pid.ki = CHASSIS_KI;
 80037ec:	4b56      	ldr	r3, [pc, #344]	; (8003948 <startup_task+0x1a0>)
 80037ee:	f04f 0200 	mov.w	r2, #0
 80037f2:	615a      	str	r2, [r3, #20]
	canone_data.CHASSIS.pid.kd = CHASSIS_KD;
 80037f4:	4b54      	ldr	r3, [pc, #336]	; (8003948 <startup_task+0x1a0>)
 80037f6:	4a56      	ldr	r2, [pc, #344]	; (8003950 <startup_task+0x1a8>)
 80037f8:	619a      	str	r2, [r3, #24]

	for (uint8_t i = 0; i < 2; i++){
 80037fa:	2300      	movs	r3, #0
 80037fc:	71fb      	strb	r3, [r7, #7]
 80037fe:	e031      	b.n	8003864 <startup_task+0xbc>
		canone_data.FEEDER[i].pid.max_out = FRICTION_MAX_CURRENT;
 8003800:	79fb      	ldrb	r3, [r7, #7]
 8003802:	4a51      	ldr	r2, [pc, #324]	; (8003948 <startup_task+0x1a0>)
 8003804:	2168      	movs	r1, #104	; 0x68
 8003806:	fb01 f303 	mul.w	r3, r1, r3
 800380a:	4413      	add	r3, r2
 800380c:	33c8      	adds	r3, #200	; 0xc8
 800380e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003812:	801a      	strh	r2, [r3, #0]
		canone_data.FEEDER[i].pid.min_out = 0;
 8003814:	79fb      	ldrb	r3, [r7, #7]
 8003816:	4a4c      	ldr	r2, [pc, #304]	; (8003948 <startup_task+0x1a0>)
 8003818:	2168      	movs	r1, #104	; 0x68
 800381a:	fb01 f303 	mul.w	r3, r1, r3
 800381e:	4413      	add	r3, r2
 8003820:	33ca      	adds	r3, #202	; 0xca
 8003822:	2200      	movs	r2, #0
 8003824:	801a      	strh	r2, [r3, #0]
		canone_data.FEEDER[i].pid.kp 	= FRICTION_KP;
 8003826:	79fb      	ldrb	r3, [r7, #7]
 8003828:	4a47      	ldr	r2, [pc, #284]	; (8003948 <startup_task+0x1a0>)
 800382a:	2168      	movs	r1, #104	; 0x68
 800382c:	fb01 f303 	mul.w	r3, r1, r3
 8003830:	4413      	add	r3, r2
 8003832:	3378      	adds	r3, #120	; 0x78
 8003834:	4a45      	ldr	r2, [pc, #276]	; (800394c <startup_task+0x1a4>)
 8003836:	601a      	str	r2, [r3, #0]
		canone_data.FEEDER[i].pid.ki 	= FRICTION_KI;
 8003838:	79fb      	ldrb	r3, [r7, #7]
 800383a:	4a43      	ldr	r2, [pc, #268]	; (8003948 <startup_task+0x1a0>)
 800383c:	2168      	movs	r1, #104	; 0x68
 800383e:	fb01 f303 	mul.w	r3, r1, r3
 8003842:	4413      	add	r3, r2
 8003844:	337c      	adds	r3, #124	; 0x7c
 8003846:	f04f 0200 	mov.w	r2, #0
 800384a:	601a      	str	r2, [r3, #0]
		canone_data.FEEDER[i].pid.kd 	= FRICTION_KD;
 800384c:	79fb      	ldrb	r3, [r7, #7]
 800384e:	4a3e      	ldr	r2, [pc, #248]	; (8003948 <startup_task+0x1a0>)
 8003850:	2168      	movs	r1, #104	; 0x68
 8003852:	fb01 f303 	mul.w	r3, r1, r3
 8003856:	4413      	add	r3, r2
 8003858:	3380      	adds	r3, #128	; 0x80
 800385a:	4a3d      	ldr	r2, [pc, #244]	; (8003950 <startup_task+0x1a8>)
 800385c:	601a      	str	r2, [r3, #0]
	for (uint8_t i = 0; i < 2; i++){
 800385e:	79fb      	ldrb	r3, [r7, #7]
 8003860:	3301      	adds	r3, #1
 8003862:	71fb      	strb	r3, [r7, #7]
 8003864:	79fb      	ldrb	r3, [r7, #7]
 8003866:	2b01      	cmp	r3, #1
 8003868:	d9ca      	bls.n	8003800 <startup_task+0x58>
	}


	//gimbal PID input
	canone_data.pitch.pid.max_out		= PITCH_MAX_CURRENT;
 800386a:	4b37      	ldr	r3, [pc, #220]	; (8003948 <startup_task+0x1a0>)
 800386c:	f644 6220 	movw	r2, #20000	; 0x4e20
 8003870:	f8a3 21b0 	strh.w	r2, [r3, #432]	; 0x1b0
	canone_data.pitch.pid.kp 			= PITCH_KP;
 8003874:	4b34      	ldr	r3, [pc, #208]	; (8003948 <startup_task+0x1a0>)
 8003876:	4a35      	ldr	r2, [pc, #212]	; (800394c <startup_task+0x1a4>)
 8003878:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
	canone_data.pitch.pid.kd			= PITCH_KD;
 800387c:	4b32      	ldr	r3, [pc, #200]	; (8003948 <startup_task+0x1a0>)
 800387e:	4a34      	ldr	r2, [pc, #208]	; (8003950 <startup_task+0x1a8>)
 8003880:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
	canone_data.pitch.pid.ki			= PITCH_KI;
 8003884:	4b30      	ldr	r3, [pc, #192]	; (8003948 <startup_task+0x1a0>)
 8003886:	f04f 0200 	mov.w	r2, #0
 800388a:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
	canone_data.pitch.motor_max_deflection = GM6020_MAX_DEFLECTION;
 800388e:	4b2e      	ldr	r3, [pc, #184]	; (8003948 <startup_task+0x1a0>)
 8003890:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003894:	f8a3 214c 	strh.w	r2, [r3, #332]	; 0x14c
	canone_data.pitch.calib 		= 1;
 8003898:	4b2b      	ldr	r3, [pc, #172]	; (8003948 <startup_task+0x1a0>)
 800389a:	2201      	movs	r2, #1
 800389c:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158
	canone_data.pitch.rpm_max 		= PITCH_MAX_RPM;
 80038a0:	4b29      	ldr	r3, [pc, #164]	; (8003948 <startup_task+0x1a0>)
 80038a2:	2278      	movs	r2, #120	; 0x78
 80038a4:	f8a3 215a 	strh.w	r2, [r3, #346]	; 0x15a
	canone_data.pitch.center_ang 	= PITCH_CENTER;
 80038a8:	4b27      	ldr	r3, [pc, #156]	; (8003948 <startup_task+0x1a0>)
 80038aa:	f641 12c8 	movw	r2, #6600	; 0x19c8
 80038ae:	f8a3 214a 	strh.w	r2, [r3, #330]	; 0x14a
	canone_data.pitch.max_ang 		= PITCH_MAX_ANGLE;
 80038b2:	4b25      	ldr	r3, [pc, #148]	; (8003948 <startup_task+0x1a0>)
 80038b4:	4a27      	ldr	r2, [pc, #156]	; (8003954 <startup_task+0x1ac>)
 80038b6:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
	canone_data.pitch.min_ang		= PITCH_MIN_ANGLE;
 80038ba:	4b23      	ldr	r3, [pc, #140]	; (8003948 <startup_task+0x1a0>)
 80038bc:	4a26      	ldr	r2, [pc, #152]	; (8003958 <startup_task+0x1b0>)
 80038be:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154

	canone_data.yaw.pid.max_out			= YAW_MAX_CURRENT;
 80038c2:	4b21      	ldr	r3, [pc, #132]	; (8003948 <startup_task+0x1a0>)
 80038c4:	f644 6220 	movw	r2, #20000	; 0x4e20
 80038c8:	f8a3 2230 	strh.w	r2, [r3, #560]	; 0x230
	canone_data.yaw.pid.kp 				= YAW_KP;
 80038cc:	4b1e      	ldr	r3, [pc, #120]	; (8003948 <startup_task+0x1a0>)
 80038ce:	4a23      	ldr	r2, [pc, #140]	; (800395c <startup_task+0x1b4>)
 80038d0:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
	canone_data.yaw.pid.kd				= YAW_KD;
 80038d4:	4b1c      	ldr	r3, [pc, #112]	; (8003948 <startup_task+0x1a0>)
 80038d6:	4a22      	ldr	r2, [pc, #136]	; (8003960 <startup_task+0x1b8>)
 80038d8:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8
	canone_data.yaw.pid.ki				= YAW_KI;
 80038dc:	4b1a      	ldr	r3, [pc, #104]	; (8003948 <startup_task+0x1a0>)
 80038de:	4a1b      	ldr	r2, [pc, #108]	; (800394c <startup_task+0x1a4>)
 80038e0:	f8c3 21e4 	str.w	r2, [r3, #484]	; 0x1e4
	canone_data.yaw.motor_max_deflection = GM6020_MAX_DEFLECTION;
 80038e4:	4b18      	ldr	r3, [pc, #96]	; (8003948 <startup_task+0x1a0>)
 80038e6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80038ea:	f8a3 21cc 	strh.w	r2, [r3, #460]	; 0x1cc
	canone_data.yaw.center_ang		= YAW_CENTER;
 80038ee:	4b16      	ldr	r3, [pc, #88]	; (8003948 <startup_task+0x1a0>)
 80038f0:	f641 729f 	movw	r2, #8095	; 0x1f9f
 80038f4:	f8a3 21ca 	strh.w	r2, [r3, #458]	; 0x1ca
	canone_data.yaw.calib 			= 1;
 80038f8:	4b13      	ldr	r3, [pc, #76]	; (8003948 <startup_task+0x1a0>)
 80038fa:	2201      	movs	r2, #1
 80038fc:	f883 21d8 	strb.w	r2, [r3, #472]	; 0x1d8
	canone_data.yaw.rpm_max 		= YAW_MAX_RPM;
 8003900:	4b11      	ldr	r3, [pc, #68]	; (8003948 <startup_task+0x1a0>)
 8003902:	2278      	movs	r2, #120	; 0x78
 8003904:	f8a3 21da 	strh.w	r2, [r3, #474]	; 0x1da
	canone_data.yaw.max_ang 		= 0.8;
 8003908:	4b0f      	ldr	r3, [pc, #60]	; (8003948 <startup_task+0x1a0>)
 800390a:	4a16      	ldr	r2, [pc, #88]	; (8003964 <startup_task+0x1bc>)
 800390c:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
	canone_data.yaw.min_ang 		= -0.8;
 8003910:	4b0d      	ldr	r3, [pc, #52]	; (8003948 <startup_task+0x1a0>)
 8003912:	4a15      	ldr	r2, [pc, #84]	; (8003968 <startup_task+0x1c0>)
 8003914:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
			err_buzzer(1,9);
		}
		*/
	}

	pitch = 0;
 8003918:	4b14      	ldr	r3, [pc, #80]	; (800396c <startup_task+0x1c4>)
 800391a:	f04f 0200 	mov.w	r2, #0
 800391e:	601a      	str	r2, [r3, #0]
	yaw	  = 0;
 8003920:	4b13      	ldr	r3, [pc, #76]	; (8003970 <startup_task+0x1c8>)
 8003922:	f04f 0200 	mov.w	r2, #0
 8003926:	601a      	str	r2, [r3, #0]
	ok_buzzer(1,1);
 8003928:	2101      	movs	r1, #1
 800392a:	2001      	movs	r0, #1
 800392c:	f000 f822 	bl	8003974 <ok_buzzer>
	led_toggle();
 8003930:	f7fd fbd8 	bl	80010e4 <led_toggle>

}
 8003934:	bf00      	nop
 8003936:	3708      	adds	r7, #8
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}
 800393c:	2000980c 	.word	0x2000980c
 8003940:	200097e4 	.word	0x200097e4
 8003944:	20000034 	.word	0x20000034
 8003948:	20009c28 	.word	0x20009c28
 800394c:	3dcccccd 	.word	0x3dcccccd
 8003950:	41200000 	.word	0x41200000
 8003954:	3eb33333 	.word	0x3eb33333
 8003958:	be8a3d71 	.word	0xbe8a3d71
 800395c:	3e99999a 	.word	0x3e99999a
 8003960:	43160000 	.word	0x43160000
 8003964:	3f4ccccd 	.word	0x3f4ccccd
 8003968:	bf4ccccd 	.word	0xbf4ccccd
 800396c:	20004e70 	.word	0x20004e70
 8003970:	20004e74 	.word	0x20004e74

08003974 <ok_buzzer>:
		buzzer(0);
		HAL_Delay(BUZZER_DELAY);
	}
}

void ok_buzzer(uint8_t high, uint8_t low){
 8003974:	b580      	push	{r7, lr}
 8003976:	b084      	sub	sp, #16
 8003978:	af00      	add	r7, sp, #0
 800397a:	4603      	mov	r3, r0
 800397c:	460a      	mov	r2, r1
 800397e:	71fb      	strb	r3, [r7, #7]
 8003980:	4613      	mov	r3, r2
 8003982:	71bb      	strb	r3, [r7, #6]
	for (int8_t i = 0; i < high; i ++)
 8003984:	2300      	movs	r3, #0
 8003986:	73fb      	strb	r3, [r7, #15]
 8003988:	e012      	b.n	80039b0 <ok_buzzer+0x3c>
	{
		//PWM
		buzzer(HIGH_FREQ);
 800398a:	f44f 705c 	mov.w	r0, #880	; 0x370
 800398e:	f7fd fa79 	bl	8000e84 <buzzer>
		HAL_Delay(BUZZER_DELAY);
 8003992:	2064      	movs	r0, #100	; 0x64
 8003994:	f000 f874 	bl	8003a80 <HAL_Delay>
		buzzer(0);
 8003998:	2000      	movs	r0, #0
 800399a:	f7fd fa73 	bl	8000e84 <buzzer>
		HAL_Delay(BUZZER_DELAY);
 800399e:	2064      	movs	r0, #100	; 0x64
 80039a0:	f000 f86e 	bl	8003a80 <HAL_Delay>
	for (int8_t i = 0; i < high; i ++)
 80039a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	3301      	adds	r3, #1
 80039ac:	b2db      	uxtb	r3, r3
 80039ae:	73fb      	strb	r3, [r7, #15]
 80039b0:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80039b4:	79fb      	ldrb	r3, [r7, #7]
 80039b6:	429a      	cmp	r2, r3
 80039b8:	dbe7      	blt.n	800398a <ok_buzzer+0x16>
	}
	for (int8_t i = 0; i < low; i ++)
 80039ba:	2300      	movs	r3, #0
 80039bc:	73bb      	strb	r3, [r7, #14]
 80039be:	e012      	b.n	80039e6 <ok_buzzer+0x72>
	{
		buzzer(LOW_FREQ);
 80039c0:	f44f 70dc 	mov.w	r0, #440	; 0x1b8
 80039c4:	f7fd fa5e 	bl	8000e84 <buzzer>
		HAL_Delay(BUZZER_DELAY);
 80039c8:	2064      	movs	r0, #100	; 0x64
 80039ca:	f000 f859 	bl	8003a80 <HAL_Delay>
		buzzer(0);
 80039ce:	2000      	movs	r0, #0
 80039d0:	f7fd fa58 	bl	8000e84 <buzzer>
		HAL_Delay(BUZZER_DELAY);
 80039d4:	2064      	movs	r0, #100	; 0x64
 80039d6:	f000 f853 	bl	8003a80 <HAL_Delay>
	for (int8_t i = 0; i < low; i ++)
 80039da:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80039de:	b2db      	uxtb	r3, r3
 80039e0:	3301      	adds	r3, #1
 80039e2:	b2db      	uxtb	r3, r3
 80039e4:	73bb      	strb	r3, [r7, #14]
 80039e6:	f997 200e 	ldrsb.w	r2, [r7, #14]
 80039ea:	79bb      	ldrb	r3, [r7, #6]
 80039ec:	429a      	cmp	r2, r3
 80039ee:	dbe7      	blt.n	80039c0 <ok_buzzer+0x4c>
	}
}
 80039f0:	bf00      	nop
 80039f2:	bf00      	nop
 80039f4:	3710      	adds	r7, #16
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}
	...

080039fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003a00:	4b0e      	ldr	r3, [pc, #56]	; (8003a3c <HAL_Init+0x40>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a0d      	ldr	r2, [pc, #52]	; (8003a3c <HAL_Init+0x40>)
 8003a06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003a0a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003a0c:	4b0b      	ldr	r3, [pc, #44]	; (8003a3c <HAL_Init+0x40>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a0a      	ldr	r2, [pc, #40]	; (8003a3c <HAL_Init+0x40>)
 8003a12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003a16:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003a18:	4b08      	ldr	r3, [pc, #32]	; (8003a3c <HAL_Init+0x40>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a07      	ldr	r2, [pc, #28]	; (8003a3c <HAL_Init+0x40>)
 8003a1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a22:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a24:	2003      	movs	r0, #3
 8003a26:	f000 ff86 	bl	8004936 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003a2a:	2000      	movs	r0, #0
 8003a2c:	f7fe f83a 	bl	8001aa4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003a30:	f7fd ffee 	bl	8001a10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003a34:	2300      	movs	r3, #0
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	bd80      	pop	{r7, pc}
 8003a3a:	bf00      	nop
 8003a3c:	40023c00 	.word	0x40023c00

08003a40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003a40:	b480      	push	{r7}
 8003a42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003a44:	4b06      	ldr	r3, [pc, #24]	; (8003a60 <HAL_IncTick+0x20>)
 8003a46:	781b      	ldrb	r3, [r3, #0]
 8003a48:	461a      	mov	r2, r3
 8003a4a:	4b06      	ldr	r3, [pc, #24]	; (8003a64 <HAL_IncTick+0x24>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4413      	add	r3, r2
 8003a50:	4a04      	ldr	r2, [pc, #16]	; (8003a64 <HAL_IncTick+0x24>)
 8003a52:	6013      	str	r3, [r2, #0]
}
 8003a54:	bf00      	nop
 8003a56:	46bd      	mov	sp, r7
 8003a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5c:	4770      	bx	lr
 8003a5e:	bf00      	nop
 8003a60:	20000010 	.word	0x20000010
 8003a64:	20009e6c 	.word	0x20009e6c

08003a68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	af00      	add	r7, sp, #0
  return uwTick;
 8003a6c:	4b03      	ldr	r3, [pc, #12]	; (8003a7c <HAL_GetTick+0x14>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	46bd      	mov	sp, r7
 8003a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a78:	4770      	bx	lr
 8003a7a:	bf00      	nop
 8003a7c:	20009e6c 	.word	0x20009e6c

08003a80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b084      	sub	sp, #16
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003a88:	f7ff ffee 	bl	8003a68 <HAL_GetTick>
 8003a8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a98:	d005      	beq.n	8003aa6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003a9a:	4b0a      	ldr	r3, [pc, #40]	; (8003ac4 <HAL_Delay+0x44>)
 8003a9c:	781b      	ldrb	r3, [r3, #0]
 8003a9e:	461a      	mov	r2, r3
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	4413      	add	r3, r2
 8003aa4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003aa6:	bf00      	nop
 8003aa8:	f7ff ffde 	bl	8003a68 <HAL_GetTick>
 8003aac:	4602      	mov	r2, r0
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	1ad3      	subs	r3, r2, r3
 8003ab2:	68fa      	ldr	r2, [r7, #12]
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	d8f7      	bhi.n	8003aa8 <HAL_Delay+0x28>
  {
  }
}
 8003ab8:	bf00      	nop
 8003aba:	bf00      	nop
 8003abc:	3710      	adds	r7, #16
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}
 8003ac2:	bf00      	nop
 8003ac4:	20000010 	.word	0x20000010

08003ac8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b084      	sub	sp, #16
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d101      	bne.n	8003ada <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e0ed      	b.n	8003cb6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d102      	bne.n	8003aec <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	f7fd fb86 	bl	80011f8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	681a      	ldr	r2, [r3, #0]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f022 0202 	bic.w	r2, r2, #2
 8003afa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003afc:	f7ff ffb4 	bl	8003a68 <HAL_GetTick>
 8003b00:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003b02:	e012      	b.n	8003b2a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003b04:	f7ff ffb0 	bl	8003a68 <HAL_GetTick>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	1ad3      	subs	r3, r2, r3
 8003b0e:	2b0a      	cmp	r3, #10
 8003b10:	d90b      	bls.n	8003b2a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b16:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2205      	movs	r2, #5
 8003b22:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e0c5      	b.n	8003cb6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	f003 0302 	and.w	r3, r3, #2
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d1e5      	bne.n	8003b04 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	681a      	ldr	r2, [r3, #0]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f042 0201 	orr.w	r2, r2, #1
 8003b46:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b48:	f7ff ff8e 	bl	8003a68 <HAL_GetTick>
 8003b4c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003b4e:	e012      	b.n	8003b76 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003b50:	f7ff ff8a 	bl	8003a68 <HAL_GetTick>
 8003b54:	4602      	mov	r2, r0
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	1ad3      	subs	r3, r2, r3
 8003b5a:	2b0a      	cmp	r3, #10
 8003b5c:	d90b      	bls.n	8003b76 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b62:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2205      	movs	r2, #5
 8003b6e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	e09f      	b.n	8003cb6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	f003 0301 	and.w	r3, r3, #1
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d0e5      	beq.n	8003b50 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	7e1b      	ldrb	r3, [r3, #24]
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	d108      	bne.n	8003b9e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003b9a:	601a      	str	r2, [r3, #0]
 8003b9c:	e007      	b.n	8003bae <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003bac:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	7e5b      	ldrb	r3, [r3, #25]
 8003bb2:	2b01      	cmp	r3, #1
 8003bb4:	d108      	bne.n	8003bc8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003bc4:	601a      	str	r2, [r3, #0]
 8003bc6:	e007      	b.n	8003bd8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bd6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	7e9b      	ldrb	r3, [r3, #26]
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d108      	bne.n	8003bf2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f042 0220 	orr.w	r2, r2, #32
 8003bee:	601a      	str	r2, [r3, #0]
 8003bf0:	e007      	b.n	8003c02 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	681a      	ldr	r2, [r3, #0]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f022 0220 	bic.w	r2, r2, #32
 8003c00:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	7edb      	ldrb	r3, [r3, #27]
 8003c06:	2b01      	cmp	r3, #1
 8003c08:	d108      	bne.n	8003c1c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	681a      	ldr	r2, [r3, #0]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f022 0210 	bic.w	r2, r2, #16
 8003c18:	601a      	str	r2, [r3, #0]
 8003c1a:	e007      	b.n	8003c2c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f042 0210 	orr.w	r2, r2, #16
 8003c2a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	7f1b      	ldrb	r3, [r3, #28]
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	d108      	bne.n	8003c46 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f042 0208 	orr.w	r2, r2, #8
 8003c42:	601a      	str	r2, [r3, #0]
 8003c44:	e007      	b.n	8003c56 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f022 0208 	bic.w	r2, r2, #8
 8003c54:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	7f5b      	ldrb	r3, [r3, #29]
 8003c5a:	2b01      	cmp	r3, #1
 8003c5c:	d108      	bne.n	8003c70 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f042 0204 	orr.w	r2, r2, #4
 8003c6c:	601a      	str	r2, [r3, #0]
 8003c6e:	e007      	b.n	8003c80 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f022 0204 	bic.w	r2, r2, #4
 8003c7e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	689a      	ldr	r2, [r3, #8]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	68db      	ldr	r3, [r3, #12]
 8003c88:	431a      	orrs	r2, r3
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	691b      	ldr	r3, [r3, #16]
 8003c8e:	431a      	orrs	r2, r3
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	695b      	ldr	r3, [r3, #20]
 8003c94:	ea42 0103 	orr.w	r1, r2, r3
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	1e5a      	subs	r2, r3, #1
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	430a      	orrs	r2, r1
 8003ca4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2201      	movs	r2, #1
 8003cb0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003cb4:	2300      	movs	r3, #0
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	3710      	adds	r7, #16
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}
	...

08003cc0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b087      	sub	sp, #28
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
 8003cc8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003cd6:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8003cd8:	7cfb      	ldrb	r3, [r7, #19]
 8003cda:	2b01      	cmp	r3, #1
 8003cdc:	d003      	beq.n	8003ce6 <HAL_CAN_ConfigFilter+0x26>
 8003cde:	7cfb      	ldrb	r3, [r7, #19]
 8003ce0:	2b02      	cmp	r3, #2
 8003ce2:	f040 80be 	bne.w	8003e62 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8003ce6:	4b65      	ldr	r3, [pc, #404]	; (8003e7c <HAL_CAN_ConfigFilter+0x1bc>)
 8003ce8:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003cf0:	f043 0201 	orr.w	r2, r3, #1
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003d00:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d14:	021b      	lsls	r3, r3, #8
 8003d16:	431a      	orrs	r2, r3
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	695b      	ldr	r3, [r3, #20]
 8003d22:	f003 031f 	and.w	r3, r3, #31
 8003d26:	2201      	movs	r2, #1
 8003d28:	fa02 f303 	lsl.w	r3, r2, r3
 8003d2c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	43db      	mvns	r3, r3
 8003d38:	401a      	ands	r2, r3
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	69db      	ldr	r3, [r3, #28]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d123      	bne.n	8003d90 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	43db      	mvns	r3, r3
 8003d52:	401a      	ands	r2, r3
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	68db      	ldr	r3, [r3, #12]
 8003d5e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003d66:	683a      	ldr	r2, [r7, #0]
 8003d68:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003d6a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	3248      	adds	r2, #72	; 0x48
 8003d70:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003d84:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003d86:	6979      	ldr	r1, [r7, #20]
 8003d88:	3348      	adds	r3, #72	; 0x48
 8003d8a:	00db      	lsls	r3, r3, #3
 8003d8c:	440b      	add	r3, r1
 8003d8e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	69db      	ldr	r3, [r3, #28]
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	d122      	bne.n	8003dde <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	431a      	orrs	r2, r3
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003db4:	683a      	ldr	r2, [r7, #0]
 8003db6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003db8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	3248      	adds	r2, #72	; 0x48
 8003dbe:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	68db      	ldr	r3, [r3, #12]
 8003dcc:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003dd2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003dd4:	6979      	ldr	r1, [r7, #20]
 8003dd6:	3348      	adds	r3, #72	; 0x48
 8003dd8:	00db      	lsls	r3, r3, #3
 8003dda:	440b      	add	r3, r1
 8003ddc:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	699b      	ldr	r3, [r3, #24]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d109      	bne.n	8003dfa <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	43db      	mvns	r3, r3
 8003df0:	401a      	ands	r2, r3
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003df8:	e007      	b.n	8003e0a <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	431a      	orrs	r2, r3
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	691b      	ldr	r3, [r3, #16]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d109      	bne.n	8003e26 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	43db      	mvns	r3, r3
 8003e1c:	401a      	ands	r2, r3
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8003e24:	e007      	b.n	8003e36 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	431a      	orrs	r2, r3
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	6a1b      	ldr	r3, [r3, #32]
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	d107      	bne.n	8003e4e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	431a      	orrs	r2, r3
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003e54:	f023 0201 	bic.w	r2, r3, #1
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	e006      	b.n	8003e70 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e66:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
  }
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	371c      	adds	r7, #28
 8003e74:	46bd      	mov	sp, r7
 8003e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7a:	4770      	bx	lr
 8003e7c:	40006400 	.word	0x40006400

08003e80 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b084      	sub	sp, #16
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e8e:	b2db      	uxtb	r3, r3
 8003e90:	2b01      	cmp	r3, #1
 8003e92:	d12e      	bne.n	8003ef2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2202      	movs	r2, #2
 8003e98:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f022 0201 	bic.w	r2, r2, #1
 8003eaa:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003eac:	f7ff fddc 	bl	8003a68 <HAL_GetTick>
 8003eb0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003eb2:	e012      	b.n	8003eda <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003eb4:	f7ff fdd8 	bl	8003a68 <HAL_GetTick>
 8003eb8:	4602      	mov	r2, r0
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	1ad3      	subs	r3, r2, r3
 8003ebe:	2b0a      	cmp	r3, #10
 8003ec0:	d90b      	bls.n	8003eda <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2205      	movs	r2, #5
 8003ed2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e012      	b.n	8003f00 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	f003 0301 	and.w	r3, r3, #1
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d1e5      	bne.n	8003eb4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2200      	movs	r2, #0
 8003eec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	e006      	b.n	8003f00 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
  }
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	3710      	adds	r7, #16
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}

08003f08 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b089      	sub	sp, #36	; 0x24
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	60f8      	str	r0, [r7, #12]
 8003f10:	60b9      	str	r1, [r7, #8]
 8003f12:	607a      	str	r2, [r7, #4]
 8003f14:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003f1c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003f26:	7ffb      	ldrb	r3, [r7, #31]
 8003f28:	2b01      	cmp	r3, #1
 8003f2a:	d003      	beq.n	8003f34 <HAL_CAN_AddTxMessage+0x2c>
 8003f2c:	7ffb      	ldrb	r3, [r7, #31]
 8003f2e:	2b02      	cmp	r3, #2
 8003f30:	f040 80b8 	bne.w	80040a4 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003f34:	69bb      	ldr	r3, [r7, #24]
 8003f36:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d10a      	bne.n	8003f54 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003f3e:	69bb      	ldr	r3, [r7, #24]
 8003f40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d105      	bne.n	8003f54 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003f48:	69bb      	ldr	r3, [r7, #24]
 8003f4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	f000 80a0 	beq.w	8004094 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003f54:	69bb      	ldr	r3, [r7, #24]
 8003f56:	0e1b      	lsrs	r3, r3, #24
 8003f58:	f003 0303 	and.w	r3, r3, #3
 8003f5c:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	2b02      	cmp	r3, #2
 8003f62:	d907      	bls.n	8003f74 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f68:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	e09e      	b.n	80040b2 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003f74:	2201      	movs	r2, #1
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	409a      	lsls	r2, r3
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d10d      	bne.n	8003fa2 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003f90:	68f9      	ldr	r1, [r7, #12]
 8003f92:	6809      	ldr	r1, [r1, #0]
 8003f94:	431a      	orrs	r2, r3
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	3318      	adds	r3, #24
 8003f9a:	011b      	lsls	r3, r3, #4
 8003f9c:	440b      	add	r3, r1
 8003f9e:	601a      	str	r2, [r3, #0]
 8003fa0:	e00f      	b.n	8003fc2 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003fac:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003fb2:	68f9      	ldr	r1, [r7, #12]
 8003fb4:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8003fb6:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	3318      	adds	r3, #24
 8003fbc:	011b      	lsls	r3, r3, #4
 8003fbe:	440b      	add	r3, r1
 8003fc0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	6819      	ldr	r1, [r3, #0]
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	691a      	ldr	r2, [r3, #16]
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	3318      	adds	r3, #24
 8003fce:	011b      	lsls	r3, r3, #4
 8003fd0:	440b      	add	r3, r1
 8003fd2:	3304      	adds	r3, #4
 8003fd4:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	7d1b      	ldrb	r3, [r3, #20]
 8003fda:	2b01      	cmp	r3, #1
 8003fdc:	d111      	bne.n	8004002 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681a      	ldr	r2, [r3, #0]
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	3318      	adds	r3, #24
 8003fe6:	011b      	lsls	r3, r3, #4
 8003fe8:	4413      	add	r3, r2
 8003fea:	3304      	adds	r3, #4
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	68fa      	ldr	r2, [r7, #12]
 8003ff0:	6811      	ldr	r1, [r2, #0]
 8003ff2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	3318      	adds	r3, #24
 8003ffa:	011b      	lsls	r3, r3, #4
 8003ffc:	440b      	add	r3, r1
 8003ffe:	3304      	adds	r3, #4
 8004000:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	3307      	adds	r3, #7
 8004006:	781b      	ldrb	r3, [r3, #0]
 8004008:	061a      	lsls	r2, r3, #24
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	3306      	adds	r3, #6
 800400e:	781b      	ldrb	r3, [r3, #0]
 8004010:	041b      	lsls	r3, r3, #16
 8004012:	431a      	orrs	r2, r3
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	3305      	adds	r3, #5
 8004018:	781b      	ldrb	r3, [r3, #0]
 800401a:	021b      	lsls	r3, r3, #8
 800401c:	4313      	orrs	r3, r2
 800401e:	687a      	ldr	r2, [r7, #4]
 8004020:	3204      	adds	r2, #4
 8004022:	7812      	ldrb	r2, [r2, #0]
 8004024:	4610      	mov	r0, r2
 8004026:	68fa      	ldr	r2, [r7, #12]
 8004028:	6811      	ldr	r1, [r2, #0]
 800402a:	ea43 0200 	orr.w	r2, r3, r0
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	011b      	lsls	r3, r3, #4
 8004032:	440b      	add	r3, r1
 8004034:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8004038:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	3303      	adds	r3, #3
 800403e:	781b      	ldrb	r3, [r3, #0]
 8004040:	061a      	lsls	r2, r3, #24
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	3302      	adds	r3, #2
 8004046:	781b      	ldrb	r3, [r3, #0]
 8004048:	041b      	lsls	r3, r3, #16
 800404a:	431a      	orrs	r2, r3
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	3301      	adds	r3, #1
 8004050:	781b      	ldrb	r3, [r3, #0]
 8004052:	021b      	lsls	r3, r3, #8
 8004054:	4313      	orrs	r3, r2
 8004056:	687a      	ldr	r2, [r7, #4]
 8004058:	7812      	ldrb	r2, [r2, #0]
 800405a:	4610      	mov	r0, r2
 800405c:	68fa      	ldr	r2, [r7, #12]
 800405e:	6811      	ldr	r1, [r2, #0]
 8004060:	ea43 0200 	orr.w	r2, r3, r0
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	011b      	lsls	r3, r3, #4
 8004068:	440b      	add	r3, r1
 800406a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800406e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	3318      	adds	r3, #24
 8004078:	011b      	lsls	r3, r3, #4
 800407a:	4413      	add	r3, r2
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	68fa      	ldr	r2, [r7, #12]
 8004080:	6811      	ldr	r1, [r2, #0]
 8004082:	f043 0201 	orr.w	r2, r3, #1
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	3318      	adds	r3, #24
 800408a:	011b      	lsls	r3, r3, #4
 800408c:	440b      	add	r3, r1
 800408e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8004090:	2300      	movs	r3, #0
 8004092:	e00e      	b.n	80040b2 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004098:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80040a0:	2301      	movs	r3, #1
 80040a2:	e006      	b.n	80040b2 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80040b0:	2301      	movs	r3, #1
  }
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	3724      	adds	r7, #36	; 0x24
 80040b6:	46bd      	mov	sp, r7
 80040b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040bc:	4770      	bx	lr

080040be <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80040be:	b480      	push	{r7}
 80040c0:	b087      	sub	sp, #28
 80040c2:	af00      	add	r7, sp, #0
 80040c4:	60f8      	str	r0, [r7, #12]
 80040c6:	60b9      	str	r1, [r7, #8]
 80040c8:	607a      	str	r2, [r7, #4]
 80040ca:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80040d2:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80040d4:	7dfb      	ldrb	r3, [r7, #23]
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	d003      	beq.n	80040e2 <HAL_CAN_GetRxMessage+0x24>
 80040da:	7dfb      	ldrb	r3, [r7, #23]
 80040dc:	2b02      	cmp	r3, #2
 80040de:	f040 80f3 	bne.w	80042c8 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d10e      	bne.n	8004106 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	68db      	ldr	r3, [r3, #12]
 80040ee:	f003 0303 	and.w	r3, r3, #3
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d116      	bne.n	8004124 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040fa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	e0e7      	b.n	80042d6 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	691b      	ldr	r3, [r3, #16]
 800410c:	f003 0303 	and.w	r3, r3, #3
 8004110:	2b00      	cmp	r3, #0
 8004112:	d107      	bne.n	8004124 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004118:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004120:	2301      	movs	r3, #1
 8004122:	e0d8      	b.n	80042d6 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681a      	ldr	r2, [r3, #0]
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	331b      	adds	r3, #27
 800412c:	011b      	lsls	r3, r3, #4
 800412e:	4413      	add	r3, r2
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f003 0204 	and.w	r2, r3, #4
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d10c      	bne.n	800415c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	331b      	adds	r3, #27
 800414a:	011b      	lsls	r3, r3, #4
 800414c:	4413      	add	r3, r2
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	0d5b      	lsrs	r3, r3, #21
 8004152:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	601a      	str	r2, [r3, #0]
 800415a:	e00b      	b.n	8004174 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681a      	ldr	r2, [r3, #0]
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	331b      	adds	r3, #27
 8004164:	011b      	lsls	r3, r3, #4
 8004166:	4413      	add	r3, r2
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	08db      	lsrs	r3, r3, #3
 800416c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	331b      	adds	r3, #27
 800417c:	011b      	lsls	r3, r3, #4
 800417e:	4413      	add	r3, r2
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f003 0202 	and.w	r2, r3, #2
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681a      	ldr	r2, [r3, #0]
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	331b      	adds	r3, #27
 8004192:	011b      	lsls	r3, r3, #4
 8004194:	4413      	add	r3, r2
 8004196:	3304      	adds	r3, #4
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f003 020f 	and.w	r2, r3, #15
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681a      	ldr	r2, [r3, #0]
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	331b      	adds	r3, #27
 80041aa:	011b      	lsls	r3, r3, #4
 80041ac:	4413      	add	r3, r2
 80041ae:	3304      	adds	r3, #4
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	0a1b      	lsrs	r3, r3, #8
 80041b4:	b2da      	uxtb	r2, r3
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681a      	ldr	r2, [r3, #0]
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	331b      	adds	r3, #27
 80041c2:	011b      	lsls	r3, r3, #4
 80041c4:	4413      	add	r3, r2
 80041c6:	3304      	adds	r3, #4
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	0c1b      	lsrs	r3, r3, #16
 80041cc:	b29a      	uxth	r2, r3
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	011b      	lsls	r3, r3, #4
 80041da:	4413      	add	r3, r2
 80041dc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	b2da      	uxtb	r2, r3
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	011b      	lsls	r3, r3, #4
 80041f0:	4413      	add	r3, r2
 80041f2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	0a1a      	lsrs	r2, r3, #8
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	3301      	adds	r3, #1
 80041fe:	b2d2      	uxtb	r2, r2
 8004200:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	011b      	lsls	r3, r3, #4
 800420a:	4413      	add	r3, r2
 800420c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	0c1a      	lsrs	r2, r3, #16
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	3302      	adds	r3, #2
 8004218:	b2d2      	uxtb	r2, r2
 800421a:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681a      	ldr	r2, [r3, #0]
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	011b      	lsls	r3, r3, #4
 8004224:	4413      	add	r3, r2
 8004226:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	0e1a      	lsrs	r2, r3, #24
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	3303      	adds	r3, #3
 8004232:	b2d2      	uxtb	r2, r2
 8004234:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681a      	ldr	r2, [r3, #0]
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	011b      	lsls	r3, r3, #4
 800423e:	4413      	add	r3, r2
 8004240:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004244:	681a      	ldr	r2, [r3, #0]
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	3304      	adds	r3, #4
 800424a:	b2d2      	uxtb	r2, r2
 800424c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681a      	ldr	r2, [r3, #0]
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	011b      	lsls	r3, r3, #4
 8004256:	4413      	add	r3, r2
 8004258:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	0a1a      	lsrs	r2, r3, #8
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	3305      	adds	r3, #5
 8004264:	b2d2      	uxtb	r2, r2
 8004266:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681a      	ldr	r2, [r3, #0]
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	011b      	lsls	r3, r3, #4
 8004270:	4413      	add	r3, r2
 8004272:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	0c1a      	lsrs	r2, r3, #16
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	3306      	adds	r3, #6
 800427e:	b2d2      	uxtb	r2, r2
 8004280:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	011b      	lsls	r3, r3, #4
 800428a:	4413      	add	r3, r2
 800428c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	0e1a      	lsrs	r2, r3, #24
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	3307      	adds	r3, #7
 8004298:	b2d2      	uxtb	r2, r2
 800429a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d108      	bne.n	80042b4 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	68da      	ldr	r2, [r3, #12]
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f042 0220 	orr.w	r2, r2, #32
 80042b0:	60da      	str	r2, [r3, #12]
 80042b2:	e007      	b.n	80042c4 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	691a      	ldr	r2, [r3, #16]
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f042 0220 	orr.w	r2, r2, #32
 80042c2:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80042c4:	2300      	movs	r3, #0
 80042c6:	e006      	b.n	80042d6 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042cc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80042d4:	2301      	movs	r3, #1
  }
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	371c      	adds	r7, #28
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr

080042e2 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80042e2:	b480      	push	{r7}
 80042e4:	b085      	sub	sp, #20
 80042e6:	af00      	add	r7, sp, #0
 80042e8:	6078      	str	r0, [r7, #4]
 80042ea:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80042f2:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80042f4:	7bfb      	ldrb	r3, [r7, #15]
 80042f6:	2b01      	cmp	r3, #1
 80042f8:	d002      	beq.n	8004300 <HAL_CAN_ActivateNotification+0x1e>
 80042fa:	7bfb      	ldrb	r3, [r7, #15]
 80042fc:	2b02      	cmp	r3, #2
 80042fe:	d109      	bne.n	8004314 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	6959      	ldr	r1, [r3, #20]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	683a      	ldr	r2, [r7, #0]
 800430c:	430a      	orrs	r2, r1
 800430e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8004310:	2300      	movs	r3, #0
 8004312:	e006      	b.n	8004322 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004318:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004320:	2301      	movs	r3, #1
  }
}
 8004322:	4618      	mov	r0, r3
 8004324:	3714      	adds	r7, #20
 8004326:	46bd      	mov	sp, r7
 8004328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432c:	4770      	bx	lr

0800432e <HAL_CAN_DeactivateNotification>:
  * @param  InactiveITs indicates which interrupts will be disabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_DeactivateNotification(CAN_HandleTypeDef *hcan, uint32_t InactiveITs)
{
 800432e:	b480      	push	{r7}
 8004330:	b085      	sub	sp, #20
 8004332:	af00      	add	r7, sp, #0
 8004334:	6078      	str	r0, [r7, #4]
 8004336:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800433e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(InactiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8004340:	7bfb      	ldrb	r3, [r7, #15]
 8004342:	2b01      	cmp	r3, #1
 8004344:	d002      	beq.n	800434c <HAL_CAN_DeactivateNotification+0x1e>
 8004346:	7bfb      	ldrb	r3, [r7, #15]
 8004348:	2b02      	cmp	r3, #2
 800434a:	d10a      	bne.n	8004362 <HAL_CAN_DeactivateNotification+0x34>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Disable the selected interrupts */
    __HAL_CAN_DISABLE_IT(hcan, InactiveITs);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	6959      	ldr	r1, [r3, #20]
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	43da      	mvns	r2, r3
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	400a      	ands	r2, r1
 800435c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800435e:	2300      	movs	r3, #0
 8004360:	e006      	b.n	8004370 <HAL_CAN_DeactivateNotification+0x42>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004366:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800436e:	2301      	movs	r3, #1
  }
}
 8004370:	4618      	mov	r0, r3
 8004372:	3714      	adds	r7, #20
 8004374:	46bd      	mov	sp, r7
 8004376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437a:	4770      	bx	lr

0800437c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b08a      	sub	sp, #40	; 0x28
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8004384:	2300      	movs	r3, #0
 8004386:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	695b      	ldr	r3, [r3, #20]
 800438e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	689b      	ldr	r3, [r3, #8]
 800439e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	68db      	ldr	r3, [r3, #12]
 80043a6:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	691b      	ldr	r3, [r3, #16]
 80043ae:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	699b      	ldr	r3, [r3, #24]
 80043b6:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80043b8:	6a3b      	ldr	r3, [r7, #32]
 80043ba:	f003 0301 	and.w	r3, r3, #1
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d07c      	beq.n	80044bc <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80043c2:	69bb      	ldr	r3, [r7, #24]
 80043c4:	f003 0301 	and.w	r3, r3, #1
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d023      	beq.n	8004414 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	2201      	movs	r2, #1
 80043d2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80043d4:	69bb      	ldr	r3, [r7, #24]
 80043d6:	f003 0302 	and.w	r3, r3, #2
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d003      	beq.n	80043e6 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80043de:	6878      	ldr	r0, [r7, #4]
 80043e0:	f000 f983 	bl	80046ea <HAL_CAN_TxMailbox0CompleteCallback>
 80043e4:	e016      	b.n	8004414 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80043e6:	69bb      	ldr	r3, [r7, #24]
 80043e8:	f003 0304 	and.w	r3, r3, #4
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d004      	beq.n	80043fa <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80043f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80043f6:	627b      	str	r3, [r7, #36]	; 0x24
 80043f8:	e00c      	b.n	8004414 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80043fa:	69bb      	ldr	r3, [r7, #24]
 80043fc:	f003 0308 	and.w	r3, r3, #8
 8004400:	2b00      	cmp	r3, #0
 8004402:	d004      	beq.n	800440e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8004404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004406:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800440a:	627b      	str	r3, [r7, #36]	; 0x24
 800440c:	e002      	b.n	8004414 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	f000 f989 	bl	8004726 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8004414:	69bb      	ldr	r3, [r7, #24]
 8004416:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800441a:	2b00      	cmp	r3, #0
 800441c:	d024      	beq.n	8004468 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004426:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8004428:	69bb      	ldr	r3, [r7, #24]
 800442a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800442e:	2b00      	cmp	r3, #0
 8004430:	d003      	beq.n	800443a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	f000 f963 	bl	80046fe <HAL_CAN_TxMailbox1CompleteCallback>
 8004438:	e016      	b.n	8004468 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800443a:	69bb      	ldr	r3, [r7, #24]
 800443c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004440:	2b00      	cmp	r3, #0
 8004442:	d004      	beq.n	800444e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8004444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004446:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800444a:	627b      	str	r3, [r7, #36]	; 0x24
 800444c:	e00c      	b.n	8004468 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800444e:	69bb      	ldr	r3, [r7, #24]
 8004450:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004454:	2b00      	cmp	r3, #0
 8004456:	d004      	beq.n	8004462 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8004458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800445a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800445e:	627b      	str	r3, [r7, #36]	; 0x24
 8004460:	e002      	b.n	8004468 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f000 f969 	bl	800473a <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8004468:	69bb      	ldr	r3, [r7, #24]
 800446a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800446e:	2b00      	cmp	r3, #0
 8004470:	d024      	beq.n	80044bc <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800447a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800447c:	69bb      	ldr	r3, [r7, #24]
 800447e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004482:	2b00      	cmp	r3, #0
 8004484:	d003      	beq.n	800448e <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f000 f943 	bl	8004712 <HAL_CAN_TxMailbox2CompleteCallback>
 800448c:	e016      	b.n	80044bc <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800448e:	69bb      	ldr	r3, [r7, #24]
 8004490:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004494:	2b00      	cmp	r3, #0
 8004496:	d004      	beq.n	80044a2 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8004498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800449a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800449e:	627b      	str	r3, [r7, #36]	; 0x24
 80044a0:	e00c      	b.n	80044bc <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80044a2:	69bb      	ldr	r3, [r7, #24]
 80044a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d004      	beq.n	80044b6 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80044ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044b2:	627b      	str	r3, [r7, #36]	; 0x24
 80044b4:	e002      	b.n	80044bc <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f000 f949 	bl	800474e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80044bc:	6a3b      	ldr	r3, [r7, #32]
 80044be:	f003 0308 	and.w	r3, r3, #8
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d00c      	beq.n	80044e0 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	f003 0310 	and.w	r3, r3, #16
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d007      	beq.n	80044e0 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80044d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80044d6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	2210      	movs	r2, #16
 80044de:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80044e0:	6a3b      	ldr	r3, [r7, #32]
 80044e2:	f003 0304 	and.w	r3, r3, #4
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d00b      	beq.n	8004502 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	f003 0308 	and.w	r3, r3, #8
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d006      	beq.n	8004502 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	2208      	movs	r2, #8
 80044fa:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80044fc:	6878      	ldr	r0, [r7, #4]
 80044fe:	f000 f930 	bl	8004762 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8004502:	6a3b      	ldr	r3, [r7, #32]
 8004504:	f003 0302 	and.w	r3, r3, #2
 8004508:	2b00      	cmp	r3, #0
 800450a:	d009      	beq.n	8004520 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	68db      	ldr	r3, [r3, #12]
 8004512:	f003 0303 	and.w	r3, r3, #3
 8004516:	2b00      	cmp	r3, #0
 8004518:	d002      	beq.n	8004520 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	f7fc fce2 	bl	8000ee4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8004520:	6a3b      	ldr	r3, [r7, #32]
 8004522:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004526:	2b00      	cmp	r3, #0
 8004528:	d00c      	beq.n	8004544 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	f003 0310 	and.w	r3, r3, #16
 8004530:	2b00      	cmp	r3, #0
 8004532:	d007      	beq.n	8004544 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8004534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004536:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800453a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	2210      	movs	r2, #16
 8004542:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8004544:	6a3b      	ldr	r3, [r7, #32]
 8004546:	f003 0320 	and.w	r3, r3, #32
 800454a:	2b00      	cmp	r3, #0
 800454c:	d00b      	beq.n	8004566 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	f003 0308 	and.w	r3, r3, #8
 8004554:	2b00      	cmp	r3, #0
 8004556:	d006      	beq.n	8004566 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	2208      	movs	r2, #8
 800455e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8004560:	6878      	ldr	r0, [r7, #4]
 8004562:	f000 f912 	bl	800478a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8004566:	6a3b      	ldr	r3, [r7, #32]
 8004568:	f003 0310 	and.w	r3, r3, #16
 800456c:	2b00      	cmp	r3, #0
 800456e:	d009      	beq.n	8004584 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	691b      	ldr	r3, [r3, #16]
 8004576:	f003 0303 	and.w	r3, r3, #3
 800457a:	2b00      	cmp	r3, #0
 800457c:	d002      	beq.n	8004584 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f000 f8f9 	bl	8004776 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8004584:	6a3b      	ldr	r3, [r7, #32]
 8004586:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800458a:	2b00      	cmp	r3, #0
 800458c:	d00b      	beq.n	80045a6 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800458e:	69fb      	ldr	r3, [r7, #28]
 8004590:	f003 0310 	and.w	r3, r3, #16
 8004594:	2b00      	cmp	r3, #0
 8004596:	d006      	beq.n	80045a6 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	2210      	movs	r2, #16
 800459e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80045a0:	6878      	ldr	r0, [r7, #4]
 80045a2:	f000 f8fc 	bl	800479e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80045a6:	6a3b      	ldr	r3, [r7, #32]
 80045a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d00b      	beq.n	80045c8 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80045b0:	69fb      	ldr	r3, [r7, #28]
 80045b2:	f003 0308 	and.w	r3, r3, #8
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d006      	beq.n	80045c8 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	2208      	movs	r2, #8
 80045c0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f000 f8f5 	bl	80047b2 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80045c8:	6a3b      	ldr	r3, [r7, #32]
 80045ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d07b      	beq.n	80046ca <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80045d2:	69fb      	ldr	r3, [r7, #28]
 80045d4:	f003 0304 	and.w	r3, r3, #4
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d072      	beq.n	80046c2 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80045dc:	6a3b      	ldr	r3, [r7, #32]
 80045de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d008      	beq.n	80045f8 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d003      	beq.n	80045f8 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80045f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f2:	f043 0301 	orr.w	r3, r3, #1
 80045f6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80045f8:	6a3b      	ldr	r3, [r7, #32]
 80045fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d008      	beq.n	8004614 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004608:	2b00      	cmp	r3, #0
 800460a:	d003      	beq.n	8004614 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800460c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800460e:	f043 0302 	orr.w	r3, r3, #2
 8004612:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004614:	6a3b      	ldr	r3, [r7, #32]
 8004616:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800461a:	2b00      	cmp	r3, #0
 800461c:	d008      	beq.n	8004630 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004624:	2b00      	cmp	r3, #0
 8004626:	d003      	beq.n	8004630 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8004628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800462a:	f043 0304 	orr.w	r3, r3, #4
 800462e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004630:	6a3b      	ldr	r3, [r7, #32]
 8004632:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004636:	2b00      	cmp	r3, #0
 8004638:	d043      	beq.n	80046c2 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004640:	2b00      	cmp	r3, #0
 8004642:	d03e      	beq.n	80046c2 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800464a:	2b60      	cmp	r3, #96	; 0x60
 800464c:	d02b      	beq.n	80046a6 <HAL_CAN_IRQHandler+0x32a>
 800464e:	2b60      	cmp	r3, #96	; 0x60
 8004650:	d82e      	bhi.n	80046b0 <HAL_CAN_IRQHandler+0x334>
 8004652:	2b50      	cmp	r3, #80	; 0x50
 8004654:	d022      	beq.n	800469c <HAL_CAN_IRQHandler+0x320>
 8004656:	2b50      	cmp	r3, #80	; 0x50
 8004658:	d82a      	bhi.n	80046b0 <HAL_CAN_IRQHandler+0x334>
 800465a:	2b40      	cmp	r3, #64	; 0x40
 800465c:	d019      	beq.n	8004692 <HAL_CAN_IRQHandler+0x316>
 800465e:	2b40      	cmp	r3, #64	; 0x40
 8004660:	d826      	bhi.n	80046b0 <HAL_CAN_IRQHandler+0x334>
 8004662:	2b30      	cmp	r3, #48	; 0x30
 8004664:	d010      	beq.n	8004688 <HAL_CAN_IRQHandler+0x30c>
 8004666:	2b30      	cmp	r3, #48	; 0x30
 8004668:	d822      	bhi.n	80046b0 <HAL_CAN_IRQHandler+0x334>
 800466a:	2b10      	cmp	r3, #16
 800466c:	d002      	beq.n	8004674 <HAL_CAN_IRQHandler+0x2f8>
 800466e:	2b20      	cmp	r3, #32
 8004670:	d005      	beq.n	800467e <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8004672:	e01d      	b.n	80046b0 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8004674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004676:	f043 0308 	orr.w	r3, r3, #8
 800467a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800467c:	e019      	b.n	80046b2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800467e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004680:	f043 0310 	orr.w	r3, r3, #16
 8004684:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004686:	e014      	b.n	80046b2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8004688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800468a:	f043 0320 	orr.w	r3, r3, #32
 800468e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004690:	e00f      	b.n	80046b2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8004692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004694:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004698:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800469a:	e00a      	b.n	80046b2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800469c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800469e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046a2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80046a4:	e005      	b.n	80046b2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80046a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046ac:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80046ae:	e000      	b.n	80046b2 <HAL_CAN_IRQHandler+0x336>
            break;
 80046b0:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	699a      	ldr	r2, [r3, #24]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80046c0:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	2204      	movs	r2, #4
 80046c8:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80046ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d008      	beq.n	80046e2 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80046d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d6:	431a      	orrs	r2, r3
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80046dc:	6878      	ldr	r0, [r7, #4]
 80046de:	f000 f872 	bl	80047c6 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80046e2:	bf00      	nop
 80046e4:	3728      	adds	r7, #40	; 0x28
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}

080046ea <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80046ea:	b480      	push	{r7}
 80046ec:	b083      	sub	sp, #12
 80046ee:	af00      	add	r7, sp, #0
 80046f0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80046f2:	bf00      	nop
 80046f4:	370c      	adds	r7, #12
 80046f6:	46bd      	mov	sp, r7
 80046f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fc:	4770      	bx	lr

080046fe <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80046fe:	b480      	push	{r7}
 8004700:	b083      	sub	sp, #12
 8004702:	af00      	add	r7, sp, #0
 8004704:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8004706:	bf00      	nop
 8004708:	370c      	adds	r7, #12
 800470a:	46bd      	mov	sp, r7
 800470c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004710:	4770      	bx	lr

08004712 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004712:	b480      	push	{r7}
 8004714:	b083      	sub	sp, #12
 8004716:	af00      	add	r7, sp, #0
 8004718:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800471a:	bf00      	nop
 800471c:	370c      	adds	r7, #12
 800471e:	46bd      	mov	sp, r7
 8004720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004724:	4770      	bx	lr

08004726 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004726:	b480      	push	{r7}
 8004728:	b083      	sub	sp, #12
 800472a:	af00      	add	r7, sp, #0
 800472c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800472e:	bf00      	nop
 8004730:	370c      	adds	r7, #12
 8004732:	46bd      	mov	sp, r7
 8004734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004738:	4770      	bx	lr

0800473a <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800473a:	b480      	push	{r7}
 800473c:	b083      	sub	sp, #12
 800473e:	af00      	add	r7, sp, #0
 8004740:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8004742:	bf00      	nop
 8004744:	370c      	adds	r7, #12
 8004746:	46bd      	mov	sp, r7
 8004748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474c:	4770      	bx	lr

0800474e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800474e:	b480      	push	{r7}
 8004750:	b083      	sub	sp, #12
 8004752:	af00      	add	r7, sp, #0
 8004754:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8004756:	bf00      	nop
 8004758:	370c      	adds	r7, #12
 800475a:	46bd      	mov	sp, r7
 800475c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004760:	4770      	bx	lr

08004762 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004762:	b480      	push	{r7}
 8004764:	b083      	sub	sp, #12
 8004766:	af00      	add	r7, sp, #0
 8004768:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800476a:	bf00      	nop
 800476c:	370c      	adds	r7, #12
 800476e:	46bd      	mov	sp, r7
 8004770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004774:	4770      	bx	lr

08004776 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004776:	b480      	push	{r7}
 8004778:	b083      	sub	sp, #12
 800477a:	af00      	add	r7, sp, #0
 800477c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800477e:	bf00      	nop
 8004780:	370c      	adds	r7, #12
 8004782:	46bd      	mov	sp, r7
 8004784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004788:	4770      	bx	lr

0800478a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800478a:	b480      	push	{r7}
 800478c:	b083      	sub	sp, #12
 800478e:	af00      	add	r7, sp, #0
 8004790:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004792:	bf00      	nop
 8004794:	370c      	adds	r7, #12
 8004796:	46bd      	mov	sp, r7
 8004798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479c:	4770      	bx	lr

0800479e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800479e:	b480      	push	{r7}
 80047a0:	b083      	sub	sp, #12
 80047a2:	af00      	add	r7, sp, #0
 80047a4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80047a6:	bf00      	nop
 80047a8:	370c      	adds	r7, #12
 80047aa:	46bd      	mov	sp, r7
 80047ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b0:	4770      	bx	lr

080047b2 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80047b2:	b480      	push	{r7}
 80047b4:	b083      	sub	sp, #12
 80047b6:	af00      	add	r7, sp, #0
 80047b8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80047ba:	bf00      	nop
 80047bc:	370c      	adds	r7, #12
 80047be:	46bd      	mov	sp, r7
 80047c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c4:	4770      	bx	lr

080047c6 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80047c6:	b480      	push	{r7}
 80047c8:	b083      	sub	sp, #12
 80047ca:	af00      	add	r7, sp, #0
 80047cc:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80047ce:	bf00      	nop
 80047d0:	370c      	adds	r7, #12
 80047d2:	46bd      	mov	sp, r7
 80047d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d8:	4770      	bx	lr
	...

080047dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80047dc:	b480      	push	{r7}
 80047de:	b085      	sub	sp, #20
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	f003 0307 	and.w	r3, r3, #7
 80047ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80047ec:	4b0c      	ldr	r3, [pc, #48]	; (8004820 <__NVIC_SetPriorityGrouping+0x44>)
 80047ee:	68db      	ldr	r3, [r3, #12]
 80047f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80047f2:	68ba      	ldr	r2, [r7, #8]
 80047f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80047f8:	4013      	ands	r3, r2
 80047fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004804:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004808:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800480c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800480e:	4a04      	ldr	r2, [pc, #16]	; (8004820 <__NVIC_SetPriorityGrouping+0x44>)
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	60d3      	str	r3, [r2, #12]
}
 8004814:	bf00      	nop
 8004816:	3714      	adds	r7, #20
 8004818:	46bd      	mov	sp, r7
 800481a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481e:	4770      	bx	lr
 8004820:	e000ed00 	.word	0xe000ed00

08004824 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004824:	b480      	push	{r7}
 8004826:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004828:	4b04      	ldr	r3, [pc, #16]	; (800483c <__NVIC_GetPriorityGrouping+0x18>)
 800482a:	68db      	ldr	r3, [r3, #12]
 800482c:	0a1b      	lsrs	r3, r3, #8
 800482e:	f003 0307 	and.w	r3, r3, #7
}
 8004832:	4618      	mov	r0, r3
 8004834:	46bd      	mov	sp, r7
 8004836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483a:	4770      	bx	lr
 800483c:	e000ed00 	.word	0xe000ed00

08004840 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004840:	b480      	push	{r7}
 8004842:	b083      	sub	sp, #12
 8004844:	af00      	add	r7, sp, #0
 8004846:	4603      	mov	r3, r0
 8004848:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800484a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800484e:	2b00      	cmp	r3, #0
 8004850:	db0b      	blt.n	800486a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004852:	79fb      	ldrb	r3, [r7, #7]
 8004854:	f003 021f 	and.w	r2, r3, #31
 8004858:	4907      	ldr	r1, [pc, #28]	; (8004878 <__NVIC_EnableIRQ+0x38>)
 800485a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800485e:	095b      	lsrs	r3, r3, #5
 8004860:	2001      	movs	r0, #1
 8004862:	fa00 f202 	lsl.w	r2, r0, r2
 8004866:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800486a:	bf00      	nop
 800486c:	370c      	adds	r7, #12
 800486e:	46bd      	mov	sp, r7
 8004870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004874:	4770      	bx	lr
 8004876:	bf00      	nop
 8004878:	e000e100 	.word	0xe000e100

0800487c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800487c:	b480      	push	{r7}
 800487e:	b083      	sub	sp, #12
 8004880:	af00      	add	r7, sp, #0
 8004882:	4603      	mov	r3, r0
 8004884:	6039      	str	r1, [r7, #0]
 8004886:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004888:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800488c:	2b00      	cmp	r3, #0
 800488e:	db0a      	blt.n	80048a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	b2da      	uxtb	r2, r3
 8004894:	490c      	ldr	r1, [pc, #48]	; (80048c8 <__NVIC_SetPriority+0x4c>)
 8004896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800489a:	0112      	lsls	r2, r2, #4
 800489c:	b2d2      	uxtb	r2, r2
 800489e:	440b      	add	r3, r1
 80048a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80048a4:	e00a      	b.n	80048bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	b2da      	uxtb	r2, r3
 80048aa:	4908      	ldr	r1, [pc, #32]	; (80048cc <__NVIC_SetPriority+0x50>)
 80048ac:	79fb      	ldrb	r3, [r7, #7]
 80048ae:	f003 030f 	and.w	r3, r3, #15
 80048b2:	3b04      	subs	r3, #4
 80048b4:	0112      	lsls	r2, r2, #4
 80048b6:	b2d2      	uxtb	r2, r2
 80048b8:	440b      	add	r3, r1
 80048ba:	761a      	strb	r2, [r3, #24]
}
 80048bc:	bf00      	nop
 80048be:	370c      	adds	r7, #12
 80048c0:	46bd      	mov	sp, r7
 80048c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c6:	4770      	bx	lr
 80048c8:	e000e100 	.word	0xe000e100
 80048cc:	e000ed00 	.word	0xe000ed00

080048d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80048d0:	b480      	push	{r7}
 80048d2:	b089      	sub	sp, #36	; 0x24
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	60f8      	str	r0, [r7, #12]
 80048d8:	60b9      	str	r1, [r7, #8]
 80048da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	f003 0307 	and.w	r3, r3, #7
 80048e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80048e4:	69fb      	ldr	r3, [r7, #28]
 80048e6:	f1c3 0307 	rsb	r3, r3, #7
 80048ea:	2b04      	cmp	r3, #4
 80048ec:	bf28      	it	cs
 80048ee:	2304      	movcs	r3, #4
 80048f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80048f2:	69fb      	ldr	r3, [r7, #28]
 80048f4:	3304      	adds	r3, #4
 80048f6:	2b06      	cmp	r3, #6
 80048f8:	d902      	bls.n	8004900 <NVIC_EncodePriority+0x30>
 80048fa:	69fb      	ldr	r3, [r7, #28]
 80048fc:	3b03      	subs	r3, #3
 80048fe:	e000      	b.n	8004902 <NVIC_EncodePriority+0x32>
 8004900:	2300      	movs	r3, #0
 8004902:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004904:	f04f 32ff 	mov.w	r2, #4294967295
 8004908:	69bb      	ldr	r3, [r7, #24]
 800490a:	fa02 f303 	lsl.w	r3, r2, r3
 800490e:	43da      	mvns	r2, r3
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	401a      	ands	r2, r3
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004918:	f04f 31ff 	mov.w	r1, #4294967295
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	fa01 f303 	lsl.w	r3, r1, r3
 8004922:	43d9      	mvns	r1, r3
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004928:	4313      	orrs	r3, r2
         );
}
 800492a:	4618      	mov	r0, r3
 800492c:	3724      	adds	r7, #36	; 0x24
 800492e:	46bd      	mov	sp, r7
 8004930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004934:	4770      	bx	lr

08004936 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004936:	b580      	push	{r7, lr}
 8004938:	b082      	sub	sp, #8
 800493a:	af00      	add	r7, sp, #0
 800493c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	f7ff ff4c 	bl	80047dc <__NVIC_SetPriorityGrouping>
}
 8004944:	bf00      	nop
 8004946:	3708      	adds	r7, #8
 8004948:	46bd      	mov	sp, r7
 800494a:	bd80      	pop	{r7, pc}

0800494c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800494c:	b580      	push	{r7, lr}
 800494e:	b086      	sub	sp, #24
 8004950:	af00      	add	r7, sp, #0
 8004952:	4603      	mov	r3, r0
 8004954:	60b9      	str	r1, [r7, #8]
 8004956:	607a      	str	r2, [r7, #4]
 8004958:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800495a:	2300      	movs	r3, #0
 800495c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800495e:	f7ff ff61 	bl	8004824 <__NVIC_GetPriorityGrouping>
 8004962:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004964:	687a      	ldr	r2, [r7, #4]
 8004966:	68b9      	ldr	r1, [r7, #8]
 8004968:	6978      	ldr	r0, [r7, #20]
 800496a:	f7ff ffb1 	bl	80048d0 <NVIC_EncodePriority>
 800496e:	4602      	mov	r2, r0
 8004970:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004974:	4611      	mov	r1, r2
 8004976:	4618      	mov	r0, r3
 8004978:	f7ff ff80 	bl	800487c <__NVIC_SetPriority>
}
 800497c:	bf00      	nop
 800497e:	3718      	adds	r7, #24
 8004980:	46bd      	mov	sp, r7
 8004982:	bd80      	pop	{r7, pc}

08004984 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b082      	sub	sp, #8
 8004988:	af00      	add	r7, sp, #0
 800498a:	4603      	mov	r3, r0
 800498c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800498e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004992:	4618      	mov	r0, r3
 8004994:	f7ff ff54 	bl	8004840 <__NVIC_EnableIRQ>
}
 8004998:	bf00      	nop
 800499a:	3708      	adds	r7, #8
 800499c:	46bd      	mov	sp, r7
 800499e:	bd80      	pop	{r7, pc}

080049a0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b086      	sub	sp, #24
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80049a8:	2300      	movs	r3, #0
 80049aa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80049ac:	f7ff f85c 	bl	8003a68 <HAL_GetTick>
 80049b0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d101      	bne.n	80049bc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80049b8:	2301      	movs	r3, #1
 80049ba:	e099      	b.n	8004af0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2200      	movs	r2, #0
 80049c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2202      	movs	r2, #2
 80049c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	681a      	ldr	r2, [r3, #0]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f022 0201 	bic.w	r2, r2, #1
 80049da:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80049dc:	e00f      	b.n	80049fe <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80049de:	f7ff f843 	bl	8003a68 <HAL_GetTick>
 80049e2:	4602      	mov	r2, r0
 80049e4:	693b      	ldr	r3, [r7, #16]
 80049e6:	1ad3      	subs	r3, r2, r3
 80049e8:	2b05      	cmp	r3, #5
 80049ea:	d908      	bls.n	80049fe <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2220      	movs	r2, #32
 80049f0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2203      	movs	r2, #3
 80049f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80049fa:	2303      	movs	r3, #3
 80049fc:	e078      	b.n	8004af0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f003 0301 	and.w	r3, r3, #1
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d1e8      	bne.n	80049de <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004a14:	697a      	ldr	r2, [r7, #20]
 8004a16:	4b38      	ldr	r3, [pc, #224]	; (8004af8 <HAL_DMA_Init+0x158>)
 8004a18:	4013      	ands	r3, r2
 8004a1a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	685a      	ldr	r2, [r3, #4]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004a2a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	691b      	ldr	r3, [r3, #16]
 8004a30:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a36:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	699b      	ldr	r3, [r3, #24]
 8004a3c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a42:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6a1b      	ldr	r3, [r3, #32]
 8004a48:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004a4a:	697a      	ldr	r2, [r7, #20]
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a54:	2b04      	cmp	r3, #4
 8004a56:	d107      	bne.n	8004a68 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a60:	4313      	orrs	r3, r2
 8004a62:	697a      	ldr	r2, [r7, #20]
 8004a64:	4313      	orrs	r3, r2
 8004a66:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	697a      	ldr	r2, [r7, #20]
 8004a6e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	695b      	ldr	r3, [r3, #20]
 8004a76:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	f023 0307 	bic.w	r3, r3, #7
 8004a7e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a84:	697a      	ldr	r2, [r7, #20]
 8004a86:	4313      	orrs	r3, r2
 8004a88:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a8e:	2b04      	cmp	r3, #4
 8004a90:	d117      	bne.n	8004ac2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a96:	697a      	ldr	r2, [r7, #20]
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d00e      	beq.n	8004ac2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004aa4:	6878      	ldr	r0, [r7, #4]
 8004aa6:	f000 fa91 	bl	8004fcc <DMA_CheckFifoParam>
 8004aaa:	4603      	mov	r3, r0
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d008      	beq.n	8004ac2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2240      	movs	r2, #64	; 0x40
 8004ab4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2201      	movs	r2, #1
 8004aba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004abe:	2301      	movs	r3, #1
 8004ac0:	e016      	b.n	8004af0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	697a      	ldr	r2, [r7, #20]
 8004ac8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	f000 fa48 	bl	8004f60 <DMA_CalcBaseAndBitshift>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ad8:	223f      	movs	r2, #63	; 0x3f
 8004ada:	409a      	lsls	r2, r3
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2201      	movs	r2, #1
 8004aea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004aee:	2300      	movs	r3, #0
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	3718      	adds	r7, #24
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}
 8004af8:	f010803f 	.word	0xf010803f

08004afc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b086      	sub	sp, #24
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	60f8      	str	r0, [r7, #12]
 8004b04:	60b9      	str	r1, [r7, #8]
 8004b06:	607a      	str	r2, [r7, #4]
 8004b08:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b12:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004b1a:	2b01      	cmp	r3, #1
 8004b1c:	d101      	bne.n	8004b22 <HAL_DMA_Start_IT+0x26>
 8004b1e:	2302      	movs	r3, #2
 8004b20:	e040      	b.n	8004ba4 <HAL_DMA_Start_IT+0xa8>
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	2201      	movs	r2, #1
 8004b26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004b30:	b2db      	uxtb	r3, r3
 8004b32:	2b01      	cmp	r3, #1
 8004b34:	d12f      	bne.n	8004b96 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	2202      	movs	r2, #2
 8004b3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	2200      	movs	r2, #0
 8004b42:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	687a      	ldr	r2, [r7, #4]
 8004b48:	68b9      	ldr	r1, [r7, #8]
 8004b4a:	68f8      	ldr	r0, [r7, #12]
 8004b4c:	f000 f9da 	bl	8004f04 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b54:	223f      	movs	r2, #63	; 0x3f
 8004b56:	409a      	lsls	r2, r3
 8004b58:	693b      	ldr	r3, [r7, #16]
 8004b5a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f042 0216 	orr.w	r2, r2, #22
 8004b6a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d007      	beq.n	8004b84 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f042 0208 	orr.w	r2, r2, #8
 8004b82:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	681a      	ldr	r2, [r3, #0]
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f042 0201 	orr.w	r2, r2, #1
 8004b92:	601a      	str	r2, [r3, #0]
 8004b94:	e005      	b.n	8004ba2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004b9e:	2302      	movs	r3, #2
 8004ba0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004ba2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	3718      	adds	r7, #24
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bd80      	pop	{r7, pc}

08004bac <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b083      	sub	sp, #12
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004bba:	b2db      	uxtb	r3, r3
 8004bbc:	2b02      	cmp	r3, #2
 8004bbe:	d004      	beq.n	8004bca <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2280      	movs	r2, #128	; 0x80
 8004bc4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	e00c      	b.n	8004be4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2205      	movs	r2, #5
 8004bce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	681a      	ldr	r2, [r3, #0]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f022 0201 	bic.w	r2, r2, #1
 8004be0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004be2:	2300      	movs	r3, #0
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	370c      	adds	r7, #12
 8004be8:	46bd      	mov	sp, r7
 8004bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bee:	4770      	bx	lr

08004bf0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b086      	sub	sp, #24
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004bfc:	4b92      	ldr	r3, [pc, #584]	; (8004e48 <HAL_DMA_IRQHandler+0x258>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a92      	ldr	r2, [pc, #584]	; (8004e4c <HAL_DMA_IRQHandler+0x25c>)
 8004c02:	fba2 2303 	umull	r2, r3, r2, r3
 8004c06:	0a9b      	lsrs	r3, r3, #10
 8004c08:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c0e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004c10:	693b      	ldr	r3, [r7, #16]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c1a:	2208      	movs	r2, #8
 8004c1c:	409a      	lsls	r2, r3
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	4013      	ands	r3, r2
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d01a      	beq.n	8004c5c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f003 0304 	and.w	r3, r3, #4
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d013      	beq.n	8004c5c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	681a      	ldr	r2, [r3, #0]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f022 0204 	bic.w	r2, r2, #4
 8004c42:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c48:	2208      	movs	r2, #8
 8004c4a:	409a      	lsls	r2, r3
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c54:	f043 0201 	orr.w	r2, r3, #1
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c60:	2201      	movs	r2, #1
 8004c62:	409a      	lsls	r2, r3
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	4013      	ands	r3, r2
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d012      	beq.n	8004c92 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	695b      	ldr	r3, [r3, #20]
 8004c72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d00b      	beq.n	8004c92 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c7e:	2201      	movs	r2, #1
 8004c80:	409a      	lsls	r2, r3
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c8a:	f043 0202 	orr.w	r2, r3, #2
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c96:	2204      	movs	r2, #4
 8004c98:	409a      	lsls	r2, r3
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	4013      	ands	r3, r2
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d012      	beq.n	8004cc8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f003 0302 	and.w	r3, r3, #2
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d00b      	beq.n	8004cc8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cb4:	2204      	movs	r2, #4
 8004cb6:	409a      	lsls	r2, r3
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cc0:	f043 0204 	orr.w	r2, r3, #4
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ccc:	2210      	movs	r2, #16
 8004cce:	409a      	lsls	r2, r3
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	4013      	ands	r3, r2
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d043      	beq.n	8004d60 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f003 0308 	and.w	r3, r3, #8
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d03c      	beq.n	8004d60 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cea:	2210      	movs	r2, #16
 8004cec:	409a      	lsls	r2, r3
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d018      	beq.n	8004d32 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d108      	bne.n	8004d20 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d024      	beq.n	8004d60 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	4798      	blx	r3
 8004d1e:	e01f      	b.n	8004d60 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d01b      	beq.n	8004d60 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d2c:	6878      	ldr	r0, [r7, #4]
 8004d2e:	4798      	blx	r3
 8004d30:	e016      	b.n	8004d60 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d107      	bne.n	8004d50 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	681a      	ldr	r2, [r3, #0]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f022 0208 	bic.w	r2, r2, #8
 8004d4e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d003      	beq.n	8004d60 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d5c:	6878      	ldr	r0, [r7, #4]
 8004d5e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d64:	2220      	movs	r2, #32
 8004d66:	409a      	lsls	r2, r3
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	4013      	ands	r3, r2
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	f000 808e 	beq.w	8004e8e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f003 0310 	and.w	r3, r3, #16
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	f000 8086 	beq.w	8004e8e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d86:	2220      	movs	r2, #32
 8004d88:	409a      	lsls	r2, r3
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004d94:	b2db      	uxtb	r3, r3
 8004d96:	2b05      	cmp	r3, #5
 8004d98:	d136      	bne.n	8004e08 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	681a      	ldr	r2, [r3, #0]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f022 0216 	bic.w	r2, r2, #22
 8004da8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	695a      	ldr	r2, [r3, #20]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004db8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d103      	bne.n	8004dca <HAL_DMA_IRQHandler+0x1da>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d007      	beq.n	8004dda <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	681a      	ldr	r2, [r3, #0]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f022 0208 	bic.w	r2, r2, #8
 8004dd8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dde:	223f      	movs	r2, #63	; 0x3f
 8004de0:	409a      	lsls	r2, r3
 8004de2:	693b      	ldr	r3, [r7, #16]
 8004de4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2200      	movs	r2, #0
 8004dea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2201      	movs	r2, #1
 8004df2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d07d      	beq.n	8004efa <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e02:	6878      	ldr	r0, [r7, #4]
 8004e04:	4798      	blx	r3
        }
        return;
 8004e06:	e078      	b.n	8004efa <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d01c      	beq.n	8004e50 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d108      	bne.n	8004e36 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d030      	beq.n	8004e8e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e30:	6878      	ldr	r0, [r7, #4]
 8004e32:	4798      	blx	r3
 8004e34:	e02b      	b.n	8004e8e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d027      	beq.n	8004e8e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e42:	6878      	ldr	r0, [r7, #4]
 8004e44:	4798      	blx	r3
 8004e46:	e022      	b.n	8004e8e <HAL_DMA_IRQHandler+0x29e>
 8004e48:	20000000 	.word	0x20000000
 8004e4c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d10f      	bne.n	8004e7e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	681a      	ldr	r2, [r3, #0]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f022 0210 	bic.w	r2, r2, #16
 8004e6c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2200      	movs	r2, #0
 8004e72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2201      	movs	r2, #1
 8004e7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d003      	beq.n	8004e8e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e8a:	6878      	ldr	r0, [r7, #4]
 8004e8c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d032      	beq.n	8004efc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e9a:	f003 0301 	and.w	r3, r3, #1
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d022      	beq.n	8004ee8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2205      	movs	r2, #5
 8004ea6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	681a      	ldr	r2, [r3, #0]
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f022 0201 	bic.w	r2, r2, #1
 8004eb8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	3301      	adds	r3, #1
 8004ebe:	60bb      	str	r3, [r7, #8]
 8004ec0:	697a      	ldr	r2, [r7, #20]
 8004ec2:	429a      	cmp	r2, r3
 8004ec4:	d307      	bcc.n	8004ed6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f003 0301 	and.w	r3, r3, #1
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d1f2      	bne.n	8004eba <HAL_DMA_IRQHandler+0x2ca>
 8004ed4:	e000      	b.n	8004ed8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004ed6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2200      	movs	r2, #0
 8004edc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d005      	beq.n	8004efc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ef4:	6878      	ldr	r0, [r7, #4]
 8004ef6:	4798      	blx	r3
 8004ef8:	e000      	b.n	8004efc <HAL_DMA_IRQHandler+0x30c>
        return;
 8004efa:	bf00      	nop
    }
  }
}
 8004efc:	3718      	adds	r7, #24
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}
 8004f02:	bf00      	nop

08004f04 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004f04:	b480      	push	{r7}
 8004f06:	b085      	sub	sp, #20
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	60f8      	str	r0, [r7, #12]
 8004f0c:	60b9      	str	r1, [r7, #8]
 8004f0e:	607a      	str	r2, [r7, #4]
 8004f10:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	681a      	ldr	r2, [r3, #0]
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004f20:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	683a      	ldr	r2, [r7, #0]
 8004f28:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	689b      	ldr	r3, [r3, #8]
 8004f2e:	2b40      	cmp	r3, #64	; 0x40
 8004f30:	d108      	bne.n	8004f44 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	687a      	ldr	r2, [r7, #4]
 8004f38:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	68ba      	ldr	r2, [r7, #8]
 8004f40:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004f42:	e007      	b.n	8004f54 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	68ba      	ldr	r2, [r7, #8]
 8004f4a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	687a      	ldr	r2, [r7, #4]
 8004f52:	60da      	str	r2, [r3, #12]
}
 8004f54:	bf00      	nop
 8004f56:	3714      	adds	r7, #20
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5e:	4770      	bx	lr

08004f60 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004f60:	b480      	push	{r7}
 8004f62:	b085      	sub	sp, #20
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	b2db      	uxtb	r3, r3
 8004f6e:	3b10      	subs	r3, #16
 8004f70:	4a14      	ldr	r2, [pc, #80]	; (8004fc4 <DMA_CalcBaseAndBitshift+0x64>)
 8004f72:	fba2 2303 	umull	r2, r3, r2, r3
 8004f76:	091b      	lsrs	r3, r3, #4
 8004f78:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004f7a:	4a13      	ldr	r2, [pc, #76]	; (8004fc8 <DMA_CalcBaseAndBitshift+0x68>)
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	4413      	add	r3, r2
 8004f80:	781b      	ldrb	r3, [r3, #0]
 8004f82:	461a      	mov	r2, r3
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	2b03      	cmp	r3, #3
 8004f8c:	d909      	bls.n	8004fa2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004f96:	f023 0303 	bic.w	r3, r3, #3
 8004f9a:	1d1a      	adds	r2, r3, #4
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	659a      	str	r2, [r3, #88]	; 0x58
 8004fa0:	e007      	b.n	8004fb2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004faa:	f023 0303 	bic.w	r3, r3, #3
 8004fae:	687a      	ldr	r2, [r7, #4]
 8004fb0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	3714      	adds	r7, #20
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc0:	4770      	bx	lr
 8004fc2:	bf00      	nop
 8004fc4:	aaaaaaab 	.word	0xaaaaaaab
 8004fc8:	0800b5a4 	.word	0x0800b5a4

08004fcc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b085      	sub	sp, #20
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fdc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	699b      	ldr	r3, [r3, #24]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d11f      	bne.n	8005026 <DMA_CheckFifoParam+0x5a>
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	2b03      	cmp	r3, #3
 8004fea:	d856      	bhi.n	800509a <DMA_CheckFifoParam+0xce>
 8004fec:	a201      	add	r2, pc, #4	; (adr r2, 8004ff4 <DMA_CheckFifoParam+0x28>)
 8004fee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ff2:	bf00      	nop
 8004ff4:	08005005 	.word	0x08005005
 8004ff8:	08005017 	.word	0x08005017
 8004ffc:	08005005 	.word	0x08005005
 8005000:	0800509b 	.word	0x0800509b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005008:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800500c:	2b00      	cmp	r3, #0
 800500e:	d046      	beq.n	800509e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005010:	2301      	movs	r3, #1
 8005012:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005014:	e043      	b.n	800509e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800501a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800501e:	d140      	bne.n	80050a2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005020:	2301      	movs	r3, #1
 8005022:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005024:	e03d      	b.n	80050a2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	699b      	ldr	r3, [r3, #24]
 800502a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800502e:	d121      	bne.n	8005074 <DMA_CheckFifoParam+0xa8>
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	2b03      	cmp	r3, #3
 8005034:	d837      	bhi.n	80050a6 <DMA_CheckFifoParam+0xda>
 8005036:	a201      	add	r2, pc, #4	; (adr r2, 800503c <DMA_CheckFifoParam+0x70>)
 8005038:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800503c:	0800504d 	.word	0x0800504d
 8005040:	08005053 	.word	0x08005053
 8005044:	0800504d 	.word	0x0800504d
 8005048:	08005065 	.word	0x08005065
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800504c:	2301      	movs	r3, #1
 800504e:	73fb      	strb	r3, [r7, #15]
      break;
 8005050:	e030      	b.n	80050b4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005056:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800505a:	2b00      	cmp	r3, #0
 800505c:	d025      	beq.n	80050aa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800505e:	2301      	movs	r3, #1
 8005060:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005062:	e022      	b.n	80050aa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005068:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800506c:	d11f      	bne.n	80050ae <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800506e:	2301      	movs	r3, #1
 8005070:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005072:	e01c      	b.n	80050ae <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	2b02      	cmp	r3, #2
 8005078:	d903      	bls.n	8005082 <DMA_CheckFifoParam+0xb6>
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	2b03      	cmp	r3, #3
 800507e:	d003      	beq.n	8005088 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005080:	e018      	b.n	80050b4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	73fb      	strb	r3, [r7, #15]
      break;
 8005086:	e015      	b.n	80050b4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800508c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005090:	2b00      	cmp	r3, #0
 8005092:	d00e      	beq.n	80050b2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005094:	2301      	movs	r3, #1
 8005096:	73fb      	strb	r3, [r7, #15]
      break;
 8005098:	e00b      	b.n	80050b2 <DMA_CheckFifoParam+0xe6>
      break;
 800509a:	bf00      	nop
 800509c:	e00a      	b.n	80050b4 <DMA_CheckFifoParam+0xe8>
      break;
 800509e:	bf00      	nop
 80050a0:	e008      	b.n	80050b4 <DMA_CheckFifoParam+0xe8>
      break;
 80050a2:	bf00      	nop
 80050a4:	e006      	b.n	80050b4 <DMA_CheckFifoParam+0xe8>
      break;
 80050a6:	bf00      	nop
 80050a8:	e004      	b.n	80050b4 <DMA_CheckFifoParam+0xe8>
      break;
 80050aa:	bf00      	nop
 80050ac:	e002      	b.n	80050b4 <DMA_CheckFifoParam+0xe8>
      break;   
 80050ae:	bf00      	nop
 80050b0:	e000      	b.n	80050b4 <DMA_CheckFifoParam+0xe8>
      break;
 80050b2:	bf00      	nop
    }
  } 
  
  return status; 
 80050b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80050b6:	4618      	mov	r0, r3
 80050b8:	3714      	adds	r7, #20
 80050ba:	46bd      	mov	sp, r7
 80050bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c0:	4770      	bx	lr
 80050c2:	bf00      	nop

080050c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80050c4:	b480      	push	{r7}
 80050c6:	b089      	sub	sp, #36	; 0x24
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
 80050cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80050ce:	2300      	movs	r3, #0
 80050d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80050d2:	2300      	movs	r3, #0
 80050d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80050d6:	2300      	movs	r3, #0
 80050d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80050da:	2300      	movs	r3, #0
 80050dc:	61fb      	str	r3, [r7, #28]
 80050de:	e177      	b.n	80053d0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80050e0:	2201      	movs	r2, #1
 80050e2:	69fb      	ldr	r3, [r7, #28]
 80050e4:	fa02 f303 	lsl.w	r3, r2, r3
 80050e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	697a      	ldr	r2, [r7, #20]
 80050f0:	4013      	ands	r3, r2
 80050f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80050f4:	693a      	ldr	r2, [r7, #16]
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	429a      	cmp	r2, r3
 80050fa:	f040 8166 	bne.w	80053ca <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	2b01      	cmp	r3, #1
 8005104:	d00b      	beq.n	800511e <HAL_GPIO_Init+0x5a>
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	2b02      	cmp	r3, #2
 800510c:	d007      	beq.n	800511e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005112:	2b11      	cmp	r3, #17
 8005114:	d003      	beq.n	800511e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	2b12      	cmp	r3, #18
 800511c:	d130      	bne.n	8005180 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	689b      	ldr	r3, [r3, #8]
 8005122:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005124:	69fb      	ldr	r3, [r7, #28]
 8005126:	005b      	lsls	r3, r3, #1
 8005128:	2203      	movs	r2, #3
 800512a:	fa02 f303 	lsl.w	r3, r2, r3
 800512e:	43db      	mvns	r3, r3
 8005130:	69ba      	ldr	r2, [r7, #24]
 8005132:	4013      	ands	r3, r2
 8005134:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	68da      	ldr	r2, [r3, #12]
 800513a:	69fb      	ldr	r3, [r7, #28]
 800513c:	005b      	lsls	r3, r3, #1
 800513e:	fa02 f303 	lsl.w	r3, r2, r3
 8005142:	69ba      	ldr	r2, [r7, #24]
 8005144:	4313      	orrs	r3, r2
 8005146:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	69ba      	ldr	r2, [r7, #24]
 800514c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005154:	2201      	movs	r2, #1
 8005156:	69fb      	ldr	r3, [r7, #28]
 8005158:	fa02 f303 	lsl.w	r3, r2, r3
 800515c:	43db      	mvns	r3, r3
 800515e:	69ba      	ldr	r2, [r7, #24]
 8005160:	4013      	ands	r3, r2
 8005162:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	091b      	lsrs	r3, r3, #4
 800516a:	f003 0201 	and.w	r2, r3, #1
 800516e:	69fb      	ldr	r3, [r7, #28]
 8005170:	fa02 f303 	lsl.w	r3, r2, r3
 8005174:	69ba      	ldr	r2, [r7, #24]
 8005176:	4313      	orrs	r3, r2
 8005178:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	69ba      	ldr	r2, [r7, #24]
 800517e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	68db      	ldr	r3, [r3, #12]
 8005184:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005186:	69fb      	ldr	r3, [r7, #28]
 8005188:	005b      	lsls	r3, r3, #1
 800518a:	2203      	movs	r2, #3
 800518c:	fa02 f303 	lsl.w	r3, r2, r3
 8005190:	43db      	mvns	r3, r3
 8005192:	69ba      	ldr	r2, [r7, #24]
 8005194:	4013      	ands	r3, r2
 8005196:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	689a      	ldr	r2, [r3, #8]
 800519c:	69fb      	ldr	r3, [r7, #28]
 800519e:	005b      	lsls	r3, r3, #1
 80051a0:	fa02 f303 	lsl.w	r3, r2, r3
 80051a4:	69ba      	ldr	r2, [r7, #24]
 80051a6:	4313      	orrs	r3, r2
 80051a8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	69ba      	ldr	r2, [r7, #24]
 80051ae:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	2b02      	cmp	r3, #2
 80051b6:	d003      	beq.n	80051c0 <HAL_GPIO_Init+0xfc>
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	2b12      	cmp	r3, #18
 80051be:	d123      	bne.n	8005208 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80051c0:	69fb      	ldr	r3, [r7, #28]
 80051c2:	08da      	lsrs	r2, r3, #3
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	3208      	adds	r2, #8
 80051c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80051ce:	69fb      	ldr	r3, [r7, #28]
 80051d0:	f003 0307 	and.w	r3, r3, #7
 80051d4:	009b      	lsls	r3, r3, #2
 80051d6:	220f      	movs	r2, #15
 80051d8:	fa02 f303 	lsl.w	r3, r2, r3
 80051dc:	43db      	mvns	r3, r3
 80051de:	69ba      	ldr	r2, [r7, #24]
 80051e0:	4013      	ands	r3, r2
 80051e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	691a      	ldr	r2, [r3, #16]
 80051e8:	69fb      	ldr	r3, [r7, #28]
 80051ea:	f003 0307 	and.w	r3, r3, #7
 80051ee:	009b      	lsls	r3, r3, #2
 80051f0:	fa02 f303 	lsl.w	r3, r2, r3
 80051f4:	69ba      	ldr	r2, [r7, #24]
 80051f6:	4313      	orrs	r3, r2
 80051f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80051fa:	69fb      	ldr	r3, [r7, #28]
 80051fc:	08da      	lsrs	r2, r3, #3
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	3208      	adds	r2, #8
 8005202:	69b9      	ldr	r1, [r7, #24]
 8005204:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800520e:	69fb      	ldr	r3, [r7, #28]
 8005210:	005b      	lsls	r3, r3, #1
 8005212:	2203      	movs	r2, #3
 8005214:	fa02 f303 	lsl.w	r3, r2, r3
 8005218:	43db      	mvns	r3, r3
 800521a:	69ba      	ldr	r2, [r7, #24]
 800521c:	4013      	ands	r3, r2
 800521e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	f003 0203 	and.w	r2, r3, #3
 8005228:	69fb      	ldr	r3, [r7, #28]
 800522a:	005b      	lsls	r3, r3, #1
 800522c:	fa02 f303 	lsl.w	r3, r2, r3
 8005230:	69ba      	ldr	r2, [r7, #24]
 8005232:	4313      	orrs	r3, r2
 8005234:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	69ba      	ldr	r2, [r7, #24]
 800523a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005244:	2b00      	cmp	r3, #0
 8005246:	f000 80c0 	beq.w	80053ca <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800524a:	2300      	movs	r3, #0
 800524c:	60fb      	str	r3, [r7, #12]
 800524e:	4b66      	ldr	r3, [pc, #408]	; (80053e8 <HAL_GPIO_Init+0x324>)
 8005250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005252:	4a65      	ldr	r2, [pc, #404]	; (80053e8 <HAL_GPIO_Init+0x324>)
 8005254:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005258:	6453      	str	r3, [r2, #68]	; 0x44
 800525a:	4b63      	ldr	r3, [pc, #396]	; (80053e8 <HAL_GPIO_Init+0x324>)
 800525c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800525e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005262:	60fb      	str	r3, [r7, #12]
 8005264:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005266:	4a61      	ldr	r2, [pc, #388]	; (80053ec <HAL_GPIO_Init+0x328>)
 8005268:	69fb      	ldr	r3, [r7, #28]
 800526a:	089b      	lsrs	r3, r3, #2
 800526c:	3302      	adds	r3, #2
 800526e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005272:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005274:	69fb      	ldr	r3, [r7, #28]
 8005276:	f003 0303 	and.w	r3, r3, #3
 800527a:	009b      	lsls	r3, r3, #2
 800527c:	220f      	movs	r2, #15
 800527e:	fa02 f303 	lsl.w	r3, r2, r3
 8005282:	43db      	mvns	r3, r3
 8005284:	69ba      	ldr	r2, [r7, #24]
 8005286:	4013      	ands	r3, r2
 8005288:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	4a58      	ldr	r2, [pc, #352]	; (80053f0 <HAL_GPIO_Init+0x32c>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d037      	beq.n	8005302 <HAL_GPIO_Init+0x23e>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	4a57      	ldr	r2, [pc, #348]	; (80053f4 <HAL_GPIO_Init+0x330>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d031      	beq.n	80052fe <HAL_GPIO_Init+0x23a>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	4a56      	ldr	r2, [pc, #344]	; (80053f8 <HAL_GPIO_Init+0x334>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d02b      	beq.n	80052fa <HAL_GPIO_Init+0x236>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	4a55      	ldr	r2, [pc, #340]	; (80053fc <HAL_GPIO_Init+0x338>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d025      	beq.n	80052f6 <HAL_GPIO_Init+0x232>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	4a54      	ldr	r2, [pc, #336]	; (8005400 <HAL_GPIO_Init+0x33c>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d01f      	beq.n	80052f2 <HAL_GPIO_Init+0x22e>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	4a53      	ldr	r2, [pc, #332]	; (8005404 <HAL_GPIO_Init+0x340>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d019      	beq.n	80052ee <HAL_GPIO_Init+0x22a>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	4a52      	ldr	r2, [pc, #328]	; (8005408 <HAL_GPIO_Init+0x344>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d013      	beq.n	80052ea <HAL_GPIO_Init+0x226>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	4a51      	ldr	r2, [pc, #324]	; (800540c <HAL_GPIO_Init+0x348>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d00d      	beq.n	80052e6 <HAL_GPIO_Init+0x222>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	4a50      	ldr	r2, [pc, #320]	; (8005410 <HAL_GPIO_Init+0x34c>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d007      	beq.n	80052e2 <HAL_GPIO_Init+0x21e>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	4a4f      	ldr	r2, [pc, #316]	; (8005414 <HAL_GPIO_Init+0x350>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d101      	bne.n	80052de <HAL_GPIO_Init+0x21a>
 80052da:	2309      	movs	r3, #9
 80052dc:	e012      	b.n	8005304 <HAL_GPIO_Init+0x240>
 80052de:	230a      	movs	r3, #10
 80052e0:	e010      	b.n	8005304 <HAL_GPIO_Init+0x240>
 80052e2:	2308      	movs	r3, #8
 80052e4:	e00e      	b.n	8005304 <HAL_GPIO_Init+0x240>
 80052e6:	2307      	movs	r3, #7
 80052e8:	e00c      	b.n	8005304 <HAL_GPIO_Init+0x240>
 80052ea:	2306      	movs	r3, #6
 80052ec:	e00a      	b.n	8005304 <HAL_GPIO_Init+0x240>
 80052ee:	2305      	movs	r3, #5
 80052f0:	e008      	b.n	8005304 <HAL_GPIO_Init+0x240>
 80052f2:	2304      	movs	r3, #4
 80052f4:	e006      	b.n	8005304 <HAL_GPIO_Init+0x240>
 80052f6:	2303      	movs	r3, #3
 80052f8:	e004      	b.n	8005304 <HAL_GPIO_Init+0x240>
 80052fa:	2302      	movs	r3, #2
 80052fc:	e002      	b.n	8005304 <HAL_GPIO_Init+0x240>
 80052fe:	2301      	movs	r3, #1
 8005300:	e000      	b.n	8005304 <HAL_GPIO_Init+0x240>
 8005302:	2300      	movs	r3, #0
 8005304:	69fa      	ldr	r2, [r7, #28]
 8005306:	f002 0203 	and.w	r2, r2, #3
 800530a:	0092      	lsls	r2, r2, #2
 800530c:	4093      	lsls	r3, r2
 800530e:	69ba      	ldr	r2, [r7, #24]
 8005310:	4313      	orrs	r3, r2
 8005312:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005314:	4935      	ldr	r1, [pc, #212]	; (80053ec <HAL_GPIO_Init+0x328>)
 8005316:	69fb      	ldr	r3, [r7, #28]
 8005318:	089b      	lsrs	r3, r3, #2
 800531a:	3302      	adds	r3, #2
 800531c:	69ba      	ldr	r2, [r7, #24]
 800531e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005322:	4b3d      	ldr	r3, [pc, #244]	; (8005418 <HAL_GPIO_Init+0x354>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005328:	693b      	ldr	r3, [r7, #16]
 800532a:	43db      	mvns	r3, r3
 800532c:	69ba      	ldr	r2, [r7, #24]
 800532e:	4013      	ands	r3, r2
 8005330:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800533a:	2b00      	cmp	r3, #0
 800533c:	d003      	beq.n	8005346 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800533e:	69ba      	ldr	r2, [r7, #24]
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	4313      	orrs	r3, r2
 8005344:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005346:	4a34      	ldr	r2, [pc, #208]	; (8005418 <HAL_GPIO_Init+0x354>)
 8005348:	69bb      	ldr	r3, [r7, #24]
 800534a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800534c:	4b32      	ldr	r3, [pc, #200]	; (8005418 <HAL_GPIO_Init+0x354>)
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	43db      	mvns	r3, r3
 8005356:	69ba      	ldr	r2, [r7, #24]
 8005358:	4013      	ands	r3, r2
 800535a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005364:	2b00      	cmp	r3, #0
 8005366:	d003      	beq.n	8005370 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005368:	69ba      	ldr	r2, [r7, #24]
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	4313      	orrs	r3, r2
 800536e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005370:	4a29      	ldr	r2, [pc, #164]	; (8005418 <HAL_GPIO_Init+0x354>)
 8005372:	69bb      	ldr	r3, [r7, #24]
 8005374:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005376:	4b28      	ldr	r3, [pc, #160]	; (8005418 <HAL_GPIO_Init+0x354>)
 8005378:	689b      	ldr	r3, [r3, #8]
 800537a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800537c:	693b      	ldr	r3, [r7, #16]
 800537e:	43db      	mvns	r3, r3
 8005380:	69ba      	ldr	r2, [r7, #24]
 8005382:	4013      	ands	r3, r2
 8005384:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800538e:	2b00      	cmp	r3, #0
 8005390:	d003      	beq.n	800539a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005392:	69ba      	ldr	r2, [r7, #24]
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	4313      	orrs	r3, r2
 8005398:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800539a:	4a1f      	ldr	r2, [pc, #124]	; (8005418 <HAL_GPIO_Init+0x354>)
 800539c:	69bb      	ldr	r3, [r7, #24]
 800539e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80053a0:	4b1d      	ldr	r3, [pc, #116]	; (8005418 <HAL_GPIO_Init+0x354>)
 80053a2:	68db      	ldr	r3, [r3, #12]
 80053a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80053a6:	693b      	ldr	r3, [r7, #16]
 80053a8:	43db      	mvns	r3, r3
 80053aa:	69ba      	ldr	r2, [r7, #24]
 80053ac:	4013      	ands	r3, r2
 80053ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d003      	beq.n	80053c4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80053bc:	69ba      	ldr	r2, [r7, #24]
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	4313      	orrs	r3, r2
 80053c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80053c4:	4a14      	ldr	r2, [pc, #80]	; (8005418 <HAL_GPIO_Init+0x354>)
 80053c6:	69bb      	ldr	r3, [r7, #24]
 80053c8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80053ca:	69fb      	ldr	r3, [r7, #28]
 80053cc:	3301      	adds	r3, #1
 80053ce:	61fb      	str	r3, [r7, #28]
 80053d0:	69fb      	ldr	r3, [r7, #28]
 80053d2:	2b0f      	cmp	r3, #15
 80053d4:	f67f ae84 	bls.w	80050e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80053d8:	bf00      	nop
 80053da:	bf00      	nop
 80053dc:	3724      	adds	r7, #36	; 0x24
 80053de:	46bd      	mov	sp, r7
 80053e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e4:	4770      	bx	lr
 80053e6:	bf00      	nop
 80053e8:	40023800 	.word	0x40023800
 80053ec:	40013800 	.word	0x40013800
 80053f0:	40020000 	.word	0x40020000
 80053f4:	40020400 	.word	0x40020400
 80053f8:	40020800 	.word	0x40020800
 80053fc:	40020c00 	.word	0x40020c00
 8005400:	40021000 	.word	0x40021000
 8005404:	40021400 	.word	0x40021400
 8005408:	40021800 	.word	0x40021800
 800540c:	40021c00 	.word	0x40021c00
 8005410:	40022000 	.word	0x40022000
 8005414:	40022400 	.word	0x40022400
 8005418:	40013c00 	.word	0x40013c00

0800541c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800541c:	b480      	push	{r7}
 800541e:	b083      	sub	sp, #12
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
 8005424:	460b      	mov	r3, r1
 8005426:	807b      	strh	r3, [r7, #2]
 8005428:	4613      	mov	r3, r2
 800542a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800542c:	787b      	ldrb	r3, [r7, #1]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d003      	beq.n	800543a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005432:	887a      	ldrh	r2, [r7, #2]
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005438:	e003      	b.n	8005442 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800543a:	887b      	ldrh	r3, [r7, #2]
 800543c:	041a      	lsls	r2, r3, #16
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	619a      	str	r2, [r3, #24]
}
 8005442:	bf00      	nop
 8005444:	370c      	adds	r7, #12
 8005446:	46bd      	mov	sp, r7
 8005448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544c:	4770      	bx	lr
	...

08005450 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b082      	sub	sp, #8
 8005454:	af00      	add	r7, sp, #0
 8005456:	4603      	mov	r3, r0
 8005458:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800545a:	4b08      	ldr	r3, [pc, #32]	; (800547c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800545c:	695a      	ldr	r2, [r3, #20]
 800545e:	88fb      	ldrh	r3, [r7, #6]
 8005460:	4013      	ands	r3, r2
 8005462:	2b00      	cmp	r3, #0
 8005464:	d006      	beq.n	8005474 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005466:	4a05      	ldr	r2, [pc, #20]	; (800547c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005468:	88fb      	ldrh	r3, [r7, #6]
 800546a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800546c:	88fb      	ldrh	r3, [r7, #6]
 800546e:	4618      	mov	r0, r3
 8005470:	f000 f806 	bl	8005480 <HAL_GPIO_EXTI_Callback>
  }
}
 8005474:	bf00      	nop
 8005476:	3708      	adds	r7, #8
 8005478:	46bd      	mov	sp, r7
 800547a:	bd80      	pop	{r7, pc}
 800547c:	40013c00 	.word	0x40013c00

08005480 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005480:	b480      	push	{r7}
 8005482:	b083      	sub	sp, #12
 8005484:	af00      	add	r7, sp, #0
 8005486:	4603      	mov	r3, r0
 8005488:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800548a:	bf00      	nop
 800548c:	370c      	adds	r7, #12
 800548e:	46bd      	mov	sp, r7
 8005490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005494:	4770      	bx	lr
	...

08005498 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b086      	sub	sp, #24
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d101      	bne.n	80054aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80054a6:	2301      	movs	r3, #1
 80054a8:	e25b      	b.n	8005962 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f003 0301 	and.w	r3, r3, #1
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d075      	beq.n	80055a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80054b6:	4ba3      	ldr	r3, [pc, #652]	; (8005744 <HAL_RCC_OscConfig+0x2ac>)
 80054b8:	689b      	ldr	r3, [r3, #8]
 80054ba:	f003 030c 	and.w	r3, r3, #12
 80054be:	2b04      	cmp	r3, #4
 80054c0:	d00c      	beq.n	80054dc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80054c2:	4ba0      	ldr	r3, [pc, #640]	; (8005744 <HAL_RCC_OscConfig+0x2ac>)
 80054c4:	689b      	ldr	r3, [r3, #8]
 80054c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80054ca:	2b08      	cmp	r3, #8
 80054cc:	d112      	bne.n	80054f4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80054ce:	4b9d      	ldr	r3, [pc, #628]	; (8005744 <HAL_RCC_OscConfig+0x2ac>)
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80054da:	d10b      	bne.n	80054f4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054dc:	4b99      	ldr	r3, [pc, #612]	; (8005744 <HAL_RCC_OscConfig+0x2ac>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d05b      	beq.n	80055a0 <HAL_RCC_OscConfig+0x108>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d157      	bne.n	80055a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80054f0:	2301      	movs	r3, #1
 80054f2:	e236      	b.n	8005962 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054fc:	d106      	bne.n	800550c <HAL_RCC_OscConfig+0x74>
 80054fe:	4b91      	ldr	r3, [pc, #580]	; (8005744 <HAL_RCC_OscConfig+0x2ac>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a90      	ldr	r2, [pc, #576]	; (8005744 <HAL_RCC_OscConfig+0x2ac>)
 8005504:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005508:	6013      	str	r3, [r2, #0]
 800550a:	e01d      	b.n	8005548 <HAL_RCC_OscConfig+0xb0>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005514:	d10c      	bne.n	8005530 <HAL_RCC_OscConfig+0x98>
 8005516:	4b8b      	ldr	r3, [pc, #556]	; (8005744 <HAL_RCC_OscConfig+0x2ac>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4a8a      	ldr	r2, [pc, #552]	; (8005744 <HAL_RCC_OscConfig+0x2ac>)
 800551c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005520:	6013      	str	r3, [r2, #0]
 8005522:	4b88      	ldr	r3, [pc, #544]	; (8005744 <HAL_RCC_OscConfig+0x2ac>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a87      	ldr	r2, [pc, #540]	; (8005744 <HAL_RCC_OscConfig+0x2ac>)
 8005528:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800552c:	6013      	str	r3, [r2, #0]
 800552e:	e00b      	b.n	8005548 <HAL_RCC_OscConfig+0xb0>
 8005530:	4b84      	ldr	r3, [pc, #528]	; (8005744 <HAL_RCC_OscConfig+0x2ac>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a83      	ldr	r2, [pc, #524]	; (8005744 <HAL_RCC_OscConfig+0x2ac>)
 8005536:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800553a:	6013      	str	r3, [r2, #0]
 800553c:	4b81      	ldr	r3, [pc, #516]	; (8005744 <HAL_RCC_OscConfig+0x2ac>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a80      	ldr	r2, [pc, #512]	; (8005744 <HAL_RCC_OscConfig+0x2ac>)
 8005542:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005546:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d013      	beq.n	8005578 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005550:	f7fe fa8a 	bl	8003a68 <HAL_GetTick>
 8005554:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005556:	e008      	b.n	800556a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005558:	f7fe fa86 	bl	8003a68 <HAL_GetTick>
 800555c:	4602      	mov	r2, r0
 800555e:	693b      	ldr	r3, [r7, #16]
 8005560:	1ad3      	subs	r3, r2, r3
 8005562:	2b64      	cmp	r3, #100	; 0x64
 8005564:	d901      	bls.n	800556a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005566:	2303      	movs	r3, #3
 8005568:	e1fb      	b.n	8005962 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800556a:	4b76      	ldr	r3, [pc, #472]	; (8005744 <HAL_RCC_OscConfig+0x2ac>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005572:	2b00      	cmp	r3, #0
 8005574:	d0f0      	beq.n	8005558 <HAL_RCC_OscConfig+0xc0>
 8005576:	e014      	b.n	80055a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005578:	f7fe fa76 	bl	8003a68 <HAL_GetTick>
 800557c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800557e:	e008      	b.n	8005592 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005580:	f7fe fa72 	bl	8003a68 <HAL_GetTick>
 8005584:	4602      	mov	r2, r0
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	1ad3      	subs	r3, r2, r3
 800558a:	2b64      	cmp	r3, #100	; 0x64
 800558c:	d901      	bls.n	8005592 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800558e:	2303      	movs	r3, #3
 8005590:	e1e7      	b.n	8005962 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005592:	4b6c      	ldr	r3, [pc, #432]	; (8005744 <HAL_RCC_OscConfig+0x2ac>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800559a:	2b00      	cmp	r3, #0
 800559c:	d1f0      	bne.n	8005580 <HAL_RCC_OscConfig+0xe8>
 800559e:	e000      	b.n	80055a2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f003 0302 	and.w	r3, r3, #2
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d063      	beq.n	8005676 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80055ae:	4b65      	ldr	r3, [pc, #404]	; (8005744 <HAL_RCC_OscConfig+0x2ac>)
 80055b0:	689b      	ldr	r3, [r3, #8]
 80055b2:	f003 030c 	and.w	r3, r3, #12
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d00b      	beq.n	80055d2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80055ba:	4b62      	ldr	r3, [pc, #392]	; (8005744 <HAL_RCC_OscConfig+0x2ac>)
 80055bc:	689b      	ldr	r3, [r3, #8]
 80055be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80055c2:	2b08      	cmp	r3, #8
 80055c4:	d11c      	bne.n	8005600 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80055c6:	4b5f      	ldr	r3, [pc, #380]	; (8005744 <HAL_RCC_OscConfig+0x2ac>)
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d116      	bne.n	8005600 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80055d2:	4b5c      	ldr	r3, [pc, #368]	; (8005744 <HAL_RCC_OscConfig+0x2ac>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f003 0302 	and.w	r3, r3, #2
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d005      	beq.n	80055ea <HAL_RCC_OscConfig+0x152>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	68db      	ldr	r3, [r3, #12]
 80055e2:	2b01      	cmp	r3, #1
 80055e4:	d001      	beq.n	80055ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80055e6:	2301      	movs	r3, #1
 80055e8:	e1bb      	b.n	8005962 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055ea:	4b56      	ldr	r3, [pc, #344]	; (8005744 <HAL_RCC_OscConfig+0x2ac>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	691b      	ldr	r3, [r3, #16]
 80055f6:	00db      	lsls	r3, r3, #3
 80055f8:	4952      	ldr	r1, [pc, #328]	; (8005744 <HAL_RCC_OscConfig+0x2ac>)
 80055fa:	4313      	orrs	r3, r2
 80055fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80055fe:	e03a      	b.n	8005676 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	68db      	ldr	r3, [r3, #12]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d020      	beq.n	800564a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005608:	4b4f      	ldr	r3, [pc, #316]	; (8005748 <HAL_RCC_OscConfig+0x2b0>)
 800560a:	2201      	movs	r2, #1
 800560c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800560e:	f7fe fa2b 	bl	8003a68 <HAL_GetTick>
 8005612:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005614:	e008      	b.n	8005628 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005616:	f7fe fa27 	bl	8003a68 <HAL_GetTick>
 800561a:	4602      	mov	r2, r0
 800561c:	693b      	ldr	r3, [r7, #16]
 800561e:	1ad3      	subs	r3, r2, r3
 8005620:	2b02      	cmp	r3, #2
 8005622:	d901      	bls.n	8005628 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005624:	2303      	movs	r3, #3
 8005626:	e19c      	b.n	8005962 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005628:	4b46      	ldr	r3, [pc, #280]	; (8005744 <HAL_RCC_OscConfig+0x2ac>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f003 0302 	and.w	r3, r3, #2
 8005630:	2b00      	cmp	r3, #0
 8005632:	d0f0      	beq.n	8005616 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005634:	4b43      	ldr	r3, [pc, #268]	; (8005744 <HAL_RCC_OscConfig+0x2ac>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	691b      	ldr	r3, [r3, #16]
 8005640:	00db      	lsls	r3, r3, #3
 8005642:	4940      	ldr	r1, [pc, #256]	; (8005744 <HAL_RCC_OscConfig+0x2ac>)
 8005644:	4313      	orrs	r3, r2
 8005646:	600b      	str	r3, [r1, #0]
 8005648:	e015      	b.n	8005676 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800564a:	4b3f      	ldr	r3, [pc, #252]	; (8005748 <HAL_RCC_OscConfig+0x2b0>)
 800564c:	2200      	movs	r2, #0
 800564e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005650:	f7fe fa0a 	bl	8003a68 <HAL_GetTick>
 8005654:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005656:	e008      	b.n	800566a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005658:	f7fe fa06 	bl	8003a68 <HAL_GetTick>
 800565c:	4602      	mov	r2, r0
 800565e:	693b      	ldr	r3, [r7, #16]
 8005660:	1ad3      	subs	r3, r2, r3
 8005662:	2b02      	cmp	r3, #2
 8005664:	d901      	bls.n	800566a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005666:	2303      	movs	r3, #3
 8005668:	e17b      	b.n	8005962 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800566a:	4b36      	ldr	r3, [pc, #216]	; (8005744 <HAL_RCC_OscConfig+0x2ac>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f003 0302 	and.w	r3, r3, #2
 8005672:	2b00      	cmp	r3, #0
 8005674:	d1f0      	bne.n	8005658 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f003 0308 	and.w	r3, r3, #8
 800567e:	2b00      	cmp	r3, #0
 8005680:	d030      	beq.n	80056e4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	695b      	ldr	r3, [r3, #20]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d016      	beq.n	80056b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800568a:	4b30      	ldr	r3, [pc, #192]	; (800574c <HAL_RCC_OscConfig+0x2b4>)
 800568c:	2201      	movs	r2, #1
 800568e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005690:	f7fe f9ea 	bl	8003a68 <HAL_GetTick>
 8005694:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005696:	e008      	b.n	80056aa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005698:	f7fe f9e6 	bl	8003a68 <HAL_GetTick>
 800569c:	4602      	mov	r2, r0
 800569e:	693b      	ldr	r3, [r7, #16]
 80056a0:	1ad3      	subs	r3, r2, r3
 80056a2:	2b02      	cmp	r3, #2
 80056a4:	d901      	bls.n	80056aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80056a6:	2303      	movs	r3, #3
 80056a8:	e15b      	b.n	8005962 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80056aa:	4b26      	ldr	r3, [pc, #152]	; (8005744 <HAL_RCC_OscConfig+0x2ac>)
 80056ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056ae:	f003 0302 	and.w	r3, r3, #2
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d0f0      	beq.n	8005698 <HAL_RCC_OscConfig+0x200>
 80056b6:	e015      	b.n	80056e4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80056b8:	4b24      	ldr	r3, [pc, #144]	; (800574c <HAL_RCC_OscConfig+0x2b4>)
 80056ba:	2200      	movs	r2, #0
 80056bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056be:	f7fe f9d3 	bl	8003a68 <HAL_GetTick>
 80056c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80056c4:	e008      	b.n	80056d8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80056c6:	f7fe f9cf 	bl	8003a68 <HAL_GetTick>
 80056ca:	4602      	mov	r2, r0
 80056cc:	693b      	ldr	r3, [r7, #16]
 80056ce:	1ad3      	subs	r3, r2, r3
 80056d0:	2b02      	cmp	r3, #2
 80056d2:	d901      	bls.n	80056d8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80056d4:	2303      	movs	r3, #3
 80056d6:	e144      	b.n	8005962 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80056d8:	4b1a      	ldr	r3, [pc, #104]	; (8005744 <HAL_RCC_OscConfig+0x2ac>)
 80056da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056dc:	f003 0302 	and.w	r3, r3, #2
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d1f0      	bne.n	80056c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f003 0304 	and.w	r3, r3, #4
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	f000 80a0 	beq.w	8005832 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80056f2:	2300      	movs	r3, #0
 80056f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80056f6:	4b13      	ldr	r3, [pc, #76]	; (8005744 <HAL_RCC_OscConfig+0x2ac>)
 80056f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d10f      	bne.n	8005722 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005702:	2300      	movs	r3, #0
 8005704:	60bb      	str	r3, [r7, #8]
 8005706:	4b0f      	ldr	r3, [pc, #60]	; (8005744 <HAL_RCC_OscConfig+0x2ac>)
 8005708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800570a:	4a0e      	ldr	r2, [pc, #56]	; (8005744 <HAL_RCC_OscConfig+0x2ac>)
 800570c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005710:	6413      	str	r3, [r2, #64]	; 0x40
 8005712:	4b0c      	ldr	r3, [pc, #48]	; (8005744 <HAL_RCC_OscConfig+0x2ac>)
 8005714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005716:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800571a:	60bb      	str	r3, [r7, #8]
 800571c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800571e:	2301      	movs	r3, #1
 8005720:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005722:	4b0b      	ldr	r3, [pc, #44]	; (8005750 <HAL_RCC_OscConfig+0x2b8>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800572a:	2b00      	cmp	r3, #0
 800572c:	d121      	bne.n	8005772 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800572e:	4b08      	ldr	r3, [pc, #32]	; (8005750 <HAL_RCC_OscConfig+0x2b8>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a07      	ldr	r2, [pc, #28]	; (8005750 <HAL_RCC_OscConfig+0x2b8>)
 8005734:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005738:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800573a:	f7fe f995 	bl	8003a68 <HAL_GetTick>
 800573e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005740:	e011      	b.n	8005766 <HAL_RCC_OscConfig+0x2ce>
 8005742:	bf00      	nop
 8005744:	40023800 	.word	0x40023800
 8005748:	42470000 	.word	0x42470000
 800574c:	42470e80 	.word	0x42470e80
 8005750:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005754:	f7fe f988 	bl	8003a68 <HAL_GetTick>
 8005758:	4602      	mov	r2, r0
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	1ad3      	subs	r3, r2, r3
 800575e:	2b02      	cmp	r3, #2
 8005760:	d901      	bls.n	8005766 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005762:	2303      	movs	r3, #3
 8005764:	e0fd      	b.n	8005962 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005766:	4b81      	ldr	r3, [pc, #516]	; (800596c <HAL_RCC_OscConfig+0x4d4>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800576e:	2b00      	cmp	r3, #0
 8005770:	d0f0      	beq.n	8005754 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	689b      	ldr	r3, [r3, #8]
 8005776:	2b01      	cmp	r3, #1
 8005778:	d106      	bne.n	8005788 <HAL_RCC_OscConfig+0x2f0>
 800577a:	4b7d      	ldr	r3, [pc, #500]	; (8005970 <HAL_RCC_OscConfig+0x4d8>)
 800577c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800577e:	4a7c      	ldr	r2, [pc, #496]	; (8005970 <HAL_RCC_OscConfig+0x4d8>)
 8005780:	f043 0301 	orr.w	r3, r3, #1
 8005784:	6713      	str	r3, [r2, #112]	; 0x70
 8005786:	e01c      	b.n	80057c2 <HAL_RCC_OscConfig+0x32a>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	689b      	ldr	r3, [r3, #8]
 800578c:	2b05      	cmp	r3, #5
 800578e:	d10c      	bne.n	80057aa <HAL_RCC_OscConfig+0x312>
 8005790:	4b77      	ldr	r3, [pc, #476]	; (8005970 <HAL_RCC_OscConfig+0x4d8>)
 8005792:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005794:	4a76      	ldr	r2, [pc, #472]	; (8005970 <HAL_RCC_OscConfig+0x4d8>)
 8005796:	f043 0304 	orr.w	r3, r3, #4
 800579a:	6713      	str	r3, [r2, #112]	; 0x70
 800579c:	4b74      	ldr	r3, [pc, #464]	; (8005970 <HAL_RCC_OscConfig+0x4d8>)
 800579e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057a0:	4a73      	ldr	r2, [pc, #460]	; (8005970 <HAL_RCC_OscConfig+0x4d8>)
 80057a2:	f043 0301 	orr.w	r3, r3, #1
 80057a6:	6713      	str	r3, [r2, #112]	; 0x70
 80057a8:	e00b      	b.n	80057c2 <HAL_RCC_OscConfig+0x32a>
 80057aa:	4b71      	ldr	r3, [pc, #452]	; (8005970 <HAL_RCC_OscConfig+0x4d8>)
 80057ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057ae:	4a70      	ldr	r2, [pc, #448]	; (8005970 <HAL_RCC_OscConfig+0x4d8>)
 80057b0:	f023 0301 	bic.w	r3, r3, #1
 80057b4:	6713      	str	r3, [r2, #112]	; 0x70
 80057b6:	4b6e      	ldr	r3, [pc, #440]	; (8005970 <HAL_RCC_OscConfig+0x4d8>)
 80057b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057ba:	4a6d      	ldr	r2, [pc, #436]	; (8005970 <HAL_RCC_OscConfig+0x4d8>)
 80057bc:	f023 0304 	bic.w	r3, r3, #4
 80057c0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	689b      	ldr	r3, [r3, #8]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d015      	beq.n	80057f6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057ca:	f7fe f94d 	bl	8003a68 <HAL_GetTick>
 80057ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057d0:	e00a      	b.n	80057e8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80057d2:	f7fe f949 	bl	8003a68 <HAL_GetTick>
 80057d6:	4602      	mov	r2, r0
 80057d8:	693b      	ldr	r3, [r7, #16]
 80057da:	1ad3      	subs	r3, r2, r3
 80057dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d901      	bls.n	80057e8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80057e4:	2303      	movs	r3, #3
 80057e6:	e0bc      	b.n	8005962 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057e8:	4b61      	ldr	r3, [pc, #388]	; (8005970 <HAL_RCC_OscConfig+0x4d8>)
 80057ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057ec:	f003 0302 	and.w	r3, r3, #2
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d0ee      	beq.n	80057d2 <HAL_RCC_OscConfig+0x33a>
 80057f4:	e014      	b.n	8005820 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80057f6:	f7fe f937 	bl	8003a68 <HAL_GetTick>
 80057fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80057fc:	e00a      	b.n	8005814 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80057fe:	f7fe f933 	bl	8003a68 <HAL_GetTick>
 8005802:	4602      	mov	r2, r0
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	1ad3      	subs	r3, r2, r3
 8005808:	f241 3288 	movw	r2, #5000	; 0x1388
 800580c:	4293      	cmp	r3, r2
 800580e:	d901      	bls.n	8005814 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005810:	2303      	movs	r3, #3
 8005812:	e0a6      	b.n	8005962 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005814:	4b56      	ldr	r3, [pc, #344]	; (8005970 <HAL_RCC_OscConfig+0x4d8>)
 8005816:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005818:	f003 0302 	and.w	r3, r3, #2
 800581c:	2b00      	cmp	r3, #0
 800581e:	d1ee      	bne.n	80057fe <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005820:	7dfb      	ldrb	r3, [r7, #23]
 8005822:	2b01      	cmp	r3, #1
 8005824:	d105      	bne.n	8005832 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005826:	4b52      	ldr	r3, [pc, #328]	; (8005970 <HAL_RCC_OscConfig+0x4d8>)
 8005828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800582a:	4a51      	ldr	r2, [pc, #324]	; (8005970 <HAL_RCC_OscConfig+0x4d8>)
 800582c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005830:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	699b      	ldr	r3, [r3, #24]
 8005836:	2b00      	cmp	r3, #0
 8005838:	f000 8092 	beq.w	8005960 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800583c:	4b4c      	ldr	r3, [pc, #304]	; (8005970 <HAL_RCC_OscConfig+0x4d8>)
 800583e:	689b      	ldr	r3, [r3, #8]
 8005840:	f003 030c 	and.w	r3, r3, #12
 8005844:	2b08      	cmp	r3, #8
 8005846:	d05c      	beq.n	8005902 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	699b      	ldr	r3, [r3, #24]
 800584c:	2b02      	cmp	r3, #2
 800584e:	d141      	bne.n	80058d4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005850:	4b48      	ldr	r3, [pc, #288]	; (8005974 <HAL_RCC_OscConfig+0x4dc>)
 8005852:	2200      	movs	r2, #0
 8005854:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005856:	f7fe f907 	bl	8003a68 <HAL_GetTick>
 800585a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800585c:	e008      	b.n	8005870 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800585e:	f7fe f903 	bl	8003a68 <HAL_GetTick>
 8005862:	4602      	mov	r2, r0
 8005864:	693b      	ldr	r3, [r7, #16]
 8005866:	1ad3      	subs	r3, r2, r3
 8005868:	2b02      	cmp	r3, #2
 800586a:	d901      	bls.n	8005870 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800586c:	2303      	movs	r3, #3
 800586e:	e078      	b.n	8005962 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005870:	4b3f      	ldr	r3, [pc, #252]	; (8005970 <HAL_RCC_OscConfig+0x4d8>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005878:	2b00      	cmp	r3, #0
 800587a:	d1f0      	bne.n	800585e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	69da      	ldr	r2, [r3, #28]
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6a1b      	ldr	r3, [r3, #32]
 8005884:	431a      	orrs	r2, r3
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800588a:	019b      	lsls	r3, r3, #6
 800588c:	431a      	orrs	r2, r3
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005892:	085b      	lsrs	r3, r3, #1
 8005894:	3b01      	subs	r3, #1
 8005896:	041b      	lsls	r3, r3, #16
 8005898:	431a      	orrs	r2, r3
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800589e:	061b      	lsls	r3, r3, #24
 80058a0:	4933      	ldr	r1, [pc, #204]	; (8005970 <HAL_RCC_OscConfig+0x4d8>)
 80058a2:	4313      	orrs	r3, r2
 80058a4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80058a6:	4b33      	ldr	r3, [pc, #204]	; (8005974 <HAL_RCC_OscConfig+0x4dc>)
 80058a8:	2201      	movs	r2, #1
 80058aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058ac:	f7fe f8dc 	bl	8003a68 <HAL_GetTick>
 80058b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058b2:	e008      	b.n	80058c6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058b4:	f7fe f8d8 	bl	8003a68 <HAL_GetTick>
 80058b8:	4602      	mov	r2, r0
 80058ba:	693b      	ldr	r3, [r7, #16]
 80058bc:	1ad3      	subs	r3, r2, r3
 80058be:	2b02      	cmp	r3, #2
 80058c0:	d901      	bls.n	80058c6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80058c2:	2303      	movs	r3, #3
 80058c4:	e04d      	b.n	8005962 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058c6:	4b2a      	ldr	r3, [pc, #168]	; (8005970 <HAL_RCC_OscConfig+0x4d8>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d0f0      	beq.n	80058b4 <HAL_RCC_OscConfig+0x41c>
 80058d2:	e045      	b.n	8005960 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058d4:	4b27      	ldr	r3, [pc, #156]	; (8005974 <HAL_RCC_OscConfig+0x4dc>)
 80058d6:	2200      	movs	r2, #0
 80058d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058da:	f7fe f8c5 	bl	8003a68 <HAL_GetTick>
 80058de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058e0:	e008      	b.n	80058f4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058e2:	f7fe f8c1 	bl	8003a68 <HAL_GetTick>
 80058e6:	4602      	mov	r2, r0
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	1ad3      	subs	r3, r2, r3
 80058ec:	2b02      	cmp	r3, #2
 80058ee:	d901      	bls.n	80058f4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80058f0:	2303      	movs	r3, #3
 80058f2:	e036      	b.n	8005962 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058f4:	4b1e      	ldr	r3, [pc, #120]	; (8005970 <HAL_RCC_OscConfig+0x4d8>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d1f0      	bne.n	80058e2 <HAL_RCC_OscConfig+0x44a>
 8005900:	e02e      	b.n	8005960 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	699b      	ldr	r3, [r3, #24]
 8005906:	2b01      	cmp	r3, #1
 8005908:	d101      	bne.n	800590e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800590a:	2301      	movs	r3, #1
 800590c:	e029      	b.n	8005962 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800590e:	4b18      	ldr	r3, [pc, #96]	; (8005970 <HAL_RCC_OscConfig+0x4d8>)
 8005910:	685b      	ldr	r3, [r3, #4]
 8005912:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	69db      	ldr	r3, [r3, #28]
 800591e:	429a      	cmp	r2, r3
 8005920:	d11c      	bne.n	800595c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800592c:	429a      	cmp	r2, r3
 800592e:	d115      	bne.n	800595c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005930:	68fa      	ldr	r2, [r7, #12]
 8005932:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005936:	4013      	ands	r3, r2
 8005938:	687a      	ldr	r2, [r7, #4]
 800593a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800593c:	4293      	cmp	r3, r2
 800593e:	d10d      	bne.n	800595c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800594a:	429a      	cmp	r2, r3
 800594c:	d106      	bne.n	800595c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005958:	429a      	cmp	r2, r3
 800595a:	d001      	beq.n	8005960 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800595c:	2301      	movs	r3, #1
 800595e:	e000      	b.n	8005962 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8005960:	2300      	movs	r3, #0
}
 8005962:	4618      	mov	r0, r3
 8005964:	3718      	adds	r7, #24
 8005966:	46bd      	mov	sp, r7
 8005968:	bd80      	pop	{r7, pc}
 800596a:	bf00      	nop
 800596c:	40007000 	.word	0x40007000
 8005970:	40023800 	.word	0x40023800
 8005974:	42470060 	.word	0x42470060

08005978 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b084      	sub	sp, #16
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
 8005980:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d101      	bne.n	800598c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005988:	2301      	movs	r3, #1
 800598a:	e0cc      	b.n	8005b26 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800598c:	4b68      	ldr	r3, [pc, #416]	; (8005b30 <HAL_RCC_ClockConfig+0x1b8>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f003 030f 	and.w	r3, r3, #15
 8005994:	683a      	ldr	r2, [r7, #0]
 8005996:	429a      	cmp	r2, r3
 8005998:	d90c      	bls.n	80059b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800599a:	4b65      	ldr	r3, [pc, #404]	; (8005b30 <HAL_RCC_ClockConfig+0x1b8>)
 800599c:	683a      	ldr	r2, [r7, #0]
 800599e:	b2d2      	uxtb	r2, r2
 80059a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80059a2:	4b63      	ldr	r3, [pc, #396]	; (8005b30 <HAL_RCC_ClockConfig+0x1b8>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f003 030f 	and.w	r3, r3, #15
 80059aa:	683a      	ldr	r2, [r7, #0]
 80059ac:	429a      	cmp	r2, r3
 80059ae:	d001      	beq.n	80059b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80059b0:	2301      	movs	r3, #1
 80059b2:	e0b8      	b.n	8005b26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f003 0302 	and.w	r3, r3, #2
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d020      	beq.n	8005a02 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f003 0304 	and.w	r3, r3, #4
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d005      	beq.n	80059d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80059cc:	4b59      	ldr	r3, [pc, #356]	; (8005b34 <HAL_RCC_ClockConfig+0x1bc>)
 80059ce:	689b      	ldr	r3, [r3, #8]
 80059d0:	4a58      	ldr	r2, [pc, #352]	; (8005b34 <HAL_RCC_ClockConfig+0x1bc>)
 80059d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80059d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f003 0308 	and.w	r3, r3, #8
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d005      	beq.n	80059f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80059e4:	4b53      	ldr	r3, [pc, #332]	; (8005b34 <HAL_RCC_ClockConfig+0x1bc>)
 80059e6:	689b      	ldr	r3, [r3, #8]
 80059e8:	4a52      	ldr	r2, [pc, #328]	; (8005b34 <HAL_RCC_ClockConfig+0x1bc>)
 80059ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80059ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80059f0:	4b50      	ldr	r3, [pc, #320]	; (8005b34 <HAL_RCC_ClockConfig+0x1bc>)
 80059f2:	689b      	ldr	r3, [r3, #8]
 80059f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	689b      	ldr	r3, [r3, #8]
 80059fc:	494d      	ldr	r1, [pc, #308]	; (8005b34 <HAL_RCC_ClockConfig+0x1bc>)
 80059fe:	4313      	orrs	r3, r2
 8005a00:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f003 0301 	and.w	r3, r3, #1
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d044      	beq.n	8005a98 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	685b      	ldr	r3, [r3, #4]
 8005a12:	2b01      	cmp	r3, #1
 8005a14:	d107      	bne.n	8005a26 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a16:	4b47      	ldr	r3, [pc, #284]	; (8005b34 <HAL_RCC_ClockConfig+0x1bc>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d119      	bne.n	8005a56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a22:	2301      	movs	r3, #1
 8005a24:	e07f      	b.n	8005b26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	2b02      	cmp	r3, #2
 8005a2c:	d003      	beq.n	8005a36 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005a32:	2b03      	cmp	r3, #3
 8005a34:	d107      	bne.n	8005a46 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a36:	4b3f      	ldr	r3, [pc, #252]	; (8005b34 <HAL_RCC_ClockConfig+0x1bc>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d109      	bne.n	8005a56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a42:	2301      	movs	r3, #1
 8005a44:	e06f      	b.n	8005b26 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a46:	4b3b      	ldr	r3, [pc, #236]	; (8005b34 <HAL_RCC_ClockConfig+0x1bc>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f003 0302 	and.w	r3, r3, #2
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d101      	bne.n	8005a56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a52:	2301      	movs	r3, #1
 8005a54:	e067      	b.n	8005b26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005a56:	4b37      	ldr	r3, [pc, #220]	; (8005b34 <HAL_RCC_ClockConfig+0x1bc>)
 8005a58:	689b      	ldr	r3, [r3, #8]
 8005a5a:	f023 0203 	bic.w	r2, r3, #3
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	4934      	ldr	r1, [pc, #208]	; (8005b34 <HAL_RCC_ClockConfig+0x1bc>)
 8005a64:	4313      	orrs	r3, r2
 8005a66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005a68:	f7fd fffe 	bl	8003a68 <HAL_GetTick>
 8005a6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a6e:	e00a      	b.n	8005a86 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a70:	f7fd fffa 	bl	8003a68 <HAL_GetTick>
 8005a74:	4602      	mov	r2, r0
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	1ad3      	subs	r3, r2, r3
 8005a7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d901      	bls.n	8005a86 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005a82:	2303      	movs	r3, #3
 8005a84:	e04f      	b.n	8005b26 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a86:	4b2b      	ldr	r3, [pc, #172]	; (8005b34 <HAL_RCC_ClockConfig+0x1bc>)
 8005a88:	689b      	ldr	r3, [r3, #8]
 8005a8a:	f003 020c 	and.w	r2, r3, #12
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	009b      	lsls	r3, r3, #2
 8005a94:	429a      	cmp	r2, r3
 8005a96:	d1eb      	bne.n	8005a70 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005a98:	4b25      	ldr	r3, [pc, #148]	; (8005b30 <HAL_RCC_ClockConfig+0x1b8>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f003 030f 	and.w	r3, r3, #15
 8005aa0:	683a      	ldr	r2, [r7, #0]
 8005aa2:	429a      	cmp	r2, r3
 8005aa4:	d20c      	bcs.n	8005ac0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005aa6:	4b22      	ldr	r3, [pc, #136]	; (8005b30 <HAL_RCC_ClockConfig+0x1b8>)
 8005aa8:	683a      	ldr	r2, [r7, #0]
 8005aaa:	b2d2      	uxtb	r2, r2
 8005aac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005aae:	4b20      	ldr	r3, [pc, #128]	; (8005b30 <HAL_RCC_ClockConfig+0x1b8>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f003 030f 	and.w	r3, r3, #15
 8005ab6:	683a      	ldr	r2, [r7, #0]
 8005ab8:	429a      	cmp	r2, r3
 8005aba:	d001      	beq.n	8005ac0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005abc:	2301      	movs	r3, #1
 8005abe:	e032      	b.n	8005b26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f003 0304 	and.w	r3, r3, #4
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d008      	beq.n	8005ade <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005acc:	4b19      	ldr	r3, [pc, #100]	; (8005b34 <HAL_RCC_ClockConfig+0x1bc>)
 8005ace:	689b      	ldr	r3, [r3, #8]
 8005ad0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	68db      	ldr	r3, [r3, #12]
 8005ad8:	4916      	ldr	r1, [pc, #88]	; (8005b34 <HAL_RCC_ClockConfig+0x1bc>)
 8005ada:	4313      	orrs	r3, r2
 8005adc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f003 0308 	and.w	r3, r3, #8
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d009      	beq.n	8005afe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005aea:	4b12      	ldr	r3, [pc, #72]	; (8005b34 <HAL_RCC_ClockConfig+0x1bc>)
 8005aec:	689b      	ldr	r3, [r3, #8]
 8005aee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	691b      	ldr	r3, [r3, #16]
 8005af6:	00db      	lsls	r3, r3, #3
 8005af8:	490e      	ldr	r1, [pc, #56]	; (8005b34 <HAL_RCC_ClockConfig+0x1bc>)
 8005afa:	4313      	orrs	r3, r2
 8005afc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005afe:	f000 f821 	bl	8005b44 <HAL_RCC_GetSysClockFreq>
 8005b02:	4602      	mov	r2, r0
 8005b04:	4b0b      	ldr	r3, [pc, #44]	; (8005b34 <HAL_RCC_ClockConfig+0x1bc>)
 8005b06:	689b      	ldr	r3, [r3, #8]
 8005b08:	091b      	lsrs	r3, r3, #4
 8005b0a:	f003 030f 	and.w	r3, r3, #15
 8005b0e:	490a      	ldr	r1, [pc, #40]	; (8005b38 <HAL_RCC_ClockConfig+0x1c0>)
 8005b10:	5ccb      	ldrb	r3, [r1, r3]
 8005b12:	fa22 f303 	lsr.w	r3, r2, r3
 8005b16:	4a09      	ldr	r2, [pc, #36]	; (8005b3c <HAL_RCC_ClockConfig+0x1c4>)
 8005b18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005b1a:	4b09      	ldr	r3, [pc, #36]	; (8005b40 <HAL_RCC_ClockConfig+0x1c8>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4618      	mov	r0, r3
 8005b20:	f7fb ffc0 	bl	8001aa4 <HAL_InitTick>

  return HAL_OK;
 8005b24:	2300      	movs	r3, #0
}
 8005b26:	4618      	mov	r0, r3
 8005b28:	3710      	adds	r7, #16
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bd80      	pop	{r7, pc}
 8005b2e:	bf00      	nop
 8005b30:	40023c00 	.word	0x40023c00
 8005b34:	40023800 	.word	0x40023800
 8005b38:	0800b58c 	.word	0x0800b58c
 8005b3c:	20000000 	.word	0x20000000
 8005b40:	2000000c 	.word	0x2000000c

08005b44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b44:	b5b0      	push	{r4, r5, r7, lr}
 8005b46:	b084      	sub	sp, #16
 8005b48:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005b4a:	2100      	movs	r1, #0
 8005b4c:	6079      	str	r1, [r7, #4]
 8005b4e:	2100      	movs	r1, #0
 8005b50:	60f9      	str	r1, [r7, #12]
 8005b52:	2100      	movs	r1, #0
 8005b54:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005b56:	2100      	movs	r1, #0
 8005b58:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005b5a:	4952      	ldr	r1, [pc, #328]	; (8005ca4 <HAL_RCC_GetSysClockFreq+0x160>)
 8005b5c:	6889      	ldr	r1, [r1, #8]
 8005b5e:	f001 010c 	and.w	r1, r1, #12
 8005b62:	2908      	cmp	r1, #8
 8005b64:	d00d      	beq.n	8005b82 <HAL_RCC_GetSysClockFreq+0x3e>
 8005b66:	2908      	cmp	r1, #8
 8005b68:	f200 8094 	bhi.w	8005c94 <HAL_RCC_GetSysClockFreq+0x150>
 8005b6c:	2900      	cmp	r1, #0
 8005b6e:	d002      	beq.n	8005b76 <HAL_RCC_GetSysClockFreq+0x32>
 8005b70:	2904      	cmp	r1, #4
 8005b72:	d003      	beq.n	8005b7c <HAL_RCC_GetSysClockFreq+0x38>
 8005b74:	e08e      	b.n	8005c94 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005b76:	4b4c      	ldr	r3, [pc, #304]	; (8005ca8 <HAL_RCC_GetSysClockFreq+0x164>)
 8005b78:	60bb      	str	r3, [r7, #8]
       break;
 8005b7a:	e08e      	b.n	8005c9a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005b7c:	4b4b      	ldr	r3, [pc, #300]	; (8005cac <HAL_RCC_GetSysClockFreq+0x168>)
 8005b7e:	60bb      	str	r3, [r7, #8]
      break;
 8005b80:	e08b      	b.n	8005c9a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005b82:	4948      	ldr	r1, [pc, #288]	; (8005ca4 <HAL_RCC_GetSysClockFreq+0x160>)
 8005b84:	6849      	ldr	r1, [r1, #4]
 8005b86:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8005b8a:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005b8c:	4945      	ldr	r1, [pc, #276]	; (8005ca4 <HAL_RCC_GetSysClockFreq+0x160>)
 8005b8e:	6849      	ldr	r1, [r1, #4]
 8005b90:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8005b94:	2900      	cmp	r1, #0
 8005b96:	d024      	beq.n	8005be2 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b98:	4942      	ldr	r1, [pc, #264]	; (8005ca4 <HAL_RCC_GetSysClockFreq+0x160>)
 8005b9a:	6849      	ldr	r1, [r1, #4]
 8005b9c:	0989      	lsrs	r1, r1, #6
 8005b9e:	4608      	mov	r0, r1
 8005ba0:	f04f 0100 	mov.w	r1, #0
 8005ba4:	f240 14ff 	movw	r4, #511	; 0x1ff
 8005ba8:	f04f 0500 	mov.w	r5, #0
 8005bac:	ea00 0204 	and.w	r2, r0, r4
 8005bb0:	ea01 0305 	and.w	r3, r1, r5
 8005bb4:	493d      	ldr	r1, [pc, #244]	; (8005cac <HAL_RCC_GetSysClockFreq+0x168>)
 8005bb6:	fb01 f003 	mul.w	r0, r1, r3
 8005bba:	2100      	movs	r1, #0
 8005bbc:	fb01 f102 	mul.w	r1, r1, r2
 8005bc0:	1844      	adds	r4, r0, r1
 8005bc2:	493a      	ldr	r1, [pc, #232]	; (8005cac <HAL_RCC_GetSysClockFreq+0x168>)
 8005bc4:	fba2 0101 	umull	r0, r1, r2, r1
 8005bc8:	1863      	adds	r3, r4, r1
 8005bca:	4619      	mov	r1, r3
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	461a      	mov	r2, r3
 8005bd0:	f04f 0300 	mov.w	r3, #0
 8005bd4:	f7fa ffda 	bl	8000b8c <__aeabi_uldivmod>
 8005bd8:	4602      	mov	r2, r0
 8005bda:	460b      	mov	r3, r1
 8005bdc:	4613      	mov	r3, r2
 8005bde:	60fb      	str	r3, [r7, #12]
 8005be0:	e04a      	b.n	8005c78 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005be2:	4b30      	ldr	r3, [pc, #192]	; (8005ca4 <HAL_RCC_GetSysClockFreq+0x160>)
 8005be4:	685b      	ldr	r3, [r3, #4]
 8005be6:	099b      	lsrs	r3, r3, #6
 8005be8:	461a      	mov	r2, r3
 8005bea:	f04f 0300 	mov.w	r3, #0
 8005bee:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005bf2:	f04f 0100 	mov.w	r1, #0
 8005bf6:	ea02 0400 	and.w	r4, r2, r0
 8005bfa:	ea03 0501 	and.w	r5, r3, r1
 8005bfe:	4620      	mov	r0, r4
 8005c00:	4629      	mov	r1, r5
 8005c02:	f04f 0200 	mov.w	r2, #0
 8005c06:	f04f 0300 	mov.w	r3, #0
 8005c0a:	014b      	lsls	r3, r1, #5
 8005c0c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005c10:	0142      	lsls	r2, r0, #5
 8005c12:	4610      	mov	r0, r2
 8005c14:	4619      	mov	r1, r3
 8005c16:	1b00      	subs	r0, r0, r4
 8005c18:	eb61 0105 	sbc.w	r1, r1, r5
 8005c1c:	f04f 0200 	mov.w	r2, #0
 8005c20:	f04f 0300 	mov.w	r3, #0
 8005c24:	018b      	lsls	r3, r1, #6
 8005c26:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005c2a:	0182      	lsls	r2, r0, #6
 8005c2c:	1a12      	subs	r2, r2, r0
 8005c2e:	eb63 0301 	sbc.w	r3, r3, r1
 8005c32:	f04f 0000 	mov.w	r0, #0
 8005c36:	f04f 0100 	mov.w	r1, #0
 8005c3a:	00d9      	lsls	r1, r3, #3
 8005c3c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005c40:	00d0      	lsls	r0, r2, #3
 8005c42:	4602      	mov	r2, r0
 8005c44:	460b      	mov	r3, r1
 8005c46:	1912      	adds	r2, r2, r4
 8005c48:	eb45 0303 	adc.w	r3, r5, r3
 8005c4c:	f04f 0000 	mov.w	r0, #0
 8005c50:	f04f 0100 	mov.w	r1, #0
 8005c54:	0299      	lsls	r1, r3, #10
 8005c56:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005c5a:	0290      	lsls	r0, r2, #10
 8005c5c:	4602      	mov	r2, r0
 8005c5e:	460b      	mov	r3, r1
 8005c60:	4610      	mov	r0, r2
 8005c62:	4619      	mov	r1, r3
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	461a      	mov	r2, r3
 8005c68:	f04f 0300 	mov.w	r3, #0
 8005c6c:	f7fa ff8e 	bl	8000b8c <__aeabi_uldivmod>
 8005c70:	4602      	mov	r2, r0
 8005c72:	460b      	mov	r3, r1
 8005c74:	4613      	mov	r3, r2
 8005c76:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005c78:	4b0a      	ldr	r3, [pc, #40]	; (8005ca4 <HAL_RCC_GetSysClockFreq+0x160>)
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	0c1b      	lsrs	r3, r3, #16
 8005c7e:	f003 0303 	and.w	r3, r3, #3
 8005c82:	3301      	adds	r3, #1
 8005c84:	005b      	lsls	r3, r3, #1
 8005c86:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005c88:	68fa      	ldr	r2, [r7, #12]
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c90:	60bb      	str	r3, [r7, #8]
      break;
 8005c92:	e002      	b.n	8005c9a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005c94:	4b04      	ldr	r3, [pc, #16]	; (8005ca8 <HAL_RCC_GetSysClockFreq+0x164>)
 8005c96:	60bb      	str	r3, [r7, #8]
      break;
 8005c98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005c9a:	68bb      	ldr	r3, [r7, #8]
}
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	3710      	adds	r7, #16
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bdb0      	pop	{r4, r5, r7, pc}
 8005ca4:	40023800 	.word	0x40023800
 8005ca8:	00f42400 	.word	0x00f42400
 8005cac:	00b71b00 	.word	0x00b71b00

08005cb0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005cb4:	4b03      	ldr	r3, [pc, #12]	; (8005cc4 <HAL_RCC_GetHCLKFreq+0x14>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
}
 8005cb8:	4618      	mov	r0, r3
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc0:	4770      	bx	lr
 8005cc2:	bf00      	nop
 8005cc4:	20000000 	.word	0x20000000

08005cc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005ccc:	f7ff fff0 	bl	8005cb0 <HAL_RCC_GetHCLKFreq>
 8005cd0:	4602      	mov	r2, r0
 8005cd2:	4b05      	ldr	r3, [pc, #20]	; (8005ce8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005cd4:	689b      	ldr	r3, [r3, #8]
 8005cd6:	0a9b      	lsrs	r3, r3, #10
 8005cd8:	f003 0307 	and.w	r3, r3, #7
 8005cdc:	4903      	ldr	r1, [pc, #12]	; (8005cec <HAL_RCC_GetPCLK1Freq+0x24>)
 8005cde:	5ccb      	ldrb	r3, [r1, r3]
 8005ce0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	bd80      	pop	{r7, pc}
 8005ce8:	40023800 	.word	0x40023800
 8005cec:	0800b59c 	.word	0x0800b59c

08005cf0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005cf4:	f7ff ffdc 	bl	8005cb0 <HAL_RCC_GetHCLKFreq>
 8005cf8:	4602      	mov	r2, r0
 8005cfa:	4b05      	ldr	r3, [pc, #20]	; (8005d10 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005cfc:	689b      	ldr	r3, [r3, #8]
 8005cfe:	0b5b      	lsrs	r3, r3, #13
 8005d00:	f003 0307 	and.w	r3, r3, #7
 8005d04:	4903      	ldr	r1, [pc, #12]	; (8005d14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005d06:	5ccb      	ldrb	r3, [r1, r3]
 8005d08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	bd80      	pop	{r7, pc}
 8005d10:	40023800 	.word	0x40023800
 8005d14:	0800b59c 	.word	0x0800b59c

08005d18 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005d18:	b480      	push	{r7}
 8005d1a:	b083      	sub	sp, #12
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
 8005d20:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	220f      	movs	r2, #15
 8005d26:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005d28:	4b12      	ldr	r3, [pc, #72]	; (8005d74 <HAL_RCC_GetClockConfig+0x5c>)
 8005d2a:	689b      	ldr	r3, [r3, #8]
 8005d2c:	f003 0203 	and.w	r2, r3, #3
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005d34:	4b0f      	ldr	r3, [pc, #60]	; (8005d74 <HAL_RCC_GetClockConfig+0x5c>)
 8005d36:	689b      	ldr	r3, [r3, #8]
 8005d38:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005d40:	4b0c      	ldr	r3, [pc, #48]	; (8005d74 <HAL_RCC_GetClockConfig+0x5c>)
 8005d42:	689b      	ldr	r3, [r3, #8]
 8005d44:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005d4c:	4b09      	ldr	r3, [pc, #36]	; (8005d74 <HAL_RCC_GetClockConfig+0x5c>)
 8005d4e:	689b      	ldr	r3, [r3, #8]
 8005d50:	08db      	lsrs	r3, r3, #3
 8005d52:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005d5a:	4b07      	ldr	r3, [pc, #28]	; (8005d78 <HAL_RCC_GetClockConfig+0x60>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f003 020f 	and.w	r2, r3, #15
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	601a      	str	r2, [r3, #0]
}
 8005d66:	bf00      	nop
 8005d68:	370c      	adds	r7, #12
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d70:	4770      	bx	lr
 8005d72:	bf00      	nop
 8005d74:	40023800 	.word	0x40023800
 8005d78:	40023c00 	.word	0x40023c00

08005d7c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b082      	sub	sp, #8
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d101      	bne.n	8005d8e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	e056      	b.n	8005e3c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2200      	movs	r2, #0
 8005d92:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005d9a:	b2db      	uxtb	r3, r3
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d106      	bne.n	8005dae <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2200      	movs	r2, #0
 8005da4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005da8:	6878      	ldr	r0, [r7, #4]
 8005daa:	f7fb fd79 	bl	80018a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2202      	movs	r2, #2
 8005db2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	681a      	ldr	r2, [r3, #0]
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005dc4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	685a      	ldr	r2, [r3, #4]
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	689b      	ldr	r3, [r3, #8]
 8005dce:	431a      	orrs	r2, r3
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	68db      	ldr	r3, [r3, #12]
 8005dd4:	431a      	orrs	r2, r3
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	691b      	ldr	r3, [r3, #16]
 8005dda:	431a      	orrs	r2, r3
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	695b      	ldr	r3, [r3, #20]
 8005de0:	431a      	orrs	r2, r3
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	699b      	ldr	r3, [r3, #24]
 8005de6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005dea:	431a      	orrs	r2, r3
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	69db      	ldr	r3, [r3, #28]
 8005df0:	431a      	orrs	r2, r3
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6a1b      	ldr	r3, [r3, #32]
 8005df6:	ea42 0103 	orr.w	r1, r2, r3
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	430a      	orrs	r2, r1
 8005e04:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	699b      	ldr	r3, [r3, #24]
 8005e0a:	0c1b      	lsrs	r3, r3, #16
 8005e0c:	f003 0104 	and.w	r1, r3, #4
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	430a      	orrs	r2, r1
 8005e1a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	69da      	ldr	r2, [r3, #28]
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005e2a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2201      	movs	r2, #1
 8005e36:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005e3a:	2300      	movs	r3, #0
}
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	3708      	adds	r7, #8
 8005e40:	46bd      	mov	sp, r7
 8005e42:	bd80      	pop	{r7, pc}

08005e44 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b082      	sub	sp, #8
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d101      	bne.n	8005e56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005e52:	2301      	movs	r3, #1
 8005e54:	e01d      	b.n	8005e92 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e5c:	b2db      	uxtb	r3, r3
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d106      	bne.n	8005e70 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2200      	movs	r2, #0
 8005e66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005e6a:	6878      	ldr	r0, [r7, #4]
 8005e6c:	f7fc f812 	bl	8001e94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2202      	movs	r2, #2
 8005e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681a      	ldr	r2, [r3, #0]
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	3304      	adds	r3, #4
 8005e80:	4619      	mov	r1, r3
 8005e82:	4610      	mov	r0, r2
 8005e84:	f000 fb50 	bl	8006528 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2201      	movs	r2, #1
 8005e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e90:	2300      	movs	r3, #0
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	3708      	adds	r7, #8
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd80      	pop	{r7, pc}

08005e9a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005e9a:	b480      	push	{r7}
 8005e9c:	b085      	sub	sp, #20
 8005e9e:	af00      	add	r7, sp, #0
 8005ea0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	68da      	ldr	r2, [r3, #12]
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f042 0201 	orr.w	r2, r2, #1
 8005eb0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	689b      	ldr	r3, [r3, #8]
 8005eb8:	f003 0307 	and.w	r3, r3, #7
 8005ebc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	2b06      	cmp	r3, #6
 8005ec2:	d007      	beq.n	8005ed4 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	681a      	ldr	r2, [r3, #0]
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f042 0201 	orr.w	r2, r2, #1
 8005ed2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005ed4:	2300      	movs	r3, #0
}
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	3714      	adds	r7, #20
 8005eda:	46bd      	mov	sp, r7
 8005edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee0:	4770      	bx	lr

08005ee2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005ee2:	b580      	push	{r7, lr}
 8005ee4:	b082      	sub	sp, #8
 8005ee6:	af00      	add	r7, sp, #0
 8005ee8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d101      	bne.n	8005ef4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	e01d      	b.n	8005f30 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005efa:	b2db      	uxtb	r3, r3
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d106      	bne.n	8005f0e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2200      	movs	r2, #0
 8005f04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005f08:	6878      	ldr	r0, [r7, #4]
 8005f0a:	f7fb ffa1 	bl	8001e50 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2202      	movs	r2, #2
 8005f12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681a      	ldr	r2, [r3, #0]
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	3304      	adds	r3, #4
 8005f1e:	4619      	mov	r1, r3
 8005f20:	4610      	mov	r0, r2
 8005f22:	f000 fb01 	bl	8006528 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2201      	movs	r2, #1
 8005f2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005f2e:	2300      	movs	r3, #0
}
 8005f30:	4618      	mov	r0, r3
 8005f32:	3708      	adds	r7, #8
 8005f34:	46bd      	mov	sp, r7
 8005f36:	bd80      	pop	{r7, pc}

08005f38 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b084      	sub	sp, #16
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
 8005f40:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	2201      	movs	r2, #1
 8005f48:	6839      	ldr	r1, [r7, #0]
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	f000 fdd6 	bl	8006afc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4a15      	ldr	r2, [pc, #84]	; (8005fac <HAL_TIM_PWM_Start+0x74>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d004      	beq.n	8005f64 <HAL_TIM_PWM_Start+0x2c>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4a14      	ldr	r2, [pc, #80]	; (8005fb0 <HAL_TIM_PWM_Start+0x78>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d101      	bne.n	8005f68 <HAL_TIM_PWM_Start+0x30>
 8005f64:	2301      	movs	r3, #1
 8005f66:	e000      	b.n	8005f6a <HAL_TIM_PWM_Start+0x32>
 8005f68:	2300      	movs	r3, #0
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d007      	beq.n	8005f7e <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005f7c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	689b      	ldr	r3, [r3, #8]
 8005f84:	f003 0307 	and.w	r3, r3, #7
 8005f88:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	2b06      	cmp	r3, #6
 8005f8e:	d007      	beq.n	8005fa0 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	681a      	ldr	r2, [r3, #0]
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f042 0201 	orr.w	r2, r2, #1
 8005f9e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005fa0:	2300      	movs	r3, #0
}
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	3710      	adds	r7, #16
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bd80      	pop	{r7, pc}
 8005faa:	bf00      	nop
 8005fac:	40010000 	.word	0x40010000
 8005fb0:	40010400 	.word	0x40010400

08005fb4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b082      	sub	sp, #8
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	691b      	ldr	r3, [r3, #16]
 8005fc2:	f003 0302 	and.w	r3, r3, #2
 8005fc6:	2b02      	cmp	r3, #2
 8005fc8:	d122      	bne.n	8006010 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	68db      	ldr	r3, [r3, #12]
 8005fd0:	f003 0302 	and.w	r3, r3, #2
 8005fd4:	2b02      	cmp	r3, #2
 8005fd6:	d11b      	bne.n	8006010 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f06f 0202 	mvn.w	r2, #2
 8005fe0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2201      	movs	r2, #1
 8005fe6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	699b      	ldr	r3, [r3, #24]
 8005fee:	f003 0303 	and.w	r3, r3, #3
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d003      	beq.n	8005ffe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005ff6:	6878      	ldr	r0, [r7, #4]
 8005ff8:	f000 fa78 	bl	80064ec <HAL_TIM_IC_CaptureCallback>
 8005ffc:	e005      	b.n	800600a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ffe:	6878      	ldr	r0, [r7, #4]
 8006000:	f000 fa6a 	bl	80064d8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	f000 fa7b 	bl	8006500 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2200      	movs	r2, #0
 800600e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	691b      	ldr	r3, [r3, #16]
 8006016:	f003 0304 	and.w	r3, r3, #4
 800601a:	2b04      	cmp	r3, #4
 800601c:	d122      	bne.n	8006064 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	68db      	ldr	r3, [r3, #12]
 8006024:	f003 0304 	and.w	r3, r3, #4
 8006028:	2b04      	cmp	r3, #4
 800602a:	d11b      	bne.n	8006064 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f06f 0204 	mvn.w	r2, #4
 8006034:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2202      	movs	r2, #2
 800603a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	699b      	ldr	r3, [r3, #24]
 8006042:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006046:	2b00      	cmp	r3, #0
 8006048:	d003      	beq.n	8006052 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	f000 fa4e 	bl	80064ec <HAL_TIM_IC_CaptureCallback>
 8006050:	e005      	b.n	800605e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	f000 fa40 	bl	80064d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006058:	6878      	ldr	r0, [r7, #4]
 800605a:	f000 fa51 	bl	8006500 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2200      	movs	r2, #0
 8006062:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	691b      	ldr	r3, [r3, #16]
 800606a:	f003 0308 	and.w	r3, r3, #8
 800606e:	2b08      	cmp	r3, #8
 8006070:	d122      	bne.n	80060b8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	68db      	ldr	r3, [r3, #12]
 8006078:	f003 0308 	and.w	r3, r3, #8
 800607c:	2b08      	cmp	r3, #8
 800607e:	d11b      	bne.n	80060b8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f06f 0208 	mvn.w	r2, #8
 8006088:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2204      	movs	r2, #4
 800608e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	69db      	ldr	r3, [r3, #28]
 8006096:	f003 0303 	and.w	r3, r3, #3
 800609a:	2b00      	cmp	r3, #0
 800609c:	d003      	beq.n	80060a6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	f000 fa24 	bl	80064ec <HAL_TIM_IC_CaptureCallback>
 80060a4:	e005      	b.n	80060b2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060a6:	6878      	ldr	r0, [r7, #4]
 80060a8:	f000 fa16 	bl	80064d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060ac:	6878      	ldr	r0, [r7, #4]
 80060ae:	f000 fa27 	bl	8006500 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2200      	movs	r2, #0
 80060b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	691b      	ldr	r3, [r3, #16]
 80060be:	f003 0310 	and.w	r3, r3, #16
 80060c2:	2b10      	cmp	r3, #16
 80060c4:	d122      	bne.n	800610c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	68db      	ldr	r3, [r3, #12]
 80060cc:	f003 0310 	and.w	r3, r3, #16
 80060d0:	2b10      	cmp	r3, #16
 80060d2:	d11b      	bne.n	800610c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f06f 0210 	mvn.w	r2, #16
 80060dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2208      	movs	r2, #8
 80060e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	69db      	ldr	r3, [r3, #28]
 80060ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d003      	beq.n	80060fa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060f2:	6878      	ldr	r0, [r7, #4]
 80060f4:	f000 f9fa 	bl	80064ec <HAL_TIM_IC_CaptureCallback>
 80060f8:	e005      	b.n	8006106 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	f000 f9ec 	bl	80064d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006100:	6878      	ldr	r0, [r7, #4]
 8006102:	f000 f9fd 	bl	8006500 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2200      	movs	r2, #0
 800610a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	691b      	ldr	r3, [r3, #16]
 8006112:	f003 0301 	and.w	r3, r3, #1
 8006116:	2b01      	cmp	r3, #1
 8006118:	d10e      	bne.n	8006138 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	68db      	ldr	r3, [r3, #12]
 8006120:	f003 0301 	and.w	r3, r3, #1
 8006124:	2b01      	cmp	r3, #1
 8006126:	d107      	bne.n	8006138 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f06f 0201 	mvn.w	r2, #1
 8006130:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006132:	6878      	ldr	r0, [r7, #4]
 8006134:	f7fb fb66 	bl	8001804 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	691b      	ldr	r3, [r3, #16]
 800613e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006142:	2b80      	cmp	r3, #128	; 0x80
 8006144:	d10e      	bne.n	8006164 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	68db      	ldr	r3, [r3, #12]
 800614c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006150:	2b80      	cmp	r3, #128	; 0x80
 8006152:	d107      	bne.n	8006164 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800615c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800615e:	6878      	ldr	r0, [r7, #4]
 8006160:	f000 fd78 	bl	8006c54 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	691b      	ldr	r3, [r3, #16]
 800616a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800616e:	2b40      	cmp	r3, #64	; 0x40
 8006170:	d10e      	bne.n	8006190 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	68db      	ldr	r3, [r3, #12]
 8006178:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800617c:	2b40      	cmp	r3, #64	; 0x40
 800617e:	d107      	bne.n	8006190 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006188:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800618a:	6878      	ldr	r0, [r7, #4]
 800618c:	f000 f9c2 	bl	8006514 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	691b      	ldr	r3, [r3, #16]
 8006196:	f003 0320 	and.w	r3, r3, #32
 800619a:	2b20      	cmp	r3, #32
 800619c:	d10e      	bne.n	80061bc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	68db      	ldr	r3, [r3, #12]
 80061a4:	f003 0320 	and.w	r3, r3, #32
 80061a8:	2b20      	cmp	r3, #32
 80061aa:	d107      	bne.n	80061bc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f06f 0220 	mvn.w	r2, #32
 80061b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80061b6:	6878      	ldr	r0, [r7, #4]
 80061b8:	f000 fd42 	bl	8006c40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80061bc:	bf00      	nop
 80061be:	3708      	adds	r7, #8
 80061c0:	46bd      	mov	sp, r7
 80061c2:	bd80      	pop	{r7, pc}

080061c4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b084      	sub	sp, #16
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	60f8      	str	r0, [r7, #12]
 80061cc:	60b9      	str	r1, [r7, #8]
 80061ce:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061d6:	2b01      	cmp	r3, #1
 80061d8:	d101      	bne.n	80061de <HAL_TIM_PWM_ConfigChannel+0x1a>
 80061da:	2302      	movs	r3, #2
 80061dc:	e0b4      	b.n	8006348 <HAL_TIM_PWM_ConfigChannel+0x184>
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	2201      	movs	r2, #1
 80061e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	2202      	movs	r2, #2
 80061ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2b0c      	cmp	r3, #12
 80061f2:	f200 809f 	bhi.w	8006334 <HAL_TIM_PWM_ConfigChannel+0x170>
 80061f6:	a201      	add	r2, pc, #4	; (adr r2, 80061fc <HAL_TIM_PWM_ConfigChannel+0x38>)
 80061f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061fc:	08006231 	.word	0x08006231
 8006200:	08006335 	.word	0x08006335
 8006204:	08006335 	.word	0x08006335
 8006208:	08006335 	.word	0x08006335
 800620c:	08006271 	.word	0x08006271
 8006210:	08006335 	.word	0x08006335
 8006214:	08006335 	.word	0x08006335
 8006218:	08006335 	.word	0x08006335
 800621c:	080062b3 	.word	0x080062b3
 8006220:	08006335 	.word	0x08006335
 8006224:	08006335 	.word	0x08006335
 8006228:	08006335 	.word	0x08006335
 800622c:	080062f3 	.word	0x080062f3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	68b9      	ldr	r1, [r7, #8]
 8006236:	4618      	mov	r0, r3
 8006238:	f000 fa16 	bl	8006668 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	699a      	ldr	r2, [r3, #24]
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f042 0208 	orr.w	r2, r2, #8
 800624a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	699a      	ldr	r2, [r3, #24]
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f022 0204 	bic.w	r2, r2, #4
 800625a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	6999      	ldr	r1, [r3, #24]
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	691a      	ldr	r2, [r3, #16]
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	430a      	orrs	r2, r1
 800626c:	619a      	str	r2, [r3, #24]
      break;
 800626e:	e062      	b.n	8006336 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	68b9      	ldr	r1, [r7, #8]
 8006276:	4618      	mov	r0, r3
 8006278:	f000 fa66 	bl	8006748 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	699a      	ldr	r2, [r3, #24]
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800628a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	699a      	ldr	r2, [r3, #24]
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800629a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	6999      	ldr	r1, [r3, #24]
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	691b      	ldr	r3, [r3, #16]
 80062a6:	021a      	lsls	r2, r3, #8
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	430a      	orrs	r2, r1
 80062ae:	619a      	str	r2, [r3, #24]
      break;
 80062b0:	e041      	b.n	8006336 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	68b9      	ldr	r1, [r7, #8]
 80062b8:	4618      	mov	r0, r3
 80062ba:	f000 fabb 	bl	8006834 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	69da      	ldr	r2, [r3, #28]
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f042 0208 	orr.w	r2, r2, #8
 80062cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	69da      	ldr	r2, [r3, #28]
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f022 0204 	bic.w	r2, r2, #4
 80062dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	69d9      	ldr	r1, [r3, #28]
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	691a      	ldr	r2, [r3, #16]
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	430a      	orrs	r2, r1
 80062ee:	61da      	str	r2, [r3, #28]
      break;
 80062f0:	e021      	b.n	8006336 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	68b9      	ldr	r1, [r7, #8]
 80062f8:	4618      	mov	r0, r3
 80062fa:	f000 fb0f 	bl	800691c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	69da      	ldr	r2, [r3, #28]
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800630c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	69da      	ldr	r2, [r3, #28]
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800631c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	69d9      	ldr	r1, [r3, #28]
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	691b      	ldr	r3, [r3, #16]
 8006328:	021a      	lsls	r2, r3, #8
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	430a      	orrs	r2, r1
 8006330:	61da      	str	r2, [r3, #28]
      break;
 8006332:	e000      	b.n	8006336 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8006334:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	2201      	movs	r2, #1
 800633a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	2200      	movs	r2, #0
 8006342:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006346:	2300      	movs	r3, #0
}
 8006348:	4618      	mov	r0, r3
 800634a:	3710      	adds	r7, #16
 800634c:	46bd      	mov	sp, r7
 800634e:	bd80      	pop	{r7, pc}

08006350 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b084      	sub	sp, #16
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
 8006358:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006360:	2b01      	cmp	r3, #1
 8006362:	d101      	bne.n	8006368 <HAL_TIM_ConfigClockSource+0x18>
 8006364:	2302      	movs	r3, #2
 8006366:	e0b3      	b.n	80064d0 <HAL_TIM_ConfigClockSource+0x180>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2201      	movs	r2, #1
 800636c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2202      	movs	r2, #2
 8006374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	689b      	ldr	r3, [r3, #8]
 800637e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006386:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800638e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	68fa      	ldr	r2, [r7, #12]
 8006396:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063a0:	d03e      	beq.n	8006420 <HAL_TIM_ConfigClockSource+0xd0>
 80063a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063a6:	f200 8087 	bhi.w	80064b8 <HAL_TIM_ConfigClockSource+0x168>
 80063aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063ae:	f000 8085 	beq.w	80064bc <HAL_TIM_ConfigClockSource+0x16c>
 80063b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063b6:	d87f      	bhi.n	80064b8 <HAL_TIM_ConfigClockSource+0x168>
 80063b8:	2b70      	cmp	r3, #112	; 0x70
 80063ba:	d01a      	beq.n	80063f2 <HAL_TIM_ConfigClockSource+0xa2>
 80063bc:	2b70      	cmp	r3, #112	; 0x70
 80063be:	d87b      	bhi.n	80064b8 <HAL_TIM_ConfigClockSource+0x168>
 80063c0:	2b60      	cmp	r3, #96	; 0x60
 80063c2:	d050      	beq.n	8006466 <HAL_TIM_ConfigClockSource+0x116>
 80063c4:	2b60      	cmp	r3, #96	; 0x60
 80063c6:	d877      	bhi.n	80064b8 <HAL_TIM_ConfigClockSource+0x168>
 80063c8:	2b50      	cmp	r3, #80	; 0x50
 80063ca:	d03c      	beq.n	8006446 <HAL_TIM_ConfigClockSource+0xf6>
 80063cc:	2b50      	cmp	r3, #80	; 0x50
 80063ce:	d873      	bhi.n	80064b8 <HAL_TIM_ConfigClockSource+0x168>
 80063d0:	2b40      	cmp	r3, #64	; 0x40
 80063d2:	d058      	beq.n	8006486 <HAL_TIM_ConfigClockSource+0x136>
 80063d4:	2b40      	cmp	r3, #64	; 0x40
 80063d6:	d86f      	bhi.n	80064b8 <HAL_TIM_ConfigClockSource+0x168>
 80063d8:	2b30      	cmp	r3, #48	; 0x30
 80063da:	d064      	beq.n	80064a6 <HAL_TIM_ConfigClockSource+0x156>
 80063dc:	2b30      	cmp	r3, #48	; 0x30
 80063de:	d86b      	bhi.n	80064b8 <HAL_TIM_ConfigClockSource+0x168>
 80063e0:	2b20      	cmp	r3, #32
 80063e2:	d060      	beq.n	80064a6 <HAL_TIM_ConfigClockSource+0x156>
 80063e4:	2b20      	cmp	r3, #32
 80063e6:	d867      	bhi.n	80064b8 <HAL_TIM_ConfigClockSource+0x168>
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d05c      	beq.n	80064a6 <HAL_TIM_ConfigClockSource+0x156>
 80063ec:	2b10      	cmp	r3, #16
 80063ee:	d05a      	beq.n	80064a6 <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80063f0:	e062      	b.n	80064b8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6818      	ldr	r0, [r3, #0]
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	6899      	ldr	r1, [r3, #8]
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	685a      	ldr	r2, [r3, #4]
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	68db      	ldr	r3, [r3, #12]
 8006402:	f000 fb5b 	bl	8006abc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	689b      	ldr	r3, [r3, #8]
 800640c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006414:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	68fa      	ldr	r2, [r7, #12]
 800641c:	609a      	str	r2, [r3, #8]
      break;
 800641e:	e04e      	b.n	80064be <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6818      	ldr	r0, [r3, #0]
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	6899      	ldr	r1, [r3, #8]
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	685a      	ldr	r2, [r3, #4]
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	68db      	ldr	r3, [r3, #12]
 8006430:	f000 fb44 	bl	8006abc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	689a      	ldr	r2, [r3, #8]
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006442:	609a      	str	r2, [r3, #8]
      break;
 8006444:	e03b      	b.n	80064be <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6818      	ldr	r0, [r3, #0]
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	6859      	ldr	r1, [r3, #4]
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	68db      	ldr	r3, [r3, #12]
 8006452:	461a      	mov	r2, r3
 8006454:	f000 fab8 	bl	80069c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	2150      	movs	r1, #80	; 0x50
 800645e:	4618      	mov	r0, r3
 8006460:	f000 fb11 	bl	8006a86 <TIM_ITRx_SetConfig>
      break;
 8006464:	e02b      	b.n	80064be <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6818      	ldr	r0, [r3, #0]
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	6859      	ldr	r1, [r3, #4]
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	68db      	ldr	r3, [r3, #12]
 8006472:	461a      	mov	r2, r3
 8006474:	f000 fad7 	bl	8006a26 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	2160      	movs	r1, #96	; 0x60
 800647e:	4618      	mov	r0, r3
 8006480:	f000 fb01 	bl	8006a86 <TIM_ITRx_SetConfig>
      break;
 8006484:	e01b      	b.n	80064be <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6818      	ldr	r0, [r3, #0]
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	6859      	ldr	r1, [r3, #4]
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	68db      	ldr	r3, [r3, #12]
 8006492:	461a      	mov	r2, r3
 8006494:	f000 fa98 	bl	80069c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	2140      	movs	r1, #64	; 0x40
 800649e:	4618      	mov	r0, r3
 80064a0:	f000 faf1 	bl	8006a86 <TIM_ITRx_SetConfig>
      break;
 80064a4:	e00b      	b.n	80064be <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681a      	ldr	r2, [r3, #0]
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4619      	mov	r1, r3
 80064b0:	4610      	mov	r0, r2
 80064b2:	f000 fae8 	bl	8006a86 <TIM_ITRx_SetConfig>
      break;
 80064b6:	e002      	b.n	80064be <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80064b8:	bf00      	nop
 80064ba:	e000      	b.n	80064be <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80064bc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2201      	movs	r2, #1
 80064c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2200      	movs	r2, #0
 80064ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80064ce:	2300      	movs	r3, #0
}
 80064d0:	4618      	mov	r0, r3
 80064d2:	3710      	adds	r7, #16
 80064d4:	46bd      	mov	sp, r7
 80064d6:	bd80      	pop	{r7, pc}

080064d8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80064d8:	b480      	push	{r7}
 80064da:	b083      	sub	sp, #12
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80064e0:	bf00      	nop
 80064e2:	370c      	adds	r7, #12
 80064e4:	46bd      	mov	sp, r7
 80064e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ea:	4770      	bx	lr

080064ec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80064ec:	b480      	push	{r7}
 80064ee:	b083      	sub	sp, #12
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80064f4:	bf00      	nop
 80064f6:	370c      	adds	r7, #12
 80064f8:	46bd      	mov	sp, r7
 80064fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fe:	4770      	bx	lr

08006500 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006500:	b480      	push	{r7}
 8006502:	b083      	sub	sp, #12
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006508:	bf00      	nop
 800650a:	370c      	adds	r7, #12
 800650c:	46bd      	mov	sp, r7
 800650e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006512:	4770      	bx	lr

08006514 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006514:	b480      	push	{r7}
 8006516:	b083      	sub	sp, #12
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800651c:	bf00      	nop
 800651e:	370c      	adds	r7, #12
 8006520:	46bd      	mov	sp, r7
 8006522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006526:	4770      	bx	lr

08006528 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006528:	b480      	push	{r7}
 800652a:	b085      	sub	sp, #20
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
 8006530:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	4a40      	ldr	r2, [pc, #256]	; (800663c <TIM_Base_SetConfig+0x114>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d013      	beq.n	8006568 <TIM_Base_SetConfig+0x40>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006546:	d00f      	beq.n	8006568 <TIM_Base_SetConfig+0x40>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	4a3d      	ldr	r2, [pc, #244]	; (8006640 <TIM_Base_SetConfig+0x118>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d00b      	beq.n	8006568 <TIM_Base_SetConfig+0x40>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	4a3c      	ldr	r2, [pc, #240]	; (8006644 <TIM_Base_SetConfig+0x11c>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d007      	beq.n	8006568 <TIM_Base_SetConfig+0x40>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	4a3b      	ldr	r2, [pc, #236]	; (8006648 <TIM_Base_SetConfig+0x120>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d003      	beq.n	8006568 <TIM_Base_SetConfig+0x40>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	4a3a      	ldr	r2, [pc, #232]	; (800664c <TIM_Base_SetConfig+0x124>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d108      	bne.n	800657a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800656e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	685b      	ldr	r3, [r3, #4]
 8006574:	68fa      	ldr	r2, [r7, #12]
 8006576:	4313      	orrs	r3, r2
 8006578:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	4a2f      	ldr	r2, [pc, #188]	; (800663c <TIM_Base_SetConfig+0x114>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d02b      	beq.n	80065da <TIM_Base_SetConfig+0xb2>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006588:	d027      	beq.n	80065da <TIM_Base_SetConfig+0xb2>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	4a2c      	ldr	r2, [pc, #176]	; (8006640 <TIM_Base_SetConfig+0x118>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d023      	beq.n	80065da <TIM_Base_SetConfig+0xb2>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	4a2b      	ldr	r2, [pc, #172]	; (8006644 <TIM_Base_SetConfig+0x11c>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d01f      	beq.n	80065da <TIM_Base_SetConfig+0xb2>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	4a2a      	ldr	r2, [pc, #168]	; (8006648 <TIM_Base_SetConfig+0x120>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d01b      	beq.n	80065da <TIM_Base_SetConfig+0xb2>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	4a29      	ldr	r2, [pc, #164]	; (800664c <TIM_Base_SetConfig+0x124>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d017      	beq.n	80065da <TIM_Base_SetConfig+0xb2>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	4a28      	ldr	r2, [pc, #160]	; (8006650 <TIM_Base_SetConfig+0x128>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d013      	beq.n	80065da <TIM_Base_SetConfig+0xb2>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	4a27      	ldr	r2, [pc, #156]	; (8006654 <TIM_Base_SetConfig+0x12c>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d00f      	beq.n	80065da <TIM_Base_SetConfig+0xb2>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	4a26      	ldr	r2, [pc, #152]	; (8006658 <TIM_Base_SetConfig+0x130>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d00b      	beq.n	80065da <TIM_Base_SetConfig+0xb2>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	4a25      	ldr	r2, [pc, #148]	; (800665c <TIM_Base_SetConfig+0x134>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d007      	beq.n	80065da <TIM_Base_SetConfig+0xb2>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	4a24      	ldr	r2, [pc, #144]	; (8006660 <TIM_Base_SetConfig+0x138>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d003      	beq.n	80065da <TIM_Base_SetConfig+0xb2>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	4a23      	ldr	r2, [pc, #140]	; (8006664 <TIM_Base_SetConfig+0x13c>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d108      	bne.n	80065ec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	68db      	ldr	r3, [r3, #12]
 80065e6:	68fa      	ldr	r2, [r7, #12]
 80065e8:	4313      	orrs	r3, r2
 80065ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	695b      	ldr	r3, [r3, #20]
 80065f6:	4313      	orrs	r3, r2
 80065f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	68fa      	ldr	r2, [r7, #12]
 80065fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	689a      	ldr	r2, [r3, #8]
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	681a      	ldr	r2, [r3, #0]
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	4a0a      	ldr	r2, [pc, #40]	; (800663c <TIM_Base_SetConfig+0x114>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d003      	beq.n	8006620 <TIM_Base_SetConfig+0xf8>
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	4a0c      	ldr	r2, [pc, #48]	; (800664c <TIM_Base_SetConfig+0x124>)
 800661c:	4293      	cmp	r3, r2
 800661e:	d103      	bne.n	8006628 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	691a      	ldr	r2, [r3, #16]
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2201      	movs	r2, #1
 800662c:	615a      	str	r2, [r3, #20]
}
 800662e:	bf00      	nop
 8006630:	3714      	adds	r7, #20
 8006632:	46bd      	mov	sp, r7
 8006634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006638:	4770      	bx	lr
 800663a:	bf00      	nop
 800663c:	40010000 	.word	0x40010000
 8006640:	40000400 	.word	0x40000400
 8006644:	40000800 	.word	0x40000800
 8006648:	40000c00 	.word	0x40000c00
 800664c:	40010400 	.word	0x40010400
 8006650:	40014000 	.word	0x40014000
 8006654:	40014400 	.word	0x40014400
 8006658:	40014800 	.word	0x40014800
 800665c:	40001800 	.word	0x40001800
 8006660:	40001c00 	.word	0x40001c00
 8006664:	40002000 	.word	0x40002000

08006668 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006668:	b480      	push	{r7}
 800666a:	b087      	sub	sp, #28
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
 8006670:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6a1b      	ldr	r3, [r3, #32]
 8006676:	f023 0201 	bic.w	r2, r3, #1
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6a1b      	ldr	r3, [r3, #32]
 8006682:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	685b      	ldr	r3, [r3, #4]
 8006688:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	699b      	ldr	r3, [r3, #24]
 800668e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006696:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	f023 0303 	bic.w	r3, r3, #3
 800669e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	68fa      	ldr	r2, [r7, #12]
 80066a6:	4313      	orrs	r3, r2
 80066a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	f023 0302 	bic.w	r3, r3, #2
 80066b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	689b      	ldr	r3, [r3, #8]
 80066b6:	697a      	ldr	r2, [r7, #20]
 80066b8:	4313      	orrs	r3, r2
 80066ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	4a20      	ldr	r2, [pc, #128]	; (8006740 <TIM_OC1_SetConfig+0xd8>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d003      	beq.n	80066cc <TIM_OC1_SetConfig+0x64>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	4a1f      	ldr	r2, [pc, #124]	; (8006744 <TIM_OC1_SetConfig+0xdc>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d10c      	bne.n	80066e6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80066cc:	697b      	ldr	r3, [r7, #20]
 80066ce:	f023 0308 	bic.w	r3, r3, #8
 80066d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	68db      	ldr	r3, [r3, #12]
 80066d8:	697a      	ldr	r2, [r7, #20]
 80066da:	4313      	orrs	r3, r2
 80066dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80066de:	697b      	ldr	r3, [r7, #20]
 80066e0:	f023 0304 	bic.w	r3, r3, #4
 80066e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	4a15      	ldr	r2, [pc, #84]	; (8006740 <TIM_OC1_SetConfig+0xd8>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d003      	beq.n	80066f6 <TIM_OC1_SetConfig+0x8e>
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	4a14      	ldr	r2, [pc, #80]	; (8006744 <TIM_OC1_SetConfig+0xdc>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d111      	bne.n	800671a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80066f6:	693b      	ldr	r3, [r7, #16]
 80066f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80066fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80066fe:	693b      	ldr	r3, [r7, #16]
 8006700:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006704:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	695b      	ldr	r3, [r3, #20]
 800670a:	693a      	ldr	r2, [r7, #16]
 800670c:	4313      	orrs	r3, r2
 800670e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	699b      	ldr	r3, [r3, #24]
 8006714:	693a      	ldr	r2, [r7, #16]
 8006716:	4313      	orrs	r3, r2
 8006718:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	693a      	ldr	r2, [r7, #16]
 800671e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	68fa      	ldr	r2, [r7, #12]
 8006724:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	685a      	ldr	r2, [r3, #4]
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	697a      	ldr	r2, [r7, #20]
 8006732:	621a      	str	r2, [r3, #32]
}
 8006734:	bf00      	nop
 8006736:	371c      	adds	r7, #28
 8006738:	46bd      	mov	sp, r7
 800673a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673e:	4770      	bx	lr
 8006740:	40010000 	.word	0x40010000
 8006744:	40010400 	.word	0x40010400

08006748 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006748:	b480      	push	{r7}
 800674a:	b087      	sub	sp, #28
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
 8006750:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6a1b      	ldr	r3, [r3, #32]
 8006756:	f023 0210 	bic.w	r2, r3, #16
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6a1b      	ldr	r3, [r3, #32]
 8006762:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	685b      	ldr	r3, [r3, #4]
 8006768:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	699b      	ldr	r3, [r3, #24]
 800676e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006776:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800677e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	021b      	lsls	r3, r3, #8
 8006786:	68fa      	ldr	r2, [r7, #12]
 8006788:	4313      	orrs	r3, r2
 800678a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800678c:	697b      	ldr	r3, [r7, #20]
 800678e:	f023 0320 	bic.w	r3, r3, #32
 8006792:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	689b      	ldr	r3, [r3, #8]
 8006798:	011b      	lsls	r3, r3, #4
 800679a:	697a      	ldr	r2, [r7, #20]
 800679c:	4313      	orrs	r3, r2
 800679e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	4a22      	ldr	r2, [pc, #136]	; (800682c <TIM_OC2_SetConfig+0xe4>)
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d003      	beq.n	80067b0 <TIM_OC2_SetConfig+0x68>
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	4a21      	ldr	r2, [pc, #132]	; (8006830 <TIM_OC2_SetConfig+0xe8>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d10d      	bne.n	80067cc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80067b0:	697b      	ldr	r3, [r7, #20]
 80067b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80067b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	68db      	ldr	r3, [r3, #12]
 80067bc:	011b      	lsls	r3, r3, #4
 80067be:	697a      	ldr	r2, [r7, #20]
 80067c0:	4313      	orrs	r3, r2
 80067c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80067c4:	697b      	ldr	r3, [r7, #20]
 80067c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067ca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	4a17      	ldr	r2, [pc, #92]	; (800682c <TIM_OC2_SetConfig+0xe4>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d003      	beq.n	80067dc <TIM_OC2_SetConfig+0x94>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	4a16      	ldr	r2, [pc, #88]	; (8006830 <TIM_OC2_SetConfig+0xe8>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d113      	bne.n	8006804 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80067dc:	693b      	ldr	r3, [r7, #16]
 80067de:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80067e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80067e4:	693b      	ldr	r3, [r7, #16]
 80067e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80067ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	695b      	ldr	r3, [r3, #20]
 80067f0:	009b      	lsls	r3, r3, #2
 80067f2:	693a      	ldr	r2, [r7, #16]
 80067f4:	4313      	orrs	r3, r2
 80067f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	699b      	ldr	r3, [r3, #24]
 80067fc:	009b      	lsls	r3, r3, #2
 80067fe:	693a      	ldr	r2, [r7, #16]
 8006800:	4313      	orrs	r3, r2
 8006802:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	693a      	ldr	r2, [r7, #16]
 8006808:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	68fa      	ldr	r2, [r7, #12]
 800680e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	685a      	ldr	r2, [r3, #4]
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	697a      	ldr	r2, [r7, #20]
 800681c:	621a      	str	r2, [r3, #32]
}
 800681e:	bf00      	nop
 8006820:	371c      	adds	r7, #28
 8006822:	46bd      	mov	sp, r7
 8006824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006828:	4770      	bx	lr
 800682a:	bf00      	nop
 800682c:	40010000 	.word	0x40010000
 8006830:	40010400 	.word	0x40010400

08006834 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006834:	b480      	push	{r7}
 8006836:	b087      	sub	sp, #28
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
 800683c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6a1b      	ldr	r3, [r3, #32]
 8006842:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6a1b      	ldr	r3, [r3, #32]
 800684e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	685b      	ldr	r3, [r3, #4]
 8006854:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	69db      	ldr	r3, [r3, #28]
 800685a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006862:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	f023 0303 	bic.w	r3, r3, #3
 800686a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	68fa      	ldr	r2, [r7, #12]
 8006872:	4313      	orrs	r3, r2
 8006874:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006876:	697b      	ldr	r3, [r7, #20]
 8006878:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800687c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	689b      	ldr	r3, [r3, #8]
 8006882:	021b      	lsls	r3, r3, #8
 8006884:	697a      	ldr	r2, [r7, #20]
 8006886:	4313      	orrs	r3, r2
 8006888:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	4a21      	ldr	r2, [pc, #132]	; (8006914 <TIM_OC3_SetConfig+0xe0>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d003      	beq.n	800689a <TIM_OC3_SetConfig+0x66>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	4a20      	ldr	r2, [pc, #128]	; (8006918 <TIM_OC3_SetConfig+0xe4>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d10d      	bne.n	80068b6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800689a:	697b      	ldr	r3, [r7, #20]
 800689c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80068a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	68db      	ldr	r3, [r3, #12]
 80068a6:	021b      	lsls	r3, r3, #8
 80068a8:	697a      	ldr	r2, [r7, #20]
 80068aa:	4313      	orrs	r3, r2
 80068ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80068ae:	697b      	ldr	r3, [r7, #20]
 80068b0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80068b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	4a16      	ldr	r2, [pc, #88]	; (8006914 <TIM_OC3_SetConfig+0xe0>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d003      	beq.n	80068c6 <TIM_OC3_SetConfig+0x92>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	4a15      	ldr	r2, [pc, #84]	; (8006918 <TIM_OC3_SetConfig+0xe4>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d113      	bne.n	80068ee <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80068c6:	693b      	ldr	r3, [r7, #16]
 80068c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80068cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80068ce:	693b      	ldr	r3, [r7, #16]
 80068d0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80068d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	695b      	ldr	r3, [r3, #20]
 80068da:	011b      	lsls	r3, r3, #4
 80068dc:	693a      	ldr	r2, [r7, #16]
 80068de:	4313      	orrs	r3, r2
 80068e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	699b      	ldr	r3, [r3, #24]
 80068e6:	011b      	lsls	r3, r3, #4
 80068e8:	693a      	ldr	r2, [r7, #16]
 80068ea:	4313      	orrs	r3, r2
 80068ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	693a      	ldr	r2, [r7, #16]
 80068f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	68fa      	ldr	r2, [r7, #12]
 80068f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	685a      	ldr	r2, [r3, #4]
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	697a      	ldr	r2, [r7, #20]
 8006906:	621a      	str	r2, [r3, #32]
}
 8006908:	bf00      	nop
 800690a:	371c      	adds	r7, #28
 800690c:	46bd      	mov	sp, r7
 800690e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006912:	4770      	bx	lr
 8006914:	40010000 	.word	0x40010000
 8006918:	40010400 	.word	0x40010400

0800691c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800691c:	b480      	push	{r7}
 800691e:	b087      	sub	sp, #28
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
 8006924:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6a1b      	ldr	r3, [r3, #32]
 800692a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6a1b      	ldr	r3, [r3, #32]
 8006936:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	685b      	ldr	r3, [r3, #4]
 800693c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	69db      	ldr	r3, [r3, #28]
 8006942:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800694a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006952:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	021b      	lsls	r3, r3, #8
 800695a:	68fa      	ldr	r2, [r7, #12]
 800695c:	4313      	orrs	r3, r2
 800695e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006960:	693b      	ldr	r3, [r7, #16]
 8006962:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006966:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	689b      	ldr	r3, [r3, #8]
 800696c:	031b      	lsls	r3, r3, #12
 800696e:	693a      	ldr	r2, [r7, #16]
 8006970:	4313      	orrs	r3, r2
 8006972:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	4a12      	ldr	r2, [pc, #72]	; (80069c0 <TIM_OC4_SetConfig+0xa4>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d003      	beq.n	8006984 <TIM_OC4_SetConfig+0x68>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	4a11      	ldr	r2, [pc, #68]	; (80069c4 <TIM_OC4_SetConfig+0xa8>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d109      	bne.n	8006998 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006984:	697b      	ldr	r3, [r7, #20]
 8006986:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800698a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	695b      	ldr	r3, [r3, #20]
 8006990:	019b      	lsls	r3, r3, #6
 8006992:	697a      	ldr	r2, [r7, #20]
 8006994:	4313      	orrs	r3, r2
 8006996:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	697a      	ldr	r2, [r7, #20]
 800699c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	68fa      	ldr	r2, [r7, #12]
 80069a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	685a      	ldr	r2, [r3, #4]
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	693a      	ldr	r2, [r7, #16]
 80069b0:	621a      	str	r2, [r3, #32]
}
 80069b2:	bf00      	nop
 80069b4:	371c      	adds	r7, #28
 80069b6:	46bd      	mov	sp, r7
 80069b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069bc:	4770      	bx	lr
 80069be:	bf00      	nop
 80069c0:	40010000 	.word	0x40010000
 80069c4:	40010400 	.word	0x40010400

080069c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80069c8:	b480      	push	{r7}
 80069ca:	b087      	sub	sp, #28
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	60f8      	str	r0, [r7, #12]
 80069d0:	60b9      	str	r1, [r7, #8]
 80069d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	6a1b      	ldr	r3, [r3, #32]
 80069d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	6a1b      	ldr	r3, [r3, #32]
 80069de:	f023 0201 	bic.w	r2, r3, #1
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	699b      	ldr	r3, [r3, #24]
 80069ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80069ec:	693b      	ldr	r3, [r7, #16]
 80069ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80069f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	011b      	lsls	r3, r3, #4
 80069f8:	693a      	ldr	r2, [r7, #16]
 80069fa:	4313      	orrs	r3, r2
 80069fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80069fe:	697b      	ldr	r3, [r7, #20]
 8006a00:	f023 030a 	bic.w	r3, r3, #10
 8006a04:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006a06:	697a      	ldr	r2, [r7, #20]
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	4313      	orrs	r3, r2
 8006a0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	693a      	ldr	r2, [r7, #16]
 8006a12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	697a      	ldr	r2, [r7, #20]
 8006a18:	621a      	str	r2, [r3, #32]
}
 8006a1a:	bf00      	nop
 8006a1c:	371c      	adds	r7, #28
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a24:	4770      	bx	lr

08006a26 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a26:	b480      	push	{r7}
 8006a28:	b087      	sub	sp, #28
 8006a2a:	af00      	add	r7, sp, #0
 8006a2c:	60f8      	str	r0, [r7, #12]
 8006a2e:	60b9      	str	r1, [r7, #8]
 8006a30:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	6a1b      	ldr	r3, [r3, #32]
 8006a36:	f023 0210 	bic.w	r2, r3, #16
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	699b      	ldr	r3, [r3, #24]
 8006a42:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	6a1b      	ldr	r3, [r3, #32]
 8006a48:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006a4a:	697b      	ldr	r3, [r7, #20]
 8006a4c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006a50:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	031b      	lsls	r3, r3, #12
 8006a56:	697a      	ldr	r2, [r7, #20]
 8006a58:	4313      	orrs	r3, r2
 8006a5a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006a5c:	693b      	ldr	r3, [r7, #16]
 8006a5e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006a62:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006a64:	68bb      	ldr	r3, [r7, #8]
 8006a66:	011b      	lsls	r3, r3, #4
 8006a68:	693a      	ldr	r2, [r7, #16]
 8006a6a:	4313      	orrs	r3, r2
 8006a6c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	697a      	ldr	r2, [r7, #20]
 8006a72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	693a      	ldr	r2, [r7, #16]
 8006a78:	621a      	str	r2, [r3, #32]
}
 8006a7a:	bf00      	nop
 8006a7c:	371c      	adds	r7, #28
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a84:	4770      	bx	lr

08006a86 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006a86:	b480      	push	{r7}
 8006a88:	b085      	sub	sp, #20
 8006a8a:	af00      	add	r7, sp, #0
 8006a8c:	6078      	str	r0, [r7, #4]
 8006a8e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	689b      	ldr	r3, [r3, #8]
 8006a94:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a9c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006a9e:	683a      	ldr	r2, [r7, #0]
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	4313      	orrs	r3, r2
 8006aa4:	f043 0307 	orr.w	r3, r3, #7
 8006aa8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	68fa      	ldr	r2, [r7, #12]
 8006aae:	609a      	str	r2, [r3, #8]
}
 8006ab0:	bf00      	nop
 8006ab2:	3714      	adds	r7, #20
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aba:	4770      	bx	lr

08006abc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006abc:	b480      	push	{r7}
 8006abe:	b087      	sub	sp, #28
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	60f8      	str	r0, [r7, #12]
 8006ac4:	60b9      	str	r1, [r7, #8]
 8006ac6:	607a      	str	r2, [r7, #4]
 8006ac8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	689b      	ldr	r3, [r3, #8]
 8006ace:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ad0:	697b      	ldr	r3, [r7, #20]
 8006ad2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006ad6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	021a      	lsls	r2, r3, #8
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	431a      	orrs	r2, r3
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	4313      	orrs	r3, r2
 8006ae4:	697a      	ldr	r2, [r7, #20]
 8006ae6:	4313      	orrs	r3, r2
 8006ae8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	697a      	ldr	r2, [r7, #20]
 8006aee:	609a      	str	r2, [r3, #8]
}
 8006af0:	bf00      	nop
 8006af2:	371c      	adds	r7, #28
 8006af4:	46bd      	mov	sp, r7
 8006af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afa:	4770      	bx	lr

08006afc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006afc:	b480      	push	{r7}
 8006afe:	b087      	sub	sp, #28
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	60f8      	str	r0, [r7, #12]
 8006b04:	60b9      	str	r1, [r7, #8]
 8006b06:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	f003 031f 	and.w	r3, r3, #31
 8006b0e:	2201      	movs	r2, #1
 8006b10:	fa02 f303 	lsl.w	r3, r2, r3
 8006b14:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	6a1a      	ldr	r2, [r3, #32]
 8006b1a:	697b      	ldr	r3, [r7, #20]
 8006b1c:	43db      	mvns	r3, r3
 8006b1e:	401a      	ands	r2, r3
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	6a1a      	ldr	r2, [r3, #32]
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	f003 031f 	and.w	r3, r3, #31
 8006b2e:	6879      	ldr	r1, [r7, #4]
 8006b30:	fa01 f303 	lsl.w	r3, r1, r3
 8006b34:	431a      	orrs	r2, r3
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	621a      	str	r2, [r3, #32]
}
 8006b3a:	bf00      	nop
 8006b3c:	371c      	adds	r7, #28
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b44:	4770      	bx	lr
	...

08006b48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006b48:	b480      	push	{r7}
 8006b4a:	b085      	sub	sp, #20
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
 8006b50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b58:	2b01      	cmp	r3, #1
 8006b5a:	d101      	bne.n	8006b60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006b5c:	2302      	movs	r3, #2
 8006b5e:	e05a      	b.n	8006c16 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2201      	movs	r2, #1
 8006b64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2202      	movs	r2, #2
 8006b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	685b      	ldr	r3, [r3, #4]
 8006b76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	689b      	ldr	r3, [r3, #8]
 8006b7e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b86:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	68fa      	ldr	r2, [r7, #12]
 8006b8e:	4313      	orrs	r3, r2
 8006b90:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	68fa      	ldr	r2, [r7, #12]
 8006b98:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	4a21      	ldr	r2, [pc, #132]	; (8006c24 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d022      	beq.n	8006bea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bac:	d01d      	beq.n	8006bea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	4a1d      	ldr	r2, [pc, #116]	; (8006c28 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d018      	beq.n	8006bea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	4a1b      	ldr	r2, [pc, #108]	; (8006c2c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d013      	beq.n	8006bea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	4a1a      	ldr	r2, [pc, #104]	; (8006c30 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d00e      	beq.n	8006bea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	4a18      	ldr	r2, [pc, #96]	; (8006c34 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d009      	beq.n	8006bea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	4a17      	ldr	r2, [pc, #92]	; (8006c38 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d004      	beq.n	8006bea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4a15      	ldr	r2, [pc, #84]	; (8006c3c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d10c      	bne.n	8006c04 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006bea:	68bb      	ldr	r3, [r7, #8]
 8006bec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006bf0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	685b      	ldr	r3, [r3, #4]
 8006bf6:	68ba      	ldr	r2, [r7, #8]
 8006bf8:	4313      	orrs	r3, r2
 8006bfa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	68ba      	ldr	r2, [r7, #8]
 8006c02:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2201      	movs	r2, #1
 8006c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2200      	movs	r2, #0
 8006c10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006c14:	2300      	movs	r3, #0
}
 8006c16:	4618      	mov	r0, r3
 8006c18:	3714      	adds	r7, #20
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c20:	4770      	bx	lr
 8006c22:	bf00      	nop
 8006c24:	40010000 	.word	0x40010000
 8006c28:	40000400 	.word	0x40000400
 8006c2c:	40000800 	.word	0x40000800
 8006c30:	40000c00 	.word	0x40000c00
 8006c34:	40010400 	.word	0x40010400
 8006c38:	40014000 	.word	0x40014000
 8006c3c:	40001800 	.word	0x40001800

08006c40 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006c40:	b480      	push	{r7}
 8006c42:	b083      	sub	sp, #12
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006c48:	bf00      	nop
 8006c4a:	370c      	adds	r7, #12
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c52:	4770      	bx	lr

08006c54 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006c54:	b480      	push	{r7}
 8006c56:	b083      	sub	sp, #12
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006c5c:	bf00      	nop
 8006c5e:	370c      	adds	r7, #12
 8006c60:	46bd      	mov	sp, r7
 8006c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c66:	4770      	bx	lr

08006c68 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b082      	sub	sp, #8
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d101      	bne.n	8006c7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006c76:	2301      	movs	r3, #1
 8006c78:	e03f      	b.n	8006cfa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006c80:	b2db      	uxtb	r3, r3
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d106      	bne.n	8006c94 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2200      	movs	r2, #0
 8006c8a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	f7fb fa04 	bl	800209c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2224      	movs	r2, #36	; 0x24
 8006c98:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	68da      	ldr	r2, [r3, #12]
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006caa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006cac:	6878      	ldr	r0, [r7, #4]
 8006cae:	f000 fc41 	bl	8007534 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	691a      	ldr	r2, [r3, #16]
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006cc0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	695a      	ldr	r2, [r3, #20]
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006cd0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	68da      	ldr	r2, [r3, #12]
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006ce0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2220      	movs	r2, #32
 8006cec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2220      	movs	r2, #32
 8006cf4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8006cf8:	2300      	movs	r3, #0
}
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	3708      	adds	r7, #8
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bd80      	pop	{r7, pc}
	...

08006d04 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b086      	sub	sp, #24
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	60f8      	str	r0, [r7, #12]
 8006d0c:	60b9      	str	r1, [r7, #8]
 8006d0e:	4613      	mov	r3, r2
 8006d10:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006d18:	b2db      	uxtb	r3, r3
 8006d1a:	2b20      	cmp	r3, #32
 8006d1c:	d166      	bne.n	8006dec <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d1e:	68bb      	ldr	r3, [r7, #8]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d002      	beq.n	8006d2a <HAL_UART_Receive_DMA+0x26>
 8006d24:	88fb      	ldrh	r3, [r7, #6]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d101      	bne.n	8006d2e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8006d2a:	2301      	movs	r3, #1
 8006d2c:	e05f      	b.n	8006dee <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006d34:	2b01      	cmp	r3, #1
 8006d36:	d101      	bne.n	8006d3c <HAL_UART_Receive_DMA+0x38>
 8006d38:	2302      	movs	r3, #2
 8006d3a:	e058      	b.n	8006dee <HAL_UART_Receive_DMA+0xea>
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	2201      	movs	r2, #1
 8006d40:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8006d44:	68ba      	ldr	r2, [r7, #8]
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	88fa      	ldrh	r2, [r7, #6]
 8006d4e:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	2200      	movs	r2, #0
 8006d54:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	2222      	movs	r2, #34	; 0x22
 8006d5a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d62:	4a25      	ldr	r2, [pc, #148]	; (8006df8 <HAL_UART_Receive_DMA+0xf4>)
 8006d64:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d6a:	4a24      	ldr	r2, [pc, #144]	; (8006dfc <HAL_UART_Receive_DMA+0xf8>)
 8006d6c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d72:	4a23      	ldr	r2, [pc, #140]	; (8006e00 <HAL_UART_Receive_DMA+0xfc>)
 8006d74:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 8006d7e:	f107 0308 	add.w	r3, r7, #8
 8006d82:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	3304      	adds	r3, #4
 8006d8e:	4619      	mov	r1, r3
 8006d90:	697b      	ldr	r3, [r7, #20]
 8006d92:	681a      	ldr	r2, [r3, #0]
 8006d94:	88fb      	ldrh	r3, [r7, #6]
 8006d96:	f7fd feb1 	bl	8004afc <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	613b      	str	r3, [r7, #16]
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	613b      	str	r3, [r7, #16]
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	685b      	ldr	r3, [r3, #4]
 8006dac:	613b      	str	r3, [r7, #16]
 8006dae:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	2200      	movs	r2, #0
 8006db4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	68da      	ldr	r2, [r3, #12]
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006dc6:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	695a      	ldr	r2, [r3, #20]
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f042 0201 	orr.w	r2, r2, #1
 8006dd6:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	695a      	ldr	r2, [r3, #20]
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006de6:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8006de8:	2300      	movs	r3, #0
 8006dea:	e000      	b.n	8006dee <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8006dec:	2302      	movs	r3, #2
  }
}
 8006dee:	4618      	mov	r0, r3
 8006df0:	3718      	adds	r7, #24
 8006df2:	46bd      	mov	sp, r7
 8006df4:	bd80      	pop	{r7, pc}
 8006df6:	bf00      	nop
 8006df8:	080071ad 	.word	0x080071ad
 8006dfc:	08007215 	.word	0x08007215
 8006e00:	08007231 	.word	0x08007231

08006e04 <HAL_UART_DMAPause>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAPause(UART_HandleTypeDef *huart)
{
 8006e04:	b480      	push	{r7}
 8006e06:	b085      	sub	sp, #20
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006e16:	2b01      	cmp	r3, #1
 8006e18:	d101      	bne.n	8006e1e <HAL_UART_DMAPause+0x1a>
 8006e1a:	2302      	movs	r3, #2
 8006e1c:	e050      	b.n	8006ec0 <HAL_UART_DMAPause+0xbc>
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2201      	movs	r2, #1
 8006e22:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	695b      	ldr	r3, [r3, #20]
 8006e2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e30:	2b80      	cmp	r3, #128	; 0x80
 8006e32:	bf0c      	ite	eq
 8006e34:	2301      	moveq	r3, #1
 8006e36:	2300      	movne	r3, #0
 8006e38:	b2db      	uxtb	r3, r3
 8006e3a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006e42:	b2db      	uxtb	r3, r3
 8006e44:	2b21      	cmp	r3, #33	; 0x21
 8006e46:	d10a      	bne.n	8006e5e <HAL_UART_DMAPause+0x5a>
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d007      	beq.n	8006e5e <HAL_UART_DMAPause+0x5a>
  {
    /* Disable the UART DMA Tx request */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	695a      	ldr	r2, [r3, #20]
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006e5c:	615a      	str	r2, [r3, #20]
  }

  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	695b      	ldr	r3, [r3, #20]
 8006e64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e68:	2b40      	cmp	r3, #64	; 0x40
 8006e6a:	bf0c      	ite	eq
 8006e6c:	2301      	moveq	r3, #1
 8006e6e:	2300      	movne	r3, #0
 8006e70:	b2db      	uxtb	r3, r3
 8006e72:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006e7a:	b2db      	uxtb	r3, r3
 8006e7c:	2b22      	cmp	r3, #34	; 0x22
 8006e7e:	d11a      	bne.n	8006eb6 <HAL_UART_DMAPause+0xb2>
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d017      	beq.n	8006eb6 <HAL_UART_DMAPause+0xb2>
  {
    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	68da      	ldr	r2, [r3, #12]
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006e94:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	695a      	ldr	r2, [r3, #20]
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f022 0201 	bic.w	r2, r2, #1
 8006ea4:	615a      	str	r2, [r3, #20]

    /* Disable the UART DMA Rx request */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	695a      	ldr	r2, [r3, #20]
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006eb4:	615a      	str	r2, [r3, #20]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2200      	movs	r2, #0
 8006eba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8006ebe:	2300      	movs	r3, #0
}
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	3714      	adds	r7, #20
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eca:	4770      	bx	lr

08006ecc <HAL_UART_DMAResume>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAResume(UART_HandleTypeDef *huart)
{
 8006ecc:	b480      	push	{r7}
 8006ece:	b085      	sub	sp, #20
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006eda:	2b01      	cmp	r3, #1
 8006edc:	d101      	bne.n	8006ee2 <HAL_UART_DMAResume+0x16>
 8006ede:	2302      	movs	r3, #2
 8006ee0:	e03f      	b.n	8006f62 <HAL_UART_DMAResume+0x96>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2201      	movs	r2, #1
 8006ee6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006ef0:	b2db      	uxtb	r3, r3
 8006ef2:	2b21      	cmp	r3, #33	; 0x21
 8006ef4:	d107      	bne.n	8006f06 <HAL_UART_DMAResume+0x3a>
  {
    /* Enable the UART DMA Tx request */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	695a      	ldr	r2, [r3, #20]
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006f04:	615a      	str	r2, [r3, #20]
  }

  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006f0c:	b2db      	uxtb	r3, r3
 8006f0e:	2b22      	cmp	r3, #34	; 0x22
 8006f10:	d122      	bne.n	8006f58 <HAL_UART_DMAResume+0x8c>
  {
    /* Clear the Overrun flag before resuming the Rx transfer*/
    __HAL_UART_CLEAR_OREFLAG(huart);
 8006f12:	2300      	movs	r3, #0
 8006f14:	60fb      	str	r3, [r7, #12]
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	60fb      	str	r3, [r7, #12]
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	685b      	ldr	r3, [r3, #4]
 8006f24:	60fb      	str	r3, [r7, #12]
 8006f26:	68fb      	ldr	r3, [r7, #12]

    /* Reenable PE and ERR (Frame error, noise error, overrun error) interrupts */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	68da      	ldr	r2, [r3, #12]
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006f36:	60da      	str	r2, [r3, #12]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	695a      	ldr	r2, [r3, #20]
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f042 0201 	orr.w	r2, r2, #1
 8006f46:	615a      	str	r2, [r3, #20]

    /* Enable the UART DMA Rx request */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	695a      	ldr	r2, [r3, #20]
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f56:	615a      	str	r2, [r3, #20]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8006f60:	2300      	movs	r3, #0
}
 8006f62:	4618      	mov	r0, r3
 8006f64:	3714      	adds	r7, #20
 8006f66:	46bd      	mov	sp, r7
 8006f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6c:	4770      	bx	lr
	...

08006f70 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b088      	sub	sp, #32
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	68db      	ldr	r3, [r3, #12]
 8006f86:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	695b      	ldr	r3, [r3, #20]
 8006f8e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8006f90:	2300      	movs	r3, #0
 8006f92:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8006f94:	2300      	movs	r3, #0
 8006f96:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006f98:	69fb      	ldr	r3, [r7, #28]
 8006f9a:	f003 030f 	and.w	r3, r3, #15
 8006f9e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8006fa0:	693b      	ldr	r3, [r7, #16]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d10d      	bne.n	8006fc2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006fa6:	69fb      	ldr	r3, [r7, #28]
 8006fa8:	f003 0320 	and.w	r3, r3, #32
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d008      	beq.n	8006fc2 <HAL_UART_IRQHandler+0x52>
 8006fb0:	69bb      	ldr	r3, [r7, #24]
 8006fb2:	f003 0320 	and.w	r3, r3, #32
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d003      	beq.n	8006fc2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8006fba:	6878      	ldr	r0, [r7, #4]
 8006fbc:	f000 fa38 	bl	8007430 <UART_Receive_IT>
      return;
 8006fc0:	e0d0      	b.n	8007164 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006fc2:	693b      	ldr	r3, [r7, #16]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	f000 80b0 	beq.w	800712a <HAL_UART_IRQHandler+0x1ba>
 8006fca:	697b      	ldr	r3, [r7, #20]
 8006fcc:	f003 0301 	and.w	r3, r3, #1
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d105      	bne.n	8006fe0 <HAL_UART_IRQHandler+0x70>
 8006fd4:	69bb      	ldr	r3, [r7, #24]
 8006fd6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	f000 80a5 	beq.w	800712a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006fe0:	69fb      	ldr	r3, [r7, #28]
 8006fe2:	f003 0301 	and.w	r3, r3, #1
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d00a      	beq.n	8007000 <HAL_UART_IRQHandler+0x90>
 8006fea:	69bb      	ldr	r3, [r7, #24]
 8006fec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d005      	beq.n	8007000 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ff8:	f043 0201 	orr.w	r2, r3, #1
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007000:	69fb      	ldr	r3, [r7, #28]
 8007002:	f003 0304 	and.w	r3, r3, #4
 8007006:	2b00      	cmp	r3, #0
 8007008:	d00a      	beq.n	8007020 <HAL_UART_IRQHandler+0xb0>
 800700a:	697b      	ldr	r3, [r7, #20]
 800700c:	f003 0301 	and.w	r3, r3, #1
 8007010:	2b00      	cmp	r3, #0
 8007012:	d005      	beq.n	8007020 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007018:	f043 0202 	orr.w	r2, r3, #2
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007020:	69fb      	ldr	r3, [r7, #28]
 8007022:	f003 0302 	and.w	r3, r3, #2
 8007026:	2b00      	cmp	r3, #0
 8007028:	d00a      	beq.n	8007040 <HAL_UART_IRQHandler+0xd0>
 800702a:	697b      	ldr	r3, [r7, #20]
 800702c:	f003 0301 	and.w	r3, r3, #1
 8007030:	2b00      	cmp	r3, #0
 8007032:	d005      	beq.n	8007040 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007038:	f043 0204 	orr.w	r2, r3, #4
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8007040:	69fb      	ldr	r3, [r7, #28]
 8007042:	f003 0308 	and.w	r3, r3, #8
 8007046:	2b00      	cmp	r3, #0
 8007048:	d00f      	beq.n	800706a <HAL_UART_IRQHandler+0xfa>
 800704a:	69bb      	ldr	r3, [r7, #24]
 800704c:	f003 0320 	and.w	r3, r3, #32
 8007050:	2b00      	cmp	r3, #0
 8007052:	d104      	bne.n	800705e <HAL_UART_IRQHandler+0xee>
 8007054:	697b      	ldr	r3, [r7, #20]
 8007056:	f003 0301 	and.w	r3, r3, #1
 800705a:	2b00      	cmp	r3, #0
 800705c:	d005      	beq.n	800706a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007062:	f043 0208 	orr.w	r2, r3, #8
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800706e:	2b00      	cmp	r3, #0
 8007070:	d077      	beq.n	8007162 <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007072:	69fb      	ldr	r3, [r7, #28]
 8007074:	f003 0320 	and.w	r3, r3, #32
 8007078:	2b00      	cmp	r3, #0
 800707a:	d007      	beq.n	800708c <HAL_UART_IRQHandler+0x11c>
 800707c:	69bb      	ldr	r3, [r7, #24]
 800707e:	f003 0320 	and.w	r3, r3, #32
 8007082:	2b00      	cmp	r3, #0
 8007084:	d002      	beq.n	800708c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8007086:	6878      	ldr	r0, [r7, #4]
 8007088:	f000 f9d2 	bl	8007430 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	695b      	ldr	r3, [r3, #20]
 8007092:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007096:	2b40      	cmp	r3, #64	; 0x40
 8007098:	bf0c      	ite	eq
 800709a:	2301      	moveq	r3, #1
 800709c:	2300      	movne	r3, #0
 800709e:	b2db      	uxtb	r3, r3
 80070a0:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070a6:	f003 0308 	and.w	r3, r3, #8
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d102      	bne.n	80070b4 <HAL_UART_IRQHandler+0x144>
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d031      	beq.n	8007118 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80070b4:	6878      	ldr	r0, [r7, #4]
 80070b6:	f000 f91b 	bl	80072f0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	695b      	ldr	r3, [r3, #20]
 80070c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070c4:	2b40      	cmp	r3, #64	; 0x40
 80070c6:	d123      	bne.n	8007110 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	695a      	ldr	r2, [r3, #20]
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80070d6:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d013      	beq.n	8007108 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070e4:	4a21      	ldr	r2, [pc, #132]	; (800716c <HAL_UART_IRQHandler+0x1fc>)
 80070e6:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070ec:	4618      	mov	r0, r3
 80070ee:	f7fd fd5d 	bl	8004bac <HAL_DMA_Abort_IT>
 80070f2:	4603      	mov	r3, r0
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d016      	beq.n	8007126 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070fe:	687a      	ldr	r2, [r7, #4]
 8007100:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007102:	4610      	mov	r0, r2
 8007104:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007106:	e00e      	b.n	8007126 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007108:	6878      	ldr	r0, [r7, #4]
 800710a:	f000 f845 	bl	8007198 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800710e:	e00a      	b.n	8007126 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007110:	6878      	ldr	r0, [r7, #4]
 8007112:	f000 f841 	bl	8007198 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007116:	e006      	b.n	8007126 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007118:	6878      	ldr	r0, [r7, #4]
 800711a:	f000 f83d 	bl	8007198 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	2200      	movs	r2, #0
 8007122:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8007124:	e01d      	b.n	8007162 <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007126:	bf00      	nop
    return;
 8007128:	e01b      	b.n	8007162 <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800712a:	69fb      	ldr	r3, [r7, #28]
 800712c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007130:	2b00      	cmp	r3, #0
 8007132:	d008      	beq.n	8007146 <HAL_UART_IRQHandler+0x1d6>
 8007134:	69bb      	ldr	r3, [r7, #24]
 8007136:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800713a:	2b00      	cmp	r3, #0
 800713c:	d003      	beq.n	8007146 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800713e:	6878      	ldr	r0, [r7, #4]
 8007140:	f000 f908 	bl	8007354 <UART_Transmit_IT>
    return;
 8007144:	e00e      	b.n	8007164 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007146:	69fb      	ldr	r3, [r7, #28]
 8007148:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800714c:	2b00      	cmp	r3, #0
 800714e:	d009      	beq.n	8007164 <HAL_UART_IRQHandler+0x1f4>
 8007150:	69bb      	ldr	r3, [r7, #24]
 8007152:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007156:	2b00      	cmp	r3, #0
 8007158:	d004      	beq.n	8007164 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 800715a:	6878      	ldr	r0, [r7, #4]
 800715c:	f000 f950 	bl	8007400 <UART_EndTransmit_IT>
    return;
 8007160:	e000      	b.n	8007164 <HAL_UART_IRQHandler+0x1f4>
    return;
 8007162:	bf00      	nop
  }
}
 8007164:	3720      	adds	r7, #32
 8007166:	46bd      	mov	sp, r7
 8007168:	bd80      	pop	{r7, pc}
 800716a:	bf00      	nop
 800716c:	0800732d 	.word	0x0800732d

08007170 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007170:	b480      	push	{r7}
 8007172:	b083      	sub	sp, #12
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007178:	bf00      	nop
 800717a:	370c      	adds	r7, #12
 800717c:	46bd      	mov	sp, r7
 800717e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007182:	4770      	bx	lr

08007184 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007184:	b480      	push	{r7}
 8007186:	b083      	sub	sp, #12
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800718c:	bf00      	nop
 800718e:	370c      	adds	r7, #12
 8007190:	46bd      	mov	sp, r7
 8007192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007196:	4770      	bx	lr

08007198 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007198:	b480      	push	{r7}
 800719a:	b083      	sub	sp, #12
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80071a0:	bf00      	nop
 80071a2:	370c      	adds	r7, #12
 80071a4:	46bd      	mov	sp, r7
 80071a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071aa:	4770      	bx	lr

080071ac <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b084      	sub	sp, #16
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071b8:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d11e      	bne.n	8007206 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	2200      	movs	r2, #0
 80071cc:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	68da      	ldr	r2, [r3, #12]
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80071dc:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	695a      	ldr	r2, [r3, #20]
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f022 0201 	bic.w	r2, r2, #1
 80071ec:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	695a      	ldr	r2, [r3, #20]
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80071fc:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	2220      	movs	r2, #32
 8007202:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8007206:	68f8      	ldr	r0, [r7, #12]
 8007208:	f7f9 ff7e 	bl	8001108 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800720c:	bf00      	nop
 800720e:	3710      	adds	r7, #16
 8007210:	46bd      	mov	sp, r7
 8007212:	bd80      	pop	{r7, pc}

08007214 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b084      	sub	sp, #16
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007220:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8007222:	68f8      	ldr	r0, [r7, #12]
 8007224:	f7ff ffae 	bl	8007184 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007228:	bf00      	nop
 800722a:	3710      	adds	r7, #16
 800722c:	46bd      	mov	sp, r7
 800722e:	bd80      	pop	{r7, pc}

08007230 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b084      	sub	sp, #16
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007238:	2300      	movs	r3, #0
 800723a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007240:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007242:	68bb      	ldr	r3, [r7, #8]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	695b      	ldr	r3, [r3, #20]
 8007248:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800724c:	2b80      	cmp	r3, #128	; 0x80
 800724e:	bf0c      	ite	eq
 8007250:	2301      	moveq	r3, #1
 8007252:	2300      	movne	r3, #0
 8007254:	b2db      	uxtb	r3, r3
 8007256:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007258:	68bb      	ldr	r3, [r7, #8]
 800725a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800725e:	b2db      	uxtb	r3, r3
 8007260:	2b21      	cmp	r3, #33	; 0x21
 8007262:	d108      	bne.n	8007276 <UART_DMAError+0x46>
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d005      	beq.n	8007276 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800726a:	68bb      	ldr	r3, [r7, #8]
 800726c:	2200      	movs	r2, #0
 800726e:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8007270:	68b8      	ldr	r0, [r7, #8]
 8007272:	f000 f827 	bl	80072c4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007276:	68bb      	ldr	r3, [r7, #8]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	695b      	ldr	r3, [r3, #20]
 800727c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007280:	2b40      	cmp	r3, #64	; 0x40
 8007282:	bf0c      	ite	eq
 8007284:	2301      	moveq	r3, #1
 8007286:	2300      	movne	r3, #0
 8007288:	b2db      	uxtb	r3, r3
 800728a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800728c:	68bb      	ldr	r3, [r7, #8]
 800728e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007292:	b2db      	uxtb	r3, r3
 8007294:	2b22      	cmp	r3, #34	; 0x22
 8007296:	d108      	bne.n	80072aa <UART_DMAError+0x7a>
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d005      	beq.n	80072aa <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800729e:	68bb      	ldr	r3, [r7, #8]
 80072a0:	2200      	movs	r2, #0
 80072a2:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80072a4:	68b8      	ldr	r0, [r7, #8]
 80072a6:	f000 f823 	bl	80072f0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80072aa:	68bb      	ldr	r3, [r7, #8]
 80072ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072ae:	f043 0210 	orr.w	r2, r3, #16
 80072b2:	68bb      	ldr	r3, [r7, #8]
 80072b4:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80072b6:	68b8      	ldr	r0, [r7, #8]
 80072b8:	f7ff ff6e 	bl	8007198 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80072bc:	bf00      	nop
 80072be:	3710      	adds	r7, #16
 80072c0:	46bd      	mov	sp, r7
 80072c2:	bd80      	pop	{r7, pc}

080072c4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80072c4:	b480      	push	{r7}
 80072c6:	b083      	sub	sp, #12
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	68da      	ldr	r2, [r3, #12]
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80072da:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2220      	movs	r2, #32
 80072e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 80072e4:	bf00      	nop
 80072e6:	370c      	adds	r7, #12
 80072e8:	46bd      	mov	sp, r7
 80072ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ee:	4770      	bx	lr

080072f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80072f0:	b480      	push	{r7}
 80072f2:	b083      	sub	sp, #12
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	68da      	ldr	r2, [r3, #12]
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007306:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	695a      	ldr	r2, [r3, #20]
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f022 0201 	bic.w	r2, r2, #1
 8007316:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2220      	movs	r2, #32
 800731c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8007320:	bf00      	nop
 8007322:	370c      	adds	r7, #12
 8007324:	46bd      	mov	sp, r7
 8007326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732a:	4770      	bx	lr

0800732c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b084      	sub	sp, #16
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007338:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	2200      	movs	r2, #0
 800733e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	2200      	movs	r2, #0
 8007344:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007346:	68f8      	ldr	r0, [r7, #12]
 8007348:	f7ff ff26 	bl	8007198 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800734c:	bf00      	nop
 800734e:	3710      	adds	r7, #16
 8007350:	46bd      	mov	sp, r7
 8007352:	bd80      	pop	{r7, pc}

08007354 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007354:	b480      	push	{r7}
 8007356:	b085      	sub	sp, #20
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007362:	b2db      	uxtb	r3, r3
 8007364:	2b21      	cmp	r3, #33	; 0x21
 8007366:	d144      	bne.n	80073f2 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	689b      	ldr	r3, [r3, #8]
 800736c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007370:	d11a      	bne.n	80073a8 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6a1b      	ldr	r3, [r3, #32]
 8007376:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	881b      	ldrh	r3, [r3, #0]
 800737c:	461a      	mov	r2, r3
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007386:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	691b      	ldr	r3, [r3, #16]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d105      	bne.n	800739c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	6a1b      	ldr	r3, [r3, #32]
 8007394:	1c9a      	adds	r2, r3, #2
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	621a      	str	r2, [r3, #32]
 800739a:	e00e      	b.n	80073ba <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	6a1b      	ldr	r3, [r3, #32]
 80073a0:	1c5a      	adds	r2, r3, #1
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	621a      	str	r2, [r3, #32]
 80073a6:	e008      	b.n	80073ba <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	6a1b      	ldr	r3, [r3, #32]
 80073ac:	1c59      	adds	r1, r3, #1
 80073ae:	687a      	ldr	r2, [r7, #4]
 80073b0:	6211      	str	r1, [r2, #32]
 80073b2:	781a      	ldrb	r2, [r3, #0]
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80073be:	b29b      	uxth	r3, r3
 80073c0:	3b01      	subs	r3, #1
 80073c2:	b29b      	uxth	r3, r3
 80073c4:	687a      	ldr	r2, [r7, #4]
 80073c6:	4619      	mov	r1, r3
 80073c8:	84d1      	strh	r1, [r2, #38]	; 0x26
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d10f      	bne.n	80073ee <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	68da      	ldr	r2, [r3, #12]
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80073dc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	68da      	ldr	r2, [r3, #12]
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80073ec:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80073ee:	2300      	movs	r3, #0
 80073f0:	e000      	b.n	80073f4 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80073f2:	2302      	movs	r3, #2
  }
}
 80073f4:	4618      	mov	r0, r3
 80073f6:	3714      	adds	r7, #20
 80073f8:	46bd      	mov	sp, r7
 80073fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fe:	4770      	bx	lr

08007400 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b082      	sub	sp, #8
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	68da      	ldr	r2, [r3, #12]
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007416:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2220      	movs	r2, #32
 800741c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007420:	6878      	ldr	r0, [r7, #4]
 8007422:	f7ff fea5 	bl	8007170 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007426:	2300      	movs	r3, #0
}
 8007428:	4618      	mov	r0, r3
 800742a:	3708      	adds	r7, #8
 800742c:	46bd      	mov	sp, r7
 800742e:	bd80      	pop	{r7, pc}

08007430 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b084      	sub	sp, #16
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800743e:	b2db      	uxtb	r3, r3
 8007440:	2b22      	cmp	r3, #34	; 0x22
 8007442:	d171      	bne.n	8007528 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	689b      	ldr	r3, [r3, #8]
 8007448:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800744c:	d123      	bne.n	8007496 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007452:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	691b      	ldr	r3, [r3, #16]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d10e      	bne.n	800747a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	685b      	ldr	r3, [r3, #4]
 8007462:	b29b      	uxth	r3, r3
 8007464:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007468:	b29a      	uxth	r2, r3
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007472:	1c9a      	adds	r2, r3, #2
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	629a      	str	r2, [r3, #40]	; 0x28
 8007478:	e029      	b.n	80074ce <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	685b      	ldr	r3, [r3, #4]
 8007480:	b29b      	uxth	r3, r3
 8007482:	b2db      	uxtb	r3, r3
 8007484:	b29a      	uxth	r2, r3
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800748e:	1c5a      	adds	r2, r3, #1
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	629a      	str	r2, [r3, #40]	; 0x28
 8007494:	e01b      	b.n	80074ce <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	691b      	ldr	r3, [r3, #16]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d10a      	bne.n	80074b4 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	6858      	ldr	r0, [r3, #4]
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074a8:	1c59      	adds	r1, r3, #1
 80074aa:	687a      	ldr	r2, [r7, #4]
 80074ac:	6291      	str	r1, [r2, #40]	; 0x28
 80074ae:	b2c2      	uxtb	r2, r0
 80074b0:	701a      	strb	r2, [r3, #0]
 80074b2:	e00c      	b.n	80074ce <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	685b      	ldr	r3, [r3, #4]
 80074ba:	b2da      	uxtb	r2, r3
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074c0:	1c58      	adds	r0, r3, #1
 80074c2:	6879      	ldr	r1, [r7, #4]
 80074c4:	6288      	str	r0, [r1, #40]	; 0x28
 80074c6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80074ca:	b2d2      	uxtb	r2, r2
 80074cc:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80074d2:	b29b      	uxth	r3, r3
 80074d4:	3b01      	subs	r3, #1
 80074d6:	b29b      	uxth	r3, r3
 80074d8:	687a      	ldr	r2, [r7, #4]
 80074da:	4619      	mov	r1, r3
 80074dc:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d120      	bne.n	8007524 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	68da      	ldr	r2, [r3, #12]
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f022 0220 	bic.w	r2, r2, #32
 80074f0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	68da      	ldr	r2, [r3, #12]
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007500:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	695a      	ldr	r2, [r3, #20]
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f022 0201 	bic.w	r2, r2, #1
 8007510:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2220      	movs	r2, #32
 8007516:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800751a:	6878      	ldr	r0, [r7, #4]
 800751c:	f7f9 fdf4 	bl	8001108 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8007520:	2300      	movs	r3, #0
 8007522:	e002      	b.n	800752a <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8007524:	2300      	movs	r3, #0
 8007526:	e000      	b.n	800752a <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8007528:	2302      	movs	r3, #2
  }
}
 800752a:	4618      	mov	r0, r3
 800752c:	3710      	adds	r7, #16
 800752e:	46bd      	mov	sp, r7
 8007530:	bd80      	pop	{r7, pc}
	...

08007534 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007538:	b0bd      	sub	sp, #244	; 0xf4
 800753a:	af00      	add	r7, sp, #0
 800753c:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007540:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	691b      	ldr	r3, [r3, #16]
 8007548:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800754c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007550:	68d9      	ldr	r1, [r3, #12]
 8007552:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007556:	681a      	ldr	r2, [r3, #0]
 8007558:	ea40 0301 	orr.w	r3, r0, r1
 800755c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800755e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007562:	689a      	ldr	r2, [r3, #8]
 8007564:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007568:	691b      	ldr	r3, [r3, #16]
 800756a:	431a      	orrs	r2, r3
 800756c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007570:	695b      	ldr	r3, [r3, #20]
 8007572:	431a      	orrs	r2, r3
 8007574:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007578:	69db      	ldr	r3, [r3, #28]
 800757a:	4313      	orrs	r3, r2
 800757c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 8007580:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	68db      	ldr	r3, [r3, #12]
 8007588:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800758c:	f021 010c 	bic.w	r1, r1, #12
 8007590:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007594:	681a      	ldr	r2, [r3, #0]
 8007596:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800759a:	430b      	orrs	r3, r1
 800759c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800759e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	695b      	ldr	r3, [r3, #20]
 80075a6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80075aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075ae:	6999      	ldr	r1, [r3, #24]
 80075b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075b4:	681a      	ldr	r2, [r3, #0]
 80075b6:	ea40 0301 	orr.w	r3, r0, r1
 80075ba:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80075bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075c0:	69db      	ldr	r3, [r3, #28]
 80075c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80075c6:	f040 81a5 	bne.w	8007914 <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80075ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075ce:	681a      	ldr	r2, [r3, #0]
 80075d0:	4bcd      	ldr	r3, [pc, #820]	; (8007908 <UART_SetConfig+0x3d4>)
 80075d2:	429a      	cmp	r2, r3
 80075d4:	d006      	beq.n	80075e4 <UART_SetConfig+0xb0>
 80075d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075da:	681a      	ldr	r2, [r3, #0]
 80075dc:	4bcb      	ldr	r3, [pc, #812]	; (800790c <UART_SetConfig+0x3d8>)
 80075de:	429a      	cmp	r2, r3
 80075e0:	f040 80cb 	bne.w	800777a <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80075e4:	f7fe fb84 	bl	8005cf0 <HAL_RCC_GetPCLK2Freq>
 80075e8:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80075ec:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80075f0:	461c      	mov	r4, r3
 80075f2:	f04f 0500 	mov.w	r5, #0
 80075f6:	4622      	mov	r2, r4
 80075f8:	462b      	mov	r3, r5
 80075fa:	1891      	adds	r1, r2, r2
 80075fc:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8007600:	415b      	adcs	r3, r3
 8007602:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007606:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800760a:	1912      	adds	r2, r2, r4
 800760c:	eb45 0303 	adc.w	r3, r5, r3
 8007610:	f04f 0000 	mov.w	r0, #0
 8007614:	f04f 0100 	mov.w	r1, #0
 8007618:	00d9      	lsls	r1, r3, #3
 800761a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800761e:	00d0      	lsls	r0, r2, #3
 8007620:	4602      	mov	r2, r0
 8007622:	460b      	mov	r3, r1
 8007624:	1911      	adds	r1, r2, r4
 8007626:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 800762a:	416b      	adcs	r3, r5
 800762c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007630:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007634:	685b      	ldr	r3, [r3, #4]
 8007636:	461a      	mov	r2, r3
 8007638:	f04f 0300 	mov.w	r3, #0
 800763c:	1891      	adds	r1, r2, r2
 800763e:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8007642:	415b      	adcs	r3, r3
 8007644:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007648:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800764c:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8007650:	f7f9 fa9c 	bl	8000b8c <__aeabi_uldivmod>
 8007654:	4602      	mov	r2, r0
 8007656:	460b      	mov	r3, r1
 8007658:	4bad      	ldr	r3, [pc, #692]	; (8007910 <UART_SetConfig+0x3dc>)
 800765a:	fba3 2302 	umull	r2, r3, r3, r2
 800765e:	095b      	lsrs	r3, r3, #5
 8007660:	011e      	lsls	r6, r3, #4
 8007662:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007666:	461c      	mov	r4, r3
 8007668:	f04f 0500 	mov.w	r5, #0
 800766c:	4622      	mov	r2, r4
 800766e:	462b      	mov	r3, r5
 8007670:	1891      	adds	r1, r2, r2
 8007672:	67b9      	str	r1, [r7, #120]	; 0x78
 8007674:	415b      	adcs	r3, r3
 8007676:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007678:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800767c:	1912      	adds	r2, r2, r4
 800767e:	eb45 0303 	adc.w	r3, r5, r3
 8007682:	f04f 0000 	mov.w	r0, #0
 8007686:	f04f 0100 	mov.w	r1, #0
 800768a:	00d9      	lsls	r1, r3, #3
 800768c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007690:	00d0      	lsls	r0, r2, #3
 8007692:	4602      	mov	r2, r0
 8007694:	460b      	mov	r3, r1
 8007696:	1911      	adds	r1, r2, r4
 8007698:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 800769c:	416b      	adcs	r3, r5
 800769e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80076a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076a6:	685b      	ldr	r3, [r3, #4]
 80076a8:	461a      	mov	r2, r3
 80076aa:	f04f 0300 	mov.w	r3, #0
 80076ae:	1891      	adds	r1, r2, r2
 80076b0:	6739      	str	r1, [r7, #112]	; 0x70
 80076b2:	415b      	adcs	r3, r3
 80076b4:	677b      	str	r3, [r7, #116]	; 0x74
 80076b6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80076ba:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 80076be:	f7f9 fa65 	bl	8000b8c <__aeabi_uldivmod>
 80076c2:	4602      	mov	r2, r0
 80076c4:	460b      	mov	r3, r1
 80076c6:	4b92      	ldr	r3, [pc, #584]	; (8007910 <UART_SetConfig+0x3dc>)
 80076c8:	fba3 1302 	umull	r1, r3, r3, r2
 80076cc:	095b      	lsrs	r3, r3, #5
 80076ce:	2164      	movs	r1, #100	; 0x64
 80076d0:	fb01 f303 	mul.w	r3, r1, r3
 80076d4:	1ad3      	subs	r3, r2, r3
 80076d6:	00db      	lsls	r3, r3, #3
 80076d8:	3332      	adds	r3, #50	; 0x32
 80076da:	4a8d      	ldr	r2, [pc, #564]	; (8007910 <UART_SetConfig+0x3dc>)
 80076dc:	fba2 2303 	umull	r2, r3, r2, r3
 80076e0:	095b      	lsrs	r3, r3, #5
 80076e2:	005b      	lsls	r3, r3, #1
 80076e4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80076e8:	441e      	add	r6, r3
 80076ea:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80076ee:	4618      	mov	r0, r3
 80076f0:	f04f 0100 	mov.w	r1, #0
 80076f4:	4602      	mov	r2, r0
 80076f6:	460b      	mov	r3, r1
 80076f8:	1894      	adds	r4, r2, r2
 80076fa:	66bc      	str	r4, [r7, #104]	; 0x68
 80076fc:	415b      	adcs	r3, r3
 80076fe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007700:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8007704:	1812      	adds	r2, r2, r0
 8007706:	eb41 0303 	adc.w	r3, r1, r3
 800770a:	f04f 0400 	mov.w	r4, #0
 800770e:	f04f 0500 	mov.w	r5, #0
 8007712:	00dd      	lsls	r5, r3, #3
 8007714:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007718:	00d4      	lsls	r4, r2, #3
 800771a:	4622      	mov	r2, r4
 800771c:	462b      	mov	r3, r5
 800771e:	1814      	adds	r4, r2, r0
 8007720:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 8007724:	414b      	adcs	r3, r1
 8007726:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800772a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800772e:	685b      	ldr	r3, [r3, #4]
 8007730:	461a      	mov	r2, r3
 8007732:	f04f 0300 	mov.w	r3, #0
 8007736:	1891      	adds	r1, r2, r2
 8007738:	6639      	str	r1, [r7, #96]	; 0x60
 800773a:	415b      	adcs	r3, r3
 800773c:	667b      	str	r3, [r7, #100]	; 0x64
 800773e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8007742:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007746:	f7f9 fa21 	bl	8000b8c <__aeabi_uldivmod>
 800774a:	4602      	mov	r2, r0
 800774c:	460b      	mov	r3, r1
 800774e:	4b70      	ldr	r3, [pc, #448]	; (8007910 <UART_SetConfig+0x3dc>)
 8007750:	fba3 1302 	umull	r1, r3, r3, r2
 8007754:	095b      	lsrs	r3, r3, #5
 8007756:	2164      	movs	r1, #100	; 0x64
 8007758:	fb01 f303 	mul.w	r3, r1, r3
 800775c:	1ad3      	subs	r3, r2, r3
 800775e:	00db      	lsls	r3, r3, #3
 8007760:	3332      	adds	r3, #50	; 0x32
 8007762:	4a6b      	ldr	r2, [pc, #428]	; (8007910 <UART_SetConfig+0x3dc>)
 8007764:	fba2 2303 	umull	r2, r3, r2, r3
 8007768:	095b      	lsrs	r3, r3, #5
 800776a:	f003 0207 	and.w	r2, r3, #7
 800776e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	4432      	add	r2, r6
 8007776:	609a      	str	r2, [r3, #8]
 8007778:	e26d      	b.n	8007c56 <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800777a:	f7fe faa5 	bl	8005cc8 <HAL_RCC_GetPCLK1Freq>
 800777e:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007782:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007786:	461c      	mov	r4, r3
 8007788:	f04f 0500 	mov.w	r5, #0
 800778c:	4622      	mov	r2, r4
 800778e:	462b      	mov	r3, r5
 8007790:	1891      	adds	r1, r2, r2
 8007792:	65b9      	str	r1, [r7, #88]	; 0x58
 8007794:	415b      	adcs	r3, r3
 8007796:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007798:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800779c:	1912      	adds	r2, r2, r4
 800779e:	eb45 0303 	adc.w	r3, r5, r3
 80077a2:	f04f 0000 	mov.w	r0, #0
 80077a6:	f04f 0100 	mov.w	r1, #0
 80077aa:	00d9      	lsls	r1, r3, #3
 80077ac:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80077b0:	00d0      	lsls	r0, r2, #3
 80077b2:	4602      	mov	r2, r0
 80077b4:	460b      	mov	r3, r1
 80077b6:	1911      	adds	r1, r2, r4
 80077b8:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 80077bc:	416b      	adcs	r3, r5
 80077be:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80077c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077c6:	685b      	ldr	r3, [r3, #4]
 80077c8:	461a      	mov	r2, r3
 80077ca:	f04f 0300 	mov.w	r3, #0
 80077ce:	1891      	adds	r1, r2, r2
 80077d0:	6539      	str	r1, [r7, #80]	; 0x50
 80077d2:	415b      	adcs	r3, r3
 80077d4:	657b      	str	r3, [r7, #84]	; 0x54
 80077d6:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80077da:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 80077de:	f7f9 f9d5 	bl	8000b8c <__aeabi_uldivmod>
 80077e2:	4602      	mov	r2, r0
 80077e4:	460b      	mov	r3, r1
 80077e6:	4b4a      	ldr	r3, [pc, #296]	; (8007910 <UART_SetConfig+0x3dc>)
 80077e8:	fba3 2302 	umull	r2, r3, r3, r2
 80077ec:	095b      	lsrs	r3, r3, #5
 80077ee:	011e      	lsls	r6, r3, #4
 80077f0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80077f4:	461c      	mov	r4, r3
 80077f6:	f04f 0500 	mov.w	r5, #0
 80077fa:	4622      	mov	r2, r4
 80077fc:	462b      	mov	r3, r5
 80077fe:	1891      	adds	r1, r2, r2
 8007800:	64b9      	str	r1, [r7, #72]	; 0x48
 8007802:	415b      	adcs	r3, r3
 8007804:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007806:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800780a:	1912      	adds	r2, r2, r4
 800780c:	eb45 0303 	adc.w	r3, r5, r3
 8007810:	f04f 0000 	mov.w	r0, #0
 8007814:	f04f 0100 	mov.w	r1, #0
 8007818:	00d9      	lsls	r1, r3, #3
 800781a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800781e:	00d0      	lsls	r0, r2, #3
 8007820:	4602      	mov	r2, r0
 8007822:	460b      	mov	r3, r1
 8007824:	1911      	adds	r1, r2, r4
 8007826:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 800782a:	416b      	adcs	r3, r5
 800782c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007830:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007834:	685b      	ldr	r3, [r3, #4]
 8007836:	461a      	mov	r2, r3
 8007838:	f04f 0300 	mov.w	r3, #0
 800783c:	1891      	adds	r1, r2, r2
 800783e:	6439      	str	r1, [r7, #64]	; 0x40
 8007840:	415b      	adcs	r3, r3
 8007842:	647b      	str	r3, [r7, #68]	; 0x44
 8007844:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007848:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 800784c:	f7f9 f99e 	bl	8000b8c <__aeabi_uldivmod>
 8007850:	4602      	mov	r2, r0
 8007852:	460b      	mov	r3, r1
 8007854:	4b2e      	ldr	r3, [pc, #184]	; (8007910 <UART_SetConfig+0x3dc>)
 8007856:	fba3 1302 	umull	r1, r3, r3, r2
 800785a:	095b      	lsrs	r3, r3, #5
 800785c:	2164      	movs	r1, #100	; 0x64
 800785e:	fb01 f303 	mul.w	r3, r1, r3
 8007862:	1ad3      	subs	r3, r2, r3
 8007864:	00db      	lsls	r3, r3, #3
 8007866:	3332      	adds	r3, #50	; 0x32
 8007868:	4a29      	ldr	r2, [pc, #164]	; (8007910 <UART_SetConfig+0x3dc>)
 800786a:	fba2 2303 	umull	r2, r3, r2, r3
 800786e:	095b      	lsrs	r3, r3, #5
 8007870:	005b      	lsls	r3, r3, #1
 8007872:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007876:	441e      	add	r6, r3
 8007878:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800787c:	4618      	mov	r0, r3
 800787e:	f04f 0100 	mov.w	r1, #0
 8007882:	4602      	mov	r2, r0
 8007884:	460b      	mov	r3, r1
 8007886:	1894      	adds	r4, r2, r2
 8007888:	63bc      	str	r4, [r7, #56]	; 0x38
 800788a:	415b      	adcs	r3, r3
 800788c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800788e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007892:	1812      	adds	r2, r2, r0
 8007894:	eb41 0303 	adc.w	r3, r1, r3
 8007898:	f04f 0400 	mov.w	r4, #0
 800789c:	f04f 0500 	mov.w	r5, #0
 80078a0:	00dd      	lsls	r5, r3, #3
 80078a2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80078a6:	00d4      	lsls	r4, r2, #3
 80078a8:	4622      	mov	r2, r4
 80078aa:	462b      	mov	r3, r5
 80078ac:	1814      	adds	r4, r2, r0
 80078ae:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 80078b2:	414b      	adcs	r3, r1
 80078b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80078b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078bc:	685b      	ldr	r3, [r3, #4]
 80078be:	461a      	mov	r2, r3
 80078c0:	f04f 0300 	mov.w	r3, #0
 80078c4:	1891      	adds	r1, r2, r2
 80078c6:	6339      	str	r1, [r7, #48]	; 0x30
 80078c8:	415b      	adcs	r3, r3
 80078ca:	637b      	str	r3, [r7, #52]	; 0x34
 80078cc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80078d0:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80078d4:	f7f9 f95a 	bl	8000b8c <__aeabi_uldivmod>
 80078d8:	4602      	mov	r2, r0
 80078da:	460b      	mov	r3, r1
 80078dc:	4b0c      	ldr	r3, [pc, #48]	; (8007910 <UART_SetConfig+0x3dc>)
 80078de:	fba3 1302 	umull	r1, r3, r3, r2
 80078e2:	095b      	lsrs	r3, r3, #5
 80078e4:	2164      	movs	r1, #100	; 0x64
 80078e6:	fb01 f303 	mul.w	r3, r1, r3
 80078ea:	1ad3      	subs	r3, r2, r3
 80078ec:	00db      	lsls	r3, r3, #3
 80078ee:	3332      	adds	r3, #50	; 0x32
 80078f0:	4a07      	ldr	r2, [pc, #28]	; (8007910 <UART_SetConfig+0x3dc>)
 80078f2:	fba2 2303 	umull	r2, r3, r2, r3
 80078f6:	095b      	lsrs	r3, r3, #5
 80078f8:	f003 0207 	and.w	r2, r3, #7
 80078fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	4432      	add	r2, r6
 8007904:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8007906:	e1a6      	b.n	8007c56 <UART_SetConfig+0x722>
 8007908:	40011000 	.word	0x40011000
 800790c:	40011400 	.word	0x40011400
 8007910:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007914:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007918:	681a      	ldr	r2, [r3, #0]
 800791a:	4bd1      	ldr	r3, [pc, #836]	; (8007c60 <UART_SetConfig+0x72c>)
 800791c:	429a      	cmp	r2, r3
 800791e:	d006      	beq.n	800792e <UART_SetConfig+0x3fa>
 8007920:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007924:	681a      	ldr	r2, [r3, #0]
 8007926:	4bcf      	ldr	r3, [pc, #828]	; (8007c64 <UART_SetConfig+0x730>)
 8007928:	429a      	cmp	r2, r3
 800792a:	f040 80ca 	bne.w	8007ac2 <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 800792e:	f7fe f9df 	bl	8005cf0 <HAL_RCC_GetPCLK2Freq>
 8007932:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007936:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800793a:	461c      	mov	r4, r3
 800793c:	f04f 0500 	mov.w	r5, #0
 8007940:	4622      	mov	r2, r4
 8007942:	462b      	mov	r3, r5
 8007944:	1891      	adds	r1, r2, r2
 8007946:	62b9      	str	r1, [r7, #40]	; 0x28
 8007948:	415b      	adcs	r3, r3
 800794a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800794c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007950:	1912      	adds	r2, r2, r4
 8007952:	eb45 0303 	adc.w	r3, r5, r3
 8007956:	f04f 0000 	mov.w	r0, #0
 800795a:	f04f 0100 	mov.w	r1, #0
 800795e:	00d9      	lsls	r1, r3, #3
 8007960:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007964:	00d0      	lsls	r0, r2, #3
 8007966:	4602      	mov	r2, r0
 8007968:	460b      	mov	r3, r1
 800796a:	eb12 0a04 	adds.w	sl, r2, r4
 800796e:	eb43 0b05 	adc.w	fp, r3, r5
 8007972:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007976:	685b      	ldr	r3, [r3, #4]
 8007978:	4618      	mov	r0, r3
 800797a:	f04f 0100 	mov.w	r1, #0
 800797e:	f04f 0200 	mov.w	r2, #0
 8007982:	f04f 0300 	mov.w	r3, #0
 8007986:	008b      	lsls	r3, r1, #2
 8007988:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800798c:	0082      	lsls	r2, r0, #2
 800798e:	4650      	mov	r0, sl
 8007990:	4659      	mov	r1, fp
 8007992:	f7f9 f8fb 	bl	8000b8c <__aeabi_uldivmod>
 8007996:	4602      	mov	r2, r0
 8007998:	460b      	mov	r3, r1
 800799a:	4bb3      	ldr	r3, [pc, #716]	; (8007c68 <UART_SetConfig+0x734>)
 800799c:	fba3 2302 	umull	r2, r3, r3, r2
 80079a0:	095b      	lsrs	r3, r3, #5
 80079a2:	011e      	lsls	r6, r3, #4
 80079a4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80079a8:	4618      	mov	r0, r3
 80079aa:	f04f 0100 	mov.w	r1, #0
 80079ae:	4602      	mov	r2, r0
 80079b0:	460b      	mov	r3, r1
 80079b2:	1894      	adds	r4, r2, r2
 80079b4:	623c      	str	r4, [r7, #32]
 80079b6:	415b      	adcs	r3, r3
 80079b8:	627b      	str	r3, [r7, #36]	; 0x24
 80079ba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80079be:	1812      	adds	r2, r2, r0
 80079c0:	eb41 0303 	adc.w	r3, r1, r3
 80079c4:	f04f 0400 	mov.w	r4, #0
 80079c8:	f04f 0500 	mov.w	r5, #0
 80079cc:	00dd      	lsls	r5, r3, #3
 80079ce:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80079d2:	00d4      	lsls	r4, r2, #3
 80079d4:	4622      	mov	r2, r4
 80079d6:	462b      	mov	r3, r5
 80079d8:	1814      	adds	r4, r2, r0
 80079da:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 80079de:	414b      	adcs	r3, r1
 80079e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80079e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079e8:	685b      	ldr	r3, [r3, #4]
 80079ea:	4618      	mov	r0, r3
 80079ec:	f04f 0100 	mov.w	r1, #0
 80079f0:	f04f 0200 	mov.w	r2, #0
 80079f4:	f04f 0300 	mov.w	r3, #0
 80079f8:	008b      	lsls	r3, r1, #2
 80079fa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80079fe:	0082      	lsls	r2, r0, #2
 8007a00:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8007a04:	f7f9 f8c2 	bl	8000b8c <__aeabi_uldivmod>
 8007a08:	4602      	mov	r2, r0
 8007a0a:	460b      	mov	r3, r1
 8007a0c:	4b96      	ldr	r3, [pc, #600]	; (8007c68 <UART_SetConfig+0x734>)
 8007a0e:	fba3 1302 	umull	r1, r3, r3, r2
 8007a12:	095b      	lsrs	r3, r3, #5
 8007a14:	2164      	movs	r1, #100	; 0x64
 8007a16:	fb01 f303 	mul.w	r3, r1, r3
 8007a1a:	1ad3      	subs	r3, r2, r3
 8007a1c:	011b      	lsls	r3, r3, #4
 8007a1e:	3332      	adds	r3, #50	; 0x32
 8007a20:	4a91      	ldr	r2, [pc, #580]	; (8007c68 <UART_SetConfig+0x734>)
 8007a22:	fba2 2303 	umull	r2, r3, r2, r3
 8007a26:	095b      	lsrs	r3, r3, #5
 8007a28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007a2c:	441e      	add	r6, r3
 8007a2e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007a32:	4618      	mov	r0, r3
 8007a34:	f04f 0100 	mov.w	r1, #0
 8007a38:	4602      	mov	r2, r0
 8007a3a:	460b      	mov	r3, r1
 8007a3c:	1894      	adds	r4, r2, r2
 8007a3e:	61bc      	str	r4, [r7, #24]
 8007a40:	415b      	adcs	r3, r3
 8007a42:	61fb      	str	r3, [r7, #28]
 8007a44:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007a48:	1812      	adds	r2, r2, r0
 8007a4a:	eb41 0303 	adc.w	r3, r1, r3
 8007a4e:	f04f 0400 	mov.w	r4, #0
 8007a52:	f04f 0500 	mov.w	r5, #0
 8007a56:	00dd      	lsls	r5, r3, #3
 8007a58:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007a5c:	00d4      	lsls	r4, r2, #3
 8007a5e:	4622      	mov	r2, r4
 8007a60:	462b      	mov	r3, r5
 8007a62:	1814      	adds	r4, r2, r0
 8007a64:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 8007a68:	414b      	adcs	r3, r1
 8007a6a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007a6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a72:	685b      	ldr	r3, [r3, #4]
 8007a74:	4618      	mov	r0, r3
 8007a76:	f04f 0100 	mov.w	r1, #0
 8007a7a:	f04f 0200 	mov.w	r2, #0
 8007a7e:	f04f 0300 	mov.w	r3, #0
 8007a82:	008b      	lsls	r3, r1, #2
 8007a84:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007a88:	0082      	lsls	r2, r0, #2
 8007a8a:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8007a8e:	f7f9 f87d 	bl	8000b8c <__aeabi_uldivmod>
 8007a92:	4602      	mov	r2, r0
 8007a94:	460b      	mov	r3, r1
 8007a96:	4b74      	ldr	r3, [pc, #464]	; (8007c68 <UART_SetConfig+0x734>)
 8007a98:	fba3 1302 	umull	r1, r3, r3, r2
 8007a9c:	095b      	lsrs	r3, r3, #5
 8007a9e:	2164      	movs	r1, #100	; 0x64
 8007aa0:	fb01 f303 	mul.w	r3, r1, r3
 8007aa4:	1ad3      	subs	r3, r2, r3
 8007aa6:	011b      	lsls	r3, r3, #4
 8007aa8:	3332      	adds	r3, #50	; 0x32
 8007aaa:	4a6f      	ldr	r2, [pc, #444]	; (8007c68 <UART_SetConfig+0x734>)
 8007aac:	fba2 2303 	umull	r2, r3, r2, r3
 8007ab0:	095b      	lsrs	r3, r3, #5
 8007ab2:	f003 020f 	and.w	r2, r3, #15
 8007ab6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	4432      	add	r2, r6
 8007abe:	609a      	str	r2, [r3, #8]
 8007ac0:	e0c9      	b.n	8007c56 <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 8007ac2:	f7fe f901 	bl	8005cc8 <HAL_RCC_GetPCLK1Freq>
 8007ac6:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007aca:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007ace:	461c      	mov	r4, r3
 8007ad0:	f04f 0500 	mov.w	r5, #0
 8007ad4:	4622      	mov	r2, r4
 8007ad6:	462b      	mov	r3, r5
 8007ad8:	1891      	adds	r1, r2, r2
 8007ada:	6139      	str	r1, [r7, #16]
 8007adc:	415b      	adcs	r3, r3
 8007ade:	617b      	str	r3, [r7, #20]
 8007ae0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007ae4:	1912      	adds	r2, r2, r4
 8007ae6:	eb45 0303 	adc.w	r3, r5, r3
 8007aea:	f04f 0000 	mov.w	r0, #0
 8007aee:	f04f 0100 	mov.w	r1, #0
 8007af2:	00d9      	lsls	r1, r3, #3
 8007af4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007af8:	00d0      	lsls	r0, r2, #3
 8007afa:	4602      	mov	r2, r0
 8007afc:	460b      	mov	r3, r1
 8007afe:	eb12 0804 	adds.w	r8, r2, r4
 8007b02:	eb43 0905 	adc.w	r9, r3, r5
 8007b06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b0a:	685b      	ldr	r3, [r3, #4]
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	f04f 0100 	mov.w	r1, #0
 8007b12:	f04f 0200 	mov.w	r2, #0
 8007b16:	f04f 0300 	mov.w	r3, #0
 8007b1a:	008b      	lsls	r3, r1, #2
 8007b1c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007b20:	0082      	lsls	r2, r0, #2
 8007b22:	4640      	mov	r0, r8
 8007b24:	4649      	mov	r1, r9
 8007b26:	f7f9 f831 	bl	8000b8c <__aeabi_uldivmod>
 8007b2a:	4602      	mov	r2, r0
 8007b2c:	460b      	mov	r3, r1
 8007b2e:	4b4e      	ldr	r3, [pc, #312]	; (8007c68 <UART_SetConfig+0x734>)
 8007b30:	fba3 2302 	umull	r2, r3, r3, r2
 8007b34:	095b      	lsrs	r3, r3, #5
 8007b36:	011e      	lsls	r6, r3, #4
 8007b38:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	f04f 0100 	mov.w	r1, #0
 8007b42:	4602      	mov	r2, r0
 8007b44:	460b      	mov	r3, r1
 8007b46:	1894      	adds	r4, r2, r2
 8007b48:	60bc      	str	r4, [r7, #8]
 8007b4a:	415b      	adcs	r3, r3
 8007b4c:	60fb      	str	r3, [r7, #12]
 8007b4e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007b52:	1812      	adds	r2, r2, r0
 8007b54:	eb41 0303 	adc.w	r3, r1, r3
 8007b58:	f04f 0400 	mov.w	r4, #0
 8007b5c:	f04f 0500 	mov.w	r5, #0
 8007b60:	00dd      	lsls	r5, r3, #3
 8007b62:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007b66:	00d4      	lsls	r4, r2, #3
 8007b68:	4622      	mov	r2, r4
 8007b6a:	462b      	mov	r3, r5
 8007b6c:	1814      	adds	r4, r2, r0
 8007b6e:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8007b72:	414b      	adcs	r3, r1
 8007b74:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007b78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b7c:	685b      	ldr	r3, [r3, #4]
 8007b7e:	4618      	mov	r0, r3
 8007b80:	f04f 0100 	mov.w	r1, #0
 8007b84:	f04f 0200 	mov.w	r2, #0
 8007b88:	f04f 0300 	mov.w	r3, #0
 8007b8c:	008b      	lsls	r3, r1, #2
 8007b8e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007b92:	0082      	lsls	r2, r0, #2
 8007b94:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007b98:	f7f8 fff8 	bl	8000b8c <__aeabi_uldivmod>
 8007b9c:	4602      	mov	r2, r0
 8007b9e:	460b      	mov	r3, r1
 8007ba0:	4b31      	ldr	r3, [pc, #196]	; (8007c68 <UART_SetConfig+0x734>)
 8007ba2:	fba3 1302 	umull	r1, r3, r3, r2
 8007ba6:	095b      	lsrs	r3, r3, #5
 8007ba8:	2164      	movs	r1, #100	; 0x64
 8007baa:	fb01 f303 	mul.w	r3, r1, r3
 8007bae:	1ad3      	subs	r3, r2, r3
 8007bb0:	011b      	lsls	r3, r3, #4
 8007bb2:	3332      	adds	r3, #50	; 0x32
 8007bb4:	4a2c      	ldr	r2, [pc, #176]	; (8007c68 <UART_SetConfig+0x734>)
 8007bb6:	fba2 2303 	umull	r2, r3, r2, r3
 8007bba:	095b      	lsrs	r3, r3, #5
 8007bbc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007bc0:	441e      	add	r6, r3
 8007bc2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	f04f 0100 	mov.w	r1, #0
 8007bcc:	4602      	mov	r2, r0
 8007bce:	460b      	mov	r3, r1
 8007bd0:	1894      	adds	r4, r2, r2
 8007bd2:	603c      	str	r4, [r7, #0]
 8007bd4:	415b      	adcs	r3, r3
 8007bd6:	607b      	str	r3, [r7, #4]
 8007bd8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007bdc:	1812      	adds	r2, r2, r0
 8007bde:	eb41 0303 	adc.w	r3, r1, r3
 8007be2:	f04f 0400 	mov.w	r4, #0
 8007be6:	f04f 0500 	mov.w	r5, #0
 8007bea:	00dd      	lsls	r5, r3, #3
 8007bec:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007bf0:	00d4      	lsls	r4, r2, #3
 8007bf2:	4622      	mov	r2, r4
 8007bf4:	462b      	mov	r3, r5
 8007bf6:	1814      	adds	r4, r2, r0
 8007bf8:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8007bfc:	414b      	adcs	r3, r1
 8007bfe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007c02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c06:	685b      	ldr	r3, [r3, #4]
 8007c08:	4618      	mov	r0, r3
 8007c0a:	f04f 0100 	mov.w	r1, #0
 8007c0e:	f04f 0200 	mov.w	r2, #0
 8007c12:	f04f 0300 	mov.w	r3, #0
 8007c16:	008b      	lsls	r3, r1, #2
 8007c18:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007c1c:	0082      	lsls	r2, r0, #2
 8007c1e:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8007c22:	f7f8 ffb3 	bl	8000b8c <__aeabi_uldivmod>
 8007c26:	4602      	mov	r2, r0
 8007c28:	460b      	mov	r3, r1
 8007c2a:	4b0f      	ldr	r3, [pc, #60]	; (8007c68 <UART_SetConfig+0x734>)
 8007c2c:	fba3 1302 	umull	r1, r3, r3, r2
 8007c30:	095b      	lsrs	r3, r3, #5
 8007c32:	2164      	movs	r1, #100	; 0x64
 8007c34:	fb01 f303 	mul.w	r3, r1, r3
 8007c38:	1ad3      	subs	r3, r2, r3
 8007c3a:	011b      	lsls	r3, r3, #4
 8007c3c:	3332      	adds	r3, #50	; 0x32
 8007c3e:	4a0a      	ldr	r2, [pc, #40]	; (8007c68 <UART_SetConfig+0x734>)
 8007c40:	fba2 2303 	umull	r2, r3, r2, r3
 8007c44:	095b      	lsrs	r3, r3, #5
 8007c46:	f003 020f 	and.w	r2, r3, #15
 8007c4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	4432      	add	r2, r6
 8007c52:	609a      	str	r2, [r3, #8]
}
 8007c54:	e7ff      	b.n	8007c56 <UART_SetConfig+0x722>
 8007c56:	bf00      	nop
 8007c58:	37f4      	adds	r7, #244	; 0xf4
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c60:	40011000 	.word	0x40011000
 8007c64:	40011400 	.word	0x40011400
 8007c68:	51eb851f 	.word	0x51eb851f

08007c6c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007c6c:	b480      	push	{r7}
 8007c6e:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8007c70:	bf00      	nop
 8007c72:	46bd      	mov	sp, r7
 8007c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c78:	4770      	bx	lr
	...

08007c7c <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007c7c:	b480      	push	{r7}
 8007c7e:	b085      	sub	sp, #20
 8007c80:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007c82:	f3ef 8305 	mrs	r3, IPSR
 8007c86:	60bb      	str	r3, [r7, #8]
  return(result);
 8007c88:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d10f      	bne.n	8007cae <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007c8e:	f3ef 8310 	mrs	r3, PRIMASK
 8007c92:	607b      	str	r3, [r7, #4]
  return(result);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d105      	bne.n	8007ca6 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007c9a:	f3ef 8311 	mrs	r3, BASEPRI
 8007c9e:	603b      	str	r3, [r7, #0]
  return(result);
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d007      	beq.n	8007cb6 <osKernelInitialize+0x3a>
 8007ca6:	4b0e      	ldr	r3, [pc, #56]	; (8007ce0 <osKernelInitialize+0x64>)
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	2b02      	cmp	r3, #2
 8007cac:	d103      	bne.n	8007cb6 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8007cae:	f06f 0305 	mvn.w	r3, #5
 8007cb2:	60fb      	str	r3, [r7, #12]
 8007cb4:	e00c      	b.n	8007cd0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007cb6:	4b0a      	ldr	r3, [pc, #40]	; (8007ce0 <osKernelInitialize+0x64>)
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d105      	bne.n	8007cca <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007cbe:	4b08      	ldr	r3, [pc, #32]	; (8007ce0 <osKernelInitialize+0x64>)
 8007cc0:	2201      	movs	r2, #1
 8007cc2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	60fb      	str	r3, [r7, #12]
 8007cc8:	e002      	b.n	8007cd0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8007cca:	f04f 33ff 	mov.w	r3, #4294967295
 8007cce:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8007cd0:	68fb      	ldr	r3, [r7, #12]
}
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	3714      	adds	r7, #20
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cdc:	4770      	bx	lr
 8007cde:	bf00      	nop
 8007ce0:	20004edc 	.word	0x20004edc

08007ce4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b084      	sub	sp, #16
 8007ce8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007cea:	f3ef 8305 	mrs	r3, IPSR
 8007cee:	60bb      	str	r3, [r7, #8]
  return(result);
 8007cf0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d10f      	bne.n	8007d16 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007cf6:	f3ef 8310 	mrs	r3, PRIMASK
 8007cfa:	607b      	str	r3, [r7, #4]
  return(result);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d105      	bne.n	8007d0e <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007d02:	f3ef 8311 	mrs	r3, BASEPRI
 8007d06:	603b      	str	r3, [r7, #0]
  return(result);
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d007      	beq.n	8007d1e <osKernelStart+0x3a>
 8007d0e:	4b0f      	ldr	r3, [pc, #60]	; (8007d4c <osKernelStart+0x68>)
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	2b02      	cmp	r3, #2
 8007d14:	d103      	bne.n	8007d1e <osKernelStart+0x3a>
    stat = osErrorISR;
 8007d16:	f06f 0305 	mvn.w	r3, #5
 8007d1a:	60fb      	str	r3, [r7, #12]
 8007d1c:	e010      	b.n	8007d40 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007d1e:	4b0b      	ldr	r3, [pc, #44]	; (8007d4c <osKernelStart+0x68>)
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	2b01      	cmp	r3, #1
 8007d24:	d109      	bne.n	8007d3a <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007d26:	f7ff ffa1 	bl	8007c6c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007d2a:	4b08      	ldr	r3, [pc, #32]	; (8007d4c <osKernelStart+0x68>)
 8007d2c:	2202      	movs	r2, #2
 8007d2e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007d30:	f001 fdec 	bl	800990c <vTaskStartScheduler>
      stat = osOK;
 8007d34:	2300      	movs	r3, #0
 8007d36:	60fb      	str	r3, [r7, #12]
 8007d38:	e002      	b.n	8007d40 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8007d3a:	f04f 33ff 	mov.w	r3, #4294967295
 8007d3e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8007d40:	68fb      	ldr	r3, [r7, #12]
}
 8007d42:	4618      	mov	r0, r3
 8007d44:	3710      	adds	r7, #16
 8007d46:	46bd      	mov	sp, r7
 8007d48:	bd80      	pop	{r7, pc}
 8007d4a:	bf00      	nop
 8007d4c:	20004edc 	.word	0x20004edc

08007d50 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b090      	sub	sp, #64	; 0x40
 8007d54:	af04      	add	r7, sp, #16
 8007d56:	60f8      	str	r0, [r7, #12]
 8007d58:	60b9      	str	r1, [r7, #8]
 8007d5a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007d60:	f3ef 8305 	mrs	r3, IPSR
 8007d64:	61fb      	str	r3, [r7, #28]
  return(result);
 8007d66:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	f040 808f 	bne.w	8007e8c <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007d6e:	f3ef 8310 	mrs	r3, PRIMASK
 8007d72:	61bb      	str	r3, [r7, #24]
  return(result);
 8007d74:	69bb      	ldr	r3, [r7, #24]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d105      	bne.n	8007d86 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007d7a:	f3ef 8311 	mrs	r3, BASEPRI
 8007d7e:	617b      	str	r3, [r7, #20]
  return(result);
 8007d80:	697b      	ldr	r3, [r7, #20]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d003      	beq.n	8007d8e <osThreadNew+0x3e>
 8007d86:	4b44      	ldr	r3, [pc, #272]	; (8007e98 <osThreadNew+0x148>)
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	2b02      	cmp	r3, #2
 8007d8c:	d07e      	beq.n	8007e8c <osThreadNew+0x13c>
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d07b      	beq.n	8007e8c <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8007d94:	2380      	movs	r3, #128	; 0x80
 8007d96:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8007d98:	2318      	movs	r3, #24
 8007d9a:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8007da0:	f04f 33ff 	mov.w	r3, #4294967295
 8007da4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d045      	beq.n	8007e38 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d002      	beq.n	8007dba <osThreadNew+0x6a>
        name = attr->name;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	699b      	ldr	r3, [r3, #24]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d002      	beq.n	8007dc8 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	699b      	ldr	r3, [r3, #24]
 8007dc6:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d008      	beq.n	8007de0 <osThreadNew+0x90>
 8007dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dd0:	2b38      	cmp	r3, #56	; 0x38
 8007dd2:	d805      	bhi.n	8007de0 <osThreadNew+0x90>
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	685b      	ldr	r3, [r3, #4]
 8007dd8:	f003 0301 	and.w	r3, r3, #1
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d001      	beq.n	8007de4 <osThreadNew+0x94>
        return (NULL);
 8007de0:	2300      	movs	r3, #0
 8007de2:	e054      	b.n	8007e8e <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	695b      	ldr	r3, [r3, #20]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d003      	beq.n	8007df4 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	695b      	ldr	r3, [r3, #20]
 8007df0:	089b      	lsrs	r3, r3, #2
 8007df2:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	689b      	ldr	r3, [r3, #8]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d00e      	beq.n	8007e1a <osThreadNew+0xca>
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	68db      	ldr	r3, [r3, #12]
 8007e00:	2b5b      	cmp	r3, #91	; 0x5b
 8007e02:	d90a      	bls.n	8007e1a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d006      	beq.n	8007e1a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	695b      	ldr	r3, [r3, #20]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d002      	beq.n	8007e1a <osThreadNew+0xca>
        mem = 1;
 8007e14:	2301      	movs	r3, #1
 8007e16:	623b      	str	r3, [r7, #32]
 8007e18:	e010      	b.n	8007e3c <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	689b      	ldr	r3, [r3, #8]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d10c      	bne.n	8007e3c <osThreadNew+0xec>
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	68db      	ldr	r3, [r3, #12]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d108      	bne.n	8007e3c <osThreadNew+0xec>
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	691b      	ldr	r3, [r3, #16]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d104      	bne.n	8007e3c <osThreadNew+0xec>
          mem = 0;
 8007e32:	2300      	movs	r3, #0
 8007e34:	623b      	str	r3, [r7, #32]
 8007e36:	e001      	b.n	8007e3c <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8007e38:	2300      	movs	r3, #0
 8007e3a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8007e3c:	6a3b      	ldr	r3, [r7, #32]
 8007e3e:	2b01      	cmp	r3, #1
 8007e40:	d110      	bne.n	8007e64 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8007e46:	687a      	ldr	r2, [r7, #4]
 8007e48:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007e4a:	9202      	str	r2, [sp, #8]
 8007e4c:	9301      	str	r3, [sp, #4]
 8007e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e50:	9300      	str	r3, [sp, #0]
 8007e52:	68bb      	ldr	r3, [r7, #8]
 8007e54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007e56:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007e58:	68f8      	ldr	r0, [r7, #12]
 8007e5a:	f001 fb81 	bl	8009560 <xTaskCreateStatic>
 8007e5e:	4603      	mov	r3, r0
 8007e60:	613b      	str	r3, [r7, #16]
 8007e62:	e013      	b.n	8007e8c <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8007e64:	6a3b      	ldr	r3, [r7, #32]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d110      	bne.n	8007e8c <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e6c:	b29a      	uxth	r2, r3
 8007e6e:	f107 0310 	add.w	r3, r7, #16
 8007e72:	9301      	str	r3, [sp, #4]
 8007e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e76:	9300      	str	r3, [sp, #0]
 8007e78:	68bb      	ldr	r3, [r7, #8]
 8007e7a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007e7c:	68f8      	ldr	r0, [r7, #12]
 8007e7e:	f001 fbcc 	bl	800961a <xTaskCreate>
 8007e82:	4603      	mov	r3, r0
 8007e84:	2b01      	cmp	r3, #1
 8007e86:	d001      	beq.n	8007e8c <osThreadNew+0x13c>
          hTask = NULL;
 8007e88:	2300      	movs	r3, #0
 8007e8a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007e8c:	693b      	ldr	r3, [r7, #16]
}
 8007e8e:	4618      	mov	r0, r3
 8007e90:	3730      	adds	r7, #48	; 0x30
 8007e92:	46bd      	mov	sp, r7
 8007e94:	bd80      	pop	{r7, pc}
 8007e96:	bf00      	nop
 8007e98:	20004edc 	.word	0x20004edc

08007e9c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b086      	sub	sp, #24
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007ea4:	f3ef 8305 	mrs	r3, IPSR
 8007ea8:	613b      	str	r3, [r7, #16]
  return(result);
 8007eaa:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d10f      	bne.n	8007ed0 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007eb0:	f3ef 8310 	mrs	r3, PRIMASK
 8007eb4:	60fb      	str	r3, [r7, #12]
  return(result);
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d105      	bne.n	8007ec8 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007ebc:	f3ef 8311 	mrs	r3, BASEPRI
 8007ec0:	60bb      	str	r3, [r7, #8]
  return(result);
 8007ec2:	68bb      	ldr	r3, [r7, #8]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d007      	beq.n	8007ed8 <osDelay+0x3c>
 8007ec8:	4b0a      	ldr	r3, [pc, #40]	; (8007ef4 <osDelay+0x58>)
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	2b02      	cmp	r3, #2
 8007ece:	d103      	bne.n	8007ed8 <osDelay+0x3c>
    stat = osErrorISR;
 8007ed0:	f06f 0305 	mvn.w	r3, #5
 8007ed4:	617b      	str	r3, [r7, #20]
 8007ed6:	e007      	b.n	8007ee8 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8007ed8:	2300      	movs	r3, #0
 8007eda:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d002      	beq.n	8007ee8 <osDelay+0x4c>
      vTaskDelay(ticks);
 8007ee2:	6878      	ldr	r0, [r7, #4]
 8007ee4:	f001 fcde 	bl	80098a4 <vTaskDelay>
    }
  }

  return (stat);
 8007ee8:	697b      	ldr	r3, [r7, #20]
}
 8007eea:	4618      	mov	r0, r3
 8007eec:	3718      	adds	r7, #24
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	bd80      	pop	{r7, pc}
 8007ef2:	bf00      	nop
 8007ef4:	20004edc 	.word	0x20004edc

08007ef8 <osEventFlagsNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b088      	sub	sp, #32
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8007f00:	2300      	movs	r3, #0
 8007f02:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007f04:	f3ef 8305 	mrs	r3, IPSR
 8007f08:	617b      	str	r3, [r7, #20]
  return(result);
 8007f0a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ()) {
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d13d      	bne.n	8007f8c <osEventFlagsNew+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f10:	f3ef 8310 	mrs	r3, PRIMASK
 8007f14:	613b      	str	r3, [r7, #16]
  return(result);
 8007f16:	693b      	ldr	r3, [r7, #16]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d105      	bne.n	8007f28 <osEventFlagsNew+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007f1c:	f3ef 8311 	mrs	r3, BASEPRI
 8007f20:	60fb      	str	r3, [r7, #12]
  return(result);
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d003      	beq.n	8007f30 <osEventFlagsNew+0x38>
 8007f28:	4b1b      	ldr	r3, [pc, #108]	; (8007f98 <osEventFlagsNew+0xa0>)
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	2b02      	cmp	r3, #2
 8007f2e:	d02d      	beq.n	8007f8c <osEventFlagsNew+0x94>
    mem = -1;
 8007f30:	f04f 33ff 	mov.w	r3, #4294967295
 8007f34:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d015      	beq.n	8007f68 <osEventFlagsNew+0x70>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	689b      	ldr	r3, [r3, #8]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d006      	beq.n	8007f52 <osEventFlagsNew+0x5a>
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	68db      	ldr	r3, [r3, #12]
 8007f48:	2b1f      	cmp	r3, #31
 8007f4a:	d902      	bls.n	8007f52 <osEventFlagsNew+0x5a>
        mem = 1;
 8007f4c:	2301      	movs	r3, #1
 8007f4e:	61bb      	str	r3, [r7, #24]
 8007f50:	e00c      	b.n	8007f6c <osEventFlagsNew+0x74>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	689b      	ldr	r3, [r3, #8]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d108      	bne.n	8007f6c <osEventFlagsNew+0x74>
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	68db      	ldr	r3, [r3, #12]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d104      	bne.n	8007f6c <osEventFlagsNew+0x74>
          mem = 0;
 8007f62:	2300      	movs	r3, #0
 8007f64:	61bb      	str	r3, [r7, #24]
 8007f66:	e001      	b.n	8007f6c <osEventFlagsNew+0x74>
        }
      }
    }
    else {
      mem = 0;
 8007f68:	2300      	movs	r3, #0
 8007f6a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007f6c:	69bb      	ldr	r3, [r7, #24]
 8007f6e:	2b01      	cmp	r3, #1
 8007f70:	d106      	bne.n	8007f80 <osEventFlagsNew+0x88>
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	689b      	ldr	r3, [r3, #8]
 8007f76:	4618      	mov	r0, r3
 8007f78:	f000 f9f2 	bl	8008360 <xEventGroupCreateStatic>
 8007f7c:	61f8      	str	r0, [r7, #28]
 8007f7e:	e005      	b.n	8007f8c <osEventFlagsNew+0x94>
    }
    else {
      if (mem == 0) {
 8007f80:	69bb      	ldr	r3, [r7, #24]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d102      	bne.n	8007f8c <osEventFlagsNew+0x94>
        hEventGroup = xEventGroupCreate();
 8007f86:	f000 fa22 	bl	80083ce <xEventGroupCreate>
 8007f8a:	61f8      	str	r0, [r7, #28]
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8007f8c:	69fb      	ldr	r3, [r7, #28]
}
 8007f8e:	4618      	mov	r0, r3
 8007f90:	3720      	adds	r7, #32
 8007f92:	46bd      	mov	sp, r7
 8007f94:	bd80      	pop	{r7, pc}
 8007f96:	bf00      	nop
 8007f98:	20004edc 	.word	0x20004edc

08007f9c <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b088      	sub	sp, #32
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
 8007fa4:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	61bb      	str	r3, [r7, #24]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8007faa:	69bb      	ldr	r3, [r7, #24]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d004      	beq.n	8007fba <osEventFlagsSet+0x1e>
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d003      	beq.n	8007fc2 <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 8007fba:	f06f 0303 	mvn.w	r3, #3
 8007fbe:	61fb      	str	r3, [r7, #28]
 8007fc0:	e03a      	b.n	8008038 <osEventFlagsSet+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007fc2:	f3ef 8305 	mrs	r3, IPSR
 8007fc6:	617b      	str	r3, [r7, #20]
  return(result);
 8007fc8:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d10f      	bne.n	8007fee <osEventFlagsSet+0x52>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007fce:	f3ef 8310 	mrs	r3, PRIMASK
 8007fd2:	613b      	str	r3, [r7, #16]
  return(result);
 8007fd4:	693b      	ldr	r3, [r7, #16]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d105      	bne.n	8007fe6 <osEventFlagsSet+0x4a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007fda:	f3ef 8311 	mrs	r3, BASEPRI
 8007fde:	60fb      	str	r3, [r7, #12]
  return(result);
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d021      	beq.n	800802a <osEventFlagsSet+0x8e>
 8007fe6:	4b17      	ldr	r3, [pc, #92]	; (8008044 <osEventFlagsSet+0xa8>)
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	2b02      	cmp	r3, #2
 8007fec:	d11d      	bne.n	800802a <osEventFlagsSet+0x8e>
    yield = pdFALSE;
 8007fee:	2300      	movs	r3, #0
 8007ff0:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8007ff2:	f107 0308 	add.w	r3, r7, #8
 8007ff6:	461a      	mov	r2, r3
 8007ff8:	6839      	ldr	r1, [r7, #0]
 8007ffa:	69b8      	ldr	r0, [r7, #24]
 8007ffc:	f000 fc08 	bl	8008810 <xEventGroupSetBitsFromISR>
 8008000:	4603      	mov	r3, r0
 8008002:	2b00      	cmp	r3, #0
 8008004:	d103      	bne.n	800800e <osEventFlagsSet+0x72>
      rflags = (uint32_t)osErrorResource;
 8008006:	f06f 0302 	mvn.w	r3, #2
 800800a:	61fb      	str	r3, [r7, #28]
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 800800c:	e013      	b.n	8008036 <osEventFlagsSet+0x9a>
    } else {
      rflags = flags;
 800800e:	683b      	ldr	r3, [r7, #0]
 8008010:	61fb      	str	r3, [r7, #28]
      portYIELD_FROM_ISR (yield);
 8008012:	68bb      	ldr	r3, [r7, #8]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d00e      	beq.n	8008036 <osEventFlagsSet+0x9a>
 8008018:	4b0b      	ldr	r3, [pc, #44]	; (8008048 <osEventFlagsSet+0xac>)
 800801a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800801e:	601a      	str	r2, [r3, #0]
 8008020:	f3bf 8f4f 	dsb	sy
 8008024:	f3bf 8f6f 	isb	sy
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8008028:	e005      	b.n	8008036 <osEventFlagsSet+0x9a>
    }
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 800802a:	6839      	ldr	r1, [r7, #0]
 800802c:	69b8      	ldr	r0, [r7, #24]
 800802e:	f000 fb27 	bl	8008680 <xEventGroupSetBits>
 8008032:	61f8      	str	r0, [r7, #28]
 8008034:	e000      	b.n	8008038 <osEventFlagsSet+0x9c>
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8008036:	bf00      	nop
  }

  return (rflags);
 8008038:	69fb      	ldr	r3, [r7, #28]
}
 800803a:	4618      	mov	r0, r3
 800803c:	3720      	adds	r7, #32
 800803e:	46bd      	mov	sp, r7
 8008040:	bd80      	pop	{r7, pc}
 8008042:	bf00      	nop
 8008044:	20004edc 	.word	0x20004edc
 8008048:	e000ed04 	.word	0xe000ed04

0800804c <osEventFlagsClear>:

uint32_t osEventFlagsClear (osEventFlagsId_t ef_id, uint32_t flags) {
 800804c:	b580      	push	{r7, lr}
 800804e:	b088      	sub	sp, #32
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
 8008054:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	61bb      	str	r3, [r7, #24]
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800805a:	69bb      	ldr	r3, [r7, #24]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d004      	beq.n	800806a <osEventFlagsClear+0x1e>
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8008066:	2b00      	cmp	r3, #0
 8008068:	d003      	beq.n	8008072 <osEventFlagsClear+0x26>
    rflags = (uint32_t)osErrorParameter;
 800806a:	f06f 0303 	mvn.w	r3, #3
 800806e:	61fb      	str	r3, [r7, #28]
 8008070:	e029      	b.n	80080c6 <osEventFlagsClear+0x7a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008072:	f3ef 8305 	mrs	r3, IPSR
 8008076:	617b      	str	r3, [r7, #20]
  return(result);
 8008078:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800807a:	2b00      	cmp	r3, #0
 800807c:	d10f      	bne.n	800809e <osEventFlagsClear+0x52>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800807e:	f3ef 8310 	mrs	r3, PRIMASK
 8008082:	613b      	str	r3, [r7, #16]
  return(result);
 8008084:	693b      	ldr	r3, [r7, #16]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d105      	bne.n	8008096 <osEventFlagsClear+0x4a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800808a:	f3ef 8311 	mrs	r3, BASEPRI
 800808e:	60fb      	str	r3, [r7, #12]
  return(result);
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d012      	beq.n	80080bc <osEventFlagsClear+0x70>
 8008096:	4b0e      	ldr	r3, [pc, #56]	; (80080d0 <osEventFlagsClear+0x84>)
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	2b02      	cmp	r3, #2
 800809c:	d10e      	bne.n	80080bc <osEventFlagsClear+0x70>
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 800809e:	69b8      	ldr	r0, [r7, #24]
 80080a0:	f000 faca 	bl	8008638 <xEventGroupGetBitsFromISR>
 80080a4:	61f8      	str	r0, [r7, #28]

    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 80080a6:	6839      	ldr	r1, [r7, #0]
 80080a8:	69b8      	ldr	r0, [r7, #24]
 80080aa:	f000 fab1 	bl	8008610 <xEventGroupClearBitsFromISR>
 80080ae:	4603      	mov	r3, r0
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d108      	bne.n	80080c6 <osEventFlagsClear+0x7a>
      rflags = (uint32_t)osErrorResource;
 80080b4:	f06f 0302 	mvn.w	r3, #2
 80080b8:	61fb      	str	r3, [r7, #28]
    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 80080ba:	e004      	b.n	80080c6 <osEventFlagsClear+0x7a>
    }
  }
  else {
    rflags = xEventGroupClearBits (hEventGroup, (EventBits_t)flags);
 80080bc:	6839      	ldr	r1, [r7, #0]
 80080be:	69b8      	ldr	r0, [r7, #24]
 80080c0:	f000 fa6e 	bl	80085a0 <xEventGroupClearBits>
 80080c4:	61f8      	str	r0, [r7, #28]
  }

  return (rflags);
 80080c6:	69fb      	ldr	r3, [r7, #28]
}
 80080c8:	4618      	mov	r0, r3
 80080ca:	3720      	adds	r7, #32
 80080cc:	46bd      	mov	sp, r7
 80080ce:	bd80      	pop	{r7, pc}
 80080d0:	20004edc 	.word	0x20004edc

080080d4 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b08e      	sub	sp, #56	; 0x38
 80080d8:	af02      	add	r7, sp, #8
 80080da:	60f8      	str	r0, [r7, #12]
 80080dc:	60b9      	str	r1, [r7, #8]
 80080de:	607a      	str	r2, [r7, #4]
 80080e0:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	623b      	str	r3, [r7, #32]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 80080e6:	6a3b      	ldr	r3, [r7, #32]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d004      	beq.n	80080f6 <osEventFlagsWait+0x22>
 80080ec:	68bb      	ldr	r3, [r7, #8]
 80080ee:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d003      	beq.n	80080fe <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 80080f6:	f06f 0303 	mvn.w	r3, #3
 80080fa:	627b      	str	r3, [r7, #36]	; 0x24
 80080fc:	e059      	b.n	80081b2 <osEventFlagsWait+0xde>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80080fe:	f3ef 8305 	mrs	r3, IPSR
 8008102:	61fb      	str	r3, [r7, #28]
  return(result);
 8008104:	69fb      	ldr	r3, [r7, #28]
  }
  else if (IS_IRQ()) {
 8008106:	2b00      	cmp	r3, #0
 8008108:	d10f      	bne.n	800812a <osEventFlagsWait+0x56>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800810a:	f3ef 8310 	mrs	r3, PRIMASK
 800810e:	61bb      	str	r3, [r7, #24]
  return(result);
 8008110:	69bb      	ldr	r3, [r7, #24]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d105      	bne.n	8008122 <osEventFlagsWait+0x4e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008116:	f3ef 8311 	mrs	r3, BASEPRI
 800811a:	617b      	str	r3, [r7, #20]
  return(result);
 800811c:	697b      	ldr	r3, [r7, #20]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d007      	beq.n	8008132 <osEventFlagsWait+0x5e>
 8008122:	4b26      	ldr	r3, [pc, #152]	; (80081bc <osEventFlagsWait+0xe8>)
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	2b02      	cmp	r3, #2
 8008128:	d103      	bne.n	8008132 <osEventFlagsWait+0x5e>
    rflags = (uint32_t)osErrorISR;
 800812a:	f06f 0305 	mvn.w	r3, #5
 800812e:	627b      	str	r3, [r7, #36]	; 0x24
 8008130:	e03f      	b.n	80081b2 <osEventFlagsWait+0xde>
  }
  else {
    if (options & osFlagsWaitAll) {
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	f003 0301 	and.w	r3, r3, #1
 8008138:	2b00      	cmp	r3, #0
 800813a:	d002      	beq.n	8008142 <osEventFlagsWait+0x6e>
      wait_all = pdTRUE;
 800813c:	2301      	movs	r3, #1
 800813e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008140:	e001      	b.n	8008146 <osEventFlagsWait+0x72>
    } else {
      wait_all = pdFAIL;
 8008142:	2300      	movs	r3, #0
 8008144:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    if (options & osFlagsNoClear) {
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	f003 0302 	and.w	r3, r3, #2
 800814c:	2b00      	cmp	r3, #0
 800814e:	d002      	beq.n	8008156 <osEventFlagsWait+0x82>
      exit_clr = pdFAIL;
 8008150:	2300      	movs	r3, #0
 8008152:	62bb      	str	r3, [r7, #40]	; 0x28
 8008154:	e001      	b.n	800815a <osEventFlagsWait+0x86>
    } else {
      exit_clr = pdTRUE;
 8008156:	2301      	movs	r3, #1
 8008158:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	9300      	str	r3, [sp, #0]
 800815e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008160:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008162:	68b9      	ldr	r1, [r7, #8]
 8008164:	6a38      	ldr	r0, [r7, #32]
 8008166:	f000 f94d 	bl	8008404 <xEventGroupWaitBits>
 800816a:	6278      	str	r0, [r7, #36]	; 0x24

    if (options & osFlagsWaitAll) {
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	f003 0301 	and.w	r3, r3, #1
 8008172:	2b00      	cmp	r3, #0
 8008174:	d00e      	beq.n	8008194 <osEventFlagsWait+0xc0>
      if (flags != rflags) {
 8008176:	68ba      	ldr	r2, [r7, #8]
 8008178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800817a:	429a      	cmp	r2, r3
 800817c:	d019      	beq.n	80081b2 <osEventFlagsWait+0xde>
        if (timeout > 0U) {
 800817e:	683b      	ldr	r3, [r7, #0]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d003      	beq.n	800818c <osEventFlagsWait+0xb8>
          rflags = (uint32_t)osErrorTimeout;
 8008184:	f06f 0301 	mvn.w	r3, #1
 8008188:	627b      	str	r3, [r7, #36]	; 0x24
 800818a:	e012      	b.n	80081b2 <osEventFlagsWait+0xde>
        } else {
          rflags = (uint32_t)osErrorResource;
 800818c:	f06f 0302 	mvn.w	r3, #2
 8008190:	627b      	str	r3, [r7, #36]	; 0x24
 8008192:	e00e      	b.n	80081b2 <osEventFlagsWait+0xde>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8008194:	68ba      	ldr	r2, [r7, #8]
 8008196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008198:	4013      	ands	r3, r2
 800819a:	2b00      	cmp	r3, #0
 800819c:	d109      	bne.n	80081b2 <osEventFlagsWait+0xde>
        if (timeout > 0U) {
 800819e:	683b      	ldr	r3, [r7, #0]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d003      	beq.n	80081ac <osEventFlagsWait+0xd8>
          rflags = (uint32_t)osErrorTimeout;
 80081a4:	f06f 0301 	mvn.w	r3, #1
 80081a8:	627b      	str	r3, [r7, #36]	; 0x24
 80081aa:	e002      	b.n	80081b2 <osEventFlagsWait+0xde>
        } else {
          rflags = (uint32_t)osErrorResource;
 80081ac:	f06f 0302 	mvn.w	r3, #2
 80081b0:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }
  }

  return (rflags);
 80081b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80081b4:	4618      	mov	r0, r3
 80081b6:	3730      	adds	r7, #48	; 0x30
 80081b8:	46bd      	mov	sp, r7
 80081ba:	bd80      	pop	{r7, pc}
 80081bc:	20004edc 	.word	0x20004edc

080081c0 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80081c0:	b580      	push	{r7, lr}
 80081c2:	b08c      	sub	sp, #48	; 0x30
 80081c4:	af02      	add	r7, sp, #8
 80081c6:	60f8      	str	r0, [r7, #12]
 80081c8:	60b9      	str	r1, [r7, #8]
 80081ca:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80081cc:	2300      	movs	r3, #0
 80081ce:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80081d0:	f3ef 8305 	mrs	r3, IPSR
 80081d4:	61bb      	str	r3, [r7, #24]
  return(result);
 80081d6:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80081d8:	2b00      	cmp	r3, #0
 80081da:	f040 8086 	bne.w	80082ea <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80081de:	f3ef 8310 	mrs	r3, PRIMASK
 80081e2:	617b      	str	r3, [r7, #20]
  return(result);
 80081e4:	697b      	ldr	r3, [r7, #20]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d105      	bne.n	80081f6 <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80081ea:	f3ef 8311 	mrs	r3, BASEPRI
 80081ee:	613b      	str	r3, [r7, #16]
  return(result);
 80081f0:	693b      	ldr	r3, [r7, #16]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d003      	beq.n	80081fe <osSemaphoreNew+0x3e>
 80081f6:	4b3f      	ldr	r3, [pc, #252]	; (80082f4 <osSemaphoreNew+0x134>)
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	2b02      	cmp	r3, #2
 80081fc:	d075      	beq.n	80082ea <osSemaphoreNew+0x12a>
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d072      	beq.n	80082ea <osSemaphoreNew+0x12a>
 8008204:	68ba      	ldr	r2, [r7, #8]
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	429a      	cmp	r2, r3
 800820a:	d86e      	bhi.n	80082ea <osSemaphoreNew+0x12a>
    mem = -1;
 800820c:	f04f 33ff 	mov.w	r3, #4294967295
 8008210:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d015      	beq.n	8008244 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	689b      	ldr	r3, [r3, #8]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d006      	beq.n	800822e <osSemaphoreNew+0x6e>
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	68db      	ldr	r3, [r3, #12]
 8008224:	2b4f      	cmp	r3, #79	; 0x4f
 8008226:	d902      	bls.n	800822e <osSemaphoreNew+0x6e>
        mem = 1;
 8008228:	2301      	movs	r3, #1
 800822a:	623b      	str	r3, [r7, #32]
 800822c:	e00c      	b.n	8008248 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	689b      	ldr	r3, [r3, #8]
 8008232:	2b00      	cmp	r3, #0
 8008234:	d108      	bne.n	8008248 <osSemaphoreNew+0x88>
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	68db      	ldr	r3, [r3, #12]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d104      	bne.n	8008248 <osSemaphoreNew+0x88>
          mem = 0;
 800823e:	2300      	movs	r3, #0
 8008240:	623b      	str	r3, [r7, #32]
 8008242:	e001      	b.n	8008248 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8008244:	2300      	movs	r3, #0
 8008246:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8008248:	6a3b      	ldr	r3, [r7, #32]
 800824a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800824e:	d04c      	beq.n	80082ea <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	2b01      	cmp	r3, #1
 8008254:	d128      	bne.n	80082a8 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 8008256:	6a3b      	ldr	r3, [r7, #32]
 8008258:	2b01      	cmp	r3, #1
 800825a:	d10a      	bne.n	8008272 <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	689b      	ldr	r3, [r3, #8]
 8008260:	2203      	movs	r2, #3
 8008262:	9200      	str	r2, [sp, #0]
 8008264:	2200      	movs	r2, #0
 8008266:	2100      	movs	r1, #0
 8008268:	2001      	movs	r0, #1
 800826a:	f000 fc01 	bl	8008a70 <xQueueGenericCreateStatic>
 800826e:	6278      	str	r0, [r7, #36]	; 0x24
 8008270:	e005      	b.n	800827e <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8008272:	2203      	movs	r2, #3
 8008274:	2100      	movs	r1, #0
 8008276:	2001      	movs	r0, #1
 8008278:	f000 fc72 	bl	8008b60 <xQueueGenericCreate>
 800827c:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800827e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008280:	2b00      	cmp	r3, #0
 8008282:	d022      	beq.n	80082ca <osSemaphoreNew+0x10a>
 8008284:	68bb      	ldr	r3, [r7, #8]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d01f      	beq.n	80082ca <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800828a:	2300      	movs	r3, #0
 800828c:	2200      	movs	r2, #0
 800828e:	2100      	movs	r1, #0
 8008290:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008292:	f000 fd33 	bl	8008cfc <xQueueGenericSend>
 8008296:	4603      	mov	r3, r0
 8008298:	2b01      	cmp	r3, #1
 800829a:	d016      	beq.n	80082ca <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 800829c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800829e:	f000 ffa3 	bl	80091e8 <vQueueDelete>
            hSemaphore = NULL;
 80082a2:	2300      	movs	r3, #0
 80082a4:	627b      	str	r3, [r7, #36]	; 0x24
 80082a6:	e010      	b.n	80082ca <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 80082a8:	6a3b      	ldr	r3, [r7, #32]
 80082aa:	2b01      	cmp	r3, #1
 80082ac:	d108      	bne.n	80082c0 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	689b      	ldr	r3, [r3, #8]
 80082b2:	461a      	mov	r2, r3
 80082b4:	68b9      	ldr	r1, [r7, #8]
 80082b6:	68f8      	ldr	r0, [r7, #12]
 80082b8:	f000 fcb5 	bl	8008c26 <xQueueCreateCountingSemaphoreStatic>
 80082bc:	6278      	str	r0, [r7, #36]	; 0x24
 80082be:	e004      	b.n	80082ca <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80082c0:	68b9      	ldr	r1, [r7, #8]
 80082c2:	68f8      	ldr	r0, [r7, #12]
 80082c4:	f000 fce6 	bl	8008c94 <xQueueCreateCountingSemaphore>
 80082c8:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80082ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d00c      	beq.n	80082ea <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d003      	beq.n	80082de <osSemaphoreNew+0x11e>
          name = attr->name;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	61fb      	str	r3, [r7, #28]
 80082dc:	e001      	b.n	80082e2 <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 80082de:	2300      	movs	r3, #0
 80082e0:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80082e2:	69f9      	ldr	r1, [r7, #28]
 80082e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80082e6:	f001 f8b3 	bl	8009450 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80082ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80082ec:	4618      	mov	r0, r3
 80082ee:	3728      	adds	r7, #40	; 0x28
 80082f0:	46bd      	mov	sp, r7
 80082f2:	bd80      	pop	{r7, pc}
 80082f4:	20004edc 	.word	0x20004edc

080082f8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80082f8:	b480      	push	{r7}
 80082fa:	b085      	sub	sp, #20
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	60f8      	str	r0, [r7, #12]
 8008300:	60b9      	str	r1, [r7, #8]
 8008302:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	4a07      	ldr	r2, [pc, #28]	; (8008324 <vApplicationGetIdleTaskMemory+0x2c>)
 8008308:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800830a:	68bb      	ldr	r3, [r7, #8]
 800830c:	4a06      	ldr	r2, [pc, #24]	; (8008328 <vApplicationGetIdleTaskMemory+0x30>)
 800830e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2280      	movs	r2, #128	; 0x80
 8008314:	601a      	str	r2, [r3, #0]
}
 8008316:	bf00      	nop
 8008318:	3714      	adds	r7, #20
 800831a:	46bd      	mov	sp, r7
 800831c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008320:	4770      	bx	lr
 8008322:	bf00      	nop
 8008324:	20004ee0 	.word	0x20004ee0
 8008328:	20004f3c 	.word	0x20004f3c

0800832c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800832c:	b480      	push	{r7}
 800832e:	b085      	sub	sp, #20
 8008330:	af00      	add	r7, sp, #0
 8008332:	60f8      	str	r0, [r7, #12]
 8008334:	60b9      	str	r1, [r7, #8]
 8008336:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	4a07      	ldr	r2, [pc, #28]	; (8008358 <vApplicationGetTimerTaskMemory+0x2c>)
 800833c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800833e:	68bb      	ldr	r3, [r7, #8]
 8008340:	4a06      	ldr	r2, [pc, #24]	; (800835c <vApplicationGetTimerTaskMemory+0x30>)
 8008342:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	f44f 7280 	mov.w	r2, #256	; 0x100
 800834a:	601a      	str	r2, [r3, #0]
}
 800834c:	bf00      	nop
 800834e:	3714      	adds	r7, #20
 8008350:	46bd      	mov	sp, r7
 8008352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008356:	4770      	bx	lr
 8008358:	2000513c 	.word	0x2000513c
 800835c:	20005198 	.word	0x20005198

08008360 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8008360:	b580      	push	{r7, lr}
 8008362:	b086      	sub	sp, #24
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d10a      	bne.n	8008384 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800836e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008372:	f383 8811 	msr	BASEPRI, r3
 8008376:	f3bf 8f6f 	isb	sy
 800837a:	f3bf 8f4f 	dsb	sy
 800837e:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008380:	bf00      	nop
 8008382:	e7fe      	b.n	8008382 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8008384:	2320      	movs	r3, #32
 8008386:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8008388:	68bb      	ldr	r3, [r7, #8]
 800838a:	2b20      	cmp	r3, #32
 800838c:	d00a      	beq.n	80083a4 <xEventGroupCreateStatic+0x44>
	__asm volatile
 800838e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008392:	f383 8811 	msr	BASEPRI, r3
 8008396:	f3bf 8f6f 	isb	sy
 800839a:	f3bf 8f4f 	dsb	sy
 800839e:	60fb      	str	r3, [r7, #12]
}
 80083a0:	bf00      	nop
 80083a2:	e7fe      	b.n	80083a2 <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 80083a8:	697b      	ldr	r3, [r7, #20]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d00a      	beq.n	80083c4 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 80083ae:	697b      	ldr	r3, [r7, #20]
 80083b0:	2200      	movs	r2, #0
 80083b2:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80083b4:	697b      	ldr	r3, [r7, #20]
 80083b6:	3304      	adds	r3, #4
 80083b8:	4618      	mov	r0, r3
 80083ba:	f000 fa3d 	bl	8008838 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 80083be:	697b      	ldr	r3, [r7, #20]
 80083c0:	2201      	movs	r2, #1
 80083c2:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 80083c4:	697b      	ldr	r3, [r7, #20]
	}
 80083c6:	4618      	mov	r0, r3
 80083c8:	3718      	adds	r7, #24
 80083ca:	46bd      	mov	sp, r7
 80083cc:	bd80      	pop	{r7, pc}

080083ce <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 80083ce:	b580      	push	{r7, lr}
 80083d0:	b082      	sub	sp, #8
 80083d2:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 80083d4:	2020      	movs	r0, #32
 80083d6:	f002 fe37 	bl	800b048 <pvPortMalloc>
 80083da:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d00a      	beq.n	80083f8 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	2200      	movs	r2, #0
 80083e6:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	3304      	adds	r3, #4
 80083ec:	4618      	mov	r0, r3
 80083ee:	f000 fa23 	bl	8008838 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	2200      	movs	r2, #0
 80083f6:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 80083f8:	687b      	ldr	r3, [r7, #4]
	}
 80083fa:	4618      	mov	r0, r3
 80083fc:	3708      	adds	r7, #8
 80083fe:	46bd      	mov	sp, r7
 8008400:	bd80      	pop	{r7, pc}
	...

08008404 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8008404:	b580      	push	{r7, lr}
 8008406:	b090      	sub	sp, #64	; 0x40
 8008408:	af00      	add	r7, sp, #0
 800840a:	60f8      	str	r0, [r7, #12]
 800840c:	60b9      	str	r1, [r7, #8]
 800840e:	607a      	str	r2, [r7, #4]
 8008410:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8008416:	2300      	movs	r3, #0
 8008418:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 800841a:	2300      	movs	r3, #0
 800841c:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d10a      	bne.n	800843a <xEventGroupWaitBits+0x36>
	__asm volatile
 8008424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008428:	f383 8811 	msr	BASEPRI, r3
 800842c:	f3bf 8f6f 	isb	sy
 8008430:	f3bf 8f4f 	dsb	sy
 8008434:	623b      	str	r3, [r7, #32]
}
 8008436:	bf00      	nop
 8008438:	e7fe      	b.n	8008438 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800843a:	68bb      	ldr	r3, [r7, #8]
 800843c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8008440:	2b00      	cmp	r3, #0
 8008442:	d00a      	beq.n	800845a <xEventGroupWaitBits+0x56>
	__asm volatile
 8008444:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008448:	f383 8811 	msr	BASEPRI, r3
 800844c:	f3bf 8f6f 	isb	sy
 8008450:	f3bf 8f4f 	dsb	sy
 8008454:	61fb      	str	r3, [r7, #28]
}
 8008456:	bf00      	nop
 8008458:	e7fe      	b.n	8008458 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 800845a:	68bb      	ldr	r3, [r7, #8]
 800845c:	2b00      	cmp	r3, #0
 800845e:	d10a      	bne.n	8008476 <xEventGroupWaitBits+0x72>
	__asm volatile
 8008460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008464:	f383 8811 	msr	BASEPRI, r3
 8008468:	f3bf 8f6f 	isb	sy
 800846c:	f3bf 8f4f 	dsb	sy
 8008470:	61bb      	str	r3, [r7, #24]
}
 8008472:	bf00      	nop
 8008474:	e7fe      	b.n	8008474 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008476:	f001 ff2f 	bl	800a2d8 <xTaskGetSchedulerState>
 800847a:	4603      	mov	r3, r0
 800847c:	2b00      	cmp	r3, #0
 800847e:	d102      	bne.n	8008486 <xEventGroupWaitBits+0x82>
 8008480:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008482:	2b00      	cmp	r3, #0
 8008484:	d101      	bne.n	800848a <xEventGroupWaitBits+0x86>
 8008486:	2301      	movs	r3, #1
 8008488:	e000      	b.n	800848c <xEventGroupWaitBits+0x88>
 800848a:	2300      	movs	r3, #0
 800848c:	2b00      	cmp	r3, #0
 800848e:	d10a      	bne.n	80084a6 <xEventGroupWaitBits+0xa2>
	__asm volatile
 8008490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008494:	f383 8811 	msr	BASEPRI, r3
 8008498:	f3bf 8f6f 	isb	sy
 800849c:	f3bf 8f4f 	dsb	sy
 80084a0:	617b      	str	r3, [r7, #20]
}
 80084a2:	bf00      	nop
 80084a4:	e7fe      	b.n	80084a4 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 80084a6:	f001 fa97 	bl	80099d8 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 80084aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 80084b0:	683a      	ldr	r2, [r7, #0]
 80084b2:	68b9      	ldr	r1, [r7, #8]
 80084b4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80084b6:	f000 f988 	bl	80087ca <prvTestWaitCondition>
 80084ba:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 80084bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d00e      	beq.n	80084e0 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 80084c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084c4:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 80084c6:	2300      	movs	r3, #0
 80084c8:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d028      	beq.n	8008522 <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80084d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084d2:	681a      	ldr	r2, [r3, #0]
 80084d4:	68bb      	ldr	r3, [r7, #8]
 80084d6:	43db      	mvns	r3, r3
 80084d8:	401a      	ands	r2, r3
 80084da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084dc:	601a      	str	r2, [r3, #0]
 80084de:	e020      	b.n	8008522 <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 80084e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d104      	bne.n	80084f0 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 80084e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084e8:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 80084ea:	2301      	movs	r3, #1
 80084ec:	633b      	str	r3, [r7, #48]	; 0x30
 80084ee:	e018      	b.n	8008522 <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d003      	beq.n	80084fe <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 80084f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084f8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80084fc:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 80084fe:	683b      	ldr	r3, [r7, #0]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d003      	beq.n	800850c <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8008504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008506:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800850a:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 800850c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800850e:	1d18      	adds	r0, r3, #4
 8008510:	68ba      	ldr	r2, [r7, #8]
 8008512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008514:	4313      	orrs	r3, r2
 8008516:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008518:	4619      	mov	r1, r3
 800851a:	f001 fc55 	bl	8009dc8 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 800851e:	2300      	movs	r3, #0
 8008520:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8008522:	f001 fa67 	bl	80099f4 <xTaskResumeAll>
 8008526:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8008528:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800852a:	2b00      	cmp	r3, #0
 800852c:	d031      	beq.n	8008592 <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 800852e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008530:	2b00      	cmp	r3, #0
 8008532:	d107      	bne.n	8008544 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8008534:	4b19      	ldr	r3, [pc, #100]	; (800859c <xEventGroupWaitBits+0x198>)
 8008536:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800853a:	601a      	str	r2, [r3, #0]
 800853c:	f3bf 8f4f 	dsb	sy
 8008540:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8008544:	f001 ff54 	bl	800a3f0 <uxTaskResetEventItemValue>
 8008548:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 800854a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800854c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008550:	2b00      	cmp	r3, #0
 8008552:	d11a      	bne.n	800858a <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 8008554:	f002 fc56 	bl	800ae04 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8008558:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 800855e:	683a      	ldr	r2, [r7, #0]
 8008560:	68b9      	ldr	r1, [r7, #8]
 8008562:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008564:	f000 f931 	bl	80087ca <prvTestWaitCondition>
 8008568:	4603      	mov	r3, r0
 800856a:	2b00      	cmp	r3, #0
 800856c:	d009      	beq.n	8008582 <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d006      	beq.n	8008582 <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8008574:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008576:	681a      	ldr	r2, [r3, #0]
 8008578:	68bb      	ldr	r3, [r7, #8]
 800857a:	43db      	mvns	r3, r3
 800857c:	401a      	ands	r2, r3
 800857e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008580:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8008582:	2301      	movs	r3, #1
 8008584:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 8008586:	f002 fc6d 	bl	800ae64 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 800858a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800858c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008590:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8008592:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008594:	4618      	mov	r0, r3
 8008596:	3740      	adds	r7, #64	; 0x40
 8008598:	46bd      	mov	sp, r7
 800859a:	bd80      	pop	{r7, pc}
 800859c:	e000ed04 	.word	0xe000ed04

080085a0 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b086      	sub	sp, #24
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
 80085a8:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d10a      	bne.n	80085ca <xEventGroupClearBits+0x2a>
	__asm volatile
 80085b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085b8:	f383 8811 	msr	BASEPRI, r3
 80085bc:	f3bf 8f6f 	isb	sy
 80085c0:	f3bf 8f4f 	dsb	sy
 80085c4:	60fb      	str	r3, [r7, #12]
}
 80085c6:	bf00      	nop
 80085c8:	e7fe      	b.n	80085c8 <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d00a      	beq.n	80085ea <xEventGroupClearBits+0x4a>
	__asm volatile
 80085d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085d8:	f383 8811 	msr	BASEPRI, r3
 80085dc:	f3bf 8f6f 	isb	sy
 80085e0:	f3bf 8f4f 	dsb	sy
 80085e4:	60bb      	str	r3, [r7, #8]
}
 80085e6:	bf00      	nop
 80085e8:	e7fe      	b.n	80085e8 <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 80085ea:	f002 fc0b 	bl	800ae04 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 80085ee:	697b      	ldr	r3, [r7, #20]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 80085f4:	697b      	ldr	r3, [r7, #20]
 80085f6:	681a      	ldr	r2, [r3, #0]
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	43db      	mvns	r3, r3
 80085fc:	401a      	ands	r2, r3
 80085fe:	697b      	ldr	r3, [r7, #20]
 8008600:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 8008602:	f002 fc2f 	bl	800ae64 <vPortExitCritical>

	return uxReturn;
 8008606:	693b      	ldr	r3, [r7, #16]
}
 8008608:	4618      	mov	r0, r3
 800860a:	3718      	adds	r7, #24
 800860c:	46bd      	mov	sp, r7
 800860e:	bd80      	pop	{r7, pc}

08008610 <xEventGroupClearBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
	{
 8008610:	b580      	push	{r7, lr}
 8008612:	b084      	sub	sp, #16
 8008614:	af00      	add	r7, sp, #0
 8008616:	6078      	str	r0, [r7, #4]
 8008618:	6039      	str	r1, [r7, #0]
		BaseType_t xReturn;

		traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToClear, NULL ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 800861a:	2300      	movs	r3, #0
 800861c:	683a      	ldr	r2, [r7, #0]
 800861e:	6879      	ldr	r1, [r7, #4]
 8008620:	4804      	ldr	r0, [pc, #16]	; (8008634 <xEventGroupClearBitsFromISR+0x24>)
 8008622:	f002 fa9f 	bl	800ab64 <xTimerPendFunctionCallFromISR>
 8008626:	60f8      	str	r0, [r7, #12]

		return xReturn;
 8008628:	68fb      	ldr	r3, [r7, #12]
	}
 800862a:	4618      	mov	r0, r3
 800862c:	3710      	adds	r7, #16
 800862e:	46bd      	mov	sp, r7
 8008630:	bd80      	pop	{r7, pc}
 8008632:	bf00      	nop
 8008634:	080087b1 	.word	0x080087b1

08008638 <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
 8008638:	b480      	push	{r7}
 800863a:	b089      	sub	sp, #36	; 0x24
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
UBaseType_t uxSavedInterruptStatus;
EventGroup_t const * const pxEventBits = xEventGroup;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	61fb      	str	r3, [r7, #28]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008644:	f3ef 8211 	mrs	r2, BASEPRI
 8008648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800864c:	f383 8811 	msr	BASEPRI, r3
 8008650:	f3bf 8f6f 	isb	sy
 8008654:	f3bf 8f4f 	dsb	sy
 8008658:	60fa      	str	r2, [r7, #12]
 800865a:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800865c:	68fb      	ldr	r3, [r7, #12]
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800865e:	61bb      	str	r3, [r7, #24]
	{
		uxReturn = pxEventBits->uxEventBits;
 8008660:	69fb      	ldr	r3, [r7, #28]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	617b      	str	r3, [r7, #20]
 8008666:	69bb      	ldr	r3, [r7, #24]
 8008668:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800866a:	693b      	ldr	r3, [r7, #16]
 800866c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008670:	bf00      	nop
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
 8008672:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
 8008674:	4618      	mov	r0, r3
 8008676:	3724      	adds	r7, #36	; 0x24
 8008678:	46bd      	mov	sp, r7
 800867a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867e:	4770      	bx	lr

08008680 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8008680:	b580      	push	{r7, lr}
 8008682:	b08e      	sub	sp, #56	; 0x38
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
 8008688:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 800868a:	2300      	movs	r3, #0
 800868c:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8008692:	2300      	movs	r3, #0
 8008694:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	2b00      	cmp	r3, #0
 800869a:	d10a      	bne.n	80086b2 <xEventGroupSetBits+0x32>
	__asm volatile
 800869c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086a0:	f383 8811 	msr	BASEPRI, r3
 80086a4:	f3bf 8f6f 	isb	sy
 80086a8:	f3bf 8f4f 	dsb	sy
 80086ac:	613b      	str	r3, [r7, #16]
}
 80086ae:	bf00      	nop
 80086b0:	e7fe      	b.n	80086b0 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80086b2:	683b      	ldr	r3, [r7, #0]
 80086b4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d00a      	beq.n	80086d2 <xEventGroupSetBits+0x52>
	__asm volatile
 80086bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086c0:	f383 8811 	msr	BASEPRI, r3
 80086c4:	f3bf 8f6f 	isb	sy
 80086c8:	f3bf 8f4f 	dsb	sy
 80086cc:	60fb      	str	r3, [r7, #12]
}
 80086ce:	bf00      	nop
 80086d0:	e7fe      	b.n	80086d0 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 80086d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086d4:	3304      	adds	r3, #4
 80086d6:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80086d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086da:	3308      	adds	r3, #8
 80086dc:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 80086de:	f001 f97b 	bl	80099d8 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 80086e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086e4:	68db      	ldr	r3, [r3, #12]
 80086e6:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 80086e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086ea:	681a      	ldr	r2, [r3, #0]
 80086ec:	683b      	ldr	r3, [r7, #0]
 80086ee:	431a      	orrs	r2, r3
 80086f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086f2:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 80086f4:	e03c      	b.n	8008770 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 80086f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086f8:	685b      	ldr	r3, [r3, #4]
 80086fa:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 80086fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8008702:	2300      	movs	r3, #0
 8008704:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8008706:	69bb      	ldr	r3, [r7, #24]
 8008708:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800870c:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800870e:	69bb      	ldr	r3, [r7, #24]
 8008710:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008714:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8008716:	697b      	ldr	r3, [r7, #20]
 8008718:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800871c:	2b00      	cmp	r3, #0
 800871e:	d108      	bne.n	8008732 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8008720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008722:	681a      	ldr	r2, [r3, #0]
 8008724:	69bb      	ldr	r3, [r7, #24]
 8008726:	4013      	ands	r3, r2
 8008728:	2b00      	cmp	r3, #0
 800872a:	d00b      	beq.n	8008744 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 800872c:	2301      	movs	r3, #1
 800872e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008730:	e008      	b.n	8008744 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8008732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008734:	681a      	ldr	r2, [r3, #0]
 8008736:	69bb      	ldr	r3, [r7, #24]
 8008738:	4013      	ands	r3, r2
 800873a:	69ba      	ldr	r2, [r7, #24]
 800873c:	429a      	cmp	r2, r3
 800873e:	d101      	bne.n	8008744 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8008740:	2301      	movs	r3, #1
 8008742:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8008744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008746:	2b00      	cmp	r3, #0
 8008748:	d010      	beq.n	800876c <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800874a:	697b      	ldr	r3, [r7, #20]
 800874c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008750:	2b00      	cmp	r3, #0
 8008752:	d003      	beq.n	800875c <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8008754:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008756:	69bb      	ldr	r3, [r7, #24]
 8008758:	4313      	orrs	r3, r2
 800875a:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 800875c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008764:	4619      	mov	r1, r3
 8008766:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8008768:	f001 fbfa 	bl	8009f60 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 800876c:	69fb      	ldr	r3, [r7, #28]
 800876e:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8008770:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008772:	6a3b      	ldr	r3, [r7, #32]
 8008774:	429a      	cmp	r2, r3
 8008776:	d1be      	bne.n	80086f6 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8008778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800877a:	681a      	ldr	r2, [r3, #0]
 800877c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800877e:	43db      	mvns	r3, r3
 8008780:	401a      	ands	r2, r3
 8008782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008784:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8008786:	f001 f935 	bl	80099f4 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 800878a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800878c:	681b      	ldr	r3, [r3, #0]
}
 800878e:	4618      	mov	r0, r3
 8008790:	3738      	adds	r7, #56	; 0x38
 8008792:	46bd      	mov	sp, r7
 8008794:	bd80      	pop	{r7, pc}

08008796 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8008796:	b580      	push	{r7, lr}
 8008798:	b082      	sub	sp, #8
 800879a:	af00      	add	r7, sp, #0
 800879c:	6078      	str	r0, [r7, #4]
 800879e:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 80087a0:	6839      	ldr	r1, [r7, #0]
 80087a2:	6878      	ldr	r0, [r7, #4]
 80087a4:	f7ff ff6c 	bl	8008680 <xEventGroupSetBits>
}
 80087a8:	bf00      	nop
 80087aa:	3708      	adds	r7, #8
 80087ac:	46bd      	mov	sp, r7
 80087ae:	bd80      	pop	{r7, pc}

080087b0 <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b082      	sub	sp, #8
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
 80087b8:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 80087ba:	6839      	ldr	r1, [r7, #0]
 80087bc:	6878      	ldr	r0, [r7, #4]
 80087be:	f7ff feef 	bl	80085a0 <xEventGroupClearBits>
}
 80087c2:	bf00      	nop
 80087c4:	3708      	adds	r7, #8
 80087c6:	46bd      	mov	sp, r7
 80087c8:	bd80      	pop	{r7, pc}

080087ca <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 80087ca:	b480      	push	{r7}
 80087cc:	b087      	sub	sp, #28
 80087ce:	af00      	add	r7, sp, #0
 80087d0:	60f8      	str	r0, [r7, #12]
 80087d2:	60b9      	str	r1, [r7, #8]
 80087d4:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 80087d6:	2300      	movs	r3, #0
 80087d8:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d107      	bne.n	80087f0 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 80087e0:	68fa      	ldr	r2, [r7, #12]
 80087e2:	68bb      	ldr	r3, [r7, #8]
 80087e4:	4013      	ands	r3, r2
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d00a      	beq.n	8008800 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80087ea:	2301      	movs	r3, #1
 80087ec:	617b      	str	r3, [r7, #20]
 80087ee:	e007      	b.n	8008800 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 80087f0:	68fa      	ldr	r2, [r7, #12]
 80087f2:	68bb      	ldr	r3, [r7, #8]
 80087f4:	4013      	ands	r3, r2
 80087f6:	68ba      	ldr	r2, [r7, #8]
 80087f8:	429a      	cmp	r2, r3
 80087fa:	d101      	bne.n	8008800 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80087fc:	2301      	movs	r3, #1
 80087fe:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8008800:	697b      	ldr	r3, [r7, #20]
}
 8008802:	4618      	mov	r0, r3
 8008804:	371c      	adds	r7, #28
 8008806:	46bd      	mov	sp, r7
 8008808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880c:	4770      	bx	lr
	...

08008810 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8008810:	b580      	push	{r7, lr}
 8008812:	b086      	sub	sp, #24
 8008814:	af00      	add	r7, sp, #0
 8008816:	60f8      	str	r0, [r7, #12]
 8008818:	60b9      	str	r1, [r7, #8]
 800881a:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	68ba      	ldr	r2, [r7, #8]
 8008820:	68f9      	ldr	r1, [r7, #12]
 8008822:	4804      	ldr	r0, [pc, #16]	; (8008834 <xEventGroupSetBitsFromISR+0x24>)
 8008824:	f002 f99e 	bl	800ab64 <xTimerPendFunctionCallFromISR>
 8008828:	6178      	str	r0, [r7, #20]

		return xReturn;
 800882a:	697b      	ldr	r3, [r7, #20]
	}
 800882c:	4618      	mov	r0, r3
 800882e:	3718      	adds	r7, #24
 8008830:	46bd      	mov	sp, r7
 8008832:	bd80      	pop	{r7, pc}
 8008834:	08008797 	.word	0x08008797

08008838 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008838:	b480      	push	{r7}
 800883a:	b083      	sub	sp, #12
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	f103 0208 	add.w	r2, r3, #8
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	f04f 32ff 	mov.w	r2, #4294967295
 8008850:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	f103 0208 	add.w	r2, r3, #8
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	f103 0208 	add.w	r2, r3, #8
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	2200      	movs	r2, #0
 800886a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800886c:	bf00      	nop
 800886e:	370c      	adds	r7, #12
 8008870:	46bd      	mov	sp, r7
 8008872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008876:	4770      	bx	lr

08008878 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008878:	b480      	push	{r7}
 800887a:	b083      	sub	sp, #12
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2200      	movs	r2, #0
 8008884:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008886:	bf00      	nop
 8008888:	370c      	adds	r7, #12
 800888a:	46bd      	mov	sp, r7
 800888c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008890:	4770      	bx	lr

08008892 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008892:	b480      	push	{r7}
 8008894:	b085      	sub	sp, #20
 8008896:	af00      	add	r7, sp, #0
 8008898:	6078      	str	r0, [r7, #4]
 800889a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	685b      	ldr	r3, [r3, #4]
 80088a0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80088a2:	683b      	ldr	r3, [r7, #0]
 80088a4:	68fa      	ldr	r2, [r7, #12]
 80088a6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	689a      	ldr	r2, [r3, #8]
 80088ac:	683b      	ldr	r3, [r7, #0]
 80088ae:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	689b      	ldr	r3, [r3, #8]
 80088b4:	683a      	ldr	r2, [r7, #0]
 80088b6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	683a      	ldr	r2, [r7, #0]
 80088bc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	687a      	ldr	r2, [r7, #4]
 80088c2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	1c5a      	adds	r2, r3, #1
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	601a      	str	r2, [r3, #0]
}
 80088ce:	bf00      	nop
 80088d0:	3714      	adds	r7, #20
 80088d2:	46bd      	mov	sp, r7
 80088d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d8:	4770      	bx	lr

080088da <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80088da:	b480      	push	{r7}
 80088dc:	b085      	sub	sp, #20
 80088de:	af00      	add	r7, sp, #0
 80088e0:	6078      	str	r0, [r7, #4]
 80088e2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80088e4:	683b      	ldr	r3, [r7, #0]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80088ea:	68bb      	ldr	r3, [r7, #8]
 80088ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088f0:	d103      	bne.n	80088fa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	691b      	ldr	r3, [r3, #16]
 80088f6:	60fb      	str	r3, [r7, #12]
 80088f8:	e00c      	b.n	8008914 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	3308      	adds	r3, #8
 80088fe:	60fb      	str	r3, [r7, #12]
 8008900:	e002      	b.n	8008908 <vListInsert+0x2e>
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	685b      	ldr	r3, [r3, #4]
 8008906:	60fb      	str	r3, [r7, #12]
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	685b      	ldr	r3, [r3, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	68ba      	ldr	r2, [r7, #8]
 8008910:	429a      	cmp	r2, r3
 8008912:	d2f6      	bcs.n	8008902 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	685a      	ldr	r2, [r3, #4]
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800891c:	683b      	ldr	r3, [r7, #0]
 800891e:	685b      	ldr	r3, [r3, #4]
 8008920:	683a      	ldr	r2, [r7, #0]
 8008922:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008924:	683b      	ldr	r3, [r7, #0]
 8008926:	68fa      	ldr	r2, [r7, #12]
 8008928:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	683a      	ldr	r2, [r7, #0]
 800892e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008930:	683b      	ldr	r3, [r7, #0]
 8008932:	687a      	ldr	r2, [r7, #4]
 8008934:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	1c5a      	adds	r2, r3, #1
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	601a      	str	r2, [r3, #0]
}
 8008940:	bf00      	nop
 8008942:	3714      	adds	r7, #20
 8008944:	46bd      	mov	sp, r7
 8008946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894a:	4770      	bx	lr

0800894c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800894c:	b480      	push	{r7}
 800894e:	b085      	sub	sp, #20
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	691b      	ldr	r3, [r3, #16]
 8008958:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	685b      	ldr	r3, [r3, #4]
 800895e:	687a      	ldr	r2, [r7, #4]
 8008960:	6892      	ldr	r2, [r2, #8]
 8008962:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	689b      	ldr	r3, [r3, #8]
 8008968:	687a      	ldr	r2, [r7, #4]
 800896a:	6852      	ldr	r2, [r2, #4]
 800896c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	685b      	ldr	r3, [r3, #4]
 8008972:	687a      	ldr	r2, [r7, #4]
 8008974:	429a      	cmp	r2, r3
 8008976:	d103      	bne.n	8008980 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	689a      	ldr	r2, [r3, #8]
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	2200      	movs	r2, #0
 8008984:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	1e5a      	subs	r2, r3, #1
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	681b      	ldr	r3, [r3, #0]
}
 8008994:	4618      	mov	r0, r3
 8008996:	3714      	adds	r7, #20
 8008998:	46bd      	mov	sp, r7
 800899a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899e:	4770      	bx	lr

080089a0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80089a0:	b580      	push	{r7, lr}
 80089a2:	b084      	sub	sp, #16
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
 80089a8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d10a      	bne.n	80089ca <xQueueGenericReset+0x2a>
	__asm volatile
 80089b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089b8:	f383 8811 	msr	BASEPRI, r3
 80089bc:	f3bf 8f6f 	isb	sy
 80089c0:	f3bf 8f4f 	dsb	sy
 80089c4:	60bb      	str	r3, [r7, #8]
}
 80089c6:	bf00      	nop
 80089c8:	e7fe      	b.n	80089c8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80089ca:	f002 fa1b 	bl	800ae04 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	681a      	ldr	r2, [r3, #0]
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089d6:	68f9      	ldr	r1, [r7, #12]
 80089d8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80089da:	fb01 f303 	mul.w	r3, r1, r3
 80089de:	441a      	add	r2, r3
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	2200      	movs	r2, #0
 80089e8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	681a      	ldr	r2, [r3, #0]
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	681a      	ldr	r2, [r3, #0]
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089fa:	3b01      	subs	r3, #1
 80089fc:	68f9      	ldr	r1, [r7, #12]
 80089fe:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008a00:	fb01 f303 	mul.w	r3, r1, r3
 8008a04:	441a      	add	r2, r3
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	22ff      	movs	r2, #255	; 0xff
 8008a0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	22ff      	movs	r2, #255	; 0xff
 8008a16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008a1a:	683b      	ldr	r3, [r7, #0]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d114      	bne.n	8008a4a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	691b      	ldr	r3, [r3, #16]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d01a      	beq.n	8008a5e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	3310      	adds	r3, #16
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	f001 fa33 	bl	8009e98 <xTaskRemoveFromEventList>
 8008a32:	4603      	mov	r3, r0
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d012      	beq.n	8008a5e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008a38:	4b0c      	ldr	r3, [pc, #48]	; (8008a6c <xQueueGenericReset+0xcc>)
 8008a3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a3e:	601a      	str	r2, [r3, #0]
 8008a40:	f3bf 8f4f 	dsb	sy
 8008a44:	f3bf 8f6f 	isb	sy
 8008a48:	e009      	b.n	8008a5e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	3310      	adds	r3, #16
 8008a4e:	4618      	mov	r0, r3
 8008a50:	f7ff fef2 	bl	8008838 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	3324      	adds	r3, #36	; 0x24
 8008a58:	4618      	mov	r0, r3
 8008a5a:	f7ff feed 	bl	8008838 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008a5e:	f002 fa01 	bl	800ae64 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008a62:	2301      	movs	r3, #1
}
 8008a64:	4618      	mov	r0, r3
 8008a66:	3710      	adds	r7, #16
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	bd80      	pop	{r7, pc}
 8008a6c:	e000ed04 	.word	0xe000ed04

08008a70 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b08e      	sub	sp, #56	; 0x38
 8008a74:	af02      	add	r7, sp, #8
 8008a76:	60f8      	str	r0, [r7, #12]
 8008a78:	60b9      	str	r1, [r7, #8]
 8008a7a:	607a      	str	r2, [r7, #4]
 8008a7c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d10a      	bne.n	8008a9a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a88:	f383 8811 	msr	BASEPRI, r3
 8008a8c:	f3bf 8f6f 	isb	sy
 8008a90:	f3bf 8f4f 	dsb	sy
 8008a94:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008a96:	bf00      	nop
 8008a98:	e7fe      	b.n	8008a98 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008a9a:	683b      	ldr	r3, [r7, #0]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d10a      	bne.n	8008ab6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aa4:	f383 8811 	msr	BASEPRI, r3
 8008aa8:	f3bf 8f6f 	isb	sy
 8008aac:	f3bf 8f4f 	dsb	sy
 8008ab0:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008ab2:	bf00      	nop
 8008ab4:	e7fe      	b.n	8008ab4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d002      	beq.n	8008ac2 <xQueueGenericCreateStatic+0x52>
 8008abc:	68bb      	ldr	r3, [r7, #8]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d001      	beq.n	8008ac6 <xQueueGenericCreateStatic+0x56>
 8008ac2:	2301      	movs	r3, #1
 8008ac4:	e000      	b.n	8008ac8 <xQueueGenericCreateStatic+0x58>
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d10a      	bne.n	8008ae2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ad0:	f383 8811 	msr	BASEPRI, r3
 8008ad4:	f3bf 8f6f 	isb	sy
 8008ad8:	f3bf 8f4f 	dsb	sy
 8008adc:	623b      	str	r3, [r7, #32]
}
 8008ade:	bf00      	nop
 8008ae0:	e7fe      	b.n	8008ae0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d102      	bne.n	8008aee <xQueueGenericCreateStatic+0x7e>
 8008ae8:	68bb      	ldr	r3, [r7, #8]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d101      	bne.n	8008af2 <xQueueGenericCreateStatic+0x82>
 8008aee:	2301      	movs	r3, #1
 8008af0:	e000      	b.n	8008af4 <xQueueGenericCreateStatic+0x84>
 8008af2:	2300      	movs	r3, #0
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d10a      	bne.n	8008b0e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008afc:	f383 8811 	msr	BASEPRI, r3
 8008b00:	f3bf 8f6f 	isb	sy
 8008b04:	f3bf 8f4f 	dsb	sy
 8008b08:	61fb      	str	r3, [r7, #28]
}
 8008b0a:	bf00      	nop
 8008b0c:	e7fe      	b.n	8008b0c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008b0e:	2350      	movs	r3, #80	; 0x50
 8008b10:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008b12:	697b      	ldr	r3, [r7, #20]
 8008b14:	2b50      	cmp	r3, #80	; 0x50
 8008b16:	d00a      	beq.n	8008b2e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b1c:	f383 8811 	msr	BASEPRI, r3
 8008b20:	f3bf 8f6f 	isb	sy
 8008b24:	f3bf 8f4f 	dsb	sy
 8008b28:	61bb      	str	r3, [r7, #24]
}
 8008b2a:	bf00      	nop
 8008b2c:	e7fe      	b.n	8008b2c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008b2e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008b30:	683b      	ldr	r3, [r7, #0]
 8008b32:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d00d      	beq.n	8008b56 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b3c:	2201      	movs	r2, #1
 8008b3e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008b42:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b48:	9300      	str	r3, [sp, #0]
 8008b4a:	4613      	mov	r3, r2
 8008b4c:	687a      	ldr	r2, [r7, #4]
 8008b4e:	68b9      	ldr	r1, [r7, #8]
 8008b50:	68f8      	ldr	r0, [r7, #12]
 8008b52:	f000 f845 	bl	8008be0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008b58:	4618      	mov	r0, r3
 8008b5a:	3730      	adds	r7, #48	; 0x30
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	bd80      	pop	{r7, pc}

08008b60 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b08a      	sub	sp, #40	; 0x28
 8008b64:	af02      	add	r7, sp, #8
 8008b66:	60f8      	str	r0, [r7, #12]
 8008b68:	60b9      	str	r1, [r7, #8]
 8008b6a:	4613      	mov	r3, r2
 8008b6c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d10a      	bne.n	8008b8a <xQueueGenericCreate+0x2a>
	__asm volatile
 8008b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b78:	f383 8811 	msr	BASEPRI, r3
 8008b7c:	f3bf 8f6f 	isb	sy
 8008b80:	f3bf 8f4f 	dsb	sy
 8008b84:	613b      	str	r3, [r7, #16]
}
 8008b86:	bf00      	nop
 8008b88:	e7fe      	b.n	8008b88 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8008b8a:	68bb      	ldr	r3, [r7, #8]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d102      	bne.n	8008b96 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8008b90:	2300      	movs	r3, #0
 8008b92:	61fb      	str	r3, [r7, #28]
 8008b94:	e004      	b.n	8008ba0 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	68ba      	ldr	r2, [r7, #8]
 8008b9a:	fb02 f303 	mul.w	r3, r2, r3
 8008b9e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008ba0:	69fb      	ldr	r3, [r7, #28]
 8008ba2:	3350      	adds	r3, #80	; 0x50
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	f002 fa4f 	bl	800b048 <pvPortMalloc>
 8008baa:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008bac:	69bb      	ldr	r3, [r7, #24]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d011      	beq.n	8008bd6 <xQueueGenericCreate+0x76>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008bb2:	69bb      	ldr	r3, [r7, #24]
 8008bb4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008bb6:	697b      	ldr	r3, [r7, #20]
 8008bb8:	3350      	adds	r3, #80	; 0x50
 8008bba:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008bbc:	69bb      	ldr	r3, [r7, #24]
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008bc4:	79fa      	ldrb	r2, [r7, #7]
 8008bc6:	69bb      	ldr	r3, [r7, #24]
 8008bc8:	9300      	str	r3, [sp, #0]
 8008bca:	4613      	mov	r3, r2
 8008bcc:	697a      	ldr	r2, [r7, #20]
 8008bce:	68b9      	ldr	r1, [r7, #8]
 8008bd0:	68f8      	ldr	r0, [r7, #12]
 8008bd2:	f000 f805 	bl	8008be0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008bd6:	69bb      	ldr	r3, [r7, #24]
	}
 8008bd8:	4618      	mov	r0, r3
 8008bda:	3720      	adds	r7, #32
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	bd80      	pop	{r7, pc}

08008be0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	b084      	sub	sp, #16
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	60f8      	str	r0, [r7, #12]
 8008be8:	60b9      	str	r1, [r7, #8]
 8008bea:	607a      	str	r2, [r7, #4]
 8008bec:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008bee:	68bb      	ldr	r3, [r7, #8]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d103      	bne.n	8008bfc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008bf4:	69bb      	ldr	r3, [r7, #24]
 8008bf6:	69ba      	ldr	r2, [r7, #24]
 8008bf8:	601a      	str	r2, [r3, #0]
 8008bfa:	e002      	b.n	8008c02 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008bfc:	69bb      	ldr	r3, [r7, #24]
 8008bfe:	687a      	ldr	r2, [r7, #4]
 8008c00:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008c02:	69bb      	ldr	r3, [r7, #24]
 8008c04:	68fa      	ldr	r2, [r7, #12]
 8008c06:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008c08:	69bb      	ldr	r3, [r7, #24]
 8008c0a:	68ba      	ldr	r2, [r7, #8]
 8008c0c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008c0e:	2101      	movs	r1, #1
 8008c10:	69b8      	ldr	r0, [r7, #24]
 8008c12:	f7ff fec5 	bl	80089a0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008c16:	69bb      	ldr	r3, [r7, #24]
 8008c18:	78fa      	ldrb	r2, [r7, #3]
 8008c1a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008c1e:	bf00      	nop
 8008c20:	3710      	adds	r7, #16
 8008c22:	46bd      	mov	sp, r7
 8008c24:	bd80      	pop	{r7, pc}

08008c26 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8008c26:	b580      	push	{r7, lr}
 8008c28:	b08a      	sub	sp, #40	; 0x28
 8008c2a:	af02      	add	r7, sp, #8
 8008c2c:	60f8      	str	r0, [r7, #12]
 8008c2e:	60b9      	str	r1, [r7, #8]
 8008c30:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d10a      	bne.n	8008c4e <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8008c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c3c:	f383 8811 	msr	BASEPRI, r3
 8008c40:	f3bf 8f6f 	isb	sy
 8008c44:	f3bf 8f4f 	dsb	sy
 8008c48:	61bb      	str	r3, [r7, #24]
}
 8008c4a:	bf00      	nop
 8008c4c:	e7fe      	b.n	8008c4c <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8008c4e:	68ba      	ldr	r2, [r7, #8]
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	429a      	cmp	r2, r3
 8008c54:	d90a      	bls.n	8008c6c <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8008c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c5a:	f383 8811 	msr	BASEPRI, r3
 8008c5e:	f3bf 8f6f 	isb	sy
 8008c62:	f3bf 8f4f 	dsb	sy
 8008c66:	617b      	str	r3, [r7, #20]
}
 8008c68:	bf00      	nop
 8008c6a:	e7fe      	b.n	8008c6a <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008c6c:	2302      	movs	r3, #2
 8008c6e:	9300      	str	r3, [sp, #0]
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	2200      	movs	r2, #0
 8008c74:	2100      	movs	r1, #0
 8008c76:	68f8      	ldr	r0, [r7, #12]
 8008c78:	f7ff fefa 	bl	8008a70 <xQueueGenericCreateStatic>
 8008c7c:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8008c7e:	69fb      	ldr	r3, [r7, #28]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d002      	beq.n	8008c8a <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008c84:	69fb      	ldr	r3, [r7, #28]
 8008c86:	68ba      	ldr	r2, [r7, #8]
 8008c88:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8008c8a:	69fb      	ldr	r3, [r7, #28]
	}
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	3720      	adds	r7, #32
 8008c90:	46bd      	mov	sp, r7
 8008c92:	bd80      	pop	{r7, pc}

08008c94 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8008c94:	b580      	push	{r7, lr}
 8008c96:	b086      	sub	sp, #24
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
 8008c9c:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d10a      	bne.n	8008cba <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8008ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ca8:	f383 8811 	msr	BASEPRI, r3
 8008cac:	f3bf 8f6f 	isb	sy
 8008cb0:	f3bf 8f4f 	dsb	sy
 8008cb4:	613b      	str	r3, [r7, #16]
}
 8008cb6:	bf00      	nop
 8008cb8:	e7fe      	b.n	8008cb8 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8008cba:	683a      	ldr	r2, [r7, #0]
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	429a      	cmp	r2, r3
 8008cc0:	d90a      	bls.n	8008cd8 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8008cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cc6:	f383 8811 	msr	BASEPRI, r3
 8008cca:	f3bf 8f6f 	isb	sy
 8008cce:	f3bf 8f4f 	dsb	sy
 8008cd2:	60fb      	str	r3, [r7, #12]
}
 8008cd4:	bf00      	nop
 8008cd6:	e7fe      	b.n	8008cd6 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008cd8:	2202      	movs	r2, #2
 8008cda:	2100      	movs	r1, #0
 8008cdc:	6878      	ldr	r0, [r7, #4]
 8008cde:	f7ff ff3f 	bl	8008b60 <xQueueGenericCreate>
 8008ce2:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8008ce4:	697b      	ldr	r3, [r7, #20]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d002      	beq.n	8008cf0 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008cea:	697b      	ldr	r3, [r7, #20]
 8008cec:	683a      	ldr	r2, [r7, #0]
 8008cee:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8008cf0:	697b      	ldr	r3, [r7, #20]
	}
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	3718      	adds	r7, #24
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	bd80      	pop	{r7, pc}
	...

08008cfc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b08e      	sub	sp, #56	; 0x38
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	60f8      	str	r0, [r7, #12]
 8008d04:	60b9      	str	r1, [r7, #8]
 8008d06:	607a      	str	r2, [r7, #4]
 8008d08:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d10a      	bne.n	8008d2e <xQueueGenericSend+0x32>
	__asm volatile
 8008d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d1c:	f383 8811 	msr	BASEPRI, r3
 8008d20:	f3bf 8f6f 	isb	sy
 8008d24:	f3bf 8f4f 	dsb	sy
 8008d28:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008d2a:	bf00      	nop
 8008d2c:	e7fe      	b.n	8008d2c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008d2e:	68bb      	ldr	r3, [r7, #8]
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d103      	bne.n	8008d3c <xQueueGenericSend+0x40>
 8008d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d101      	bne.n	8008d40 <xQueueGenericSend+0x44>
 8008d3c:	2301      	movs	r3, #1
 8008d3e:	e000      	b.n	8008d42 <xQueueGenericSend+0x46>
 8008d40:	2300      	movs	r3, #0
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d10a      	bne.n	8008d5c <xQueueGenericSend+0x60>
	__asm volatile
 8008d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d4a:	f383 8811 	msr	BASEPRI, r3
 8008d4e:	f3bf 8f6f 	isb	sy
 8008d52:	f3bf 8f4f 	dsb	sy
 8008d56:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008d58:	bf00      	nop
 8008d5a:	e7fe      	b.n	8008d5a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008d5c:	683b      	ldr	r3, [r7, #0]
 8008d5e:	2b02      	cmp	r3, #2
 8008d60:	d103      	bne.n	8008d6a <xQueueGenericSend+0x6e>
 8008d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d66:	2b01      	cmp	r3, #1
 8008d68:	d101      	bne.n	8008d6e <xQueueGenericSend+0x72>
 8008d6a:	2301      	movs	r3, #1
 8008d6c:	e000      	b.n	8008d70 <xQueueGenericSend+0x74>
 8008d6e:	2300      	movs	r3, #0
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d10a      	bne.n	8008d8a <xQueueGenericSend+0x8e>
	__asm volatile
 8008d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d78:	f383 8811 	msr	BASEPRI, r3
 8008d7c:	f3bf 8f6f 	isb	sy
 8008d80:	f3bf 8f4f 	dsb	sy
 8008d84:	623b      	str	r3, [r7, #32]
}
 8008d86:	bf00      	nop
 8008d88:	e7fe      	b.n	8008d88 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008d8a:	f001 faa5 	bl	800a2d8 <xTaskGetSchedulerState>
 8008d8e:	4603      	mov	r3, r0
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d102      	bne.n	8008d9a <xQueueGenericSend+0x9e>
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d101      	bne.n	8008d9e <xQueueGenericSend+0xa2>
 8008d9a:	2301      	movs	r3, #1
 8008d9c:	e000      	b.n	8008da0 <xQueueGenericSend+0xa4>
 8008d9e:	2300      	movs	r3, #0
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d10a      	bne.n	8008dba <xQueueGenericSend+0xbe>
	__asm volatile
 8008da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008da8:	f383 8811 	msr	BASEPRI, r3
 8008dac:	f3bf 8f6f 	isb	sy
 8008db0:	f3bf 8f4f 	dsb	sy
 8008db4:	61fb      	str	r3, [r7, #28]
}
 8008db6:	bf00      	nop
 8008db8:	e7fe      	b.n	8008db8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008dba:	f002 f823 	bl	800ae04 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008dc6:	429a      	cmp	r2, r3
 8008dc8:	d302      	bcc.n	8008dd0 <xQueueGenericSend+0xd4>
 8008dca:	683b      	ldr	r3, [r7, #0]
 8008dcc:	2b02      	cmp	r3, #2
 8008dce:	d129      	bne.n	8008e24 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008dd0:	683a      	ldr	r2, [r7, #0]
 8008dd2:	68b9      	ldr	r1, [r7, #8]
 8008dd4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008dd6:	f000 fa2a 	bl	800922e <prvCopyDataToQueue>
 8008dda:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d010      	beq.n	8008e06 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008de6:	3324      	adds	r3, #36	; 0x24
 8008de8:	4618      	mov	r0, r3
 8008dea:	f001 f855 	bl	8009e98 <xTaskRemoveFromEventList>
 8008dee:	4603      	mov	r3, r0
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d013      	beq.n	8008e1c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008df4:	4b3f      	ldr	r3, [pc, #252]	; (8008ef4 <xQueueGenericSend+0x1f8>)
 8008df6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008dfa:	601a      	str	r2, [r3, #0]
 8008dfc:	f3bf 8f4f 	dsb	sy
 8008e00:	f3bf 8f6f 	isb	sy
 8008e04:	e00a      	b.n	8008e1c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d007      	beq.n	8008e1c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008e0c:	4b39      	ldr	r3, [pc, #228]	; (8008ef4 <xQueueGenericSend+0x1f8>)
 8008e0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e12:	601a      	str	r2, [r3, #0]
 8008e14:	f3bf 8f4f 	dsb	sy
 8008e18:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008e1c:	f002 f822 	bl	800ae64 <vPortExitCritical>
				return pdPASS;
 8008e20:	2301      	movs	r3, #1
 8008e22:	e063      	b.n	8008eec <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d103      	bne.n	8008e32 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008e2a:	f002 f81b 	bl	800ae64 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008e2e:	2300      	movs	r3, #0
 8008e30:	e05c      	b.n	8008eec <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008e32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d106      	bne.n	8008e46 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008e38:	f107 0314 	add.w	r3, r7, #20
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	f001 f8f1 	bl	800a024 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008e42:	2301      	movs	r3, #1
 8008e44:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008e46:	f002 f80d 	bl	800ae64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008e4a:	f000 fdc5 	bl	80099d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008e4e:	f001 ffd9 	bl	800ae04 <vPortEnterCritical>
 8008e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e54:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008e58:	b25b      	sxtb	r3, r3
 8008e5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e5e:	d103      	bne.n	8008e68 <xQueueGenericSend+0x16c>
 8008e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e62:	2200      	movs	r2, #0
 8008e64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e6a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008e6e:	b25b      	sxtb	r3, r3
 8008e70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e74:	d103      	bne.n	8008e7e <xQueueGenericSend+0x182>
 8008e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e78:	2200      	movs	r2, #0
 8008e7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008e7e:	f001 fff1 	bl	800ae64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008e82:	1d3a      	adds	r2, r7, #4
 8008e84:	f107 0314 	add.w	r3, r7, #20
 8008e88:	4611      	mov	r1, r2
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	f001 f8e0 	bl	800a050 <xTaskCheckForTimeOut>
 8008e90:	4603      	mov	r3, r0
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d124      	bne.n	8008ee0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008e96:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008e98:	f000 fac1 	bl	800941e <prvIsQueueFull>
 8008e9c:	4603      	mov	r3, r0
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d018      	beq.n	8008ed4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ea4:	3310      	adds	r3, #16
 8008ea6:	687a      	ldr	r2, [r7, #4]
 8008ea8:	4611      	mov	r1, r2
 8008eaa:	4618      	mov	r0, r3
 8008eac:	f000 ff68 	bl	8009d80 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008eb0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008eb2:	f000 fa4c 	bl	800934e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008eb6:	f000 fd9d 	bl	80099f4 <xTaskResumeAll>
 8008eba:	4603      	mov	r3, r0
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	f47f af7c 	bne.w	8008dba <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8008ec2:	4b0c      	ldr	r3, [pc, #48]	; (8008ef4 <xQueueGenericSend+0x1f8>)
 8008ec4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ec8:	601a      	str	r2, [r3, #0]
 8008eca:	f3bf 8f4f 	dsb	sy
 8008ece:	f3bf 8f6f 	isb	sy
 8008ed2:	e772      	b.n	8008dba <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008ed4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008ed6:	f000 fa3a 	bl	800934e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008eda:	f000 fd8b 	bl	80099f4 <xTaskResumeAll>
 8008ede:	e76c      	b.n	8008dba <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008ee0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008ee2:	f000 fa34 	bl	800934e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008ee6:	f000 fd85 	bl	80099f4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008eea:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008eec:	4618      	mov	r0, r3
 8008eee:	3738      	adds	r7, #56	; 0x38
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	bd80      	pop	{r7, pc}
 8008ef4:	e000ed04 	.word	0xe000ed04

08008ef8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	b08e      	sub	sp, #56	; 0x38
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	60f8      	str	r0, [r7, #12]
 8008f00:	60b9      	str	r1, [r7, #8]
 8008f02:	607a      	str	r2, [r7, #4]
 8008f04:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d10a      	bne.n	8008f26 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f14:	f383 8811 	msr	BASEPRI, r3
 8008f18:	f3bf 8f6f 	isb	sy
 8008f1c:	f3bf 8f4f 	dsb	sy
 8008f20:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008f22:	bf00      	nop
 8008f24:	e7fe      	b.n	8008f24 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008f26:	68bb      	ldr	r3, [r7, #8]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d103      	bne.n	8008f34 <xQueueGenericSendFromISR+0x3c>
 8008f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d101      	bne.n	8008f38 <xQueueGenericSendFromISR+0x40>
 8008f34:	2301      	movs	r3, #1
 8008f36:	e000      	b.n	8008f3a <xQueueGenericSendFromISR+0x42>
 8008f38:	2300      	movs	r3, #0
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d10a      	bne.n	8008f54 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8008f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f42:	f383 8811 	msr	BASEPRI, r3
 8008f46:	f3bf 8f6f 	isb	sy
 8008f4a:	f3bf 8f4f 	dsb	sy
 8008f4e:	623b      	str	r3, [r7, #32]
}
 8008f50:	bf00      	nop
 8008f52:	e7fe      	b.n	8008f52 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008f54:	683b      	ldr	r3, [r7, #0]
 8008f56:	2b02      	cmp	r3, #2
 8008f58:	d103      	bne.n	8008f62 <xQueueGenericSendFromISR+0x6a>
 8008f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f5e:	2b01      	cmp	r3, #1
 8008f60:	d101      	bne.n	8008f66 <xQueueGenericSendFromISR+0x6e>
 8008f62:	2301      	movs	r3, #1
 8008f64:	e000      	b.n	8008f68 <xQueueGenericSendFromISR+0x70>
 8008f66:	2300      	movs	r3, #0
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d10a      	bne.n	8008f82 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f70:	f383 8811 	msr	BASEPRI, r3
 8008f74:	f3bf 8f6f 	isb	sy
 8008f78:	f3bf 8f4f 	dsb	sy
 8008f7c:	61fb      	str	r3, [r7, #28]
}
 8008f7e:	bf00      	nop
 8008f80:	e7fe      	b.n	8008f80 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008f82:	f002 f821 	bl	800afc8 <vPortValidateInterruptPriority>
	__asm volatile
 8008f86:	f3ef 8211 	mrs	r2, BASEPRI
 8008f8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f8e:	f383 8811 	msr	BASEPRI, r3
 8008f92:	f3bf 8f6f 	isb	sy
 8008f96:	f3bf 8f4f 	dsb	sy
 8008f9a:	61ba      	str	r2, [r7, #24]
 8008f9c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8008f9e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008fa0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fa4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008faa:	429a      	cmp	r2, r3
 8008fac:	d302      	bcc.n	8008fb4 <xQueueGenericSendFromISR+0xbc>
 8008fae:	683b      	ldr	r3, [r7, #0]
 8008fb0:	2b02      	cmp	r3, #2
 8008fb2:	d12c      	bne.n	800900e <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fb6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008fba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008fbe:	683a      	ldr	r2, [r7, #0]
 8008fc0:	68b9      	ldr	r1, [r7, #8]
 8008fc2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008fc4:	f000 f933 	bl	800922e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008fc8:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8008fcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fd0:	d112      	bne.n	8008ff8 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d016      	beq.n	8009008 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fdc:	3324      	adds	r3, #36	; 0x24
 8008fde:	4618      	mov	r0, r3
 8008fe0:	f000 ff5a 	bl	8009e98 <xTaskRemoveFromEventList>
 8008fe4:	4603      	mov	r3, r0
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d00e      	beq.n	8009008 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d00b      	beq.n	8009008 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	2201      	movs	r2, #1
 8008ff4:	601a      	str	r2, [r3, #0]
 8008ff6:	e007      	b.n	8009008 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008ff8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008ffc:	3301      	adds	r3, #1
 8008ffe:	b2db      	uxtb	r3, r3
 8009000:	b25a      	sxtb	r2, r3
 8009002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009004:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009008:	2301      	movs	r3, #1
 800900a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800900c:	e001      	b.n	8009012 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800900e:	2300      	movs	r3, #0
 8009010:	637b      	str	r3, [r7, #52]	; 0x34
 8009012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009014:	613b      	str	r3, [r7, #16]
	__asm volatile
 8009016:	693b      	ldr	r3, [r7, #16]
 8009018:	f383 8811 	msr	BASEPRI, r3
}
 800901c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800901e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009020:	4618      	mov	r0, r3
 8009022:	3738      	adds	r7, #56	; 0x38
 8009024:	46bd      	mov	sp, r7
 8009026:	bd80      	pop	{r7, pc}

08009028 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009028:	b580      	push	{r7, lr}
 800902a:	b08c      	sub	sp, #48	; 0x30
 800902c:	af00      	add	r7, sp, #0
 800902e:	60f8      	str	r0, [r7, #12]
 8009030:	60b9      	str	r1, [r7, #8]
 8009032:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009034:	2300      	movs	r3, #0
 8009036:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800903c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800903e:	2b00      	cmp	r3, #0
 8009040:	d10a      	bne.n	8009058 <xQueueReceive+0x30>
	__asm volatile
 8009042:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009046:	f383 8811 	msr	BASEPRI, r3
 800904a:	f3bf 8f6f 	isb	sy
 800904e:	f3bf 8f4f 	dsb	sy
 8009052:	623b      	str	r3, [r7, #32]
}
 8009054:	bf00      	nop
 8009056:	e7fe      	b.n	8009056 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009058:	68bb      	ldr	r3, [r7, #8]
 800905a:	2b00      	cmp	r3, #0
 800905c:	d103      	bne.n	8009066 <xQueueReceive+0x3e>
 800905e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009062:	2b00      	cmp	r3, #0
 8009064:	d101      	bne.n	800906a <xQueueReceive+0x42>
 8009066:	2301      	movs	r3, #1
 8009068:	e000      	b.n	800906c <xQueueReceive+0x44>
 800906a:	2300      	movs	r3, #0
 800906c:	2b00      	cmp	r3, #0
 800906e:	d10a      	bne.n	8009086 <xQueueReceive+0x5e>
	__asm volatile
 8009070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009074:	f383 8811 	msr	BASEPRI, r3
 8009078:	f3bf 8f6f 	isb	sy
 800907c:	f3bf 8f4f 	dsb	sy
 8009080:	61fb      	str	r3, [r7, #28]
}
 8009082:	bf00      	nop
 8009084:	e7fe      	b.n	8009084 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009086:	f001 f927 	bl	800a2d8 <xTaskGetSchedulerState>
 800908a:	4603      	mov	r3, r0
 800908c:	2b00      	cmp	r3, #0
 800908e:	d102      	bne.n	8009096 <xQueueReceive+0x6e>
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	2b00      	cmp	r3, #0
 8009094:	d101      	bne.n	800909a <xQueueReceive+0x72>
 8009096:	2301      	movs	r3, #1
 8009098:	e000      	b.n	800909c <xQueueReceive+0x74>
 800909a:	2300      	movs	r3, #0
 800909c:	2b00      	cmp	r3, #0
 800909e:	d10a      	bne.n	80090b6 <xQueueReceive+0x8e>
	__asm volatile
 80090a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090a4:	f383 8811 	msr	BASEPRI, r3
 80090a8:	f3bf 8f6f 	isb	sy
 80090ac:	f3bf 8f4f 	dsb	sy
 80090b0:	61bb      	str	r3, [r7, #24]
}
 80090b2:	bf00      	nop
 80090b4:	e7fe      	b.n	80090b4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80090b6:	f001 fea5 	bl	800ae04 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80090ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090be:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80090c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d01f      	beq.n	8009106 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80090c6:	68b9      	ldr	r1, [r7, #8]
 80090c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80090ca:	f000 f91a 	bl	8009302 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80090ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090d0:	1e5a      	subs	r2, r3, #1
 80090d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090d4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80090d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090d8:	691b      	ldr	r3, [r3, #16]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d00f      	beq.n	80090fe <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80090de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090e0:	3310      	adds	r3, #16
 80090e2:	4618      	mov	r0, r3
 80090e4:	f000 fed8 	bl	8009e98 <xTaskRemoveFromEventList>
 80090e8:	4603      	mov	r3, r0
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d007      	beq.n	80090fe <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80090ee:	4b3d      	ldr	r3, [pc, #244]	; (80091e4 <xQueueReceive+0x1bc>)
 80090f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090f4:	601a      	str	r2, [r3, #0]
 80090f6:	f3bf 8f4f 	dsb	sy
 80090fa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80090fe:	f001 feb1 	bl	800ae64 <vPortExitCritical>
				return pdPASS;
 8009102:	2301      	movs	r3, #1
 8009104:	e069      	b.n	80091da <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	2b00      	cmp	r3, #0
 800910a:	d103      	bne.n	8009114 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800910c:	f001 feaa 	bl	800ae64 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009110:	2300      	movs	r3, #0
 8009112:	e062      	b.n	80091da <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009116:	2b00      	cmp	r3, #0
 8009118:	d106      	bne.n	8009128 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800911a:	f107 0310 	add.w	r3, r7, #16
 800911e:	4618      	mov	r0, r3
 8009120:	f000 ff80 	bl	800a024 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009124:	2301      	movs	r3, #1
 8009126:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009128:	f001 fe9c 	bl	800ae64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800912c:	f000 fc54 	bl	80099d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009130:	f001 fe68 	bl	800ae04 <vPortEnterCritical>
 8009134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009136:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800913a:	b25b      	sxtb	r3, r3
 800913c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009140:	d103      	bne.n	800914a <xQueueReceive+0x122>
 8009142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009144:	2200      	movs	r2, #0
 8009146:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800914a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800914c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009150:	b25b      	sxtb	r3, r3
 8009152:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009156:	d103      	bne.n	8009160 <xQueueReceive+0x138>
 8009158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800915a:	2200      	movs	r2, #0
 800915c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009160:	f001 fe80 	bl	800ae64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009164:	1d3a      	adds	r2, r7, #4
 8009166:	f107 0310 	add.w	r3, r7, #16
 800916a:	4611      	mov	r1, r2
 800916c:	4618      	mov	r0, r3
 800916e:	f000 ff6f 	bl	800a050 <xTaskCheckForTimeOut>
 8009172:	4603      	mov	r3, r0
 8009174:	2b00      	cmp	r3, #0
 8009176:	d123      	bne.n	80091c0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009178:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800917a:	f000 f93a 	bl	80093f2 <prvIsQueueEmpty>
 800917e:	4603      	mov	r3, r0
 8009180:	2b00      	cmp	r3, #0
 8009182:	d017      	beq.n	80091b4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009186:	3324      	adds	r3, #36	; 0x24
 8009188:	687a      	ldr	r2, [r7, #4]
 800918a:	4611      	mov	r1, r2
 800918c:	4618      	mov	r0, r3
 800918e:	f000 fdf7 	bl	8009d80 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009192:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009194:	f000 f8db 	bl	800934e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009198:	f000 fc2c 	bl	80099f4 <xTaskResumeAll>
 800919c:	4603      	mov	r3, r0
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d189      	bne.n	80090b6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80091a2:	4b10      	ldr	r3, [pc, #64]	; (80091e4 <xQueueReceive+0x1bc>)
 80091a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091a8:	601a      	str	r2, [r3, #0]
 80091aa:	f3bf 8f4f 	dsb	sy
 80091ae:	f3bf 8f6f 	isb	sy
 80091b2:	e780      	b.n	80090b6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80091b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80091b6:	f000 f8ca 	bl	800934e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80091ba:	f000 fc1b 	bl	80099f4 <xTaskResumeAll>
 80091be:	e77a      	b.n	80090b6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80091c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80091c2:	f000 f8c4 	bl	800934e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80091c6:	f000 fc15 	bl	80099f4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80091ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80091cc:	f000 f911 	bl	80093f2 <prvIsQueueEmpty>
 80091d0:	4603      	mov	r3, r0
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	f43f af6f 	beq.w	80090b6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80091d8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80091da:	4618      	mov	r0, r3
 80091dc:	3730      	adds	r7, #48	; 0x30
 80091de:	46bd      	mov	sp, r7
 80091e0:	bd80      	pop	{r7, pc}
 80091e2:	bf00      	nop
 80091e4:	e000ed04 	.word	0xe000ed04

080091e8 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b084      	sub	sp, #16
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d10a      	bne.n	8009210 <vQueueDelete+0x28>
	__asm volatile
 80091fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091fe:	f383 8811 	msr	BASEPRI, r3
 8009202:	f3bf 8f6f 	isb	sy
 8009206:	f3bf 8f4f 	dsb	sy
 800920a:	60bb      	str	r3, [r7, #8]
}
 800920c:	bf00      	nop
 800920e:	e7fe      	b.n	800920e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8009210:	68f8      	ldr	r0, [r7, #12]
 8009212:	f000 f947 	bl	80094a4 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800921c:	2b00      	cmp	r3, #0
 800921e:	d102      	bne.n	8009226 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8009220:	68f8      	ldr	r0, [r7, #12]
 8009222:	f001 ffd5 	bl	800b1d0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8009226:	bf00      	nop
 8009228:	3710      	adds	r7, #16
 800922a:	46bd      	mov	sp, r7
 800922c:	bd80      	pop	{r7, pc}

0800922e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800922e:	b580      	push	{r7, lr}
 8009230:	b086      	sub	sp, #24
 8009232:	af00      	add	r7, sp, #0
 8009234:	60f8      	str	r0, [r7, #12]
 8009236:	60b9      	str	r1, [r7, #8]
 8009238:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800923a:	2300      	movs	r3, #0
 800923c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009242:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009248:	2b00      	cmp	r3, #0
 800924a:	d10d      	bne.n	8009268 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	2b00      	cmp	r3, #0
 8009252:	d14d      	bne.n	80092f0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	689b      	ldr	r3, [r3, #8]
 8009258:	4618      	mov	r0, r3
 800925a:	f001 f85b 	bl	800a314 <xTaskPriorityDisinherit>
 800925e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	2200      	movs	r2, #0
 8009264:	609a      	str	r2, [r3, #8]
 8009266:	e043      	b.n	80092f0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	2b00      	cmp	r3, #0
 800926c:	d119      	bne.n	80092a2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	6858      	ldr	r0, [r3, #4]
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009276:	461a      	mov	r2, r3
 8009278:	68b9      	ldr	r1, [r7, #8]
 800927a:	f002 f8e3 	bl	800b444 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	685a      	ldr	r2, [r3, #4]
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009286:	441a      	add	r2, r3
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	685a      	ldr	r2, [r3, #4]
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	689b      	ldr	r3, [r3, #8]
 8009294:	429a      	cmp	r2, r3
 8009296:	d32b      	bcc.n	80092f0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	681a      	ldr	r2, [r3, #0]
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	605a      	str	r2, [r3, #4]
 80092a0:	e026      	b.n	80092f0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	68d8      	ldr	r0, [r3, #12]
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092aa:	461a      	mov	r2, r3
 80092ac:	68b9      	ldr	r1, [r7, #8]
 80092ae:	f002 f8c9 	bl	800b444 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	68da      	ldr	r2, [r3, #12]
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092ba:	425b      	negs	r3, r3
 80092bc:	441a      	add	r2, r3
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	68da      	ldr	r2, [r3, #12]
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	429a      	cmp	r2, r3
 80092cc:	d207      	bcs.n	80092de <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	689a      	ldr	r2, [r3, #8]
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092d6:	425b      	negs	r3, r3
 80092d8:	441a      	add	r2, r3
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	2b02      	cmp	r3, #2
 80092e2:	d105      	bne.n	80092f0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80092e4:	693b      	ldr	r3, [r7, #16]
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d002      	beq.n	80092f0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80092ea:	693b      	ldr	r3, [r7, #16]
 80092ec:	3b01      	subs	r3, #1
 80092ee:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80092f0:	693b      	ldr	r3, [r7, #16]
 80092f2:	1c5a      	adds	r2, r3, #1
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80092f8:	697b      	ldr	r3, [r7, #20]
}
 80092fa:	4618      	mov	r0, r3
 80092fc:	3718      	adds	r7, #24
 80092fe:	46bd      	mov	sp, r7
 8009300:	bd80      	pop	{r7, pc}

08009302 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009302:	b580      	push	{r7, lr}
 8009304:	b082      	sub	sp, #8
 8009306:	af00      	add	r7, sp, #0
 8009308:	6078      	str	r0, [r7, #4]
 800930a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009310:	2b00      	cmp	r3, #0
 8009312:	d018      	beq.n	8009346 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	68da      	ldr	r2, [r3, #12]
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800931c:	441a      	add	r2, r3
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	68da      	ldr	r2, [r3, #12]
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	689b      	ldr	r3, [r3, #8]
 800932a:	429a      	cmp	r2, r3
 800932c:	d303      	bcc.n	8009336 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681a      	ldr	r2, [r3, #0]
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	68d9      	ldr	r1, [r3, #12]
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800933e:	461a      	mov	r2, r3
 8009340:	6838      	ldr	r0, [r7, #0]
 8009342:	f002 f87f 	bl	800b444 <memcpy>
	}
}
 8009346:	bf00      	nop
 8009348:	3708      	adds	r7, #8
 800934a:	46bd      	mov	sp, r7
 800934c:	bd80      	pop	{r7, pc}

0800934e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800934e:	b580      	push	{r7, lr}
 8009350:	b084      	sub	sp, #16
 8009352:	af00      	add	r7, sp, #0
 8009354:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009356:	f001 fd55 	bl	800ae04 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009360:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009362:	e011      	b.n	8009388 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009368:	2b00      	cmp	r3, #0
 800936a:	d012      	beq.n	8009392 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	3324      	adds	r3, #36	; 0x24
 8009370:	4618      	mov	r0, r3
 8009372:	f000 fd91 	bl	8009e98 <xTaskRemoveFromEventList>
 8009376:	4603      	mov	r3, r0
 8009378:	2b00      	cmp	r3, #0
 800937a:	d001      	beq.n	8009380 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800937c:	f000 feca 	bl	800a114 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009380:	7bfb      	ldrb	r3, [r7, #15]
 8009382:	3b01      	subs	r3, #1
 8009384:	b2db      	uxtb	r3, r3
 8009386:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009388:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800938c:	2b00      	cmp	r3, #0
 800938e:	dce9      	bgt.n	8009364 <prvUnlockQueue+0x16>
 8009390:	e000      	b.n	8009394 <prvUnlockQueue+0x46>
					break;
 8009392:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	22ff      	movs	r2, #255	; 0xff
 8009398:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800939c:	f001 fd62 	bl	800ae64 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80093a0:	f001 fd30 	bl	800ae04 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80093aa:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80093ac:	e011      	b.n	80093d2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	691b      	ldr	r3, [r3, #16]
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d012      	beq.n	80093dc <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	3310      	adds	r3, #16
 80093ba:	4618      	mov	r0, r3
 80093bc:	f000 fd6c 	bl	8009e98 <xTaskRemoveFromEventList>
 80093c0:	4603      	mov	r3, r0
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d001      	beq.n	80093ca <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80093c6:	f000 fea5 	bl	800a114 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80093ca:	7bbb      	ldrb	r3, [r7, #14]
 80093cc:	3b01      	subs	r3, #1
 80093ce:	b2db      	uxtb	r3, r3
 80093d0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80093d2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	dce9      	bgt.n	80093ae <prvUnlockQueue+0x60>
 80093da:	e000      	b.n	80093de <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80093dc:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	22ff      	movs	r2, #255	; 0xff
 80093e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80093e6:	f001 fd3d 	bl	800ae64 <vPortExitCritical>
}
 80093ea:	bf00      	nop
 80093ec:	3710      	adds	r7, #16
 80093ee:	46bd      	mov	sp, r7
 80093f0:	bd80      	pop	{r7, pc}

080093f2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80093f2:	b580      	push	{r7, lr}
 80093f4:	b084      	sub	sp, #16
 80093f6:	af00      	add	r7, sp, #0
 80093f8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80093fa:	f001 fd03 	bl	800ae04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009402:	2b00      	cmp	r3, #0
 8009404:	d102      	bne.n	800940c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009406:	2301      	movs	r3, #1
 8009408:	60fb      	str	r3, [r7, #12]
 800940a:	e001      	b.n	8009410 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800940c:	2300      	movs	r3, #0
 800940e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009410:	f001 fd28 	bl	800ae64 <vPortExitCritical>

	return xReturn;
 8009414:	68fb      	ldr	r3, [r7, #12]
}
 8009416:	4618      	mov	r0, r3
 8009418:	3710      	adds	r7, #16
 800941a:	46bd      	mov	sp, r7
 800941c:	bd80      	pop	{r7, pc}

0800941e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800941e:	b580      	push	{r7, lr}
 8009420:	b084      	sub	sp, #16
 8009422:	af00      	add	r7, sp, #0
 8009424:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009426:	f001 fced 	bl	800ae04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009432:	429a      	cmp	r2, r3
 8009434:	d102      	bne.n	800943c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009436:	2301      	movs	r3, #1
 8009438:	60fb      	str	r3, [r7, #12]
 800943a:	e001      	b.n	8009440 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800943c:	2300      	movs	r3, #0
 800943e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009440:	f001 fd10 	bl	800ae64 <vPortExitCritical>

	return xReturn;
 8009444:	68fb      	ldr	r3, [r7, #12]
}
 8009446:	4618      	mov	r0, r3
 8009448:	3710      	adds	r7, #16
 800944a:	46bd      	mov	sp, r7
 800944c:	bd80      	pop	{r7, pc}
	...

08009450 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009450:	b480      	push	{r7}
 8009452:	b085      	sub	sp, #20
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
 8009458:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800945a:	2300      	movs	r3, #0
 800945c:	60fb      	str	r3, [r7, #12]
 800945e:	e014      	b.n	800948a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009460:	4a0f      	ldr	r2, [pc, #60]	; (80094a0 <vQueueAddToRegistry+0x50>)
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009468:	2b00      	cmp	r3, #0
 800946a:	d10b      	bne.n	8009484 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800946c:	490c      	ldr	r1, [pc, #48]	; (80094a0 <vQueueAddToRegistry+0x50>)
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	683a      	ldr	r2, [r7, #0]
 8009472:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009476:	4a0a      	ldr	r2, [pc, #40]	; (80094a0 <vQueueAddToRegistry+0x50>)
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	00db      	lsls	r3, r3, #3
 800947c:	4413      	add	r3, r2
 800947e:	687a      	ldr	r2, [r7, #4]
 8009480:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009482:	e006      	b.n	8009492 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	3301      	adds	r3, #1
 8009488:	60fb      	str	r3, [r7, #12]
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	2b07      	cmp	r3, #7
 800948e:	d9e7      	bls.n	8009460 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009490:	bf00      	nop
 8009492:	bf00      	nop
 8009494:	3714      	adds	r7, #20
 8009496:	46bd      	mov	sp, r7
 8009498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949c:	4770      	bx	lr
 800949e:	bf00      	nop
 80094a0:	20009e70 	.word	0x20009e70

080094a4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80094a4:	b480      	push	{r7}
 80094a6:	b085      	sub	sp, #20
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80094ac:	2300      	movs	r3, #0
 80094ae:	60fb      	str	r3, [r7, #12]
 80094b0:	e016      	b.n	80094e0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80094b2:	4a10      	ldr	r2, [pc, #64]	; (80094f4 <vQueueUnregisterQueue+0x50>)
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	00db      	lsls	r3, r3, #3
 80094b8:	4413      	add	r3, r2
 80094ba:	685b      	ldr	r3, [r3, #4]
 80094bc:	687a      	ldr	r2, [r7, #4]
 80094be:	429a      	cmp	r2, r3
 80094c0:	d10b      	bne.n	80094da <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80094c2:	4a0c      	ldr	r2, [pc, #48]	; (80094f4 <vQueueUnregisterQueue+0x50>)
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	2100      	movs	r1, #0
 80094c8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80094cc:	4a09      	ldr	r2, [pc, #36]	; (80094f4 <vQueueUnregisterQueue+0x50>)
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	00db      	lsls	r3, r3, #3
 80094d2:	4413      	add	r3, r2
 80094d4:	2200      	movs	r2, #0
 80094d6:	605a      	str	r2, [r3, #4]
				break;
 80094d8:	e006      	b.n	80094e8 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	3301      	adds	r3, #1
 80094de:	60fb      	str	r3, [r7, #12]
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	2b07      	cmp	r3, #7
 80094e4:	d9e5      	bls.n	80094b2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80094e6:	bf00      	nop
 80094e8:	bf00      	nop
 80094ea:	3714      	adds	r7, #20
 80094ec:	46bd      	mov	sp, r7
 80094ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f2:	4770      	bx	lr
 80094f4:	20009e70 	.word	0x20009e70

080094f8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b086      	sub	sp, #24
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	60f8      	str	r0, [r7, #12]
 8009500:	60b9      	str	r1, [r7, #8]
 8009502:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009508:	f001 fc7c 	bl	800ae04 <vPortEnterCritical>
 800950c:	697b      	ldr	r3, [r7, #20]
 800950e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009512:	b25b      	sxtb	r3, r3
 8009514:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009518:	d103      	bne.n	8009522 <vQueueWaitForMessageRestricted+0x2a>
 800951a:	697b      	ldr	r3, [r7, #20]
 800951c:	2200      	movs	r2, #0
 800951e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009522:	697b      	ldr	r3, [r7, #20]
 8009524:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009528:	b25b      	sxtb	r3, r3
 800952a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800952e:	d103      	bne.n	8009538 <vQueueWaitForMessageRestricted+0x40>
 8009530:	697b      	ldr	r3, [r7, #20]
 8009532:	2200      	movs	r2, #0
 8009534:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009538:	f001 fc94 	bl	800ae64 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800953c:	697b      	ldr	r3, [r7, #20]
 800953e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009540:	2b00      	cmp	r3, #0
 8009542:	d106      	bne.n	8009552 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009544:	697b      	ldr	r3, [r7, #20]
 8009546:	3324      	adds	r3, #36	; 0x24
 8009548:	687a      	ldr	r2, [r7, #4]
 800954a:	68b9      	ldr	r1, [r7, #8]
 800954c:	4618      	mov	r0, r3
 800954e:	f000 fc77 	bl	8009e40 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009552:	6978      	ldr	r0, [r7, #20]
 8009554:	f7ff fefb 	bl	800934e <prvUnlockQueue>
	}
 8009558:	bf00      	nop
 800955a:	3718      	adds	r7, #24
 800955c:	46bd      	mov	sp, r7
 800955e:	bd80      	pop	{r7, pc}

08009560 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009560:	b580      	push	{r7, lr}
 8009562:	b08e      	sub	sp, #56	; 0x38
 8009564:	af04      	add	r7, sp, #16
 8009566:	60f8      	str	r0, [r7, #12]
 8009568:	60b9      	str	r1, [r7, #8]
 800956a:	607a      	str	r2, [r7, #4]
 800956c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800956e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009570:	2b00      	cmp	r3, #0
 8009572:	d10a      	bne.n	800958a <xTaskCreateStatic+0x2a>
	__asm volatile
 8009574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009578:	f383 8811 	msr	BASEPRI, r3
 800957c:	f3bf 8f6f 	isb	sy
 8009580:	f3bf 8f4f 	dsb	sy
 8009584:	623b      	str	r3, [r7, #32]
}
 8009586:	bf00      	nop
 8009588:	e7fe      	b.n	8009588 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800958a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800958c:	2b00      	cmp	r3, #0
 800958e:	d10a      	bne.n	80095a6 <xTaskCreateStatic+0x46>
	__asm volatile
 8009590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009594:	f383 8811 	msr	BASEPRI, r3
 8009598:	f3bf 8f6f 	isb	sy
 800959c:	f3bf 8f4f 	dsb	sy
 80095a0:	61fb      	str	r3, [r7, #28]
}
 80095a2:	bf00      	nop
 80095a4:	e7fe      	b.n	80095a4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80095a6:	235c      	movs	r3, #92	; 0x5c
 80095a8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80095aa:	693b      	ldr	r3, [r7, #16]
 80095ac:	2b5c      	cmp	r3, #92	; 0x5c
 80095ae:	d00a      	beq.n	80095c6 <xTaskCreateStatic+0x66>
	__asm volatile
 80095b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095b4:	f383 8811 	msr	BASEPRI, r3
 80095b8:	f3bf 8f6f 	isb	sy
 80095bc:	f3bf 8f4f 	dsb	sy
 80095c0:	61bb      	str	r3, [r7, #24]
}
 80095c2:	bf00      	nop
 80095c4:	e7fe      	b.n	80095c4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80095c6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80095c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d01e      	beq.n	800960c <xTaskCreateStatic+0xac>
 80095ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d01b      	beq.n	800960c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80095d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095d6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80095d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80095dc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80095de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095e0:	2202      	movs	r2, #2
 80095e2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80095e6:	2300      	movs	r3, #0
 80095e8:	9303      	str	r3, [sp, #12]
 80095ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095ec:	9302      	str	r3, [sp, #8]
 80095ee:	f107 0314 	add.w	r3, r7, #20
 80095f2:	9301      	str	r3, [sp, #4]
 80095f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095f6:	9300      	str	r3, [sp, #0]
 80095f8:	683b      	ldr	r3, [r7, #0]
 80095fa:	687a      	ldr	r2, [r7, #4]
 80095fc:	68b9      	ldr	r1, [r7, #8]
 80095fe:	68f8      	ldr	r0, [r7, #12]
 8009600:	f000 f850 	bl	80096a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009604:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009606:	f000 f8dd 	bl	80097c4 <prvAddNewTaskToReadyList>
 800960a:	e001      	b.n	8009610 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800960c:	2300      	movs	r3, #0
 800960e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009610:	697b      	ldr	r3, [r7, #20]
	}
 8009612:	4618      	mov	r0, r3
 8009614:	3728      	adds	r7, #40	; 0x28
 8009616:	46bd      	mov	sp, r7
 8009618:	bd80      	pop	{r7, pc}

0800961a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800961a:	b580      	push	{r7, lr}
 800961c:	b08c      	sub	sp, #48	; 0x30
 800961e:	af04      	add	r7, sp, #16
 8009620:	60f8      	str	r0, [r7, #12]
 8009622:	60b9      	str	r1, [r7, #8]
 8009624:	603b      	str	r3, [r7, #0]
 8009626:	4613      	mov	r3, r2
 8009628:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800962a:	88fb      	ldrh	r3, [r7, #6]
 800962c:	009b      	lsls	r3, r3, #2
 800962e:	4618      	mov	r0, r3
 8009630:	f001 fd0a 	bl	800b048 <pvPortMalloc>
 8009634:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009636:	697b      	ldr	r3, [r7, #20]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d00e      	beq.n	800965a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800963c:	205c      	movs	r0, #92	; 0x5c
 800963e:	f001 fd03 	bl	800b048 <pvPortMalloc>
 8009642:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009644:	69fb      	ldr	r3, [r7, #28]
 8009646:	2b00      	cmp	r3, #0
 8009648:	d003      	beq.n	8009652 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800964a:	69fb      	ldr	r3, [r7, #28]
 800964c:	697a      	ldr	r2, [r7, #20]
 800964e:	631a      	str	r2, [r3, #48]	; 0x30
 8009650:	e005      	b.n	800965e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009652:	6978      	ldr	r0, [r7, #20]
 8009654:	f001 fdbc 	bl	800b1d0 <vPortFree>
 8009658:	e001      	b.n	800965e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800965a:	2300      	movs	r3, #0
 800965c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800965e:	69fb      	ldr	r3, [r7, #28]
 8009660:	2b00      	cmp	r3, #0
 8009662:	d017      	beq.n	8009694 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009664:	69fb      	ldr	r3, [r7, #28]
 8009666:	2200      	movs	r2, #0
 8009668:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800966c:	88fa      	ldrh	r2, [r7, #6]
 800966e:	2300      	movs	r3, #0
 8009670:	9303      	str	r3, [sp, #12]
 8009672:	69fb      	ldr	r3, [r7, #28]
 8009674:	9302      	str	r3, [sp, #8]
 8009676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009678:	9301      	str	r3, [sp, #4]
 800967a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800967c:	9300      	str	r3, [sp, #0]
 800967e:	683b      	ldr	r3, [r7, #0]
 8009680:	68b9      	ldr	r1, [r7, #8]
 8009682:	68f8      	ldr	r0, [r7, #12]
 8009684:	f000 f80e 	bl	80096a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009688:	69f8      	ldr	r0, [r7, #28]
 800968a:	f000 f89b 	bl	80097c4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800968e:	2301      	movs	r3, #1
 8009690:	61bb      	str	r3, [r7, #24]
 8009692:	e002      	b.n	800969a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009694:	f04f 33ff 	mov.w	r3, #4294967295
 8009698:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800969a:	69bb      	ldr	r3, [r7, #24]
	}
 800969c:	4618      	mov	r0, r3
 800969e:	3720      	adds	r7, #32
 80096a0:	46bd      	mov	sp, r7
 80096a2:	bd80      	pop	{r7, pc}

080096a4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80096a4:	b580      	push	{r7, lr}
 80096a6:	b088      	sub	sp, #32
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	60f8      	str	r0, [r7, #12]
 80096ac:	60b9      	str	r1, [r7, #8]
 80096ae:	607a      	str	r2, [r7, #4]
 80096b0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80096b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096b4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	009b      	lsls	r3, r3, #2
 80096ba:	461a      	mov	r2, r3
 80096bc:	21a5      	movs	r1, #165	; 0xa5
 80096be:	f001 fecf 	bl	800b460 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80096c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80096cc:	3b01      	subs	r3, #1
 80096ce:	009b      	lsls	r3, r3, #2
 80096d0:	4413      	add	r3, r2
 80096d2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80096d4:	69bb      	ldr	r3, [r7, #24]
 80096d6:	f023 0307 	bic.w	r3, r3, #7
 80096da:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80096dc:	69bb      	ldr	r3, [r7, #24]
 80096de:	f003 0307 	and.w	r3, r3, #7
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d00a      	beq.n	80096fc <prvInitialiseNewTask+0x58>
	__asm volatile
 80096e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096ea:	f383 8811 	msr	BASEPRI, r3
 80096ee:	f3bf 8f6f 	isb	sy
 80096f2:	f3bf 8f4f 	dsb	sy
 80096f6:	617b      	str	r3, [r7, #20]
}
 80096f8:	bf00      	nop
 80096fa:	e7fe      	b.n	80096fa <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80096fc:	68bb      	ldr	r3, [r7, #8]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d01f      	beq.n	8009742 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009702:	2300      	movs	r3, #0
 8009704:	61fb      	str	r3, [r7, #28]
 8009706:	e012      	b.n	800972e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009708:	68ba      	ldr	r2, [r7, #8]
 800970a:	69fb      	ldr	r3, [r7, #28]
 800970c:	4413      	add	r3, r2
 800970e:	7819      	ldrb	r1, [r3, #0]
 8009710:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009712:	69fb      	ldr	r3, [r7, #28]
 8009714:	4413      	add	r3, r2
 8009716:	3334      	adds	r3, #52	; 0x34
 8009718:	460a      	mov	r2, r1
 800971a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800971c:	68ba      	ldr	r2, [r7, #8]
 800971e:	69fb      	ldr	r3, [r7, #28]
 8009720:	4413      	add	r3, r2
 8009722:	781b      	ldrb	r3, [r3, #0]
 8009724:	2b00      	cmp	r3, #0
 8009726:	d006      	beq.n	8009736 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009728:	69fb      	ldr	r3, [r7, #28]
 800972a:	3301      	adds	r3, #1
 800972c:	61fb      	str	r3, [r7, #28]
 800972e:	69fb      	ldr	r3, [r7, #28]
 8009730:	2b0f      	cmp	r3, #15
 8009732:	d9e9      	bls.n	8009708 <prvInitialiseNewTask+0x64>
 8009734:	e000      	b.n	8009738 <prvInitialiseNewTask+0x94>
			{
				break;
 8009736:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800973a:	2200      	movs	r2, #0
 800973c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009740:	e003      	b.n	800974a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009744:	2200      	movs	r2, #0
 8009746:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800974a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800974c:	2b37      	cmp	r3, #55	; 0x37
 800974e:	d901      	bls.n	8009754 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009750:	2337      	movs	r3, #55	; 0x37
 8009752:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009756:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009758:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800975a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800975c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800975e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009762:	2200      	movs	r2, #0
 8009764:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009768:	3304      	adds	r3, #4
 800976a:	4618      	mov	r0, r3
 800976c:	f7ff f884 	bl	8008878 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009772:	3318      	adds	r3, #24
 8009774:	4618      	mov	r0, r3
 8009776:	f7ff f87f 	bl	8008878 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800977a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800977c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800977e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009782:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009788:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800978a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800978c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800978e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009792:	2200      	movs	r2, #0
 8009794:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009798:	2200      	movs	r2, #0
 800979a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800979e:	683a      	ldr	r2, [r7, #0]
 80097a0:	68f9      	ldr	r1, [r7, #12]
 80097a2:	69b8      	ldr	r0, [r7, #24]
 80097a4:	f001 f9fe 	bl	800aba4 <pxPortInitialiseStack>
 80097a8:	4602      	mov	r2, r0
 80097aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097ac:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80097ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d002      	beq.n	80097ba <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80097b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80097b8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80097ba:	bf00      	nop
 80097bc:	3720      	adds	r7, #32
 80097be:	46bd      	mov	sp, r7
 80097c0:	bd80      	pop	{r7, pc}
	...

080097c4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80097c4:	b580      	push	{r7, lr}
 80097c6:	b082      	sub	sp, #8
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80097cc:	f001 fb1a 	bl	800ae04 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80097d0:	4b2d      	ldr	r3, [pc, #180]	; (8009888 <prvAddNewTaskToReadyList+0xc4>)
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	3301      	adds	r3, #1
 80097d6:	4a2c      	ldr	r2, [pc, #176]	; (8009888 <prvAddNewTaskToReadyList+0xc4>)
 80097d8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80097da:	4b2c      	ldr	r3, [pc, #176]	; (800988c <prvAddNewTaskToReadyList+0xc8>)
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d109      	bne.n	80097f6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80097e2:	4a2a      	ldr	r2, [pc, #168]	; (800988c <prvAddNewTaskToReadyList+0xc8>)
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80097e8:	4b27      	ldr	r3, [pc, #156]	; (8009888 <prvAddNewTaskToReadyList+0xc4>)
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	2b01      	cmp	r3, #1
 80097ee:	d110      	bne.n	8009812 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80097f0:	f000 fcb4 	bl	800a15c <prvInitialiseTaskLists>
 80097f4:	e00d      	b.n	8009812 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80097f6:	4b26      	ldr	r3, [pc, #152]	; (8009890 <prvAddNewTaskToReadyList+0xcc>)
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d109      	bne.n	8009812 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80097fe:	4b23      	ldr	r3, [pc, #140]	; (800988c <prvAddNewTaskToReadyList+0xc8>)
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009808:	429a      	cmp	r2, r3
 800980a:	d802      	bhi.n	8009812 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800980c:	4a1f      	ldr	r2, [pc, #124]	; (800988c <prvAddNewTaskToReadyList+0xc8>)
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009812:	4b20      	ldr	r3, [pc, #128]	; (8009894 <prvAddNewTaskToReadyList+0xd0>)
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	3301      	adds	r3, #1
 8009818:	4a1e      	ldr	r2, [pc, #120]	; (8009894 <prvAddNewTaskToReadyList+0xd0>)
 800981a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800981c:	4b1d      	ldr	r3, [pc, #116]	; (8009894 <prvAddNewTaskToReadyList+0xd0>)
 800981e:	681a      	ldr	r2, [r3, #0]
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009828:	4b1b      	ldr	r3, [pc, #108]	; (8009898 <prvAddNewTaskToReadyList+0xd4>)
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	429a      	cmp	r2, r3
 800982e:	d903      	bls.n	8009838 <prvAddNewTaskToReadyList+0x74>
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009834:	4a18      	ldr	r2, [pc, #96]	; (8009898 <prvAddNewTaskToReadyList+0xd4>)
 8009836:	6013      	str	r3, [r2, #0]
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800983c:	4613      	mov	r3, r2
 800983e:	009b      	lsls	r3, r3, #2
 8009840:	4413      	add	r3, r2
 8009842:	009b      	lsls	r3, r3, #2
 8009844:	4a15      	ldr	r2, [pc, #84]	; (800989c <prvAddNewTaskToReadyList+0xd8>)
 8009846:	441a      	add	r2, r3
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	3304      	adds	r3, #4
 800984c:	4619      	mov	r1, r3
 800984e:	4610      	mov	r0, r2
 8009850:	f7ff f81f 	bl	8008892 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009854:	f001 fb06 	bl	800ae64 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009858:	4b0d      	ldr	r3, [pc, #52]	; (8009890 <prvAddNewTaskToReadyList+0xcc>)
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	2b00      	cmp	r3, #0
 800985e:	d00e      	beq.n	800987e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009860:	4b0a      	ldr	r3, [pc, #40]	; (800988c <prvAddNewTaskToReadyList+0xc8>)
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800986a:	429a      	cmp	r2, r3
 800986c:	d207      	bcs.n	800987e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800986e:	4b0c      	ldr	r3, [pc, #48]	; (80098a0 <prvAddNewTaskToReadyList+0xdc>)
 8009870:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009874:	601a      	str	r2, [r3, #0]
 8009876:	f3bf 8f4f 	dsb	sy
 800987a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800987e:	bf00      	nop
 8009880:	3708      	adds	r7, #8
 8009882:	46bd      	mov	sp, r7
 8009884:	bd80      	pop	{r7, pc}
 8009886:	bf00      	nop
 8009888:	20005a6c 	.word	0x20005a6c
 800988c:	20005598 	.word	0x20005598
 8009890:	20005a78 	.word	0x20005a78
 8009894:	20005a88 	.word	0x20005a88
 8009898:	20005a74 	.word	0x20005a74
 800989c:	2000559c 	.word	0x2000559c
 80098a0:	e000ed04 	.word	0xe000ed04

080098a4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80098a4:	b580      	push	{r7, lr}
 80098a6:	b084      	sub	sp, #16
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80098ac:	2300      	movs	r3, #0
 80098ae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d017      	beq.n	80098e6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80098b6:	4b13      	ldr	r3, [pc, #76]	; (8009904 <vTaskDelay+0x60>)
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d00a      	beq.n	80098d4 <vTaskDelay+0x30>
	__asm volatile
 80098be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098c2:	f383 8811 	msr	BASEPRI, r3
 80098c6:	f3bf 8f6f 	isb	sy
 80098ca:	f3bf 8f4f 	dsb	sy
 80098ce:	60bb      	str	r3, [r7, #8]
}
 80098d0:	bf00      	nop
 80098d2:	e7fe      	b.n	80098d2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80098d4:	f000 f880 	bl	80099d8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80098d8:	2100      	movs	r1, #0
 80098da:	6878      	ldr	r0, [r7, #4]
 80098dc:	f000 fda0 	bl	800a420 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80098e0:	f000 f888 	bl	80099f4 <xTaskResumeAll>
 80098e4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d107      	bne.n	80098fc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80098ec:	4b06      	ldr	r3, [pc, #24]	; (8009908 <vTaskDelay+0x64>)
 80098ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80098f2:	601a      	str	r2, [r3, #0]
 80098f4:	f3bf 8f4f 	dsb	sy
 80098f8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80098fc:	bf00      	nop
 80098fe:	3710      	adds	r7, #16
 8009900:	46bd      	mov	sp, r7
 8009902:	bd80      	pop	{r7, pc}
 8009904:	20005a94 	.word	0x20005a94
 8009908:	e000ed04 	.word	0xe000ed04

0800990c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800990c:	b580      	push	{r7, lr}
 800990e:	b08a      	sub	sp, #40	; 0x28
 8009910:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009912:	2300      	movs	r3, #0
 8009914:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009916:	2300      	movs	r3, #0
 8009918:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800991a:	463a      	mov	r2, r7
 800991c:	1d39      	adds	r1, r7, #4
 800991e:	f107 0308 	add.w	r3, r7, #8
 8009922:	4618      	mov	r0, r3
 8009924:	f7fe fce8 	bl	80082f8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009928:	6839      	ldr	r1, [r7, #0]
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	68ba      	ldr	r2, [r7, #8]
 800992e:	9202      	str	r2, [sp, #8]
 8009930:	9301      	str	r3, [sp, #4]
 8009932:	2300      	movs	r3, #0
 8009934:	9300      	str	r3, [sp, #0]
 8009936:	2300      	movs	r3, #0
 8009938:	460a      	mov	r2, r1
 800993a:	4921      	ldr	r1, [pc, #132]	; (80099c0 <vTaskStartScheduler+0xb4>)
 800993c:	4821      	ldr	r0, [pc, #132]	; (80099c4 <vTaskStartScheduler+0xb8>)
 800993e:	f7ff fe0f 	bl	8009560 <xTaskCreateStatic>
 8009942:	4603      	mov	r3, r0
 8009944:	4a20      	ldr	r2, [pc, #128]	; (80099c8 <vTaskStartScheduler+0xbc>)
 8009946:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009948:	4b1f      	ldr	r3, [pc, #124]	; (80099c8 <vTaskStartScheduler+0xbc>)
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	2b00      	cmp	r3, #0
 800994e:	d002      	beq.n	8009956 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009950:	2301      	movs	r3, #1
 8009952:	617b      	str	r3, [r7, #20]
 8009954:	e001      	b.n	800995a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009956:	2300      	movs	r3, #0
 8009958:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800995a:	697b      	ldr	r3, [r7, #20]
 800995c:	2b01      	cmp	r3, #1
 800995e:	d102      	bne.n	8009966 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009960:	f000 fdb2 	bl	800a4c8 <xTimerCreateTimerTask>
 8009964:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009966:	697b      	ldr	r3, [r7, #20]
 8009968:	2b01      	cmp	r3, #1
 800996a:	d116      	bne.n	800999a <vTaskStartScheduler+0x8e>
	__asm volatile
 800996c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009970:	f383 8811 	msr	BASEPRI, r3
 8009974:	f3bf 8f6f 	isb	sy
 8009978:	f3bf 8f4f 	dsb	sy
 800997c:	613b      	str	r3, [r7, #16]
}
 800997e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009980:	4b12      	ldr	r3, [pc, #72]	; (80099cc <vTaskStartScheduler+0xc0>)
 8009982:	f04f 32ff 	mov.w	r2, #4294967295
 8009986:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009988:	4b11      	ldr	r3, [pc, #68]	; (80099d0 <vTaskStartScheduler+0xc4>)
 800998a:	2201      	movs	r2, #1
 800998c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800998e:	4b11      	ldr	r3, [pc, #68]	; (80099d4 <vTaskStartScheduler+0xc8>)
 8009990:	2200      	movs	r2, #0
 8009992:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009994:	f001 f994 	bl	800acc0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009998:	e00e      	b.n	80099b8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800999a:	697b      	ldr	r3, [r7, #20]
 800999c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099a0:	d10a      	bne.n	80099b8 <vTaskStartScheduler+0xac>
	__asm volatile
 80099a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099a6:	f383 8811 	msr	BASEPRI, r3
 80099aa:	f3bf 8f6f 	isb	sy
 80099ae:	f3bf 8f4f 	dsb	sy
 80099b2:	60fb      	str	r3, [r7, #12]
}
 80099b4:	bf00      	nop
 80099b6:	e7fe      	b.n	80099b6 <vTaskStartScheduler+0xaa>
}
 80099b8:	bf00      	nop
 80099ba:	3718      	adds	r7, #24
 80099bc:	46bd      	mov	sp, r7
 80099be:	bd80      	pop	{r7, pc}
 80099c0:	0800b4e4 	.word	0x0800b4e4
 80099c4:	0800a12d 	.word	0x0800a12d
 80099c8:	20005a90 	.word	0x20005a90
 80099cc:	20005a8c 	.word	0x20005a8c
 80099d0:	20005a78 	.word	0x20005a78
 80099d4:	20005a70 	.word	0x20005a70

080099d8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80099d8:	b480      	push	{r7}
 80099da:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80099dc:	4b04      	ldr	r3, [pc, #16]	; (80099f0 <vTaskSuspendAll+0x18>)
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	3301      	adds	r3, #1
 80099e2:	4a03      	ldr	r2, [pc, #12]	; (80099f0 <vTaskSuspendAll+0x18>)
 80099e4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80099e6:	bf00      	nop
 80099e8:	46bd      	mov	sp, r7
 80099ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ee:	4770      	bx	lr
 80099f0:	20005a94 	.word	0x20005a94

080099f4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80099f4:	b580      	push	{r7, lr}
 80099f6:	b084      	sub	sp, #16
 80099f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80099fa:	2300      	movs	r3, #0
 80099fc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80099fe:	2300      	movs	r3, #0
 8009a00:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009a02:	4b42      	ldr	r3, [pc, #264]	; (8009b0c <xTaskResumeAll+0x118>)
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d10a      	bne.n	8009a20 <xTaskResumeAll+0x2c>
	__asm volatile
 8009a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a0e:	f383 8811 	msr	BASEPRI, r3
 8009a12:	f3bf 8f6f 	isb	sy
 8009a16:	f3bf 8f4f 	dsb	sy
 8009a1a:	603b      	str	r3, [r7, #0]
}
 8009a1c:	bf00      	nop
 8009a1e:	e7fe      	b.n	8009a1e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009a20:	f001 f9f0 	bl	800ae04 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009a24:	4b39      	ldr	r3, [pc, #228]	; (8009b0c <xTaskResumeAll+0x118>)
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	3b01      	subs	r3, #1
 8009a2a:	4a38      	ldr	r2, [pc, #224]	; (8009b0c <xTaskResumeAll+0x118>)
 8009a2c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009a2e:	4b37      	ldr	r3, [pc, #220]	; (8009b0c <xTaskResumeAll+0x118>)
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d162      	bne.n	8009afc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009a36:	4b36      	ldr	r3, [pc, #216]	; (8009b10 <xTaskResumeAll+0x11c>)
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d05e      	beq.n	8009afc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009a3e:	e02f      	b.n	8009aa0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a40:	4b34      	ldr	r3, [pc, #208]	; (8009b14 <xTaskResumeAll+0x120>)
 8009a42:	68db      	ldr	r3, [r3, #12]
 8009a44:	68db      	ldr	r3, [r3, #12]
 8009a46:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	3318      	adds	r3, #24
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	f7fe ff7d 	bl	800894c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	3304      	adds	r3, #4
 8009a56:	4618      	mov	r0, r3
 8009a58:	f7fe ff78 	bl	800894c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a60:	4b2d      	ldr	r3, [pc, #180]	; (8009b18 <xTaskResumeAll+0x124>)
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	429a      	cmp	r2, r3
 8009a66:	d903      	bls.n	8009a70 <xTaskResumeAll+0x7c>
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a6c:	4a2a      	ldr	r2, [pc, #168]	; (8009b18 <xTaskResumeAll+0x124>)
 8009a6e:	6013      	str	r3, [r2, #0]
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a74:	4613      	mov	r3, r2
 8009a76:	009b      	lsls	r3, r3, #2
 8009a78:	4413      	add	r3, r2
 8009a7a:	009b      	lsls	r3, r3, #2
 8009a7c:	4a27      	ldr	r2, [pc, #156]	; (8009b1c <xTaskResumeAll+0x128>)
 8009a7e:	441a      	add	r2, r3
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	3304      	adds	r3, #4
 8009a84:	4619      	mov	r1, r3
 8009a86:	4610      	mov	r0, r2
 8009a88:	f7fe ff03 	bl	8008892 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a90:	4b23      	ldr	r3, [pc, #140]	; (8009b20 <xTaskResumeAll+0x12c>)
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a96:	429a      	cmp	r2, r3
 8009a98:	d302      	bcc.n	8009aa0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8009a9a:	4b22      	ldr	r3, [pc, #136]	; (8009b24 <xTaskResumeAll+0x130>)
 8009a9c:	2201      	movs	r2, #1
 8009a9e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009aa0:	4b1c      	ldr	r3, [pc, #112]	; (8009b14 <xTaskResumeAll+0x120>)
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d1cb      	bne.n	8009a40 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d001      	beq.n	8009ab2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009aae:	f000 fbf3 	bl	800a298 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8009ab2:	4b1d      	ldr	r3, [pc, #116]	; (8009b28 <xTaskResumeAll+0x134>)
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d010      	beq.n	8009ae0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009abe:	f000 f847 	bl	8009b50 <xTaskIncrementTick>
 8009ac2:	4603      	mov	r3, r0
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d002      	beq.n	8009ace <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009ac8:	4b16      	ldr	r3, [pc, #88]	; (8009b24 <xTaskResumeAll+0x130>)
 8009aca:	2201      	movs	r2, #1
 8009acc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	3b01      	subs	r3, #1
 8009ad2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d1f1      	bne.n	8009abe <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8009ada:	4b13      	ldr	r3, [pc, #76]	; (8009b28 <xTaskResumeAll+0x134>)
 8009adc:	2200      	movs	r2, #0
 8009ade:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009ae0:	4b10      	ldr	r3, [pc, #64]	; (8009b24 <xTaskResumeAll+0x130>)
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d009      	beq.n	8009afc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009ae8:	2301      	movs	r3, #1
 8009aea:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009aec:	4b0f      	ldr	r3, [pc, #60]	; (8009b2c <xTaskResumeAll+0x138>)
 8009aee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009af2:	601a      	str	r2, [r3, #0]
 8009af4:	f3bf 8f4f 	dsb	sy
 8009af8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009afc:	f001 f9b2 	bl	800ae64 <vPortExitCritical>

	return xAlreadyYielded;
 8009b00:	68bb      	ldr	r3, [r7, #8]
}
 8009b02:	4618      	mov	r0, r3
 8009b04:	3710      	adds	r7, #16
 8009b06:	46bd      	mov	sp, r7
 8009b08:	bd80      	pop	{r7, pc}
 8009b0a:	bf00      	nop
 8009b0c:	20005a94 	.word	0x20005a94
 8009b10:	20005a6c 	.word	0x20005a6c
 8009b14:	20005a2c 	.word	0x20005a2c
 8009b18:	20005a74 	.word	0x20005a74
 8009b1c:	2000559c 	.word	0x2000559c
 8009b20:	20005598 	.word	0x20005598
 8009b24:	20005a80 	.word	0x20005a80
 8009b28:	20005a7c 	.word	0x20005a7c
 8009b2c:	e000ed04 	.word	0xe000ed04

08009b30 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009b30:	b480      	push	{r7}
 8009b32:	b083      	sub	sp, #12
 8009b34:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009b36:	4b05      	ldr	r3, [pc, #20]	; (8009b4c <xTaskGetTickCount+0x1c>)
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009b3c:	687b      	ldr	r3, [r7, #4]
}
 8009b3e:	4618      	mov	r0, r3
 8009b40:	370c      	adds	r7, #12
 8009b42:	46bd      	mov	sp, r7
 8009b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b48:	4770      	bx	lr
 8009b4a:	bf00      	nop
 8009b4c:	20005a70 	.word	0x20005a70

08009b50 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009b50:	b580      	push	{r7, lr}
 8009b52:	b086      	sub	sp, #24
 8009b54:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009b56:	2300      	movs	r3, #0
 8009b58:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009b5a:	4b4f      	ldr	r3, [pc, #316]	; (8009c98 <xTaskIncrementTick+0x148>)
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	f040 8089 	bne.w	8009c76 <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009b64:	4b4d      	ldr	r3, [pc, #308]	; (8009c9c <xTaskIncrementTick+0x14c>)
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	3301      	adds	r3, #1
 8009b6a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009b6c:	4a4b      	ldr	r2, [pc, #300]	; (8009c9c <xTaskIncrementTick+0x14c>)
 8009b6e:	693b      	ldr	r3, [r7, #16]
 8009b70:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009b72:	693b      	ldr	r3, [r7, #16]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d120      	bne.n	8009bba <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009b78:	4b49      	ldr	r3, [pc, #292]	; (8009ca0 <xTaskIncrementTick+0x150>)
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d00a      	beq.n	8009b98 <xTaskIncrementTick+0x48>
	__asm volatile
 8009b82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b86:	f383 8811 	msr	BASEPRI, r3
 8009b8a:	f3bf 8f6f 	isb	sy
 8009b8e:	f3bf 8f4f 	dsb	sy
 8009b92:	603b      	str	r3, [r7, #0]
}
 8009b94:	bf00      	nop
 8009b96:	e7fe      	b.n	8009b96 <xTaskIncrementTick+0x46>
 8009b98:	4b41      	ldr	r3, [pc, #260]	; (8009ca0 <xTaskIncrementTick+0x150>)
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	60fb      	str	r3, [r7, #12]
 8009b9e:	4b41      	ldr	r3, [pc, #260]	; (8009ca4 <xTaskIncrementTick+0x154>)
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	4a3f      	ldr	r2, [pc, #252]	; (8009ca0 <xTaskIncrementTick+0x150>)
 8009ba4:	6013      	str	r3, [r2, #0]
 8009ba6:	4a3f      	ldr	r2, [pc, #252]	; (8009ca4 <xTaskIncrementTick+0x154>)
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	6013      	str	r3, [r2, #0]
 8009bac:	4b3e      	ldr	r3, [pc, #248]	; (8009ca8 <xTaskIncrementTick+0x158>)
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	3301      	adds	r3, #1
 8009bb2:	4a3d      	ldr	r2, [pc, #244]	; (8009ca8 <xTaskIncrementTick+0x158>)
 8009bb4:	6013      	str	r3, [r2, #0]
 8009bb6:	f000 fb6f 	bl	800a298 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009bba:	4b3c      	ldr	r3, [pc, #240]	; (8009cac <xTaskIncrementTick+0x15c>)
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	693a      	ldr	r2, [r7, #16]
 8009bc0:	429a      	cmp	r2, r3
 8009bc2:	d349      	bcc.n	8009c58 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009bc4:	4b36      	ldr	r3, [pc, #216]	; (8009ca0 <xTaskIncrementTick+0x150>)
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d104      	bne.n	8009bd8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009bce:	4b37      	ldr	r3, [pc, #220]	; (8009cac <xTaskIncrementTick+0x15c>)
 8009bd0:	f04f 32ff 	mov.w	r2, #4294967295
 8009bd4:	601a      	str	r2, [r3, #0]
					break;
 8009bd6:	e03f      	b.n	8009c58 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009bd8:	4b31      	ldr	r3, [pc, #196]	; (8009ca0 <xTaskIncrementTick+0x150>)
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	68db      	ldr	r3, [r3, #12]
 8009bde:	68db      	ldr	r3, [r3, #12]
 8009be0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009be2:	68bb      	ldr	r3, [r7, #8]
 8009be4:	685b      	ldr	r3, [r3, #4]
 8009be6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009be8:	693a      	ldr	r2, [r7, #16]
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	429a      	cmp	r2, r3
 8009bee:	d203      	bcs.n	8009bf8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009bf0:	4a2e      	ldr	r2, [pc, #184]	; (8009cac <xTaskIncrementTick+0x15c>)
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009bf6:	e02f      	b.n	8009c58 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009bf8:	68bb      	ldr	r3, [r7, #8]
 8009bfa:	3304      	adds	r3, #4
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	f7fe fea5 	bl	800894c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009c02:	68bb      	ldr	r3, [r7, #8]
 8009c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d004      	beq.n	8009c14 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009c0a:	68bb      	ldr	r3, [r7, #8]
 8009c0c:	3318      	adds	r3, #24
 8009c0e:	4618      	mov	r0, r3
 8009c10:	f7fe fe9c 	bl	800894c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009c14:	68bb      	ldr	r3, [r7, #8]
 8009c16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c18:	4b25      	ldr	r3, [pc, #148]	; (8009cb0 <xTaskIncrementTick+0x160>)
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	429a      	cmp	r2, r3
 8009c1e:	d903      	bls.n	8009c28 <xTaskIncrementTick+0xd8>
 8009c20:	68bb      	ldr	r3, [r7, #8]
 8009c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c24:	4a22      	ldr	r2, [pc, #136]	; (8009cb0 <xTaskIncrementTick+0x160>)
 8009c26:	6013      	str	r3, [r2, #0]
 8009c28:	68bb      	ldr	r3, [r7, #8]
 8009c2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c2c:	4613      	mov	r3, r2
 8009c2e:	009b      	lsls	r3, r3, #2
 8009c30:	4413      	add	r3, r2
 8009c32:	009b      	lsls	r3, r3, #2
 8009c34:	4a1f      	ldr	r2, [pc, #124]	; (8009cb4 <xTaskIncrementTick+0x164>)
 8009c36:	441a      	add	r2, r3
 8009c38:	68bb      	ldr	r3, [r7, #8]
 8009c3a:	3304      	adds	r3, #4
 8009c3c:	4619      	mov	r1, r3
 8009c3e:	4610      	mov	r0, r2
 8009c40:	f7fe fe27 	bl	8008892 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009c44:	68bb      	ldr	r3, [r7, #8]
 8009c46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c48:	4b1b      	ldr	r3, [pc, #108]	; (8009cb8 <xTaskIncrementTick+0x168>)
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c4e:	429a      	cmp	r2, r3
 8009c50:	d3b8      	bcc.n	8009bc4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009c52:	2301      	movs	r3, #1
 8009c54:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009c56:	e7b5      	b.n	8009bc4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009c58:	4b17      	ldr	r3, [pc, #92]	; (8009cb8 <xTaskIncrementTick+0x168>)
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c5e:	4915      	ldr	r1, [pc, #84]	; (8009cb4 <xTaskIncrementTick+0x164>)
 8009c60:	4613      	mov	r3, r2
 8009c62:	009b      	lsls	r3, r3, #2
 8009c64:	4413      	add	r3, r2
 8009c66:	009b      	lsls	r3, r3, #2
 8009c68:	440b      	add	r3, r1
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	2b01      	cmp	r3, #1
 8009c6e:	d907      	bls.n	8009c80 <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 8009c70:	2301      	movs	r3, #1
 8009c72:	617b      	str	r3, [r7, #20]
 8009c74:	e004      	b.n	8009c80 <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8009c76:	4b11      	ldr	r3, [pc, #68]	; (8009cbc <xTaskIncrementTick+0x16c>)
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	3301      	adds	r3, #1
 8009c7c:	4a0f      	ldr	r2, [pc, #60]	; (8009cbc <xTaskIncrementTick+0x16c>)
 8009c7e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8009c80:	4b0f      	ldr	r3, [pc, #60]	; (8009cc0 <xTaskIncrementTick+0x170>)
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d001      	beq.n	8009c8c <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 8009c88:	2301      	movs	r3, #1
 8009c8a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009c8c:	697b      	ldr	r3, [r7, #20]
}
 8009c8e:	4618      	mov	r0, r3
 8009c90:	3718      	adds	r7, #24
 8009c92:	46bd      	mov	sp, r7
 8009c94:	bd80      	pop	{r7, pc}
 8009c96:	bf00      	nop
 8009c98:	20005a94 	.word	0x20005a94
 8009c9c:	20005a70 	.word	0x20005a70
 8009ca0:	20005a24 	.word	0x20005a24
 8009ca4:	20005a28 	.word	0x20005a28
 8009ca8:	20005a84 	.word	0x20005a84
 8009cac:	20005a8c 	.word	0x20005a8c
 8009cb0:	20005a74 	.word	0x20005a74
 8009cb4:	2000559c 	.word	0x2000559c
 8009cb8:	20005598 	.word	0x20005598
 8009cbc:	20005a7c 	.word	0x20005a7c
 8009cc0:	20005a80 	.word	0x20005a80

08009cc4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009cc4:	b480      	push	{r7}
 8009cc6:	b085      	sub	sp, #20
 8009cc8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009cca:	4b28      	ldr	r3, [pc, #160]	; (8009d6c <vTaskSwitchContext+0xa8>)
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d003      	beq.n	8009cda <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009cd2:	4b27      	ldr	r3, [pc, #156]	; (8009d70 <vTaskSwitchContext+0xac>)
 8009cd4:	2201      	movs	r2, #1
 8009cd6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009cd8:	e041      	b.n	8009d5e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8009cda:	4b25      	ldr	r3, [pc, #148]	; (8009d70 <vTaskSwitchContext+0xac>)
 8009cdc:	2200      	movs	r2, #0
 8009cde:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ce0:	4b24      	ldr	r3, [pc, #144]	; (8009d74 <vTaskSwitchContext+0xb0>)
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	60fb      	str	r3, [r7, #12]
 8009ce6:	e010      	b.n	8009d0a <vTaskSwitchContext+0x46>
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d10a      	bne.n	8009d04 <vTaskSwitchContext+0x40>
	__asm volatile
 8009cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cf2:	f383 8811 	msr	BASEPRI, r3
 8009cf6:	f3bf 8f6f 	isb	sy
 8009cfa:	f3bf 8f4f 	dsb	sy
 8009cfe:	607b      	str	r3, [r7, #4]
}
 8009d00:	bf00      	nop
 8009d02:	e7fe      	b.n	8009d02 <vTaskSwitchContext+0x3e>
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	3b01      	subs	r3, #1
 8009d08:	60fb      	str	r3, [r7, #12]
 8009d0a:	491b      	ldr	r1, [pc, #108]	; (8009d78 <vTaskSwitchContext+0xb4>)
 8009d0c:	68fa      	ldr	r2, [r7, #12]
 8009d0e:	4613      	mov	r3, r2
 8009d10:	009b      	lsls	r3, r3, #2
 8009d12:	4413      	add	r3, r2
 8009d14:	009b      	lsls	r3, r3, #2
 8009d16:	440b      	add	r3, r1
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d0e4      	beq.n	8009ce8 <vTaskSwitchContext+0x24>
 8009d1e:	68fa      	ldr	r2, [r7, #12]
 8009d20:	4613      	mov	r3, r2
 8009d22:	009b      	lsls	r3, r3, #2
 8009d24:	4413      	add	r3, r2
 8009d26:	009b      	lsls	r3, r3, #2
 8009d28:	4a13      	ldr	r2, [pc, #76]	; (8009d78 <vTaskSwitchContext+0xb4>)
 8009d2a:	4413      	add	r3, r2
 8009d2c:	60bb      	str	r3, [r7, #8]
 8009d2e:	68bb      	ldr	r3, [r7, #8]
 8009d30:	685b      	ldr	r3, [r3, #4]
 8009d32:	685a      	ldr	r2, [r3, #4]
 8009d34:	68bb      	ldr	r3, [r7, #8]
 8009d36:	605a      	str	r2, [r3, #4]
 8009d38:	68bb      	ldr	r3, [r7, #8]
 8009d3a:	685a      	ldr	r2, [r3, #4]
 8009d3c:	68bb      	ldr	r3, [r7, #8]
 8009d3e:	3308      	adds	r3, #8
 8009d40:	429a      	cmp	r2, r3
 8009d42:	d104      	bne.n	8009d4e <vTaskSwitchContext+0x8a>
 8009d44:	68bb      	ldr	r3, [r7, #8]
 8009d46:	685b      	ldr	r3, [r3, #4]
 8009d48:	685a      	ldr	r2, [r3, #4]
 8009d4a:	68bb      	ldr	r3, [r7, #8]
 8009d4c:	605a      	str	r2, [r3, #4]
 8009d4e:	68bb      	ldr	r3, [r7, #8]
 8009d50:	685b      	ldr	r3, [r3, #4]
 8009d52:	68db      	ldr	r3, [r3, #12]
 8009d54:	4a09      	ldr	r2, [pc, #36]	; (8009d7c <vTaskSwitchContext+0xb8>)
 8009d56:	6013      	str	r3, [r2, #0]
 8009d58:	4a06      	ldr	r2, [pc, #24]	; (8009d74 <vTaskSwitchContext+0xb0>)
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	6013      	str	r3, [r2, #0]
}
 8009d5e:	bf00      	nop
 8009d60:	3714      	adds	r7, #20
 8009d62:	46bd      	mov	sp, r7
 8009d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d68:	4770      	bx	lr
 8009d6a:	bf00      	nop
 8009d6c:	20005a94 	.word	0x20005a94
 8009d70:	20005a80 	.word	0x20005a80
 8009d74:	20005a74 	.word	0x20005a74
 8009d78:	2000559c 	.word	0x2000559c
 8009d7c:	20005598 	.word	0x20005598

08009d80 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009d80:	b580      	push	{r7, lr}
 8009d82:	b084      	sub	sp, #16
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	6078      	str	r0, [r7, #4]
 8009d88:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d10a      	bne.n	8009da6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d94:	f383 8811 	msr	BASEPRI, r3
 8009d98:	f3bf 8f6f 	isb	sy
 8009d9c:	f3bf 8f4f 	dsb	sy
 8009da0:	60fb      	str	r3, [r7, #12]
}
 8009da2:	bf00      	nop
 8009da4:	e7fe      	b.n	8009da4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009da6:	4b07      	ldr	r3, [pc, #28]	; (8009dc4 <vTaskPlaceOnEventList+0x44>)
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	3318      	adds	r3, #24
 8009dac:	4619      	mov	r1, r3
 8009dae:	6878      	ldr	r0, [r7, #4]
 8009db0:	f7fe fd93 	bl	80088da <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009db4:	2101      	movs	r1, #1
 8009db6:	6838      	ldr	r0, [r7, #0]
 8009db8:	f000 fb32 	bl	800a420 <prvAddCurrentTaskToDelayedList>
}
 8009dbc:	bf00      	nop
 8009dbe:	3710      	adds	r7, #16
 8009dc0:	46bd      	mov	sp, r7
 8009dc2:	bd80      	pop	{r7, pc}
 8009dc4:	20005598 	.word	0x20005598

08009dc8 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b086      	sub	sp, #24
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	60f8      	str	r0, [r7, #12]
 8009dd0:	60b9      	str	r1, [r7, #8]
 8009dd2:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d10a      	bne.n	8009df0 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 8009dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dde:	f383 8811 	msr	BASEPRI, r3
 8009de2:	f3bf 8f6f 	isb	sy
 8009de6:	f3bf 8f4f 	dsb	sy
 8009dea:	617b      	str	r3, [r7, #20]
}
 8009dec:	bf00      	nop
 8009dee:	e7fe      	b.n	8009dee <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8009df0:	4b11      	ldr	r3, [pc, #68]	; (8009e38 <vTaskPlaceOnUnorderedEventList+0x70>)
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d10a      	bne.n	8009e0e <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8009df8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dfc:	f383 8811 	msr	BASEPRI, r3
 8009e00:	f3bf 8f6f 	isb	sy
 8009e04:	f3bf 8f4f 	dsb	sy
 8009e08:	613b      	str	r3, [r7, #16]
}
 8009e0a:	bf00      	nop
 8009e0c:	e7fe      	b.n	8009e0c <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8009e0e:	4b0b      	ldr	r3, [pc, #44]	; (8009e3c <vTaskPlaceOnUnorderedEventList+0x74>)
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	68ba      	ldr	r2, [r7, #8]
 8009e14:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8009e18:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009e1a:	4b08      	ldr	r3, [pc, #32]	; (8009e3c <vTaskPlaceOnUnorderedEventList+0x74>)
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	3318      	adds	r3, #24
 8009e20:	4619      	mov	r1, r3
 8009e22:	68f8      	ldr	r0, [r7, #12]
 8009e24:	f7fe fd35 	bl	8008892 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009e28:	2101      	movs	r1, #1
 8009e2a:	6878      	ldr	r0, [r7, #4]
 8009e2c:	f000 faf8 	bl	800a420 <prvAddCurrentTaskToDelayedList>
}
 8009e30:	bf00      	nop
 8009e32:	3718      	adds	r7, #24
 8009e34:	46bd      	mov	sp, r7
 8009e36:	bd80      	pop	{r7, pc}
 8009e38:	20005a94 	.word	0x20005a94
 8009e3c:	20005598 	.word	0x20005598

08009e40 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009e40:	b580      	push	{r7, lr}
 8009e42:	b086      	sub	sp, #24
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	60f8      	str	r0, [r7, #12]
 8009e48:	60b9      	str	r1, [r7, #8]
 8009e4a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d10a      	bne.n	8009e68 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8009e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e56:	f383 8811 	msr	BASEPRI, r3
 8009e5a:	f3bf 8f6f 	isb	sy
 8009e5e:	f3bf 8f4f 	dsb	sy
 8009e62:	617b      	str	r3, [r7, #20]
}
 8009e64:	bf00      	nop
 8009e66:	e7fe      	b.n	8009e66 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009e68:	4b0a      	ldr	r3, [pc, #40]	; (8009e94 <vTaskPlaceOnEventListRestricted+0x54>)
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	3318      	adds	r3, #24
 8009e6e:	4619      	mov	r1, r3
 8009e70:	68f8      	ldr	r0, [r7, #12]
 8009e72:	f7fe fd0e 	bl	8008892 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d002      	beq.n	8009e82 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8009e7c:	f04f 33ff 	mov.w	r3, #4294967295
 8009e80:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009e82:	6879      	ldr	r1, [r7, #4]
 8009e84:	68b8      	ldr	r0, [r7, #8]
 8009e86:	f000 facb 	bl	800a420 <prvAddCurrentTaskToDelayedList>
	}
 8009e8a:	bf00      	nop
 8009e8c:	3718      	adds	r7, #24
 8009e8e:	46bd      	mov	sp, r7
 8009e90:	bd80      	pop	{r7, pc}
 8009e92:	bf00      	nop
 8009e94:	20005598 	.word	0x20005598

08009e98 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009e98:	b580      	push	{r7, lr}
 8009e9a:	b086      	sub	sp, #24
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	68db      	ldr	r3, [r3, #12]
 8009ea4:	68db      	ldr	r3, [r3, #12]
 8009ea6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009ea8:	693b      	ldr	r3, [r7, #16]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d10a      	bne.n	8009ec4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8009eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eb2:	f383 8811 	msr	BASEPRI, r3
 8009eb6:	f3bf 8f6f 	isb	sy
 8009eba:	f3bf 8f4f 	dsb	sy
 8009ebe:	60fb      	str	r3, [r7, #12]
}
 8009ec0:	bf00      	nop
 8009ec2:	e7fe      	b.n	8009ec2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009ec4:	693b      	ldr	r3, [r7, #16]
 8009ec6:	3318      	adds	r3, #24
 8009ec8:	4618      	mov	r0, r3
 8009eca:	f7fe fd3f 	bl	800894c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009ece:	4b1e      	ldr	r3, [pc, #120]	; (8009f48 <xTaskRemoveFromEventList+0xb0>)
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d11d      	bne.n	8009f12 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009ed6:	693b      	ldr	r3, [r7, #16]
 8009ed8:	3304      	adds	r3, #4
 8009eda:	4618      	mov	r0, r3
 8009edc:	f7fe fd36 	bl	800894c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009ee0:	693b      	ldr	r3, [r7, #16]
 8009ee2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ee4:	4b19      	ldr	r3, [pc, #100]	; (8009f4c <xTaskRemoveFromEventList+0xb4>)
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	429a      	cmp	r2, r3
 8009eea:	d903      	bls.n	8009ef4 <xTaskRemoveFromEventList+0x5c>
 8009eec:	693b      	ldr	r3, [r7, #16]
 8009eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ef0:	4a16      	ldr	r2, [pc, #88]	; (8009f4c <xTaskRemoveFromEventList+0xb4>)
 8009ef2:	6013      	str	r3, [r2, #0]
 8009ef4:	693b      	ldr	r3, [r7, #16]
 8009ef6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ef8:	4613      	mov	r3, r2
 8009efa:	009b      	lsls	r3, r3, #2
 8009efc:	4413      	add	r3, r2
 8009efe:	009b      	lsls	r3, r3, #2
 8009f00:	4a13      	ldr	r2, [pc, #76]	; (8009f50 <xTaskRemoveFromEventList+0xb8>)
 8009f02:	441a      	add	r2, r3
 8009f04:	693b      	ldr	r3, [r7, #16]
 8009f06:	3304      	adds	r3, #4
 8009f08:	4619      	mov	r1, r3
 8009f0a:	4610      	mov	r0, r2
 8009f0c:	f7fe fcc1 	bl	8008892 <vListInsertEnd>
 8009f10:	e005      	b.n	8009f1e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009f12:	693b      	ldr	r3, [r7, #16]
 8009f14:	3318      	adds	r3, #24
 8009f16:	4619      	mov	r1, r3
 8009f18:	480e      	ldr	r0, [pc, #56]	; (8009f54 <xTaskRemoveFromEventList+0xbc>)
 8009f1a:	f7fe fcba 	bl	8008892 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009f1e:	693b      	ldr	r3, [r7, #16]
 8009f20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f22:	4b0d      	ldr	r3, [pc, #52]	; (8009f58 <xTaskRemoveFromEventList+0xc0>)
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f28:	429a      	cmp	r2, r3
 8009f2a:	d905      	bls.n	8009f38 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009f2c:	2301      	movs	r3, #1
 8009f2e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009f30:	4b0a      	ldr	r3, [pc, #40]	; (8009f5c <xTaskRemoveFromEventList+0xc4>)
 8009f32:	2201      	movs	r2, #1
 8009f34:	601a      	str	r2, [r3, #0]
 8009f36:	e001      	b.n	8009f3c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009f38:	2300      	movs	r3, #0
 8009f3a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009f3c:	697b      	ldr	r3, [r7, #20]
}
 8009f3e:	4618      	mov	r0, r3
 8009f40:	3718      	adds	r7, #24
 8009f42:	46bd      	mov	sp, r7
 8009f44:	bd80      	pop	{r7, pc}
 8009f46:	bf00      	nop
 8009f48:	20005a94 	.word	0x20005a94
 8009f4c:	20005a74 	.word	0x20005a74
 8009f50:	2000559c 	.word	0x2000559c
 8009f54:	20005a2c 	.word	0x20005a2c
 8009f58:	20005598 	.word	0x20005598
 8009f5c:	20005a80 	.word	0x20005a80

08009f60 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8009f60:	b580      	push	{r7, lr}
 8009f62:	b086      	sub	sp, #24
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	6078      	str	r0, [r7, #4]
 8009f68:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8009f6a:	4b29      	ldr	r3, [pc, #164]	; (800a010 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d10a      	bne.n	8009f88 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8009f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f76:	f383 8811 	msr	BASEPRI, r3
 8009f7a:	f3bf 8f6f 	isb	sy
 8009f7e:	f3bf 8f4f 	dsb	sy
 8009f82:	613b      	str	r3, [r7, #16]
}
 8009f84:	bf00      	nop
 8009f86:	e7fe      	b.n	8009f86 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8009f88:	683b      	ldr	r3, [r7, #0]
 8009f8a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	68db      	ldr	r3, [r3, #12]
 8009f96:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8009f98:	697b      	ldr	r3, [r7, #20]
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d10a      	bne.n	8009fb4 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 8009f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fa2:	f383 8811 	msr	BASEPRI, r3
 8009fa6:	f3bf 8f6f 	isb	sy
 8009faa:	f3bf 8f4f 	dsb	sy
 8009fae:	60fb      	str	r3, [r7, #12]
}
 8009fb0:	bf00      	nop
 8009fb2:	e7fe      	b.n	8009fb2 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8009fb4:	6878      	ldr	r0, [r7, #4]
 8009fb6:	f7fe fcc9 	bl	800894c <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009fba:	697b      	ldr	r3, [r7, #20]
 8009fbc:	3304      	adds	r3, #4
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	f7fe fcc4 	bl	800894c <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8009fc4:	697b      	ldr	r3, [r7, #20]
 8009fc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fc8:	4b12      	ldr	r3, [pc, #72]	; (800a014 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	429a      	cmp	r2, r3
 8009fce:	d903      	bls.n	8009fd8 <vTaskRemoveFromUnorderedEventList+0x78>
 8009fd0:	697b      	ldr	r3, [r7, #20]
 8009fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fd4:	4a0f      	ldr	r2, [pc, #60]	; (800a014 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8009fd6:	6013      	str	r3, [r2, #0]
 8009fd8:	697b      	ldr	r3, [r7, #20]
 8009fda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fdc:	4613      	mov	r3, r2
 8009fde:	009b      	lsls	r3, r3, #2
 8009fe0:	4413      	add	r3, r2
 8009fe2:	009b      	lsls	r3, r3, #2
 8009fe4:	4a0c      	ldr	r2, [pc, #48]	; (800a018 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8009fe6:	441a      	add	r2, r3
 8009fe8:	697b      	ldr	r3, [r7, #20]
 8009fea:	3304      	adds	r3, #4
 8009fec:	4619      	mov	r1, r3
 8009fee:	4610      	mov	r0, r2
 8009ff0:	f7fe fc4f 	bl	8008892 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009ff4:	697b      	ldr	r3, [r7, #20]
 8009ff6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ff8:	4b08      	ldr	r3, [pc, #32]	; (800a01c <vTaskRemoveFromUnorderedEventList+0xbc>)
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ffe:	429a      	cmp	r2, r3
 800a000:	d902      	bls.n	800a008 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 800a002:	4b07      	ldr	r3, [pc, #28]	; (800a020 <vTaskRemoveFromUnorderedEventList+0xc0>)
 800a004:	2201      	movs	r2, #1
 800a006:	601a      	str	r2, [r3, #0]
	}
}
 800a008:	bf00      	nop
 800a00a:	3718      	adds	r7, #24
 800a00c:	46bd      	mov	sp, r7
 800a00e:	bd80      	pop	{r7, pc}
 800a010:	20005a94 	.word	0x20005a94
 800a014:	20005a74 	.word	0x20005a74
 800a018:	2000559c 	.word	0x2000559c
 800a01c:	20005598 	.word	0x20005598
 800a020:	20005a80 	.word	0x20005a80

0800a024 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a024:	b480      	push	{r7}
 800a026:	b083      	sub	sp, #12
 800a028:	af00      	add	r7, sp, #0
 800a02a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a02c:	4b06      	ldr	r3, [pc, #24]	; (800a048 <vTaskInternalSetTimeOutState+0x24>)
 800a02e:	681a      	ldr	r2, [r3, #0]
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a034:	4b05      	ldr	r3, [pc, #20]	; (800a04c <vTaskInternalSetTimeOutState+0x28>)
 800a036:	681a      	ldr	r2, [r3, #0]
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	605a      	str	r2, [r3, #4]
}
 800a03c:	bf00      	nop
 800a03e:	370c      	adds	r7, #12
 800a040:	46bd      	mov	sp, r7
 800a042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a046:	4770      	bx	lr
 800a048:	20005a84 	.word	0x20005a84
 800a04c:	20005a70 	.word	0x20005a70

0800a050 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a050:	b580      	push	{r7, lr}
 800a052:	b088      	sub	sp, #32
 800a054:	af00      	add	r7, sp, #0
 800a056:	6078      	str	r0, [r7, #4]
 800a058:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d10a      	bne.n	800a076 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a060:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a064:	f383 8811 	msr	BASEPRI, r3
 800a068:	f3bf 8f6f 	isb	sy
 800a06c:	f3bf 8f4f 	dsb	sy
 800a070:	613b      	str	r3, [r7, #16]
}
 800a072:	bf00      	nop
 800a074:	e7fe      	b.n	800a074 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a076:	683b      	ldr	r3, [r7, #0]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d10a      	bne.n	800a092 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a07c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a080:	f383 8811 	msr	BASEPRI, r3
 800a084:	f3bf 8f6f 	isb	sy
 800a088:	f3bf 8f4f 	dsb	sy
 800a08c:	60fb      	str	r3, [r7, #12]
}
 800a08e:	bf00      	nop
 800a090:	e7fe      	b.n	800a090 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a092:	f000 feb7 	bl	800ae04 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a096:	4b1d      	ldr	r3, [pc, #116]	; (800a10c <xTaskCheckForTimeOut+0xbc>)
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	685b      	ldr	r3, [r3, #4]
 800a0a0:	69ba      	ldr	r2, [r7, #24]
 800a0a2:	1ad3      	subs	r3, r2, r3
 800a0a4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a0a6:	683b      	ldr	r3, [r7, #0]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0ae:	d102      	bne.n	800a0b6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a0b0:	2300      	movs	r3, #0
 800a0b2:	61fb      	str	r3, [r7, #28]
 800a0b4:	e023      	b.n	800a0fe <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	681a      	ldr	r2, [r3, #0]
 800a0ba:	4b15      	ldr	r3, [pc, #84]	; (800a110 <xTaskCheckForTimeOut+0xc0>)
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	429a      	cmp	r2, r3
 800a0c0:	d007      	beq.n	800a0d2 <xTaskCheckForTimeOut+0x82>
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	685b      	ldr	r3, [r3, #4]
 800a0c6:	69ba      	ldr	r2, [r7, #24]
 800a0c8:	429a      	cmp	r2, r3
 800a0ca:	d302      	bcc.n	800a0d2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a0cc:	2301      	movs	r3, #1
 800a0ce:	61fb      	str	r3, [r7, #28]
 800a0d0:	e015      	b.n	800a0fe <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a0d2:	683b      	ldr	r3, [r7, #0]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	697a      	ldr	r2, [r7, #20]
 800a0d8:	429a      	cmp	r2, r3
 800a0da:	d20b      	bcs.n	800a0f4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a0dc:	683b      	ldr	r3, [r7, #0]
 800a0de:	681a      	ldr	r2, [r3, #0]
 800a0e0:	697b      	ldr	r3, [r7, #20]
 800a0e2:	1ad2      	subs	r2, r2, r3
 800a0e4:	683b      	ldr	r3, [r7, #0]
 800a0e6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a0e8:	6878      	ldr	r0, [r7, #4]
 800a0ea:	f7ff ff9b 	bl	800a024 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a0ee:	2300      	movs	r3, #0
 800a0f0:	61fb      	str	r3, [r7, #28]
 800a0f2:	e004      	b.n	800a0fe <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a0f4:	683b      	ldr	r3, [r7, #0]
 800a0f6:	2200      	movs	r2, #0
 800a0f8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a0fa:	2301      	movs	r3, #1
 800a0fc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a0fe:	f000 feb1 	bl	800ae64 <vPortExitCritical>

	return xReturn;
 800a102:	69fb      	ldr	r3, [r7, #28]
}
 800a104:	4618      	mov	r0, r3
 800a106:	3720      	adds	r7, #32
 800a108:	46bd      	mov	sp, r7
 800a10a:	bd80      	pop	{r7, pc}
 800a10c:	20005a70 	.word	0x20005a70
 800a110:	20005a84 	.word	0x20005a84

0800a114 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a114:	b480      	push	{r7}
 800a116:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a118:	4b03      	ldr	r3, [pc, #12]	; (800a128 <vTaskMissedYield+0x14>)
 800a11a:	2201      	movs	r2, #1
 800a11c:	601a      	str	r2, [r3, #0]
}
 800a11e:	bf00      	nop
 800a120:	46bd      	mov	sp, r7
 800a122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a126:	4770      	bx	lr
 800a128:	20005a80 	.word	0x20005a80

0800a12c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a12c:	b580      	push	{r7, lr}
 800a12e:	b082      	sub	sp, #8
 800a130:	af00      	add	r7, sp, #0
 800a132:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a134:	f000 f852 	bl	800a1dc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a138:	4b06      	ldr	r3, [pc, #24]	; (800a154 <prvIdleTask+0x28>)
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	2b01      	cmp	r3, #1
 800a13e:	d9f9      	bls.n	800a134 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a140:	4b05      	ldr	r3, [pc, #20]	; (800a158 <prvIdleTask+0x2c>)
 800a142:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a146:	601a      	str	r2, [r3, #0]
 800a148:	f3bf 8f4f 	dsb	sy
 800a14c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a150:	e7f0      	b.n	800a134 <prvIdleTask+0x8>
 800a152:	bf00      	nop
 800a154:	2000559c 	.word	0x2000559c
 800a158:	e000ed04 	.word	0xe000ed04

0800a15c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a15c:	b580      	push	{r7, lr}
 800a15e:	b082      	sub	sp, #8
 800a160:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a162:	2300      	movs	r3, #0
 800a164:	607b      	str	r3, [r7, #4]
 800a166:	e00c      	b.n	800a182 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a168:	687a      	ldr	r2, [r7, #4]
 800a16a:	4613      	mov	r3, r2
 800a16c:	009b      	lsls	r3, r3, #2
 800a16e:	4413      	add	r3, r2
 800a170:	009b      	lsls	r3, r3, #2
 800a172:	4a12      	ldr	r2, [pc, #72]	; (800a1bc <prvInitialiseTaskLists+0x60>)
 800a174:	4413      	add	r3, r2
 800a176:	4618      	mov	r0, r3
 800a178:	f7fe fb5e 	bl	8008838 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	3301      	adds	r3, #1
 800a180:	607b      	str	r3, [r7, #4]
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	2b37      	cmp	r3, #55	; 0x37
 800a186:	d9ef      	bls.n	800a168 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a188:	480d      	ldr	r0, [pc, #52]	; (800a1c0 <prvInitialiseTaskLists+0x64>)
 800a18a:	f7fe fb55 	bl	8008838 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a18e:	480d      	ldr	r0, [pc, #52]	; (800a1c4 <prvInitialiseTaskLists+0x68>)
 800a190:	f7fe fb52 	bl	8008838 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a194:	480c      	ldr	r0, [pc, #48]	; (800a1c8 <prvInitialiseTaskLists+0x6c>)
 800a196:	f7fe fb4f 	bl	8008838 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a19a:	480c      	ldr	r0, [pc, #48]	; (800a1cc <prvInitialiseTaskLists+0x70>)
 800a19c:	f7fe fb4c 	bl	8008838 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a1a0:	480b      	ldr	r0, [pc, #44]	; (800a1d0 <prvInitialiseTaskLists+0x74>)
 800a1a2:	f7fe fb49 	bl	8008838 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a1a6:	4b0b      	ldr	r3, [pc, #44]	; (800a1d4 <prvInitialiseTaskLists+0x78>)
 800a1a8:	4a05      	ldr	r2, [pc, #20]	; (800a1c0 <prvInitialiseTaskLists+0x64>)
 800a1aa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a1ac:	4b0a      	ldr	r3, [pc, #40]	; (800a1d8 <prvInitialiseTaskLists+0x7c>)
 800a1ae:	4a05      	ldr	r2, [pc, #20]	; (800a1c4 <prvInitialiseTaskLists+0x68>)
 800a1b0:	601a      	str	r2, [r3, #0]
}
 800a1b2:	bf00      	nop
 800a1b4:	3708      	adds	r7, #8
 800a1b6:	46bd      	mov	sp, r7
 800a1b8:	bd80      	pop	{r7, pc}
 800a1ba:	bf00      	nop
 800a1bc:	2000559c 	.word	0x2000559c
 800a1c0:	200059fc 	.word	0x200059fc
 800a1c4:	20005a10 	.word	0x20005a10
 800a1c8:	20005a2c 	.word	0x20005a2c
 800a1cc:	20005a40 	.word	0x20005a40
 800a1d0:	20005a58 	.word	0x20005a58
 800a1d4:	20005a24 	.word	0x20005a24
 800a1d8:	20005a28 	.word	0x20005a28

0800a1dc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a1dc:	b580      	push	{r7, lr}
 800a1de:	b082      	sub	sp, #8
 800a1e0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a1e2:	e019      	b.n	800a218 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a1e4:	f000 fe0e 	bl	800ae04 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a1e8:	4b10      	ldr	r3, [pc, #64]	; (800a22c <prvCheckTasksWaitingTermination+0x50>)
 800a1ea:	68db      	ldr	r3, [r3, #12]
 800a1ec:	68db      	ldr	r3, [r3, #12]
 800a1ee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	3304      	adds	r3, #4
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	f7fe fba9 	bl	800894c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a1fa:	4b0d      	ldr	r3, [pc, #52]	; (800a230 <prvCheckTasksWaitingTermination+0x54>)
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	3b01      	subs	r3, #1
 800a200:	4a0b      	ldr	r2, [pc, #44]	; (800a230 <prvCheckTasksWaitingTermination+0x54>)
 800a202:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a204:	4b0b      	ldr	r3, [pc, #44]	; (800a234 <prvCheckTasksWaitingTermination+0x58>)
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	3b01      	subs	r3, #1
 800a20a:	4a0a      	ldr	r2, [pc, #40]	; (800a234 <prvCheckTasksWaitingTermination+0x58>)
 800a20c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a20e:	f000 fe29 	bl	800ae64 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a212:	6878      	ldr	r0, [r7, #4]
 800a214:	f000 f810 	bl	800a238 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a218:	4b06      	ldr	r3, [pc, #24]	; (800a234 <prvCheckTasksWaitingTermination+0x58>)
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d1e1      	bne.n	800a1e4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a220:	bf00      	nop
 800a222:	bf00      	nop
 800a224:	3708      	adds	r7, #8
 800a226:	46bd      	mov	sp, r7
 800a228:	bd80      	pop	{r7, pc}
 800a22a:	bf00      	nop
 800a22c:	20005a40 	.word	0x20005a40
 800a230:	20005a6c 	.word	0x20005a6c
 800a234:	20005a54 	.word	0x20005a54

0800a238 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a238:	b580      	push	{r7, lr}
 800a23a:	b084      	sub	sp, #16
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a246:	2b00      	cmp	r3, #0
 800a248:	d108      	bne.n	800a25c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a24e:	4618      	mov	r0, r3
 800a250:	f000 ffbe 	bl	800b1d0 <vPortFree>
				vPortFree( pxTCB );
 800a254:	6878      	ldr	r0, [r7, #4]
 800a256:	f000 ffbb 	bl	800b1d0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a25a:	e018      	b.n	800a28e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a262:	2b01      	cmp	r3, #1
 800a264:	d103      	bne.n	800a26e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800a266:	6878      	ldr	r0, [r7, #4]
 800a268:	f000 ffb2 	bl	800b1d0 <vPortFree>
	}
 800a26c:	e00f      	b.n	800a28e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a274:	2b02      	cmp	r3, #2
 800a276:	d00a      	beq.n	800a28e <prvDeleteTCB+0x56>
	__asm volatile
 800a278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a27c:	f383 8811 	msr	BASEPRI, r3
 800a280:	f3bf 8f6f 	isb	sy
 800a284:	f3bf 8f4f 	dsb	sy
 800a288:	60fb      	str	r3, [r7, #12]
}
 800a28a:	bf00      	nop
 800a28c:	e7fe      	b.n	800a28c <prvDeleteTCB+0x54>
	}
 800a28e:	bf00      	nop
 800a290:	3710      	adds	r7, #16
 800a292:	46bd      	mov	sp, r7
 800a294:	bd80      	pop	{r7, pc}
	...

0800a298 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a298:	b480      	push	{r7}
 800a29a:	b083      	sub	sp, #12
 800a29c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a29e:	4b0c      	ldr	r3, [pc, #48]	; (800a2d0 <prvResetNextTaskUnblockTime+0x38>)
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d104      	bne.n	800a2b2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a2a8:	4b0a      	ldr	r3, [pc, #40]	; (800a2d4 <prvResetNextTaskUnblockTime+0x3c>)
 800a2aa:	f04f 32ff 	mov.w	r2, #4294967295
 800a2ae:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a2b0:	e008      	b.n	800a2c4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a2b2:	4b07      	ldr	r3, [pc, #28]	; (800a2d0 <prvResetNextTaskUnblockTime+0x38>)
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	68db      	ldr	r3, [r3, #12]
 800a2b8:	68db      	ldr	r3, [r3, #12]
 800a2ba:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	685b      	ldr	r3, [r3, #4]
 800a2c0:	4a04      	ldr	r2, [pc, #16]	; (800a2d4 <prvResetNextTaskUnblockTime+0x3c>)
 800a2c2:	6013      	str	r3, [r2, #0]
}
 800a2c4:	bf00      	nop
 800a2c6:	370c      	adds	r7, #12
 800a2c8:	46bd      	mov	sp, r7
 800a2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ce:	4770      	bx	lr
 800a2d0:	20005a24 	.word	0x20005a24
 800a2d4:	20005a8c 	.word	0x20005a8c

0800a2d8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a2d8:	b480      	push	{r7}
 800a2da:	b083      	sub	sp, #12
 800a2dc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a2de:	4b0b      	ldr	r3, [pc, #44]	; (800a30c <xTaskGetSchedulerState+0x34>)
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d102      	bne.n	800a2ec <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a2e6:	2301      	movs	r3, #1
 800a2e8:	607b      	str	r3, [r7, #4]
 800a2ea:	e008      	b.n	800a2fe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a2ec:	4b08      	ldr	r3, [pc, #32]	; (800a310 <xTaskGetSchedulerState+0x38>)
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d102      	bne.n	800a2fa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a2f4:	2302      	movs	r3, #2
 800a2f6:	607b      	str	r3, [r7, #4]
 800a2f8:	e001      	b.n	800a2fe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a2fa:	2300      	movs	r3, #0
 800a2fc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a2fe:	687b      	ldr	r3, [r7, #4]
	}
 800a300:	4618      	mov	r0, r3
 800a302:	370c      	adds	r7, #12
 800a304:	46bd      	mov	sp, r7
 800a306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a30a:	4770      	bx	lr
 800a30c:	20005a78 	.word	0x20005a78
 800a310:	20005a94 	.word	0x20005a94

0800a314 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a314:	b580      	push	{r7, lr}
 800a316:	b086      	sub	sp, #24
 800a318:	af00      	add	r7, sp, #0
 800a31a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a320:	2300      	movs	r3, #0
 800a322:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	2b00      	cmp	r3, #0
 800a328:	d056      	beq.n	800a3d8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a32a:	4b2e      	ldr	r3, [pc, #184]	; (800a3e4 <xTaskPriorityDisinherit+0xd0>)
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	693a      	ldr	r2, [r7, #16]
 800a330:	429a      	cmp	r2, r3
 800a332:	d00a      	beq.n	800a34a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a334:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a338:	f383 8811 	msr	BASEPRI, r3
 800a33c:	f3bf 8f6f 	isb	sy
 800a340:	f3bf 8f4f 	dsb	sy
 800a344:	60fb      	str	r3, [r7, #12]
}
 800a346:	bf00      	nop
 800a348:	e7fe      	b.n	800a348 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a34a:	693b      	ldr	r3, [r7, #16]
 800a34c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d10a      	bne.n	800a368 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800a352:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a356:	f383 8811 	msr	BASEPRI, r3
 800a35a:	f3bf 8f6f 	isb	sy
 800a35e:	f3bf 8f4f 	dsb	sy
 800a362:	60bb      	str	r3, [r7, #8]
}
 800a364:	bf00      	nop
 800a366:	e7fe      	b.n	800a366 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800a368:	693b      	ldr	r3, [r7, #16]
 800a36a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a36c:	1e5a      	subs	r2, r3, #1
 800a36e:	693b      	ldr	r3, [r7, #16]
 800a370:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a372:	693b      	ldr	r3, [r7, #16]
 800a374:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a376:	693b      	ldr	r3, [r7, #16]
 800a378:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a37a:	429a      	cmp	r2, r3
 800a37c:	d02c      	beq.n	800a3d8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a37e:	693b      	ldr	r3, [r7, #16]
 800a380:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a382:	2b00      	cmp	r3, #0
 800a384:	d128      	bne.n	800a3d8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a386:	693b      	ldr	r3, [r7, #16]
 800a388:	3304      	adds	r3, #4
 800a38a:	4618      	mov	r0, r3
 800a38c:	f7fe fade 	bl	800894c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a390:	693b      	ldr	r3, [r7, #16]
 800a392:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a394:	693b      	ldr	r3, [r7, #16]
 800a396:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a398:	693b      	ldr	r3, [r7, #16]
 800a39a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a39c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a3a0:	693b      	ldr	r3, [r7, #16]
 800a3a2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a3a4:	693b      	ldr	r3, [r7, #16]
 800a3a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3a8:	4b0f      	ldr	r3, [pc, #60]	; (800a3e8 <xTaskPriorityDisinherit+0xd4>)
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	429a      	cmp	r2, r3
 800a3ae:	d903      	bls.n	800a3b8 <xTaskPriorityDisinherit+0xa4>
 800a3b0:	693b      	ldr	r3, [r7, #16]
 800a3b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3b4:	4a0c      	ldr	r2, [pc, #48]	; (800a3e8 <xTaskPriorityDisinherit+0xd4>)
 800a3b6:	6013      	str	r3, [r2, #0]
 800a3b8:	693b      	ldr	r3, [r7, #16]
 800a3ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3bc:	4613      	mov	r3, r2
 800a3be:	009b      	lsls	r3, r3, #2
 800a3c0:	4413      	add	r3, r2
 800a3c2:	009b      	lsls	r3, r3, #2
 800a3c4:	4a09      	ldr	r2, [pc, #36]	; (800a3ec <xTaskPriorityDisinherit+0xd8>)
 800a3c6:	441a      	add	r2, r3
 800a3c8:	693b      	ldr	r3, [r7, #16]
 800a3ca:	3304      	adds	r3, #4
 800a3cc:	4619      	mov	r1, r3
 800a3ce:	4610      	mov	r0, r2
 800a3d0:	f7fe fa5f 	bl	8008892 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a3d4:	2301      	movs	r3, #1
 800a3d6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a3d8:	697b      	ldr	r3, [r7, #20]
	}
 800a3da:	4618      	mov	r0, r3
 800a3dc:	3718      	adds	r7, #24
 800a3de:	46bd      	mov	sp, r7
 800a3e0:	bd80      	pop	{r7, pc}
 800a3e2:	bf00      	nop
 800a3e4:	20005598 	.word	0x20005598
 800a3e8:	20005a74 	.word	0x20005a74
 800a3ec:	2000559c 	.word	0x2000559c

0800a3f0 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 800a3f0:	b480      	push	{r7}
 800a3f2:	b083      	sub	sp, #12
 800a3f4:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800a3f6:	4b09      	ldr	r3, [pc, #36]	; (800a41c <uxTaskResetEventItemValue+0x2c>)
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	699b      	ldr	r3, [r3, #24]
 800a3fc:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a3fe:	4b07      	ldr	r3, [pc, #28]	; (800a41c <uxTaskResetEventItemValue+0x2c>)
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a404:	4b05      	ldr	r3, [pc, #20]	; (800a41c <uxTaskResetEventItemValue+0x2c>)
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 800a40c:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800a40e:	687b      	ldr	r3, [r7, #4]
}
 800a410:	4618      	mov	r0, r3
 800a412:	370c      	adds	r7, #12
 800a414:	46bd      	mov	sp, r7
 800a416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41a:	4770      	bx	lr
 800a41c:	20005598 	.word	0x20005598

0800a420 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a420:	b580      	push	{r7, lr}
 800a422:	b084      	sub	sp, #16
 800a424:	af00      	add	r7, sp, #0
 800a426:	6078      	str	r0, [r7, #4]
 800a428:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a42a:	4b21      	ldr	r3, [pc, #132]	; (800a4b0 <prvAddCurrentTaskToDelayedList+0x90>)
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a430:	4b20      	ldr	r3, [pc, #128]	; (800a4b4 <prvAddCurrentTaskToDelayedList+0x94>)
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	3304      	adds	r3, #4
 800a436:	4618      	mov	r0, r3
 800a438:	f7fe fa88 	bl	800894c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a442:	d10a      	bne.n	800a45a <prvAddCurrentTaskToDelayedList+0x3a>
 800a444:	683b      	ldr	r3, [r7, #0]
 800a446:	2b00      	cmp	r3, #0
 800a448:	d007      	beq.n	800a45a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a44a:	4b1a      	ldr	r3, [pc, #104]	; (800a4b4 <prvAddCurrentTaskToDelayedList+0x94>)
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	3304      	adds	r3, #4
 800a450:	4619      	mov	r1, r3
 800a452:	4819      	ldr	r0, [pc, #100]	; (800a4b8 <prvAddCurrentTaskToDelayedList+0x98>)
 800a454:	f7fe fa1d 	bl	8008892 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a458:	e026      	b.n	800a4a8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a45a:	68fa      	ldr	r2, [r7, #12]
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	4413      	add	r3, r2
 800a460:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a462:	4b14      	ldr	r3, [pc, #80]	; (800a4b4 <prvAddCurrentTaskToDelayedList+0x94>)
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	68ba      	ldr	r2, [r7, #8]
 800a468:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a46a:	68ba      	ldr	r2, [r7, #8]
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	429a      	cmp	r2, r3
 800a470:	d209      	bcs.n	800a486 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a472:	4b12      	ldr	r3, [pc, #72]	; (800a4bc <prvAddCurrentTaskToDelayedList+0x9c>)
 800a474:	681a      	ldr	r2, [r3, #0]
 800a476:	4b0f      	ldr	r3, [pc, #60]	; (800a4b4 <prvAddCurrentTaskToDelayedList+0x94>)
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	3304      	adds	r3, #4
 800a47c:	4619      	mov	r1, r3
 800a47e:	4610      	mov	r0, r2
 800a480:	f7fe fa2b 	bl	80088da <vListInsert>
}
 800a484:	e010      	b.n	800a4a8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a486:	4b0e      	ldr	r3, [pc, #56]	; (800a4c0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a488:	681a      	ldr	r2, [r3, #0]
 800a48a:	4b0a      	ldr	r3, [pc, #40]	; (800a4b4 <prvAddCurrentTaskToDelayedList+0x94>)
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	3304      	adds	r3, #4
 800a490:	4619      	mov	r1, r3
 800a492:	4610      	mov	r0, r2
 800a494:	f7fe fa21 	bl	80088da <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a498:	4b0a      	ldr	r3, [pc, #40]	; (800a4c4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	68ba      	ldr	r2, [r7, #8]
 800a49e:	429a      	cmp	r2, r3
 800a4a0:	d202      	bcs.n	800a4a8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a4a2:	4a08      	ldr	r2, [pc, #32]	; (800a4c4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a4a4:	68bb      	ldr	r3, [r7, #8]
 800a4a6:	6013      	str	r3, [r2, #0]
}
 800a4a8:	bf00      	nop
 800a4aa:	3710      	adds	r7, #16
 800a4ac:	46bd      	mov	sp, r7
 800a4ae:	bd80      	pop	{r7, pc}
 800a4b0:	20005a70 	.word	0x20005a70
 800a4b4:	20005598 	.word	0x20005598
 800a4b8:	20005a58 	.word	0x20005a58
 800a4bc:	20005a28 	.word	0x20005a28
 800a4c0:	20005a24 	.word	0x20005a24
 800a4c4:	20005a8c 	.word	0x20005a8c

0800a4c8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a4c8:	b580      	push	{r7, lr}
 800a4ca:	b08a      	sub	sp, #40	; 0x28
 800a4cc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a4ce:	2300      	movs	r3, #0
 800a4d0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a4d2:	f000 fb07 	bl	800aae4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a4d6:	4b1c      	ldr	r3, [pc, #112]	; (800a548 <xTimerCreateTimerTask+0x80>)
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d021      	beq.n	800a522 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a4de:	2300      	movs	r3, #0
 800a4e0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a4e2:	2300      	movs	r3, #0
 800a4e4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a4e6:	1d3a      	adds	r2, r7, #4
 800a4e8:	f107 0108 	add.w	r1, r7, #8
 800a4ec:	f107 030c 	add.w	r3, r7, #12
 800a4f0:	4618      	mov	r0, r3
 800a4f2:	f7fd ff1b 	bl	800832c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a4f6:	6879      	ldr	r1, [r7, #4]
 800a4f8:	68bb      	ldr	r3, [r7, #8]
 800a4fa:	68fa      	ldr	r2, [r7, #12]
 800a4fc:	9202      	str	r2, [sp, #8]
 800a4fe:	9301      	str	r3, [sp, #4]
 800a500:	2302      	movs	r3, #2
 800a502:	9300      	str	r3, [sp, #0]
 800a504:	2300      	movs	r3, #0
 800a506:	460a      	mov	r2, r1
 800a508:	4910      	ldr	r1, [pc, #64]	; (800a54c <xTimerCreateTimerTask+0x84>)
 800a50a:	4811      	ldr	r0, [pc, #68]	; (800a550 <xTimerCreateTimerTask+0x88>)
 800a50c:	f7ff f828 	bl	8009560 <xTaskCreateStatic>
 800a510:	4603      	mov	r3, r0
 800a512:	4a10      	ldr	r2, [pc, #64]	; (800a554 <xTimerCreateTimerTask+0x8c>)
 800a514:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a516:	4b0f      	ldr	r3, [pc, #60]	; (800a554 <xTimerCreateTimerTask+0x8c>)
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d001      	beq.n	800a522 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a51e:	2301      	movs	r3, #1
 800a520:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a522:	697b      	ldr	r3, [r7, #20]
 800a524:	2b00      	cmp	r3, #0
 800a526:	d10a      	bne.n	800a53e <xTimerCreateTimerTask+0x76>
	__asm volatile
 800a528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a52c:	f383 8811 	msr	BASEPRI, r3
 800a530:	f3bf 8f6f 	isb	sy
 800a534:	f3bf 8f4f 	dsb	sy
 800a538:	613b      	str	r3, [r7, #16]
}
 800a53a:	bf00      	nop
 800a53c:	e7fe      	b.n	800a53c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a53e:	697b      	ldr	r3, [r7, #20]
}
 800a540:	4618      	mov	r0, r3
 800a542:	3718      	adds	r7, #24
 800a544:	46bd      	mov	sp, r7
 800a546:	bd80      	pop	{r7, pc}
 800a548:	20005ac8 	.word	0x20005ac8
 800a54c:	0800b4ec 	.word	0x0800b4ec
 800a550:	0800a68d 	.word	0x0800a68d
 800a554:	20005acc 	.word	0x20005acc

0800a558 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a558:	b580      	push	{r7, lr}
 800a55a:	b08a      	sub	sp, #40	; 0x28
 800a55c:	af00      	add	r7, sp, #0
 800a55e:	60f8      	str	r0, [r7, #12]
 800a560:	60b9      	str	r1, [r7, #8]
 800a562:	607a      	str	r2, [r7, #4]
 800a564:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a566:	2300      	movs	r3, #0
 800a568:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d10a      	bne.n	800a586 <xTimerGenericCommand+0x2e>
	__asm volatile
 800a570:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a574:	f383 8811 	msr	BASEPRI, r3
 800a578:	f3bf 8f6f 	isb	sy
 800a57c:	f3bf 8f4f 	dsb	sy
 800a580:	623b      	str	r3, [r7, #32]
}
 800a582:	bf00      	nop
 800a584:	e7fe      	b.n	800a584 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a586:	4b1a      	ldr	r3, [pc, #104]	; (800a5f0 <xTimerGenericCommand+0x98>)
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d02a      	beq.n	800a5e4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a58e:	68bb      	ldr	r3, [r7, #8]
 800a590:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a59a:	68bb      	ldr	r3, [r7, #8]
 800a59c:	2b05      	cmp	r3, #5
 800a59e:	dc18      	bgt.n	800a5d2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a5a0:	f7ff fe9a 	bl	800a2d8 <xTaskGetSchedulerState>
 800a5a4:	4603      	mov	r3, r0
 800a5a6:	2b02      	cmp	r3, #2
 800a5a8:	d109      	bne.n	800a5be <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a5aa:	4b11      	ldr	r3, [pc, #68]	; (800a5f0 <xTimerGenericCommand+0x98>)
 800a5ac:	6818      	ldr	r0, [r3, #0]
 800a5ae:	f107 0110 	add.w	r1, r7, #16
 800a5b2:	2300      	movs	r3, #0
 800a5b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a5b6:	f7fe fba1 	bl	8008cfc <xQueueGenericSend>
 800a5ba:	6278      	str	r0, [r7, #36]	; 0x24
 800a5bc:	e012      	b.n	800a5e4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a5be:	4b0c      	ldr	r3, [pc, #48]	; (800a5f0 <xTimerGenericCommand+0x98>)
 800a5c0:	6818      	ldr	r0, [r3, #0]
 800a5c2:	f107 0110 	add.w	r1, r7, #16
 800a5c6:	2300      	movs	r3, #0
 800a5c8:	2200      	movs	r2, #0
 800a5ca:	f7fe fb97 	bl	8008cfc <xQueueGenericSend>
 800a5ce:	6278      	str	r0, [r7, #36]	; 0x24
 800a5d0:	e008      	b.n	800a5e4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a5d2:	4b07      	ldr	r3, [pc, #28]	; (800a5f0 <xTimerGenericCommand+0x98>)
 800a5d4:	6818      	ldr	r0, [r3, #0]
 800a5d6:	f107 0110 	add.w	r1, r7, #16
 800a5da:	2300      	movs	r3, #0
 800a5dc:	683a      	ldr	r2, [r7, #0]
 800a5de:	f7fe fc8b 	bl	8008ef8 <xQueueGenericSendFromISR>
 800a5e2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a5e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a5e6:	4618      	mov	r0, r3
 800a5e8:	3728      	adds	r7, #40	; 0x28
 800a5ea:	46bd      	mov	sp, r7
 800a5ec:	bd80      	pop	{r7, pc}
 800a5ee:	bf00      	nop
 800a5f0:	20005ac8 	.word	0x20005ac8

0800a5f4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a5f4:	b580      	push	{r7, lr}
 800a5f6:	b088      	sub	sp, #32
 800a5f8:	af02      	add	r7, sp, #8
 800a5fa:	6078      	str	r0, [r7, #4]
 800a5fc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a5fe:	4b22      	ldr	r3, [pc, #136]	; (800a688 <prvProcessExpiredTimer+0x94>)
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	68db      	ldr	r3, [r3, #12]
 800a604:	68db      	ldr	r3, [r3, #12]
 800a606:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a608:	697b      	ldr	r3, [r7, #20]
 800a60a:	3304      	adds	r3, #4
 800a60c:	4618      	mov	r0, r3
 800a60e:	f7fe f99d 	bl	800894c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a612:	697b      	ldr	r3, [r7, #20]
 800a614:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a618:	f003 0304 	and.w	r3, r3, #4
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d022      	beq.n	800a666 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a620:	697b      	ldr	r3, [r7, #20]
 800a622:	699a      	ldr	r2, [r3, #24]
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	18d1      	adds	r1, r2, r3
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	683a      	ldr	r2, [r7, #0]
 800a62c:	6978      	ldr	r0, [r7, #20]
 800a62e:	f000 f8d1 	bl	800a7d4 <prvInsertTimerInActiveList>
 800a632:	4603      	mov	r3, r0
 800a634:	2b00      	cmp	r3, #0
 800a636:	d01f      	beq.n	800a678 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a638:	2300      	movs	r3, #0
 800a63a:	9300      	str	r3, [sp, #0]
 800a63c:	2300      	movs	r3, #0
 800a63e:	687a      	ldr	r2, [r7, #4]
 800a640:	2100      	movs	r1, #0
 800a642:	6978      	ldr	r0, [r7, #20]
 800a644:	f7ff ff88 	bl	800a558 <xTimerGenericCommand>
 800a648:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a64a:	693b      	ldr	r3, [r7, #16]
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d113      	bne.n	800a678 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800a650:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a654:	f383 8811 	msr	BASEPRI, r3
 800a658:	f3bf 8f6f 	isb	sy
 800a65c:	f3bf 8f4f 	dsb	sy
 800a660:	60fb      	str	r3, [r7, #12]
}
 800a662:	bf00      	nop
 800a664:	e7fe      	b.n	800a664 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a666:	697b      	ldr	r3, [r7, #20]
 800a668:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a66c:	f023 0301 	bic.w	r3, r3, #1
 800a670:	b2da      	uxtb	r2, r3
 800a672:	697b      	ldr	r3, [r7, #20]
 800a674:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a678:	697b      	ldr	r3, [r7, #20]
 800a67a:	6a1b      	ldr	r3, [r3, #32]
 800a67c:	6978      	ldr	r0, [r7, #20]
 800a67e:	4798      	blx	r3
}
 800a680:	bf00      	nop
 800a682:	3718      	adds	r7, #24
 800a684:	46bd      	mov	sp, r7
 800a686:	bd80      	pop	{r7, pc}
 800a688:	20005ac0 	.word	0x20005ac0

0800a68c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a68c:	b580      	push	{r7, lr}
 800a68e:	b084      	sub	sp, #16
 800a690:	af00      	add	r7, sp, #0
 800a692:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a694:	f107 0308 	add.w	r3, r7, #8
 800a698:	4618      	mov	r0, r3
 800a69a:	f000 f857 	bl	800a74c <prvGetNextExpireTime>
 800a69e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a6a0:	68bb      	ldr	r3, [r7, #8]
 800a6a2:	4619      	mov	r1, r3
 800a6a4:	68f8      	ldr	r0, [r7, #12]
 800a6a6:	f000 f803 	bl	800a6b0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a6aa:	f000 f8d5 	bl	800a858 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a6ae:	e7f1      	b.n	800a694 <prvTimerTask+0x8>

0800a6b0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a6b0:	b580      	push	{r7, lr}
 800a6b2:	b084      	sub	sp, #16
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	6078      	str	r0, [r7, #4]
 800a6b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a6ba:	f7ff f98d 	bl	80099d8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a6be:	f107 0308 	add.w	r3, r7, #8
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	f000 f866 	bl	800a794 <prvSampleTimeNow>
 800a6c8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a6ca:	68bb      	ldr	r3, [r7, #8]
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d130      	bne.n	800a732 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a6d0:	683b      	ldr	r3, [r7, #0]
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d10a      	bne.n	800a6ec <prvProcessTimerOrBlockTask+0x3c>
 800a6d6:	687a      	ldr	r2, [r7, #4]
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	429a      	cmp	r2, r3
 800a6dc:	d806      	bhi.n	800a6ec <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a6de:	f7ff f989 	bl	80099f4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a6e2:	68f9      	ldr	r1, [r7, #12]
 800a6e4:	6878      	ldr	r0, [r7, #4]
 800a6e6:	f7ff ff85 	bl	800a5f4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a6ea:	e024      	b.n	800a736 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a6ec:	683b      	ldr	r3, [r7, #0]
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d008      	beq.n	800a704 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a6f2:	4b13      	ldr	r3, [pc, #76]	; (800a740 <prvProcessTimerOrBlockTask+0x90>)
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d101      	bne.n	800a700 <prvProcessTimerOrBlockTask+0x50>
 800a6fc:	2301      	movs	r3, #1
 800a6fe:	e000      	b.n	800a702 <prvProcessTimerOrBlockTask+0x52>
 800a700:	2300      	movs	r3, #0
 800a702:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a704:	4b0f      	ldr	r3, [pc, #60]	; (800a744 <prvProcessTimerOrBlockTask+0x94>)
 800a706:	6818      	ldr	r0, [r3, #0]
 800a708:	687a      	ldr	r2, [r7, #4]
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	1ad3      	subs	r3, r2, r3
 800a70e:	683a      	ldr	r2, [r7, #0]
 800a710:	4619      	mov	r1, r3
 800a712:	f7fe fef1 	bl	80094f8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a716:	f7ff f96d 	bl	80099f4 <xTaskResumeAll>
 800a71a:	4603      	mov	r3, r0
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d10a      	bne.n	800a736 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a720:	4b09      	ldr	r3, [pc, #36]	; (800a748 <prvProcessTimerOrBlockTask+0x98>)
 800a722:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a726:	601a      	str	r2, [r3, #0]
 800a728:	f3bf 8f4f 	dsb	sy
 800a72c:	f3bf 8f6f 	isb	sy
}
 800a730:	e001      	b.n	800a736 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a732:	f7ff f95f 	bl	80099f4 <xTaskResumeAll>
}
 800a736:	bf00      	nop
 800a738:	3710      	adds	r7, #16
 800a73a:	46bd      	mov	sp, r7
 800a73c:	bd80      	pop	{r7, pc}
 800a73e:	bf00      	nop
 800a740:	20005ac4 	.word	0x20005ac4
 800a744:	20005ac8 	.word	0x20005ac8
 800a748:	e000ed04 	.word	0xe000ed04

0800a74c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a74c:	b480      	push	{r7}
 800a74e:	b085      	sub	sp, #20
 800a750:	af00      	add	r7, sp, #0
 800a752:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a754:	4b0e      	ldr	r3, [pc, #56]	; (800a790 <prvGetNextExpireTime+0x44>)
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d101      	bne.n	800a762 <prvGetNextExpireTime+0x16>
 800a75e:	2201      	movs	r2, #1
 800a760:	e000      	b.n	800a764 <prvGetNextExpireTime+0x18>
 800a762:	2200      	movs	r2, #0
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d105      	bne.n	800a77c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a770:	4b07      	ldr	r3, [pc, #28]	; (800a790 <prvGetNextExpireTime+0x44>)
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	68db      	ldr	r3, [r3, #12]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	60fb      	str	r3, [r7, #12]
 800a77a:	e001      	b.n	800a780 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a77c:	2300      	movs	r3, #0
 800a77e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a780:	68fb      	ldr	r3, [r7, #12]
}
 800a782:	4618      	mov	r0, r3
 800a784:	3714      	adds	r7, #20
 800a786:	46bd      	mov	sp, r7
 800a788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a78c:	4770      	bx	lr
 800a78e:	bf00      	nop
 800a790:	20005ac0 	.word	0x20005ac0

0800a794 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a794:	b580      	push	{r7, lr}
 800a796:	b084      	sub	sp, #16
 800a798:	af00      	add	r7, sp, #0
 800a79a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a79c:	f7ff f9c8 	bl	8009b30 <xTaskGetTickCount>
 800a7a0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a7a2:	4b0b      	ldr	r3, [pc, #44]	; (800a7d0 <prvSampleTimeNow+0x3c>)
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	68fa      	ldr	r2, [r7, #12]
 800a7a8:	429a      	cmp	r2, r3
 800a7aa:	d205      	bcs.n	800a7b8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a7ac:	f000 f936 	bl	800aa1c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	2201      	movs	r2, #1
 800a7b4:	601a      	str	r2, [r3, #0]
 800a7b6:	e002      	b.n	800a7be <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	2200      	movs	r2, #0
 800a7bc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a7be:	4a04      	ldr	r2, [pc, #16]	; (800a7d0 <prvSampleTimeNow+0x3c>)
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a7c4:	68fb      	ldr	r3, [r7, #12]
}
 800a7c6:	4618      	mov	r0, r3
 800a7c8:	3710      	adds	r7, #16
 800a7ca:	46bd      	mov	sp, r7
 800a7cc:	bd80      	pop	{r7, pc}
 800a7ce:	bf00      	nop
 800a7d0:	20005ad0 	.word	0x20005ad0

0800a7d4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	b086      	sub	sp, #24
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	60f8      	str	r0, [r7, #12]
 800a7dc:	60b9      	str	r1, [r7, #8]
 800a7de:	607a      	str	r2, [r7, #4]
 800a7e0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a7e2:	2300      	movs	r3, #0
 800a7e4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	68ba      	ldr	r2, [r7, #8]
 800a7ea:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	68fa      	ldr	r2, [r7, #12]
 800a7f0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a7f2:	68ba      	ldr	r2, [r7, #8]
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	429a      	cmp	r2, r3
 800a7f8:	d812      	bhi.n	800a820 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a7fa:	687a      	ldr	r2, [r7, #4]
 800a7fc:	683b      	ldr	r3, [r7, #0]
 800a7fe:	1ad2      	subs	r2, r2, r3
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	699b      	ldr	r3, [r3, #24]
 800a804:	429a      	cmp	r2, r3
 800a806:	d302      	bcc.n	800a80e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a808:	2301      	movs	r3, #1
 800a80a:	617b      	str	r3, [r7, #20]
 800a80c:	e01b      	b.n	800a846 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a80e:	4b10      	ldr	r3, [pc, #64]	; (800a850 <prvInsertTimerInActiveList+0x7c>)
 800a810:	681a      	ldr	r2, [r3, #0]
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	3304      	adds	r3, #4
 800a816:	4619      	mov	r1, r3
 800a818:	4610      	mov	r0, r2
 800a81a:	f7fe f85e 	bl	80088da <vListInsert>
 800a81e:	e012      	b.n	800a846 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a820:	687a      	ldr	r2, [r7, #4]
 800a822:	683b      	ldr	r3, [r7, #0]
 800a824:	429a      	cmp	r2, r3
 800a826:	d206      	bcs.n	800a836 <prvInsertTimerInActiveList+0x62>
 800a828:	68ba      	ldr	r2, [r7, #8]
 800a82a:	683b      	ldr	r3, [r7, #0]
 800a82c:	429a      	cmp	r2, r3
 800a82e:	d302      	bcc.n	800a836 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a830:	2301      	movs	r3, #1
 800a832:	617b      	str	r3, [r7, #20]
 800a834:	e007      	b.n	800a846 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a836:	4b07      	ldr	r3, [pc, #28]	; (800a854 <prvInsertTimerInActiveList+0x80>)
 800a838:	681a      	ldr	r2, [r3, #0]
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	3304      	adds	r3, #4
 800a83e:	4619      	mov	r1, r3
 800a840:	4610      	mov	r0, r2
 800a842:	f7fe f84a 	bl	80088da <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a846:	697b      	ldr	r3, [r7, #20]
}
 800a848:	4618      	mov	r0, r3
 800a84a:	3718      	adds	r7, #24
 800a84c:	46bd      	mov	sp, r7
 800a84e:	bd80      	pop	{r7, pc}
 800a850:	20005ac4 	.word	0x20005ac4
 800a854:	20005ac0 	.word	0x20005ac0

0800a858 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a858:	b580      	push	{r7, lr}
 800a85a:	b08e      	sub	sp, #56	; 0x38
 800a85c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a85e:	e0ca      	b.n	800a9f6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	2b00      	cmp	r3, #0
 800a864:	da18      	bge.n	800a898 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a866:	1d3b      	adds	r3, r7, #4
 800a868:	3304      	adds	r3, #4
 800a86a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a86c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d10a      	bne.n	800a888 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800a872:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a876:	f383 8811 	msr	BASEPRI, r3
 800a87a:	f3bf 8f6f 	isb	sy
 800a87e:	f3bf 8f4f 	dsb	sy
 800a882:	61fb      	str	r3, [r7, #28]
}
 800a884:	bf00      	nop
 800a886:	e7fe      	b.n	800a886 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a88e:	6850      	ldr	r0, [r2, #4]
 800a890:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a892:	6892      	ldr	r2, [r2, #8]
 800a894:	4611      	mov	r1, r2
 800a896:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	f2c0 80aa 	blt.w	800a9f4 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a8a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8a6:	695b      	ldr	r3, [r3, #20]
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d004      	beq.n	800a8b6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a8ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8ae:	3304      	adds	r3, #4
 800a8b0:	4618      	mov	r0, r3
 800a8b2:	f7fe f84b 	bl	800894c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a8b6:	463b      	mov	r3, r7
 800a8b8:	4618      	mov	r0, r3
 800a8ba:	f7ff ff6b 	bl	800a794 <prvSampleTimeNow>
 800a8be:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	2b09      	cmp	r3, #9
 800a8c4:	f200 8097 	bhi.w	800a9f6 <prvProcessReceivedCommands+0x19e>
 800a8c8:	a201      	add	r2, pc, #4	; (adr r2, 800a8d0 <prvProcessReceivedCommands+0x78>)
 800a8ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8ce:	bf00      	nop
 800a8d0:	0800a8f9 	.word	0x0800a8f9
 800a8d4:	0800a8f9 	.word	0x0800a8f9
 800a8d8:	0800a8f9 	.word	0x0800a8f9
 800a8dc:	0800a96d 	.word	0x0800a96d
 800a8e0:	0800a981 	.word	0x0800a981
 800a8e4:	0800a9cb 	.word	0x0800a9cb
 800a8e8:	0800a8f9 	.word	0x0800a8f9
 800a8ec:	0800a8f9 	.word	0x0800a8f9
 800a8f0:	0800a96d 	.word	0x0800a96d
 800a8f4:	0800a981 	.word	0x0800a981
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a8f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a8fe:	f043 0301 	orr.w	r3, r3, #1
 800a902:	b2da      	uxtb	r2, r3
 800a904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a906:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a90a:	68ba      	ldr	r2, [r7, #8]
 800a90c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a90e:	699b      	ldr	r3, [r3, #24]
 800a910:	18d1      	adds	r1, r2, r3
 800a912:	68bb      	ldr	r3, [r7, #8]
 800a914:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a916:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a918:	f7ff ff5c 	bl	800a7d4 <prvInsertTimerInActiveList>
 800a91c:	4603      	mov	r3, r0
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d069      	beq.n	800a9f6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a924:	6a1b      	ldr	r3, [r3, #32]
 800a926:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a928:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a92a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a92c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a930:	f003 0304 	and.w	r3, r3, #4
 800a934:	2b00      	cmp	r3, #0
 800a936:	d05e      	beq.n	800a9f6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a938:	68ba      	ldr	r2, [r7, #8]
 800a93a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a93c:	699b      	ldr	r3, [r3, #24]
 800a93e:	441a      	add	r2, r3
 800a940:	2300      	movs	r3, #0
 800a942:	9300      	str	r3, [sp, #0]
 800a944:	2300      	movs	r3, #0
 800a946:	2100      	movs	r1, #0
 800a948:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a94a:	f7ff fe05 	bl	800a558 <xTimerGenericCommand>
 800a94e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a950:	6a3b      	ldr	r3, [r7, #32]
 800a952:	2b00      	cmp	r3, #0
 800a954:	d14f      	bne.n	800a9f6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800a956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a95a:	f383 8811 	msr	BASEPRI, r3
 800a95e:	f3bf 8f6f 	isb	sy
 800a962:	f3bf 8f4f 	dsb	sy
 800a966:	61bb      	str	r3, [r7, #24]
}
 800a968:	bf00      	nop
 800a96a:	e7fe      	b.n	800a96a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a96c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a96e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a972:	f023 0301 	bic.w	r3, r3, #1
 800a976:	b2da      	uxtb	r2, r3
 800a978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a97a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800a97e:	e03a      	b.n	800a9f6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a982:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a986:	f043 0301 	orr.w	r3, r3, #1
 800a98a:	b2da      	uxtb	r2, r3
 800a98c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a98e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a992:	68ba      	ldr	r2, [r7, #8]
 800a994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a996:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a99a:	699b      	ldr	r3, [r3, #24]
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d10a      	bne.n	800a9b6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800a9a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9a4:	f383 8811 	msr	BASEPRI, r3
 800a9a8:	f3bf 8f6f 	isb	sy
 800a9ac:	f3bf 8f4f 	dsb	sy
 800a9b0:	617b      	str	r3, [r7, #20]
}
 800a9b2:	bf00      	nop
 800a9b4:	e7fe      	b.n	800a9b4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a9b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9b8:	699a      	ldr	r2, [r3, #24]
 800a9ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9bc:	18d1      	adds	r1, r2, r3
 800a9be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a9c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a9c4:	f7ff ff06 	bl	800a7d4 <prvInsertTimerInActiveList>
					break;
 800a9c8:	e015      	b.n	800a9f6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a9ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a9d0:	f003 0302 	and.w	r3, r3, #2
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d103      	bne.n	800a9e0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800a9d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a9da:	f000 fbf9 	bl	800b1d0 <vPortFree>
 800a9de:	e00a      	b.n	800a9f6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a9e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a9e6:	f023 0301 	bic.w	r3, r3, #1
 800a9ea:	b2da      	uxtb	r2, r3
 800a9ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a9f2:	e000      	b.n	800a9f6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800a9f4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a9f6:	4b08      	ldr	r3, [pc, #32]	; (800aa18 <prvProcessReceivedCommands+0x1c0>)
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	1d39      	adds	r1, r7, #4
 800a9fc:	2200      	movs	r2, #0
 800a9fe:	4618      	mov	r0, r3
 800aa00:	f7fe fb12 	bl	8009028 <xQueueReceive>
 800aa04:	4603      	mov	r3, r0
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	f47f af2a 	bne.w	800a860 <prvProcessReceivedCommands+0x8>
	}
}
 800aa0c:	bf00      	nop
 800aa0e:	bf00      	nop
 800aa10:	3730      	adds	r7, #48	; 0x30
 800aa12:	46bd      	mov	sp, r7
 800aa14:	bd80      	pop	{r7, pc}
 800aa16:	bf00      	nop
 800aa18:	20005ac8 	.word	0x20005ac8

0800aa1c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800aa1c:	b580      	push	{r7, lr}
 800aa1e:	b088      	sub	sp, #32
 800aa20:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800aa22:	e048      	b.n	800aab6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800aa24:	4b2d      	ldr	r3, [pc, #180]	; (800aadc <prvSwitchTimerLists+0xc0>)
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	68db      	ldr	r3, [r3, #12]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aa2e:	4b2b      	ldr	r3, [pc, #172]	; (800aadc <prvSwitchTimerLists+0xc0>)
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	68db      	ldr	r3, [r3, #12]
 800aa34:	68db      	ldr	r3, [r3, #12]
 800aa36:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	3304      	adds	r3, #4
 800aa3c:	4618      	mov	r0, r3
 800aa3e:	f7fd ff85 	bl	800894c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	6a1b      	ldr	r3, [r3, #32]
 800aa46:	68f8      	ldr	r0, [r7, #12]
 800aa48:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aa50:	f003 0304 	and.w	r3, r3, #4
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d02e      	beq.n	800aab6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	699b      	ldr	r3, [r3, #24]
 800aa5c:	693a      	ldr	r2, [r7, #16]
 800aa5e:	4413      	add	r3, r2
 800aa60:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800aa62:	68ba      	ldr	r2, [r7, #8]
 800aa64:	693b      	ldr	r3, [r7, #16]
 800aa66:	429a      	cmp	r2, r3
 800aa68:	d90e      	bls.n	800aa88 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	68ba      	ldr	r2, [r7, #8]
 800aa6e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	68fa      	ldr	r2, [r7, #12]
 800aa74:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800aa76:	4b19      	ldr	r3, [pc, #100]	; (800aadc <prvSwitchTimerLists+0xc0>)
 800aa78:	681a      	ldr	r2, [r3, #0]
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	3304      	adds	r3, #4
 800aa7e:	4619      	mov	r1, r3
 800aa80:	4610      	mov	r0, r2
 800aa82:	f7fd ff2a 	bl	80088da <vListInsert>
 800aa86:	e016      	b.n	800aab6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800aa88:	2300      	movs	r3, #0
 800aa8a:	9300      	str	r3, [sp, #0]
 800aa8c:	2300      	movs	r3, #0
 800aa8e:	693a      	ldr	r2, [r7, #16]
 800aa90:	2100      	movs	r1, #0
 800aa92:	68f8      	ldr	r0, [r7, #12]
 800aa94:	f7ff fd60 	bl	800a558 <xTimerGenericCommand>
 800aa98:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d10a      	bne.n	800aab6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800aaa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaa4:	f383 8811 	msr	BASEPRI, r3
 800aaa8:	f3bf 8f6f 	isb	sy
 800aaac:	f3bf 8f4f 	dsb	sy
 800aab0:	603b      	str	r3, [r7, #0]
}
 800aab2:	bf00      	nop
 800aab4:	e7fe      	b.n	800aab4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800aab6:	4b09      	ldr	r3, [pc, #36]	; (800aadc <prvSwitchTimerLists+0xc0>)
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d1b1      	bne.n	800aa24 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800aac0:	4b06      	ldr	r3, [pc, #24]	; (800aadc <prvSwitchTimerLists+0xc0>)
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800aac6:	4b06      	ldr	r3, [pc, #24]	; (800aae0 <prvSwitchTimerLists+0xc4>)
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	4a04      	ldr	r2, [pc, #16]	; (800aadc <prvSwitchTimerLists+0xc0>)
 800aacc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800aace:	4a04      	ldr	r2, [pc, #16]	; (800aae0 <prvSwitchTimerLists+0xc4>)
 800aad0:	697b      	ldr	r3, [r7, #20]
 800aad2:	6013      	str	r3, [r2, #0]
}
 800aad4:	bf00      	nop
 800aad6:	3718      	adds	r7, #24
 800aad8:	46bd      	mov	sp, r7
 800aada:	bd80      	pop	{r7, pc}
 800aadc:	20005ac0 	.word	0x20005ac0
 800aae0:	20005ac4 	.word	0x20005ac4

0800aae4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800aae4:	b580      	push	{r7, lr}
 800aae6:	b082      	sub	sp, #8
 800aae8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800aaea:	f000 f98b 	bl	800ae04 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800aaee:	4b15      	ldr	r3, [pc, #84]	; (800ab44 <prvCheckForValidListAndQueue+0x60>)
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d120      	bne.n	800ab38 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800aaf6:	4814      	ldr	r0, [pc, #80]	; (800ab48 <prvCheckForValidListAndQueue+0x64>)
 800aaf8:	f7fd fe9e 	bl	8008838 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800aafc:	4813      	ldr	r0, [pc, #76]	; (800ab4c <prvCheckForValidListAndQueue+0x68>)
 800aafe:	f7fd fe9b 	bl	8008838 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ab02:	4b13      	ldr	r3, [pc, #76]	; (800ab50 <prvCheckForValidListAndQueue+0x6c>)
 800ab04:	4a10      	ldr	r2, [pc, #64]	; (800ab48 <prvCheckForValidListAndQueue+0x64>)
 800ab06:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ab08:	4b12      	ldr	r3, [pc, #72]	; (800ab54 <prvCheckForValidListAndQueue+0x70>)
 800ab0a:	4a10      	ldr	r2, [pc, #64]	; (800ab4c <prvCheckForValidListAndQueue+0x68>)
 800ab0c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ab0e:	2300      	movs	r3, #0
 800ab10:	9300      	str	r3, [sp, #0]
 800ab12:	4b11      	ldr	r3, [pc, #68]	; (800ab58 <prvCheckForValidListAndQueue+0x74>)
 800ab14:	4a11      	ldr	r2, [pc, #68]	; (800ab5c <prvCheckForValidListAndQueue+0x78>)
 800ab16:	2110      	movs	r1, #16
 800ab18:	200a      	movs	r0, #10
 800ab1a:	f7fd ffa9 	bl	8008a70 <xQueueGenericCreateStatic>
 800ab1e:	4603      	mov	r3, r0
 800ab20:	4a08      	ldr	r2, [pc, #32]	; (800ab44 <prvCheckForValidListAndQueue+0x60>)
 800ab22:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ab24:	4b07      	ldr	r3, [pc, #28]	; (800ab44 <prvCheckForValidListAndQueue+0x60>)
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d005      	beq.n	800ab38 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ab2c:	4b05      	ldr	r3, [pc, #20]	; (800ab44 <prvCheckForValidListAndQueue+0x60>)
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	490b      	ldr	r1, [pc, #44]	; (800ab60 <prvCheckForValidListAndQueue+0x7c>)
 800ab32:	4618      	mov	r0, r3
 800ab34:	f7fe fc8c 	bl	8009450 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ab38:	f000 f994 	bl	800ae64 <vPortExitCritical>
}
 800ab3c:	bf00      	nop
 800ab3e:	46bd      	mov	sp, r7
 800ab40:	bd80      	pop	{r7, pc}
 800ab42:	bf00      	nop
 800ab44:	20005ac8 	.word	0x20005ac8
 800ab48:	20005a98 	.word	0x20005a98
 800ab4c:	20005aac 	.word	0x20005aac
 800ab50:	20005ac0 	.word	0x20005ac0
 800ab54:	20005ac4 	.word	0x20005ac4
 800ab58:	20005b74 	.word	0x20005b74
 800ab5c:	20005ad4 	.word	0x20005ad4
 800ab60:	0800b4f4 	.word	0x0800b4f4

0800ab64 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800ab64:	b580      	push	{r7, lr}
 800ab66:	b08a      	sub	sp, #40	; 0x28
 800ab68:	af00      	add	r7, sp, #0
 800ab6a:	60f8      	str	r0, [r7, #12]
 800ab6c:	60b9      	str	r1, [r7, #8]
 800ab6e:	607a      	str	r2, [r7, #4]
 800ab70:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 800ab72:	f06f 0301 	mvn.w	r3, #1
 800ab76:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 800ab7c:	68bb      	ldr	r3, [r7, #8]
 800ab7e:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ab84:	4b06      	ldr	r3, [pc, #24]	; (800aba0 <xTimerPendFunctionCallFromISR+0x3c>)
 800ab86:	6818      	ldr	r0, [r3, #0]
 800ab88:	f107 0114 	add.w	r1, r7, #20
 800ab8c:	2300      	movs	r3, #0
 800ab8e:	683a      	ldr	r2, [r7, #0]
 800ab90:	f7fe f9b2 	bl	8008ef8 <xQueueGenericSendFromISR>
 800ab94:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 800ab96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800ab98:	4618      	mov	r0, r3
 800ab9a:	3728      	adds	r7, #40	; 0x28
 800ab9c:	46bd      	mov	sp, r7
 800ab9e:	bd80      	pop	{r7, pc}
 800aba0:	20005ac8 	.word	0x20005ac8

0800aba4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800aba4:	b480      	push	{r7}
 800aba6:	b085      	sub	sp, #20
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	60f8      	str	r0, [r7, #12]
 800abac:	60b9      	str	r1, [r7, #8]
 800abae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	3b04      	subs	r3, #4
 800abb4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800abbc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	3b04      	subs	r3, #4
 800abc2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800abc4:	68bb      	ldr	r3, [r7, #8]
 800abc6:	f023 0201 	bic.w	r2, r3, #1
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	3b04      	subs	r3, #4
 800abd2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800abd4:	4a0c      	ldr	r2, [pc, #48]	; (800ac08 <pxPortInitialiseStack+0x64>)
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	3b14      	subs	r3, #20
 800abde:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800abe0:	687a      	ldr	r2, [r7, #4]
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	3b04      	subs	r3, #4
 800abea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	f06f 0202 	mvn.w	r2, #2
 800abf2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	3b20      	subs	r3, #32
 800abf8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800abfa:	68fb      	ldr	r3, [r7, #12]
}
 800abfc:	4618      	mov	r0, r3
 800abfe:	3714      	adds	r7, #20
 800ac00:	46bd      	mov	sp, r7
 800ac02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac06:	4770      	bx	lr
 800ac08:	0800ac0d 	.word	0x0800ac0d

0800ac0c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ac0c:	b480      	push	{r7}
 800ac0e:	b085      	sub	sp, #20
 800ac10:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ac12:	2300      	movs	r3, #0
 800ac14:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ac16:	4b12      	ldr	r3, [pc, #72]	; (800ac60 <prvTaskExitError+0x54>)
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac1e:	d00a      	beq.n	800ac36 <prvTaskExitError+0x2a>
	__asm volatile
 800ac20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac24:	f383 8811 	msr	BASEPRI, r3
 800ac28:	f3bf 8f6f 	isb	sy
 800ac2c:	f3bf 8f4f 	dsb	sy
 800ac30:	60fb      	str	r3, [r7, #12]
}
 800ac32:	bf00      	nop
 800ac34:	e7fe      	b.n	800ac34 <prvTaskExitError+0x28>
	__asm volatile
 800ac36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac3a:	f383 8811 	msr	BASEPRI, r3
 800ac3e:	f3bf 8f6f 	isb	sy
 800ac42:	f3bf 8f4f 	dsb	sy
 800ac46:	60bb      	str	r3, [r7, #8]
}
 800ac48:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ac4a:	bf00      	nop
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d0fc      	beq.n	800ac4c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ac52:	bf00      	nop
 800ac54:	bf00      	nop
 800ac56:	3714      	adds	r7, #20
 800ac58:	46bd      	mov	sp, r7
 800ac5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac5e:	4770      	bx	lr
 800ac60:	20000014 	.word	0x20000014
	...

0800ac70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ac70:	4b07      	ldr	r3, [pc, #28]	; (800ac90 <pxCurrentTCBConst2>)
 800ac72:	6819      	ldr	r1, [r3, #0]
 800ac74:	6808      	ldr	r0, [r1, #0]
 800ac76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac7a:	f380 8809 	msr	PSP, r0
 800ac7e:	f3bf 8f6f 	isb	sy
 800ac82:	f04f 0000 	mov.w	r0, #0
 800ac86:	f380 8811 	msr	BASEPRI, r0
 800ac8a:	4770      	bx	lr
 800ac8c:	f3af 8000 	nop.w

0800ac90 <pxCurrentTCBConst2>:
 800ac90:	20005598 	.word	0x20005598
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ac94:	bf00      	nop
 800ac96:	bf00      	nop

0800ac98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ac98:	4808      	ldr	r0, [pc, #32]	; (800acbc <prvPortStartFirstTask+0x24>)
 800ac9a:	6800      	ldr	r0, [r0, #0]
 800ac9c:	6800      	ldr	r0, [r0, #0]
 800ac9e:	f380 8808 	msr	MSP, r0
 800aca2:	f04f 0000 	mov.w	r0, #0
 800aca6:	f380 8814 	msr	CONTROL, r0
 800acaa:	b662      	cpsie	i
 800acac:	b661      	cpsie	f
 800acae:	f3bf 8f4f 	dsb	sy
 800acb2:	f3bf 8f6f 	isb	sy
 800acb6:	df00      	svc	0
 800acb8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800acba:	bf00      	nop
 800acbc:	e000ed08 	.word	0xe000ed08

0800acc0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800acc0:	b580      	push	{r7, lr}
 800acc2:	b086      	sub	sp, #24
 800acc4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800acc6:	4b46      	ldr	r3, [pc, #280]	; (800ade0 <xPortStartScheduler+0x120>)
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	4a46      	ldr	r2, [pc, #280]	; (800ade4 <xPortStartScheduler+0x124>)
 800accc:	4293      	cmp	r3, r2
 800acce:	d10a      	bne.n	800ace6 <xPortStartScheduler+0x26>
	__asm volatile
 800acd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acd4:	f383 8811 	msr	BASEPRI, r3
 800acd8:	f3bf 8f6f 	isb	sy
 800acdc:	f3bf 8f4f 	dsb	sy
 800ace0:	613b      	str	r3, [r7, #16]
}
 800ace2:	bf00      	nop
 800ace4:	e7fe      	b.n	800ace4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ace6:	4b3e      	ldr	r3, [pc, #248]	; (800ade0 <xPortStartScheduler+0x120>)
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	4a3f      	ldr	r2, [pc, #252]	; (800ade8 <xPortStartScheduler+0x128>)
 800acec:	4293      	cmp	r3, r2
 800acee:	d10a      	bne.n	800ad06 <xPortStartScheduler+0x46>
	__asm volatile
 800acf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acf4:	f383 8811 	msr	BASEPRI, r3
 800acf8:	f3bf 8f6f 	isb	sy
 800acfc:	f3bf 8f4f 	dsb	sy
 800ad00:	60fb      	str	r3, [r7, #12]
}
 800ad02:	bf00      	nop
 800ad04:	e7fe      	b.n	800ad04 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ad06:	4b39      	ldr	r3, [pc, #228]	; (800adec <xPortStartScheduler+0x12c>)
 800ad08:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ad0a:	697b      	ldr	r3, [r7, #20]
 800ad0c:	781b      	ldrb	r3, [r3, #0]
 800ad0e:	b2db      	uxtb	r3, r3
 800ad10:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ad12:	697b      	ldr	r3, [r7, #20]
 800ad14:	22ff      	movs	r2, #255	; 0xff
 800ad16:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ad18:	697b      	ldr	r3, [r7, #20]
 800ad1a:	781b      	ldrb	r3, [r3, #0]
 800ad1c:	b2db      	uxtb	r3, r3
 800ad1e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ad20:	78fb      	ldrb	r3, [r7, #3]
 800ad22:	b2db      	uxtb	r3, r3
 800ad24:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ad28:	b2da      	uxtb	r2, r3
 800ad2a:	4b31      	ldr	r3, [pc, #196]	; (800adf0 <xPortStartScheduler+0x130>)
 800ad2c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ad2e:	4b31      	ldr	r3, [pc, #196]	; (800adf4 <xPortStartScheduler+0x134>)
 800ad30:	2207      	movs	r2, #7
 800ad32:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ad34:	e009      	b.n	800ad4a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800ad36:	4b2f      	ldr	r3, [pc, #188]	; (800adf4 <xPortStartScheduler+0x134>)
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	3b01      	subs	r3, #1
 800ad3c:	4a2d      	ldr	r2, [pc, #180]	; (800adf4 <xPortStartScheduler+0x134>)
 800ad3e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ad40:	78fb      	ldrb	r3, [r7, #3]
 800ad42:	b2db      	uxtb	r3, r3
 800ad44:	005b      	lsls	r3, r3, #1
 800ad46:	b2db      	uxtb	r3, r3
 800ad48:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ad4a:	78fb      	ldrb	r3, [r7, #3]
 800ad4c:	b2db      	uxtb	r3, r3
 800ad4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ad52:	2b80      	cmp	r3, #128	; 0x80
 800ad54:	d0ef      	beq.n	800ad36 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ad56:	4b27      	ldr	r3, [pc, #156]	; (800adf4 <xPortStartScheduler+0x134>)
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	f1c3 0307 	rsb	r3, r3, #7
 800ad5e:	2b04      	cmp	r3, #4
 800ad60:	d00a      	beq.n	800ad78 <xPortStartScheduler+0xb8>
	__asm volatile
 800ad62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad66:	f383 8811 	msr	BASEPRI, r3
 800ad6a:	f3bf 8f6f 	isb	sy
 800ad6e:	f3bf 8f4f 	dsb	sy
 800ad72:	60bb      	str	r3, [r7, #8]
}
 800ad74:	bf00      	nop
 800ad76:	e7fe      	b.n	800ad76 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ad78:	4b1e      	ldr	r3, [pc, #120]	; (800adf4 <xPortStartScheduler+0x134>)
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	021b      	lsls	r3, r3, #8
 800ad7e:	4a1d      	ldr	r2, [pc, #116]	; (800adf4 <xPortStartScheduler+0x134>)
 800ad80:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ad82:	4b1c      	ldr	r3, [pc, #112]	; (800adf4 <xPortStartScheduler+0x134>)
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ad8a:	4a1a      	ldr	r2, [pc, #104]	; (800adf4 <xPortStartScheduler+0x134>)
 800ad8c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	b2da      	uxtb	r2, r3
 800ad92:	697b      	ldr	r3, [r7, #20]
 800ad94:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ad96:	4b18      	ldr	r3, [pc, #96]	; (800adf8 <xPortStartScheduler+0x138>)
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	4a17      	ldr	r2, [pc, #92]	; (800adf8 <xPortStartScheduler+0x138>)
 800ad9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ada0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ada2:	4b15      	ldr	r3, [pc, #84]	; (800adf8 <xPortStartScheduler+0x138>)
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	4a14      	ldr	r2, [pc, #80]	; (800adf8 <xPortStartScheduler+0x138>)
 800ada8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800adac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800adae:	f000 f8dd 	bl	800af6c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800adb2:	4b12      	ldr	r3, [pc, #72]	; (800adfc <xPortStartScheduler+0x13c>)
 800adb4:	2200      	movs	r2, #0
 800adb6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800adb8:	f000 f8fc 	bl	800afb4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800adbc:	4b10      	ldr	r3, [pc, #64]	; (800ae00 <xPortStartScheduler+0x140>)
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	4a0f      	ldr	r2, [pc, #60]	; (800ae00 <xPortStartScheduler+0x140>)
 800adc2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800adc6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800adc8:	f7ff ff66 	bl	800ac98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800adcc:	f7fe ff7a 	bl	8009cc4 <vTaskSwitchContext>
	prvTaskExitError();
 800add0:	f7ff ff1c 	bl	800ac0c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800add4:	2300      	movs	r3, #0
}
 800add6:	4618      	mov	r0, r3
 800add8:	3718      	adds	r7, #24
 800adda:	46bd      	mov	sp, r7
 800addc:	bd80      	pop	{r7, pc}
 800adde:	bf00      	nop
 800ade0:	e000ed00 	.word	0xe000ed00
 800ade4:	410fc271 	.word	0x410fc271
 800ade8:	410fc270 	.word	0x410fc270
 800adec:	e000e400 	.word	0xe000e400
 800adf0:	20005bc4 	.word	0x20005bc4
 800adf4:	20005bc8 	.word	0x20005bc8
 800adf8:	e000ed20 	.word	0xe000ed20
 800adfc:	20000014 	.word	0x20000014
 800ae00:	e000ef34 	.word	0xe000ef34

0800ae04 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ae04:	b480      	push	{r7}
 800ae06:	b083      	sub	sp, #12
 800ae08:	af00      	add	r7, sp, #0
	__asm volatile
 800ae0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae0e:	f383 8811 	msr	BASEPRI, r3
 800ae12:	f3bf 8f6f 	isb	sy
 800ae16:	f3bf 8f4f 	dsb	sy
 800ae1a:	607b      	str	r3, [r7, #4]
}
 800ae1c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ae1e:	4b0f      	ldr	r3, [pc, #60]	; (800ae5c <vPortEnterCritical+0x58>)
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	3301      	adds	r3, #1
 800ae24:	4a0d      	ldr	r2, [pc, #52]	; (800ae5c <vPortEnterCritical+0x58>)
 800ae26:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ae28:	4b0c      	ldr	r3, [pc, #48]	; (800ae5c <vPortEnterCritical+0x58>)
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	2b01      	cmp	r3, #1
 800ae2e:	d10f      	bne.n	800ae50 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ae30:	4b0b      	ldr	r3, [pc, #44]	; (800ae60 <vPortEnterCritical+0x5c>)
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	b2db      	uxtb	r3, r3
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d00a      	beq.n	800ae50 <vPortEnterCritical+0x4c>
	__asm volatile
 800ae3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae3e:	f383 8811 	msr	BASEPRI, r3
 800ae42:	f3bf 8f6f 	isb	sy
 800ae46:	f3bf 8f4f 	dsb	sy
 800ae4a:	603b      	str	r3, [r7, #0]
}
 800ae4c:	bf00      	nop
 800ae4e:	e7fe      	b.n	800ae4e <vPortEnterCritical+0x4a>
	}
}
 800ae50:	bf00      	nop
 800ae52:	370c      	adds	r7, #12
 800ae54:	46bd      	mov	sp, r7
 800ae56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae5a:	4770      	bx	lr
 800ae5c:	20000014 	.word	0x20000014
 800ae60:	e000ed04 	.word	0xe000ed04

0800ae64 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ae64:	b480      	push	{r7}
 800ae66:	b083      	sub	sp, #12
 800ae68:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ae6a:	4b12      	ldr	r3, [pc, #72]	; (800aeb4 <vPortExitCritical+0x50>)
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d10a      	bne.n	800ae88 <vPortExitCritical+0x24>
	__asm volatile
 800ae72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae76:	f383 8811 	msr	BASEPRI, r3
 800ae7a:	f3bf 8f6f 	isb	sy
 800ae7e:	f3bf 8f4f 	dsb	sy
 800ae82:	607b      	str	r3, [r7, #4]
}
 800ae84:	bf00      	nop
 800ae86:	e7fe      	b.n	800ae86 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ae88:	4b0a      	ldr	r3, [pc, #40]	; (800aeb4 <vPortExitCritical+0x50>)
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	3b01      	subs	r3, #1
 800ae8e:	4a09      	ldr	r2, [pc, #36]	; (800aeb4 <vPortExitCritical+0x50>)
 800ae90:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ae92:	4b08      	ldr	r3, [pc, #32]	; (800aeb4 <vPortExitCritical+0x50>)
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d105      	bne.n	800aea6 <vPortExitCritical+0x42>
 800ae9a:	2300      	movs	r3, #0
 800ae9c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ae9e:	683b      	ldr	r3, [r7, #0]
 800aea0:	f383 8811 	msr	BASEPRI, r3
}
 800aea4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800aea6:	bf00      	nop
 800aea8:	370c      	adds	r7, #12
 800aeaa:	46bd      	mov	sp, r7
 800aeac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb0:	4770      	bx	lr
 800aeb2:	bf00      	nop
 800aeb4:	20000014 	.word	0x20000014
	...

0800aec0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800aec0:	f3ef 8009 	mrs	r0, PSP
 800aec4:	f3bf 8f6f 	isb	sy
 800aec8:	4b15      	ldr	r3, [pc, #84]	; (800af20 <pxCurrentTCBConst>)
 800aeca:	681a      	ldr	r2, [r3, #0]
 800aecc:	f01e 0f10 	tst.w	lr, #16
 800aed0:	bf08      	it	eq
 800aed2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800aed6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aeda:	6010      	str	r0, [r2, #0]
 800aedc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800aee0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800aee4:	f380 8811 	msr	BASEPRI, r0
 800aee8:	f3bf 8f4f 	dsb	sy
 800aeec:	f3bf 8f6f 	isb	sy
 800aef0:	f7fe fee8 	bl	8009cc4 <vTaskSwitchContext>
 800aef4:	f04f 0000 	mov.w	r0, #0
 800aef8:	f380 8811 	msr	BASEPRI, r0
 800aefc:	bc09      	pop	{r0, r3}
 800aefe:	6819      	ldr	r1, [r3, #0]
 800af00:	6808      	ldr	r0, [r1, #0]
 800af02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af06:	f01e 0f10 	tst.w	lr, #16
 800af0a:	bf08      	it	eq
 800af0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800af10:	f380 8809 	msr	PSP, r0
 800af14:	f3bf 8f6f 	isb	sy
 800af18:	4770      	bx	lr
 800af1a:	bf00      	nop
 800af1c:	f3af 8000 	nop.w

0800af20 <pxCurrentTCBConst>:
 800af20:	20005598 	.word	0x20005598
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800af24:	bf00      	nop
 800af26:	bf00      	nop

0800af28 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800af28:	b580      	push	{r7, lr}
 800af2a:	b082      	sub	sp, #8
 800af2c:	af00      	add	r7, sp, #0
	__asm volatile
 800af2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af32:	f383 8811 	msr	BASEPRI, r3
 800af36:	f3bf 8f6f 	isb	sy
 800af3a:	f3bf 8f4f 	dsb	sy
 800af3e:	607b      	str	r3, [r7, #4]
}
 800af40:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800af42:	f7fe fe05 	bl	8009b50 <xTaskIncrementTick>
 800af46:	4603      	mov	r3, r0
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d003      	beq.n	800af54 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800af4c:	4b06      	ldr	r3, [pc, #24]	; (800af68 <SysTick_Handler+0x40>)
 800af4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af52:	601a      	str	r2, [r3, #0]
 800af54:	2300      	movs	r3, #0
 800af56:	603b      	str	r3, [r7, #0]
	__asm volatile
 800af58:	683b      	ldr	r3, [r7, #0]
 800af5a:	f383 8811 	msr	BASEPRI, r3
}
 800af5e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800af60:	bf00      	nop
 800af62:	3708      	adds	r7, #8
 800af64:	46bd      	mov	sp, r7
 800af66:	bd80      	pop	{r7, pc}
 800af68:	e000ed04 	.word	0xe000ed04

0800af6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800af6c:	b480      	push	{r7}
 800af6e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800af70:	4b0b      	ldr	r3, [pc, #44]	; (800afa0 <vPortSetupTimerInterrupt+0x34>)
 800af72:	2200      	movs	r2, #0
 800af74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800af76:	4b0b      	ldr	r3, [pc, #44]	; (800afa4 <vPortSetupTimerInterrupt+0x38>)
 800af78:	2200      	movs	r2, #0
 800af7a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800af7c:	4b0a      	ldr	r3, [pc, #40]	; (800afa8 <vPortSetupTimerInterrupt+0x3c>)
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	4a0a      	ldr	r2, [pc, #40]	; (800afac <vPortSetupTimerInterrupt+0x40>)
 800af82:	fba2 2303 	umull	r2, r3, r2, r3
 800af86:	099b      	lsrs	r3, r3, #6
 800af88:	4a09      	ldr	r2, [pc, #36]	; (800afb0 <vPortSetupTimerInterrupt+0x44>)
 800af8a:	3b01      	subs	r3, #1
 800af8c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800af8e:	4b04      	ldr	r3, [pc, #16]	; (800afa0 <vPortSetupTimerInterrupt+0x34>)
 800af90:	2207      	movs	r2, #7
 800af92:	601a      	str	r2, [r3, #0]
}
 800af94:	bf00      	nop
 800af96:	46bd      	mov	sp, r7
 800af98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af9c:	4770      	bx	lr
 800af9e:	bf00      	nop
 800afa0:	e000e010 	.word	0xe000e010
 800afa4:	e000e018 	.word	0xe000e018
 800afa8:	20000000 	.word	0x20000000
 800afac:	10624dd3 	.word	0x10624dd3
 800afb0:	e000e014 	.word	0xe000e014

0800afb4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800afb4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800afc4 <vPortEnableVFP+0x10>
 800afb8:	6801      	ldr	r1, [r0, #0]
 800afba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800afbe:	6001      	str	r1, [r0, #0]
 800afc0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800afc2:	bf00      	nop
 800afc4:	e000ed88 	.word	0xe000ed88

0800afc8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800afc8:	b480      	push	{r7}
 800afca:	b085      	sub	sp, #20
 800afcc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800afce:	f3ef 8305 	mrs	r3, IPSR
 800afd2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	2b0f      	cmp	r3, #15
 800afd8:	d914      	bls.n	800b004 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800afda:	4a17      	ldr	r2, [pc, #92]	; (800b038 <vPortValidateInterruptPriority+0x70>)
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	4413      	add	r3, r2
 800afe0:	781b      	ldrb	r3, [r3, #0]
 800afe2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800afe4:	4b15      	ldr	r3, [pc, #84]	; (800b03c <vPortValidateInterruptPriority+0x74>)
 800afe6:	781b      	ldrb	r3, [r3, #0]
 800afe8:	7afa      	ldrb	r2, [r7, #11]
 800afea:	429a      	cmp	r2, r3
 800afec:	d20a      	bcs.n	800b004 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800afee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aff2:	f383 8811 	msr	BASEPRI, r3
 800aff6:	f3bf 8f6f 	isb	sy
 800affa:	f3bf 8f4f 	dsb	sy
 800affe:	607b      	str	r3, [r7, #4]
}
 800b000:	bf00      	nop
 800b002:	e7fe      	b.n	800b002 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b004:	4b0e      	ldr	r3, [pc, #56]	; (800b040 <vPortValidateInterruptPriority+0x78>)
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b00c:	4b0d      	ldr	r3, [pc, #52]	; (800b044 <vPortValidateInterruptPriority+0x7c>)
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	429a      	cmp	r2, r3
 800b012:	d90a      	bls.n	800b02a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b014:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b018:	f383 8811 	msr	BASEPRI, r3
 800b01c:	f3bf 8f6f 	isb	sy
 800b020:	f3bf 8f4f 	dsb	sy
 800b024:	603b      	str	r3, [r7, #0]
}
 800b026:	bf00      	nop
 800b028:	e7fe      	b.n	800b028 <vPortValidateInterruptPriority+0x60>
	}
 800b02a:	bf00      	nop
 800b02c:	3714      	adds	r7, #20
 800b02e:	46bd      	mov	sp, r7
 800b030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b034:	4770      	bx	lr
 800b036:	bf00      	nop
 800b038:	e000e3f0 	.word	0xe000e3f0
 800b03c:	20005bc4 	.word	0x20005bc4
 800b040:	e000ed0c 	.word	0xe000ed0c
 800b044:	20005bc8 	.word	0x20005bc8

0800b048 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b048:	b580      	push	{r7, lr}
 800b04a:	b08a      	sub	sp, #40	; 0x28
 800b04c:	af00      	add	r7, sp, #0
 800b04e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b050:	2300      	movs	r3, #0
 800b052:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b054:	f7fe fcc0 	bl	80099d8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b058:	4b58      	ldr	r3, [pc, #352]	; (800b1bc <pvPortMalloc+0x174>)
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d101      	bne.n	800b064 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b060:	f000 f910 	bl	800b284 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b064:	4b56      	ldr	r3, [pc, #344]	; (800b1c0 <pvPortMalloc+0x178>)
 800b066:	681a      	ldr	r2, [r3, #0]
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	4013      	ands	r3, r2
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	f040 808e 	bne.w	800b18e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	2b00      	cmp	r3, #0
 800b076:	d01d      	beq.n	800b0b4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b078:	2208      	movs	r2, #8
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	4413      	add	r3, r2
 800b07e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	f003 0307 	and.w	r3, r3, #7
 800b086:	2b00      	cmp	r3, #0
 800b088:	d014      	beq.n	800b0b4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	f023 0307 	bic.w	r3, r3, #7
 800b090:	3308      	adds	r3, #8
 800b092:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	f003 0307 	and.w	r3, r3, #7
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d00a      	beq.n	800b0b4 <pvPortMalloc+0x6c>
	__asm volatile
 800b09e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0a2:	f383 8811 	msr	BASEPRI, r3
 800b0a6:	f3bf 8f6f 	isb	sy
 800b0aa:	f3bf 8f4f 	dsb	sy
 800b0ae:	617b      	str	r3, [r7, #20]
}
 800b0b0:	bf00      	nop
 800b0b2:	e7fe      	b.n	800b0b2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d069      	beq.n	800b18e <pvPortMalloc+0x146>
 800b0ba:	4b42      	ldr	r3, [pc, #264]	; (800b1c4 <pvPortMalloc+0x17c>)
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	687a      	ldr	r2, [r7, #4]
 800b0c0:	429a      	cmp	r2, r3
 800b0c2:	d864      	bhi.n	800b18e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b0c4:	4b40      	ldr	r3, [pc, #256]	; (800b1c8 <pvPortMalloc+0x180>)
 800b0c6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b0c8:	4b3f      	ldr	r3, [pc, #252]	; (800b1c8 <pvPortMalloc+0x180>)
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b0ce:	e004      	b.n	800b0da <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b0d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0d2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b0d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b0da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0dc:	685b      	ldr	r3, [r3, #4]
 800b0de:	687a      	ldr	r2, [r7, #4]
 800b0e0:	429a      	cmp	r2, r3
 800b0e2:	d903      	bls.n	800b0ec <pvPortMalloc+0xa4>
 800b0e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d1f1      	bne.n	800b0d0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b0ec:	4b33      	ldr	r3, [pc, #204]	; (800b1bc <pvPortMalloc+0x174>)
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b0f2:	429a      	cmp	r2, r3
 800b0f4:	d04b      	beq.n	800b18e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b0f6:	6a3b      	ldr	r3, [r7, #32]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	2208      	movs	r2, #8
 800b0fc:	4413      	add	r3, r2
 800b0fe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b102:	681a      	ldr	r2, [r3, #0]
 800b104:	6a3b      	ldr	r3, [r7, #32]
 800b106:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b10a:	685a      	ldr	r2, [r3, #4]
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	1ad2      	subs	r2, r2, r3
 800b110:	2308      	movs	r3, #8
 800b112:	005b      	lsls	r3, r3, #1
 800b114:	429a      	cmp	r2, r3
 800b116:	d91f      	bls.n	800b158 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b118:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	4413      	add	r3, r2
 800b11e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b120:	69bb      	ldr	r3, [r7, #24]
 800b122:	f003 0307 	and.w	r3, r3, #7
 800b126:	2b00      	cmp	r3, #0
 800b128:	d00a      	beq.n	800b140 <pvPortMalloc+0xf8>
	__asm volatile
 800b12a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b12e:	f383 8811 	msr	BASEPRI, r3
 800b132:	f3bf 8f6f 	isb	sy
 800b136:	f3bf 8f4f 	dsb	sy
 800b13a:	613b      	str	r3, [r7, #16]
}
 800b13c:	bf00      	nop
 800b13e:	e7fe      	b.n	800b13e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b142:	685a      	ldr	r2, [r3, #4]
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	1ad2      	subs	r2, r2, r3
 800b148:	69bb      	ldr	r3, [r7, #24]
 800b14a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b14c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b14e:	687a      	ldr	r2, [r7, #4]
 800b150:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b152:	69b8      	ldr	r0, [r7, #24]
 800b154:	f000 f8f8 	bl	800b348 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b158:	4b1a      	ldr	r3, [pc, #104]	; (800b1c4 <pvPortMalloc+0x17c>)
 800b15a:	681a      	ldr	r2, [r3, #0]
 800b15c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b15e:	685b      	ldr	r3, [r3, #4]
 800b160:	1ad3      	subs	r3, r2, r3
 800b162:	4a18      	ldr	r2, [pc, #96]	; (800b1c4 <pvPortMalloc+0x17c>)
 800b164:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b166:	4b17      	ldr	r3, [pc, #92]	; (800b1c4 <pvPortMalloc+0x17c>)
 800b168:	681a      	ldr	r2, [r3, #0]
 800b16a:	4b18      	ldr	r3, [pc, #96]	; (800b1cc <pvPortMalloc+0x184>)
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	429a      	cmp	r2, r3
 800b170:	d203      	bcs.n	800b17a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b172:	4b14      	ldr	r3, [pc, #80]	; (800b1c4 <pvPortMalloc+0x17c>)
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	4a15      	ldr	r2, [pc, #84]	; (800b1cc <pvPortMalloc+0x184>)
 800b178:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b17a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b17c:	685a      	ldr	r2, [r3, #4]
 800b17e:	4b10      	ldr	r3, [pc, #64]	; (800b1c0 <pvPortMalloc+0x178>)
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	431a      	orrs	r2, r3
 800b184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b186:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b18a:	2200      	movs	r2, #0
 800b18c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b18e:	f7fe fc31 	bl	80099f4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b192:	69fb      	ldr	r3, [r7, #28]
 800b194:	f003 0307 	and.w	r3, r3, #7
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d00a      	beq.n	800b1b2 <pvPortMalloc+0x16a>
	__asm volatile
 800b19c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1a0:	f383 8811 	msr	BASEPRI, r3
 800b1a4:	f3bf 8f6f 	isb	sy
 800b1a8:	f3bf 8f4f 	dsb	sy
 800b1ac:	60fb      	str	r3, [r7, #12]
}
 800b1ae:	bf00      	nop
 800b1b0:	e7fe      	b.n	800b1b0 <pvPortMalloc+0x168>
	return pvReturn;
 800b1b2:	69fb      	ldr	r3, [r7, #28]
}
 800b1b4:	4618      	mov	r0, r3
 800b1b6:	3728      	adds	r7, #40	; 0x28
 800b1b8:	46bd      	mov	sp, r7
 800b1ba:	bd80      	pop	{r7, pc}
 800b1bc:	200097d4 	.word	0x200097d4
 800b1c0:	200097e0 	.word	0x200097e0
 800b1c4:	200097d8 	.word	0x200097d8
 800b1c8:	200097cc 	.word	0x200097cc
 800b1cc:	200097dc 	.word	0x200097dc

0800b1d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b1d0:	b580      	push	{r7, lr}
 800b1d2:	b086      	sub	sp, #24
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d048      	beq.n	800b274 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b1e2:	2308      	movs	r3, #8
 800b1e4:	425b      	negs	r3, r3
 800b1e6:	697a      	ldr	r2, [r7, #20]
 800b1e8:	4413      	add	r3, r2
 800b1ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b1ec:	697b      	ldr	r3, [r7, #20]
 800b1ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b1f0:	693b      	ldr	r3, [r7, #16]
 800b1f2:	685a      	ldr	r2, [r3, #4]
 800b1f4:	4b21      	ldr	r3, [pc, #132]	; (800b27c <vPortFree+0xac>)
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	4013      	ands	r3, r2
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d10a      	bne.n	800b214 <vPortFree+0x44>
	__asm volatile
 800b1fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b202:	f383 8811 	msr	BASEPRI, r3
 800b206:	f3bf 8f6f 	isb	sy
 800b20a:	f3bf 8f4f 	dsb	sy
 800b20e:	60fb      	str	r3, [r7, #12]
}
 800b210:	bf00      	nop
 800b212:	e7fe      	b.n	800b212 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b214:	693b      	ldr	r3, [r7, #16]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d00a      	beq.n	800b232 <vPortFree+0x62>
	__asm volatile
 800b21c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b220:	f383 8811 	msr	BASEPRI, r3
 800b224:	f3bf 8f6f 	isb	sy
 800b228:	f3bf 8f4f 	dsb	sy
 800b22c:	60bb      	str	r3, [r7, #8]
}
 800b22e:	bf00      	nop
 800b230:	e7fe      	b.n	800b230 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b232:	693b      	ldr	r3, [r7, #16]
 800b234:	685a      	ldr	r2, [r3, #4]
 800b236:	4b11      	ldr	r3, [pc, #68]	; (800b27c <vPortFree+0xac>)
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	4013      	ands	r3, r2
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d019      	beq.n	800b274 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b240:	693b      	ldr	r3, [r7, #16]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	2b00      	cmp	r3, #0
 800b246:	d115      	bne.n	800b274 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b248:	693b      	ldr	r3, [r7, #16]
 800b24a:	685a      	ldr	r2, [r3, #4]
 800b24c:	4b0b      	ldr	r3, [pc, #44]	; (800b27c <vPortFree+0xac>)
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	43db      	mvns	r3, r3
 800b252:	401a      	ands	r2, r3
 800b254:	693b      	ldr	r3, [r7, #16]
 800b256:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b258:	f7fe fbbe 	bl	80099d8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b25c:	693b      	ldr	r3, [r7, #16]
 800b25e:	685a      	ldr	r2, [r3, #4]
 800b260:	4b07      	ldr	r3, [pc, #28]	; (800b280 <vPortFree+0xb0>)
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	4413      	add	r3, r2
 800b266:	4a06      	ldr	r2, [pc, #24]	; (800b280 <vPortFree+0xb0>)
 800b268:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b26a:	6938      	ldr	r0, [r7, #16]
 800b26c:	f000 f86c 	bl	800b348 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800b270:	f7fe fbc0 	bl	80099f4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b274:	bf00      	nop
 800b276:	3718      	adds	r7, #24
 800b278:	46bd      	mov	sp, r7
 800b27a:	bd80      	pop	{r7, pc}
 800b27c:	200097e0 	.word	0x200097e0
 800b280:	200097d8 	.word	0x200097d8

0800b284 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b284:	b480      	push	{r7}
 800b286:	b085      	sub	sp, #20
 800b288:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b28a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800b28e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b290:	4b27      	ldr	r3, [pc, #156]	; (800b330 <prvHeapInit+0xac>)
 800b292:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	f003 0307 	and.w	r3, r3, #7
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d00c      	beq.n	800b2b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	3307      	adds	r3, #7
 800b2a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	f023 0307 	bic.w	r3, r3, #7
 800b2aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b2ac:	68ba      	ldr	r2, [r7, #8]
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	1ad3      	subs	r3, r2, r3
 800b2b2:	4a1f      	ldr	r2, [pc, #124]	; (800b330 <prvHeapInit+0xac>)
 800b2b4:	4413      	add	r3, r2
 800b2b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b2bc:	4a1d      	ldr	r2, [pc, #116]	; (800b334 <prvHeapInit+0xb0>)
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b2c2:	4b1c      	ldr	r3, [pc, #112]	; (800b334 <prvHeapInit+0xb0>)
 800b2c4:	2200      	movs	r2, #0
 800b2c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	68ba      	ldr	r2, [r7, #8]
 800b2cc:	4413      	add	r3, r2
 800b2ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b2d0:	2208      	movs	r2, #8
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	1a9b      	subs	r3, r3, r2
 800b2d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	f023 0307 	bic.w	r3, r3, #7
 800b2de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	4a15      	ldr	r2, [pc, #84]	; (800b338 <prvHeapInit+0xb4>)
 800b2e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b2e6:	4b14      	ldr	r3, [pc, #80]	; (800b338 <prvHeapInit+0xb4>)
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	2200      	movs	r2, #0
 800b2ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b2ee:	4b12      	ldr	r3, [pc, #72]	; (800b338 <prvHeapInit+0xb4>)
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	2200      	movs	r2, #0
 800b2f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b2fa:	683b      	ldr	r3, [r7, #0]
 800b2fc:	68fa      	ldr	r2, [r7, #12]
 800b2fe:	1ad2      	subs	r2, r2, r3
 800b300:	683b      	ldr	r3, [r7, #0]
 800b302:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b304:	4b0c      	ldr	r3, [pc, #48]	; (800b338 <prvHeapInit+0xb4>)
 800b306:	681a      	ldr	r2, [r3, #0]
 800b308:	683b      	ldr	r3, [r7, #0]
 800b30a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b30c:	683b      	ldr	r3, [r7, #0]
 800b30e:	685b      	ldr	r3, [r3, #4]
 800b310:	4a0a      	ldr	r2, [pc, #40]	; (800b33c <prvHeapInit+0xb8>)
 800b312:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b314:	683b      	ldr	r3, [r7, #0]
 800b316:	685b      	ldr	r3, [r3, #4]
 800b318:	4a09      	ldr	r2, [pc, #36]	; (800b340 <prvHeapInit+0xbc>)
 800b31a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b31c:	4b09      	ldr	r3, [pc, #36]	; (800b344 <prvHeapInit+0xc0>)
 800b31e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b322:	601a      	str	r2, [r3, #0]
}
 800b324:	bf00      	nop
 800b326:	3714      	adds	r7, #20
 800b328:	46bd      	mov	sp, r7
 800b32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b32e:	4770      	bx	lr
 800b330:	20005bcc 	.word	0x20005bcc
 800b334:	200097cc 	.word	0x200097cc
 800b338:	200097d4 	.word	0x200097d4
 800b33c:	200097dc 	.word	0x200097dc
 800b340:	200097d8 	.word	0x200097d8
 800b344:	200097e0 	.word	0x200097e0

0800b348 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b348:	b480      	push	{r7}
 800b34a:	b085      	sub	sp, #20
 800b34c:	af00      	add	r7, sp, #0
 800b34e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b350:	4b28      	ldr	r3, [pc, #160]	; (800b3f4 <prvInsertBlockIntoFreeList+0xac>)
 800b352:	60fb      	str	r3, [r7, #12]
 800b354:	e002      	b.n	800b35c <prvInsertBlockIntoFreeList+0x14>
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	60fb      	str	r3, [r7, #12]
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	687a      	ldr	r2, [r7, #4]
 800b362:	429a      	cmp	r2, r3
 800b364:	d8f7      	bhi.n	800b356 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	685b      	ldr	r3, [r3, #4]
 800b36e:	68ba      	ldr	r2, [r7, #8]
 800b370:	4413      	add	r3, r2
 800b372:	687a      	ldr	r2, [r7, #4]
 800b374:	429a      	cmp	r2, r3
 800b376:	d108      	bne.n	800b38a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	685a      	ldr	r2, [r3, #4]
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	685b      	ldr	r3, [r3, #4]
 800b380:	441a      	add	r2, r3
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	685b      	ldr	r3, [r3, #4]
 800b392:	68ba      	ldr	r2, [r7, #8]
 800b394:	441a      	add	r2, r3
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	429a      	cmp	r2, r3
 800b39c:	d118      	bne.n	800b3d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	681a      	ldr	r2, [r3, #0]
 800b3a2:	4b15      	ldr	r3, [pc, #84]	; (800b3f8 <prvInsertBlockIntoFreeList+0xb0>)
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	429a      	cmp	r2, r3
 800b3a8:	d00d      	beq.n	800b3c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	685a      	ldr	r2, [r3, #4]
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	685b      	ldr	r3, [r3, #4]
 800b3b4:	441a      	add	r2, r3
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	681a      	ldr	r2, [r3, #0]
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	601a      	str	r2, [r3, #0]
 800b3c4:	e008      	b.n	800b3d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b3c6:	4b0c      	ldr	r3, [pc, #48]	; (800b3f8 <prvInsertBlockIntoFreeList+0xb0>)
 800b3c8:	681a      	ldr	r2, [r3, #0]
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	601a      	str	r2, [r3, #0]
 800b3ce:	e003      	b.n	800b3d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	681a      	ldr	r2, [r3, #0]
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b3d8:	68fa      	ldr	r2, [r7, #12]
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	429a      	cmp	r2, r3
 800b3de:	d002      	beq.n	800b3e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	687a      	ldr	r2, [r7, #4]
 800b3e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b3e6:	bf00      	nop
 800b3e8:	3714      	adds	r7, #20
 800b3ea:	46bd      	mov	sp, r7
 800b3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f0:	4770      	bx	lr
 800b3f2:	bf00      	nop
 800b3f4:	200097cc 	.word	0x200097cc
 800b3f8:	200097d4 	.word	0x200097d4

0800b3fc <__libc_init_array>:
 800b3fc:	b570      	push	{r4, r5, r6, lr}
 800b3fe:	4d0d      	ldr	r5, [pc, #52]	; (800b434 <__libc_init_array+0x38>)
 800b400:	4c0d      	ldr	r4, [pc, #52]	; (800b438 <__libc_init_array+0x3c>)
 800b402:	1b64      	subs	r4, r4, r5
 800b404:	10a4      	asrs	r4, r4, #2
 800b406:	2600      	movs	r6, #0
 800b408:	42a6      	cmp	r6, r4
 800b40a:	d109      	bne.n	800b420 <__libc_init_array+0x24>
 800b40c:	4d0b      	ldr	r5, [pc, #44]	; (800b43c <__libc_init_array+0x40>)
 800b40e:	4c0c      	ldr	r4, [pc, #48]	; (800b440 <__libc_init_array+0x44>)
 800b410:	f000 f82e 	bl	800b470 <_init>
 800b414:	1b64      	subs	r4, r4, r5
 800b416:	10a4      	asrs	r4, r4, #2
 800b418:	2600      	movs	r6, #0
 800b41a:	42a6      	cmp	r6, r4
 800b41c:	d105      	bne.n	800b42a <__libc_init_array+0x2e>
 800b41e:	bd70      	pop	{r4, r5, r6, pc}
 800b420:	f855 3b04 	ldr.w	r3, [r5], #4
 800b424:	4798      	blx	r3
 800b426:	3601      	adds	r6, #1
 800b428:	e7ee      	b.n	800b408 <__libc_init_array+0xc>
 800b42a:	f855 3b04 	ldr.w	r3, [r5], #4
 800b42e:	4798      	blx	r3
 800b430:	3601      	adds	r6, #1
 800b432:	e7f2      	b.n	800b41a <__libc_init_array+0x1e>
 800b434:	0800b5b4 	.word	0x0800b5b4
 800b438:	0800b5b4 	.word	0x0800b5b4
 800b43c:	0800b5b4 	.word	0x0800b5b4
 800b440:	0800b5b8 	.word	0x0800b5b8

0800b444 <memcpy>:
 800b444:	440a      	add	r2, r1
 800b446:	4291      	cmp	r1, r2
 800b448:	f100 33ff 	add.w	r3, r0, #4294967295
 800b44c:	d100      	bne.n	800b450 <memcpy+0xc>
 800b44e:	4770      	bx	lr
 800b450:	b510      	push	{r4, lr}
 800b452:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b456:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b45a:	4291      	cmp	r1, r2
 800b45c:	d1f9      	bne.n	800b452 <memcpy+0xe>
 800b45e:	bd10      	pop	{r4, pc}

0800b460 <memset>:
 800b460:	4402      	add	r2, r0
 800b462:	4603      	mov	r3, r0
 800b464:	4293      	cmp	r3, r2
 800b466:	d100      	bne.n	800b46a <memset+0xa>
 800b468:	4770      	bx	lr
 800b46a:	f803 1b01 	strb.w	r1, [r3], #1
 800b46e:	e7f9      	b.n	800b464 <memset+0x4>

0800b470 <_init>:
 800b470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b472:	bf00      	nop
 800b474:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b476:	bc08      	pop	{r3}
 800b478:	469e      	mov	lr, r3
 800b47a:	4770      	bx	lr

0800b47c <_fini>:
 800b47c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b47e:	bf00      	nop
 800b480:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b482:	bc08      	pop	{r3}
 800b484:	469e      	mov	lr, r3
 800b486:	4770      	bx	lr
