
OS_sentry.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c584  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002d8  0800c738  0800c738  0001c738  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ca10  0800ca10  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  0800ca10  0800ca10  0001ca10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ca18  0800ca18  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ca18  0800ca18  0001ca18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ca1c  0800ca1c  0001ca1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  0800ca20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009e88  20000018  0800ca38  00020018  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20009ea0  0800ca38  00029ea0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00032776  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006086  00000000  00000000  000527be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ad0  00000000  00000000  00058848  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001828  00000000  00000000  0005a318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a0a1  00000000  00000000  0005bb40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023614  00000000  00000000  00085be1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e73bc  00000000  00000000  000a91f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001905b1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006f9c  00000000  00000000  00190604  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000018 	.word	0x20000018
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800c71c 	.word	0x0800c71c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000001c 	.word	0x2000001c
 80001ec:	0800c71c 	.word	0x0800c71c

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	; 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	3c01      	subs	r4, #1
 800032c:	bf28      	it	cs
 800032e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000332:	d2e9      	bcs.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004da:	bf08      	it	eq
 80004dc:	4770      	bxeq	lr
 80004de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004e2:	bf04      	itt	eq
 80004e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e71c      	b.n	8000334 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_ul2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	e00a      	b.n	8000522 <__aeabi_l2d+0x16>

0800050c <__aeabi_l2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800051a:	d502      	bpl.n	8000522 <__aeabi_l2d+0x16>
 800051c:	4240      	negs	r0, r0
 800051e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000522:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000526:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052e:	f43f aed8 	beq.w	80002e2 <__adddf3+0xe6>
 8000532:	f04f 0203 	mov.w	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054a:	f1c2 0320 	rsb	r3, r2, #32
 800054e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000552:	fa20 f002 	lsr.w	r0, r0, r2
 8000556:	fa01 fe03 	lsl.w	lr, r1, r3
 800055a:	ea40 000e 	orr.w	r0, r0, lr
 800055e:	fa21 f102 	lsr.w	r1, r1, r2
 8000562:	4414      	add	r4, r2
 8000564:	e6bd      	b.n	80002e2 <__adddf3+0xe6>
 8000566:	bf00      	nop

08000568 <__aeabi_dmul>:
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800056e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000572:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000576:	bf1d      	ittte	ne
 8000578:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800057c:	ea94 0f0c 	teqne	r4, ip
 8000580:	ea95 0f0c 	teqne	r5, ip
 8000584:	f000 f8de 	bleq	8000744 <__aeabi_dmul+0x1dc>
 8000588:	442c      	add	r4, r5
 800058a:	ea81 0603 	eor.w	r6, r1, r3
 800058e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000592:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000596:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800059a:	bf18      	it	ne
 800059c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a8:	d038      	beq.n	800061c <__aeabi_dmul+0xb4>
 80005aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005be:	f04f 0600 	mov.w	r6, #0
 80005c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c6:	f09c 0f00 	teq	ip, #0
 80005ca:	bf18      	it	ne
 80005cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005dc:	d204      	bcs.n	80005e8 <__aeabi_dmul+0x80>
 80005de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005e2:	416d      	adcs	r5, r5
 80005e4:	eb46 0606 	adc.w	r6, r6, r6
 80005e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000600:	bf88      	it	hi
 8000602:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000606:	d81e      	bhi.n	8000646 <__aeabi_dmul+0xde>
 8000608:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800060c:	bf08      	it	eq
 800060e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000612:	f150 0000 	adcs.w	r0, r0, #0
 8000616:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000620:	ea46 0101 	orr.w	r1, r6, r1
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	ea81 0103 	eor.w	r1, r1, r3
 800062c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000630:	bfc2      	ittt	gt
 8000632:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000636:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800063a:	bd70      	popgt	{r4, r5, r6, pc}
 800063c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000640:	f04f 0e00 	mov.w	lr, #0
 8000644:	3c01      	subs	r4, #1
 8000646:	f300 80ab 	bgt.w	80007a0 <__aeabi_dmul+0x238>
 800064a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800064e:	bfde      	ittt	le
 8000650:	2000      	movle	r0, #0
 8000652:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd70      	pople	{r4, r5, r6, pc}
 8000658:	f1c4 0400 	rsb	r4, r4, #0
 800065c:	3c20      	subs	r4, #32
 800065e:	da35      	bge.n	80006cc <__aeabi_dmul+0x164>
 8000660:	340c      	adds	r4, #12
 8000662:	dc1b      	bgt.n	800069c <__aeabi_dmul+0x134>
 8000664:	f104 0414 	add.w	r4, r4, #20
 8000668:	f1c4 0520 	rsb	r5, r4, #32
 800066c:	fa00 f305 	lsl.w	r3, r0, r5
 8000670:	fa20 f004 	lsr.w	r0, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea40 0002 	orr.w	r0, r0, r2
 800067c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000680:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000684:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000688:	fa21 f604 	lsr.w	r6, r1, r4
 800068c:	eb42 0106 	adc.w	r1, r2, r6
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 040c 	rsb	r4, r4, #12
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f304 	lsl.w	r3, r0, r4
 80006a8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ac:	fa01 f204 	lsl.w	r2, r1, r4
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006bc:	f141 0100 	adc.w	r1, r1, #0
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f205 	lsl.w	r2, r0, r5
 80006d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d8:	fa20 f304 	lsr.w	r3, r0, r4
 80006dc:	fa01 f205 	lsl.w	r2, r1, r5
 80006e0:	ea43 0302 	orr.w	r3, r3, r2
 80006e4:	fa21 f004 	lsr.w	r0, r1, r4
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	fa21 f204 	lsr.w	r2, r1, r4
 80006f0:	ea20 0002 	bic.w	r0, r0, r2
 80006f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f094 0f00 	teq	r4, #0
 8000708:	d10f      	bne.n	800072a <__aeabi_dmul+0x1c2>
 800070a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800070e:	0040      	lsls	r0, r0, #1
 8000710:	eb41 0101 	adc.w	r1, r1, r1
 8000714:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3c01      	subeq	r4, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1a6>
 800071e:	ea41 0106 	orr.w	r1, r1, r6
 8000722:	f095 0f00 	teq	r5, #0
 8000726:	bf18      	it	ne
 8000728:	4770      	bxne	lr
 800072a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800072e:	0052      	lsls	r2, r2, #1
 8000730:	eb43 0303 	adc.w	r3, r3, r3
 8000734:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3d01      	subeq	r5, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1c6>
 800073e:	ea43 0306 	orr.w	r3, r3, r6
 8000742:	4770      	bx	lr
 8000744:	ea94 0f0c 	teq	r4, ip
 8000748:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800074c:	bf18      	it	ne
 800074e:	ea95 0f0c 	teqne	r5, ip
 8000752:	d00c      	beq.n	800076e <__aeabi_dmul+0x206>
 8000754:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000758:	bf18      	it	ne
 800075a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075e:	d1d1      	bne.n	8000704 <__aeabi_dmul+0x19c>
 8000760:	ea81 0103 	eor.w	r1, r1, r3
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd70      	pop	{r4, r5, r6, pc}
 800076e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000772:	bf06      	itte	eq
 8000774:	4610      	moveq	r0, r2
 8000776:	4619      	moveq	r1, r3
 8000778:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077c:	d019      	beq.n	80007b2 <__aeabi_dmul+0x24a>
 800077e:	ea94 0f0c 	teq	r4, ip
 8000782:	d102      	bne.n	800078a <__aeabi_dmul+0x222>
 8000784:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000788:	d113      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800078a:	ea95 0f0c 	teq	r5, ip
 800078e:	d105      	bne.n	800079c <__aeabi_dmul+0x234>
 8000790:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000794:	bf1c      	itt	ne
 8000796:	4610      	movne	r0, r2
 8000798:	4619      	movne	r1, r3
 800079a:	d10a      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800079c:	ea81 0103 	eor.w	r1, r1, r3
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ac:	f04f 0000 	mov.w	r0, #0
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ba:	bd70      	pop	{r4, r5, r6, pc}

080007bc <__aeabi_ddiv>:
 80007bc:	b570      	push	{r4, r5, r6, lr}
 80007be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ca:	bf1d      	ittte	ne
 80007cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d0:	ea94 0f0c 	teqne	r4, ip
 80007d4:	ea95 0f0c 	teqne	r5, ip
 80007d8:	f000 f8a7 	bleq	800092a <__aeabi_ddiv+0x16e>
 80007dc:	eba4 0405 	sub.w	r4, r4, r5
 80007e0:	ea81 0e03 	eor.w	lr, r1, r3
 80007e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007ec:	f000 8088 	beq.w	8000900 <__aeabi_ddiv+0x144>
 80007f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000800:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000804:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000808:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800080c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000810:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000814:	429d      	cmp	r5, r3
 8000816:	bf08      	it	eq
 8000818:	4296      	cmpeq	r6, r2
 800081a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800081e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000822:	d202      	bcs.n	800082a <__aeabi_ddiv+0x6e>
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	1ab6      	subs	r6, r6, r2
 800082c:	eb65 0503 	sbc.w	r5, r5, r3
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800083a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000898:	ea55 0e06 	orrs.w	lr, r5, r6
 800089c:	d018      	beq.n	80008d0 <__aeabi_ddiv+0x114>
 800089e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ba:	d1c0      	bne.n	800083e <__aeabi_ddiv+0x82>
 80008bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c0:	d10b      	bne.n	80008da <__aeabi_ddiv+0x11e>
 80008c2:	ea41 0100 	orr.w	r1, r1, r0
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ce:	e7b6      	b.n	800083e <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d4:	bf04      	itt	eq
 80008d6:	4301      	orreq	r1, r0
 80008d8:	2000      	moveq	r0, #0
 80008da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008de:	bf88      	it	hi
 80008e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e4:	f63f aeaf 	bhi.w	8000646 <__aeabi_dmul+0xde>
 80008e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008ec:	bf04      	itt	eq
 80008ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f6:	f150 0000 	adcs.w	r0, r0, #0
 80008fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	pop	{r4, r5, r6, pc}
 8000900:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000904:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000908:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800090c:	bfc2      	ittt	gt
 800090e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000912:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000916:	bd70      	popgt	{r4, r5, r6, pc}
 8000918:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800091c:	f04f 0e00 	mov.w	lr, #0
 8000920:	3c01      	subs	r4, #1
 8000922:	e690      	b.n	8000646 <__aeabi_dmul+0xde>
 8000924:	ea45 0e06 	orr.w	lr, r5, r6
 8000928:	e68d      	b.n	8000646 <__aeabi_dmul+0xde>
 800092a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	bf08      	it	eq
 8000934:	ea95 0f0c 	teqeq	r5, ip
 8000938:	f43f af3b 	beq.w	80007b2 <__aeabi_dmul+0x24a>
 800093c:	ea94 0f0c 	teq	r4, ip
 8000940:	d10a      	bne.n	8000958 <__aeabi_ddiv+0x19c>
 8000942:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000946:	f47f af34 	bne.w	80007b2 <__aeabi_dmul+0x24a>
 800094a:	ea95 0f0c 	teq	r5, ip
 800094e:	f47f af25 	bne.w	800079c <__aeabi_dmul+0x234>
 8000952:	4610      	mov	r0, r2
 8000954:	4619      	mov	r1, r3
 8000956:	e72c      	b.n	80007b2 <__aeabi_dmul+0x24a>
 8000958:	ea95 0f0c 	teq	r5, ip
 800095c:	d106      	bne.n	800096c <__aeabi_ddiv+0x1b0>
 800095e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000962:	f43f aefd 	beq.w	8000760 <__aeabi_dmul+0x1f8>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e722      	b.n	80007b2 <__aeabi_dmul+0x24a>
 800096c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000970:	bf18      	it	ne
 8000972:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000976:	f47f aec5 	bne.w	8000704 <__aeabi_dmul+0x19c>
 800097a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097e:	f47f af0d 	bne.w	800079c <__aeabi_dmul+0x234>
 8000982:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000986:	f47f aeeb 	bne.w	8000760 <__aeabi_dmul+0x1f8>
 800098a:	e712      	b.n	80007b2 <__aeabi_dmul+0x24a>

0800098c <__gedf2>:
 800098c:	f04f 3cff 	mov.w	ip, #4294967295
 8000990:	e006      	b.n	80009a0 <__cmpdf2+0x4>
 8000992:	bf00      	nop

08000994 <__ledf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	e002      	b.n	80009a0 <__cmpdf2+0x4>
 800099a:	bf00      	nop

0800099c <__cmpdf2>:
 800099c:	f04f 0c01 	mov.w	ip, #1
 80009a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009b6:	d01b      	beq.n	80009f0 <__cmpdf2+0x54>
 80009b8:	b001      	add	sp, #4
 80009ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009be:	bf0c      	ite	eq
 80009c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009c4:	ea91 0f03 	teqne	r1, r3
 80009c8:	bf02      	ittt	eq
 80009ca:	ea90 0f02 	teqeq	r0, r2
 80009ce:	2000      	moveq	r0, #0
 80009d0:	4770      	bxeq	lr
 80009d2:	f110 0f00 	cmn.w	r0, #0
 80009d6:	ea91 0f03 	teq	r1, r3
 80009da:	bf58      	it	pl
 80009dc:	4299      	cmppl	r1, r3
 80009de:	bf08      	it	eq
 80009e0:	4290      	cmpeq	r0, r2
 80009e2:	bf2c      	ite	cs
 80009e4:	17d8      	asrcs	r0, r3, #31
 80009e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ea:	f040 0001 	orr.w	r0, r0, #1
 80009ee:	4770      	bx	lr
 80009f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d102      	bne.n	8000a00 <__cmpdf2+0x64>
 80009fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009fe:	d107      	bne.n	8000a10 <__cmpdf2+0x74>
 8000a00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	d1d6      	bne.n	80009b8 <__cmpdf2+0x1c>
 8000a0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a0e:	d0d3      	beq.n	80009b8 <__cmpdf2+0x1c>
 8000a10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdrcmple>:
 8000a18:	4684      	mov	ip, r0
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4662      	mov	r2, ip
 8000a1e:	468c      	mov	ip, r1
 8000a20:	4619      	mov	r1, r3
 8000a22:	4663      	mov	r3, ip
 8000a24:	e000      	b.n	8000a28 <__aeabi_cdcmpeq>
 8000a26:	bf00      	nop

08000a28 <__aeabi_cdcmpeq>:
 8000a28:	b501      	push	{r0, lr}
 8000a2a:	f7ff ffb7 	bl	800099c <__cmpdf2>
 8000a2e:	2800      	cmp	r0, #0
 8000a30:	bf48      	it	mi
 8000a32:	f110 0f00 	cmnmi.w	r0, #0
 8000a36:	bd01      	pop	{r0, pc}

08000a38 <__aeabi_dcmpeq>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff fff4 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a40:	bf0c      	ite	eq
 8000a42:	2001      	moveq	r0, #1
 8000a44:	2000      	movne	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmplt>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffea 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a54:	bf34      	ite	cc
 8000a56:	2001      	movcc	r0, #1
 8000a58:	2000      	movcs	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmple>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffe0 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a68:	bf94      	ite	ls
 8000a6a:	2001      	movls	r0, #1
 8000a6c:	2000      	movhi	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpge>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffce 	bl	8000a18 <__aeabi_cdrcmple>
 8000a7c:	bf94      	ite	ls
 8000a7e:	2001      	movls	r0, #1
 8000a80:	2000      	movhi	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmpgt>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffc4 	bl	8000a18 <__aeabi_cdrcmple>
 8000a90:	bf34      	ite	cc
 8000a92:	2001      	movcc	r0, #1
 8000a94:	2000      	movcs	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2iz>:
 8000a9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa4:	d215      	bcs.n	8000ad2 <__aeabi_d2iz+0x36>
 8000aa6:	d511      	bpl.n	8000acc <__aeabi_d2iz+0x30>
 8000aa8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab0:	d912      	bls.n	8000ad8 <__aeabi_d2iz+0x3c>
 8000ab2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000abe:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ac2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac6:	bf18      	it	ne
 8000ac8:	4240      	negne	r0, r0
 8000aca:	4770      	bx	lr
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ad6:	d105      	bne.n	8000ae4 <__aeabi_d2iz+0x48>
 8000ad8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000adc:	bf08      	it	eq
 8000ade:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ae2:	4770      	bx	lr
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_d2f>:
 8000aec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000af4:	bf24      	itt	cs
 8000af6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000afa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000afe:	d90d      	bls.n	8000b1c <__aeabi_d2f+0x30>
 8000b00:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b04:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b08:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b0c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b10:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b14:	bf08      	it	eq
 8000b16:	f020 0001 	biceq.w	r0, r0, #1
 8000b1a:	4770      	bx	lr
 8000b1c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b20:	d121      	bne.n	8000b66 <__aeabi_d2f+0x7a>
 8000b22:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b26:	bfbc      	itt	lt
 8000b28:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b2c:	4770      	bxlt	lr
 8000b2e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b32:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b36:	f1c2 0218 	rsb	r2, r2, #24
 8000b3a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b3e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b42:	fa20 f002 	lsr.w	r0, r0, r2
 8000b46:	bf18      	it	ne
 8000b48:	f040 0001 	orrne.w	r0, r0, #1
 8000b4c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b50:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b54:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b58:	ea40 000c 	orr.w	r0, r0, ip
 8000b5c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b60:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b64:	e7cc      	b.n	8000b00 <__aeabi_d2f+0x14>
 8000b66:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b6a:	d107      	bne.n	8000b7c <__aeabi_d2f+0x90>
 8000b6c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b70:	bf1e      	ittt	ne
 8000b72:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b76:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b7a:	4770      	bxne	lr
 8000b7c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b80:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b84:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop

08000b8c <__aeabi_uldivmod>:
 8000b8c:	b953      	cbnz	r3, 8000ba4 <__aeabi_uldivmod+0x18>
 8000b8e:	b94a      	cbnz	r2, 8000ba4 <__aeabi_uldivmod+0x18>
 8000b90:	2900      	cmp	r1, #0
 8000b92:	bf08      	it	eq
 8000b94:	2800      	cmpeq	r0, #0
 8000b96:	bf1c      	itt	ne
 8000b98:	f04f 31ff 	movne.w	r1, #4294967295
 8000b9c:	f04f 30ff 	movne.w	r0, #4294967295
 8000ba0:	f000 b96e 	b.w	8000e80 <__aeabi_idiv0>
 8000ba4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ba8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bac:	f000 f806 	bl	8000bbc <__udivmoddi4>
 8000bb0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bb8:	b004      	add	sp, #16
 8000bba:	4770      	bx	lr

08000bbc <__udivmoddi4>:
 8000bbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bc0:	9d08      	ldr	r5, [sp, #32]
 8000bc2:	4604      	mov	r4, r0
 8000bc4:	468c      	mov	ip, r1
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	f040 8083 	bne.w	8000cd2 <__udivmoddi4+0x116>
 8000bcc:	428a      	cmp	r2, r1
 8000bce:	4617      	mov	r7, r2
 8000bd0:	d947      	bls.n	8000c62 <__udivmoddi4+0xa6>
 8000bd2:	fab2 f282 	clz	r2, r2
 8000bd6:	b142      	cbz	r2, 8000bea <__udivmoddi4+0x2e>
 8000bd8:	f1c2 0020 	rsb	r0, r2, #32
 8000bdc:	fa24 f000 	lsr.w	r0, r4, r0
 8000be0:	4091      	lsls	r1, r2
 8000be2:	4097      	lsls	r7, r2
 8000be4:	ea40 0c01 	orr.w	ip, r0, r1
 8000be8:	4094      	lsls	r4, r2
 8000bea:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000bee:	0c23      	lsrs	r3, r4, #16
 8000bf0:	fbbc f6f8 	udiv	r6, ip, r8
 8000bf4:	fa1f fe87 	uxth.w	lr, r7
 8000bf8:	fb08 c116 	mls	r1, r8, r6, ip
 8000bfc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c00:	fb06 f10e 	mul.w	r1, r6, lr
 8000c04:	4299      	cmp	r1, r3
 8000c06:	d909      	bls.n	8000c1c <__udivmoddi4+0x60>
 8000c08:	18fb      	adds	r3, r7, r3
 8000c0a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c0e:	f080 8119 	bcs.w	8000e44 <__udivmoddi4+0x288>
 8000c12:	4299      	cmp	r1, r3
 8000c14:	f240 8116 	bls.w	8000e44 <__udivmoddi4+0x288>
 8000c18:	3e02      	subs	r6, #2
 8000c1a:	443b      	add	r3, r7
 8000c1c:	1a5b      	subs	r3, r3, r1
 8000c1e:	b2a4      	uxth	r4, r4
 8000c20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c24:	fb08 3310 	mls	r3, r8, r0, r3
 8000c28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c2c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c30:	45a6      	cmp	lr, r4
 8000c32:	d909      	bls.n	8000c48 <__udivmoddi4+0x8c>
 8000c34:	193c      	adds	r4, r7, r4
 8000c36:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c3a:	f080 8105 	bcs.w	8000e48 <__udivmoddi4+0x28c>
 8000c3e:	45a6      	cmp	lr, r4
 8000c40:	f240 8102 	bls.w	8000e48 <__udivmoddi4+0x28c>
 8000c44:	3802      	subs	r0, #2
 8000c46:	443c      	add	r4, r7
 8000c48:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c4c:	eba4 040e 	sub.w	r4, r4, lr
 8000c50:	2600      	movs	r6, #0
 8000c52:	b11d      	cbz	r5, 8000c5c <__udivmoddi4+0xa0>
 8000c54:	40d4      	lsrs	r4, r2
 8000c56:	2300      	movs	r3, #0
 8000c58:	e9c5 4300 	strd	r4, r3, [r5]
 8000c5c:	4631      	mov	r1, r6
 8000c5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c62:	b902      	cbnz	r2, 8000c66 <__udivmoddi4+0xaa>
 8000c64:	deff      	udf	#255	; 0xff
 8000c66:	fab2 f282 	clz	r2, r2
 8000c6a:	2a00      	cmp	r2, #0
 8000c6c:	d150      	bne.n	8000d10 <__udivmoddi4+0x154>
 8000c6e:	1bcb      	subs	r3, r1, r7
 8000c70:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c74:	fa1f f887 	uxth.w	r8, r7
 8000c78:	2601      	movs	r6, #1
 8000c7a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c7e:	0c21      	lsrs	r1, r4, #16
 8000c80:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c88:	fb08 f30c 	mul.w	r3, r8, ip
 8000c8c:	428b      	cmp	r3, r1
 8000c8e:	d907      	bls.n	8000ca0 <__udivmoddi4+0xe4>
 8000c90:	1879      	adds	r1, r7, r1
 8000c92:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c96:	d202      	bcs.n	8000c9e <__udivmoddi4+0xe2>
 8000c98:	428b      	cmp	r3, r1
 8000c9a:	f200 80e9 	bhi.w	8000e70 <__udivmoddi4+0x2b4>
 8000c9e:	4684      	mov	ip, r0
 8000ca0:	1ac9      	subs	r1, r1, r3
 8000ca2:	b2a3      	uxth	r3, r4
 8000ca4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ca8:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cac:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cb0:	fb08 f800 	mul.w	r8, r8, r0
 8000cb4:	45a0      	cmp	r8, r4
 8000cb6:	d907      	bls.n	8000cc8 <__udivmoddi4+0x10c>
 8000cb8:	193c      	adds	r4, r7, r4
 8000cba:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cbe:	d202      	bcs.n	8000cc6 <__udivmoddi4+0x10a>
 8000cc0:	45a0      	cmp	r8, r4
 8000cc2:	f200 80d9 	bhi.w	8000e78 <__udivmoddi4+0x2bc>
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	eba4 0408 	sub.w	r4, r4, r8
 8000ccc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cd0:	e7bf      	b.n	8000c52 <__udivmoddi4+0x96>
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d909      	bls.n	8000cea <__udivmoddi4+0x12e>
 8000cd6:	2d00      	cmp	r5, #0
 8000cd8:	f000 80b1 	beq.w	8000e3e <__udivmoddi4+0x282>
 8000cdc:	2600      	movs	r6, #0
 8000cde:	e9c5 0100 	strd	r0, r1, [r5]
 8000ce2:	4630      	mov	r0, r6
 8000ce4:	4631      	mov	r1, r6
 8000ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cea:	fab3 f683 	clz	r6, r3
 8000cee:	2e00      	cmp	r6, #0
 8000cf0:	d14a      	bne.n	8000d88 <__udivmoddi4+0x1cc>
 8000cf2:	428b      	cmp	r3, r1
 8000cf4:	d302      	bcc.n	8000cfc <__udivmoddi4+0x140>
 8000cf6:	4282      	cmp	r2, r0
 8000cf8:	f200 80b8 	bhi.w	8000e6c <__udivmoddi4+0x2b0>
 8000cfc:	1a84      	subs	r4, r0, r2
 8000cfe:	eb61 0103 	sbc.w	r1, r1, r3
 8000d02:	2001      	movs	r0, #1
 8000d04:	468c      	mov	ip, r1
 8000d06:	2d00      	cmp	r5, #0
 8000d08:	d0a8      	beq.n	8000c5c <__udivmoddi4+0xa0>
 8000d0a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d0e:	e7a5      	b.n	8000c5c <__udivmoddi4+0xa0>
 8000d10:	f1c2 0320 	rsb	r3, r2, #32
 8000d14:	fa20 f603 	lsr.w	r6, r0, r3
 8000d18:	4097      	lsls	r7, r2
 8000d1a:	fa01 f002 	lsl.w	r0, r1, r2
 8000d1e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d22:	40d9      	lsrs	r1, r3
 8000d24:	4330      	orrs	r0, r6
 8000d26:	0c03      	lsrs	r3, r0, #16
 8000d28:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d2c:	fa1f f887 	uxth.w	r8, r7
 8000d30:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d34:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d38:	fb06 f108 	mul.w	r1, r6, r8
 8000d3c:	4299      	cmp	r1, r3
 8000d3e:	fa04 f402 	lsl.w	r4, r4, r2
 8000d42:	d909      	bls.n	8000d58 <__udivmoddi4+0x19c>
 8000d44:	18fb      	adds	r3, r7, r3
 8000d46:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d4a:	f080 808d 	bcs.w	8000e68 <__udivmoddi4+0x2ac>
 8000d4e:	4299      	cmp	r1, r3
 8000d50:	f240 808a 	bls.w	8000e68 <__udivmoddi4+0x2ac>
 8000d54:	3e02      	subs	r6, #2
 8000d56:	443b      	add	r3, r7
 8000d58:	1a5b      	subs	r3, r3, r1
 8000d5a:	b281      	uxth	r1, r0
 8000d5c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d60:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d68:	fb00 f308 	mul.w	r3, r0, r8
 8000d6c:	428b      	cmp	r3, r1
 8000d6e:	d907      	bls.n	8000d80 <__udivmoddi4+0x1c4>
 8000d70:	1879      	adds	r1, r7, r1
 8000d72:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d76:	d273      	bcs.n	8000e60 <__udivmoddi4+0x2a4>
 8000d78:	428b      	cmp	r3, r1
 8000d7a:	d971      	bls.n	8000e60 <__udivmoddi4+0x2a4>
 8000d7c:	3802      	subs	r0, #2
 8000d7e:	4439      	add	r1, r7
 8000d80:	1acb      	subs	r3, r1, r3
 8000d82:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d86:	e778      	b.n	8000c7a <__udivmoddi4+0xbe>
 8000d88:	f1c6 0c20 	rsb	ip, r6, #32
 8000d8c:	fa03 f406 	lsl.w	r4, r3, r6
 8000d90:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d94:	431c      	orrs	r4, r3
 8000d96:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d9a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d9e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000da2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000da6:	431f      	orrs	r7, r3
 8000da8:	0c3b      	lsrs	r3, r7, #16
 8000daa:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dae:	fa1f f884 	uxth.w	r8, r4
 8000db2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000db6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dba:	fb09 fa08 	mul.w	sl, r9, r8
 8000dbe:	458a      	cmp	sl, r1
 8000dc0:	fa02 f206 	lsl.w	r2, r2, r6
 8000dc4:	fa00 f306 	lsl.w	r3, r0, r6
 8000dc8:	d908      	bls.n	8000ddc <__udivmoddi4+0x220>
 8000dca:	1861      	adds	r1, r4, r1
 8000dcc:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dd0:	d248      	bcs.n	8000e64 <__udivmoddi4+0x2a8>
 8000dd2:	458a      	cmp	sl, r1
 8000dd4:	d946      	bls.n	8000e64 <__udivmoddi4+0x2a8>
 8000dd6:	f1a9 0902 	sub.w	r9, r9, #2
 8000dda:	4421      	add	r1, r4
 8000ddc:	eba1 010a 	sub.w	r1, r1, sl
 8000de0:	b2bf      	uxth	r7, r7
 8000de2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000de6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000dea:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000dee:	fb00 f808 	mul.w	r8, r0, r8
 8000df2:	45b8      	cmp	r8, r7
 8000df4:	d907      	bls.n	8000e06 <__udivmoddi4+0x24a>
 8000df6:	19e7      	adds	r7, r4, r7
 8000df8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dfc:	d22e      	bcs.n	8000e5c <__udivmoddi4+0x2a0>
 8000dfe:	45b8      	cmp	r8, r7
 8000e00:	d92c      	bls.n	8000e5c <__udivmoddi4+0x2a0>
 8000e02:	3802      	subs	r0, #2
 8000e04:	4427      	add	r7, r4
 8000e06:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e0a:	eba7 0708 	sub.w	r7, r7, r8
 8000e0e:	fba0 8902 	umull	r8, r9, r0, r2
 8000e12:	454f      	cmp	r7, r9
 8000e14:	46c6      	mov	lr, r8
 8000e16:	4649      	mov	r1, r9
 8000e18:	d31a      	bcc.n	8000e50 <__udivmoddi4+0x294>
 8000e1a:	d017      	beq.n	8000e4c <__udivmoddi4+0x290>
 8000e1c:	b15d      	cbz	r5, 8000e36 <__udivmoddi4+0x27a>
 8000e1e:	ebb3 020e 	subs.w	r2, r3, lr
 8000e22:	eb67 0701 	sbc.w	r7, r7, r1
 8000e26:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e2a:	40f2      	lsrs	r2, r6
 8000e2c:	ea4c 0202 	orr.w	r2, ip, r2
 8000e30:	40f7      	lsrs	r7, r6
 8000e32:	e9c5 2700 	strd	r2, r7, [r5]
 8000e36:	2600      	movs	r6, #0
 8000e38:	4631      	mov	r1, r6
 8000e3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e3e:	462e      	mov	r6, r5
 8000e40:	4628      	mov	r0, r5
 8000e42:	e70b      	b.n	8000c5c <__udivmoddi4+0xa0>
 8000e44:	4606      	mov	r6, r0
 8000e46:	e6e9      	b.n	8000c1c <__udivmoddi4+0x60>
 8000e48:	4618      	mov	r0, r3
 8000e4a:	e6fd      	b.n	8000c48 <__udivmoddi4+0x8c>
 8000e4c:	4543      	cmp	r3, r8
 8000e4e:	d2e5      	bcs.n	8000e1c <__udivmoddi4+0x260>
 8000e50:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e54:	eb69 0104 	sbc.w	r1, r9, r4
 8000e58:	3801      	subs	r0, #1
 8000e5a:	e7df      	b.n	8000e1c <__udivmoddi4+0x260>
 8000e5c:	4608      	mov	r0, r1
 8000e5e:	e7d2      	b.n	8000e06 <__udivmoddi4+0x24a>
 8000e60:	4660      	mov	r0, ip
 8000e62:	e78d      	b.n	8000d80 <__udivmoddi4+0x1c4>
 8000e64:	4681      	mov	r9, r0
 8000e66:	e7b9      	b.n	8000ddc <__udivmoddi4+0x220>
 8000e68:	4666      	mov	r6, ip
 8000e6a:	e775      	b.n	8000d58 <__udivmoddi4+0x19c>
 8000e6c:	4630      	mov	r0, r6
 8000e6e:	e74a      	b.n	8000d06 <__udivmoddi4+0x14a>
 8000e70:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e74:	4439      	add	r1, r7
 8000e76:	e713      	b.n	8000ca0 <__udivmoddi4+0xe4>
 8000e78:	3802      	subs	r0, #2
 8000e7a:	443c      	add	r4, r7
 8000e7c:	e724      	b.n	8000cc8 <__udivmoddi4+0x10c>
 8000e7e:	bf00      	nop

08000e80 <__aeabi_idiv0>:
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop

08000e84 <buzzer>:

#include "board_lib.h"
#include "bsp_buzzer.h"

void buzzer(uint16_t freq)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b083      	sub	sp, #12
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	80fb      	strh	r3, [r7, #6]
	if (freq == 0)
 8000e8e:	88fb      	ldrh	r3, [r7, #6]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d104      	bne.n	8000e9e <buzzer+0x1a>
	{
		htim12.Instance->CCR1 = 0;
 8000e94:	4b0b      	ldr	r3, [pc, #44]	; (8000ec4 <buzzer+0x40>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	2200      	movs	r2, #0
 8000e9a:	635a      	str	r2, [r3, #52]	; 0x34
	else
	{
		__HAL_TIM_SET_PRESCALER(&htim12, (84 * 500/freq));
		htim12.Instance->CCR1 = 500;
	}
}
 8000e9c:	e00c      	b.n	8000eb8 <buzzer+0x34>
		__HAL_TIM_SET_PRESCALER(&htim12, (84 * 500/freq));
 8000e9e:	88fb      	ldrh	r3, [r7, #6]
 8000ea0:	f24a 4210 	movw	r2, #42000	; 0xa410
 8000ea4:	fb92 f2f3 	sdiv	r2, r2, r3
 8000ea8:	4b06      	ldr	r3, [pc, #24]	; (8000ec4 <buzzer+0x40>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	629a      	str	r2, [r3, #40]	; 0x28
		htim12.Instance->CCR1 = 500;
 8000eae:	4b05      	ldr	r3, [pc, #20]	; (8000ec4 <buzzer+0x40>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000eb6:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000eb8:	bf00      	nop
 8000eba:	370c      	adds	r7, #12
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr
 8000ec4:	200099f4 	.word	0x200099f4

08000ec8 <buzzer_init>:


void buzzer_init()
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
	  HAL_TIM_PWM_Start(&htim12,TIM_CHANNEL_1);
 8000ecc:	2100      	movs	r1, #0
 8000ece:	4804      	ldr	r0, [pc, #16]	; (8000ee0 <buzzer_init+0x18>)
 8000ed0:	f005 f906 	bl	80060e0 <HAL_TIM_PWM_Start>
	  htim12.Instance->CCR1 = 0;
 8000ed4:	4b02      	ldr	r3, [pc, #8]	; (8000ee0 <buzzer_init+0x18>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	2200      	movs	r2, #0
 8000eda:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000edc:	bf00      	nop
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	200099f4 	.word	0x200099f4

08000ee4 <HAL_CAN_RxFifo0MsgPendingCallback>:

/**
 * HAL internal callback function that calls abstracted ISR for ease of use.
 * Define can_ISR() elsewhere in code to define behaviour of CAN receive ISR.
 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
	can_ISR(hcan);
 8000eec:	6878      	ldr	r0, [r7, #4]
 8000eee:	f001 fa61 	bl	80023b4 <can_ISR>
}
 8000ef2:	bf00      	nop
 8000ef4:	3708      	adds	r7, #8
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}

08000efa <can_get_msg>:

HAL_StatusTypeDef can_get_msg(CAN_HandleTypeDef *hcan, CAN_RxHeaderTypeDef *rx_msg_header, uint8_t *rx_buffer)
{
 8000efa:	b580      	push	{r7, lr}
 8000efc:	b084      	sub	sp, #16
 8000efe:	af00      	add	r7, sp, #0
 8000f00:	60f8      	str	r0, [r7, #12]
 8000f02:	60b9      	str	r1, [r7, #8]
 8000f04:	607a      	str	r2, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, rx_msg_header, rx_buffer);
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	68ba      	ldr	r2, [r7, #8]
 8000f0a:	2100      	movs	r1, #0
 8000f0c:	68f8      	ldr	r0, [r7, #12]
 8000f0e:	f003 f9aa 	bl	8004266 <HAL_CAN_GetRxMessage>
	return HAL_OK;
 8000f12:	2300      	movs	r3, #0
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	3710      	adds	r7, #16
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}

08000f1c <can_start>:


/**
 * CAN1 and CAN2 are handled slightly differently.
 */
void can_start(CAN_HandleTypeDef *hcan) {
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b08c      	sub	sp, #48	; 0x30
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
    CAN_FilterTypeDef can_filter_st = {0};
 8000f24:	f107 0308 	add.w	r3, r7, #8
 8000f28:	2228      	movs	r2, #40	; 0x28
 8000f2a:	2100      	movs	r1, #0
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f00a fb67 	bl	800b600 <memset>
    can_filter_st.FilterActivation = ENABLE;
 8000f32:	2301      	movs	r3, #1
 8000f34:	62bb      	str	r3, [r7, #40]	; 0x28
	can_filter_st.FilterMode = CAN_FILTERMODE_IDMASK;
 8000f36:	2300      	movs	r3, #0
 8000f38:	623b      	str	r3, [r7, #32]
	can_filter_st.FilterScale = CAN_FILTERSCALE_32BIT;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	627b      	str	r3, [r7, #36]	; 0x24
	can_filter_st.FilterIdHigh = 0x0000;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	60bb      	str	r3, [r7, #8]
	can_filter_st.FilterIdLow = 0x0000;
 8000f42:	2300      	movs	r3, #0
 8000f44:	60fb      	str	r3, [r7, #12]
	can_filter_st.FilterMaskIdHigh = 0x0000;
 8000f46:	2300      	movs	r3, #0
 8000f48:	613b      	str	r3, [r7, #16]
	can_filter_st.FilterMaskIdLow = 0x0000;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	617b      	str	r3, [r7, #20]
    can_filter_st.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	61bb      	str	r3, [r7, #24]
    // can_filter_st.FilterFIFOAssignment = CAN_RX_FIFO1; // Uncomment line if using RX1 queue as well.

	if (hcan->Instance == CAN1) {
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4a10      	ldr	r2, [pc, #64]	; (8000f98 <can_start+0x7c>)
 8000f58:	4293      	cmp	r3, r2
 8000f5a:	d102      	bne.n	8000f62 <can_start+0x46>
	    can_filter_st.FilterBank = 0;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	61fb      	str	r3, [r7, #28]
 8000f60:	e008      	b.n	8000f74 <can_start+0x58>
	} else if (hcan->Instance == CAN2) {
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4a0d      	ldr	r2, [pc, #52]	; (8000f9c <can_start+0x80>)
 8000f68:	4293      	cmp	r3, r2
 8000f6a:	d103      	bne.n	8000f74 <can_start+0x58>
		can_filter_st.SlaveStartFilterBank = 14;
 8000f6c:	230e      	movs	r3, #14
 8000f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
		can_filter_st.FilterBank = 14;
 8000f70:	230e      	movs	r3, #14
 8000f72:	61fb      	str	r3, [r7, #28]
	}

    HAL_CAN_ConfigFilter(hcan, &can_filter_st);
 8000f74:	f107 0308 	add.w	r3, r7, #8
 8000f78:	4619      	mov	r1, r3
 8000f7a:	6878      	ldr	r0, [r7, #4]
 8000f7c:	f002 ff74 	bl	8003e68 <HAL_CAN_ConfigFilter>
    HAL_CAN_Start(hcan);
 8000f80:	6878      	ldr	r0, [r7, #4]
 8000f82:	f003 f851 	bl	8004028 <HAL_CAN_Start>
    HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000f86:	2102      	movs	r1, #2
 8000f88:	6878      	ldr	r0, [r7, #4]
 8000f8a:	f003 fa7e 	bl	800448a <HAL_CAN_ActivateNotification>
    // HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO1_MSG_PENDING); // Uncomment line if using RX1 queue as well.
}
 8000f8e:	bf00      	nop
 8000f90:	3730      	adds	r7, #48	; 0x30
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	40006400 	.word	0x40006400
 8000f9c:	40006800 	.word	0x40006800

08000fa0 <dbus_remote_start>:
/**
 * This function starts the circular DMA for receiving on a UART port. It is specifically
 * written for the UART1 port for DBUS interface from the controller.
 */
HAL_StatusTypeDef dbus_remote_start(uint8_t *pData)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b086      	sub	sp, #24
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
	UART_HandleTypeDef *huart = &DBUS_UART;
 8000fa8:	4b33      	ldr	r3, [pc, #204]	; (8001078 <dbus_remote_start+0xd8>)
 8000faa:	617b      	str	r3, [r7, #20]
	uint32_t *tmp;

	/* Check that a Rx process is not already ongoing */
	if (huart->RxState == HAL_UART_STATE_READY) {
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8000fb2:	b2db      	uxtb	r3, r3
 8000fb4:	2b20      	cmp	r3, #32
 8000fb6:	d15a      	bne.n	800106e <dbus_remote_start+0xce>
		if ((pData == NULL) || (REMOTE_DATA_SIZE == 0U)) {
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d101      	bne.n	8000fc2 <dbus_remote_start+0x22>
			return HAL_ERROR;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	e056      	b.n	8001070 <dbus_remote_start+0xd0>
		}

		/* Process Locked */
		__HAL_LOCK(huart);
 8000fc2:	697b      	ldr	r3, [r7, #20]
 8000fc4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000fc8:	2b01      	cmp	r3, #1
 8000fca:	d101      	bne.n	8000fd0 <dbus_remote_start+0x30>
 8000fcc:	2302      	movs	r3, #2
 8000fce:	e04f      	b.n	8001070 <dbus_remote_start+0xd0>
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

		huart->pRxBuffPtr = pData;
 8000fd8:	687a      	ldr	r2, [r7, #4]
 8000fda:	697b      	ldr	r3, [r7, #20]
 8000fdc:	629a      	str	r2, [r3, #40]	; 0x28
		huart->RxXferSize = REMOTE_DATA_SIZE;
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	2212      	movs	r2, #18
 8000fe2:	859a      	strh	r2, [r3, #44]	; 0x2c

		huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	63da      	str	r2, [r3, #60]	; 0x3c
		huart->RxState = HAL_UART_STATE_BUSY_RX;
 8000fea:	697b      	ldr	r3, [r7, #20]
 8000fec:	2222      	movs	r2, #34	; 0x22
 8000fee:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

		/* Set the UART DMA transfer complete callback */
		huart->hdmarx->XferCpltCallback = dbus_remote_ISR;
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ff6:	4a21      	ldr	r2, [pc, #132]	; (800107c <dbus_remote_start+0xdc>)
 8000ff8:	63da      	str	r2, [r3, #60]	; 0x3c

		/* Set the DMA abort callback */
		huart->hdmarx->XferAbortCallback = NULL;
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ffe:	2200      	movs	r2, #0
 8001000:	651a      	str	r2, [r3, #80]	; 0x50

		/* Enable the DMA stream */
		tmp = (uint32_t *)&pData;
 8001002:	1d3b      	adds	r3, r7, #4
 8001004:	613b      	str	r3, [r7, #16]
		HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, REMOTE_DATA_SIZE);
 8001006:	697b      	ldr	r3, [r7, #20]
 8001008:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	3304      	adds	r3, #4
 8001010:	4619      	mov	r1, r3
 8001012:	693b      	ldr	r3, [r7, #16]
 8001014:	681a      	ldr	r2, [r3, #0]
 8001016:	2312      	movs	r3, #18
 8001018:	f003 fe44 	bl	8004ca4 <HAL_DMA_Start_IT>

		/* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
		__HAL_UART_CLEAR_OREFLAG(huart);
 800101c:	2300      	movs	r3, #0
 800101e:	60fb      	str	r3, [r7, #12]
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	60fb      	str	r3, [r7, #12]
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	60fb      	str	r3, [r7, #12]
 8001030:	68fb      	ldr	r3, [r7, #12]

		/* Process Unlocked */
		__HAL_UNLOCK(huart);
 8001032:	697b      	ldr	r3, [r7, #20]
 8001034:	2200      	movs	r2, #0
 8001036:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

		/* Enable the UART Parity Error Interrupt */
		SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800103a:	697b      	ldr	r3, [r7, #20]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	68da      	ldr	r2, [r3, #12]
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001048:	60da      	str	r2, [r3, #12]

		/* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
		SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	695a      	ldr	r2, [r3, #20]
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f042 0201 	orr.w	r2, r2, #1
 8001058:	615a      	str	r2, [r3, #20]

		/* Enable the DMA transfer for the receiver request by setting the DMAR bit
	    in the UART CR3 register */
		SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	695a      	ldr	r2, [r3, #20]
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001068:	615a      	str	r2, [r3, #20]

		return HAL_OK;
 800106a:	2300      	movs	r3, #0
 800106c:	e000      	b.n	8001070 <dbus_remote_start+0xd0>
	} else {
		return HAL_BUSY;
 800106e:	2302      	movs	r3, #2
	}
}
 8001070:	4618      	mov	r0, r3
 8001072:	3718      	adds	r7, #24
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	20009b94 	.word	0x20009b94
 800107c:	080036f5 	.word	0x080036f5

08001080 <GPIO_ToggleBits>:
 *      Author: Kai Yang
 */

#include "bsp_led.h"

void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin){
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
 8001088:	460b      	mov	r3, r1
 800108a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  /* points to address of GPIOx register and does bitwise XOR with bit GPIO_Pin */
  GPIOx->ODR ^= GPIO_Pin;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	695a      	ldr	r2, [r3, #20]
 8001090:	887b      	ldrh	r3, [r7, #2]
 8001092:	405a      	eors	r2, r3
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	615a      	str	r2, [r3, #20]
}
 8001098:	bf00      	nop
 800109a:	370c      	adds	r7, #12
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr

080010a4 <led_green_off>:

/* calls HAL library function to directly write pin.             */
/* LEDs are active low, so SET (1) == off, while RESET (0) == on */
/* Definitions for LED port and pins are given in main.h file    */
void led_green_off(void){
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_SET);
 80010a8:	2201      	movs	r2, #1
 80010aa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010ae:	4802      	ldr	r0, [pc, #8]	; (80010b8 <led_green_off+0x14>)
 80010b0:	f004 fa88 	bl	80055c4 <HAL_GPIO_WritePin>
}
 80010b4:	bf00      	nop
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	40021400 	.word	0x40021400

080010bc <led_on>:

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_SET);
}

void led_on(void){
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);
 80010c0:	2200      	movs	r2, #0
 80010c2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010c6:	4805      	ldr	r0, [pc, #20]	; (80010dc <led_on+0x20>)
 80010c8:	f004 fa7c 	bl	80055c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, GPIO_PIN_RESET);
 80010cc:	2200      	movs	r2, #0
 80010ce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010d2:	4803      	ldr	r0, [pc, #12]	; (80010e0 <led_on+0x24>)
 80010d4:	f004 fa76 	bl	80055c4 <HAL_GPIO_WritePin>
}
 80010d8:	bf00      	nop
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	40021000 	.word	0x40021000
 80010e0:	40021400 	.word	0x40021400

080010e4 <led_toggle>:
void led_toggle(void){
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
	GPIO_ToggleBits(GPIOE, GPIO_PIN_11);
 80010e8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010ec:	4804      	ldr	r0, [pc, #16]	; (8001100 <led_toggle+0x1c>)
 80010ee:	f7ff ffc7 	bl	8001080 <GPIO_ToggleBits>
	GPIO_ToggleBits(GPIOF, GPIO_PIN_14);
 80010f2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010f6:	4803      	ldr	r0, [pc, #12]	; (8001104 <led_toggle+0x20>)
 80010f8:	f7ff ffc2 	bl	8001080 <GPIO_ToggleBits>
}
 80010fc:	bf00      	nop
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	40021000 	.word	0x40021000
 8001104:	40021400 	.word	0x40021400

08001108 <HAL_UART_RxCpltCallback>:
{
	HAL_UART_Transmit(huart, tx_buffer, buffer_size, timeout);
	return HAL_OK;
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle) {
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
	usart_ISR(UartHandle);
 8001110:	6878      	ldr	r0, [r7, #4]
 8001112:	f001 fb5f 	bl	80027d4 <usart_ISR>
}
 8001116:	bf00      	nop
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
	...

08001120 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 8001124:	4b17      	ldr	r3, [pc, #92]	; (8001184 <MX_CAN1_Init+0x64>)
 8001126:	4a18      	ldr	r2, [pc, #96]	; (8001188 <MX_CAN1_Init+0x68>)
 8001128:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 800112a:	4b16      	ldr	r3, [pc, #88]	; (8001184 <MX_CAN1_Init+0x64>)
 800112c:	2203      	movs	r2, #3
 800112e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001130:	4b14      	ldr	r3, [pc, #80]	; (8001184 <MX_CAN1_Init+0x64>)
 8001132:	2200      	movs	r2, #0
 8001134:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001136:	4b13      	ldr	r3, [pc, #76]	; (8001184 <MX_CAN1_Init+0x64>)
 8001138:	2200      	movs	r2, #0
 800113a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_9TQ;
 800113c:	4b11      	ldr	r3, [pc, #68]	; (8001184 <MX_CAN1_Init+0x64>)
 800113e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001142:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 8001144:	4b0f      	ldr	r3, [pc, #60]	; (8001184 <MX_CAN1_Init+0x64>)
 8001146:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 800114a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800114c:	4b0d      	ldr	r3, [pc, #52]	; (8001184 <MX_CAN1_Init+0x64>)
 800114e:	2200      	movs	r2, #0
 8001150:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001152:	4b0c      	ldr	r3, [pc, #48]	; (8001184 <MX_CAN1_Init+0x64>)
 8001154:	2200      	movs	r2, #0
 8001156:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001158:	4b0a      	ldr	r3, [pc, #40]	; (8001184 <MX_CAN1_Init+0x64>)
 800115a:	2200      	movs	r2, #0
 800115c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800115e:	4b09      	ldr	r3, [pc, #36]	; (8001184 <MX_CAN1_Init+0x64>)
 8001160:	2200      	movs	r2, #0
 8001162:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001164:	4b07      	ldr	r3, [pc, #28]	; (8001184 <MX_CAN1_Init+0x64>)
 8001166:	2200      	movs	r2, #0
 8001168:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800116a:	4b06      	ldr	r3, [pc, #24]	; (8001184 <MX_CAN1_Init+0x64>)
 800116c:	2200      	movs	r2, #0
 800116e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001170:	4804      	ldr	r0, [pc, #16]	; (8001184 <MX_CAN1_Init+0x64>)
 8001172:	f002 fd7d 	bl	8003c70 <HAL_CAN_Init>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 800117c:	f000 fb52 	bl	8001824 <Error_Handler>
  }

}
 8001180:	bf00      	nop
 8001182:	bd80      	pop	{r7, pc}
 8001184:	20009800 	.word	0x20009800
 8001188:	40006400 	.word	0x40006400

0800118c <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0

  hcan2.Instance = CAN2;
 8001190:	4b17      	ldr	r3, [pc, #92]	; (80011f0 <MX_CAN2_Init+0x64>)
 8001192:	4a18      	ldr	r2, [pc, #96]	; (80011f4 <MX_CAN2_Init+0x68>)
 8001194:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 3;
 8001196:	4b16      	ldr	r3, [pc, #88]	; (80011f0 <MX_CAN2_Init+0x64>)
 8001198:	2203      	movs	r2, #3
 800119a:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 800119c:	4b14      	ldr	r3, [pc, #80]	; (80011f0 <MX_CAN2_Init+0x64>)
 800119e:	2200      	movs	r2, #0
 80011a0:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80011a2:	4b13      	ldr	r3, [pc, #76]	; (80011f0 <MX_CAN2_Init+0x64>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_9TQ;
 80011a8:	4b11      	ldr	r3, [pc, #68]	; (80011f0 <MX_CAN2_Init+0x64>)
 80011aa:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80011ae:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_4TQ;
 80011b0:	4b0f      	ldr	r3, [pc, #60]	; (80011f0 <MX_CAN2_Init+0x64>)
 80011b2:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 80011b6:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 80011b8:	4b0d      	ldr	r3, [pc, #52]	; (80011f0 <MX_CAN2_Init+0x64>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 80011be:	4b0c      	ldr	r3, [pc, #48]	; (80011f0 <MX_CAN2_Init+0x64>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 80011c4:	4b0a      	ldr	r3, [pc, #40]	; (80011f0 <MX_CAN2_Init+0x64>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 80011ca:	4b09      	ldr	r3, [pc, #36]	; (80011f0 <MX_CAN2_Init+0x64>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 80011d0:	4b07      	ldr	r3, [pc, #28]	; (80011f0 <MX_CAN2_Init+0x64>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 80011d6:	4b06      	ldr	r3, [pc, #24]	; (80011f0 <MX_CAN2_Init+0x64>)
 80011d8:	2200      	movs	r2, #0
 80011da:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80011dc:	4804      	ldr	r0, [pc, #16]	; (80011f0 <MX_CAN2_Init+0x64>)
 80011de:	f002 fd47 	bl	8003c70 <HAL_CAN_Init>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 80011e8:	f000 fb1c 	bl	8001824 <Error_Handler>
  }

}
 80011ec:	bf00      	nop
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	200097d8 	.word	0x200097d8
 80011f4:	40006800 	.word	0x40006800

080011f8 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b08c      	sub	sp, #48	; 0x30
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001200:	f107 031c 	add.w	r3, r7, #28
 8001204:	2200      	movs	r2, #0
 8001206:	601a      	str	r2, [r3, #0]
 8001208:	605a      	str	r2, [r3, #4]
 800120a:	609a      	str	r2, [r3, #8]
 800120c:	60da      	str	r2, [r3, #12]
 800120e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a4a      	ldr	r2, [pc, #296]	; (8001340 <HAL_CAN_MspInit+0x148>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d13d      	bne.n	8001296 <HAL_CAN_MspInit+0x9e>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 800121a:	4b4a      	ldr	r3, [pc, #296]	; (8001344 <HAL_CAN_MspInit+0x14c>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	3301      	adds	r3, #1
 8001220:	4a48      	ldr	r2, [pc, #288]	; (8001344 <HAL_CAN_MspInit+0x14c>)
 8001222:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001224:	4b47      	ldr	r3, [pc, #284]	; (8001344 <HAL_CAN_MspInit+0x14c>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	2b01      	cmp	r3, #1
 800122a:	d10d      	bne.n	8001248 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800122c:	2300      	movs	r3, #0
 800122e:	61bb      	str	r3, [r7, #24]
 8001230:	4b45      	ldr	r3, [pc, #276]	; (8001348 <HAL_CAN_MspInit+0x150>)
 8001232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001234:	4a44      	ldr	r2, [pc, #272]	; (8001348 <HAL_CAN_MspInit+0x150>)
 8001236:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800123a:	6413      	str	r3, [r2, #64]	; 0x40
 800123c:	4b42      	ldr	r3, [pc, #264]	; (8001348 <HAL_CAN_MspInit+0x150>)
 800123e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001240:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001244:	61bb      	str	r3, [r7, #24]
 8001246:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001248:	2300      	movs	r3, #0
 800124a:	617b      	str	r3, [r7, #20]
 800124c:	4b3e      	ldr	r3, [pc, #248]	; (8001348 <HAL_CAN_MspInit+0x150>)
 800124e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001250:	4a3d      	ldr	r2, [pc, #244]	; (8001348 <HAL_CAN_MspInit+0x150>)
 8001252:	f043 0308 	orr.w	r3, r3, #8
 8001256:	6313      	str	r3, [r2, #48]	; 0x30
 8001258:	4b3b      	ldr	r3, [pc, #236]	; (8001348 <HAL_CAN_MspInit+0x150>)
 800125a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125c:	f003 0308 	and.w	r3, r3, #8
 8001260:	617b      	str	r3, [r7, #20]
 8001262:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001264:	2303      	movs	r3, #3
 8001266:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001268:	2302      	movs	r3, #2
 800126a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126c:	2300      	movs	r3, #0
 800126e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001270:	2303      	movs	r3, #3
 8001272:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001274:	2309      	movs	r3, #9
 8001276:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001278:	f107 031c 	add.w	r3, r7, #28
 800127c:	4619      	mov	r1, r3
 800127e:	4833      	ldr	r0, [pc, #204]	; (800134c <HAL_CAN_MspInit+0x154>)
 8001280:	f003 fff4 	bl	800526c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8001284:	2200      	movs	r2, #0
 8001286:	2105      	movs	r1, #5
 8001288:	2014      	movs	r0, #20
 800128a:	f003 fc33 	bl	8004af4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800128e:	2014      	movs	r0, #20
 8001290:	f003 fc4c 	bl	8004b2c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 8001294:	e050      	b.n	8001338 <HAL_CAN_MspInit+0x140>
  else if(canHandle->Instance==CAN2)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4a2d      	ldr	r2, [pc, #180]	; (8001350 <HAL_CAN_MspInit+0x158>)
 800129c:	4293      	cmp	r3, r2
 800129e:	d14b      	bne.n	8001338 <HAL_CAN_MspInit+0x140>
    __HAL_RCC_CAN2_CLK_ENABLE();
 80012a0:	2300      	movs	r3, #0
 80012a2:	613b      	str	r3, [r7, #16]
 80012a4:	4b28      	ldr	r3, [pc, #160]	; (8001348 <HAL_CAN_MspInit+0x150>)
 80012a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a8:	4a27      	ldr	r2, [pc, #156]	; (8001348 <HAL_CAN_MspInit+0x150>)
 80012aa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80012ae:	6413      	str	r3, [r2, #64]	; 0x40
 80012b0:	4b25      	ldr	r3, [pc, #148]	; (8001348 <HAL_CAN_MspInit+0x150>)
 80012b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80012b8:	613b      	str	r3, [r7, #16]
 80012ba:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 80012bc:	4b21      	ldr	r3, [pc, #132]	; (8001344 <HAL_CAN_MspInit+0x14c>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	3301      	adds	r3, #1
 80012c2:	4a20      	ldr	r2, [pc, #128]	; (8001344 <HAL_CAN_MspInit+0x14c>)
 80012c4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80012c6:	4b1f      	ldr	r3, [pc, #124]	; (8001344 <HAL_CAN_MspInit+0x14c>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	2b01      	cmp	r3, #1
 80012cc:	d10d      	bne.n	80012ea <HAL_CAN_MspInit+0xf2>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80012ce:	2300      	movs	r3, #0
 80012d0:	60fb      	str	r3, [r7, #12]
 80012d2:	4b1d      	ldr	r3, [pc, #116]	; (8001348 <HAL_CAN_MspInit+0x150>)
 80012d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d6:	4a1c      	ldr	r2, [pc, #112]	; (8001348 <HAL_CAN_MspInit+0x150>)
 80012d8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80012dc:	6413      	str	r3, [r2, #64]	; 0x40
 80012de:	4b1a      	ldr	r3, [pc, #104]	; (8001348 <HAL_CAN_MspInit+0x150>)
 80012e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012e6:	60fb      	str	r3, [r7, #12]
 80012e8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ea:	2300      	movs	r3, #0
 80012ec:	60bb      	str	r3, [r7, #8]
 80012ee:	4b16      	ldr	r3, [pc, #88]	; (8001348 <HAL_CAN_MspInit+0x150>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f2:	4a15      	ldr	r2, [pc, #84]	; (8001348 <HAL_CAN_MspInit+0x150>)
 80012f4:	f043 0302 	orr.w	r3, r3, #2
 80012f8:	6313      	str	r3, [r2, #48]	; 0x30
 80012fa:	4b13      	ldr	r3, [pc, #76]	; (8001348 <HAL_CAN_MspInit+0x150>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fe:	f003 0302 	and.w	r3, r3, #2
 8001302:	60bb      	str	r3, [r7, #8]
 8001304:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001306:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800130a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800130c:	2302      	movs	r3, #2
 800130e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001310:	2300      	movs	r3, #0
 8001312:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001314:	2303      	movs	r3, #3
 8001316:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8001318:	2309      	movs	r3, #9
 800131a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800131c:	f107 031c 	add.w	r3, r7, #28
 8001320:	4619      	mov	r1, r3
 8001322:	480c      	ldr	r0, [pc, #48]	; (8001354 <HAL_CAN_MspInit+0x15c>)
 8001324:	f003 ffa2 	bl	800526c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 5, 0);
 8001328:	2200      	movs	r2, #0
 800132a:	2105      	movs	r1, #5
 800132c:	2040      	movs	r0, #64	; 0x40
 800132e:	f003 fbe1 	bl	8004af4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8001332:	2040      	movs	r0, #64	; 0x40
 8001334:	f003 fbfa 	bl	8004b2c <HAL_NVIC_EnableIRQ>
}
 8001338:	bf00      	nop
 800133a:	3730      	adds	r7, #48	; 0x30
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	40006400 	.word	0x40006400
 8001344:	20000048 	.word	0x20000048
 8001348:	40023800 	.word	0x40023800
 800134c:	40020c00 	.word	0x40020c00
 8001350:	40006800 	.word	0x40006800
 8001354:	40020400 	.word	0x40020400

08001358 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800135e:	2300      	movs	r3, #0
 8001360:	607b      	str	r3, [r7, #4]
 8001362:	4b23      	ldr	r3, [pc, #140]	; (80013f0 <MX_DMA_Init+0x98>)
 8001364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001366:	4a22      	ldr	r2, [pc, #136]	; (80013f0 <MX_DMA_Init+0x98>)
 8001368:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800136c:	6313      	str	r3, [r2, #48]	; 0x30
 800136e:	4b20      	ldr	r3, [pc, #128]	; (80013f0 <MX_DMA_Init+0x98>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001372:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001376:	607b      	str	r3, [r7, #4]
 8001378:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800137a:	2300      	movs	r3, #0
 800137c:	603b      	str	r3, [r7, #0]
 800137e:	4b1c      	ldr	r3, [pc, #112]	; (80013f0 <MX_DMA_Init+0x98>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001382:	4a1b      	ldr	r2, [pc, #108]	; (80013f0 <MX_DMA_Init+0x98>)
 8001384:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001388:	6313      	str	r3, [r2, #48]	; 0x30
 800138a:	4b19      	ldr	r3, [pc, #100]	; (80013f0 <MX_DMA_Init+0x98>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001392:	603b      	str	r3, [r7, #0]
 8001394:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8001396:	2200      	movs	r2, #0
 8001398:	2105      	movs	r1, #5
 800139a:	200e      	movs	r0, #14
 800139c:	f003 fbaa 	bl	8004af4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80013a0:	200e      	movs	r0, #14
 80013a2:	f003 fbc3 	bl	8004b2c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 80013a6:	2200      	movs	r2, #0
 80013a8:	2105      	movs	r1, #5
 80013aa:	2039      	movs	r0, #57	; 0x39
 80013ac:	f003 fba2 	bl	8004af4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80013b0:	2039      	movs	r0, #57	; 0x39
 80013b2:	f003 fbbb 	bl	8004b2c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 80013b6:	2200      	movs	r2, #0
 80013b8:	2105      	movs	r1, #5
 80013ba:	203a      	movs	r0, #58	; 0x3a
 80013bc:	f003 fb9a 	bl	8004af4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80013c0:	203a      	movs	r0, #58	; 0x3a
 80013c2:	f003 fbb3 	bl	8004b2c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 80013c6:	2200      	movs	r2, #0
 80013c8:	2105      	movs	r1, #5
 80013ca:	203b      	movs	r0, #59	; 0x3b
 80013cc:	f003 fb92 	bl	8004af4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80013d0:	203b      	movs	r0, #59	; 0x3b
 80013d2:	f003 fbab 	bl	8004b2c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 5, 0);
 80013d6:	2200      	movs	r2, #0
 80013d8:	2105      	movs	r1, #5
 80013da:	203c      	movs	r0, #60	; 0x3c
 80013dc:	f003 fb8a 	bl	8004af4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 80013e0:	203c      	movs	r0, #60	; 0x3c
 80013e2:	f003 fba3 	bl	8004b2c <HAL_NVIC_EnableIRQ>

}
 80013e6:	bf00      	nop
 80013e8:	3708      	adds	r7, #8
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	40023800 	.word	0x40023800

080013f4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
//	startup_task();
	gimbal_data_flag = osEventFlagsNew(NULL);
 80013f8:	2000      	movs	r0, #0
 80013fa:	f006 fe51 	bl	80080a0 <osEventFlagsNew>
 80013fe:	4603      	mov	r3, r0
 8001400:	4a21      	ldr	r2, [pc, #132]	; (8001488 <MX_FREERTOS_Init+0x94>)
 8001402:	6013      	str	r3, [r2, #0]
	chassis_data_flag = osEventFlagsNew(NULL);
 8001404:	2000      	movs	r0, #0
 8001406:	f006 fe4b 	bl	80080a0 <osEventFlagsNew>
 800140a:	4603      	mov	r3, r0
 800140c:	4a1f      	ldr	r2, [pc, #124]	; (800148c <MX_FREERTOS_Init+0x98>)
 800140e:	6013      	str	r3, [r2, #0]
	gun_data_flag = osEventFlagsNew(NULL);
 8001410:	2000      	movs	r0, #0
 8001412:	f006 fe45 	bl	80080a0 <osEventFlagsNew>
 8001416:	4603      	mov	r3, r0
 8001418:	4a1d      	ldr	r2, [pc, #116]	; (8001490 <MX_FREERTOS_Init+0x9c>)
 800141a:	6013      	str	r3, [r2, #0]
	rc_data_flag = osEventFlagsNew(NULL);
 800141c:	2000      	movs	r0, #0
 800141e:	f006 fe3f 	bl	80080a0 <osEventFlagsNew>
 8001422:	4603      	mov	r3, r0
 8001424:	4a1b      	ldr	r2, [pc, #108]	; (8001494 <MX_FREERTOS_Init+0xa0>)
 8001426:	6013      	str	r3, [r2, #0]
	control_data_flag = osEventFlagsNew(NULL);
 8001428:	2000      	movs	r0, #0
 800142a:	f006 fe39 	bl	80080a0 <osEventFlagsNew>
 800142e:	4603      	mov	r3, r0
 8001430:	4a19      	ldr	r2, [pc, #100]	; (8001498 <MX_FREERTOS_Init+0xa4>)
 8001432:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
	sem_refUart = osSemaphoreNew(ISR_SEMAPHORE_COUNT, 0, NULL);
 8001434:	2200      	movs	r2, #0
 8001436:	2100      	movs	r1, #0
 8001438:	2001      	movs	r0, #1
 800143a:	f006 ff95 	bl	8008368 <osSemaphoreNew>
 800143e:	4603      	mov	r3, r0
 8001440:	4a16      	ldr	r2, [pc, #88]	; (800149c <MX_FREERTOS_Init+0xa8>)
 8001442:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001444:	4a16      	ldr	r2, [pc, #88]	; (80014a0 <MX_FREERTOS_Init+0xac>)
 8001446:	2100      	movs	r1, #0
 8001448:	4816      	ldr	r0, [pc, #88]	; (80014a4 <MX_FREERTOS_Init+0xb0>)
 800144a:	f006 fd55 	bl	8007ef8 <osThreadNew>
 800144e:	4603      	mov	r3, r0
 8001450:	4a15      	ldr	r2, [pc, #84]	; (80014a8 <MX_FREERTOS_Init+0xb4>)
 8001452:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  //todo: adjust priorities
  //Threads creation
  	gimbal_control_task_handle   = osThreadNew(gimbal_control_task, NULL, &high2_priority_task_attributes);
 8001454:	4a15      	ldr	r2, [pc, #84]	; (80014ac <MX_FREERTOS_Init+0xb8>)
 8001456:	2100      	movs	r1, #0
 8001458:	4815      	ldr	r0, [pc, #84]	; (80014b0 <MX_FREERTOS_Init+0xbc>)
 800145a:	f006 fd4d 	bl	8007ef8 <osThreadNew>
 800145e:	4603      	mov	r3, r0
 8001460:	4a14      	ldr	r2, [pc, #80]	; (80014b4 <MX_FREERTOS_Init+0xc0>)
 8001462:	6013      	str	r3, [r2, #0]
  	movement_control_task_handle = osThreadNew(movement_control_task, NULL, &high_priority_task_attributes);//run now
 8001464:	4a14      	ldr	r2, [pc, #80]	; (80014b8 <MX_FREERTOS_Init+0xc4>)
 8001466:	2100      	movs	r1, #0
 8001468:	4814      	ldr	r0, [pc, #80]	; (80014bc <MX_FREERTOS_Init+0xc8>)
 800146a:	f006 fd45 	bl	8007ef8 <osThreadNew>
 800146e:	4603      	mov	r3, r0
 8001470:	4a13      	ldr	r2, [pc, #76]	; (80014c0 <MX_FREERTOS_Init+0xcc>)
 8001472:	6013      	str	r3, [r2, #0]
  	gun_control_task_handle = osThreadNew(gun_control_task, NULL, &high_priority_task_attributes);
 8001474:	4a10      	ldr	r2, [pc, #64]	; (80014b8 <MX_FREERTOS_Init+0xc4>)
 8001476:	2100      	movs	r1, #0
 8001478:	4812      	ldr	r0, [pc, #72]	; (80014c4 <MX_FREERTOS_Init+0xd0>)
 800147a:	f006 fd3d 	bl	8007ef8 <osThreadNew>
 800147e:	4603      	mov	r3, r0
 8001480:	4a11      	ldr	r2, [pc, #68]	; (80014c8 <MX_FREERTOS_Init+0xd4>)
 8001482:	6013      	str	r3, [r2, #0]
  	//todo: add event flags
	//Signals when a certain event has occurred

  /* USER CODE END RTOS_EVENTS */

}
 8001484:	bf00      	nop
 8001486:	bd80      	pop	{r7, pc}
 8001488:	20009834 	.word	0x20009834
 800148c:	2000984c 	.word	0x2000984c
 8001490:	20009838 	.word	0x20009838
 8001494:	2000982c 	.word	0x2000982c
 8001498:	2000983c 	.word	0x2000983c
 800149c:	20009848 	.word	0x20009848
 80014a0:	0800c7f4 	.word	0x0800c7f4
 80014a4:	080014cd 	.word	0x080014cd
 80014a8:	20009828 	.word	0x20009828
 80014ac:	0800c7d0 	.word	0x0800c7d0
 80014b0:	08002875 	.word	0x08002875
 80014b4:	20009850 	.word	0x20009850
 80014b8:	0800c7ac 	.word	0x0800c7ac
 80014bc:	0800319d 	.word	0x0800319d
 80014c0:	20009830 	.word	0x20009830
 80014c4:	08002a9d 	.word	0x08002a9d
 80014c8:	20009840 	.word	0x20009840

080014cc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80014d4:	2001      	movs	r0, #1
 80014d6:	f006 fdb5 	bl	8008044 <osDelay>
 80014da:	e7fb      	b.n	80014d4 <StartDefaultTask+0x8>

080014dc <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PA7   ------> SPI1_MOSI
*/
void MX_GPIO_Init(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b08c      	sub	sp, #48	; 0x30
 80014e0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e2:	f107 031c 	add.w	r3, r7, #28
 80014e6:	2200      	movs	r2, #0
 80014e8:	601a      	str	r2, [r3, #0]
 80014ea:	605a      	str	r2, [r3, #4]
 80014ec:	609a      	str	r2, [r3, #8]
 80014ee:	60da      	str	r2, [r3, #12]
 80014f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80014f2:	2300      	movs	r3, #0
 80014f4:	61bb      	str	r3, [r7, #24]
 80014f6:	4b74      	ldr	r3, [pc, #464]	; (80016c8 <MX_GPIO_Init+0x1ec>)
 80014f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fa:	4a73      	ldr	r2, [pc, #460]	; (80016c8 <MX_GPIO_Init+0x1ec>)
 80014fc:	f043 0310 	orr.w	r3, r3, #16
 8001500:	6313      	str	r3, [r2, #48]	; 0x30
 8001502:	4b71      	ldr	r3, [pc, #452]	; (80016c8 <MX_GPIO_Init+0x1ec>)
 8001504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001506:	f003 0310 	and.w	r3, r3, #16
 800150a:	61bb      	str	r3, [r7, #24]
 800150c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800150e:	2300      	movs	r3, #0
 8001510:	617b      	str	r3, [r7, #20]
 8001512:	4b6d      	ldr	r3, [pc, #436]	; (80016c8 <MX_GPIO_Init+0x1ec>)
 8001514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001516:	4a6c      	ldr	r2, [pc, #432]	; (80016c8 <MX_GPIO_Init+0x1ec>)
 8001518:	f043 0302 	orr.w	r3, r3, #2
 800151c:	6313      	str	r3, [r2, #48]	; 0x30
 800151e:	4b6a      	ldr	r3, [pc, #424]	; (80016c8 <MX_GPIO_Init+0x1ec>)
 8001520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001522:	f003 0302 	and.w	r3, r3, #2
 8001526:	617b      	str	r3, [r7, #20]
 8001528:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800152a:	2300      	movs	r3, #0
 800152c:	613b      	str	r3, [r7, #16]
 800152e:	4b66      	ldr	r3, [pc, #408]	; (80016c8 <MX_GPIO_Init+0x1ec>)
 8001530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001532:	4a65      	ldr	r2, [pc, #404]	; (80016c8 <MX_GPIO_Init+0x1ec>)
 8001534:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001538:	6313      	str	r3, [r2, #48]	; 0x30
 800153a:	4b63      	ldr	r3, [pc, #396]	; (80016c8 <MX_GPIO_Init+0x1ec>)
 800153c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001542:	613b      	str	r3, [r7, #16]
 8001544:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001546:	2300      	movs	r3, #0
 8001548:	60fb      	str	r3, [r7, #12]
 800154a:	4b5f      	ldr	r3, [pc, #380]	; (80016c8 <MX_GPIO_Init+0x1ec>)
 800154c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154e:	4a5e      	ldr	r2, [pc, #376]	; (80016c8 <MX_GPIO_Init+0x1ec>)
 8001550:	f043 0308 	orr.w	r3, r3, #8
 8001554:	6313      	str	r3, [r2, #48]	; 0x30
 8001556:	4b5c      	ldr	r3, [pc, #368]	; (80016c8 <MX_GPIO_Init+0x1ec>)
 8001558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155a:	f003 0308 	and.w	r3, r3, #8
 800155e:	60fb      	str	r3, [r7, #12]
 8001560:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001562:	2300      	movs	r3, #0
 8001564:	60bb      	str	r3, [r7, #8]
 8001566:	4b58      	ldr	r3, [pc, #352]	; (80016c8 <MX_GPIO_Init+0x1ec>)
 8001568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156a:	4a57      	ldr	r2, [pc, #348]	; (80016c8 <MX_GPIO_Init+0x1ec>)
 800156c:	f043 0301 	orr.w	r3, r3, #1
 8001570:	6313      	str	r3, [r2, #48]	; 0x30
 8001572:	4b55      	ldr	r3, [pc, #340]	; (80016c8 <MX_GPIO_Init+0x1ec>)
 8001574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001576:	f003 0301 	and.w	r3, r3, #1
 800157a:	60bb      	str	r3, [r7, #8]
 800157c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800157e:	2300      	movs	r3, #0
 8001580:	607b      	str	r3, [r7, #4]
 8001582:	4b51      	ldr	r3, [pc, #324]	; (80016c8 <MX_GPIO_Init+0x1ec>)
 8001584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001586:	4a50      	ldr	r2, [pc, #320]	; (80016c8 <MX_GPIO_Init+0x1ec>)
 8001588:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800158c:	6313      	str	r3, [r2, #48]	; 0x30
 800158e:	4b4e      	ldr	r3, [pc, #312]	; (80016c8 <MX_GPIO_Init+0x1ec>)
 8001590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001592:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001596:	607b      	str	r3, [r7, #4]
 8001598:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800159a:	2300      	movs	r3, #0
 800159c:	603b      	str	r3, [r7, #0]
 800159e:	4b4a      	ldr	r3, [pc, #296]	; (80016c8 <MX_GPIO_Init+0x1ec>)
 80015a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a2:	4a49      	ldr	r2, [pc, #292]	; (80016c8 <MX_GPIO_Init+0x1ec>)
 80015a4:	f043 0320 	orr.w	r3, r3, #32
 80015a8:	6313      	str	r3, [r2, #48]	; 0x30
 80015aa:	4b47      	ldr	r3, [pc, #284]	; (80016c8 <MX_GPIO_Init+0x1ec>)
 80015ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ae:	f003 0320 	and.w	r3, r3, #32
 80015b2:	603b      	str	r3, [r7, #0]
 80015b4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, PWR_A_Pin|PWR_B_Pin|PWR_C_Pin|PWR_D_Pin, GPIO_PIN_SET);
 80015b6:	2201      	movs	r2, #1
 80015b8:	213c      	movs	r1, #60	; 0x3c
 80015ba:	4844      	ldr	r0, [pc, #272]	; (80016cc <MX_GPIO_Init+0x1f0>)
 80015bc:	f004 f802 	bl	80055c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6|LED_G_Pin, GPIO_PIN_RESET);
 80015c0:	2200      	movs	r2, #0
 80015c2:	f244 0140 	movw	r1, #16448	; 0x4040
 80015c6:	4842      	ldr	r0, [pc, #264]	; (80016d0 <MX_GPIO_Init+0x1f4>)
 80015c8:	f003 fffc 	bl	80055c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_RESET);
 80015cc:	2200      	movs	r2, #0
 80015ce:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015d2:	4840      	ldr	r0, [pc, #256]	; (80016d4 <MX_GPIO_Init+0x1f8>)
 80015d4:	f003 fff6 	bl	80055c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IST_INT_Pin;
 80015d8:	2308      	movs	r3, #8
 80015da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015dc:	4b3e      	ldr	r3, [pc, #248]	; (80016d8 <MX_GPIO_Init+0x1fc>)
 80015de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80015e0:	2302      	movs	r3, #2
 80015e2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(IST_INT_GPIO_Port, &GPIO_InitStruct);
 80015e4:	f107 031c 	add.w	r3, r7, #28
 80015e8:	4619      	mov	r1, r3
 80015ea:	483a      	ldr	r0, [pc, #232]	; (80016d4 <MX_GPIO_Init+0x1f8>)
 80015ec:	f003 fe3e 	bl	800526c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MPU_INT_Pin;
 80015f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015f6:	4b38      	ldr	r3, [pc, #224]	; (80016d8 <MX_GPIO_Init+0x1fc>)
 80015f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80015fa:	2302      	movs	r3, #2
 80015fc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MPU_INT_GPIO_Port, &GPIO_InitStruct);
 80015fe:	f107 031c 	add.w	r3, r7, #28
 8001602:	4619      	mov	r1, r3
 8001604:	4835      	ldr	r0, [pc, #212]	; (80016dc <MX_GPIO_Init+0x200>)
 8001606:	f003 fe31 	bl	800526c <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin PHPin */
  GPIO_InitStruct.Pin = PWR_A_Pin|PWR_B_Pin|PWR_C_Pin|PWR_D_Pin;
 800160a:	233c      	movs	r3, #60	; 0x3c
 800160c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800160e:	2301      	movs	r3, #1
 8001610:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001612:	2301      	movs	r3, #1
 8001614:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001616:	2300      	movs	r3, #0
 8001618:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800161a:	f107 031c 	add.w	r3, r7, #28
 800161e:	4619      	mov	r1, r3
 8001620:	482a      	ldr	r0, [pc, #168]	; (80016cc <MX_GPIO_Init+0x1f0>)
 8001622:	f003 fe23 	bl	800526c <HAL_GPIO_Init>

  /*Configure GPIO pin : PF6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001626:	2340      	movs	r3, #64	; 0x40
 8001628:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800162a:	2301      	movs	r3, #1
 800162c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800162e:	2302      	movs	r3, #2
 8001630:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001632:	2301      	movs	r3, #1
 8001634:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001636:	f107 031c 	add.w	r3, r7, #28
 800163a:	4619      	mov	r1, r3
 800163c:	4824      	ldr	r0, [pc, #144]	; (80016d0 <MX_GPIO_Init+0x1f4>)
 800163e:	f003 fe15 	bl	800526c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_R_Pin;
 8001642:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001646:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001648:	2301      	movs	r3, #1
 800164a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164c:	2300      	movs	r3, #0
 800164e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001650:	2300      	movs	r3, #0
 8001652:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_R_GPIO_Port, &GPIO_InitStruct);
 8001654:	f107 031c 	add.w	r3, r7, #28
 8001658:	4619      	mov	r1, r3
 800165a:	481e      	ldr	r0, [pc, #120]	; (80016d4 <MX_GPIO_Init+0x1f8>)
 800165c:	f003 fe06 	bl	800526c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001660:	2380      	movs	r3, #128	; 0x80
 8001662:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001664:	2302      	movs	r3, #2
 8001666:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001668:	2300      	movs	r3, #0
 800166a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800166c:	2303      	movs	r3, #3
 800166e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001670:	2305      	movs	r3, #5
 8001672:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001674:	f107 031c 	add.w	r3, r7, #28
 8001678:	4619      	mov	r1, r3
 800167a:	4819      	ldr	r0, [pc, #100]	; (80016e0 <MX_GPIO_Init+0x204>)
 800167c:	f003 fdf6 	bl	800526c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_G_Pin;
 8001680:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001684:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001686:	2301      	movs	r3, #1
 8001688:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168a:	2300      	movs	r3, #0
 800168c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800168e:	2300      	movs	r3, #0
 8001690:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_G_GPIO_Port, &GPIO_InitStruct);
 8001692:	f107 031c 	add.w	r3, r7, #28
 8001696:	4619      	mov	r1, r3
 8001698:	480d      	ldr	r0, [pc, #52]	; (80016d0 <MX_GPIO_Init+0x1f4>)
 800169a:	f003 fde7 	bl	800526c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 800169e:	2200      	movs	r2, #0
 80016a0:	2105      	movs	r1, #5
 80016a2:	2009      	movs	r0, #9
 80016a4:	f003 fa26 	bl	8004af4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80016a8:	2009      	movs	r0, #9
 80016aa:	f003 fa3f 	bl	8004b2c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80016ae:	2200      	movs	r2, #0
 80016b0:	2105      	movs	r1, #5
 80016b2:	2017      	movs	r0, #23
 80016b4:	f003 fa1e 	bl	8004af4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80016b8:	2017      	movs	r0, #23
 80016ba:	f003 fa37 	bl	8004b2c <HAL_NVIC_EnableIRQ>

}
 80016be:	bf00      	nop
 80016c0:	3730      	adds	r7, #48	; 0x30
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	40023800 	.word	0x40023800
 80016cc:	40021c00 	.word	0x40021c00
 80016d0:	40021400 	.word	0x40021400
 80016d4:	40021000 	.word	0x40021000
 80016d8:	10110000 	.word	0x10110000
 80016dc:	40020400 	.word	0x40020400
 80016e0:	40020000 	.word	0x40020000

080016e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016e8:	f002 fa5c 	bl	8003ba4 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016ec:	f000 f81e 	bl	800172c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016f0:	f7ff fef4 	bl	80014dc <MX_GPIO_Init>
  MX_DMA_Init();
 80016f4:	f7ff fe30 	bl	8001358 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80016f8:	f000 fc58 	bl	8001fac <MX_USART1_UART_Init>
  MX_CAN1_Init();
 80016fc:	f7ff fd10 	bl	8001120 <MX_CAN1_Init>
  MX_USART6_UART_Init();
 8001700:	f000 fc80 	bl	8002004 <MX_USART6_UART_Init>
  MX_SPI5_Init();
 8001704:	f000 f894 	bl	8001830 <MX_SPI5_Init>
  MX_TIM12_Init();
 8001708:	f000 fb1e 	bl	8001d48 <MX_TIM12_Init>
  MX_CAN2_Init();
 800170c:	f7ff fd3e 	bl	800118c <MX_CAN2_Init>
  MX_TIM4_Init();
 8001710:	f000 fac0 	bl	8001c94 <MX_TIM4_Init>
  MX_UART7_Init();
 8001714:	f000 fc20 	bl	8001f58 <MX_UART7_Init>
  /* USER CODE BEGIN 2 */

  startup_task();
 8001718:	f002 f91a 	bl	8003950 <startup_task>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 800171c:	f006 fb82 	bl	8007e24 <osKernelInitialize>
  MX_FREERTOS_Init();
 8001720:	f7ff fe68 	bl	80013f4 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8001724:	f006 fbb2 	bl	8007e8c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001728:	e7fe      	b.n	8001728 <main+0x44>
	...

0800172c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b094      	sub	sp, #80	; 0x50
 8001730:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001732:	f107 0320 	add.w	r3, r7, #32
 8001736:	2230      	movs	r2, #48	; 0x30
 8001738:	2100      	movs	r1, #0
 800173a:	4618      	mov	r0, r3
 800173c:	f009 ff60 	bl	800b600 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001740:	f107 030c 	add.w	r3, r7, #12
 8001744:	2200      	movs	r2, #0
 8001746:	601a      	str	r2, [r3, #0]
 8001748:	605a      	str	r2, [r3, #4]
 800174a:	609a      	str	r2, [r3, #8]
 800174c:	60da      	str	r2, [r3, #12]
 800174e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001750:	2300      	movs	r3, #0
 8001752:	60bb      	str	r3, [r7, #8]
 8001754:	4b28      	ldr	r3, [pc, #160]	; (80017f8 <SystemClock_Config+0xcc>)
 8001756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001758:	4a27      	ldr	r2, [pc, #156]	; (80017f8 <SystemClock_Config+0xcc>)
 800175a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800175e:	6413      	str	r3, [r2, #64]	; 0x40
 8001760:	4b25      	ldr	r3, [pc, #148]	; (80017f8 <SystemClock_Config+0xcc>)
 8001762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001764:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001768:	60bb      	str	r3, [r7, #8]
 800176a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800176c:	2300      	movs	r3, #0
 800176e:	607b      	str	r3, [r7, #4]
 8001770:	4b22      	ldr	r3, [pc, #136]	; (80017fc <SystemClock_Config+0xd0>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a21      	ldr	r2, [pc, #132]	; (80017fc <SystemClock_Config+0xd0>)
 8001776:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800177a:	6013      	str	r3, [r2, #0]
 800177c:	4b1f      	ldr	r3, [pc, #124]	; (80017fc <SystemClock_Config+0xd0>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001784:	607b      	str	r3, [r7, #4]
 8001786:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001788:	2301      	movs	r3, #1
 800178a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800178c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001790:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001792:	2302      	movs	r3, #2
 8001794:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001796:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800179a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 800179c:	2306      	movs	r3, #6
 800179e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80017a0:	23a8      	movs	r3, #168	; 0xa8
 80017a2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80017a4:	2302      	movs	r3, #2
 80017a6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80017a8:	2304      	movs	r3, #4
 80017aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017ac:	f107 0320 	add.w	r3, r7, #32
 80017b0:	4618      	mov	r0, r3
 80017b2:	f003 ff45 	bl	8005640 <HAL_RCC_OscConfig>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d001      	beq.n	80017c0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80017bc:	f000 f832 	bl	8001824 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017c0:	230f      	movs	r3, #15
 80017c2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017c4:	2302      	movs	r3, #2
 80017c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017c8:	2300      	movs	r3, #0
 80017ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80017cc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80017d0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80017d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017d6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80017d8:	f107 030c 	add.w	r3, r7, #12
 80017dc:	2105      	movs	r1, #5
 80017de:	4618      	mov	r0, r3
 80017e0:	f004 f99e 	bl	8005b20 <HAL_RCC_ClockConfig>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d001      	beq.n	80017ee <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80017ea:	f000 f81b 	bl	8001824 <Error_Handler>
  }
}
 80017ee:	bf00      	nop
 80017f0:	3750      	adds	r7, #80	; 0x50
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	40023800 	.word	0x40023800
 80017fc:	40007000 	.word	0x40007000

08001800 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a04      	ldr	r2, [pc, #16]	; (8001820 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d101      	bne.n	8001816 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001812:	f002 f9e9 	bl	8003be8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001816:	bf00      	nop
 8001818:	3708      	adds	r7, #8
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	40000400 	.word	0x40000400

08001824 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001828:	b672      	cpsid	i
}
 800182a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800182c:	e7fe      	b.n	800182c <Error_Handler+0x8>
	...

08001830 <MX_SPI5_Init>:
DMA_HandleTypeDef hdma_spi5_rx;
DMA_HandleTypeDef hdma_spi5_tx;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0

  hspi5.Instance = SPI5;
 8001834:	4b17      	ldr	r3, [pc, #92]	; (8001894 <MX_SPI5_Init+0x64>)
 8001836:	4a18      	ldr	r2, [pc, #96]	; (8001898 <MX_SPI5_Init+0x68>)
 8001838:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800183a:	4b16      	ldr	r3, [pc, #88]	; (8001894 <MX_SPI5_Init+0x64>)
 800183c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001840:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001842:	4b14      	ldr	r3, [pc, #80]	; (8001894 <MX_SPI5_Init+0x64>)
 8001844:	2200      	movs	r2, #0
 8001846:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001848:	4b12      	ldr	r3, [pc, #72]	; (8001894 <MX_SPI5_Init+0x64>)
 800184a:	2200      	movs	r2, #0
 800184c:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800184e:	4b11      	ldr	r3, [pc, #68]	; (8001894 <MX_SPI5_Init+0x64>)
 8001850:	2200      	movs	r2, #0
 8001852:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001854:	4b0f      	ldr	r3, [pc, #60]	; (8001894 <MX_SPI5_Init+0x64>)
 8001856:	2200      	movs	r2, #0
 8001858:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800185a:	4b0e      	ldr	r3, [pc, #56]	; (8001894 <MX_SPI5_Init+0x64>)
 800185c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001860:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001862:	4b0c      	ldr	r3, [pc, #48]	; (8001894 <MX_SPI5_Init+0x64>)
 8001864:	2200      	movs	r2, #0
 8001866:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001868:	4b0a      	ldr	r3, [pc, #40]	; (8001894 <MX_SPI5_Init+0x64>)
 800186a:	2200      	movs	r2, #0
 800186c:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800186e:	4b09      	ldr	r3, [pc, #36]	; (8001894 <MX_SPI5_Init+0x64>)
 8001870:	2200      	movs	r2, #0
 8001872:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001874:	4b07      	ldr	r3, [pc, #28]	; (8001894 <MX_SPI5_Init+0x64>)
 8001876:	2200      	movs	r2, #0
 8001878:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 800187a:	4b06      	ldr	r3, [pc, #24]	; (8001894 <MX_SPI5_Init+0x64>)
 800187c:	220a      	movs	r2, #10
 800187e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001880:	4804      	ldr	r0, [pc, #16]	; (8001894 <MX_SPI5_Init+0x64>)
 8001882:	f004 fb4f 	bl	8005f24 <HAL_SPI_Init>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d001      	beq.n	8001890 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 800188c:	f7ff ffca 	bl	8001824 <Error_Handler>
  }

}
 8001890:	bf00      	nop
 8001892:	bd80      	pop	{r7, pc}
 8001894:	2000985c 	.word	0x2000985c
 8001898:	40015000 	.word	0x40015000

0800189c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b08a      	sub	sp, #40	; 0x28
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a4:	f107 0314 	add.w	r3, r7, #20
 80018a8:	2200      	movs	r2, #0
 80018aa:	601a      	str	r2, [r3, #0]
 80018ac:	605a      	str	r2, [r3, #4]
 80018ae:	609a      	str	r2, [r3, #8]
 80018b0:	60da      	str	r2, [r3, #12]
 80018b2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a4d      	ldr	r2, [pc, #308]	; (80019f0 <HAL_SPI_MspInit+0x154>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	f040 8094 	bne.w	80019e8 <HAL_SPI_MspInit+0x14c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80018c0:	2300      	movs	r3, #0
 80018c2:	613b      	str	r3, [r7, #16]
 80018c4:	4b4b      	ldr	r3, [pc, #300]	; (80019f4 <HAL_SPI_MspInit+0x158>)
 80018c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018c8:	4a4a      	ldr	r2, [pc, #296]	; (80019f4 <HAL_SPI_MspInit+0x158>)
 80018ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80018ce:	6453      	str	r3, [r2, #68]	; 0x44
 80018d0:	4b48      	ldr	r3, [pc, #288]	; (80019f4 <HAL_SPI_MspInit+0x158>)
 80018d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018d8:	613b      	str	r3, [r7, #16]
 80018da:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80018dc:	2300      	movs	r3, #0
 80018de:	60fb      	str	r3, [r7, #12]
 80018e0:	4b44      	ldr	r3, [pc, #272]	; (80019f4 <HAL_SPI_MspInit+0x158>)
 80018e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e4:	4a43      	ldr	r2, [pc, #268]	; (80019f4 <HAL_SPI_MspInit+0x158>)
 80018e6:	f043 0320 	orr.w	r3, r3, #32
 80018ea:	6313      	str	r3, [r2, #48]	; 0x30
 80018ec:	4b41      	ldr	r3, [pc, #260]	; (80019f4 <HAL_SPI_MspInit+0x158>)
 80018ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f0:	f003 0320 	and.w	r3, r3, #32
 80018f4:	60fb      	str	r3, [r7, #12]
 80018f6:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF9     ------> SPI5_MOSI
    PF8     ------> SPI5_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_8;
 80018f8:	f44f 7360 	mov.w	r3, #896	; 0x380
 80018fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018fe:	2302      	movs	r3, #2
 8001900:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001902:	2300      	movs	r3, #0
 8001904:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001906:	2303      	movs	r3, #3
 8001908:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800190a:	2305      	movs	r3, #5
 800190c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800190e:	f107 0314 	add.w	r3, r7, #20
 8001912:	4619      	mov	r1, r3
 8001914:	4838      	ldr	r0, [pc, #224]	; (80019f8 <HAL_SPI_MspInit+0x15c>)
 8001916:	f003 fca9 	bl	800526c <HAL_GPIO_Init>

    /* SPI5 DMA Init */
    /* SPI5_RX Init */
    hdma_spi5_rx.Instance = DMA2_Stream3;
 800191a:	4b38      	ldr	r3, [pc, #224]	; (80019fc <HAL_SPI_MspInit+0x160>)
 800191c:	4a38      	ldr	r2, [pc, #224]	; (8001a00 <HAL_SPI_MspInit+0x164>)
 800191e:	601a      	str	r2, [r3, #0]
    hdma_spi5_rx.Init.Channel = DMA_CHANNEL_2;
 8001920:	4b36      	ldr	r3, [pc, #216]	; (80019fc <HAL_SPI_MspInit+0x160>)
 8001922:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001926:	605a      	str	r2, [r3, #4]
    hdma_spi5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001928:	4b34      	ldr	r3, [pc, #208]	; (80019fc <HAL_SPI_MspInit+0x160>)
 800192a:	2200      	movs	r2, #0
 800192c:	609a      	str	r2, [r3, #8]
    hdma_spi5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800192e:	4b33      	ldr	r3, [pc, #204]	; (80019fc <HAL_SPI_MspInit+0x160>)
 8001930:	2200      	movs	r2, #0
 8001932:	60da      	str	r2, [r3, #12]
    hdma_spi5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001934:	4b31      	ldr	r3, [pc, #196]	; (80019fc <HAL_SPI_MspInit+0x160>)
 8001936:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800193a:	611a      	str	r2, [r3, #16]
    hdma_spi5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800193c:	4b2f      	ldr	r3, [pc, #188]	; (80019fc <HAL_SPI_MspInit+0x160>)
 800193e:	2200      	movs	r2, #0
 8001940:	615a      	str	r2, [r3, #20]
    hdma_spi5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001942:	4b2e      	ldr	r3, [pc, #184]	; (80019fc <HAL_SPI_MspInit+0x160>)
 8001944:	2200      	movs	r2, #0
 8001946:	619a      	str	r2, [r3, #24]
    hdma_spi5_rx.Init.Mode = DMA_NORMAL;
 8001948:	4b2c      	ldr	r3, [pc, #176]	; (80019fc <HAL_SPI_MspInit+0x160>)
 800194a:	2200      	movs	r2, #0
 800194c:	61da      	str	r2, [r3, #28]
    hdma_spi5_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800194e:	4b2b      	ldr	r3, [pc, #172]	; (80019fc <HAL_SPI_MspInit+0x160>)
 8001950:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001954:	621a      	str	r2, [r3, #32]
    hdma_spi5_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001956:	4b29      	ldr	r3, [pc, #164]	; (80019fc <HAL_SPI_MspInit+0x160>)
 8001958:	2204      	movs	r2, #4
 800195a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi5_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800195c:	4b27      	ldr	r3, [pc, #156]	; (80019fc <HAL_SPI_MspInit+0x160>)
 800195e:	2203      	movs	r2, #3
 8001960:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi5_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8001962:	4b26      	ldr	r3, [pc, #152]	; (80019fc <HAL_SPI_MspInit+0x160>)
 8001964:	2200      	movs	r2, #0
 8001966:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi5_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001968:	4b24      	ldr	r3, [pc, #144]	; (80019fc <HAL_SPI_MspInit+0x160>)
 800196a:	2200      	movs	r2, #0
 800196c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi5_rx) != HAL_OK)
 800196e:	4823      	ldr	r0, [pc, #140]	; (80019fc <HAL_SPI_MspInit+0x160>)
 8001970:	f003 f8ea 	bl	8004b48 <HAL_DMA_Init>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d001      	beq.n	800197e <HAL_SPI_MspInit+0xe2>
    {
      Error_Handler();
 800197a:	f7ff ff53 	bl	8001824 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi5_rx);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	4a1e      	ldr	r2, [pc, #120]	; (80019fc <HAL_SPI_MspInit+0x160>)
 8001982:	64da      	str	r2, [r3, #76]	; 0x4c
 8001984:	4a1d      	ldr	r2, [pc, #116]	; (80019fc <HAL_SPI_MspInit+0x160>)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI5_TX Init */
    hdma_spi5_tx.Instance = DMA2_Stream4;
 800198a:	4b1e      	ldr	r3, [pc, #120]	; (8001a04 <HAL_SPI_MspInit+0x168>)
 800198c:	4a1e      	ldr	r2, [pc, #120]	; (8001a08 <HAL_SPI_MspInit+0x16c>)
 800198e:	601a      	str	r2, [r3, #0]
    hdma_spi5_tx.Init.Channel = DMA_CHANNEL_2;
 8001990:	4b1c      	ldr	r3, [pc, #112]	; (8001a04 <HAL_SPI_MspInit+0x168>)
 8001992:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001996:	605a      	str	r2, [r3, #4]
    hdma_spi5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001998:	4b1a      	ldr	r3, [pc, #104]	; (8001a04 <HAL_SPI_MspInit+0x168>)
 800199a:	2240      	movs	r2, #64	; 0x40
 800199c:	609a      	str	r2, [r3, #8]
    hdma_spi5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800199e:	4b19      	ldr	r3, [pc, #100]	; (8001a04 <HAL_SPI_MspInit+0x168>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	60da      	str	r2, [r3, #12]
    hdma_spi5_tx.Init.MemInc = DMA_MINC_ENABLE;
 80019a4:	4b17      	ldr	r3, [pc, #92]	; (8001a04 <HAL_SPI_MspInit+0x168>)
 80019a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019aa:	611a      	str	r2, [r3, #16]
    hdma_spi5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80019ac:	4b15      	ldr	r3, [pc, #84]	; (8001a04 <HAL_SPI_MspInit+0x168>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	615a      	str	r2, [r3, #20]
    hdma_spi5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80019b2:	4b14      	ldr	r3, [pc, #80]	; (8001a04 <HAL_SPI_MspInit+0x168>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	619a      	str	r2, [r3, #24]
    hdma_spi5_tx.Init.Mode = DMA_NORMAL;
 80019b8:	4b12      	ldr	r3, [pc, #72]	; (8001a04 <HAL_SPI_MspInit+0x168>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	61da      	str	r2, [r3, #28]
    hdma_spi5_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80019be:	4b11      	ldr	r3, [pc, #68]	; (8001a04 <HAL_SPI_MspInit+0x168>)
 80019c0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80019c4:	621a      	str	r2, [r3, #32]
    hdma_spi5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80019c6:	4b0f      	ldr	r3, [pc, #60]	; (8001a04 <HAL_SPI_MspInit+0x168>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi5_tx) != HAL_OK)
 80019cc:	480d      	ldr	r0, [pc, #52]	; (8001a04 <HAL_SPI_MspInit+0x168>)
 80019ce:	f003 f8bb 	bl	8004b48 <HAL_DMA_Init>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d001      	beq.n	80019dc <HAL_SPI_MspInit+0x140>
    {
      Error_Handler();
 80019d8:	f7ff ff24 	bl	8001824 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi5_tx);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	4a09      	ldr	r2, [pc, #36]	; (8001a04 <HAL_SPI_MspInit+0x168>)
 80019e0:	649a      	str	r2, [r3, #72]	; 0x48
 80019e2:	4a08      	ldr	r2, [pc, #32]	; (8001a04 <HAL_SPI_MspInit+0x168>)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 80019e8:	bf00      	nop
 80019ea:	3728      	adds	r7, #40	; 0x28
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	40015000 	.word	0x40015000
 80019f4:	40023800 	.word	0x40023800
 80019f8:	40021400 	.word	0x40021400
 80019fc:	200098b4 	.word	0x200098b4
 8001a00:	40026458 	.word	0x40026458
 8001a04:	20009914 	.word	0x20009914
 8001a08:	40026470 	.word	0x40026470

08001a0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a12:	2300      	movs	r3, #0
 8001a14:	607b      	str	r3, [r7, #4]
 8001a16:	4b21      	ldr	r3, [pc, #132]	; (8001a9c <HAL_MspInit+0x90>)
 8001a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a1a:	4a20      	ldr	r2, [pc, #128]	; (8001a9c <HAL_MspInit+0x90>)
 8001a1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a20:	6453      	str	r3, [r2, #68]	; 0x44
 8001a22:	4b1e      	ldr	r3, [pc, #120]	; (8001a9c <HAL_MspInit+0x90>)
 8001a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a2a:	607b      	str	r3, [r7, #4]
 8001a2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a2e:	2300      	movs	r3, #0
 8001a30:	603b      	str	r3, [r7, #0]
 8001a32:	4b1a      	ldr	r3, [pc, #104]	; (8001a9c <HAL_MspInit+0x90>)
 8001a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a36:	4a19      	ldr	r2, [pc, #100]	; (8001a9c <HAL_MspInit+0x90>)
 8001a38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a3c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a3e:	4b17      	ldr	r3, [pc, #92]	; (8001a9c <HAL_MspInit+0x90>)
 8001a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a46:	603b      	str	r3, [r7, #0]
 8001a48:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 1, 0);
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	2101      	movs	r1, #1
 8001a4e:	f06f 000b 	mvn.w	r0, #11
 8001a52:	f003 f84f 	bl	8004af4 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 2, 0);
 8001a56:	2200      	movs	r2, #0
 8001a58:	2102      	movs	r1, #2
 8001a5a:	f06f 000a 	mvn.w	r0, #10
 8001a5e:	f003 f849 	bl	8004af4 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 3, 0);
 8001a62:	2200      	movs	r2, #0
 8001a64:	2103      	movs	r1, #3
 8001a66:	f06f 0009 	mvn.w	r0, #9
 8001a6a:	f003 f843 	bl	8004af4 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 4, 0);
 8001a6e:	2200      	movs	r2, #0
 8001a70:	2104      	movs	r1, #4
 8001a72:	f06f 0004 	mvn.w	r0, #4
 8001a76:	f003 f83d 	bl	8004af4 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 5, 0);
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	2105      	movs	r1, #5
 8001a7e:	f06f 0003 	mvn.w	r0, #3
 8001a82:	f003 f837 	bl	8004af4 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001a86:	2200      	movs	r2, #0
 8001a88:	210f      	movs	r1, #15
 8001a8a:	f06f 0001 	mvn.w	r0, #1
 8001a8e:	f003 f831 	bl	8004af4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a92:	bf00      	nop
 8001a94:	3708      	adds	r7, #8
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	40023800 	.word	0x40023800

08001aa0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b08c      	sub	sp, #48	; 0x30
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001aac:	2300      	movs	r3, #0
 8001aae:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM3 IRQ priority */
  HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0);
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	6879      	ldr	r1, [r7, #4]
 8001ab4:	201d      	movs	r0, #29
 8001ab6:	f003 f81d 	bl	8004af4 <HAL_NVIC_SetPriority>

  /* Enable the TIM3 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001aba:	201d      	movs	r0, #29
 8001abc:	f003 f836 	bl	8004b2c <HAL_NVIC_EnableIRQ>
  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	60fb      	str	r3, [r7, #12]
 8001ac4:	4b1f      	ldr	r3, [pc, #124]	; (8001b44 <HAL_InitTick+0xa4>)
 8001ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac8:	4a1e      	ldr	r2, [pc, #120]	; (8001b44 <HAL_InitTick+0xa4>)
 8001aca:	f043 0302 	orr.w	r3, r3, #2
 8001ace:	6413      	str	r3, [r2, #64]	; 0x40
 8001ad0:	4b1c      	ldr	r3, [pc, #112]	; (8001b44 <HAL_InitTick+0xa4>)
 8001ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad4:	f003 0302 	and.w	r3, r3, #2
 8001ad8:	60fb      	str	r3, [r7, #12]
 8001ada:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001adc:	f107 0210 	add.w	r2, r7, #16
 8001ae0:	f107 0314 	add.w	r3, r7, #20
 8001ae4:	4611      	mov	r1, r2
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f004 f9ea 	bl	8005ec0 <HAL_RCC_GetClockConfig>

  /* Compute TIM3 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001aec:	f004 f9c0 	bl	8005e70 <HAL_RCC_GetPCLK1Freq>
 8001af0:	4603      	mov	r3, r0
 8001af2:	005b      	lsls	r3, r3, #1
 8001af4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001af8:	4a13      	ldr	r2, [pc, #76]	; (8001b48 <HAL_InitTick+0xa8>)
 8001afa:	fba2 2303 	umull	r2, r3, r2, r3
 8001afe:	0c9b      	lsrs	r3, r3, #18
 8001b00:	3b01      	subs	r3, #1
 8001b02:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8001b04:	4b11      	ldr	r3, [pc, #68]	; (8001b4c <HAL_InitTick+0xac>)
 8001b06:	4a12      	ldr	r2, [pc, #72]	; (8001b50 <HAL_InitTick+0xb0>)
 8001b08:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8001b0a:	4b10      	ldr	r3, [pc, #64]	; (8001b4c <HAL_InitTick+0xac>)
 8001b0c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001b10:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8001b12:	4a0e      	ldr	r2, [pc, #56]	; (8001b4c <HAL_InitTick+0xac>)
 8001b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b16:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8001b18:	4b0c      	ldr	r3, [pc, #48]	; (8001b4c <HAL_InitTick+0xac>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b1e:	4b0b      	ldr	r3, [pc, #44]	; (8001b4c <HAL_InitTick+0xac>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 8001b24:	4809      	ldr	r0, [pc, #36]	; (8001b4c <HAL_InitTick+0xac>)
 8001b26:	f004 fa61 	bl	8005fec <HAL_TIM_Base_Init>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d104      	bne.n	8001b3a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim3);
 8001b30:	4806      	ldr	r0, [pc, #24]	; (8001b4c <HAL_InitTick+0xac>)
 8001b32:	f004 fa86 	bl	8006042 <HAL_TIM_Base_Start_IT>
 8001b36:	4603      	mov	r3, r0
 8001b38:	e000      	b.n	8001b3c <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3730      	adds	r7, #48	; 0x30
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	40023800 	.word	0x40023800
 8001b48:	431bde83 	.word	0x431bde83
 8001b4c:	20009974 	.word	0x20009974
 8001b50:	40000400 	.word	0x40000400

08001b54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b58:	e7fe      	b.n	8001b58 <NMI_Handler+0x4>

08001b5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b5a:	b480      	push	{r7}
 8001b5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b5e:	e7fe      	b.n	8001b5e <HardFault_Handler+0x4>

08001b60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b64:	e7fe      	b.n	8001b64 <MemManage_Handler+0x4>

08001b66 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b66:	b480      	push	{r7}
 8001b68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b6a:	e7fe      	b.n	8001b6a <BusFault_Handler+0x4>

08001b6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b70:	e7fe      	b.n	8001b70 <UsageFault_Handler+0x4>

08001b72 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b72:	b480      	push	{r7}
 8001b74:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b76:	bf00      	nop
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr

08001b80 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8001b84:	2008      	movs	r0, #8
 8001b86:	f003 fd37 	bl	80055f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001b8a:	bf00      	nop
 8001b8c:	bd80      	pop	{r7, pc}
	...

08001b90 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_rx);
 8001b94:	4802      	ldr	r0, [pc, #8]	; (8001ba0 <DMA1_Stream3_IRQHandler+0x10>)
 8001b96:	f003 f8ff 	bl	8004d98 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001b9a:	bf00      	nop
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	20009ad4 	.word	0x20009ad4

08001ba4 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001ba8:	4802      	ldr	r0, [pc, #8]	; (8001bb4 <CAN1_RX0_IRQHandler+0x10>)
 8001baa:	f002 fcbb 	bl	8004524 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001bae:	bf00      	nop
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	20009800 	.word	0x20009800

08001bb8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001bbc:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001bc0:	f003 fd1a 	bl	80055f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001bc4:	bf00      	nop
 8001bc6:	bd80      	pop	{r7, pc}

08001bc8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001bcc:	4802      	ldr	r0, [pc, #8]	; (8001bd8 <TIM3_IRQHandler+0x10>)
 8001bce:	f004 fac5 	bl	800615c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001bd2:	bf00      	nop
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	20009974 	.word	0x20009974

08001bdc <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8001be0:	4802      	ldr	r0, [pc, #8]	; (8001bec <DMA2_Stream1_IRQHandler+0x10>)
 8001be2:	f003 f8d9 	bl	8004d98 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001be6:	bf00      	nop
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	20009a34 	.word	0x20009a34

08001bf0 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001bf4:	4802      	ldr	r0, [pc, #8]	; (8001c00 <DMA2_Stream2_IRQHandler+0x10>)
 8001bf6:	f003 f8cf 	bl	8004d98 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001bfa:	bf00      	nop
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	20009b34 	.word	0x20009b34

08001c04 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi5_rx);
 8001c08:	4802      	ldr	r0, [pc, #8]	; (8001c14 <DMA2_Stream3_IRQHandler+0x10>)
 8001c0a:	f003 f8c5 	bl	8004d98 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001c0e:	bf00      	nop
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	200098b4 	.word	0x200098b4

08001c18 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi5_tx);
 8001c1c:	4802      	ldr	r0, [pc, #8]	; (8001c28 <DMA2_Stream4_IRQHandler+0x10>)
 8001c1e:	f003 f8bb 	bl	8004d98 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8001c22:	bf00      	nop
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	20009914 	.word	0x20009914

08001c2c <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8001c30:	4802      	ldr	r0, [pc, #8]	; (8001c3c <CAN2_RX0_IRQHandler+0x10>)
 8001c32:	f002 fc77 	bl	8004524 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8001c36:	bf00      	nop
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	200097d8 	.word	0x200097d8

08001c40 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001c44:	4802      	ldr	r0, [pc, #8]	; (8001c50 <USART6_IRQHandler+0x10>)
 8001c46:	f005 fa67 	bl	8007118 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001c4a:	bf00      	nop
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	20009bd4 	.word	0x20009bd4

08001c54 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8001c58:	4802      	ldr	r0, [pc, #8]	; (8001c64 <UART7_IRQHandler+0x10>)
 8001c5a:	f005 fa5d 	bl	8007118 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8001c5e:	bf00      	nop
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	20009a94 	.word	0x20009a94

08001c68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c6c:	4b08      	ldr	r3, [pc, #32]	; (8001c90 <SystemInit+0x28>)
 8001c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c72:	4a07      	ldr	r2, [pc, #28]	; (8001c90 <SystemInit+0x28>)
 8001c74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001c7c:	4b04      	ldr	r3, [pc, #16]	; (8001c90 <SystemInit+0x28>)
 8001c7e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001c82:	609a      	str	r2, [r3, #8]
#endif
}
 8001c84:	bf00      	nop
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr
 8001c8e:	bf00      	nop
 8001c90:	e000ed00 	.word	0xe000ed00

08001c94 <MX_TIM4_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim12;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b08a      	sub	sp, #40	; 0x28
 8001c98:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c9a:	f107 0320 	add.w	r3, r7, #32
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	601a      	str	r2, [r3, #0]
 8001ca2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ca4:	1d3b      	adds	r3, r7, #4
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	601a      	str	r2, [r3, #0]
 8001caa:	605a      	str	r2, [r3, #4]
 8001cac:	609a      	str	r2, [r3, #8]
 8001cae:	60da      	str	r2, [r3, #12]
 8001cb0:	611a      	str	r2, [r3, #16]
 8001cb2:	615a      	str	r2, [r3, #20]
 8001cb4:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 8001cb6:	4b22      	ldr	r3, [pc, #136]	; (8001d40 <MX_TIM4_Init+0xac>)
 8001cb8:	4a22      	ldr	r2, [pc, #136]	; (8001d44 <MX_TIM4_Init+0xb0>)
 8001cba:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 84;
 8001cbc:	4b20      	ldr	r3, [pc, #128]	; (8001d40 <MX_TIM4_Init+0xac>)
 8001cbe:	2254      	movs	r2, #84	; 0x54
 8001cc0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cc2:	4b1f      	ldr	r3, [pc, #124]	; (8001d40 <MX_TIM4_Init+0xac>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 8001cc8:	4b1d      	ldr	r3, [pc, #116]	; (8001d40 <MX_TIM4_Init+0xac>)
 8001cca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001cce:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cd0:	4b1b      	ldr	r3, [pc, #108]	; (8001d40 <MX_TIM4_Init+0xac>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cd6:	4b1a      	ldr	r3, [pc, #104]	; (8001d40 <MX_TIM4_Init+0xac>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001cdc:	4818      	ldr	r0, [pc, #96]	; (8001d40 <MX_TIM4_Init+0xac>)
 8001cde:	f004 f9d4 	bl	800608a <HAL_TIM_PWM_Init>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d001      	beq.n	8001cec <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8001ce8:	f7ff fd9c 	bl	8001824 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cec:	2300      	movs	r3, #0
 8001cee:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001cf4:	f107 0320 	add.w	r3, r7, #32
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	4811      	ldr	r0, [pc, #68]	; (8001d40 <MX_TIM4_Init+0xac>)
 8001cfc:	f004 fff8 	bl	8006cf0 <HAL_TIMEx_MasterConfigSynchronization>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d001      	beq.n	8001d0a <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8001d06:	f7ff fd8d 	bl	8001824 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d0a:	2360      	movs	r3, #96	; 0x60
 8001d0c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d12:	2300      	movs	r3, #0
 8001d14:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d16:	2300      	movs	r3, #0
 8001d18:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d1a:	1d3b      	adds	r3, r7, #4
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	4619      	mov	r1, r3
 8001d20:	4807      	ldr	r0, [pc, #28]	; (8001d40 <MX_TIM4_Init+0xac>)
 8001d22:	f004 fb23 	bl	800636c <HAL_TIM_PWM_ConfigChannel>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d001      	beq.n	8001d30 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8001d2c:	f7ff fd7a 	bl	8001824 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim4);
 8001d30:	4803      	ldr	r0, [pc, #12]	; (8001d40 <MX_TIM4_Init+0xac>)
 8001d32:	f000 f8af 	bl	8001e94 <HAL_TIM_MspPostInit>

}
 8001d36:	bf00      	nop
 8001d38:	3728      	adds	r7, #40	; 0x28
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	200099b4 	.word	0x200099b4
 8001d44:	40000800 	.word	0x40000800

08001d48 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b08c      	sub	sp, #48	; 0x30
 8001d4c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d4e:	f107 0320 	add.w	r3, r7, #32
 8001d52:	2200      	movs	r2, #0
 8001d54:	601a      	str	r2, [r3, #0]
 8001d56:	605a      	str	r2, [r3, #4]
 8001d58:	609a      	str	r2, [r3, #8]
 8001d5a:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d5c:	1d3b      	adds	r3, r7, #4
 8001d5e:	2200      	movs	r2, #0
 8001d60:	601a      	str	r2, [r3, #0]
 8001d62:	605a      	str	r2, [r3, #4]
 8001d64:	609a      	str	r2, [r3, #8]
 8001d66:	60da      	str	r2, [r3, #12]
 8001d68:	611a      	str	r2, [r3, #16]
 8001d6a:	615a      	str	r2, [r3, #20]
 8001d6c:	619a      	str	r2, [r3, #24]

  htim12.Instance = TIM12;
 8001d6e:	4b25      	ldr	r3, [pc, #148]	; (8001e04 <MX_TIM12_Init+0xbc>)
 8001d70:	4a25      	ldr	r2, [pc, #148]	; (8001e08 <MX_TIM12_Init+0xc0>)
 8001d72:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 84;
 8001d74:	4b23      	ldr	r3, [pc, #140]	; (8001e04 <MX_TIM12_Init+0xbc>)
 8001d76:	2254      	movs	r2, #84	; 0x54
 8001d78:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d7a:	4b22      	ldr	r3, [pc, #136]	; (8001e04 <MX_TIM12_Init+0xbc>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 1000;
 8001d80:	4b20      	ldr	r3, [pc, #128]	; (8001e04 <MX_TIM12_Init+0xbc>)
 8001d82:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001d86:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d88:	4b1e      	ldr	r3, [pc, #120]	; (8001e04 <MX_TIM12_Init+0xbc>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d8e:	4b1d      	ldr	r3, [pc, #116]	; (8001e04 <MX_TIM12_Init+0xbc>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8001d94:	481b      	ldr	r0, [pc, #108]	; (8001e04 <MX_TIM12_Init+0xbc>)
 8001d96:	f004 f929 	bl	8005fec <HAL_TIM_Base_Init>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d001      	beq.n	8001da4 <MX_TIM12_Init+0x5c>
  {
    Error_Handler();
 8001da0:	f7ff fd40 	bl	8001824 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001da4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001da8:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8001daa:	f107 0320 	add.w	r3, r7, #32
 8001dae:	4619      	mov	r1, r3
 8001db0:	4814      	ldr	r0, [pc, #80]	; (8001e04 <MX_TIM12_Init+0xbc>)
 8001db2:	f004 fba1 	bl	80064f8 <HAL_TIM_ConfigClockSource>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d001      	beq.n	8001dc0 <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 8001dbc:	f7ff fd32 	bl	8001824 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001dc0:	4810      	ldr	r0, [pc, #64]	; (8001e04 <MX_TIM12_Init+0xbc>)
 8001dc2:	f004 f962 	bl	800608a <HAL_TIM_PWM_Init>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d001      	beq.n	8001dd0 <MX_TIM12_Init+0x88>
  {
    Error_Handler();
 8001dcc:	f7ff fd2a 	bl	8001824 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001dd0:	2360      	movs	r3, #96	; 0x60
 8001dd2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001de0:	1d3b      	adds	r3, r7, #4
 8001de2:	2200      	movs	r2, #0
 8001de4:	4619      	mov	r1, r3
 8001de6:	4807      	ldr	r0, [pc, #28]	; (8001e04 <MX_TIM12_Init+0xbc>)
 8001de8:	f004 fac0 	bl	800636c <HAL_TIM_PWM_ConfigChannel>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d001      	beq.n	8001df6 <MX_TIM12_Init+0xae>
  {
    Error_Handler();
 8001df2:	f7ff fd17 	bl	8001824 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim12);
 8001df6:	4803      	ldr	r0, [pc, #12]	; (8001e04 <MX_TIM12_Init+0xbc>)
 8001df8:	f000 f84c 	bl	8001e94 <HAL_TIM_MspPostInit>

}
 8001dfc:	bf00      	nop
 8001dfe:	3730      	adds	r7, #48	; 0x30
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	200099f4 	.word	0x200099f4
 8001e08:	40001800 	.word	0x40001800

08001e0c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b085      	sub	sp, #20
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM4)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a0b      	ldr	r2, [pc, #44]	; (8001e48 <HAL_TIM_PWM_MspInit+0x3c>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d10d      	bne.n	8001e3a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001e1e:	2300      	movs	r3, #0
 8001e20:	60fb      	str	r3, [r7, #12]
 8001e22:	4b0a      	ldr	r3, [pc, #40]	; (8001e4c <HAL_TIM_PWM_MspInit+0x40>)
 8001e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e26:	4a09      	ldr	r2, [pc, #36]	; (8001e4c <HAL_TIM_PWM_MspInit+0x40>)
 8001e28:	f043 0304 	orr.w	r3, r3, #4
 8001e2c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e2e:	4b07      	ldr	r3, [pc, #28]	; (8001e4c <HAL_TIM_PWM_MspInit+0x40>)
 8001e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e32:	f003 0304 	and.w	r3, r3, #4
 8001e36:	60fb      	str	r3, [r7, #12]
 8001e38:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001e3a:	bf00      	nop
 8001e3c:	3714      	adds	r7, #20
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop
 8001e48:	40000800 	.word	0x40000800
 8001e4c:	40023800 	.word	0x40023800

08001e50 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b085      	sub	sp, #20
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM12)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a0b      	ldr	r2, [pc, #44]	; (8001e8c <HAL_TIM_Base_MspInit+0x3c>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d10d      	bne.n	8001e7e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* TIM12 clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 8001e62:	2300      	movs	r3, #0
 8001e64:	60fb      	str	r3, [r7, #12]
 8001e66:	4b0a      	ldr	r3, [pc, #40]	; (8001e90 <HAL_TIM_Base_MspInit+0x40>)
 8001e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6a:	4a09      	ldr	r2, [pc, #36]	; (8001e90 <HAL_TIM_Base_MspInit+0x40>)
 8001e6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e70:	6413      	str	r3, [r2, #64]	; 0x40
 8001e72:	4b07      	ldr	r3, [pc, #28]	; (8001e90 <HAL_TIM_Base_MspInit+0x40>)
 8001e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e7a:	60fb      	str	r3, [r7, #12]
 8001e7c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 8001e7e:	bf00      	nop
 8001e80:	3714      	adds	r7, #20
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr
 8001e8a:	bf00      	nop
 8001e8c:	40001800 	.word	0x40001800
 8001e90:	40023800 	.word	0x40023800

08001e94 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b08a      	sub	sp, #40	; 0x28
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e9c:	f107 0314 	add.w	r3, r7, #20
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	601a      	str	r2, [r3, #0]
 8001ea4:	605a      	str	r2, [r3, #4]
 8001ea6:	609a      	str	r2, [r3, #8]
 8001ea8:	60da      	str	r2, [r3, #12]
 8001eaa:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a24      	ldr	r2, [pc, #144]	; (8001f44 <HAL_TIM_MspPostInit+0xb0>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d11f      	bne.n	8001ef6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	613b      	str	r3, [r7, #16]
 8001eba:	4b23      	ldr	r3, [pc, #140]	; (8001f48 <HAL_TIM_MspPostInit+0xb4>)
 8001ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ebe:	4a22      	ldr	r2, [pc, #136]	; (8001f48 <HAL_TIM_MspPostInit+0xb4>)
 8001ec0:	f043 0308 	orr.w	r3, r3, #8
 8001ec4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ec6:	4b20      	ldr	r3, [pc, #128]	; (8001f48 <HAL_TIM_MspPostInit+0xb4>)
 8001ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eca:	f003 0308 	and.w	r3, r3, #8
 8001ece:	613b      	str	r3, [r7, #16]
 8001ed0:	693b      	ldr	r3, [r7, #16]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001ed2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ed6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed8:	2302      	movs	r3, #2
 8001eda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001edc:	2300      	movs	r3, #0
 8001ede:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001ee4:	2302      	movs	r3, #2
 8001ee6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ee8:	f107 0314 	add.w	r3, r7, #20
 8001eec:	4619      	mov	r1, r3
 8001eee:	4817      	ldr	r0, [pc, #92]	; (8001f4c <HAL_TIM_MspPostInit+0xb8>)
 8001ef0:	f003 f9bc 	bl	800526c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8001ef4:	e022      	b.n	8001f3c <HAL_TIM_MspPostInit+0xa8>
  else if(timHandle->Instance==TIM12)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a15      	ldr	r2, [pc, #84]	; (8001f50 <HAL_TIM_MspPostInit+0xbc>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d11d      	bne.n	8001f3c <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f00:	2300      	movs	r3, #0
 8001f02:	60fb      	str	r3, [r7, #12]
 8001f04:	4b10      	ldr	r3, [pc, #64]	; (8001f48 <HAL_TIM_MspPostInit+0xb4>)
 8001f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f08:	4a0f      	ldr	r2, [pc, #60]	; (8001f48 <HAL_TIM_MspPostInit+0xb4>)
 8001f0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f0e:	6313      	str	r3, [r2, #48]	; 0x30
 8001f10:	4b0d      	ldr	r3, [pc, #52]	; (8001f48 <HAL_TIM_MspPostInit+0xb4>)
 8001f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f18:	60fb      	str	r3, [r7, #12]
 8001f1a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001f1c:	2340      	movs	r3, #64	; 0x40
 8001f1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f20:	2302      	movs	r3, #2
 8001f22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f24:	2300      	movs	r3, #0
 8001f26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8001f2c:	2309      	movs	r3, #9
 8001f2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001f30:	f107 0314 	add.w	r3, r7, #20
 8001f34:	4619      	mov	r1, r3
 8001f36:	4807      	ldr	r0, [pc, #28]	; (8001f54 <HAL_TIM_MspPostInit+0xc0>)
 8001f38:	f003 f998 	bl	800526c <HAL_GPIO_Init>
}
 8001f3c:	bf00      	nop
 8001f3e:	3728      	adds	r7, #40	; 0x28
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	40000800 	.word	0x40000800
 8001f48:	40023800 	.word	0x40023800
 8001f4c:	40020c00 	.word	0x40020c00
 8001f50:	40001800 	.word	0x40001800
 8001f54:	40021c00 	.word	0x40021c00

08001f58 <MX_UART7_Init>:
DMA_HandleTypeDef hdma_usart1_rx;
DMA_HandleTypeDef hdma_usart6_rx;

/* UART7 init function */
void MX_UART7_Init(void)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	af00      	add	r7, sp, #0

  huart7.Instance = UART7;
 8001f5c:	4b11      	ldr	r3, [pc, #68]	; (8001fa4 <MX_UART7_Init+0x4c>)
 8001f5e:	4a12      	ldr	r2, [pc, #72]	; (8001fa8 <MX_UART7_Init+0x50>)
 8001f60:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8001f62:	4b10      	ldr	r3, [pc, #64]	; (8001fa4 <MX_UART7_Init+0x4c>)
 8001f64:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f68:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8001f6a:	4b0e      	ldr	r3, [pc, #56]	; (8001fa4 <MX_UART7_Init+0x4c>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8001f70:	4b0c      	ldr	r3, [pc, #48]	; (8001fa4 <MX_UART7_Init+0x4c>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8001f76:	4b0b      	ldr	r3, [pc, #44]	; (8001fa4 <MX_UART7_Init+0x4c>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8001f7c:	4b09      	ldr	r3, [pc, #36]	; (8001fa4 <MX_UART7_Init+0x4c>)
 8001f7e:	220c      	movs	r2, #12
 8001f80:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f82:	4b08      	ldr	r3, [pc, #32]	; (8001fa4 <MX_UART7_Init+0x4c>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f88:	4b06      	ldr	r3, [pc, #24]	; (8001fa4 <MX_UART7_Init+0x4c>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8001f8e:	4805      	ldr	r0, [pc, #20]	; (8001fa4 <MX_UART7_Init+0x4c>)
 8001f90:	f004 ff3e 	bl	8006e10 <HAL_UART_Init>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d001      	beq.n	8001f9e <MX_UART7_Init+0x46>
  {
    Error_Handler();
 8001f9a:	f7ff fc43 	bl	8001824 <Error_Handler>
  }

}
 8001f9e:	bf00      	nop
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	20009a94 	.word	0x20009a94
 8001fa8:	40007800 	.word	0x40007800

08001fac <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8001fb0:	4b11      	ldr	r3, [pc, #68]	; (8001ff8 <MX_USART1_UART_Init+0x4c>)
 8001fb2:	4a12      	ldr	r2, [pc, #72]	; (8001ffc <MX_USART1_UART_Init+0x50>)
 8001fb4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 100000;
 8001fb6:	4b10      	ldr	r3, [pc, #64]	; (8001ff8 <MX_USART1_UART_Init+0x4c>)
 8001fb8:	4a11      	ldr	r2, [pc, #68]	; (8002000 <MX_USART1_UART_Init+0x54>)
 8001fba:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 8001fbc:	4b0e      	ldr	r3, [pc, #56]	; (8001ff8 <MX_USART1_UART_Init+0x4c>)
 8001fbe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001fc2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001fc4:	4b0c      	ldr	r3, [pc, #48]	; (8001ff8 <MX_USART1_UART_Init+0x4c>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 8001fca:	4b0b      	ldr	r3, [pc, #44]	; (8001ff8 <MX_USART1_UART_Init+0x4c>)
 8001fcc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001fd0:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_RX;
 8001fd2:	4b09      	ldr	r3, [pc, #36]	; (8001ff8 <MX_USART1_UART_Init+0x4c>)
 8001fd4:	2204      	movs	r2, #4
 8001fd6:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fd8:	4b07      	ldr	r3, [pc, #28]	; (8001ff8 <MX_USART1_UART_Init+0x4c>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fde:	4b06      	ldr	r3, [pc, #24]	; (8001ff8 <MX_USART1_UART_Init+0x4c>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001fe4:	4804      	ldr	r0, [pc, #16]	; (8001ff8 <MX_USART1_UART_Init+0x4c>)
 8001fe6:	f004 ff13 	bl	8006e10 <HAL_UART_Init>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d001      	beq.n	8001ff4 <MX_USART1_UART_Init+0x48>
  {
    Error_Handler();
 8001ff0:	f7ff fc18 	bl	8001824 <Error_Handler>
  }

}
 8001ff4:	bf00      	nop
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	20009b94 	.word	0x20009b94
 8001ffc:	40011000 	.word	0x40011000
 8002000:	000186a0 	.word	0x000186a0

08002004 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	af00      	add	r7, sp, #0

  huart6.Instance = USART6;
 8002008:	4b11      	ldr	r3, [pc, #68]	; (8002050 <MX_USART6_UART_Init+0x4c>)
 800200a:	4a12      	ldr	r2, [pc, #72]	; (8002054 <MX_USART6_UART_Init+0x50>)
 800200c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800200e:	4b10      	ldr	r3, [pc, #64]	; (8002050 <MX_USART6_UART_Init+0x4c>)
 8002010:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002014:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002016:	4b0e      	ldr	r3, [pc, #56]	; (8002050 <MX_USART6_UART_Init+0x4c>)
 8002018:	2200      	movs	r2, #0
 800201a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800201c:	4b0c      	ldr	r3, [pc, #48]	; (8002050 <MX_USART6_UART_Init+0x4c>)
 800201e:	2200      	movs	r2, #0
 8002020:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002022:	4b0b      	ldr	r3, [pc, #44]	; (8002050 <MX_USART6_UART_Init+0x4c>)
 8002024:	2200      	movs	r2, #0
 8002026:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_RX;
 8002028:	4b09      	ldr	r3, [pc, #36]	; (8002050 <MX_USART6_UART_Init+0x4c>)
 800202a:	2204      	movs	r2, #4
 800202c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800202e:	4b08      	ldr	r3, [pc, #32]	; (8002050 <MX_USART6_UART_Init+0x4c>)
 8002030:	2200      	movs	r2, #0
 8002032:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002034:	4b06      	ldr	r3, [pc, #24]	; (8002050 <MX_USART6_UART_Init+0x4c>)
 8002036:	2200      	movs	r2, #0
 8002038:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800203a:	4805      	ldr	r0, [pc, #20]	; (8002050 <MX_USART6_UART_Init+0x4c>)
 800203c:	f004 fee8 	bl	8006e10 <HAL_UART_Init>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d001      	beq.n	800204a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8002046:	f7ff fbed 	bl	8001824 <Error_Handler>
  }

}
 800204a:	bf00      	nop
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	20009bd4 	.word	0x20009bd4
 8002054:	40011400 	.word	0x40011400

08002058 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b08e      	sub	sp, #56	; 0x38
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002060:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002064:	2200      	movs	r2, #0
 8002066:	601a      	str	r2, [r3, #0]
 8002068:	605a      	str	r2, [r3, #4]
 800206a:	609a      	str	r2, [r3, #8]
 800206c:	60da      	str	r2, [r3, #12]
 800206e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART7)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a74      	ldr	r2, [pc, #464]	; (8002248 <HAL_UART_MspInit+0x1f0>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d164      	bne.n	8002144 <HAL_UART_MspInit+0xec>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* UART7 clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 800207a:	2300      	movs	r3, #0
 800207c:	623b      	str	r3, [r7, #32]
 800207e:	4b73      	ldr	r3, [pc, #460]	; (800224c <HAL_UART_MspInit+0x1f4>)
 8002080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002082:	4a72      	ldr	r2, [pc, #456]	; (800224c <HAL_UART_MspInit+0x1f4>)
 8002084:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002088:	6413      	str	r3, [r2, #64]	; 0x40
 800208a:	4b70      	ldr	r3, [pc, #448]	; (800224c <HAL_UART_MspInit+0x1f4>)
 800208c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002092:	623b      	str	r3, [r7, #32]
 8002094:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002096:	2300      	movs	r3, #0
 8002098:	61fb      	str	r3, [r7, #28]
 800209a:	4b6c      	ldr	r3, [pc, #432]	; (800224c <HAL_UART_MspInit+0x1f4>)
 800209c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209e:	4a6b      	ldr	r2, [pc, #428]	; (800224c <HAL_UART_MspInit+0x1f4>)
 80020a0:	f043 0310 	orr.w	r3, r3, #16
 80020a4:	6313      	str	r3, [r2, #48]	; 0x30
 80020a6:	4b69      	ldr	r3, [pc, #420]	; (800224c <HAL_UART_MspInit+0x1f4>)
 80020a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020aa:	f003 0310 	and.w	r3, r3, #16
 80020ae:	61fb      	str	r3, [r7, #28]
 80020b0:	69fb      	ldr	r3, [r7, #28]
    /**UART7 GPIO Configuration
    PE8     ------> UART7_TX
    PE7     ------> UART7_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_7;
 80020b2:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80020b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b8:	2302      	movs	r3, #2
 80020ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80020bc:	2301      	movs	r3, #1
 80020be:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020c0:	2303      	movs	r3, #3
 80020c2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 80020c4:	2308      	movs	r3, #8
 80020c6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80020c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020cc:	4619      	mov	r1, r3
 80020ce:	4860      	ldr	r0, [pc, #384]	; (8002250 <HAL_UART_MspInit+0x1f8>)
 80020d0:	f003 f8cc 	bl	800526c <HAL_GPIO_Init>

    /* UART7 DMA Init */
    /* UART7_RX Init */
    hdma_uart7_rx.Instance = DMA1_Stream3;
 80020d4:	4b5f      	ldr	r3, [pc, #380]	; (8002254 <HAL_UART_MspInit+0x1fc>)
 80020d6:	4a60      	ldr	r2, [pc, #384]	; (8002258 <HAL_UART_MspInit+0x200>)
 80020d8:	601a      	str	r2, [r3, #0]
    hdma_uart7_rx.Init.Channel = DMA_CHANNEL_5;
 80020da:	4b5e      	ldr	r3, [pc, #376]	; (8002254 <HAL_UART_MspInit+0x1fc>)
 80020dc:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80020e0:	605a      	str	r2, [r3, #4]
    hdma_uart7_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80020e2:	4b5c      	ldr	r3, [pc, #368]	; (8002254 <HAL_UART_MspInit+0x1fc>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	609a      	str	r2, [r3, #8]
    hdma_uart7_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80020e8:	4b5a      	ldr	r3, [pc, #360]	; (8002254 <HAL_UART_MspInit+0x1fc>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	60da      	str	r2, [r3, #12]
    hdma_uart7_rx.Init.MemInc = DMA_MINC_ENABLE;
 80020ee:	4b59      	ldr	r3, [pc, #356]	; (8002254 <HAL_UART_MspInit+0x1fc>)
 80020f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80020f4:	611a      	str	r2, [r3, #16]
    hdma_uart7_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80020f6:	4b57      	ldr	r3, [pc, #348]	; (8002254 <HAL_UART_MspInit+0x1fc>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	615a      	str	r2, [r3, #20]
    hdma_uart7_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80020fc:	4b55      	ldr	r3, [pc, #340]	; (8002254 <HAL_UART_MspInit+0x1fc>)
 80020fe:	2200      	movs	r2, #0
 8002100:	619a      	str	r2, [r3, #24]
    hdma_uart7_rx.Init.Mode = DMA_CIRCULAR;
 8002102:	4b54      	ldr	r3, [pc, #336]	; (8002254 <HAL_UART_MspInit+0x1fc>)
 8002104:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002108:	61da      	str	r2, [r3, #28]
    hdma_uart7_rx.Init.Priority = DMA_PRIORITY_LOW;
 800210a:	4b52      	ldr	r3, [pc, #328]	; (8002254 <HAL_UART_MspInit+0x1fc>)
 800210c:	2200      	movs	r2, #0
 800210e:	621a      	str	r2, [r3, #32]
    hdma_uart7_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002110:	4b50      	ldr	r3, [pc, #320]	; (8002254 <HAL_UART_MspInit+0x1fc>)
 8002112:	2200      	movs	r2, #0
 8002114:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart7_rx) != HAL_OK)
 8002116:	484f      	ldr	r0, [pc, #316]	; (8002254 <HAL_UART_MspInit+0x1fc>)
 8002118:	f002 fd16 	bl	8004b48 <HAL_DMA_Init>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d001      	beq.n	8002126 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8002122:	f7ff fb7f 	bl	8001824 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart7_rx);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	4a4a      	ldr	r2, [pc, #296]	; (8002254 <HAL_UART_MspInit+0x1fc>)
 800212a:	635a      	str	r2, [r3, #52]	; 0x34
 800212c:	4a49      	ldr	r2, [pc, #292]	; (8002254 <HAL_UART_MspInit+0x1fc>)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART7 interrupt Init */
    HAL_NVIC_SetPriority(UART7_IRQn, 5, 0);
 8002132:	2200      	movs	r2, #0
 8002134:	2105      	movs	r1, #5
 8002136:	2052      	movs	r0, #82	; 0x52
 8002138:	f002 fcdc 	bl	8004af4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 800213c:	2052      	movs	r0, #82	; 0x52
 800213e:	f002 fcf5 	bl	8004b2c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8002142:	e0fe      	b.n	8002342 <HAL_UART_MspInit+0x2ea>
  else if(uartHandle->Instance==USART1)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a44      	ldr	r2, [pc, #272]	; (800225c <HAL_UART_MspInit+0x204>)
 800214a:	4293      	cmp	r3, r2
 800214c:	f040 8090 	bne.w	8002270 <HAL_UART_MspInit+0x218>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002150:	2300      	movs	r3, #0
 8002152:	61bb      	str	r3, [r7, #24]
 8002154:	4b3d      	ldr	r3, [pc, #244]	; (800224c <HAL_UART_MspInit+0x1f4>)
 8002156:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002158:	4a3c      	ldr	r2, [pc, #240]	; (800224c <HAL_UART_MspInit+0x1f4>)
 800215a:	f043 0310 	orr.w	r3, r3, #16
 800215e:	6453      	str	r3, [r2, #68]	; 0x44
 8002160:	4b3a      	ldr	r3, [pc, #232]	; (800224c <HAL_UART_MspInit+0x1f4>)
 8002162:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002164:	f003 0310 	and.w	r3, r3, #16
 8002168:	61bb      	str	r3, [r7, #24]
 800216a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800216c:	2300      	movs	r3, #0
 800216e:	617b      	str	r3, [r7, #20]
 8002170:	4b36      	ldr	r3, [pc, #216]	; (800224c <HAL_UART_MspInit+0x1f4>)
 8002172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002174:	4a35      	ldr	r2, [pc, #212]	; (800224c <HAL_UART_MspInit+0x1f4>)
 8002176:	f043 0302 	orr.w	r3, r3, #2
 800217a:	6313      	str	r3, [r2, #48]	; 0x30
 800217c:	4b33      	ldr	r3, [pc, #204]	; (800224c <HAL_UART_MspInit+0x1f4>)
 800217e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002180:	f003 0302 	and.w	r3, r3, #2
 8002184:	617b      	str	r3, [r7, #20]
 8002186:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002188:	2300      	movs	r3, #0
 800218a:	613b      	str	r3, [r7, #16]
 800218c:	4b2f      	ldr	r3, [pc, #188]	; (800224c <HAL_UART_MspInit+0x1f4>)
 800218e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002190:	4a2e      	ldr	r2, [pc, #184]	; (800224c <HAL_UART_MspInit+0x1f4>)
 8002192:	f043 0301 	orr.w	r3, r3, #1
 8002196:	6313      	str	r3, [r2, #48]	; 0x30
 8002198:	4b2c      	ldr	r3, [pc, #176]	; (800224c <HAL_UART_MspInit+0x1f4>)
 800219a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219c:	f003 0301 	and.w	r3, r3, #1
 80021a0:	613b      	str	r3, [r7, #16]
 80021a2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80021a4:	2380      	movs	r3, #128	; 0x80
 80021a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021a8:	2302      	movs	r3, #2
 80021aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ac:	2300      	movs	r3, #0
 80021ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021b0:	2303      	movs	r3, #3
 80021b2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80021b4:	2307      	movs	r3, #7
 80021b6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021bc:	4619      	mov	r1, r3
 80021be:	4828      	ldr	r0, [pc, #160]	; (8002260 <HAL_UART_MspInit+0x208>)
 80021c0:	f003 f854 	bl	800526c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80021c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ca:	2302      	movs	r3, #2
 80021cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ce:	2300      	movs	r3, #0
 80021d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021d2:	2303      	movs	r3, #3
 80021d4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80021d6:	2307      	movs	r3, #7
 80021d8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021de:	4619      	mov	r1, r3
 80021e0:	4820      	ldr	r0, [pc, #128]	; (8002264 <HAL_UART_MspInit+0x20c>)
 80021e2:	f003 f843 	bl	800526c <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80021e6:	4b20      	ldr	r3, [pc, #128]	; (8002268 <HAL_UART_MspInit+0x210>)
 80021e8:	4a20      	ldr	r2, [pc, #128]	; (800226c <HAL_UART_MspInit+0x214>)
 80021ea:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80021ec:	4b1e      	ldr	r3, [pc, #120]	; (8002268 <HAL_UART_MspInit+0x210>)
 80021ee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80021f2:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80021f4:	4b1c      	ldr	r3, [pc, #112]	; (8002268 <HAL_UART_MspInit+0x210>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80021fa:	4b1b      	ldr	r3, [pc, #108]	; (8002268 <HAL_UART_MspInit+0x210>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002200:	4b19      	ldr	r3, [pc, #100]	; (8002268 <HAL_UART_MspInit+0x210>)
 8002202:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002206:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002208:	4b17      	ldr	r3, [pc, #92]	; (8002268 <HAL_UART_MspInit+0x210>)
 800220a:	2200      	movs	r2, #0
 800220c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800220e:	4b16      	ldr	r3, [pc, #88]	; (8002268 <HAL_UART_MspInit+0x210>)
 8002210:	2200      	movs	r2, #0
 8002212:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002214:	4b14      	ldr	r3, [pc, #80]	; (8002268 <HAL_UART_MspInit+0x210>)
 8002216:	f44f 7280 	mov.w	r2, #256	; 0x100
 800221a:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800221c:	4b12      	ldr	r3, [pc, #72]	; (8002268 <HAL_UART_MspInit+0x210>)
 800221e:	2200      	movs	r2, #0
 8002220:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002222:	4b11      	ldr	r3, [pc, #68]	; (8002268 <HAL_UART_MspInit+0x210>)
 8002224:	2200      	movs	r2, #0
 8002226:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002228:	480f      	ldr	r0, [pc, #60]	; (8002268 <HAL_UART_MspInit+0x210>)
 800222a:	f002 fc8d 	bl	8004b48 <HAL_DMA_Init>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	d001      	beq.n	8002238 <HAL_UART_MspInit+0x1e0>
      Error_Handler();
 8002234:	f7ff faf6 	bl	8001824 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	4a0b      	ldr	r2, [pc, #44]	; (8002268 <HAL_UART_MspInit+0x210>)
 800223c:	635a      	str	r2, [r3, #52]	; 0x34
 800223e:	4a0a      	ldr	r2, [pc, #40]	; (8002268 <HAL_UART_MspInit+0x210>)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002244:	e07d      	b.n	8002342 <HAL_UART_MspInit+0x2ea>
 8002246:	bf00      	nop
 8002248:	40007800 	.word	0x40007800
 800224c:	40023800 	.word	0x40023800
 8002250:	40021000 	.word	0x40021000
 8002254:	20009ad4 	.word	0x20009ad4
 8002258:	40026058 	.word	0x40026058
 800225c:	40011000 	.word	0x40011000
 8002260:	40020400 	.word	0x40020400
 8002264:	40020000 	.word	0x40020000
 8002268:	20009b34 	.word	0x20009b34
 800226c:	40026440 	.word	0x40026440
  else if(uartHandle->Instance==USART6)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a35      	ldr	r2, [pc, #212]	; (800234c <HAL_UART_MspInit+0x2f4>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d163      	bne.n	8002342 <HAL_UART_MspInit+0x2ea>
    __HAL_RCC_USART6_CLK_ENABLE();
 800227a:	2300      	movs	r3, #0
 800227c:	60fb      	str	r3, [r7, #12]
 800227e:	4b34      	ldr	r3, [pc, #208]	; (8002350 <HAL_UART_MspInit+0x2f8>)
 8002280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002282:	4a33      	ldr	r2, [pc, #204]	; (8002350 <HAL_UART_MspInit+0x2f8>)
 8002284:	f043 0320 	orr.w	r3, r3, #32
 8002288:	6453      	str	r3, [r2, #68]	; 0x44
 800228a:	4b31      	ldr	r3, [pc, #196]	; (8002350 <HAL_UART_MspInit+0x2f8>)
 800228c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800228e:	f003 0320 	and.w	r3, r3, #32
 8002292:	60fb      	str	r3, [r7, #12]
 8002294:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002296:	2300      	movs	r3, #0
 8002298:	60bb      	str	r3, [r7, #8]
 800229a:	4b2d      	ldr	r3, [pc, #180]	; (8002350 <HAL_UART_MspInit+0x2f8>)
 800229c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229e:	4a2c      	ldr	r2, [pc, #176]	; (8002350 <HAL_UART_MspInit+0x2f8>)
 80022a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80022a4:	6313      	str	r3, [r2, #48]	; 0x30
 80022a6:	4b2a      	ldr	r3, [pc, #168]	; (8002350 <HAL_UART_MspInit+0x2f8>)
 80022a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022ae:	60bb      	str	r3, [r7, #8]
 80022b0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_9;
 80022b2:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 80022b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022b8:	2302      	movs	r3, #2
 80022ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022bc:	2300      	movs	r3, #0
 80022be:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022c0:	2303      	movs	r3, #3
 80022c2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80022c4:	2308      	movs	r3, #8
 80022c6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80022c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022cc:	4619      	mov	r1, r3
 80022ce:	4821      	ldr	r0, [pc, #132]	; (8002354 <HAL_UART_MspInit+0x2fc>)
 80022d0:	f002 ffcc 	bl	800526c <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 80022d4:	4b20      	ldr	r3, [pc, #128]	; (8002358 <HAL_UART_MspInit+0x300>)
 80022d6:	4a21      	ldr	r2, [pc, #132]	; (800235c <HAL_UART_MspInit+0x304>)
 80022d8:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 80022da:	4b1f      	ldr	r3, [pc, #124]	; (8002358 <HAL_UART_MspInit+0x300>)
 80022dc:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80022e0:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80022e2:	4b1d      	ldr	r3, [pc, #116]	; (8002358 <HAL_UART_MspInit+0x300>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80022e8:	4b1b      	ldr	r3, [pc, #108]	; (8002358 <HAL_UART_MspInit+0x300>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 80022ee:	4b1a      	ldr	r3, [pc, #104]	; (8002358 <HAL_UART_MspInit+0x300>)
 80022f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80022f4:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80022f6:	4b18      	ldr	r3, [pc, #96]	; (8002358 <HAL_UART_MspInit+0x300>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80022fc:	4b16      	ldr	r3, [pc, #88]	; (8002358 <HAL_UART_MspInit+0x300>)
 80022fe:	2200      	movs	r2, #0
 8002300:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8002302:	4b15      	ldr	r3, [pc, #84]	; (8002358 <HAL_UART_MspInit+0x300>)
 8002304:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002308:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 800230a:	4b13      	ldr	r3, [pc, #76]	; (8002358 <HAL_UART_MspInit+0x300>)
 800230c:	2200      	movs	r2, #0
 800230e:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002310:	4b11      	ldr	r3, [pc, #68]	; (8002358 <HAL_UART_MspInit+0x300>)
 8002312:	2200      	movs	r2, #0
 8002314:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8002316:	4810      	ldr	r0, [pc, #64]	; (8002358 <HAL_UART_MspInit+0x300>)
 8002318:	f002 fc16 	bl	8004b48 <HAL_DMA_Init>
 800231c:	4603      	mov	r3, r0
 800231e:	2b00      	cmp	r3, #0
 8002320:	d001      	beq.n	8002326 <HAL_UART_MspInit+0x2ce>
      Error_Handler();
 8002322:	f7ff fa7f 	bl	8001824 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	4a0b      	ldr	r2, [pc, #44]	; (8002358 <HAL_UART_MspInit+0x300>)
 800232a:	635a      	str	r2, [r3, #52]	; 0x34
 800232c:	4a0a      	ldr	r2, [pc, #40]	; (8002358 <HAL_UART_MspInit+0x300>)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8002332:	2200      	movs	r2, #0
 8002334:	2105      	movs	r1, #5
 8002336:	2047      	movs	r0, #71	; 0x47
 8002338:	f002 fbdc 	bl	8004af4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800233c:	2047      	movs	r0, #71	; 0x47
 800233e:	f002 fbf5 	bl	8004b2c <HAL_NVIC_EnableIRQ>
}
 8002342:	bf00      	nop
 8002344:	3738      	adds	r7, #56	; 0x38
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	40011400 	.word	0x40011400
 8002350:	40023800 	.word	0x40023800
 8002354:	40021800 	.word	0x40021800
 8002358:	20009a34 	.word	0x20009a34
 800235c:	40026428 	.word	0x40026428

08002360 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002360:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002398 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002364:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002366:	e003      	b.n	8002370 <LoopCopyDataInit>

08002368 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002368:	4b0c      	ldr	r3, [pc, #48]	; (800239c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800236a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800236c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800236e:	3104      	adds	r1, #4

08002370 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002370:	480b      	ldr	r0, [pc, #44]	; (80023a0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002372:	4b0c      	ldr	r3, [pc, #48]	; (80023a4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002374:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002376:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002378:	d3f6      	bcc.n	8002368 <CopyDataInit>
  ldr  r2, =_sbss
 800237a:	4a0b      	ldr	r2, [pc, #44]	; (80023a8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800237c:	e002      	b.n	8002384 <LoopFillZerobss>

0800237e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800237e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002380:	f842 3b04 	str.w	r3, [r2], #4

08002384 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002384:	4b09      	ldr	r3, [pc, #36]	; (80023ac <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002386:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002388:	d3f9      	bcc.n	800237e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800238a:	f7ff fc6d 	bl	8001c68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800238e:	f009 f905 	bl	800b59c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002392:	f7ff f9a7 	bl	80016e4 <main>
  bx  lr    
 8002396:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002398:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 800239c:	0800ca20 	.word	0x0800ca20
  ldr  r0, =_sdata
 80023a0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80023a4:	20000018 	.word	0x20000018
  ldr  r2, =_sbss
 80023a8:	20000018 	.word	0x20000018
  ldr  r3, = _ebss
 80023ac:	20009ea0 	.word	0x20009ea0

080023b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80023b0:	e7fe      	b.n	80023b0 <ADC_IRQHandler>
	...

080023b4 <can_ISR>:
/**
 * CAN ISR function, triggered upon RX_FIFO0_MSG_PENDING
 * converts the raw can data to the motor_data struct form as well
 */
void can_ISR(CAN_HandleTypeDef *hcan)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b094      	sub	sp, #80	; 0x50
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
	HAL_CAN_DeactivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_RX_FIFO0_FULL | CAN_IT_RX_FIFO0_OVERRUN);
 80023bc:	210e      	movs	r1, #14
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	f002 f889 	bl	80044d6 <HAL_CAN_DeactivateNotification>
	if (hcan->Instance == CAN1)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a2f      	ldr	r2, [pc, #188]	; (8002488 <can_ISR+0xd4>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d129      	bne.n	8002422 <can_ISR+0x6e>
	{
		CAN_RxHeaderTypeDef rx_msg_header;
		uint8_t rx_buffer[CAN_BUFFER_SIZE];
		can_get_msg(&hcan1, &rx_msg_header, rx_buffer);
 80023ce:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80023d2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80023d6:	4619      	mov	r1, r3
 80023d8:	482c      	ldr	r0, [pc, #176]	; (800248c <can_ISR+0xd8>)
 80023da:	f7fe fd8e 	bl	8000efa <can_get_msg>
		convert_raw_can_data(rx_msg_header.StdId, rx_buffer);
 80023de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023e0:	b29b      	uxth	r3, r3
 80023e2:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80023e6:	4611      	mov	r1, r2
 80023e8:	4618      	mov	r0, r3
 80023ea:	f000 f859 	bl	80024a0 <convert_raw_can_data>
		history[history_index++] = rx_msg_header.StdId;
 80023ee:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80023f0:	4b27      	ldr	r3, [pc, #156]	; (8002490 <can_ISR+0xdc>)
 80023f2:	881b      	ldrh	r3, [r3, #0]
 80023f4:	1c5a      	adds	r2, r3, #1
 80023f6:	b290      	uxth	r0, r2
 80023f8:	4a25      	ldr	r2, [pc, #148]	; (8002490 <can_ISR+0xdc>)
 80023fa:	8010      	strh	r0, [r2, #0]
 80023fc:	461a      	mov	r2, r3
 80023fe:	b289      	uxth	r1, r1
 8002400:	4b24      	ldr	r3, [pc, #144]	; (8002494 <can_ISR+0xe0>)
 8002402:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		if (history_index >= 10000)
 8002406:	4b22      	ldr	r3, [pc, #136]	; (8002490 <can_ISR+0xdc>)
 8002408:	881b      	ldrh	r3, [r3, #0]
 800240a:	f242 720f 	movw	r2, #9999	; 0x270f
 800240e:	4293      	cmp	r3, r2
 8002410:	d902      	bls.n	8002418 <can_ISR+0x64>
		{
			history_index = 0;
 8002412:	4b1f      	ldr	r3, [pc, #124]	; (8002490 <can_ISR+0xdc>)
 8002414:	2200      	movs	r2, #0
 8002416:	801a      	strh	r2, [r3, #0]
		}
		HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_RX_FIFO0_FULL	| CAN_IT_RX_FIFO0_OVERRUN);
 8002418:	210e      	movs	r1, #14
 800241a:	481c      	ldr	r0, [pc, #112]	; (800248c <can_ISR+0xd8>)
 800241c:	f002 f835 	bl	800448a <HAL_CAN_ActivateNotification>
		}

		HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_RX_FIFO0_FULL	| CAN_IT_RX_FIFO0_OVERRUN);
		// something
	}
}
 8002420:	e02d      	b.n	800247e <can_ISR+0xca>
	else if (hcan->Instance == CAN2)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a1c      	ldr	r2, [pc, #112]	; (8002498 <can_ISR+0xe4>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d128      	bne.n	800247e <can_ISR+0xca>
		can_get_msg(&hcan2, &rx_msg_header, rx_buffer);
 800242c:	f107 0208 	add.w	r2, r7, #8
 8002430:	f107 0310 	add.w	r3, r7, #16
 8002434:	4619      	mov	r1, r3
 8002436:	4819      	ldr	r0, [pc, #100]	; (800249c <can_ISR+0xe8>)
 8002438:	f7fe fd5f 	bl	8000efa <can_get_msg>
		convert_raw_can_data(rx_msg_header.StdId, rx_buffer);
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	b29b      	uxth	r3, r3
 8002440:	f107 0208 	add.w	r2, r7, #8
 8002444:	4611      	mov	r1, r2
 8002446:	4618      	mov	r0, r3
 8002448:	f000 f82a 	bl	80024a0 <convert_raw_can_data>
		history[history_index++] = rx_msg_header.StdId;
 800244c:	6939      	ldr	r1, [r7, #16]
 800244e:	4b10      	ldr	r3, [pc, #64]	; (8002490 <can_ISR+0xdc>)
 8002450:	881b      	ldrh	r3, [r3, #0]
 8002452:	1c5a      	adds	r2, r3, #1
 8002454:	b290      	uxth	r0, r2
 8002456:	4a0e      	ldr	r2, [pc, #56]	; (8002490 <can_ISR+0xdc>)
 8002458:	8010      	strh	r0, [r2, #0]
 800245a:	461a      	mov	r2, r3
 800245c:	b289      	uxth	r1, r1
 800245e:	4b0d      	ldr	r3, [pc, #52]	; (8002494 <can_ISR+0xe0>)
 8002460:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		if (history_index >= 10000)
 8002464:	4b0a      	ldr	r3, [pc, #40]	; (8002490 <can_ISR+0xdc>)
 8002466:	881b      	ldrh	r3, [r3, #0]
 8002468:	f242 720f 	movw	r2, #9999	; 0x270f
 800246c:	4293      	cmp	r3, r2
 800246e:	d902      	bls.n	8002476 <can_ISR+0xc2>
			history_index = 0;
 8002470:	4b07      	ldr	r3, [pc, #28]	; (8002490 <can_ISR+0xdc>)
 8002472:	2200      	movs	r2, #0
 8002474:	801a      	strh	r2, [r3, #0]
		HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_RX_FIFO0_FULL	| CAN_IT_RX_FIFO0_OVERRUN);
 8002476:	210e      	movs	r1, #14
 8002478:	4808      	ldr	r0, [pc, #32]	; (800249c <can_ISR+0xe8>)
 800247a:	f002 f806 	bl	800448a <HAL_CAN_ActivateNotification>
}
 800247e:	bf00      	nop
 8002480:	3750      	adds	r7, #80	; 0x50
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	40006400 	.word	0x40006400
 800248c:	20009800 	.word	0x20009800
 8002490:	20004e6c 	.word	0x20004e6c
 8002494:	2000004c 	.word	0x2000004c
 8002498:	40006800 	.word	0x40006800
 800249c:	200097d8 	.word	0x200097d8

080024a0 <convert_raw_can_data>:
 *
 * For GM6020 motors, it recenters the motor angle data and converts it to radians.
 */

void convert_raw_can_data(uint16_t motor_id, uint8_t *rx_buffer)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b084      	sub	sp, #16
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	4603      	mov	r3, r0
 80024a8:	6039      	str	r1, [r7, #0]
 80024aa:	80fb      	strh	r3, [r7, #6]
	switch(motor_id)
 80024ac:	88fb      	ldrh	r3, [r7, #6]
 80024ae:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 80024b2:	2b09      	cmp	r3, #9
 80024b4:	f200 8124 	bhi.w	8002700 <convert_raw_can_data+0x260>
 80024b8:	a201      	add	r2, pc, #4	; (adr r2, 80024c0 <convert_raw_can_data+0x20>)
 80024ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024be:	bf00      	nop
 80024c0:	080024e9 	.word	0x080024e9
 80024c4:	08002701 	.word	0x08002701
 80024c8:	08002701 	.word	0x08002701
 80024cc:	08002701 	.word	0x08002701
 80024d0:	08002551 	.word	0x08002551
 80024d4:	08002551 	.word	0x08002551
 80024d8:	08002701 	.word	0x08002701
 80024dc:	08002701 	.word	0x08002701
 80024e0:	0800260d 	.word	0x0800260d
 80024e4:	08002687 	.word	0x08002687
	{
		uint8_t feeder_id;
		case ID_CHASSIS:
		{
			canone_data.CHASSIS.id 					= motor_id;
 80024e8:	4a88      	ldr	r2, [pc, #544]	; (800270c <convert_raw_can_data+0x26c>)
 80024ea:	88fb      	ldrh	r3, [r7, #6]
 80024ec:	8013      	strh	r3, [r2, #0]
			canone_data.CHASSIS.angle				= (rx_buffer[0] << 8) | rx_buffer[1];
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	781b      	ldrb	r3, [r3, #0]
 80024f2:	021b      	lsls	r3, r3, #8
 80024f4:	b21a      	sxth	r2, r3
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	3301      	adds	r3, #1
 80024fa:	781b      	ldrb	r3, [r3, #0]
 80024fc:	b21b      	sxth	r3, r3
 80024fe:	4313      	orrs	r3, r2
 8002500:	b21b      	sxth	r3, r3
 8002502:	b29a      	uxth	r2, r3
 8002504:	4b81      	ldr	r3, [pc, #516]	; (800270c <convert_raw_can_data+0x26c>)
 8002506:	805a      	strh	r2, [r3, #2]
			canone_data.CHASSIS.rpm  				= (rx_buffer[2] << 8) | rx_buffer[3];
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	3302      	adds	r3, #2
 800250c:	781b      	ldrb	r3, [r3, #0]
 800250e:	021b      	lsls	r3, r3, #8
 8002510:	b21a      	sxth	r2, r3
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	3303      	adds	r3, #3
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	b21b      	sxth	r3, r3
 800251a:	4313      	orrs	r3, r2
 800251c:	b21a      	sxth	r2, r3
 800251e:	4b7b      	ldr	r3, [pc, #492]	; (800270c <convert_raw_can_data+0x26c>)
 8002520:	809a      	strh	r2, [r3, #4]
			canone_data.CHASSIS.torque 				= (rx_buffer[4] << 8) | rx_buffer[5];
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	3304      	adds	r3, #4
 8002526:	781b      	ldrb	r3, [r3, #0]
 8002528:	021b      	lsls	r3, r3, #8
 800252a:	b21a      	sxth	r2, r3
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	3305      	adds	r3, #5
 8002530:	781b      	ldrb	r3, [r3, #0]
 8002532:	b21b      	sxth	r3, r3
 8002534:	4313      	orrs	r3, r2
 8002536:	b21a      	sxth	r2, r3
 8002538:	4b74      	ldr	r3, [pc, #464]	; (800270c <convert_raw_can_data+0x26c>)
 800253a:	80da      	strh	r2, [r3, #6]
			canone_data.CHASSIS.temp 				= (rx_buffer[6]);
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	799a      	ldrb	r2, [r3, #6]
 8002540:	4b72      	ldr	r3, [pc, #456]	; (800270c <convert_raw_can_data+0x26c>)
 8002542:	721a      	strb	r2, [r3, #8]
			osEventFlagsSet(chassis_data_flag, 0x10);
 8002544:	4b72      	ldr	r3, [pc, #456]	; (8002710 <convert_raw_can_data+0x270>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	2110      	movs	r1, #16
 800254a:	4618      	mov	r0, r3
 800254c:	f005 fdfa 	bl	8008144 <osEventFlagsSet>
		}

		case ID_FEEDER_R:
		case ID_FEEDER_L:
		{
			feeder_id = motor_id - 0x205;
 8002550:	88fb      	ldrh	r3, [r7, #6]
 8002552:	b2db      	uxtb	r3, r3
 8002554:	3b05      	subs	r3, #5
 8002556:	73fb      	strb	r3, [r7, #15]
			canone_data.FEEDER[feeder_id].id 			= motor_id;
 8002558:	7bfb      	ldrb	r3, [r7, #15]
 800255a:	4a6c      	ldr	r2, [pc, #432]	; (800270c <convert_raw_can_data+0x26c>)
 800255c:	3301      	adds	r3, #1
 800255e:	2168      	movs	r1, #104	; 0x68
 8002560:	fb01 f303 	mul.w	r3, r1, r3
 8002564:	4413      	add	r3, r2
 8002566:	88fa      	ldrh	r2, [r7, #6]
 8002568:	801a      	strh	r2, [r3, #0]
			canone_data.FEEDER[feeder_id].angle			= (rx_buffer[0] << 8) | rx_buffer[1];
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	781b      	ldrb	r3, [r3, #0]
 800256e:	021b      	lsls	r3, r3, #8
 8002570:	b21a      	sxth	r2, r3
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	3301      	adds	r3, #1
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	b21b      	sxth	r3, r3
 800257a:	4313      	orrs	r3, r2
 800257c:	b21a      	sxth	r2, r3
 800257e:	7bfb      	ldrb	r3, [r7, #15]
 8002580:	b290      	uxth	r0, r2
 8002582:	4a62      	ldr	r2, [pc, #392]	; (800270c <convert_raw_can_data+0x26c>)
 8002584:	3301      	adds	r3, #1
 8002586:	2168      	movs	r1, #104	; 0x68
 8002588:	fb01 f303 	mul.w	r3, r1, r3
 800258c:	4413      	add	r3, r2
 800258e:	3302      	adds	r3, #2
 8002590:	4602      	mov	r2, r0
 8002592:	801a      	strh	r2, [r3, #0]
			canone_data.FEEDER[feeder_id].rpm  			= (rx_buffer[2] << 8) | rx_buffer[3];
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	3302      	adds	r3, #2
 8002598:	781b      	ldrb	r3, [r3, #0]
 800259a:	021b      	lsls	r3, r3, #8
 800259c:	b219      	sxth	r1, r3
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	3303      	adds	r3, #3
 80025a2:	781b      	ldrb	r3, [r3, #0]
 80025a4:	b21a      	sxth	r2, r3
 80025a6:	7bfb      	ldrb	r3, [r7, #15]
 80025a8:	430a      	orrs	r2, r1
 80025aa:	b210      	sxth	r0, r2
 80025ac:	4a57      	ldr	r2, [pc, #348]	; (800270c <convert_raw_can_data+0x26c>)
 80025ae:	3301      	adds	r3, #1
 80025b0:	2168      	movs	r1, #104	; 0x68
 80025b2:	fb01 f303 	mul.w	r3, r1, r3
 80025b6:	4413      	add	r3, r2
 80025b8:	3304      	adds	r3, #4
 80025ba:	4602      	mov	r2, r0
 80025bc:	801a      	strh	r2, [r3, #0]
			canone_data.FEEDER[feeder_id].torque		= (rx_buffer[4] << 8) | rx_buffer[5];
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	3304      	adds	r3, #4
 80025c2:	781b      	ldrb	r3, [r3, #0]
 80025c4:	021b      	lsls	r3, r3, #8
 80025c6:	b219      	sxth	r1, r3
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	3305      	adds	r3, #5
 80025cc:	781b      	ldrb	r3, [r3, #0]
 80025ce:	b21a      	sxth	r2, r3
 80025d0:	7bfb      	ldrb	r3, [r7, #15]
 80025d2:	430a      	orrs	r2, r1
 80025d4:	b210      	sxth	r0, r2
 80025d6:	4a4d      	ldr	r2, [pc, #308]	; (800270c <convert_raw_can_data+0x26c>)
 80025d8:	3301      	adds	r3, #1
 80025da:	2168      	movs	r1, #104	; 0x68
 80025dc:	fb01 f303 	mul.w	r3, r1, r3
 80025e0:	4413      	add	r3, r2
 80025e2:	3306      	adds	r3, #6
 80025e4:	4602      	mov	r2, r0
 80025e6:	801a      	strh	r2, [r3, #0]
			canone_data.FEEDER[feeder_id].temp 			= (rx_buffer[6]);
 80025e8:	7bfb      	ldrb	r3, [r7, #15]
 80025ea:	683a      	ldr	r2, [r7, #0]
 80025ec:	7990      	ldrb	r0, [r2, #6]
 80025ee:	4a47      	ldr	r2, [pc, #284]	; (800270c <convert_raw_can_data+0x26c>)
 80025f0:	2168      	movs	r1, #104	; 0x68
 80025f2:	fb01 f303 	mul.w	r3, r1, r3
 80025f6:	4413      	add	r3, r2
 80025f8:	3370      	adds	r3, #112	; 0x70
 80025fa:	4602      	mov	r2, r0
 80025fc:	701a      	strb	r2, [r3, #0]
			osEventFlagsSet(gun_data_flag, 0x10);
 80025fe:	4b45      	ldr	r3, [pc, #276]	; (8002714 <convert_raw_can_data+0x274>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	2110      	movs	r1, #16
 8002604:	4618      	mov	r0, r3
 8002606:	f005 fd9d 	bl	8008144 <osEventFlagsSet>
			break;
 800260a:	e07a      	b.n	8002702 <convert_raw_can_data+0x262>
		}

		case ID_PITCH:
		{
			canone_data.pitch.id 						= motor_id;
 800260c:	4a3f      	ldr	r2, [pc, #252]	; (800270c <convert_raw_can_data+0x26c>)
 800260e:	88fb      	ldrh	r3, [r7, #6]
 8002610:	f8a2 3138 	strh.w	r3, [r2, #312]	; 0x138
			canone_data.pitch.real_angle				= (rx_buffer[0] << 8) | rx_buffer[1];
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	781b      	ldrb	r3, [r3, #0]
 8002618:	021b      	lsls	r3, r3, #8
 800261a:	b21a      	sxth	r2, r3
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	3301      	adds	r3, #1
 8002620:	781b      	ldrb	r3, [r3, #0]
 8002622:	b21b      	sxth	r3, r3
 8002624:	4313      	orrs	r3, r2
 8002626:	b21b      	sxth	r3, r3
 8002628:	b29a      	uxth	r2, r3
 800262a:	4b38      	ldr	r3, [pc, #224]	; (800270c <convert_raw_can_data+0x26c>)
 800262c:	f8a3 213a 	strh.w	r2, [r3, #314]	; 0x13a
			canone_data.pitch.rpm  						= (rx_buffer[2] << 8) | rx_buffer[3];
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	3302      	adds	r3, #2
 8002634:	781b      	ldrb	r3, [r3, #0]
 8002636:	021b      	lsls	r3, r3, #8
 8002638:	b21a      	sxth	r2, r3
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	3303      	adds	r3, #3
 800263e:	781b      	ldrb	r3, [r3, #0]
 8002640:	b21b      	sxth	r3, r3
 8002642:	4313      	orrs	r3, r2
 8002644:	b21a      	sxth	r2, r3
 8002646:	4b31      	ldr	r3, [pc, #196]	; (800270c <convert_raw_can_data+0x26c>)
 8002648:	f8a3 2140 	strh.w	r2, [r3, #320]	; 0x140
			canone_data.pitch.torque 					= (rx_buffer[4] << 8) | rx_buffer[5];
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	3304      	adds	r3, #4
 8002650:	781b      	ldrb	r3, [r3, #0]
 8002652:	021b      	lsls	r3, r3, #8
 8002654:	b21a      	sxth	r2, r3
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	3305      	adds	r3, #5
 800265a:	781b      	ldrb	r3, [r3, #0]
 800265c:	b21b      	sxth	r3, r3
 800265e:	4313      	orrs	r3, r2
 8002660:	b21a      	sxth	r2, r3
 8002662:	4b2a      	ldr	r3, [pc, #168]	; (800270c <convert_raw_can_data+0x26c>)
 8002664:	f8a3 2142 	strh.w	r2, [r3, #322]	; 0x142
			canone_data.pitch.temp 						= (rx_buffer[6]);
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	799a      	ldrb	r2, [r3, #6]
 800266c:	4b27      	ldr	r3, [pc, #156]	; (800270c <convert_raw_can_data+0x26c>)
 800266e:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144
			gimbal_offset(&canone_data.pitch);
 8002672:	4829      	ldr	r0, [pc, #164]	; (8002718 <convert_raw_can_data+0x278>)
 8002674:	f000 f856 	bl	8002724 <gimbal_offset>
			osEventFlagsSet(gimbal_data_flag, 0x10);
 8002678:	4b28      	ldr	r3, [pc, #160]	; (800271c <convert_raw_can_data+0x27c>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	2110      	movs	r1, #16
 800267e:	4618      	mov	r0, r3
 8002680:	f005 fd60 	bl	8008144 <osEventFlagsSet>
			break;
 8002684:	e03d      	b.n	8002702 <convert_raw_can_data+0x262>
		}


		case ID_YAW:
		{
			canone_data.yaw.id 							= motor_id;
 8002686:	4a21      	ldr	r2, [pc, #132]	; (800270c <convert_raw_can_data+0x26c>)
 8002688:	88fb      	ldrh	r3, [r7, #6]
 800268a:	f8a2 31b8 	strh.w	r3, [r2, #440]	; 0x1b8
			canone_data.yaw.real_angle					= (rx_buffer[0] << 8) | rx_buffer[1];
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	781b      	ldrb	r3, [r3, #0]
 8002692:	021b      	lsls	r3, r3, #8
 8002694:	b21a      	sxth	r2, r3
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	3301      	adds	r3, #1
 800269a:	781b      	ldrb	r3, [r3, #0]
 800269c:	b21b      	sxth	r3, r3
 800269e:	4313      	orrs	r3, r2
 80026a0:	b21b      	sxth	r3, r3
 80026a2:	b29a      	uxth	r2, r3
 80026a4:	4b19      	ldr	r3, [pc, #100]	; (800270c <convert_raw_can_data+0x26c>)
 80026a6:	f8a3 21ba 	strh.w	r2, [r3, #442]	; 0x1ba
			canone_data.yaw.rpm  						= (rx_buffer[2] << 8) | rx_buffer[3];
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	3302      	adds	r3, #2
 80026ae:	781b      	ldrb	r3, [r3, #0]
 80026b0:	021b      	lsls	r3, r3, #8
 80026b2:	b21a      	sxth	r2, r3
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	3303      	adds	r3, #3
 80026b8:	781b      	ldrb	r3, [r3, #0]
 80026ba:	b21b      	sxth	r3, r3
 80026bc:	4313      	orrs	r3, r2
 80026be:	b21a      	sxth	r2, r3
 80026c0:	4b12      	ldr	r3, [pc, #72]	; (800270c <convert_raw_can_data+0x26c>)
 80026c2:	f8a3 21c0 	strh.w	r2, [r3, #448]	; 0x1c0
			canone_data.yaw.torque 						= (rx_buffer[4] << 8) | rx_buffer[5];
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	3304      	adds	r3, #4
 80026ca:	781b      	ldrb	r3, [r3, #0]
 80026cc:	021b      	lsls	r3, r3, #8
 80026ce:	b21a      	sxth	r2, r3
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	3305      	adds	r3, #5
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	b21b      	sxth	r3, r3
 80026d8:	4313      	orrs	r3, r2
 80026da:	b21a      	sxth	r2, r3
 80026dc:	4b0b      	ldr	r3, [pc, #44]	; (800270c <convert_raw_can_data+0x26c>)
 80026de:	f8a3 21c2 	strh.w	r2, [r3, #450]	; 0x1c2
			canone_data.yaw.temp 						= (rx_buffer[6]);
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	799a      	ldrb	r2, [r3, #6]
 80026e6:	4b09      	ldr	r3, [pc, #36]	; (800270c <convert_raw_can_data+0x26c>)
 80026e8:	f883 21c4 	strb.w	r2, [r3, #452]	; 0x1c4
			gimbal_offset(&canone_data.yaw);
 80026ec:	480c      	ldr	r0, [pc, #48]	; (8002720 <convert_raw_can_data+0x280>)
 80026ee:	f000 f819 	bl	8002724 <gimbal_offset>
			osEventFlagsSet(gimbal_data_flag, 0x01);
 80026f2:	4b0a      	ldr	r3, [pc, #40]	; (800271c <convert_raw_can_data+0x27c>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	2101      	movs	r1, #1
 80026f8:	4618      	mov	r0, r3
 80026fa:	f005 fd23 	bl	8008144 <osEventFlagsSet>
			break;
 80026fe:	e000      	b.n	8002702 <convert_raw_can_data+0x262>
		}
		default:
		{
			break;
 8002700:	bf00      	nop
		}
	}
}
 8002702:	bf00      	nop
 8002704:	3710      	adds	r7, #16
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	20009c18 	.word	0x20009c18
 8002710:	2000984c 	.word	0x2000984c
 8002714:	20009838 	.word	0x20009838
 8002718:	20009d50 	.word	0x20009d50
 800271c:	20009834 	.word	0x20009834
 8002720:	20009dd0 	.word	0x20009dd0

08002724 <gimbal_offset>:

/**
 * Centers the raw motor angle to between -Pi to +Pi
 */
void gimbal_offset(gimbal_data_t *gimbal_data)
{
 8002724:	b480      	push	{r7}
 8002726:	b083      	sub	sp, #12
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
	gimbal_data->adj_ang = gimbal_data->real_angle - gimbal_data->center_ang;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	885b      	ldrh	r3, [r3, #2]
 8002730:	461a      	mov	r2, r3
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	8a5b      	ldrh	r3, [r3, #18]
 8002736:	1ad3      	subs	r3, r2, r3
 8002738:	ee07 3a90 	vmov	s15, r3
 800273c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	edc3 7a01 	vstr	s15, [r3, #4]
	gimbal_data->adj_ang = (float)gimbal_data->adj_ang/(GM6020_MAX_DEFLECTION) * PI; // convert to radians
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	ed93 7a01 	vldr	s14, [r3, #4]
 800274c:	eddf 6a1d 	vldr	s13, [pc, #116]	; 80027c4 <gimbal_offset+0xa0>
 8002750:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002754:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80027c8 <gimbal_offset+0xa4>
 8002758:	ee67 7a87 	vmul.f32	s15, s15, s14
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	edc3 7a01 	vstr	s15, [r3, #4]
	if (gimbal_data->adj_ang < -PI)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	edd3 7a01 	vldr	s15, [r3, #4]
 8002768:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80027cc <gimbal_offset+0xa8>
 800276c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002770:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002774:	d50a      	bpl.n	800278c <gimbal_offset+0x68>
	{
		gimbal_data->adj_ang += 2 * PI;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	edd3 7a01 	vldr	s15, [r3, #4]
 800277c:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80027d0 <gimbal_offset+0xac>
 8002780:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	edc3 7a01 	vstr	s15, [r3, #4]
	}
	else if (gimbal_data->adj_ang > PI)
	{
		gimbal_data->adj_ang -= 2 * PI;
	}
}
 800278a:	e014      	b.n	80027b6 <gimbal_offset+0x92>
	else if (gimbal_data->adj_ang > PI)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002792:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 80027c8 <gimbal_offset+0xa4>
 8002796:	eef4 7ac7 	vcmpe.f32	s15, s14
 800279a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800279e:	dc00      	bgt.n	80027a2 <gimbal_offset+0x7e>
}
 80027a0:	e009      	b.n	80027b6 <gimbal_offset+0x92>
		gimbal_data->adj_ang -= 2 * PI;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	edd3 7a01 	vldr	s15, [r3, #4]
 80027a8:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80027d0 <gimbal_offset+0xac>
 80027ac:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	edc3 7a01 	vstr	s15, [r3, #4]
}
 80027b6:	bf00      	nop
 80027b8:	370c      	adds	r7, #12
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr
 80027c2:	bf00      	nop
 80027c4:	45800000 	.word	0x45800000
 80027c8:	40490fdb 	.word	0x40490fdb
 80027cc:	c0490fdb 	.word	0xc0490fdb
 80027d0:	40c90fdb 	.word	0x40c90fdb

080027d4 <usart_ISR>:
extern osEventFlagsId_t rc_data_flag;
extern osThreadId_t movement_control_task_handle;


void usart_ISR(UART_HandleTypeDef *UartHandle)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b082      	sub	sp, #8
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
	xavier_data.magic_number = ((xavier_rx_buffer[1] << 8) | xavier_rx_buffer[0]);
 80027dc:	4b23      	ldr	r3, [pc, #140]	; (800286c <usart_ISR+0x98>)
 80027de:	785b      	ldrb	r3, [r3, #1]
 80027e0:	021b      	lsls	r3, r3, #8
 80027e2:	b21a      	sxth	r2, r3
 80027e4:	4b21      	ldr	r3, [pc, #132]	; (800286c <usart_ISR+0x98>)
 80027e6:	781b      	ldrb	r3, [r3, #0]
 80027e8:	b21b      	sxth	r3, r3
 80027ea:	4313      	orrs	r3, r2
 80027ec:	b21a      	sxth	r2, r3
 80027ee:	4b20      	ldr	r3, [pc, #128]	; (8002870 <usart_ISR+0x9c>)
 80027f0:	801a      	strh	r2, [r3, #0]
	xavier_data.yaw = ((xavier_rx_buffer[3] << 8) | xavier_rx_buffer[2]);
 80027f2:	4b1e      	ldr	r3, [pc, #120]	; (800286c <usart_ISR+0x98>)
 80027f4:	78db      	ldrb	r3, [r3, #3]
 80027f6:	021b      	lsls	r3, r3, #8
 80027f8:	b21a      	sxth	r2, r3
 80027fa:	4b1c      	ldr	r3, [pc, #112]	; (800286c <usart_ISR+0x98>)
 80027fc:	789b      	ldrb	r3, [r3, #2]
 80027fe:	b21b      	sxth	r3, r3
 8002800:	4313      	orrs	r3, r2
 8002802:	b21a      	sxth	r2, r3
 8002804:	4b1a      	ldr	r3, [pc, #104]	; (8002870 <usart_ISR+0x9c>)
 8002806:	809a      	strh	r2, [r3, #4]
	xavier_data.pitch = ((xavier_rx_buffer[5] << 8) | xavier_rx_buffer[4]);
 8002808:	4b18      	ldr	r3, [pc, #96]	; (800286c <usart_ISR+0x98>)
 800280a:	795b      	ldrb	r3, [r3, #5]
 800280c:	021b      	lsls	r3, r3, #8
 800280e:	b21a      	sxth	r2, r3
 8002810:	4b16      	ldr	r3, [pc, #88]	; (800286c <usart_ISR+0x98>)
 8002812:	791b      	ldrb	r3, [r3, #4]
 8002814:	b21b      	sxth	r3, r3
 8002816:	4313      	orrs	r3, r2
 8002818:	b21a      	sxth	r2, r3
 800281a:	4b15      	ldr	r3, [pc, #84]	; (8002870 <usart_ISR+0x9c>)
 800281c:	805a      	strh	r2, [r3, #2]
	xavier_data.end_check = (xavier_rx_buffer[7] << 8) | xavier_rx_buffer[6];
 800281e:	4b13      	ldr	r3, [pc, #76]	; (800286c <usart_ISR+0x98>)
 8002820:	79db      	ldrb	r3, [r3, #7]
 8002822:	021b      	lsls	r3, r3, #8
 8002824:	b21a      	sxth	r2, r3
 8002826:	4b11      	ldr	r3, [pc, #68]	; (800286c <usart_ISR+0x98>)
 8002828:	799b      	ldrb	r3, [r3, #6]
 800282a:	b21b      	sxth	r3, r3
 800282c:	4313      	orrs	r3, r2
 800282e:	b21a      	sxth	r2, r3
 8002830:	4b0f      	ldr	r3, [pc, #60]	; (8002870 <usart_ISR+0x9c>)
 8002832:	80da      	strh	r2, [r3, #6]
	if (xavier_data.magic_number != START_MAGIC_NUMBER || xavier_data.end_check != END_MAGIC_NUMBER)
 8002834:	4b0e      	ldr	r3, [pc, #56]	; (8002870 <usart_ISR+0x9c>)
 8002836:	f9b3 3000 	ldrsh.w	r3, [r3]
 800283a:	2b45      	cmp	r3, #69	; 0x45
 800283c:	d105      	bne.n	800284a <usart_ISR+0x76>
 800283e:	4b0c      	ldr	r3, [pc, #48]	; (8002870 <usart_ISR+0x9c>)
 8002840:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002844:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 8002848:	d006      	beq.n	8002858 <usart_ISR+0x84>
	{
		xavier_data.pitch = 0;
 800284a:	4b09      	ldr	r3, [pc, #36]	; (8002870 <usart_ISR+0x9c>)
 800284c:	2200      	movs	r2, #0
 800284e:	805a      	strh	r2, [r3, #2]
		xavier_data.yaw = 0;
 8002850:	4b07      	ldr	r3, [pc, #28]	; (8002870 <usart_ISR+0x9c>)
 8002852:	2200      	movs	r2, #0
 8002854:	809a      	strh	r2, [r3, #4]
 8002856:	e005      	b.n	8002864 <usart_ISR+0x90>
	}
	else
	{
		//store previous data to account for bad data
		xavier_data.last_time = HAL_GetTick();
 8002858:	f001 f9da 	bl	8003c10 <HAL_GetTick>
 800285c:	4603      	mov	r3, r0
 800285e:	4a04      	ldr	r2, [pc, #16]	; (8002870 <usart_ISR+0x9c>)
 8002860:	6093      	str	r3, [r2, #8]
	}
}
 8002862:	bf00      	nop
 8002864:	bf00      	nop
 8002866:	3708      	adds	r7, #8
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}
 800286c:	20004e78 	.word	0x20004e78
 8002870:	20009e50 	.word	0x20009e50

08002874 <gimbal_control_task>:
 * FreeRTOS task for gimbal controls
 * Has HIGH2 priority
 *
 */
void gimbal_control_task(void *argument)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b082      	sub	sp, #8
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(&XAVIER_UART, xavier_rx_buffer, OBC_DATA_SIZE);
 800287c:	2208      	movs	r2, #8
 800287e:	4906      	ldr	r1, [pc, #24]	; (8002898 <gimbal_control_task+0x24>)
 8002880:	4806      	ldr	r0, [pc, #24]	; (800289c <gimbal_control_task+0x28>)
 8002882:	f004 fb13 	bl	8006eac <HAL_UART_Receive_DMA>
    while(1)
    {
		gimbal_angle_control(&canone_data.pitch, &canone_data.yaw);
 8002886:	4906      	ldr	r1, [pc, #24]	; (80028a0 <gimbal_control_task+0x2c>)
 8002888:	4806      	ldr	r0, [pc, #24]	; (80028a4 <gimbal_control_task+0x30>)
 800288a:	f000 f80d 	bl	80028a8 <gimbal_angle_control>
		vTaskDelay(1);
 800288e:	2001      	movs	r0, #1
 8002890:	f007 f8dc 	bl	8009a4c <vTaskDelay>
		gimbal_angle_control(&canone_data.pitch, &canone_data.yaw);
 8002894:	e7f7      	b.n	8002886 <gimbal_control_task+0x12>
 8002896:	bf00      	nop
 8002898:	20004e78 	.word	0x20004e78
 800289c:	20009bd4 	.word	0x20009bd4
 80028a0:	20009dd0 	.word	0x20009dd0
 80028a4:	20009d50 	.word	0x20009d50

080028a8 <gimbal_angle_control>:
 * Need to check if having ID4 (i.e. 0x208) + having the launcher motors (ID 1-3, 0x201 to 0x203)
 * still provides a fast enough response for open source robots
 */

void gimbal_angle_control(gimbal_data_t *pitch_motor, gimbal_data_t *yaw_motor)
{
 80028a8:	b5b0      	push	{r4, r5, r7, lr}
 80028aa:	b084      	sub	sp, #16
 80028ac:	af02      	add	r7, sp, #8
 80028ae:	6078      	str	r0, [r7, #4]
 80028b0:	6039      	str	r1, [r7, #0]

	//todo: add in roll compensation

	//changed from: if (remote_cmd.left_switch == a || xavier_data.last_time + XAVIER_TIMEOUT < HAL_GetTick())
	if (remote_cmd.right_switch == all_on || remote_cmd.right_switch == gimbal_on)
 80028b2:	4b75      	ldr	r3, [pc, #468]	; (8002a88 <gimbal_angle_control+0x1e0>)
 80028b4:	f993 3009 	ldrsb.w	r3, [r3, #9]
 80028b8:	2b02      	cmp	r3, #2
 80028ba:	d005      	beq.n	80028c8 <gimbal_angle_control+0x20>
 80028bc:	4b72      	ldr	r3, [pc, #456]	; (8002a88 <gimbal_angle_control+0x1e0>)
 80028be:	f993 3009 	ldrsb.w	r3, [r3, #9]
 80028c2:	2b03      	cmp	r3, #3
 80028c4:	f040 80cb 	bne.w	8002a5e <gimbal_angle_control+0x1b6>
	{
		pitch += (float)remote_cmd.right_y/660 * PITCH_SPEED * PITCH_INVERT;
 80028c8:	4b70      	ldr	r3, [pc, #448]	; (8002a8c <gimbal_angle_control+0x1e4>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4618      	mov	r0, r3
 80028ce:	f7fd fdf3 	bl	80004b8 <__aeabi_f2d>
 80028d2:	4604      	mov	r4, r0
 80028d4:	460d      	mov	r5, r1
 80028d6:	4b6c      	ldr	r3, [pc, #432]	; (8002a88 <gimbal_angle_control+0x1e0>)
 80028d8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80028dc:	ee07 3a90 	vmov	s15, r3
 80028e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028e4:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 8002a90 <gimbal_angle_control+0x1e8>
 80028e8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80028ec:	ee16 0a90 	vmov	r0, s13
 80028f0:	f7fd fde2 	bl	80004b8 <__aeabi_f2d>
 80028f4:	a362      	add	r3, pc, #392	; (adr r3, 8002a80 <gimbal_angle_control+0x1d8>)
 80028f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028fa:	f7fd fe35 	bl	8000568 <__aeabi_dmul>
 80028fe:	4602      	mov	r2, r0
 8002900:	460b      	mov	r3, r1
 8002902:	4620      	mov	r0, r4
 8002904:	4629      	mov	r1, r5
 8002906:	f7fd fc77 	bl	80001f8 <__aeabi_dsub>
 800290a:	4602      	mov	r2, r0
 800290c:	460b      	mov	r3, r1
 800290e:	4610      	mov	r0, r2
 8002910:	4619      	mov	r1, r3
 8002912:	f7fe f8eb 	bl	8000aec <__aeabi_d2f>
 8002916:	4603      	mov	r3, r0
 8002918:	4a5c      	ldr	r2, [pc, #368]	; (8002a8c <gimbal_angle_control+0x1e4>)
 800291a:	6013      	str	r3, [r2, #0]
		yaw += (float)remote_cmd.right_x/660 * YAW_SPEED * YAW_INVERT;
 800291c:	4b5d      	ldr	r3, [pc, #372]	; (8002a94 <gimbal_angle_control+0x1ec>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4618      	mov	r0, r3
 8002922:	f7fd fdc9 	bl	80004b8 <__aeabi_f2d>
 8002926:	4604      	mov	r4, r0
 8002928:	460d      	mov	r5, r1
 800292a:	4b57      	ldr	r3, [pc, #348]	; (8002a88 <gimbal_angle_control+0x1e0>)
 800292c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002930:	ee07 3a90 	vmov	s15, r3
 8002934:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002938:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8002a90 <gimbal_angle_control+0x1e8>
 800293c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002940:	ee16 0a90 	vmov	r0, s13
 8002944:	f7fd fdb8 	bl	80004b8 <__aeabi_f2d>
 8002948:	a34d      	add	r3, pc, #308	; (adr r3, 8002a80 <gimbal_angle_control+0x1d8>)
 800294a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800294e:	f7fd fe0b 	bl	8000568 <__aeabi_dmul>
 8002952:	4602      	mov	r2, r0
 8002954:	460b      	mov	r3, r1
 8002956:	4620      	mov	r0, r4
 8002958:	4629      	mov	r1, r5
 800295a:	f7fd fc4d 	bl	80001f8 <__aeabi_dsub>
 800295e:	4602      	mov	r2, r0
 8002960:	460b      	mov	r3, r1
 8002962:	4610      	mov	r0, r2
 8002964:	4619      	mov	r1, r3
 8002966:	f7fe f8c1 	bl	8000aec <__aeabi_d2f>
 800296a:	4603      	mov	r3, r0
 800296c:	4a49      	ldr	r2, [pc, #292]	; (8002a94 <gimbal_angle_control+0x1ec>)
 800296e:	6013      	str	r3, [r2, #0]
		aimbot_mode = 0;
 8002970:	4b49      	ldr	r3, [pc, #292]	; (8002a98 <gimbal_angle_control+0x1f0>)
 8002972:	2200      	movs	r2, #0
 8002974:	701a      	strb	r2, [r3, #0]
			pitch += (float)xavier_data.pitch/660 * PITCH_SPEED * PITCH_INVERT;
			yaw += (float)xavier_data.yaw/660 * YAW_SPEED * YAW_INVERT;
		}
		**/

		if (pitch > pitch_motor->max_ang)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	ed93 7a06 	vldr	s14, [r3, #24]
 800297c:	4b43      	ldr	r3, [pc, #268]	; (8002a8c <gimbal_angle_control+0x1e4>)
 800297e:	edd3 7a00 	vldr	s15, [r3]
 8002982:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002986:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800298a:	d503      	bpl.n	8002994 <gimbal_angle_control+0xec>
		{
			pitch = pitch_motor->max_ang;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	699b      	ldr	r3, [r3, #24]
 8002990:	4a3e      	ldr	r2, [pc, #248]	; (8002a8c <gimbal_angle_control+0x1e4>)
 8002992:	6013      	str	r3, [r2, #0]
		}
		if (pitch < pitch_motor->min_ang)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	ed93 7a07 	vldr	s14, [r3, #28]
 800299a:	4b3c      	ldr	r3, [pc, #240]	; (8002a8c <gimbal_angle_control+0x1e4>)
 800299c:	edd3 7a00 	vldr	s15, [r3]
 80029a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80029a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029a8:	dd03      	ble.n	80029b2 <gimbal_angle_control+0x10a>
		{
			pitch = pitch_motor->min_ang;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	69db      	ldr	r3, [r3, #28]
 80029ae:	4a37      	ldr	r2, [pc, #220]	; (8002a8c <gimbal_angle_control+0x1e4>)
 80029b0:	6013      	str	r3, [r2, #0]
		}


		if (yaw > yaw_motor->max_ang)
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	ed93 7a06 	vldr	s14, [r3, #24]
 80029b8:	4b36      	ldr	r3, [pc, #216]	; (8002a94 <gimbal_angle_control+0x1ec>)
 80029ba:	edd3 7a00 	vldr	s15, [r3]
 80029be:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80029c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029c6:	d503      	bpl.n	80029d0 <gimbal_angle_control+0x128>
		{
			yaw = yaw_motor->max_ang;
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	699b      	ldr	r3, [r3, #24]
 80029cc:	4a31      	ldr	r2, [pc, #196]	; (8002a94 <gimbal_angle_control+0x1ec>)
 80029ce:	6013      	str	r3, [r2, #0]
		}
		if (yaw < yaw_motor->min_ang)
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	ed93 7a07 	vldr	s14, [r3, #28]
 80029d6:	4b2f      	ldr	r3, [pc, #188]	; (8002a94 <gimbal_angle_control+0x1ec>)
 80029d8:	edd3 7a00 	vldr	s15, [r3]
 80029dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80029e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029e4:	dd03      	ble.n	80029ee <gimbal_angle_control+0x146>
		{
			yaw = yaw_motor->min_ang;
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	69db      	ldr	r3, [r3, #28]
 80029ea:	4a2a      	ldr	r2, [pc, #168]	; (8002a94 <gimbal_angle_control+0x1ec>)
 80029ec:	6013      	str	r3, [r2, #0]
		}

		//todo add in gimbal control logicz
		angle_pid(pitch, pitch_motor->adj_ang, pitch_motor);
 80029ee:	4b27      	ldr	r3, [pc, #156]	; (8002a8c <gimbal_angle_control+0x1e4>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4618      	mov	r0, r3
 80029f4:	f7fd fd60 	bl	80004b8 <__aeabi_f2d>
 80029f8:	4604      	mov	r4, r0
 80029fa:	460d      	mov	r5, r1
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	4618      	mov	r0, r3
 8002a02:	f7fd fd59 	bl	80004b8 <__aeabi_f2d>
 8002a06:	4602      	mov	r2, r0
 8002a08:	460b      	mov	r3, r1
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	ec43 2b11 	vmov	d1, r2, r3
 8002a10:	ec45 4b10 	vmov	d0, r4, r5
 8002a14:	f000 fa7c 	bl	8002f10 <angle_pid>
		angle_pid(yaw, yaw_motor->adj_ang, yaw_motor);
 8002a18:	4b1e      	ldr	r3, [pc, #120]	; (8002a94 <gimbal_angle_control+0x1ec>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f7fd fd4b 	bl	80004b8 <__aeabi_f2d>
 8002a22:	4604      	mov	r4, r0
 8002a24:	460d      	mov	r5, r1
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f7fd fd44 	bl	80004b8 <__aeabi_f2d>
 8002a30:	4602      	mov	r2, r0
 8002a32:	460b      	mov	r3, r1
 8002a34:	6838      	ldr	r0, [r7, #0]
 8002a36:	ec43 2b11 	vmov	d1, r2, r3
 8002a3a:	ec45 4b10 	vmov	d0, r4, r5
 8002a3e:	f000 fa67 	bl	8002f10 <angle_pid>
		CANtwo_cmd(pitch_motor->pid.output, yaw_motor->pid.output, 0, 0, GIMBAL_ID);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	f9b3 007c 	ldrsh.w	r0, [r3, #124]	; 0x7c
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	f9b3 107c 	ldrsh.w	r1, [r3, #124]	; 0x7c
 8002a4e:	f240 23ff 	movw	r3, #767	; 0x2ff
 8002a52:	9300      	str	r3, [sp, #0]
 8002a54:	2300      	movs	r3, #0
 8002a56:	2200      	movs	r2, #0
 8002a58:	f000 fb22 	bl	80030a0 <CANtwo_cmd>
 8002a5c:	e009      	b.n	8002a72 <gimbal_angle_control+0x1ca>
	}
	//kill condition
	else
	{
		CANtwo_cmd(0, 0, 0, 0, GIMBAL_ID);
 8002a5e:	f240 23ff 	movw	r3, #767	; 0x2ff
 8002a62:	9300      	str	r3, [sp, #0]
 8002a64:	2300      	movs	r3, #0
 8002a66:	2200      	movs	r2, #0
 8002a68:	2100      	movs	r1, #0
 8002a6a:	2000      	movs	r0, #0
 8002a6c:	f000 fb18 	bl	80030a0 <CANtwo_cmd>
	}
}
 8002a70:	bf00      	nop
 8002a72:	bf00      	nop
 8002a74:	3708      	adds	r7, #8
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bdb0      	pop	{r4, r5, r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	f3af 8000 	nop.w
 8002a80:	47ae147b 	.word	0x47ae147b
 8002a84:	3f847ae1 	.word	0x3f847ae1
 8002a88:	20004eac 	.word	0x20004eac
 8002a8c:	20004e70 	.word	0x20004e70
 8002a90:	44250000 	.word	0x44250000
 8002a94:	20004e74 	.word	0x20004e74
 8002a98:	20004e6e 	.word	0x20004e6e

08002a9c <gun_control_task>:
uint16_t max_pwm = 2200;


//TODO: Check rotation frequency, change to autonomous (currently dependent on RC)
void gun_control_task(void *argument)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b084      	sub	sp, #16
 8002aa0:	af02      	add	r7, sp, #8
 8002aa2:	6078      	str	r0, [r7, #4]
	//Starting PWM for 4 snail motors (grouped as 1&2 and 3&4),
	HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_1);	// PD12
 8002aa4:	2100      	movs	r1, #0
 8002aa6:	4823      	ldr	r0, [pc, #140]	; (8002b34 <gun_control_task+0x98>)
 8002aa8:	f003 fb1a 	bl	80060e0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_2); 	// PD13 (reversed)
 8002aac:	2104      	movs	r1, #4
 8002aae:	4821      	ldr	r0, [pc, #132]	; (8002b34 <gun_control_task+0x98>)
 8002ab0:	f003 fb16 	bl	80060e0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_3);	// PD14
 8002ab4:	2108      	movs	r1, #8
 8002ab6:	481f      	ldr	r0, [pc, #124]	; (8002b34 <gun_control_task+0x98>)
 8002ab8:	f003 fb12 	bl	80060e0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_4); 	// PD15 (reversed)
 8002abc:	210c      	movs	r1, #12
 8002abe:	481d      	ldr	r0, [pc, #116]	; (8002b34 <gun_control_task+0x98>)
 8002ac0:	f003 fb0e 	bl	80060e0 <HAL_TIM_PWM_Start>
	htim4.Instance->ARR = rotation_freq;
 8002ac4:	4b1c      	ldr	r3, [pc, #112]	; (8002b38 <gun_control_task+0x9c>)
 8002ac6:	881a      	ldrh	r2, [r3, #0]
 8002ac8:	4b1a      	ldr	r3, [pc, #104]	; (8002b34 <gun_control_task+0x98>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	62da      	str	r2, [r3, #44]	; 0x2c
*/

	while(1)
	{
			//refresh dbus data
			if (HAL_GetTick() - remote_cmd.last_time > REMOTE_TIMEOUT )
 8002ace:	f001 f89f 	bl	8003c10 <HAL_GetTick>
 8002ad2:	4602      	mov	r2, r0
 8002ad4:	4b19      	ldr	r3, [pc, #100]	; (8002b3c <gun_control_task+0xa0>)
 8002ad6:	69db      	ldr	r3, [r3, #28]
 8002ad8:	1ad3      	subs	r3, r2, r3
 8002ada:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002ade:	d901      	bls.n	8002ae4 <gun_control_task+0x48>
			{
				dbus_reset();
 8002ae0:	f000 fef8 	bl	80038d4 <dbus_reset>
			}
			//not sure what the condition is and if kill switch is necessary
			if(remote_cmd.right_switch == gimbal_on) //at the middle position
 8002ae4:	4b15      	ldr	r3, [pc, #84]	; (8002b3c <gun_control_task+0xa0>)
 8002ae6:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8002aea:	2b03      	cmp	r3, #3
 8002aec:	d110      	bne.n	8002b10 <gun_control_task+0x74>
			{
				osEventFlagsWait(gun_data_flag, 0x10, osFlagsWaitAll, 100);
 8002aee:	4b14      	ldr	r3, [pc, #80]	; (8002b40 <gun_control_task+0xa4>)
 8002af0:	6818      	ldr	r0, [r3, #0]
 8002af2:	2364      	movs	r3, #100	; 0x64
 8002af4:	2201      	movs	r2, #1
 8002af6:	2110      	movs	r1, #16
 8002af8:	f005 fbc0 	bl	800827c <osEventFlagsWait>
				launcher_control(canone_data.FEEDER);
 8002afc:	4811      	ldr	r0, [pc, #68]	; (8002b44 <gun_control_task+0xa8>)
 8002afe:	f000 f823 	bl	8002b48 <launcher_control>
				osEventFlagsClear(gun_data_flag, 0x10);
 8002b02:	4b0f      	ldr	r3, [pc, #60]	; (8002b40 <gun_control_task+0xa4>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	2110      	movs	r1, #16
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f005 fb73 	bl	80081f4 <osEventFlagsClear>
 8002b0e:	e00c      	b.n	8002b2a <gun_control_task+0x8e>
			}
			else
			{
				pwm_output(-1, 0);
 8002b10:	2100      	movs	r1, #0
 8002b12:	20ff      	movs	r0, #255	; 0xff
 8002b14:	f000 f8e6 	bl	8002ce4 <pwm_output>
				CANone_cmd(0,0,0,0, LAUNCHER_ID);
 8002b18:	f240 13ff 	movw	r3, #511	; 0x1ff
 8002b1c:	9300      	str	r3, [sp, #0]
 8002b1e:	2300      	movs	r3, #0
 8002b20:	2200      	movs	r2, #0
 8002b22:	2100      	movs	r1, #0
 8002b24:	2000      	movs	r0, #0
 8002b26:	f000 fa71 	bl	800300c <CANone_cmd>

			}
			//delays task for other tasks to run, CHECK THE VALUE
			vTaskDelay(CHASSIS_DELAY);
 8002b2a:	2002      	movs	r0, #2
 8002b2c:	f006 ff8e 	bl	8009a4c <vTaskDelay>
			if (HAL_GetTick() - remote_cmd.last_time > REMOTE_TIMEOUT )
 8002b30:	e7cd      	b.n	8002ace <gun_control_task+0x32>
 8002b32:	bf00      	nop
 8002b34:	200099b4 	.word	0x200099b4
 8002b38:	20000004 	.word	0x20000004
 8002b3c:	20004eac 	.word	0x20004eac
 8002b40:	20009838 	.word	0x20009838
 8002b44:	20009c80 	.word	0x20009c80

08002b48 <launcher_control>:
	}
	osThreadTerminate(NULL);
}

void launcher_control(motor_data_t *feeders)
{
 8002b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b4c:	b087      	sub	sp, #28
 8002b4e:	af02      	add	r7, sp, #8
 8002b50:	6078      	str	r0, [r7, #4]
	if (remote_cmd.left_switch == launcher_on )
 8002b52:	4b61      	ldr	r3, [pc, #388]	; (8002cd8 <launcher_control+0x190>)
 8002b54:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8002b58:	2b03      	cmp	r3, #3
 8002b5a:	f040 80a6 	bne.w	8002caa <launcher_control+0x162>
	{

		int16_t feeder_output[2];

		for (int i = 0; i < 2; i++)
 8002b5e:	2300      	movs	r3, #0
 8002b60:	60fb      	str	r3, [r7, #12]
 8002b62:	e08f      	b.n	8002c84 <launcher_control+0x13c>
		{
			//Remember to change one of the motor direction according to data sheet since PWM cannot change direction.
			pwm_output(i,cycle_to_pulse(50)); // 0-100 (max speed), 50: 50% (?) of maximum speed = 1300 microseconds pulsewidth
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	b2de      	uxtb	r6, r3
 8002b68:	2032      	movs	r0, #50	; 0x32
 8002b6a:	f000 f8f3 	bl	8002d54 <cycle_to_pulse>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	4619      	mov	r1, r3
 8002b72:	4630      	mov	r0, r6
 8002b74:	f000 f8b6 	bl	8002ce4 <pwm_output>
			if (fabs(feeders[i].torque) > FEEDER_JAM_TORQUE)
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	2268      	movs	r2, #104	; 0x68
 8002b7c:	fb02 f303 	mul.w	r3, r2, r3
 8002b80:	687a      	ldr	r2, [r7, #4]
 8002b82:	4413      	add	r3, r2
 8002b84:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f7fd fc83 	bl	8000494 <__aeabi_i2d>
 8002b8e:	4602      	mov	r2, r0
 8002b90:	460b      	mov	r3, r1
 8002b92:	4614      	mov	r4, r2
 8002b94:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8002b98:	a34d      	add	r3, pc, #308	; (adr r3, 8002cd0 <launcher_control+0x188>)
 8002b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b9e:	4620      	mov	r0, r4
 8002ba0:	4629      	mov	r1, r5
 8002ba2:	f7fd ff71 	bl	8000a88 <__aeabi_dcmpgt>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d00b      	beq.n	8002bc4 <launcher_control+0x7c>
			{
				unjamming[i] = 1;
 8002bac:	4a4b      	ldr	r2, [pc, #300]	; (8002cdc <launcher_control+0x194>)
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	4413      	add	r3, r2
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	701a      	strb	r2, [r3, #0]
				start_time[i] = HAL_GetTick();
 8002bb6:	f001 f82b 	bl	8003c10 <HAL_GetTick>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	4948      	ldr	r1, [pc, #288]	; (8002ce0 <launcher_control+0x198>)
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			}

			//unjamming needed, check what feeder output to give
			if (unjamming[i] == 1)
 8002bc4:	4a45      	ldr	r2, [pc, #276]	; (8002cdc <launcher_control+0x194>)
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	4413      	add	r3, r2
 8002bca:	781b      	ldrb	r3, [r3, #0]
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d122      	bne.n	8002c16 <launcher_control+0xce>
			{
				// feeder is unjamming itself successfully
				if (start_time[i] + FEEDER_UNJAM_TIME < HAL_GetTick())
 8002bd0:	4a43      	ldr	r2, [pc, #268]	; (8002ce0 <launcher_control+0x198>)
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bd8:	f503 76fa 	add.w	r6, r3, #500	; 0x1f4
 8002bdc:	f001 f818 	bl	8003c10 <HAL_GetTick>
 8002be0:	4603      	mov	r3, r0
 8002be2:	429e      	cmp	r6, r3
 8002be4:	d20d      	bcs.n	8002c02 <launcher_control+0xba>
				{
					unjamming[i] = 0;
 8002be6:	4a3d      	ldr	r2, [pc, #244]	; (8002cdc <launcher_control+0x194>)
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	4413      	add	r3, r2
 8002bec:	2200      	movs	r2, #0
 8002bee:	701a      	strb	r2, [r3, #0]
					feeder_output[i] = FEEDER_SPEED;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	005b      	lsls	r3, r3, #1
 8002bf4:	f107 0210 	add.w	r2, r7, #16
 8002bf8:	4413      	add	r3, r2
 8002bfa:	220a      	movs	r2, #10
 8002bfc:	f823 2c08 	strh.w	r2, [r3, #-8]
 8002c00:	e011      	b.n	8002c26 <launcher_control+0xde>
				}
				// feeder is unable to unjam, hence, send unjam speed
				else
				{
					feeder_output[i] = FEEDER_UNJAM_SPD;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	005b      	lsls	r3, r3, #1
 8002c06:	f107 0210 	add.w	r2, r7, #16
 8002c0a:	4413      	add	r3, r2
 8002c0c:	f64f 72fb 	movw	r2, #65531	; 0xfffb
 8002c10:	f823 2c08 	strh.w	r2, [r3, #-8]
 8002c14:	e007      	b.n	8002c26 <launcher_control+0xde>
				}
			}
			else
			{
				feeder_output[i] = FEEDER_SPEED;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	005b      	lsls	r3, r3, #1
 8002c1a:	f107 0210 	add.w	r2, r7, #16
 8002c1e:	4413      	add	r3, r2
 8002c20:	220a      	movs	r2, #10
 8002c22:	f823 2c08 	strh.w	r2, [r3, #-8]
			}
			speed_pid(feeder_output[i] * 36,feeders[i].rpm, &feeders[i].pid);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	005b      	lsls	r3, r3, #1
 8002c2a:	f107 0210 	add.w	r2, r7, #16
 8002c2e:	4413      	add	r3, r2
 8002c30:	f933 3c08 	ldrsh.w	r3, [r3, #-8]
 8002c34:	461a      	mov	r2, r3
 8002c36:	4613      	mov	r3, r2
 8002c38:	00db      	lsls	r3, r3, #3
 8002c3a:	4413      	add	r3, r2
 8002c3c:	009b      	lsls	r3, r3, #2
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f7fd fc28 	bl	8000494 <__aeabi_i2d>
 8002c44:	4680      	mov	r8, r0
 8002c46:	4689      	mov	r9, r1
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2268      	movs	r2, #104	; 0x68
 8002c4c:	fb02 f303 	mul.w	r3, r2, r3
 8002c50:	687a      	ldr	r2, [r7, #4]
 8002c52:	4413      	add	r3, r2
 8002c54:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f7fd fc1b 	bl	8000494 <__aeabi_i2d>
 8002c5e:	4682      	mov	sl, r0
 8002c60:	468b      	mov	fp, r1
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2268      	movs	r2, #104	; 0x68
 8002c66:	fb02 f303 	mul.w	r3, r2, r3
 8002c6a:	687a      	ldr	r2, [r7, #4]
 8002c6c:	4413      	add	r3, r2
 8002c6e:	3310      	adds	r3, #16
 8002c70:	4618      	mov	r0, r3
 8002c72:	ec4b ab11 	vmov	d1, sl, fp
 8002c76:	ec49 8b10 	vmov	d0, r8, r9
 8002c7a:	f000 f891 	bl	8002da0 <speed_pid>
		for (int i = 0; i < 2; i++)
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	3301      	adds	r3, #1
 8002c82:	60fb      	str	r3, [r7, #12]
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	f77f af6c 	ble.w	8002b64 <launcher_control+0x1c>
		}
		CANone_cmd(feeders[0].pid.output, feeders[1].pid.output,0,0,LAUNCHER_ID);  //feeder M2006 id 5-6, identifier = 0x1ff
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	f9b3 0064 	ldrsh.w	r0, [r3, #100]	; 0x64
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	3368      	adds	r3, #104	; 0x68
 8002c96:	f9b3 1064 	ldrsh.w	r1, [r3, #100]	; 0x64
 8002c9a:	f240 13ff 	movw	r3, #511	; 0x1ff
 8002c9e:	9300      	str	r3, [sp, #0]
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	f000 f9b2 	bl	800300c <CANone_cmd>
	else
	{
		pwm_output(-1,0);
		CANone_cmd(0,0,0,0, LAUNCHER_ID);
	}
}
 8002ca8:	e00c      	b.n	8002cc4 <launcher_control+0x17c>
		pwm_output(-1,0);
 8002caa:	2100      	movs	r1, #0
 8002cac:	20ff      	movs	r0, #255	; 0xff
 8002cae:	f000 f819 	bl	8002ce4 <pwm_output>
		CANone_cmd(0,0,0,0, LAUNCHER_ID);
 8002cb2:	f240 13ff 	movw	r3, #511	; 0x1ff
 8002cb6:	9300      	str	r3, [sp, #0]
 8002cb8:	2300      	movs	r3, #0
 8002cba:	2200      	movs	r2, #0
 8002cbc:	2100      	movs	r1, #0
 8002cbe:	2000      	movs	r0, #0
 8002cc0:	f000 f9a4 	bl	800300c <CANone_cmd>
}
 8002cc4:	bf00      	nop
 8002cc6:	3714      	adds	r7, #20
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002cce:	bf00      	nop
 8002cd0:	00000000 	.word	0x00000000
 8002cd4:	40bb5800 	.word	0x40bb5800
 8002cd8:	20004eac 	.word	0x20004eac
 8002cdc:	20004e88 	.word	0x20004e88
 8002ce0:	20004e80 	.word	0x20004e80

08002ce4 <pwm_output>:



void pwm_output(uint8_t timergroup, uint16_t output)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b083      	sub	sp, #12
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	4603      	mov	r3, r0
 8002cec:	460a      	mov	r2, r1
 8002cee:	71fb      	strb	r3, [r7, #7]
 8002cf0:	4613      	mov	r3, r2
 8002cf2:	80bb      	strh	r3, [r7, #4]
	if (timergroup == 0)
 8002cf4:	79fb      	ldrb	r3, [r7, #7]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d108      	bne.n	8002d0c <pwm_output+0x28>
	{
		htim4.Instance->CCR1 = output;
 8002cfa:	4b15      	ldr	r3, [pc, #84]	; (8002d50 <pwm_output+0x6c>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	88ba      	ldrh	r2, [r7, #4]
 8002d00:	635a      	str	r2, [r3, #52]	; 0x34
		htim4.Instance->CCR2 = output;
 8002d02:	4b13      	ldr	r3, [pc, #76]	; (8002d50 <pwm_output+0x6c>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	88ba      	ldrh	r2, [r7, #4]
 8002d08:	639a      	str	r2, [r3, #56]	; 0x38
		htim4.Instance->CCR2 = output;
		htim4.Instance->CCR3 = output;
		htim4.Instance->CCR4 = output;
	}

}
 8002d0a:	e01b      	b.n	8002d44 <pwm_output+0x60>
	else if (timergroup == 1)
 8002d0c:	79fb      	ldrb	r3, [r7, #7]
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d108      	bne.n	8002d24 <pwm_output+0x40>
		htim4.Instance->CCR3 = output;
 8002d12:	4b0f      	ldr	r3, [pc, #60]	; (8002d50 <pwm_output+0x6c>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	88ba      	ldrh	r2, [r7, #4]
 8002d18:	63da      	str	r2, [r3, #60]	; 0x3c
		htim4.Instance->CCR4 = output;
 8002d1a:	4b0d      	ldr	r3, [pc, #52]	; (8002d50 <pwm_output+0x6c>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	88ba      	ldrh	r2, [r7, #4]
 8002d20:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002d22:	e00f      	b.n	8002d44 <pwm_output+0x60>
		htim4.Instance->CCR1 = output;
 8002d24:	4b0a      	ldr	r3, [pc, #40]	; (8002d50 <pwm_output+0x6c>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	88ba      	ldrh	r2, [r7, #4]
 8002d2a:	635a      	str	r2, [r3, #52]	; 0x34
		htim4.Instance->CCR2 = output;
 8002d2c:	4b08      	ldr	r3, [pc, #32]	; (8002d50 <pwm_output+0x6c>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	88ba      	ldrh	r2, [r7, #4]
 8002d32:	639a      	str	r2, [r3, #56]	; 0x38
		htim4.Instance->CCR3 = output;
 8002d34:	4b06      	ldr	r3, [pc, #24]	; (8002d50 <pwm_output+0x6c>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	88ba      	ldrh	r2, [r7, #4]
 8002d3a:	63da      	str	r2, [r3, #60]	; 0x3c
		htim4.Instance->CCR4 = output;
 8002d3c:	4b04      	ldr	r3, [pc, #16]	; (8002d50 <pwm_output+0x6c>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	88ba      	ldrh	r2, [r7, #4]
 8002d42:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002d44:	bf00      	nop
 8002d46:	370c      	adds	r7, #12
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr
 8002d50:	200099b4 	.word	0x200099b4

08002d54 <cycle_to_pulse>:

uint16_t cycle_to_pulse(uint8_t cycle)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	71fb      	strb	r3, [r7, #7]
	return (int)(min_pwm + cycle*(max_pwm-min_pwm)/100) ;
 8002d5e:	79fb      	ldrb	r3, [r7, #7]
 8002d60:	4a0c      	ldr	r2, [pc, #48]	; (8002d94 <cycle_to_pulse+0x40>)
 8002d62:	8812      	ldrh	r2, [r2, #0]
 8002d64:	4611      	mov	r1, r2
 8002d66:	4a0c      	ldr	r2, [pc, #48]	; (8002d98 <cycle_to_pulse+0x44>)
 8002d68:	8812      	ldrh	r2, [r2, #0]
 8002d6a:	1a8a      	subs	r2, r1, r2
 8002d6c:	fb02 f303 	mul.w	r3, r2, r3
 8002d70:	4a0a      	ldr	r2, [pc, #40]	; (8002d9c <cycle_to_pulse+0x48>)
 8002d72:	fb82 1203 	smull	r1, r2, r2, r3
 8002d76:	1152      	asrs	r2, r2, #5
 8002d78:	17db      	asrs	r3, r3, #31
 8002d7a:	1ad3      	subs	r3, r2, r3
 8002d7c:	b29a      	uxth	r2, r3
 8002d7e:	4b06      	ldr	r3, [pc, #24]	; (8002d98 <cycle_to_pulse+0x44>)
 8002d80:	881b      	ldrh	r3, [r3, #0]
 8002d82:	4413      	add	r3, r2
 8002d84:	b29b      	uxth	r3, r3
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	370c      	adds	r7, #12
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d90:	4770      	bx	lr
 8002d92:	bf00      	nop
 8002d94:	20000008 	.word	0x20000008
 8002d98:	20000006 	.word	0x20000006
 8002d9c:	51eb851f 	.word	0x51eb851f

08002da0 <speed_pid>:


//todo: clean this place

void speed_pid(double setpoint, double curr_pt, pid_data_t *pid)
{
 8002da0:	b5b0      	push	{r4, r5, r7, lr}
 8002da2:	b08c      	sub	sp, #48	; 0x30
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	ed87 0b04 	vstr	d0, [r7, #16]
 8002daa:	ed87 1b02 	vstr	d1, [r7, #8]
 8002dae:	6078      	str	r0, [r7, #4]
	double Pout = 0;
 8002db0:	f04f 0200 	mov.w	r2, #0
 8002db4:	f04f 0300 	mov.w	r3, #0
 8002db8:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	double Iout = 0;
 8002dbc:	f04f 0200 	mov.w	r2, #0
 8002dc0:	f04f 0300 	mov.w	r3, #0
 8002dc4:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double Dout = 0;
 8002dc8:	f04f 0200 	mov.w	r2, #0
 8002dcc:	f04f 0300 	mov.w	r3, #0
 8002dd0:	e9c7 2306 	strd	r2, r3, [r7, #24]
	pid->error[2] = pid->error[1];
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002dda:	6879      	ldr	r1, [r7, #4]
 8002ddc:	e9c1 2308 	strd	r2, r3, [r1, #32]
	pid->error[1] = pid->error[0];
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002de6:	6879      	ldr	r1, [r7, #4]
 8002de8:	e9c1 2306 	strd	r2, r3, [r1, #24]
	pid->error[0] = setpoint - curr_pt;
 8002dec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002df0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002df4:	f7fd fa00 	bl	80001f8 <__aeabi_dsub>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	460b      	mov	r3, r1
 8002dfc:	6879      	ldr	r1, [r7, #4]
 8002dfe:	e9c1 2304 	strd	r2, r3, [r1, #16]
	Pout = pid->error[0] * pid->kp;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f7fd fb53 	bl	80004b8 <__aeabi_f2d>
 8002e12:	4602      	mov	r2, r0
 8002e14:	460b      	mov	r3, r1
 8002e16:	4620      	mov	r0, r4
 8002e18:	4629      	mov	r1, r5
 8002e1a:	f7fd fba5 	bl	8000568 <__aeabi_dmul>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	460b      	mov	r3, r1
 8002e22:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

    pid->error_buf[2] = pid->error_buf[1];
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002e2c:	6879      	ldr	r1, [r7, #4]
 8002e2e:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
    pid->error_buf[1] = pid->error_buf[0];
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002e38:	6879      	ldr	r1, [r7, #4]
 8002e3a:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    pid->error_buf[0] = pid->error[0] - pid->error[1];
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002e4a:	f7fd f9d5 	bl	80001f8 <__aeabi_dsub>
 8002e4e:	4602      	mov	r2, r0
 8002e50:	460b      	mov	r3, r1
 8002e52:	6879      	ldr	r1, [r7, #4]
 8002e54:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Dout = pid->error_buf[0] * pid->kd;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	4618      	mov	r0, r3
 8002e64:	f7fd fb28 	bl	80004b8 <__aeabi_f2d>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	460b      	mov	r3, r1
 8002e6c:	4620      	mov	r0, r4
 8002e6e:	4629      	mov	r1, r5
 8002e70:	f7fd fb7a 	bl	8000568 <__aeabi_dmul>
 8002e74:	4602      	mov	r2, r0
 8002e76:	460b      	mov	r3, r1
 8002e78:	e9c7 2306 	strd	r2, r3, [r7, #24]

    Iout = pid->error[0] * pid->ki;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	4618      	mov	r0, r3
 8002e88:	f7fd fb16 	bl	80004b8 <__aeabi_f2d>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	460b      	mov	r3, r1
 8002e90:	4620      	mov	r0, r4
 8002e92:	4629      	mov	r1, r5
 8002e94:	f7fd fb68 	bl	8000568 <__aeabi_dmul>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	460b      	mov	r3, r1
 8002e9c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    pid->output += Pout + Iout + Dout;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	f9b3 3054 	ldrsh.w	r3, [r3, #84]	; 0x54
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f7fd faf4 	bl	8000494 <__aeabi_i2d>
 8002eac:	4604      	mov	r4, r0
 8002eae:	460d      	mov	r5, r1
 8002eb0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002eb4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002eb8:	f7fd f9a0 	bl	80001fc <__adddf3>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	460b      	mov	r3, r1
 8002ec0:	4610      	mov	r0, r2
 8002ec2:	4619      	mov	r1, r3
 8002ec4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ec8:	f7fd f998 	bl	80001fc <__adddf3>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	460b      	mov	r3, r1
 8002ed0:	4620      	mov	r0, r4
 8002ed2:	4629      	mov	r1, r5
 8002ed4:	f7fd f992 	bl	80001fc <__adddf3>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	460b      	mov	r3, r1
 8002edc:	4610      	mov	r0, r2
 8002ede:	4619      	mov	r1, r3
 8002ee0:	f7fd fddc 	bl	8000a9c <__aeabi_d2iz>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	b21a      	sxth	r2, r3
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
//    double_limit(&Iout, pid->int_max);
    int_limit(&pid->output, pid->max_out);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	; 0x50
 8002efa:	4619      	mov	r1, r3
 8002efc:	4610      	mov	r0, r2
 8002efe:	f000 f927 	bl	8003150 <int_limit>
}
 8002f02:	bf00      	nop
 8002f04:	3730      	adds	r7, #48	; 0x30
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bdb0      	pop	{r4, r5, r7, pc}
 8002f0a:	0000      	movs	r0, r0
 8002f0c:	0000      	movs	r0, r0
	...

08002f10 <angle_pid>:


void angle_pid(double setpoint, double curr_pt, gimbal_data_t *motor)
{
 8002f10:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002f14:	b088      	sub	sp, #32
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	ed87 0b04 	vstr	d0, [r7, #16]
 8002f1c:	ed87 1b02 	vstr	d1, [r7, #8]
 8002f20:	6078      	str	r0, [r7, #4]
	float ang_diff = (setpoint - curr_pt);
 8002f22:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002f26:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002f2a:	f7fd f965 	bl	80001f8 <__aeabi_dsub>
 8002f2e:	4602      	mov	r2, r0
 8002f30:	460b      	mov	r3, r1
 8002f32:	4610      	mov	r0, r2
 8002f34:	4619      	mov	r1, r3
 8002f36:	f7fd fdd9 	bl	8000aec <__aeabi_d2f>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	61fb      	str	r3, [r7, #28]
	if (ang_diff > PI )
 8002f3e:	edd7 7a07 	vldr	s15, [r7, #28]
 8002f42:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8003000 <angle_pid+0xf0>
 8002f46:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f4e:	dd08      	ble.n	8002f62 <angle_pid+0x52>
	{
		ang_diff -= 2 * PI;
 8002f50:	edd7 7a07 	vldr	s15, [r7, #28]
 8002f54:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8003004 <angle_pid+0xf4>
 8002f58:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002f5c:	edc7 7a07 	vstr	s15, [r7, #28]
 8002f60:	e010      	b.n	8002f84 <angle_pid+0x74>
	}
	else if(ang_diff < -PI)
 8002f62:	edd7 7a07 	vldr	s15, [r7, #28]
 8002f66:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8003008 <angle_pid+0xf8>
 8002f6a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f72:	d507      	bpl.n	8002f84 <angle_pid+0x74>
	{
		ang_diff += 2 * PI;
 8002f74:	edd7 7a07 	vldr	s15, [r7, #28]
 8002f78:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8003004 <angle_pid+0xf4>
 8002f7c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002f80:	edc7 7a07 	vstr	s15, [r7, #28]
	}

	int16_t set_rpm = (ang_diff) * motor->rpm_max / GIMBAL_MAX_ANGLE_DIFF;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8002f8a:	ee07 3a90 	vmov	s15, r3
 8002f8e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002f92:	edd7 7a07 	vldr	s15, [r7, #28]
 8002f96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f9a:	ee17 0a90 	vmov	r0, s15
 8002f9e:	f7fd fa8b 	bl	80004b8 <__aeabi_f2d>
 8002fa2:	a315      	add	r3, pc, #84	; (adr r3, 8002ff8 <angle_pid+0xe8>)
 8002fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fa8:	f7fd fc08 	bl	80007bc <__aeabi_ddiv>
 8002fac:	4602      	mov	r2, r0
 8002fae:	460b      	mov	r3, r1
 8002fb0:	4610      	mov	r0, r2
 8002fb2:	4619      	mov	r1, r3
 8002fb4:	f7fd fd72 	bl	8000a9c <__aeabi_d2iz>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	837b      	strh	r3, [r7, #26]
	speed_pid(set_rpm, motor->rpm, &motor->pid);
 8002fbc:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f7fd fa67 	bl	8000494 <__aeabi_i2d>
 8002fc6:	4604      	mov	r4, r0
 8002fc8:	460d      	mov	r5, r1
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f7fd fa5f 	bl	8000494 <__aeabi_i2d>
 8002fd6:	4680      	mov	r8, r0
 8002fd8:	4689      	mov	r9, r1
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	3328      	adds	r3, #40	; 0x28
 8002fde:	4618      	mov	r0, r3
 8002fe0:	ec49 8b11 	vmov	d1, r8, r9
 8002fe4:	ec45 4b10 	vmov	d0, r4, r5
 8002fe8:	f7ff feda 	bl	8002da0 <speed_pid>


}
 8002fec:	bf00      	nop
 8002fee:	3720      	adds	r7, #32
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002ff6:	bf00      	nop
 8002ff8:	9999999a 	.word	0x9999999a
 8002ffc:	3fb99999 	.word	0x3fb99999
 8003000:	40490fdb 	.word	0x40490fdb
 8003004:	40c90fdb 	.word	0x40c90fdb
 8003008:	c0490fdb 	.word	0xc0490fdb

0800300c <CANone_cmd>:
 * @param can_stdID: the header ID, i.e. 0x200, 0x1FF and 0x2FF
 *
 * @note: this function probably only works for DJI motors due to the 2 bytes each motors require
 */
void CANone_cmd(int16_t motor1, int16_t motor2, int16_t motor3, int16_t motor4, uint32_t can_stdID)
{
 800300c:	b590      	push	{r4, r7, lr}
 800300e:	b08d      	sub	sp, #52	; 0x34
 8003010:	af00      	add	r7, sp, #0
 8003012:	4604      	mov	r4, r0
 8003014:	4608      	mov	r0, r1
 8003016:	4611      	mov	r1, r2
 8003018:	461a      	mov	r2, r3
 800301a:	4623      	mov	r3, r4
 800301c:	80fb      	strh	r3, [r7, #6]
 800301e:	4603      	mov	r3, r0
 8003020:	80bb      	strh	r3, [r7, #4]
 8003022:	460b      	mov	r3, r1
 8003024:	807b      	strh	r3, [r7, #2]
 8003026:	4613      	mov	r3, r2
 8003028:	803b      	strh	r3, [r7, #0]
	CAN_TxHeaderTypeDef  CANone_tx_message;
	uint8_t              CANone_send_data[8];
	uint32_t send_mail_box;
	CANone_tx_message.StdId = can_stdID;
 800302a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800302c:	61bb      	str	r3, [r7, #24]
	CANone_tx_message.IDE = CAN_ID_STD;
 800302e:	2300      	movs	r3, #0
 8003030:	623b      	str	r3, [r7, #32]
	CANone_tx_message.RTR = CAN_RTR_DATA;
 8003032:	2300      	movs	r3, #0
 8003034:	627b      	str	r3, [r7, #36]	; 0x24
	CANone_tx_message.DLC = 0x08;
 8003036:	2308      	movs	r3, #8
 8003038:	62bb      	str	r3, [r7, #40]	; 0x28
	CANone_send_data[0] = motor1 >> 8;
 800303a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800303e:	121b      	asrs	r3, r3, #8
 8003040:	b21b      	sxth	r3, r3
 8003042:	b2db      	uxtb	r3, r3
 8003044:	743b      	strb	r3, [r7, #16]
	CANone_send_data[1] = motor1;
 8003046:	88fb      	ldrh	r3, [r7, #6]
 8003048:	b2db      	uxtb	r3, r3
 800304a:	747b      	strb	r3, [r7, #17]
	CANone_send_data[2] = motor2 >> 8;
 800304c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003050:	121b      	asrs	r3, r3, #8
 8003052:	b21b      	sxth	r3, r3
 8003054:	b2db      	uxtb	r3, r3
 8003056:	74bb      	strb	r3, [r7, #18]
	CANone_send_data[3] = motor2;
 8003058:	88bb      	ldrh	r3, [r7, #4]
 800305a:	b2db      	uxtb	r3, r3
 800305c:	74fb      	strb	r3, [r7, #19]
	CANone_send_data[4] = motor3 >> 8;
 800305e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003062:	121b      	asrs	r3, r3, #8
 8003064:	b21b      	sxth	r3, r3
 8003066:	b2db      	uxtb	r3, r3
 8003068:	753b      	strb	r3, [r7, #20]
	CANone_send_data[5] = motor3;
 800306a:	887b      	ldrh	r3, [r7, #2]
 800306c:	b2db      	uxtb	r3, r3
 800306e:	757b      	strb	r3, [r7, #21]
	CANone_send_data[6] = motor4 >> 8;
 8003070:	f9b7 3000 	ldrsh.w	r3, [r7]
 8003074:	121b      	asrs	r3, r3, #8
 8003076:	b21b      	sxth	r3, r3
 8003078:	b2db      	uxtb	r3, r3
 800307a:	75bb      	strb	r3, [r7, #22]
	CANone_send_data[7] = motor4;
 800307c:	883b      	ldrh	r3, [r7, #0]
 800307e:	b2db      	uxtb	r3, r3
 8003080:	75fb      	strb	r3, [r7, #23]
	HAL_CAN_AddTxMessage(&hcan1, &CANone_tx_message, CANone_send_data, &send_mail_box);
 8003082:	f107 030c 	add.w	r3, r7, #12
 8003086:	f107 0210 	add.w	r2, r7, #16
 800308a:	f107 0118 	add.w	r1, r7, #24
 800308e:	4803      	ldr	r0, [pc, #12]	; (800309c <CANone_cmd+0x90>)
 8003090:	f001 f80e 	bl	80040b0 <HAL_CAN_AddTxMessage>
}
 8003094:	bf00      	nop
 8003096:	3734      	adds	r7, #52	; 0x34
 8003098:	46bd      	mov	sp, r7
 800309a:	bd90      	pop	{r4, r7, pc}
 800309c:	20009800 	.word	0x20009800

080030a0 <CANtwo_cmd>:
 * @param can_stdID: the header ID, i.e. 0x200, 0x1FF and 0x2FF
 *
 * @note: this function probably only works for DJI motors due to the 2 bytes each motors require
 */
void CANtwo_cmd(int16_t motor1, int16_t motor2, int16_t motor3, int16_t motor4, uint32_t can_stdID)
{
 80030a0:	b590      	push	{r4, r7, lr}
 80030a2:	b085      	sub	sp, #20
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	4604      	mov	r4, r0
 80030a8:	4608      	mov	r0, r1
 80030aa:	4611      	mov	r1, r2
 80030ac:	461a      	mov	r2, r3
 80030ae:	4623      	mov	r3, r4
 80030b0:	80fb      	strh	r3, [r7, #6]
 80030b2:	4603      	mov	r3, r0
 80030b4:	80bb      	strh	r3, [r7, #4]
 80030b6:	460b      	mov	r3, r1
 80030b8:	807b      	strh	r3, [r7, #2]
 80030ba:	4613      	mov	r3, r2
 80030bc:	803b      	strh	r3, [r7, #0]
	static CAN_TxHeaderTypeDef  CANtwo_tx_message;
	static uint8_t              CANtwo_send_data[8];
	uint32_t send_mail_box;
	CANtwo_tx_message.StdId = can_stdID;
 80030be:	4a21      	ldr	r2, [pc, #132]	; (8003144 <CANtwo_cmd+0xa4>)
 80030c0:	6a3b      	ldr	r3, [r7, #32]
 80030c2:	6013      	str	r3, [r2, #0]
	CANtwo_tx_message.IDE = CAN_ID_STD;
 80030c4:	4b1f      	ldr	r3, [pc, #124]	; (8003144 <CANtwo_cmd+0xa4>)
 80030c6:	2200      	movs	r2, #0
 80030c8:	609a      	str	r2, [r3, #8]
	CANtwo_tx_message.RTR = CAN_RTR_DATA;
 80030ca:	4b1e      	ldr	r3, [pc, #120]	; (8003144 <CANtwo_cmd+0xa4>)
 80030cc:	2200      	movs	r2, #0
 80030ce:	60da      	str	r2, [r3, #12]
	CANtwo_tx_message.DLC = 0x08;
 80030d0:	4b1c      	ldr	r3, [pc, #112]	; (8003144 <CANtwo_cmd+0xa4>)
 80030d2:	2208      	movs	r2, #8
 80030d4:	611a      	str	r2, [r3, #16]
	CANtwo_send_data[0] = motor1 >> 8;
 80030d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80030da:	121b      	asrs	r3, r3, #8
 80030dc:	b21b      	sxth	r3, r3
 80030de:	b2da      	uxtb	r2, r3
 80030e0:	4b19      	ldr	r3, [pc, #100]	; (8003148 <CANtwo_cmd+0xa8>)
 80030e2:	701a      	strb	r2, [r3, #0]
	CANtwo_send_data[1] = motor1;
 80030e4:	88fb      	ldrh	r3, [r7, #6]
 80030e6:	b2da      	uxtb	r2, r3
 80030e8:	4b17      	ldr	r3, [pc, #92]	; (8003148 <CANtwo_cmd+0xa8>)
 80030ea:	705a      	strb	r2, [r3, #1]
	CANtwo_send_data[2] = motor2 >> 8;
 80030ec:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80030f0:	121b      	asrs	r3, r3, #8
 80030f2:	b21b      	sxth	r3, r3
 80030f4:	b2da      	uxtb	r2, r3
 80030f6:	4b14      	ldr	r3, [pc, #80]	; (8003148 <CANtwo_cmd+0xa8>)
 80030f8:	709a      	strb	r2, [r3, #2]
	CANtwo_send_data[3] = motor2;
 80030fa:	88bb      	ldrh	r3, [r7, #4]
 80030fc:	b2da      	uxtb	r2, r3
 80030fe:	4b12      	ldr	r3, [pc, #72]	; (8003148 <CANtwo_cmd+0xa8>)
 8003100:	70da      	strb	r2, [r3, #3]
	CANtwo_send_data[4] = motor3 >> 8;
 8003102:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003106:	121b      	asrs	r3, r3, #8
 8003108:	b21b      	sxth	r3, r3
 800310a:	b2da      	uxtb	r2, r3
 800310c:	4b0e      	ldr	r3, [pc, #56]	; (8003148 <CANtwo_cmd+0xa8>)
 800310e:	711a      	strb	r2, [r3, #4]
	CANtwo_send_data[5] = motor3;
 8003110:	887b      	ldrh	r3, [r7, #2]
 8003112:	b2da      	uxtb	r2, r3
 8003114:	4b0c      	ldr	r3, [pc, #48]	; (8003148 <CANtwo_cmd+0xa8>)
 8003116:	715a      	strb	r2, [r3, #5]
	CANtwo_send_data[6] = motor4 >> 8;
 8003118:	f9b7 3000 	ldrsh.w	r3, [r7]
 800311c:	121b      	asrs	r3, r3, #8
 800311e:	b21b      	sxth	r3, r3
 8003120:	b2da      	uxtb	r2, r3
 8003122:	4b09      	ldr	r3, [pc, #36]	; (8003148 <CANtwo_cmd+0xa8>)
 8003124:	719a      	strb	r2, [r3, #6]
	CANtwo_send_data[7] = motor4;
 8003126:	883b      	ldrh	r3, [r7, #0]
 8003128:	b2da      	uxtb	r2, r3
 800312a:	4b07      	ldr	r3, [pc, #28]	; (8003148 <CANtwo_cmd+0xa8>)
 800312c:	71da      	strb	r2, [r3, #7]
	HAL_CAN_AddTxMessage(&hcan2, &CANtwo_tx_message, CANtwo_send_data, &send_mail_box);
 800312e:	f107 030c 	add.w	r3, r7, #12
 8003132:	4a05      	ldr	r2, [pc, #20]	; (8003148 <CANtwo_cmd+0xa8>)
 8003134:	4903      	ldr	r1, [pc, #12]	; (8003144 <CANtwo_cmd+0xa4>)
 8003136:	4805      	ldr	r0, [pc, #20]	; (800314c <CANtwo_cmd+0xac>)
 8003138:	f000 ffba 	bl	80040b0 <HAL_CAN_AddTxMessage>
}
 800313c:	bf00      	nop
 800313e:	3714      	adds	r7, #20
 8003140:	46bd      	mov	sp, r7
 8003142:	bd90      	pop	{r4, r7, pc}
 8003144:	20004e8c 	.word	0x20004e8c
 8003148:	20004ea4 	.word	0x20004ea4
 800314c:	200097d8 	.word	0x200097d8

08003150 <int_limit>:
	}

}

void int_limit(int16_t *vIn, int16_t max)
{
 8003150:	b480      	push	{r7}
 8003152:	b083      	sub	sp, #12
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
 8003158:	460b      	mov	r3, r1
 800315a:	807b      	strh	r3, [r7, #2]
	if (*vIn > max)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003162:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8003166:	429a      	cmp	r2, r3
 8003168:	da03      	bge.n	8003172 <int_limit+0x22>
	{
		*vIn = max;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	887a      	ldrh	r2, [r7, #2]
 800316e:	801a      	strh	r2, [r3, #0]
	}
	else if (*vIn < -max)
	{
		*vIn = -max;
	}
}
 8003170:	e00e      	b.n	8003190 <int_limit+0x40>
	else if (*vIn < -max)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003178:	461a      	mov	r2, r3
 800317a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800317e:	425b      	negs	r3, r3
 8003180:	429a      	cmp	r2, r3
 8003182:	da05      	bge.n	8003190 <int_limit+0x40>
		*vIn = -max;
 8003184:	887b      	ldrh	r3, [r7, #2]
 8003186:	425b      	negs	r3, r3
 8003188:	b29b      	uxth	r3, r3
 800318a:	b21a      	sxth	r2, r3
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	801a      	strh	r2, [r3, #0]
}
 8003190:	bf00      	nop
 8003192:	370c      	adds	r7, #12
 8003194:	46bd      	mov	sp, r7
 8003196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319a:	4770      	bx	lr

0800319c <movement_control_task>:
static uint8_t unjamming = 0;



void movement_control_task(void *argument)
{
 800319c:	b590      	push	{r4, r7, lr}
 800319e:	b099      	sub	sp, #100	; 0x64
 80031a0:	af16      	add	r7, sp, #88	; 0x58
 80031a2:	6078      	str	r0, [r7, #4]
	while(1)
	{
		if(remote_cmd.right_switch == all_on) //All on
 80031a4:	4b10      	ldr	r3, [pc, #64]	; (80031e8 <movement_control_task+0x4c>)
 80031a6:	f993 3009 	ldrsb.w	r3, [r3, #9]
 80031aa:	2b02      	cmp	r3, #2
 80031ac:	d118      	bne.n	80031e0 <movement_control_task+0x44>
		{
			osEventFlagsWait(chassis_data_flag, 0x10, osFlagsWaitAll, 100);
 80031ae:	4b0f      	ldr	r3, [pc, #60]	; (80031ec <movement_control_task+0x50>)
 80031b0:	6818      	ldr	r0, [r3, #0]
 80031b2:	2364      	movs	r3, #100	; 0x64
 80031b4:	2201      	movs	r2, #1
 80031b6:	2110      	movs	r1, #16
 80031b8:	f005 f860 	bl	800827c <osEventFlagsWait>
			chassis_motion_control(canone_data.CHASSIS);
 80031bc:	4c0c      	ldr	r4, [pc, #48]	; (80031f0 <movement_control_task+0x54>)
 80031be:	4668      	mov	r0, sp
 80031c0:	f104 0310 	add.w	r3, r4, #16
 80031c4:	2258      	movs	r2, #88	; 0x58
 80031c6:	4619      	mov	r1, r3
 80031c8:	f008 fa0c 	bl	800b5e4 <memcpy>
 80031cc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80031d0:	f000 f812 	bl	80031f8 <chassis_motion_control>
			osEventFlagsClear(chassis_data_flag, 0x10);
 80031d4:	4b05      	ldr	r3, [pc, #20]	; (80031ec <movement_control_task+0x50>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	2110      	movs	r1, #16
 80031da:	4618      	mov	r0, r3
 80031dc:	f005 f80a 	bl	80081f4 <osEventFlagsClear>
		}
		//delays task for other tasks to run
		vTaskDelay(CHASSIS_DELAY);
 80031e0:	2002      	movs	r0, #2
 80031e2:	f006 fc33 	bl	8009a4c <vTaskDelay>
		if(remote_cmd.right_switch == all_on) //All on
 80031e6:	e7dd      	b.n	80031a4 <movement_control_task+0x8>
 80031e8:	20004eac 	.word	0x20004eac
 80031ec:	2000984c 	.word	0x2000984c
 80031f0:	20009c18 	.word	0x20009c18
 80031f4:	00000000 	.word	0x00000000

080031f8 <chassis_motion_control>:

//to OS sentry team: you can literally delete everything and just leave a multiplier for one of the joystick to
//control the chassis
//so once that's done maybe you can start on a system to move the sentry until the RNG says to not move
void chassis_motion_control(motor_data_t *motor)
{
 80031f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031fc:	b09a      	sub	sp, #104	; 0x68
 80031fe:	af02      	add	r7, sp, #8
 8003200:	62f8      	str	r0, [r7, #44]	; 0x2c
	//Holds wheel speed output, fl = front left, etc...
	int16_t out_wheel[4] = {0,};
 8003202:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003206:	2200      	movs	r2, #0
 8003208:	601a      	str	r2, [r3, #0]
 800320a:	605a      	str	r2, [r3, #4]
	int16_t highest_speed = 0;
 800320c:	2300      	movs	r3, #0
 800320e:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
	double rel_angle = 0;
 8003212:	f04f 0200 	mov.w	r2, #0
 8003216:	f04f 0300 	mov.w	r3, #0
 800321a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	double control_yaw;
	float rel_x = 0;
 800321e:	f04f 0300 	mov.w	r3, #0
 8003222:	63fb      	str	r3, [r7, #60]	; 0x3c
	float rel_y = 0;
 8003224:	f04f 0300 	mov.w	r3, #0
 8003228:	63bb      	str	r3, [r7, #56]	; 0x38

	rel_angle = canone_data.yaw.adj_ang;
 800322a:	4ba5      	ldr	r3, [pc, #660]	; (80034c0 <chassis_motion_control+0x2c8>)
 800322c:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 8003230:	4618      	mov	r0, r3
 8003232:	f7fd f941 	bl	80004b8 <__aeabi_f2d>
 8003236:	4602      	mov	r2, r0
 8003238:	460b      	mov	r3, r1
 800323a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	//rotation matrix of the initial vectorrrr wow MA1513 is relevant?!
	rel_x = (-remote_cmd.left_x * cos(-rel_angle)) + (remote_cmd.left_y * -sin(-rel_angle));
 800323e:	4ba1      	ldr	r3, [pc, #644]	; (80034c4 <chassis_motion_control+0x2cc>)
 8003240:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003244:	425b      	negs	r3, r3
 8003246:	4618      	mov	r0, r3
 8003248:	f7fd f924 	bl	8000494 <__aeabi_i2d>
 800324c:	4604      	mov	r4, r0
 800324e:	460d      	mov	r5, r1
 8003250:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003252:	623b      	str	r3, [r7, #32]
 8003254:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003256:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800325a:	627b      	str	r3, [r7, #36]	; 0x24
 800325c:	ed97 0b08 	vldr	d0, [r7, #32]
 8003260:	f008 f9d6 	bl	800b610 <cos>
 8003264:	ec53 2b10 	vmov	r2, r3, d0
 8003268:	4620      	mov	r0, r4
 800326a:	4629      	mov	r1, r5
 800326c:	f7fd f97c 	bl	8000568 <__aeabi_dmul>
 8003270:	4602      	mov	r2, r0
 8003272:	460b      	mov	r3, r1
 8003274:	4690      	mov	r8, r2
 8003276:	4699      	mov	r9, r3
 8003278:	4b92      	ldr	r3, [pc, #584]	; (80034c4 <chassis_motion_control+0x2cc>)
 800327a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800327e:	4618      	mov	r0, r3
 8003280:	f7fd f908 	bl	8000494 <__aeabi_i2d>
 8003284:	4604      	mov	r4, r0
 8003286:	460d      	mov	r5, r1
 8003288:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 800328c:	f008 fa10 	bl	800b6b0 <sin>
 8003290:	ec53 2b10 	vmov	r2, r3, d0
 8003294:	4620      	mov	r0, r4
 8003296:	4629      	mov	r1, r5
 8003298:	f7fd f966 	bl	8000568 <__aeabi_dmul>
 800329c:	4602      	mov	r2, r0
 800329e:	460b      	mov	r3, r1
 80032a0:	4640      	mov	r0, r8
 80032a2:	4649      	mov	r1, r9
 80032a4:	f7fc ffaa 	bl	80001fc <__adddf3>
 80032a8:	4602      	mov	r2, r0
 80032aa:	460b      	mov	r3, r1
 80032ac:	4610      	mov	r0, r2
 80032ae:	4619      	mov	r1, r3
 80032b0:	f7fd fc1c 	bl	8000aec <__aeabi_d2f>
 80032b4:	4603      	mov	r3, r0
 80032b6:	63fb      	str	r3, [r7, #60]	; 0x3c
	rel_y = (-remote_cmd.left_x * sin(-rel_angle)) + (remote_cmd.left_y *  cos(-rel_angle));
 80032b8:	4b82      	ldr	r3, [pc, #520]	; (80034c4 <chassis_motion_control+0x2cc>)
 80032ba:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80032be:	425b      	negs	r3, r3
 80032c0:	4618      	mov	r0, r3
 80032c2:	f7fd f8e7 	bl	8000494 <__aeabi_i2d>
 80032c6:	4604      	mov	r4, r0
 80032c8:	460d      	mov	r5, r1
 80032ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032cc:	61bb      	str	r3, [r7, #24]
 80032ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80032d4:	61fb      	str	r3, [r7, #28]
 80032d6:	ed97 0b06 	vldr	d0, [r7, #24]
 80032da:	f008 f9e9 	bl	800b6b0 <sin>
 80032de:	ec53 2b10 	vmov	r2, r3, d0
 80032e2:	4620      	mov	r0, r4
 80032e4:	4629      	mov	r1, r5
 80032e6:	f7fd f93f 	bl	8000568 <__aeabi_dmul>
 80032ea:	4602      	mov	r2, r0
 80032ec:	460b      	mov	r3, r1
 80032ee:	4690      	mov	r8, r2
 80032f0:	4699      	mov	r9, r3
 80032f2:	4b74      	ldr	r3, [pc, #464]	; (80034c4 <chassis_motion_control+0x2cc>)
 80032f4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80032f8:	4618      	mov	r0, r3
 80032fa:	f7fd f8cb 	bl	8000494 <__aeabi_i2d>
 80032fe:	4604      	mov	r4, r0
 8003300:	460d      	mov	r5, r1
 8003302:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003304:	613b      	str	r3, [r7, #16]
 8003306:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003308:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800330c:	617b      	str	r3, [r7, #20]
 800330e:	ed97 0b04 	vldr	d0, [r7, #16]
 8003312:	f008 f97d 	bl	800b610 <cos>
 8003316:	ec53 2b10 	vmov	r2, r3, d0
 800331a:	4620      	mov	r0, r4
 800331c:	4629      	mov	r1, r5
 800331e:	f7fd f923 	bl	8000568 <__aeabi_dmul>
 8003322:	4602      	mov	r2, r0
 8003324:	460b      	mov	r3, r1
 8003326:	4640      	mov	r0, r8
 8003328:	4649      	mov	r1, r9
 800332a:	f7fc ff67 	bl	80001fc <__adddf3>
 800332e:	4602      	mov	r2, r0
 8003330:	460b      	mov	r3, r1
 8003332:	4610      	mov	r0, r2
 8003334:	4619      	mov	r1, r3
 8003336:	f7fd fbd9 	bl	8000aec <__aeabi_d2f>
 800333a:	4603      	mov	r3, r0
 800333c:	63bb      	str	r3, [r7, #56]	; 0x38
	out_wheel[0] = (-rel_y - (rel_x * HORIZONTAL_MULT));
 800333e:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8003342:	eeb1 7a67 	vneg.f32	s14, s15
 8003346:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800334a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800334e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003352:	ee17 3a90 	vmov	r3, s15
 8003356:	b21b      	sxth	r3, r3
 8003358:	863b      	strh	r3, [r7, #48]	; 0x30
	out_wheel[1] = ( rel_y - (rel_x * HORIZONTAL_MULT));
 800335a:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800335e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8003362:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003366:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800336a:	ee17 3a90 	vmov	r3, s15
 800336e:	b21b      	sxth	r3, r3
 8003370:	867b      	strh	r3, [r7, #50]	; 0x32
	out_wheel[2] = ( rel_y + (rel_x * HORIZONTAL_MULT));
 8003372:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8003376:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800337a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800337e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003382:	ee17 3a90 	vmov	r3, s15
 8003386:	b21b      	sxth	r3, r3
 8003388:	86bb      	strh	r3, [r7, #52]	; 0x34
	out_wheel[3] = (-rel_y + (rel_x * HORIZONTAL_MULT));
 800338a:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800338e:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8003392:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003396:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800339a:	ee17 3a90 	vmov	r3, s15
 800339e:	b21b      	sxth	r3, r3
 80033a0:	86fb      	strh	r3, [r7, #54]	; 0x36

	/* normalize values as a percentage and multiple by our preset max speed
	 * this will be the setpoint for speed values
	 **/
	if(canone_data.yaw.adj_ang >= (canone_data.yaw.max_ang) - 0.05)
 80033a2:	4b47      	ldr	r3, [pc, #284]	; (80034c0 <chassis_motion_control+0x2c8>)
 80033a4:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 80033a8:	4618      	mov	r0, r3
 80033aa:	f7fd f885 	bl	80004b8 <__aeabi_f2d>
 80033ae:	4604      	mov	r4, r0
 80033b0:	460d      	mov	r5, r1
 80033b2:	4b43      	ldr	r3, [pc, #268]	; (80034c0 <chassis_motion_control+0x2c8>)
 80033b4:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 80033b8:	4618      	mov	r0, r3
 80033ba:	f7fd f87d 	bl	80004b8 <__aeabi_f2d>
 80033be:	a33e      	add	r3, pc, #248	; (adr r3, 80034b8 <chassis_motion_control+0x2c0>)
 80033c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033c4:	f7fc ff18 	bl	80001f8 <__aeabi_dsub>
 80033c8:	4602      	mov	r2, r0
 80033ca:	460b      	mov	r3, r1
 80033cc:	4620      	mov	r0, r4
 80033ce:	4629      	mov	r1, r5
 80033d0:	f7fd fb50 	bl	8000a74 <__aeabi_dcmpge>
 80033d4:	4603      	mov	r3, r0
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d023      	beq.n	8003422 <chassis_motion_control+0x22a>
	{
		if(aimbot_mode == 1)
 80033da:	4b3b      	ldr	r3, [pc, #236]	; (80034c8 <chassis_motion_control+0x2d0>)
 80033dc:	781b      	ldrb	r3, [r3, #0]
 80033de:	2b01      	cmp	r3, #1
 80033e0:	d10f      	bne.n	8003402 <chassis_motion_control+0x20a>
		{
			if (xavier_data.yaw < 0)
 80033e2:	4b3a      	ldr	r3, [pc, #232]	; (80034cc <chassis_motion_control+0x2d4>)
 80033e4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	da60      	bge.n	80034ae <chassis_motion_control+0x2b6>
			{
			control_yaw = xavier_data.yaw;
 80033ec:	4b37      	ldr	r3, [pc, #220]	; (80034cc <chassis_motion_control+0x2d4>)
 80033ee:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80033f2:	4618      	mov	r0, r3
 80033f4:	f7fd f84e 	bl	8000494 <__aeabi_i2d>
 80033f8:	4602      	mov	r2, r0
 80033fa:	460b      	mov	r3, r1
 80033fc:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
 8003400:	e055      	b.n	80034ae <chassis_motion_control+0x2b6>
			}
		}
		else
		{
			if (remote_cmd.right_x < 0)
 8003402:	4b30      	ldr	r3, [pc, #192]	; (80034c4 <chassis_motion_control+0x2cc>)
 8003404:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003408:	2b00      	cmp	r3, #0
 800340a:	da50      	bge.n	80034ae <chassis_motion_control+0x2b6>
			{
			control_yaw = remote_cmd.right_x;
 800340c:	4b2d      	ldr	r3, [pc, #180]	; (80034c4 <chassis_motion_control+0x2cc>)
 800340e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003412:	4618      	mov	r0, r3
 8003414:	f7fd f83e 	bl	8000494 <__aeabi_i2d>
 8003418:	4602      	mov	r2, r0
 800341a:	460b      	mov	r3, r1
 800341c:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
 8003420:	e045      	b.n	80034ae <chassis_motion_control+0x2b6>
			}
		}
	}
	else if (canone_data.yaw.adj_ang <= canone_data.yaw.min_ang + 0.05)
 8003422:	4b27      	ldr	r3, [pc, #156]	; (80034c0 <chassis_motion_control+0x2c8>)
 8003424:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 8003428:	4618      	mov	r0, r3
 800342a:	f7fd f845 	bl	80004b8 <__aeabi_f2d>
 800342e:	4604      	mov	r4, r0
 8003430:	460d      	mov	r5, r1
 8003432:	4b23      	ldr	r3, [pc, #140]	; (80034c0 <chassis_motion_control+0x2c8>)
 8003434:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 8003438:	4618      	mov	r0, r3
 800343a:	f7fd f83d 	bl	80004b8 <__aeabi_f2d>
 800343e:	a31e      	add	r3, pc, #120	; (adr r3, 80034b8 <chassis_motion_control+0x2c0>)
 8003440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003444:	f7fc feda 	bl	80001fc <__adddf3>
 8003448:	4602      	mov	r2, r0
 800344a:	460b      	mov	r3, r1
 800344c:	4620      	mov	r0, r4
 800344e:	4629      	mov	r1, r5
 8003450:	f7fd fb06 	bl	8000a60 <__aeabi_dcmple>
 8003454:	4603      	mov	r3, r0
 8003456:	2b00      	cmp	r3, #0
 8003458:	d023      	beq.n	80034a2 <chassis_motion_control+0x2aa>
	{
		if(aimbot_mode == 1)
 800345a:	4b1b      	ldr	r3, [pc, #108]	; (80034c8 <chassis_motion_control+0x2d0>)
 800345c:	781b      	ldrb	r3, [r3, #0]
 800345e:	2b01      	cmp	r3, #1
 8003460:	d10f      	bne.n	8003482 <chassis_motion_control+0x28a>
			{
				if (xavier_data.yaw > 0)
 8003462:	4b1a      	ldr	r3, [pc, #104]	; (80034cc <chassis_motion_control+0x2d4>)
 8003464:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003468:	2b00      	cmp	r3, #0
 800346a:	dd20      	ble.n	80034ae <chassis_motion_control+0x2b6>
				{
				control_yaw = xavier_data.yaw;
 800346c:	4b17      	ldr	r3, [pc, #92]	; (80034cc <chassis_motion_control+0x2d4>)
 800346e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003472:	4618      	mov	r0, r3
 8003474:	f7fd f80e 	bl	8000494 <__aeabi_i2d>
 8003478:	4602      	mov	r2, r0
 800347a:	460b      	mov	r3, r1
 800347c:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
 8003480:	e015      	b.n	80034ae <chassis_motion_control+0x2b6>
				}
			}
			else
			{
				if (remote_cmd.right_x > 0)
 8003482:	4b10      	ldr	r3, [pc, #64]	; (80034c4 <chassis_motion_control+0x2cc>)
 8003484:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003488:	2b00      	cmp	r3, #0
 800348a:	dd10      	ble.n	80034ae <chassis_motion_control+0x2b6>
				{
				control_yaw = remote_cmd.right_x;
 800348c:	4b0d      	ldr	r3, [pc, #52]	; (80034c4 <chassis_motion_control+0x2cc>)
 800348e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003492:	4618      	mov	r0, r3
 8003494:	f7fc fffe 	bl	8000494 <__aeabi_i2d>
 8003498:	4602      	mov	r2, r0
 800349a:	460b      	mov	r3, r1
 800349c:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
 80034a0:	e005      	b.n	80034ae <chassis_motion_control+0x2b6>
				}
			}
	}
	else
	{
		control_yaw = 0;
 80034a2:	f04f 0200 	mov.w	r2, #0
 80034a6:	f04f 0300 	mov.w	r3, #0
 80034aa:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	}

	//limit max rpm
	for (uint8_t i = 0; i < 4; i ++)
 80034ae:	2300      	movs	r3, #0
 80034b0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80034b4:	e086      	b.n	80035c4 <chassis_motion_control+0x3cc>
 80034b6:	bf00      	nop
 80034b8:	9999999a 	.word	0x9999999a
 80034bc:	3fa99999 	.word	0x3fa99999
 80034c0:	20009c18 	.word	0x20009c18
 80034c4:	20004eac 	.word	0x20004eac
 80034c8:	20004e6e 	.word	0x20004e6e
 80034cc:	20009e50 	.word	0x20009e50
	{
		out_wheel[i] = (out_wheel[i] * MAX_SPEED / (MAX_RC_VALUE/2)) + (control_yaw * TURNING_SPEED/MAX_RC_VALUE) ;
 80034d0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80034d4:	005b      	lsls	r3, r3, #1
 80034d6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80034da:	4413      	add	r3, r2
 80034dc:	f933 3c30 	ldrsh.w	r3, [r3, #-48]
 80034e0:	461a      	mov	r2, r3
 80034e2:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 80034e6:	fb03 f302 	mul.w	r3, r3, r2
 80034ea:	4a7e      	ldr	r2, [pc, #504]	; (80036e4 <chassis_motion_control+0x4ec>)
 80034ec:	fb82 1203 	smull	r1, r2, r2, r3
 80034f0:	1212      	asrs	r2, r2, #8
 80034f2:	17db      	asrs	r3, r3, #31
 80034f4:	1ad3      	subs	r3, r2, r3
 80034f6:	4618      	mov	r0, r3
 80034f8:	f7fc ffcc 	bl	8000494 <__aeabi_i2d>
 80034fc:	4604      	mov	r4, r0
 80034fe:	460d      	mov	r5, r1
 8003500:	f04f 0200 	mov.w	r2, #0
 8003504:	4b78      	ldr	r3, [pc, #480]	; (80036e8 <chassis_motion_control+0x4f0>)
 8003506:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800350a:	f7fd f82d 	bl	8000568 <__aeabi_dmul>
 800350e:	4602      	mov	r2, r0
 8003510:	460b      	mov	r3, r1
 8003512:	4610      	mov	r0, r2
 8003514:	4619      	mov	r1, r3
 8003516:	f04f 0200 	mov.w	r2, #0
 800351a:	4b74      	ldr	r3, [pc, #464]	; (80036ec <chassis_motion_control+0x4f4>)
 800351c:	f7fd f94e 	bl	80007bc <__aeabi_ddiv>
 8003520:	4602      	mov	r2, r0
 8003522:	460b      	mov	r3, r1
 8003524:	4620      	mov	r0, r4
 8003526:	4629      	mov	r1, r5
 8003528:	f7fc fe68 	bl	80001fc <__adddf3>
 800352c:	4602      	mov	r2, r0
 800352e:	460b      	mov	r3, r1
 8003530:	f897 404f 	ldrb.w	r4, [r7, #79]	; 0x4f
 8003534:	4610      	mov	r0, r2
 8003536:	4619      	mov	r1, r3
 8003538:	f7fd fab0 	bl	8000a9c <__aeabi_d2iz>
 800353c:	4603      	mov	r3, r0
 800353e:	b21a      	sxth	r2, r3
 8003540:	0063      	lsls	r3, r4, #1
 8003542:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8003546:	440b      	add	r3, r1
 8003548:	f823 2c30 	strh.w	r2, [r3, #-48]
		if (fabs(out_wheel[i]) > highest_speed)
 800354c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8003550:	005b      	lsls	r3, r3, #1
 8003552:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003556:	4413      	add	r3, r2
 8003558:	f933 3c30 	ldrsh.w	r3, [r3, #-48]
 800355c:	4618      	mov	r0, r3
 800355e:	f7fc ff99 	bl	8000494 <__aeabi_i2d>
 8003562:	4602      	mov	r2, r0
 8003564:	460b      	mov	r3, r1
 8003566:	60ba      	str	r2, [r7, #8]
 8003568:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800356c:	60fb      	str	r3, [r7, #12]
 800356e:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 8003572:	4618      	mov	r0, r3
 8003574:	f7fc ff8e 	bl	8000494 <__aeabi_i2d>
 8003578:	4602      	mov	r2, r0
 800357a:	460b      	mov	r3, r1
 800357c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003580:	f7fd fa82 	bl	8000a88 <__aeabi_dcmpgt>
 8003584:	4603      	mov	r3, r0
 8003586:	2b00      	cmp	r3, #0
 8003588:	d017      	beq.n	80035ba <chassis_motion_control+0x3c2>
		{
			highest_speed = fabs(out_wheel[i]);
 800358a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800358e:	005b      	lsls	r3, r3, #1
 8003590:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003594:	4413      	add	r3, r2
 8003596:	f933 3c30 	ldrsh.w	r3, [r3, #-48]
 800359a:	4618      	mov	r0, r3
 800359c:	f7fc ff7a 	bl	8000494 <__aeabi_i2d>
 80035a0:	4602      	mov	r2, r0
 80035a2:	460b      	mov	r3, r1
 80035a4:	603a      	str	r2, [r7, #0]
 80035a6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80035aa:	607b      	str	r3, [r7, #4]
 80035ac:	e9d7 0100 	ldrd	r0, r1, [r7]
 80035b0:	f7fd fa74 	bl	8000a9c <__aeabi_d2iz>
 80035b4:	4603      	mov	r3, r0
 80035b6:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
	for (uint8_t i = 0; i < 4; i ++)
 80035ba:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80035be:	3301      	adds	r3, #1
 80035c0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80035c4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80035c8:	2b03      	cmp	r3, #3
 80035ca:	d981      	bls.n	80034d0 <chassis_motion_control+0x2d8>
		}
	}

	if (fabs(highest_speed) > MAX_SPEED)
 80035cc:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 80035d0:	4618      	mov	r0, r3
 80035d2:	f7fc ff5f 	bl	8000494 <__aeabi_i2d>
 80035d6:	4602      	mov	r2, r0
 80035d8:	460b      	mov	r3, r1
 80035da:	4692      	mov	sl, r2
 80035dc:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
 80035e0:	f04f 0200 	mov.w	r2, #0
 80035e4:	4b42      	ldr	r3, [pc, #264]	; (80036f0 <chassis_motion_control+0x4f8>)
 80035e6:	4650      	mov	r0, sl
 80035e8:	4659      	mov	r1, fp
 80035ea:	f7fd fa4d 	bl	8000a88 <__aeabi_dcmpgt>
 80035ee:	4603      	mov	r3, r0
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d026      	beq.n	8003642 <chassis_motion_control+0x44a>
	{
		for (uint8_t i = 0; i < 4; i ++)
 80035f4:	2300      	movs	r3, #0
 80035f6:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 80035fa:	e01e      	b.n	800363a <chassis_motion_control+0x442>
		{
			out_wheel[i] = out_wheel[i] * MAX_SPEED / highest_speed;
 80035fc:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8003600:	005b      	lsls	r3, r3, #1
 8003602:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003606:	4413      	add	r3, r2
 8003608:	f933 3c30 	ldrsh.w	r3, [r3, #-48]
 800360c:	461a      	mov	r2, r3
 800360e:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8003612:	fb03 f202 	mul.w	r2, r3, r2
 8003616:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 800361a:	fb92 f2f3 	sdiv	r2, r2, r3
 800361e:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8003622:	b212      	sxth	r2, r2
 8003624:	005b      	lsls	r3, r3, #1
 8003626:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800362a:	440b      	add	r3, r1
 800362c:	f823 2c30 	strh.w	r2, [r3, #-48]
		for (uint8_t i = 0; i < 4; i ++)
 8003630:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8003634:	3301      	adds	r3, #1
 8003636:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800363a:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800363e:	2b03      	cmp	r3, #3
 8003640:	d9dc      	bls.n	80035fc <chassis_motion_control+0x404>
		}
	}

	for (uint8_t i = 0; i < 4; i ++)
 8003642:	2300      	movs	r3, #0
 8003644:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 8003648:	e02e      	b.n	80036a8 <chassis_motion_control+0x4b0>
	{
		speed_pid(out_wheel[i], motor[i].rpm , &motor[i].pid);
 800364a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800364e:	005b      	lsls	r3, r3, #1
 8003650:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003654:	4413      	add	r3, r2
 8003656:	f933 3c30 	ldrsh.w	r3, [r3, #-48]
 800365a:	4618      	mov	r0, r3
 800365c:	f7fc ff1a 	bl	8000494 <__aeabi_i2d>
 8003660:	4604      	mov	r4, r0
 8003662:	460d      	mov	r5, r1
 8003664:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003668:	2268      	movs	r2, #104	; 0x68
 800366a:	fb02 f303 	mul.w	r3, r2, r3
 800366e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003670:	4413      	add	r3, r2
 8003672:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003676:	4618      	mov	r0, r3
 8003678:	f7fc ff0c 	bl	8000494 <__aeabi_i2d>
 800367c:	4680      	mov	r8, r0
 800367e:	4689      	mov	r9, r1
 8003680:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003684:	2268      	movs	r2, #104	; 0x68
 8003686:	fb02 f303 	mul.w	r3, r2, r3
 800368a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800368c:	4413      	add	r3, r2
 800368e:	3310      	adds	r3, #16
 8003690:	4618      	mov	r0, r3
 8003692:	ec49 8b11 	vmov	d1, r8, r9
 8003696:	ec45 4b10 	vmov	d0, r4, r5
 800369a:	f7ff fb81 	bl	8002da0 <speed_pid>
	for (uint8_t i = 0; i < 4; i ++)
 800369e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80036a2:	3301      	adds	r3, #1
 80036a4:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 80036a8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80036ac:	2b03      	cmp	r3, #3
 80036ae:	d9cc      	bls.n	800364a <chassis_motion_control+0x452>
	}
	CANone_cmd(motor[0].pid.output, motor[1].pid.output, motor[2].pid.output, motor[3].pid.output, CHASSIS_ID);
 80036b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036b2:	f9b3 0064 	ldrsh.w	r0, [r3, #100]	; 0x64
 80036b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036b8:	3368      	adds	r3, #104	; 0x68
 80036ba:	f9b3 1064 	ldrsh.w	r1, [r3, #100]	; 0x64
 80036be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036c0:	33d0      	adds	r3, #208	; 0xd0
 80036c2:	f9b3 2064 	ldrsh.w	r2, [r3, #100]	; 0x64
 80036c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036c8:	f503 739c 	add.w	r3, r3, #312	; 0x138
 80036cc:	f9b3 3064 	ldrsh.w	r3, [r3, #100]	; 0x64
 80036d0:	f44f 7400 	mov.w	r4, #512	; 0x200
 80036d4:	9400      	str	r4, [sp, #0]
 80036d6:	f7ff fc99 	bl	800300c <CANone_cmd>
}
 80036da:	bf00      	nop
 80036dc:	3760      	adds	r7, #96	; 0x60
 80036de:	46bd      	mov	sp, r7
 80036e0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80036e4:	634c0635 	.word	0x634c0635
 80036e8:	40af4000 	.word	0x40af4000
 80036ec:	4094a000 	.word	0x4094a000
 80036f0:	40bf4000 	.word	0x40bf4000

080036f4 <dbus_remote_ISR>:
extern float pitch;
extern float yaw;


//Releases dbus semaphore when a dbus signal is detected by ISR
void dbus_remote_ISR(DMA_HandleTypeDef *hdma) {
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b082      	sub	sp, #8
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
	remote_cmd.right_x = (remote_raw_data[0] | remote_raw_data[1] << 8) & 0x07FF;
 80036fc:	4b71      	ldr	r3, [pc, #452]	; (80038c4 <dbus_remote_ISR+0x1d0>)
 80036fe:	781b      	ldrb	r3, [r3, #0]
 8003700:	b21a      	sxth	r2, r3
 8003702:	4b70      	ldr	r3, [pc, #448]	; (80038c4 <dbus_remote_ISR+0x1d0>)
 8003704:	785b      	ldrb	r3, [r3, #1]
 8003706:	021b      	lsls	r3, r3, #8
 8003708:	b21b      	sxth	r3, r3
 800370a:	4313      	orrs	r3, r2
 800370c:	b21b      	sxth	r3, r3
 800370e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003712:	b21a      	sxth	r2, r3
 8003714:	4b6c      	ldr	r3, [pc, #432]	; (80038c8 <dbus_remote_ISR+0x1d4>)
 8003716:	801a      	strh	r2, [r3, #0]
	remote_cmd.right_x -= JOYSTICK_OFFSET;
 8003718:	4b6b      	ldr	r3, [pc, #428]	; (80038c8 <dbus_remote_ISR+0x1d4>)
 800371a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800371e:	b29b      	uxth	r3, r3
 8003720:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8003724:	b29b      	uxth	r3, r3
 8003726:	b21a      	sxth	r2, r3
 8003728:	4b67      	ldr	r3, [pc, #412]	; (80038c8 <dbus_remote_ISR+0x1d4>)
 800372a:	801a      	strh	r2, [r3, #0]
	remote_cmd.right_y = (remote_raw_data[1] >> 3 | remote_raw_data[2] << 5) & 0x07FF;
 800372c:	4b65      	ldr	r3, [pc, #404]	; (80038c4 <dbus_remote_ISR+0x1d0>)
 800372e:	785b      	ldrb	r3, [r3, #1]
 8003730:	08db      	lsrs	r3, r3, #3
 8003732:	b2db      	uxtb	r3, r3
 8003734:	b21a      	sxth	r2, r3
 8003736:	4b63      	ldr	r3, [pc, #396]	; (80038c4 <dbus_remote_ISR+0x1d0>)
 8003738:	789b      	ldrb	r3, [r3, #2]
 800373a:	015b      	lsls	r3, r3, #5
 800373c:	b21b      	sxth	r3, r3
 800373e:	4313      	orrs	r3, r2
 8003740:	b21b      	sxth	r3, r3
 8003742:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003746:	b21a      	sxth	r2, r3
 8003748:	4b5f      	ldr	r3, [pc, #380]	; (80038c8 <dbus_remote_ISR+0x1d4>)
 800374a:	805a      	strh	r2, [r3, #2]
	remote_cmd.right_y -= JOYSTICK_OFFSET;
 800374c:	4b5e      	ldr	r3, [pc, #376]	; (80038c8 <dbus_remote_ISR+0x1d4>)
 800374e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003752:	b29b      	uxth	r3, r3
 8003754:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8003758:	b29b      	uxth	r3, r3
 800375a:	b21a      	sxth	r2, r3
 800375c:	4b5a      	ldr	r3, [pc, #360]	; (80038c8 <dbus_remote_ISR+0x1d4>)
 800375e:	805a      	strh	r2, [r3, #2]
	remote_cmd.left_x = (remote_raw_data[2] >> 6 | remote_raw_data[3] << 2 | remote_raw_data[4] << 10) & 0x07FF;
 8003760:	4b58      	ldr	r3, [pc, #352]	; (80038c4 <dbus_remote_ISR+0x1d0>)
 8003762:	789b      	ldrb	r3, [r3, #2]
 8003764:	099b      	lsrs	r3, r3, #6
 8003766:	b2db      	uxtb	r3, r3
 8003768:	b21a      	sxth	r2, r3
 800376a:	4b56      	ldr	r3, [pc, #344]	; (80038c4 <dbus_remote_ISR+0x1d0>)
 800376c:	78db      	ldrb	r3, [r3, #3]
 800376e:	009b      	lsls	r3, r3, #2
 8003770:	b21b      	sxth	r3, r3
 8003772:	4313      	orrs	r3, r2
 8003774:	b21a      	sxth	r2, r3
 8003776:	4b53      	ldr	r3, [pc, #332]	; (80038c4 <dbus_remote_ISR+0x1d0>)
 8003778:	791b      	ldrb	r3, [r3, #4]
 800377a:	029b      	lsls	r3, r3, #10
 800377c:	b21b      	sxth	r3, r3
 800377e:	4313      	orrs	r3, r2
 8003780:	b21b      	sxth	r3, r3
 8003782:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003786:	b21a      	sxth	r2, r3
 8003788:	4b4f      	ldr	r3, [pc, #316]	; (80038c8 <dbus_remote_ISR+0x1d4>)
 800378a:	809a      	strh	r2, [r3, #4]
	remote_cmd.left_x -= JOYSTICK_OFFSET;
 800378c:	4b4e      	ldr	r3, [pc, #312]	; (80038c8 <dbus_remote_ISR+0x1d4>)
 800378e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003792:	b29b      	uxth	r3, r3
 8003794:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8003798:	b29b      	uxth	r3, r3
 800379a:	b21a      	sxth	r2, r3
 800379c:	4b4a      	ldr	r3, [pc, #296]	; (80038c8 <dbus_remote_ISR+0x1d4>)
 800379e:	809a      	strh	r2, [r3, #4]
	remote_cmd.left_y = (remote_raw_data[4] >> 1 | remote_raw_data[5] << 7) & 0x07FF;
 80037a0:	4b48      	ldr	r3, [pc, #288]	; (80038c4 <dbus_remote_ISR+0x1d0>)
 80037a2:	791b      	ldrb	r3, [r3, #4]
 80037a4:	085b      	lsrs	r3, r3, #1
 80037a6:	b2db      	uxtb	r3, r3
 80037a8:	b21a      	sxth	r2, r3
 80037aa:	4b46      	ldr	r3, [pc, #280]	; (80038c4 <dbus_remote_ISR+0x1d0>)
 80037ac:	795b      	ldrb	r3, [r3, #5]
 80037ae:	01db      	lsls	r3, r3, #7
 80037b0:	b21b      	sxth	r3, r3
 80037b2:	4313      	orrs	r3, r2
 80037b4:	b21b      	sxth	r3, r3
 80037b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80037ba:	b21a      	sxth	r2, r3
 80037bc:	4b42      	ldr	r3, [pc, #264]	; (80038c8 <dbus_remote_ISR+0x1d4>)
 80037be:	80da      	strh	r2, [r3, #6]
	remote_cmd.left_y -= JOYSTICK_OFFSET;
 80037c0:	4b41      	ldr	r3, [pc, #260]	; (80038c8 <dbus_remote_ISR+0x1d4>)
 80037c2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80037c6:	b29b      	uxth	r3, r3
 80037c8:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80037cc:	b29b      	uxth	r3, r3
 80037ce:	b21a      	sxth	r2, r3
 80037d0:	4b3d      	ldr	r3, [pc, #244]	; (80038c8 <dbus_remote_ISR+0x1d4>)
 80037d2:	80da      	strh	r2, [r3, #6]
	//Left switch position
	remote_cmd.left_switch = ((remote_raw_data[5] >> 4) & 0x000C) >> 2;
 80037d4:	4b3b      	ldr	r3, [pc, #236]	; (80038c4 <dbus_remote_ISR+0x1d0>)
 80037d6:	795b      	ldrb	r3, [r3, #5]
 80037d8:	091b      	lsrs	r3, r3, #4
 80037da:	b2db      	uxtb	r3, r3
 80037dc:	109b      	asrs	r3, r3, #2
 80037de:	b25b      	sxtb	r3, r3
 80037e0:	f003 0303 	and.w	r3, r3, #3
 80037e4:	b25a      	sxtb	r2, r3
 80037e6:	4b38      	ldr	r3, [pc, #224]	; (80038c8 <dbus_remote_ISR+0x1d4>)
 80037e8:	721a      	strb	r2, [r3, #8]
	remote_cmd.right_switch = (remote_raw_data[5] >> 4) & 0x0003;
 80037ea:	4b36      	ldr	r3, [pc, #216]	; (80038c4 <dbus_remote_ISR+0x1d0>)
 80037ec:	795b      	ldrb	r3, [r3, #5]
 80037ee:	091b      	lsrs	r3, r3, #4
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	b25b      	sxtb	r3, r3
 80037f4:	f003 0303 	and.w	r3, r3, #3
 80037f8:	b25a      	sxtb	r2, r3
 80037fa:	4b33      	ldr	r3, [pc, #204]	; (80038c8 <dbus_remote_ISR+0x1d4>)
 80037fc:	725a      	strb	r2, [r3, #9]
	remote_cmd.mouse_x = ((int16_t)remote_raw_data[6] | ((int16_t)remote_raw_data[7] << 8));
 80037fe:	4b31      	ldr	r3, [pc, #196]	; (80038c4 <dbus_remote_ISR+0x1d0>)
 8003800:	799b      	ldrb	r3, [r3, #6]
 8003802:	b21a      	sxth	r2, r3
 8003804:	4b2f      	ldr	r3, [pc, #188]	; (80038c4 <dbus_remote_ISR+0x1d0>)
 8003806:	79db      	ldrb	r3, [r3, #7]
 8003808:	021b      	lsls	r3, r3, #8
 800380a:	b21b      	sxth	r3, r3
 800380c:	4313      	orrs	r3, r2
 800380e:	b21a      	sxth	r2, r3
 8003810:	4b2d      	ldr	r3, [pc, #180]	; (80038c8 <dbus_remote_ISR+0x1d4>)
 8003812:	815a      	strh	r2, [r3, #10]
	remote_cmd.mouse_y = ((int16_t)remote_raw_data[8] | ((int16_t)remote_raw_data[9] << 8));
 8003814:	4b2b      	ldr	r3, [pc, #172]	; (80038c4 <dbus_remote_ISR+0x1d0>)
 8003816:	7a1b      	ldrb	r3, [r3, #8]
 8003818:	b21a      	sxth	r2, r3
 800381a:	4b2a      	ldr	r3, [pc, #168]	; (80038c4 <dbus_remote_ISR+0x1d0>)
 800381c:	7a5b      	ldrb	r3, [r3, #9]
 800381e:	021b      	lsls	r3, r3, #8
 8003820:	b21b      	sxth	r3, r3
 8003822:	4313      	orrs	r3, r2
 8003824:	b21a      	sxth	r2, r3
 8003826:	4b28      	ldr	r3, [pc, #160]	; (80038c8 <dbus_remote_ISR+0x1d4>)
 8003828:	819a      	strh	r2, [r3, #12]
	remote_cmd.mouse_z = ((int16_t)remote_raw_data[10] | ((int16_t)remote_raw_data[11] << 8));
 800382a:	4b26      	ldr	r3, [pc, #152]	; (80038c4 <dbus_remote_ISR+0x1d0>)
 800382c:	7a9b      	ldrb	r3, [r3, #10]
 800382e:	b21a      	sxth	r2, r3
 8003830:	4b24      	ldr	r3, [pc, #144]	; (80038c4 <dbus_remote_ISR+0x1d0>)
 8003832:	7adb      	ldrb	r3, [r3, #11]
 8003834:	021b      	lsls	r3, r3, #8
 8003836:	b21b      	sxth	r3, r3
 8003838:	4313      	orrs	r3, r2
 800383a:	b21a      	sxth	r2, r3
 800383c:	4b22      	ldr	r3, [pc, #136]	; (80038c8 <dbus_remote_ISR+0x1d4>)
 800383e:	81da      	strh	r2, [r3, #14]
	remote_cmd.mouse_left = (remote_raw_data[12]);
 8003840:	4b20      	ldr	r3, [pc, #128]	; (80038c4 <dbus_remote_ISR+0x1d0>)
 8003842:	7b1b      	ldrb	r3, [r3, #12]
 8003844:	b25a      	sxtb	r2, r3
 8003846:	4b20      	ldr	r3, [pc, #128]	; (80038c8 <dbus_remote_ISR+0x1d4>)
 8003848:	761a      	strb	r2, [r3, #24]
	remote_cmd.mouse_right = (remote_raw_data[13]);
 800384a:	4b1e      	ldr	r3, [pc, #120]	; (80038c4 <dbus_remote_ISR+0x1d0>)
 800384c:	7b5b      	ldrb	r3, [r3, #13]
 800384e:	b25a      	sxtb	r2, r3
 8003850:	4b1d      	ldr	r3, [pc, #116]	; (80038c8 <dbus_remote_ISR+0x1d4>)
 8003852:	765a      	strb	r2, [r3, #25]
	remote_cmd.keyboard_keys = (remote_raw_data[14]);
 8003854:	4b1b      	ldr	r3, [pc, #108]	; (80038c4 <dbus_remote_ISR+0x1d0>)
 8003856:	7b9b      	ldrb	r3, [r3, #14]
 8003858:	b21a      	sxth	r2, r3
 800385a:	4b1b      	ldr	r3, [pc, #108]	; (80038c8 <dbus_remote_ISR+0x1d4>)
 800385c:	835a      	strh	r2, [r3, #26]
	remote_cmd.last_time = HAL_GetTick();
 800385e:	f000 f9d7 	bl	8003c10 <HAL_GetTick>
 8003862:	4603      	mov	r3, r0
 8003864:	4a18      	ldr	r2, [pc, #96]	; (80038c8 <dbus_remote_ISR+0x1d4>)
 8003866:	61d3      	str	r3, [r2, #28]
	if(remote_cmd.keyboard_keys & KEY_OFFSET_Q && remote_cmd.keyboard_keys & KEY_OFFSET_SHIFT
 8003868:	4b17      	ldr	r3, [pc, #92]	; (80038c8 <dbus_remote_ISR+0x1d4>)
 800386a:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 800386e:	b29b      	uxth	r3, r3
 8003870:	f003 0310 	and.w	r3, r3, #16
 8003874:	2b00      	cmp	r3, #0
 8003876:	d01a      	beq.n	80038ae <dbus_remote_ISR+0x1ba>
 8003878:	4b13      	ldr	r3, [pc, #76]	; (80038c8 <dbus_remote_ISR+0x1d4>)
 800387a:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 800387e:	b29b      	uxth	r3, r3
 8003880:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003884:	2b00      	cmp	r3, #0
 8003886:	d012      	beq.n	80038ae <dbus_remote_ISR+0x1ba>
			&& remote_cmd.keyboard_keys & KEY_OFFSET_CTRL)
 8003888:	4b0f      	ldr	r3, [pc, #60]	; (80038c8 <dbus_remote_ISR+0x1d4>)
 800388a:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 800388e:	b29b      	uxth	r3, r3
 8003890:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003894:	2b00      	cmp	r3, #0
 8003896:	d00a      	beq.n	80038ae <dbus_remote_ISR+0x1ba>
	{
		if (remote_control_mode == 1)
 8003898:	4b0c      	ldr	r3, [pc, #48]	; (80038cc <dbus_remote_ISR+0x1d8>)
 800389a:	781b      	ldrb	r3, [r3, #0]
 800389c:	2b01      	cmp	r3, #1
 800389e:	d103      	bne.n	80038a8 <dbus_remote_ISR+0x1b4>
		{
			remote_control_mode = 0;
 80038a0:	4b0a      	ldr	r3, [pc, #40]	; (80038cc <dbus_remote_ISR+0x1d8>)
 80038a2:	2200      	movs	r2, #0
 80038a4:	701a      	strb	r2, [r3, #0]
 80038a6:	e002      	b.n	80038ae <dbus_remote_ISR+0x1ba>
		}
		else
		{
			remote_control_mode = 1;
 80038a8:	4b08      	ldr	r3, [pc, #32]	; (80038cc <dbus_remote_ISR+0x1d8>)
 80038aa:	2201      	movs	r2, #1
 80038ac:	701a      	strb	r2, [r3, #0]
		}
	}
	osEventFlagsSet(rc_data_flag, 0x1000);
 80038ae:	4b08      	ldr	r3, [pc, #32]	; (80038d0 <dbus_remote_ISR+0x1dc>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80038b6:	4618      	mov	r0, r3
 80038b8:	f004 fc44 	bl	8008144 <osEventFlagsSet>
}
 80038bc:	bf00      	nop
 80038be:	3708      	adds	r7, #8
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd80      	pop	{r7, pc}
 80038c4:	20000034 	.word	0x20000034
 80038c8:	20004eac 	.word	0x20004eac
 80038cc:	20004ecc 	.word	0x20004ecc
 80038d0:	2000982c 	.word	0x2000982c

080038d4 <dbus_reset>:

void dbus_reset()
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	af00      	add	r7, sp, #0
	HAL_UART_DMAPause(&huart1);
 80038d8:	4818      	ldr	r0, [pc, #96]	; (800393c <dbus_reset+0x68>)
 80038da:	f003 fb67 	bl	8006fac <HAL_UART_DMAPause>
	remote_cmd.right_x = 0;
 80038de:	4b18      	ldr	r3, [pc, #96]	; (8003940 <dbus_reset+0x6c>)
 80038e0:	2200      	movs	r2, #0
 80038e2:	801a      	strh	r2, [r3, #0]
	remote_cmd.right_y = 0;
 80038e4:	4b16      	ldr	r3, [pc, #88]	; (8003940 <dbus_reset+0x6c>)
 80038e6:	2200      	movs	r2, #0
 80038e8:	805a      	strh	r2, [r3, #2]
	remote_cmd.left_x = 0;
 80038ea:	4b15      	ldr	r3, [pc, #84]	; (8003940 <dbus_reset+0x6c>)
 80038ec:	2200      	movs	r2, #0
 80038ee:	809a      	strh	r2, [r3, #4]
	remote_cmd.left_y = 0;
 80038f0:	4b13      	ldr	r3, [pc, #76]	; (8003940 <dbus_reset+0x6c>)
 80038f2:	2200      	movs	r2, #0
 80038f4:	80da      	strh	r2, [r3, #6]
	remote_cmd.left_switch = 0;
 80038f6:	4b12      	ldr	r3, [pc, #72]	; (8003940 <dbus_reset+0x6c>)
 80038f8:	2200      	movs	r2, #0
 80038fa:	721a      	strb	r2, [r3, #8]
	remote_cmd.mouse_x = 0;
 80038fc:	4b10      	ldr	r3, [pc, #64]	; (8003940 <dbus_reset+0x6c>)
 80038fe:	2200      	movs	r2, #0
 8003900:	815a      	strh	r2, [r3, #10]
	remote_cmd.mouse_y = 0;
 8003902:	4b0f      	ldr	r3, [pc, #60]	; (8003940 <dbus_reset+0x6c>)
 8003904:	2200      	movs	r2, #0
 8003906:	819a      	strh	r2, [r3, #12]
	remote_cmd.mouse_z = 0;
 8003908:	4b0d      	ldr	r3, [pc, #52]	; (8003940 <dbus_reset+0x6c>)
 800390a:	2200      	movs	r2, #0
 800390c:	81da      	strh	r2, [r3, #14]
	remote_cmd.mouse_left = (remote_raw_data[12]);
 800390e:	4b0d      	ldr	r3, [pc, #52]	; (8003944 <dbus_reset+0x70>)
 8003910:	7b1b      	ldrb	r3, [r3, #12]
 8003912:	b25a      	sxtb	r2, r3
 8003914:	4b0a      	ldr	r3, [pc, #40]	; (8003940 <dbus_reset+0x6c>)
 8003916:	761a      	strb	r2, [r3, #24]
	remote_cmd.mouse_right = (remote_raw_data[13]);
 8003918:	4b0a      	ldr	r3, [pc, #40]	; (8003944 <dbus_reset+0x70>)
 800391a:	7b5b      	ldrb	r3, [r3, #13]
 800391c:	b25a      	sxtb	r2, r3
 800391e:	4b08      	ldr	r3, [pc, #32]	; (8003940 <dbus_reset+0x6c>)
 8003920:	765a      	strb	r2, [r3, #25]
	pitch = 0;
 8003922:	4b09      	ldr	r3, [pc, #36]	; (8003948 <dbus_reset+0x74>)
 8003924:	f04f 0200 	mov.w	r2, #0
 8003928:	601a      	str	r2, [r3, #0]
	yaw = 0;
 800392a:	4b08      	ldr	r3, [pc, #32]	; (800394c <dbus_reset+0x78>)
 800392c:	f04f 0200 	mov.w	r2, #0
 8003930:	601a      	str	r2, [r3, #0]
	HAL_UART_DMAResume(&huart1);
 8003932:	4802      	ldr	r0, [pc, #8]	; (800393c <dbus_reset+0x68>)
 8003934:	f003 fb9e 	bl	8007074 <HAL_UART_DMAResume>
}
 8003938:	bf00      	nop
 800393a:	bd80      	pop	{r7, pc}
 800393c:	20009b94 	.word	0x20009b94
 8003940:	20004eac 	.word	0x20004eac
 8003944:	20000034 	.word	0x20000034
 8003948:	20004e70 	.word	0x20004e70
 800394c:	20004e74 	.word	0x20004e74

08003950 <startup_task>:
extern float pitch;
extern float yaw;


void startup_task()
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b082      	sub	sp, #8
 8003954:	af00      	add	r7, sp, #0
	led_on();
 8003956:	f7fd fbb1 	bl	80010bc <led_on>
	//general init
	can_start(&hcan1);
 800395a:	4863      	ldr	r0, [pc, #396]	; (8003ae8 <startup_task+0x198>)
 800395c:	f7fd fade 	bl	8000f1c <can_start>
	can_start(&hcan2);
 8003960:	4862      	ldr	r0, [pc, #392]	; (8003aec <startup_task+0x19c>)
 8003962:	f7fd fadb 	bl	8000f1c <can_start>
	buzzer_init();
 8003966:	f7fd faaf 	bl	8000ec8 <buzzer_init>
	dbus_remote_start(remote_raw_data);
 800396a:	4861      	ldr	r0, [pc, #388]	; (8003af0 <startup_task+0x1a0>)
 800396c:	f7fd fb18 	bl	8000fa0 <dbus_remote_start>
	HAL_Delay(STARTUP_DELAY);
 8003970:	2064      	movs	r0, #100	; 0x64
 8003972:	f000 f959 	bl	8003c28 <HAL_Delay>
	led_green_off();
 8003976:	f7fd fb95 	bl	80010a4 <led_green_off>

	//PID values
	canone_data.CHASSIS.pid.max_out = CHASSIS_MAX_CURRENT;
 800397a:	4b5e      	ldr	r3, [pc, #376]	; (8003af4 <startup_task+0x1a4>)
 800397c:	f643 4218 	movw	r2, #15384	; 0x3c18
 8003980:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	canone_data.CHASSIS.pid.min_out = CHASSIS_MIN_CURRENT;
 8003984:	4b5b      	ldr	r3, [pc, #364]	; (8003af4 <startup_task+0x1a4>)
 8003986:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800398a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
	canone_data.CHASSIS.pid.kp = CHASSIS_KP;
 800398e:	4b59      	ldr	r3, [pc, #356]	; (8003af4 <startup_task+0x1a4>)
 8003990:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8003994:	611a      	str	r2, [r3, #16]
	canone_data.CHASSIS.pid.ki = CHASSIS_KI;
 8003996:	4b57      	ldr	r3, [pc, #348]	; (8003af4 <startup_task+0x1a4>)
 8003998:	f04f 0200 	mov.w	r2, #0
 800399c:	615a      	str	r2, [r3, #20]
	canone_data.CHASSIS.pid.kd = CHASSIS_KD;
 800399e:	4b55      	ldr	r3, [pc, #340]	; (8003af4 <startup_task+0x1a4>)
 80039a0:	4a55      	ldr	r2, [pc, #340]	; (8003af8 <startup_task+0x1a8>)
 80039a2:	619a      	str	r2, [r3, #24]

	for (uint8_t i = 0; i < 2; i++){
 80039a4:	2300      	movs	r3, #0
 80039a6:	71fb      	strb	r3, [r7, #7]
 80039a8:	e031      	b.n	8003a0e <startup_task+0xbe>
		canone_data.FEEDER[i].pid.max_out = FRICTION_MAX_CURRENT;
 80039aa:	79fb      	ldrb	r3, [r7, #7]
 80039ac:	4a51      	ldr	r2, [pc, #324]	; (8003af4 <startup_task+0x1a4>)
 80039ae:	2168      	movs	r1, #104	; 0x68
 80039b0:	fb01 f303 	mul.w	r3, r1, r3
 80039b4:	4413      	add	r3, r2
 80039b6:	33c8      	adds	r3, #200	; 0xc8
 80039b8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80039bc:	801a      	strh	r2, [r3, #0]
		canone_data.FEEDER[i].pid.min_out = 0;
 80039be:	79fb      	ldrb	r3, [r7, #7]
 80039c0:	4a4c      	ldr	r2, [pc, #304]	; (8003af4 <startup_task+0x1a4>)
 80039c2:	2168      	movs	r1, #104	; 0x68
 80039c4:	fb01 f303 	mul.w	r3, r1, r3
 80039c8:	4413      	add	r3, r2
 80039ca:	33ca      	adds	r3, #202	; 0xca
 80039cc:	2200      	movs	r2, #0
 80039ce:	801a      	strh	r2, [r3, #0]
		canone_data.FEEDER[i].pid.kp 	= FRICTION_KP;
 80039d0:	79fb      	ldrb	r3, [r7, #7]
 80039d2:	4a48      	ldr	r2, [pc, #288]	; (8003af4 <startup_task+0x1a4>)
 80039d4:	2168      	movs	r1, #104	; 0x68
 80039d6:	fb01 f303 	mul.w	r3, r1, r3
 80039da:	4413      	add	r3, r2
 80039dc:	3378      	adds	r3, #120	; 0x78
 80039de:	4a47      	ldr	r2, [pc, #284]	; (8003afc <startup_task+0x1ac>)
 80039e0:	601a      	str	r2, [r3, #0]
		canone_data.FEEDER[i].pid.ki 	= FRICTION_KI;
 80039e2:	79fb      	ldrb	r3, [r7, #7]
 80039e4:	4a43      	ldr	r2, [pc, #268]	; (8003af4 <startup_task+0x1a4>)
 80039e6:	2168      	movs	r1, #104	; 0x68
 80039e8:	fb01 f303 	mul.w	r3, r1, r3
 80039ec:	4413      	add	r3, r2
 80039ee:	337c      	adds	r3, #124	; 0x7c
 80039f0:	f04f 0200 	mov.w	r2, #0
 80039f4:	601a      	str	r2, [r3, #0]
		canone_data.FEEDER[i].pid.kd 	= FRICTION_KD;
 80039f6:	79fb      	ldrb	r3, [r7, #7]
 80039f8:	4a3e      	ldr	r2, [pc, #248]	; (8003af4 <startup_task+0x1a4>)
 80039fa:	2168      	movs	r1, #104	; 0x68
 80039fc:	fb01 f303 	mul.w	r3, r1, r3
 8003a00:	4413      	add	r3, r2
 8003a02:	3380      	adds	r3, #128	; 0x80
 8003a04:	4a3e      	ldr	r2, [pc, #248]	; (8003b00 <startup_task+0x1b0>)
 8003a06:	601a      	str	r2, [r3, #0]
	for (uint8_t i = 0; i < 2; i++){
 8003a08:	79fb      	ldrb	r3, [r7, #7]
 8003a0a:	3301      	adds	r3, #1
 8003a0c:	71fb      	strb	r3, [r7, #7]
 8003a0e:	79fb      	ldrb	r3, [r7, #7]
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d9ca      	bls.n	80039aa <startup_task+0x5a>
	}


	//gimbal PID input
	canone_data.pitch.pid.max_out		= PITCH_MAX_CURRENT;
 8003a14:	4b37      	ldr	r3, [pc, #220]	; (8003af4 <startup_task+0x1a4>)
 8003a16:	f644 6220 	movw	r2, #20000	; 0x4e20
 8003a1a:	f8a3 21b0 	strh.w	r2, [r3, #432]	; 0x1b0
	canone_data.pitch.pid.kp 			= PITCH_KP;
 8003a1e:	4b35      	ldr	r3, [pc, #212]	; (8003af4 <startup_task+0x1a4>)
 8003a20:	4a36      	ldr	r2, [pc, #216]	; (8003afc <startup_task+0x1ac>)
 8003a22:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
	canone_data.pitch.pid.kd			= PITCH_KD;
 8003a26:	4b33      	ldr	r3, [pc, #204]	; (8003af4 <startup_task+0x1a4>)
 8003a28:	4a35      	ldr	r2, [pc, #212]	; (8003b00 <startup_task+0x1b0>)
 8003a2a:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
	canone_data.pitch.pid.ki			= PITCH_KI;
 8003a2e:	4b31      	ldr	r3, [pc, #196]	; (8003af4 <startup_task+0x1a4>)
 8003a30:	f04f 0200 	mov.w	r2, #0
 8003a34:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
	canone_data.pitch.motor_max_deflection = GM6020_MAX_DEFLECTION;
 8003a38:	4b2e      	ldr	r3, [pc, #184]	; (8003af4 <startup_task+0x1a4>)
 8003a3a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003a3e:	f8a3 214c 	strh.w	r2, [r3, #332]	; 0x14c
	canone_data.pitch.calib 		= 1;
 8003a42:	4b2c      	ldr	r3, [pc, #176]	; (8003af4 <startup_task+0x1a4>)
 8003a44:	2201      	movs	r2, #1
 8003a46:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158
	canone_data.pitch.rpm_max 		= PITCH_MAX_RPM;
 8003a4a:	4b2a      	ldr	r3, [pc, #168]	; (8003af4 <startup_task+0x1a4>)
 8003a4c:	2278      	movs	r2, #120	; 0x78
 8003a4e:	f8a3 215a 	strh.w	r2, [r3, #346]	; 0x15a
	canone_data.pitch.center_ang 	= PITCH_CENTER;
 8003a52:	4b28      	ldr	r3, [pc, #160]	; (8003af4 <startup_task+0x1a4>)
 8003a54:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003a58:	f8a3 214a 	strh.w	r2, [r3, #330]	; 0x14a
	canone_data.pitch.max_ang 		= PITCH_MAX_ANGLE;
 8003a5c:	4b25      	ldr	r3, [pc, #148]	; (8003af4 <startup_task+0x1a4>)
 8003a5e:	4a29      	ldr	r2, [pc, #164]	; (8003b04 <startup_task+0x1b4>)
 8003a60:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
	canone_data.pitch.min_ang		= PITCH_MIN_ANGLE;
 8003a64:	4b23      	ldr	r3, [pc, #140]	; (8003af4 <startup_task+0x1a4>)
 8003a66:	4a28      	ldr	r2, [pc, #160]	; (8003b08 <startup_task+0x1b8>)
 8003a68:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154

	canone_data.yaw.pid.max_out			= YAW_MAX_CURRENT;
 8003a6c:	4b21      	ldr	r3, [pc, #132]	; (8003af4 <startup_task+0x1a4>)
 8003a6e:	f644 6220 	movw	r2, #20000	; 0x4e20
 8003a72:	f8a3 2230 	strh.w	r2, [r3, #560]	; 0x230
	canone_data.yaw.pid.kp 				= YAW_KP;
 8003a76:	4b1f      	ldr	r3, [pc, #124]	; (8003af4 <startup_task+0x1a4>)
 8003a78:	4a20      	ldr	r2, [pc, #128]	; (8003afc <startup_task+0x1ac>)
 8003a7a:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
	canone_data.yaw.pid.kd				= YAW_KD;
 8003a7e:	4b1d      	ldr	r3, [pc, #116]	; (8003af4 <startup_task+0x1a4>)
 8003a80:	4a1f      	ldr	r2, [pc, #124]	; (8003b00 <startup_task+0x1b0>)
 8003a82:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8
	canone_data.yaw.pid.ki				= YAW_KI;
 8003a86:	4b1b      	ldr	r3, [pc, #108]	; (8003af4 <startup_task+0x1a4>)
 8003a88:	f04f 0200 	mov.w	r2, #0
 8003a8c:	f8c3 21e4 	str.w	r2, [r3, #484]	; 0x1e4
	canone_data.yaw.motor_max_deflection = GM6020_MAX_DEFLECTION;
 8003a90:	4b18      	ldr	r3, [pc, #96]	; (8003af4 <startup_task+0x1a4>)
 8003a92:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003a96:	f8a3 21cc 	strh.w	r2, [r3, #460]	; 0x1cc
	canone_data.yaw.center_ang		= YAW_CENTER;
 8003a9a:	4b16      	ldr	r3, [pc, #88]	; (8003af4 <startup_task+0x1a4>)
 8003a9c:	f241 520b 	movw	r2, #5387	; 0x150b
 8003aa0:	f8a3 21ca 	strh.w	r2, [r3, #458]	; 0x1ca
	canone_data.yaw.calib 			= 1;
 8003aa4:	4b13      	ldr	r3, [pc, #76]	; (8003af4 <startup_task+0x1a4>)
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	f883 21d8 	strb.w	r2, [r3, #472]	; 0x1d8
	canone_data.yaw.rpm_max 		= YAW_MAX_RPM;
 8003aac:	4b11      	ldr	r3, [pc, #68]	; (8003af4 <startup_task+0x1a4>)
 8003aae:	2278      	movs	r2, #120	; 0x78
 8003ab0:	f8a3 21da 	strh.w	r2, [r3, #474]	; 0x1da
	canone_data.yaw.max_ang 		= 0.8;
 8003ab4:	4b0f      	ldr	r3, [pc, #60]	; (8003af4 <startup_task+0x1a4>)
 8003ab6:	4a15      	ldr	r2, [pc, #84]	; (8003b0c <startup_task+0x1bc>)
 8003ab8:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
	canone_data.yaw.min_ang 		= -0.8;
 8003abc:	4b0d      	ldr	r3, [pc, #52]	; (8003af4 <startup_task+0x1a4>)
 8003abe:	4a14      	ldr	r2, [pc, #80]	; (8003b10 <startup_task+0x1c0>)
 8003ac0:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
		{
			err_buzzer(1,9);
		}
	}

	pitch = 0;
 8003ac4:	4b13      	ldr	r3, [pc, #76]	; (8003b14 <startup_task+0x1c4>)
 8003ac6:	f04f 0200 	mov.w	r2, #0
 8003aca:	601a      	str	r2, [r3, #0]
	yaw	  = 0;
 8003acc:	4b12      	ldr	r3, [pc, #72]	; (8003b18 <startup_task+0x1c8>)
 8003ace:	f04f 0200 	mov.w	r2, #0
 8003ad2:	601a      	str	r2, [r3, #0]
	ok_buzzer(1,1);
 8003ad4:	2101      	movs	r1, #1
 8003ad6:	2001      	movs	r0, #1
 8003ad8:	f000 f820 	bl	8003b1c <ok_buzzer>
	led_toggle();
 8003adc:	f7fd fb02 	bl	80010e4 <led_toggle>

}
 8003ae0:	bf00      	nop
 8003ae2:	3708      	adds	r7, #8
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}
 8003ae8:	20009800 	.word	0x20009800
 8003aec:	200097d8 	.word	0x200097d8
 8003af0:	20000034 	.word	0x20000034
 8003af4:	20009c18 	.word	0x20009c18
 8003af8:	42480000 	.word	0x42480000
 8003afc:	3dcccccd 	.word	0x3dcccccd
 8003b00:	41200000 	.word	0x41200000
 8003b04:	3fcccccd 	.word	0x3fcccccd
 8003b08:	bfcccccd 	.word	0xbfcccccd
 8003b0c:	3f4ccccd 	.word	0x3f4ccccd
 8003b10:	bf4ccccd 	.word	0xbf4ccccd
 8003b14:	20004e70 	.word	0x20004e70
 8003b18:	20004e74 	.word	0x20004e74

08003b1c <ok_buzzer>:
		buzzer(0);
		HAL_Delay(BUZZER_DELAY);
	}
}

void ok_buzzer(uint8_t high, uint8_t low){
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b084      	sub	sp, #16
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	4603      	mov	r3, r0
 8003b24:	460a      	mov	r2, r1
 8003b26:	71fb      	strb	r3, [r7, #7]
 8003b28:	4613      	mov	r3, r2
 8003b2a:	71bb      	strb	r3, [r7, #6]
	for (int8_t i = 0; i < high; i ++)
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	73fb      	strb	r3, [r7, #15]
 8003b30:	e012      	b.n	8003b58 <ok_buzzer+0x3c>
	{
		//PWM
		buzzer(HIGH_FREQ);
 8003b32:	f44f 705c 	mov.w	r0, #880	; 0x370
 8003b36:	f7fd f9a5 	bl	8000e84 <buzzer>
		HAL_Delay(BUZZER_DELAY);
 8003b3a:	2064      	movs	r0, #100	; 0x64
 8003b3c:	f000 f874 	bl	8003c28 <HAL_Delay>
		buzzer(0);
 8003b40:	2000      	movs	r0, #0
 8003b42:	f7fd f99f 	bl	8000e84 <buzzer>
		HAL_Delay(BUZZER_DELAY);
 8003b46:	2064      	movs	r0, #100	; 0x64
 8003b48:	f000 f86e 	bl	8003c28 <HAL_Delay>
	for (int8_t i = 0; i < high; i ++)
 8003b4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b50:	b2db      	uxtb	r3, r3
 8003b52:	3301      	adds	r3, #1
 8003b54:	b2db      	uxtb	r3, r3
 8003b56:	73fb      	strb	r3, [r7, #15]
 8003b58:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8003b5c:	79fb      	ldrb	r3, [r7, #7]
 8003b5e:	429a      	cmp	r2, r3
 8003b60:	dbe7      	blt.n	8003b32 <ok_buzzer+0x16>
	}
	for (int8_t i = 0; i < low; i ++)
 8003b62:	2300      	movs	r3, #0
 8003b64:	73bb      	strb	r3, [r7, #14]
 8003b66:	e012      	b.n	8003b8e <ok_buzzer+0x72>
	{
		buzzer(LOW_FREQ);
 8003b68:	f44f 70dc 	mov.w	r0, #440	; 0x1b8
 8003b6c:	f7fd f98a 	bl	8000e84 <buzzer>
		HAL_Delay(BUZZER_DELAY);
 8003b70:	2064      	movs	r0, #100	; 0x64
 8003b72:	f000 f859 	bl	8003c28 <HAL_Delay>
		buzzer(0);
 8003b76:	2000      	movs	r0, #0
 8003b78:	f7fd f984 	bl	8000e84 <buzzer>
		HAL_Delay(BUZZER_DELAY);
 8003b7c:	2064      	movs	r0, #100	; 0x64
 8003b7e:	f000 f853 	bl	8003c28 <HAL_Delay>
	for (int8_t i = 0; i < low; i ++)
 8003b82:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003b86:	b2db      	uxtb	r3, r3
 8003b88:	3301      	adds	r3, #1
 8003b8a:	b2db      	uxtb	r3, r3
 8003b8c:	73bb      	strb	r3, [r7, #14]
 8003b8e:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8003b92:	79bb      	ldrb	r3, [r7, #6]
 8003b94:	429a      	cmp	r2, r3
 8003b96:	dbe7      	blt.n	8003b68 <ok_buzzer+0x4c>
	}
}
 8003b98:	bf00      	nop
 8003b9a:	bf00      	nop
 8003b9c:	3710      	adds	r7, #16
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}
	...

08003ba4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003ba8:	4b0e      	ldr	r3, [pc, #56]	; (8003be4 <HAL_Init+0x40>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a0d      	ldr	r2, [pc, #52]	; (8003be4 <HAL_Init+0x40>)
 8003bae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003bb2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003bb4:	4b0b      	ldr	r3, [pc, #44]	; (8003be4 <HAL_Init+0x40>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a0a      	ldr	r2, [pc, #40]	; (8003be4 <HAL_Init+0x40>)
 8003bba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003bbe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003bc0:	4b08      	ldr	r3, [pc, #32]	; (8003be4 <HAL_Init+0x40>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a07      	ldr	r2, [pc, #28]	; (8003be4 <HAL_Init+0x40>)
 8003bc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003bcc:	2003      	movs	r0, #3
 8003bce:	f000 ff86 	bl	8004ade <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003bd2:	2000      	movs	r0, #0
 8003bd4:	f7fd ff64 	bl	8001aa0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003bd8:	f7fd ff18 	bl	8001a0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003bdc:	2300      	movs	r3, #0
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	bd80      	pop	{r7, pc}
 8003be2:	bf00      	nop
 8003be4:	40023c00 	.word	0x40023c00

08003be8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003be8:	b480      	push	{r7}
 8003bea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003bec:	4b06      	ldr	r3, [pc, #24]	; (8003c08 <HAL_IncTick+0x20>)
 8003bee:	781b      	ldrb	r3, [r3, #0]
 8003bf0:	461a      	mov	r2, r3
 8003bf2:	4b06      	ldr	r3, [pc, #24]	; (8003c0c <HAL_IncTick+0x24>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4413      	add	r3, r2
 8003bf8:	4a04      	ldr	r2, [pc, #16]	; (8003c0c <HAL_IncTick+0x24>)
 8003bfa:	6013      	str	r3, [r2, #0]
}
 8003bfc:	bf00      	nop
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c04:	4770      	bx	lr
 8003c06:	bf00      	nop
 8003c08:	20000010 	.word	0x20000010
 8003c0c:	20009e5c 	.word	0x20009e5c

08003c10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003c10:	b480      	push	{r7}
 8003c12:	af00      	add	r7, sp, #0
  return uwTick;
 8003c14:	4b03      	ldr	r3, [pc, #12]	; (8003c24 <HAL_GetTick+0x14>)
 8003c16:	681b      	ldr	r3, [r3, #0]
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c20:	4770      	bx	lr
 8003c22:	bf00      	nop
 8003c24:	20009e5c 	.word	0x20009e5c

08003c28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b084      	sub	sp, #16
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003c30:	f7ff ffee 	bl	8003c10 <HAL_GetTick>
 8003c34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c40:	d005      	beq.n	8003c4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003c42:	4b0a      	ldr	r3, [pc, #40]	; (8003c6c <HAL_Delay+0x44>)
 8003c44:	781b      	ldrb	r3, [r3, #0]
 8003c46:	461a      	mov	r2, r3
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	4413      	add	r3, r2
 8003c4c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003c4e:	bf00      	nop
 8003c50:	f7ff ffde 	bl	8003c10 <HAL_GetTick>
 8003c54:	4602      	mov	r2, r0
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	1ad3      	subs	r3, r2, r3
 8003c5a:	68fa      	ldr	r2, [r7, #12]
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d8f7      	bhi.n	8003c50 <HAL_Delay+0x28>
  {
  }
}
 8003c60:	bf00      	nop
 8003c62:	bf00      	nop
 8003c64:	3710      	adds	r7, #16
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}
 8003c6a:	bf00      	nop
 8003c6c:	20000010 	.word	0x20000010

08003c70 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b084      	sub	sp, #16
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d101      	bne.n	8003c82 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e0ed      	b.n	8003e5e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d102      	bne.n	8003c94 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f7fd fab2 	bl	80011f8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f022 0202 	bic.w	r2, r2, #2
 8003ca2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003ca4:	f7ff ffb4 	bl	8003c10 <HAL_GetTick>
 8003ca8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003caa:	e012      	b.n	8003cd2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003cac:	f7ff ffb0 	bl	8003c10 <HAL_GetTick>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	1ad3      	subs	r3, r2, r3
 8003cb6:	2b0a      	cmp	r3, #10
 8003cb8:	d90b      	bls.n	8003cd2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cbe:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2205      	movs	r2, #5
 8003cca:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e0c5      	b.n	8003e5e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	f003 0302 	and.w	r3, r3, #2
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d1e5      	bne.n	8003cac <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f042 0201 	orr.w	r2, r2, #1
 8003cee:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003cf0:	f7ff ff8e 	bl	8003c10 <HAL_GetTick>
 8003cf4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003cf6:	e012      	b.n	8003d1e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003cf8:	f7ff ff8a 	bl	8003c10 <HAL_GetTick>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	1ad3      	subs	r3, r2, r3
 8003d02:	2b0a      	cmp	r3, #10
 8003d04:	d90b      	bls.n	8003d1e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2205      	movs	r2, #5
 8003d16:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e09f      	b.n	8003e5e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	f003 0301 	and.w	r3, r3, #1
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d0e5      	beq.n	8003cf8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	7e1b      	ldrb	r3, [r3, #24]
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	d108      	bne.n	8003d46 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003d42:	601a      	str	r2, [r3, #0]
 8003d44:	e007      	b.n	8003d56 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d54:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	7e5b      	ldrb	r3, [r3, #25]
 8003d5a:	2b01      	cmp	r3, #1
 8003d5c:	d108      	bne.n	8003d70 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d6c:	601a      	str	r2, [r3, #0]
 8003d6e:	e007      	b.n	8003d80 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d7e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	7e9b      	ldrb	r3, [r3, #26]
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	d108      	bne.n	8003d9a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f042 0220 	orr.w	r2, r2, #32
 8003d96:	601a      	str	r2, [r3, #0]
 8003d98:	e007      	b.n	8003daa <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f022 0220 	bic.w	r2, r2, #32
 8003da8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	7edb      	ldrb	r3, [r3, #27]
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	d108      	bne.n	8003dc4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f022 0210 	bic.w	r2, r2, #16
 8003dc0:	601a      	str	r2, [r3, #0]
 8003dc2:	e007      	b.n	8003dd4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	681a      	ldr	r2, [r3, #0]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f042 0210 	orr.w	r2, r2, #16
 8003dd2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	7f1b      	ldrb	r3, [r3, #28]
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d108      	bne.n	8003dee <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f042 0208 	orr.w	r2, r2, #8
 8003dea:	601a      	str	r2, [r3, #0]
 8003dec:	e007      	b.n	8003dfe <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	681a      	ldr	r2, [r3, #0]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f022 0208 	bic.w	r2, r2, #8
 8003dfc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	7f5b      	ldrb	r3, [r3, #29]
 8003e02:	2b01      	cmp	r3, #1
 8003e04:	d108      	bne.n	8003e18 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	681a      	ldr	r2, [r3, #0]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f042 0204 	orr.w	r2, r2, #4
 8003e14:	601a      	str	r2, [r3, #0]
 8003e16:	e007      	b.n	8003e28 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	681a      	ldr	r2, [r3, #0]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f022 0204 	bic.w	r2, r2, #4
 8003e26:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	689a      	ldr	r2, [r3, #8]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	68db      	ldr	r3, [r3, #12]
 8003e30:	431a      	orrs	r2, r3
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	691b      	ldr	r3, [r3, #16]
 8003e36:	431a      	orrs	r2, r3
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	695b      	ldr	r3, [r3, #20]
 8003e3c:	ea42 0103 	orr.w	r1, r2, r3
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	1e5a      	subs	r2, r3, #1
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	430a      	orrs	r2, r1
 8003e4c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2200      	movs	r2, #0
 8003e52:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2201      	movs	r2, #1
 8003e58:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003e5c:	2300      	movs	r3, #0
}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	3710      	adds	r7, #16
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}
	...

08003e68 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b087      	sub	sp, #28
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
 8003e70:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e7e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8003e80:	7cfb      	ldrb	r3, [r7, #19]
 8003e82:	2b01      	cmp	r3, #1
 8003e84:	d003      	beq.n	8003e8e <HAL_CAN_ConfigFilter+0x26>
 8003e86:	7cfb      	ldrb	r3, [r7, #19]
 8003e88:	2b02      	cmp	r3, #2
 8003e8a:	f040 80be 	bne.w	800400a <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8003e8e:	4b65      	ldr	r3, [pc, #404]	; (8004024 <HAL_CAN_ConfigFilter+0x1bc>)
 8003e90:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003e98:	f043 0201 	orr.w	r2, r3, #1
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003ea8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ebc:	021b      	lsls	r3, r3, #8
 8003ebe:	431a      	orrs	r2, r3
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	695b      	ldr	r3, [r3, #20]
 8003eca:	f003 031f 	and.w	r3, r3, #31
 8003ece:	2201      	movs	r2, #1
 8003ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed4:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	43db      	mvns	r3, r3
 8003ee0:	401a      	ands	r2, r3
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	69db      	ldr	r3, [r3, #28]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d123      	bne.n	8003f38 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	43db      	mvns	r3, r3
 8003efa:	401a      	ands	r2, r3
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	68db      	ldr	r3, [r3, #12]
 8003f06:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003f0e:	683a      	ldr	r2, [r7, #0]
 8003f10:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003f12:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	3248      	adds	r2, #72	; 0x48
 8003f18:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003f2c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003f2e:	6979      	ldr	r1, [r7, #20]
 8003f30:	3348      	adds	r3, #72	; 0x48
 8003f32:	00db      	lsls	r3, r3, #3
 8003f34:	440b      	add	r3, r1
 8003f36:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	69db      	ldr	r3, [r3, #28]
 8003f3c:	2b01      	cmp	r3, #1
 8003f3e:	d122      	bne.n	8003f86 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	431a      	orrs	r2, r3
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003f5c:	683a      	ldr	r2, [r7, #0]
 8003f5e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003f60:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	3248      	adds	r2, #72	; 0x48
 8003f66:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	68db      	ldr	r3, [r3, #12]
 8003f74:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003f7a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003f7c:	6979      	ldr	r1, [r7, #20]
 8003f7e:	3348      	adds	r3, #72	; 0x48
 8003f80:	00db      	lsls	r3, r3, #3
 8003f82:	440b      	add	r3, r1
 8003f84:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	699b      	ldr	r3, [r3, #24]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d109      	bne.n	8003fa2 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	43db      	mvns	r3, r3
 8003f98:	401a      	ands	r2, r3
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003fa0:	e007      	b.n	8003fb2 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	431a      	orrs	r2, r3
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	691b      	ldr	r3, [r3, #16]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d109      	bne.n	8003fce <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	43db      	mvns	r3, r3
 8003fc4:	401a      	ands	r2, r3
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8003fcc:	e007      	b.n	8003fde <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	431a      	orrs	r2, r3
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	6a1b      	ldr	r3, [r3, #32]
 8003fe2:	2b01      	cmp	r3, #1
 8003fe4:	d107      	bne.n	8003ff6 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	431a      	orrs	r2, r3
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003ffc:	f023 0201 	bic.w	r2, r3, #1
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8004006:	2300      	movs	r3, #0
 8004008:	e006      	b.n	8004018 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800400e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004016:	2301      	movs	r3, #1
  }
}
 8004018:	4618      	mov	r0, r3
 800401a:	371c      	adds	r7, #28
 800401c:	46bd      	mov	sp, r7
 800401e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004022:	4770      	bx	lr
 8004024:	40006400 	.word	0x40006400

08004028 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b084      	sub	sp, #16
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004036:	b2db      	uxtb	r3, r3
 8004038:	2b01      	cmp	r3, #1
 800403a:	d12e      	bne.n	800409a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2202      	movs	r2, #2
 8004040:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f022 0201 	bic.w	r2, r2, #1
 8004052:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004054:	f7ff fddc 	bl	8003c10 <HAL_GetTick>
 8004058:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800405a:	e012      	b.n	8004082 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800405c:	f7ff fdd8 	bl	8003c10 <HAL_GetTick>
 8004060:	4602      	mov	r2, r0
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	1ad3      	subs	r3, r2, r3
 8004066:	2b0a      	cmp	r3, #10
 8004068:	d90b      	bls.n	8004082 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800406e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2205      	movs	r2, #5
 800407a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	e012      	b.n	80040a8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	f003 0301 	and.w	r3, r3, #1
 800408c:	2b00      	cmp	r3, #0
 800408e:	d1e5      	bne.n	800405c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2200      	movs	r2, #0
 8004094:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8004096:	2300      	movs	r3, #0
 8004098:	e006      	b.n	80040a8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800409e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80040a6:	2301      	movs	r3, #1
  }
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	3710      	adds	r7, #16
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}

080040b0 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b089      	sub	sp, #36	; 0x24
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	60f8      	str	r0, [r7, #12]
 80040b8:	60b9      	str	r1, [r7, #8]
 80040ba:	607a      	str	r2, [r7, #4]
 80040bc:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80040c4:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80040ce:	7ffb      	ldrb	r3, [r7, #31]
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	d003      	beq.n	80040dc <HAL_CAN_AddTxMessage+0x2c>
 80040d4:	7ffb      	ldrb	r3, [r7, #31]
 80040d6:	2b02      	cmp	r3, #2
 80040d8:	f040 80b8 	bne.w	800424c <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80040dc:	69bb      	ldr	r3, [r7, #24]
 80040de:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d10a      	bne.n	80040fc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80040e6:	69bb      	ldr	r3, [r7, #24]
 80040e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d105      	bne.n	80040fc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80040f0:	69bb      	ldr	r3, [r7, #24]
 80040f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	f000 80a0 	beq.w	800423c <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80040fc:	69bb      	ldr	r3, [r7, #24]
 80040fe:	0e1b      	lsrs	r3, r3, #24
 8004100:	f003 0303 	and.w	r3, r3, #3
 8004104:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	2b02      	cmp	r3, #2
 800410a:	d907      	bls.n	800411c <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004110:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004118:	2301      	movs	r3, #1
 800411a:	e09e      	b.n	800425a <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800411c:	2201      	movs	r2, #1
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	409a      	lsls	r2, r3
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d10d      	bne.n	800414a <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004138:	68f9      	ldr	r1, [r7, #12]
 800413a:	6809      	ldr	r1, [r1, #0]
 800413c:	431a      	orrs	r2, r3
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	3318      	adds	r3, #24
 8004142:	011b      	lsls	r3, r3, #4
 8004144:	440b      	add	r3, r1
 8004146:	601a      	str	r2, [r3, #0]
 8004148:	e00f      	b.n	800416a <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004154:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800415a:	68f9      	ldr	r1, [r7, #12]
 800415c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800415e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	3318      	adds	r3, #24
 8004164:	011b      	lsls	r3, r3, #4
 8004166:	440b      	add	r3, r1
 8004168:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	6819      	ldr	r1, [r3, #0]
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	691a      	ldr	r2, [r3, #16]
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	3318      	adds	r3, #24
 8004176:	011b      	lsls	r3, r3, #4
 8004178:	440b      	add	r3, r1
 800417a:	3304      	adds	r3, #4
 800417c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	7d1b      	ldrb	r3, [r3, #20]
 8004182:	2b01      	cmp	r3, #1
 8004184:	d111      	bne.n	80041aa <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681a      	ldr	r2, [r3, #0]
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	3318      	adds	r3, #24
 800418e:	011b      	lsls	r3, r3, #4
 8004190:	4413      	add	r3, r2
 8004192:	3304      	adds	r3, #4
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	68fa      	ldr	r2, [r7, #12]
 8004198:	6811      	ldr	r1, [r2, #0]
 800419a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	3318      	adds	r3, #24
 80041a2:	011b      	lsls	r3, r3, #4
 80041a4:	440b      	add	r3, r1
 80041a6:	3304      	adds	r3, #4
 80041a8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	3307      	adds	r3, #7
 80041ae:	781b      	ldrb	r3, [r3, #0]
 80041b0:	061a      	lsls	r2, r3, #24
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	3306      	adds	r3, #6
 80041b6:	781b      	ldrb	r3, [r3, #0]
 80041b8:	041b      	lsls	r3, r3, #16
 80041ba:	431a      	orrs	r2, r3
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	3305      	adds	r3, #5
 80041c0:	781b      	ldrb	r3, [r3, #0]
 80041c2:	021b      	lsls	r3, r3, #8
 80041c4:	4313      	orrs	r3, r2
 80041c6:	687a      	ldr	r2, [r7, #4]
 80041c8:	3204      	adds	r2, #4
 80041ca:	7812      	ldrb	r2, [r2, #0]
 80041cc:	4610      	mov	r0, r2
 80041ce:	68fa      	ldr	r2, [r7, #12]
 80041d0:	6811      	ldr	r1, [r2, #0]
 80041d2:	ea43 0200 	orr.w	r2, r3, r0
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	011b      	lsls	r3, r3, #4
 80041da:	440b      	add	r3, r1
 80041dc:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80041e0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	3303      	adds	r3, #3
 80041e6:	781b      	ldrb	r3, [r3, #0]
 80041e8:	061a      	lsls	r2, r3, #24
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	3302      	adds	r3, #2
 80041ee:	781b      	ldrb	r3, [r3, #0]
 80041f0:	041b      	lsls	r3, r3, #16
 80041f2:	431a      	orrs	r2, r3
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	3301      	adds	r3, #1
 80041f8:	781b      	ldrb	r3, [r3, #0]
 80041fa:	021b      	lsls	r3, r3, #8
 80041fc:	4313      	orrs	r3, r2
 80041fe:	687a      	ldr	r2, [r7, #4]
 8004200:	7812      	ldrb	r2, [r2, #0]
 8004202:	4610      	mov	r0, r2
 8004204:	68fa      	ldr	r2, [r7, #12]
 8004206:	6811      	ldr	r1, [r2, #0]
 8004208:	ea43 0200 	orr.w	r2, r3, r0
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	011b      	lsls	r3, r3, #4
 8004210:	440b      	add	r3, r1
 8004212:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8004216:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681a      	ldr	r2, [r3, #0]
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	3318      	adds	r3, #24
 8004220:	011b      	lsls	r3, r3, #4
 8004222:	4413      	add	r3, r2
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	68fa      	ldr	r2, [r7, #12]
 8004228:	6811      	ldr	r1, [r2, #0]
 800422a:	f043 0201 	orr.w	r2, r3, #1
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	3318      	adds	r3, #24
 8004232:	011b      	lsls	r3, r3, #4
 8004234:	440b      	add	r3, r1
 8004236:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8004238:	2300      	movs	r3, #0
 800423a:	e00e      	b.n	800425a <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004240:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8004248:	2301      	movs	r3, #1
 800424a:	e006      	b.n	800425a <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004250:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004258:	2301      	movs	r3, #1
  }
}
 800425a:	4618      	mov	r0, r3
 800425c:	3724      	adds	r7, #36	; 0x24
 800425e:	46bd      	mov	sp, r7
 8004260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004264:	4770      	bx	lr

08004266 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8004266:	b480      	push	{r7}
 8004268:	b087      	sub	sp, #28
 800426a:	af00      	add	r7, sp, #0
 800426c:	60f8      	str	r0, [r7, #12]
 800426e:	60b9      	str	r1, [r7, #8]
 8004270:	607a      	str	r2, [r7, #4]
 8004272:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	f893 3020 	ldrb.w	r3, [r3, #32]
 800427a:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800427c:	7dfb      	ldrb	r3, [r7, #23]
 800427e:	2b01      	cmp	r3, #1
 8004280:	d003      	beq.n	800428a <HAL_CAN_GetRxMessage+0x24>
 8004282:	7dfb      	ldrb	r3, [r7, #23]
 8004284:	2b02      	cmp	r3, #2
 8004286:	f040 80f3 	bne.w	8004470 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d10e      	bne.n	80042ae <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	68db      	ldr	r3, [r3, #12]
 8004296:	f003 0303 	and.w	r3, r3, #3
 800429a:	2b00      	cmp	r3, #0
 800429c:	d116      	bne.n	80042cc <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	e0e7      	b.n	800447e <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	691b      	ldr	r3, [r3, #16]
 80042b4:	f003 0303 	and.w	r3, r3, #3
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d107      	bne.n	80042cc <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80042c8:	2301      	movs	r3, #1
 80042ca:	e0d8      	b.n	800447e <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	331b      	adds	r3, #27
 80042d4:	011b      	lsls	r3, r3, #4
 80042d6:	4413      	add	r3, r2
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f003 0204 	and.w	r2, r3, #4
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d10c      	bne.n	8004304 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	331b      	adds	r3, #27
 80042f2:	011b      	lsls	r3, r3, #4
 80042f4:	4413      	add	r3, r2
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	0d5b      	lsrs	r3, r3, #21
 80042fa:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	601a      	str	r2, [r3, #0]
 8004302:	e00b      	b.n	800431c <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	331b      	adds	r3, #27
 800430c:	011b      	lsls	r3, r3, #4
 800430e:	4413      	add	r3, r2
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	08db      	lsrs	r3, r3, #3
 8004314:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681a      	ldr	r2, [r3, #0]
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	331b      	adds	r3, #27
 8004324:	011b      	lsls	r3, r3, #4
 8004326:	4413      	add	r3, r2
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f003 0202 	and.w	r2, r3, #2
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681a      	ldr	r2, [r3, #0]
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	331b      	adds	r3, #27
 800433a:	011b      	lsls	r3, r3, #4
 800433c:	4413      	add	r3, r2
 800433e:	3304      	adds	r3, #4
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f003 020f 	and.w	r2, r3, #15
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	331b      	adds	r3, #27
 8004352:	011b      	lsls	r3, r3, #4
 8004354:	4413      	add	r3, r2
 8004356:	3304      	adds	r3, #4
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	0a1b      	lsrs	r3, r3, #8
 800435c:	b2da      	uxtb	r2, r3
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	331b      	adds	r3, #27
 800436a:	011b      	lsls	r3, r3, #4
 800436c:	4413      	add	r3, r2
 800436e:	3304      	adds	r3, #4
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	0c1b      	lsrs	r3, r3, #16
 8004374:	b29a      	uxth	r2, r3
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	011b      	lsls	r3, r3, #4
 8004382:	4413      	add	r3, r2
 8004384:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	b2da      	uxtb	r2, r3
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	011b      	lsls	r3, r3, #4
 8004398:	4413      	add	r3, r2
 800439a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	0a1a      	lsrs	r2, r3, #8
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	3301      	adds	r3, #1
 80043a6:	b2d2      	uxtb	r2, r2
 80043a8:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681a      	ldr	r2, [r3, #0]
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	011b      	lsls	r3, r3, #4
 80043b2:	4413      	add	r3, r2
 80043b4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	0c1a      	lsrs	r2, r3, #16
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	3302      	adds	r3, #2
 80043c0:	b2d2      	uxtb	r2, r2
 80043c2:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	011b      	lsls	r3, r3, #4
 80043cc:	4413      	add	r3, r2
 80043ce:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	0e1a      	lsrs	r2, r3, #24
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	3303      	adds	r3, #3
 80043da:	b2d2      	uxtb	r2, r2
 80043dc:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681a      	ldr	r2, [r3, #0]
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	011b      	lsls	r3, r3, #4
 80043e6:	4413      	add	r3, r2
 80043e8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80043ec:	681a      	ldr	r2, [r3, #0]
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	3304      	adds	r3, #4
 80043f2:	b2d2      	uxtb	r2, r2
 80043f4:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681a      	ldr	r2, [r3, #0]
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	011b      	lsls	r3, r3, #4
 80043fe:	4413      	add	r3, r2
 8004400:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	0a1a      	lsrs	r2, r3, #8
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	3305      	adds	r3, #5
 800440c:	b2d2      	uxtb	r2, r2
 800440e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681a      	ldr	r2, [r3, #0]
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	011b      	lsls	r3, r3, #4
 8004418:	4413      	add	r3, r2
 800441a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	0c1a      	lsrs	r2, r3, #16
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	3306      	adds	r3, #6
 8004426:	b2d2      	uxtb	r2, r2
 8004428:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681a      	ldr	r2, [r3, #0]
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	011b      	lsls	r3, r3, #4
 8004432:	4413      	add	r3, r2
 8004434:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	0e1a      	lsrs	r2, r3, #24
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	3307      	adds	r3, #7
 8004440:	b2d2      	uxtb	r2, r2
 8004442:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d108      	bne.n	800445c <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	68da      	ldr	r2, [r3, #12]
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f042 0220 	orr.w	r2, r2, #32
 8004458:	60da      	str	r2, [r3, #12]
 800445a:	e007      	b.n	800446c <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	691a      	ldr	r2, [r3, #16]
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f042 0220 	orr.w	r2, r2, #32
 800446a:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800446c:	2300      	movs	r3, #0
 800446e:	e006      	b.n	800447e <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004474:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800447c:	2301      	movs	r3, #1
  }
}
 800447e:	4618      	mov	r0, r3
 8004480:	371c      	adds	r7, #28
 8004482:	46bd      	mov	sp, r7
 8004484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004488:	4770      	bx	lr

0800448a <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800448a:	b480      	push	{r7}
 800448c:	b085      	sub	sp, #20
 800448e:	af00      	add	r7, sp, #0
 8004490:	6078      	str	r0, [r7, #4]
 8004492:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	f893 3020 	ldrb.w	r3, [r3, #32]
 800449a:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800449c:	7bfb      	ldrb	r3, [r7, #15]
 800449e:	2b01      	cmp	r3, #1
 80044a0:	d002      	beq.n	80044a8 <HAL_CAN_ActivateNotification+0x1e>
 80044a2:	7bfb      	ldrb	r3, [r7, #15]
 80044a4:	2b02      	cmp	r3, #2
 80044a6:	d109      	bne.n	80044bc <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	6959      	ldr	r1, [r3, #20]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	683a      	ldr	r2, [r7, #0]
 80044b4:	430a      	orrs	r2, r1
 80044b6:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80044b8:	2300      	movs	r3, #0
 80044ba:	e006      	b.n	80044ca <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80044c8:	2301      	movs	r3, #1
  }
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	3714      	adds	r7, #20
 80044ce:	46bd      	mov	sp, r7
 80044d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d4:	4770      	bx	lr

080044d6 <HAL_CAN_DeactivateNotification>:
  * @param  InactiveITs indicates which interrupts will be disabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_DeactivateNotification(CAN_HandleTypeDef *hcan, uint32_t InactiveITs)
{
 80044d6:	b480      	push	{r7}
 80044d8:	b085      	sub	sp, #20
 80044da:	af00      	add	r7, sp, #0
 80044dc:	6078      	str	r0, [r7, #4]
 80044de:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80044e6:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(InactiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80044e8:	7bfb      	ldrb	r3, [r7, #15]
 80044ea:	2b01      	cmp	r3, #1
 80044ec:	d002      	beq.n	80044f4 <HAL_CAN_DeactivateNotification+0x1e>
 80044ee:	7bfb      	ldrb	r3, [r7, #15]
 80044f0:	2b02      	cmp	r3, #2
 80044f2:	d10a      	bne.n	800450a <HAL_CAN_DeactivateNotification+0x34>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Disable the selected interrupts */
    __HAL_CAN_DISABLE_IT(hcan, InactiveITs);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	6959      	ldr	r1, [r3, #20]
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	43da      	mvns	r2, r3
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	400a      	ands	r2, r1
 8004504:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8004506:	2300      	movs	r3, #0
 8004508:	e006      	b.n	8004518 <HAL_CAN_DeactivateNotification+0x42>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800450e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004516:	2301      	movs	r3, #1
  }
}
 8004518:	4618      	mov	r0, r3
 800451a:	3714      	adds	r7, #20
 800451c:	46bd      	mov	sp, r7
 800451e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004522:	4770      	bx	lr

08004524 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b08a      	sub	sp, #40	; 0x28
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800452c:	2300      	movs	r3, #0
 800452e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	695b      	ldr	r3, [r3, #20]
 8004536:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	68db      	ldr	r3, [r3, #12]
 800454e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	691b      	ldr	r3, [r3, #16]
 8004556:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	699b      	ldr	r3, [r3, #24]
 800455e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8004560:	6a3b      	ldr	r3, [r7, #32]
 8004562:	f003 0301 	and.w	r3, r3, #1
 8004566:	2b00      	cmp	r3, #0
 8004568:	d07c      	beq.n	8004664 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800456a:	69bb      	ldr	r3, [r7, #24]
 800456c:	f003 0301 	and.w	r3, r3, #1
 8004570:	2b00      	cmp	r3, #0
 8004572:	d023      	beq.n	80045bc <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	2201      	movs	r2, #1
 800457a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800457c:	69bb      	ldr	r3, [r7, #24]
 800457e:	f003 0302 	and.w	r3, r3, #2
 8004582:	2b00      	cmp	r3, #0
 8004584:	d003      	beq.n	800458e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	f000 f983 	bl	8004892 <HAL_CAN_TxMailbox0CompleteCallback>
 800458c:	e016      	b.n	80045bc <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800458e:	69bb      	ldr	r3, [r7, #24]
 8004590:	f003 0304 	and.w	r3, r3, #4
 8004594:	2b00      	cmp	r3, #0
 8004596:	d004      	beq.n	80045a2 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8004598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800459a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800459e:	627b      	str	r3, [r7, #36]	; 0x24
 80045a0:	e00c      	b.n	80045bc <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80045a2:	69bb      	ldr	r3, [r7, #24]
 80045a4:	f003 0308 	and.w	r3, r3, #8
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d004      	beq.n	80045b6 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80045ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ae:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80045b2:	627b      	str	r3, [r7, #36]	; 0x24
 80045b4:	e002      	b.n	80045bc <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80045b6:	6878      	ldr	r0, [r7, #4]
 80045b8:	f000 f989 	bl	80048ce <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80045bc:	69bb      	ldr	r3, [r7, #24]
 80045be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d024      	beq.n	8004610 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80045ce:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80045d0:	69bb      	ldr	r3, [r7, #24]
 80045d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d003      	beq.n	80045e2 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	f000 f963 	bl	80048a6 <HAL_CAN_TxMailbox1CompleteCallback>
 80045e0:	e016      	b.n	8004610 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80045e2:	69bb      	ldr	r3, [r7, #24]
 80045e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d004      	beq.n	80045f6 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80045ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ee:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80045f2:	627b      	str	r3, [r7, #36]	; 0x24
 80045f4:	e00c      	b.n	8004610 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80045f6:	69bb      	ldr	r3, [r7, #24]
 80045f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d004      	beq.n	800460a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8004600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004602:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004606:	627b      	str	r3, [r7, #36]	; 0x24
 8004608:	e002      	b.n	8004610 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	f000 f969 	bl	80048e2 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8004610:	69bb      	ldr	r3, [r7, #24]
 8004612:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004616:	2b00      	cmp	r3, #0
 8004618:	d024      	beq.n	8004664 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004622:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8004624:	69bb      	ldr	r3, [r7, #24]
 8004626:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800462a:	2b00      	cmp	r3, #0
 800462c:	d003      	beq.n	8004636 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f000 f943 	bl	80048ba <HAL_CAN_TxMailbox2CompleteCallback>
 8004634:	e016      	b.n	8004664 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8004636:	69bb      	ldr	r3, [r7, #24]
 8004638:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800463c:	2b00      	cmp	r3, #0
 800463e:	d004      	beq.n	800464a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8004640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004642:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004646:	627b      	str	r3, [r7, #36]	; 0x24
 8004648:	e00c      	b.n	8004664 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800464a:	69bb      	ldr	r3, [r7, #24]
 800464c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004650:	2b00      	cmp	r3, #0
 8004652:	d004      	beq.n	800465e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8004654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004656:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800465a:	627b      	str	r3, [r7, #36]	; 0x24
 800465c:	e002      	b.n	8004664 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	f000 f949 	bl	80048f6 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8004664:	6a3b      	ldr	r3, [r7, #32]
 8004666:	f003 0308 	and.w	r3, r3, #8
 800466a:	2b00      	cmp	r3, #0
 800466c:	d00c      	beq.n	8004688 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	f003 0310 	and.w	r3, r3, #16
 8004674:	2b00      	cmp	r3, #0
 8004676:	d007      	beq.n	8004688 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8004678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800467a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800467e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	2210      	movs	r2, #16
 8004686:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8004688:	6a3b      	ldr	r3, [r7, #32]
 800468a:	f003 0304 	and.w	r3, r3, #4
 800468e:	2b00      	cmp	r3, #0
 8004690:	d00b      	beq.n	80046aa <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	f003 0308 	and.w	r3, r3, #8
 8004698:	2b00      	cmp	r3, #0
 800469a:	d006      	beq.n	80046aa <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	2208      	movs	r2, #8
 80046a2:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80046a4:	6878      	ldr	r0, [r7, #4]
 80046a6:	f000 f930 	bl	800490a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80046aa:	6a3b      	ldr	r3, [r7, #32]
 80046ac:	f003 0302 	and.w	r3, r3, #2
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d009      	beq.n	80046c8 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	68db      	ldr	r3, [r3, #12]
 80046ba:	f003 0303 	and.w	r3, r3, #3
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d002      	beq.n	80046c8 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	f7fc fc0e 	bl	8000ee4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80046c8:	6a3b      	ldr	r3, [r7, #32]
 80046ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d00c      	beq.n	80046ec <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	f003 0310 	and.w	r3, r3, #16
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d007      	beq.n	80046ec <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80046dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80046e2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	2210      	movs	r2, #16
 80046ea:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80046ec:	6a3b      	ldr	r3, [r7, #32]
 80046ee:	f003 0320 	and.w	r3, r3, #32
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d00b      	beq.n	800470e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	f003 0308 	and.w	r3, r3, #8
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d006      	beq.n	800470e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	2208      	movs	r2, #8
 8004706:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8004708:	6878      	ldr	r0, [r7, #4]
 800470a:	f000 f912 	bl	8004932 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800470e:	6a3b      	ldr	r3, [r7, #32]
 8004710:	f003 0310 	and.w	r3, r3, #16
 8004714:	2b00      	cmp	r3, #0
 8004716:	d009      	beq.n	800472c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	691b      	ldr	r3, [r3, #16]
 800471e:	f003 0303 	and.w	r3, r3, #3
 8004722:	2b00      	cmp	r3, #0
 8004724:	d002      	beq.n	800472c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	f000 f8f9 	bl	800491e <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800472c:	6a3b      	ldr	r3, [r7, #32]
 800472e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004732:	2b00      	cmp	r3, #0
 8004734:	d00b      	beq.n	800474e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8004736:	69fb      	ldr	r3, [r7, #28]
 8004738:	f003 0310 	and.w	r3, r3, #16
 800473c:	2b00      	cmp	r3, #0
 800473e:	d006      	beq.n	800474e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	2210      	movs	r2, #16
 8004746:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8004748:	6878      	ldr	r0, [r7, #4]
 800474a:	f000 f8fc 	bl	8004946 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800474e:	6a3b      	ldr	r3, [r7, #32]
 8004750:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004754:	2b00      	cmp	r3, #0
 8004756:	d00b      	beq.n	8004770 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8004758:	69fb      	ldr	r3, [r7, #28]
 800475a:	f003 0308 	and.w	r3, r3, #8
 800475e:	2b00      	cmp	r3, #0
 8004760:	d006      	beq.n	8004770 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	2208      	movs	r2, #8
 8004768:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f000 f8f5 	bl	800495a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8004770:	6a3b      	ldr	r3, [r7, #32]
 8004772:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004776:	2b00      	cmp	r3, #0
 8004778:	d07b      	beq.n	8004872 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800477a:	69fb      	ldr	r3, [r7, #28]
 800477c:	f003 0304 	and.w	r3, r3, #4
 8004780:	2b00      	cmp	r3, #0
 8004782:	d072      	beq.n	800486a <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004784:	6a3b      	ldr	r3, [r7, #32]
 8004786:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800478a:	2b00      	cmp	r3, #0
 800478c:	d008      	beq.n	80047a0 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004794:	2b00      	cmp	r3, #0
 8004796:	d003      	beq.n	80047a0 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8004798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800479a:	f043 0301 	orr.w	r3, r3, #1
 800479e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80047a0:	6a3b      	ldr	r3, [r7, #32]
 80047a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d008      	beq.n	80047bc <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d003      	beq.n	80047bc <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80047b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b6:	f043 0302 	orr.w	r3, r3, #2
 80047ba:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80047bc:	6a3b      	ldr	r3, [r7, #32]
 80047be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d008      	beq.n	80047d8 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d003      	beq.n	80047d8 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80047d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d2:	f043 0304 	orr.w	r3, r3, #4
 80047d6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80047d8:	6a3b      	ldr	r3, [r7, #32]
 80047da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d043      	beq.n	800486a <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d03e      	beq.n	800486a <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80047f2:	2b60      	cmp	r3, #96	; 0x60
 80047f4:	d02b      	beq.n	800484e <HAL_CAN_IRQHandler+0x32a>
 80047f6:	2b60      	cmp	r3, #96	; 0x60
 80047f8:	d82e      	bhi.n	8004858 <HAL_CAN_IRQHandler+0x334>
 80047fa:	2b50      	cmp	r3, #80	; 0x50
 80047fc:	d022      	beq.n	8004844 <HAL_CAN_IRQHandler+0x320>
 80047fe:	2b50      	cmp	r3, #80	; 0x50
 8004800:	d82a      	bhi.n	8004858 <HAL_CAN_IRQHandler+0x334>
 8004802:	2b40      	cmp	r3, #64	; 0x40
 8004804:	d019      	beq.n	800483a <HAL_CAN_IRQHandler+0x316>
 8004806:	2b40      	cmp	r3, #64	; 0x40
 8004808:	d826      	bhi.n	8004858 <HAL_CAN_IRQHandler+0x334>
 800480a:	2b30      	cmp	r3, #48	; 0x30
 800480c:	d010      	beq.n	8004830 <HAL_CAN_IRQHandler+0x30c>
 800480e:	2b30      	cmp	r3, #48	; 0x30
 8004810:	d822      	bhi.n	8004858 <HAL_CAN_IRQHandler+0x334>
 8004812:	2b10      	cmp	r3, #16
 8004814:	d002      	beq.n	800481c <HAL_CAN_IRQHandler+0x2f8>
 8004816:	2b20      	cmp	r3, #32
 8004818:	d005      	beq.n	8004826 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800481a:	e01d      	b.n	8004858 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800481c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800481e:	f043 0308 	orr.w	r3, r3, #8
 8004822:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004824:	e019      	b.n	800485a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8004826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004828:	f043 0310 	orr.w	r3, r3, #16
 800482c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800482e:	e014      	b.n	800485a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8004830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004832:	f043 0320 	orr.w	r3, r3, #32
 8004836:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004838:	e00f      	b.n	800485a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800483a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800483c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004840:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004842:	e00a      	b.n	800485a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8004844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004846:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800484a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800484c:	e005      	b.n	800485a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800484e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004850:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004854:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004856:	e000      	b.n	800485a <HAL_CAN_IRQHandler+0x336>
            break;
 8004858:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	699a      	ldr	r2, [r3, #24]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004868:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	2204      	movs	r2, #4
 8004870:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8004872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004874:	2b00      	cmp	r3, #0
 8004876:	d008      	beq.n	800488a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800487c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800487e:	431a      	orrs	r2, r3
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8004884:	6878      	ldr	r0, [r7, #4]
 8004886:	f000 f872 	bl	800496e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800488a:	bf00      	nop
 800488c:	3728      	adds	r7, #40	; 0x28
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}

08004892 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004892:	b480      	push	{r7}
 8004894:	b083      	sub	sp, #12
 8004896:	af00      	add	r7, sp, #0
 8004898:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800489a:	bf00      	nop
 800489c:	370c      	adds	r7, #12
 800489e:	46bd      	mov	sp, r7
 80048a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a4:	4770      	bx	lr

080048a6 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80048a6:	b480      	push	{r7}
 80048a8:	b083      	sub	sp, #12
 80048aa:	af00      	add	r7, sp, #0
 80048ac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80048ae:	bf00      	nop
 80048b0:	370c      	adds	r7, #12
 80048b2:	46bd      	mov	sp, r7
 80048b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b8:	4770      	bx	lr

080048ba <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80048ba:	b480      	push	{r7}
 80048bc:	b083      	sub	sp, #12
 80048be:	af00      	add	r7, sp, #0
 80048c0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80048c2:	bf00      	nop
 80048c4:	370c      	adds	r7, #12
 80048c6:	46bd      	mov	sp, r7
 80048c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048cc:	4770      	bx	lr

080048ce <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80048ce:	b480      	push	{r7}
 80048d0:	b083      	sub	sp, #12
 80048d2:	af00      	add	r7, sp, #0
 80048d4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80048d6:	bf00      	nop
 80048d8:	370c      	adds	r7, #12
 80048da:	46bd      	mov	sp, r7
 80048dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e0:	4770      	bx	lr

080048e2 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80048e2:	b480      	push	{r7}
 80048e4:	b083      	sub	sp, #12
 80048e6:	af00      	add	r7, sp, #0
 80048e8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80048ea:	bf00      	nop
 80048ec:	370c      	adds	r7, #12
 80048ee:	46bd      	mov	sp, r7
 80048f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f4:	4770      	bx	lr

080048f6 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80048f6:	b480      	push	{r7}
 80048f8:	b083      	sub	sp, #12
 80048fa:	af00      	add	r7, sp, #0
 80048fc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80048fe:	bf00      	nop
 8004900:	370c      	adds	r7, #12
 8004902:	46bd      	mov	sp, r7
 8004904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004908:	4770      	bx	lr

0800490a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800490a:	b480      	push	{r7}
 800490c:	b083      	sub	sp, #12
 800490e:	af00      	add	r7, sp, #0
 8004910:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8004912:	bf00      	nop
 8004914:	370c      	adds	r7, #12
 8004916:	46bd      	mov	sp, r7
 8004918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491c:	4770      	bx	lr

0800491e <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800491e:	b480      	push	{r7}
 8004920:	b083      	sub	sp, #12
 8004922:	af00      	add	r7, sp, #0
 8004924:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8004926:	bf00      	nop
 8004928:	370c      	adds	r7, #12
 800492a:	46bd      	mov	sp, r7
 800492c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004930:	4770      	bx	lr

08004932 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8004932:	b480      	push	{r7}
 8004934:	b083      	sub	sp, #12
 8004936:	af00      	add	r7, sp, #0
 8004938:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800493a:	bf00      	nop
 800493c:	370c      	adds	r7, #12
 800493e:	46bd      	mov	sp, r7
 8004940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004944:	4770      	bx	lr

08004946 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8004946:	b480      	push	{r7}
 8004948:	b083      	sub	sp, #12
 800494a:	af00      	add	r7, sp, #0
 800494c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800494e:	bf00      	nop
 8004950:	370c      	adds	r7, #12
 8004952:	46bd      	mov	sp, r7
 8004954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004958:	4770      	bx	lr

0800495a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800495a:	b480      	push	{r7}
 800495c:	b083      	sub	sp, #12
 800495e:	af00      	add	r7, sp, #0
 8004960:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8004962:	bf00      	nop
 8004964:	370c      	adds	r7, #12
 8004966:	46bd      	mov	sp, r7
 8004968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496c:	4770      	bx	lr

0800496e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800496e:	b480      	push	{r7}
 8004970:	b083      	sub	sp, #12
 8004972:	af00      	add	r7, sp, #0
 8004974:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8004976:	bf00      	nop
 8004978:	370c      	adds	r7, #12
 800497a:	46bd      	mov	sp, r7
 800497c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004980:	4770      	bx	lr
	...

08004984 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004984:	b480      	push	{r7}
 8004986:	b085      	sub	sp, #20
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	f003 0307 	and.w	r3, r3, #7
 8004992:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004994:	4b0c      	ldr	r3, [pc, #48]	; (80049c8 <__NVIC_SetPriorityGrouping+0x44>)
 8004996:	68db      	ldr	r3, [r3, #12]
 8004998:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800499a:	68ba      	ldr	r2, [r7, #8]
 800499c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80049a0:	4013      	ands	r3, r2
 80049a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80049ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80049b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80049b6:	4a04      	ldr	r2, [pc, #16]	; (80049c8 <__NVIC_SetPriorityGrouping+0x44>)
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	60d3      	str	r3, [r2, #12]
}
 80049bc:	bf00      	nop
 80049be:	3714      	adds	r7, #20
 80049c0:	46bd      	mov	sp, r7
 80049c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c6:	4770      	bx	lr
 80049c8:	e000ed00 	.word	0xe000ed00

080049cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80049cc:	b480      	push	{r7}
 80049ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80049d0:	4b04      	ldr	r3, [pc, #16]	; (80049e4 <__NVIC_GetPriorityGrouping+0x18>)
 80049d2:	68db      	ldr	r3, [r3, #12]
 80049d4:	0a1b      	lsrs	r3, r3, #8
 80049d6:	f003 0307 	and.w	r3, r3, #7
}
 80049da:	4618      	mov	r0, r3
 80049dc:	46bd      	mov	sp, r7
 80049de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e2:	4770      	bx	lr
 80049e4:	e000ed00 	.word	0xe000ed00

080049e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b083      	sub	sp, #12
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	4603      	mov	r3, r0
 80049f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80049f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	db0b      	blt.n	8004a12 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80049fa:	79fb      	ldrb	r3, [r7, #7]
 80049fc:	f003 021f 	and.w	r2, r3, #31
 8004a00:	4907      	ldr	r1, [pc, #28]	; (8004a20 <__NVIC_EnableIRQ+0x38>)
 8004a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a06:	095b      	lsrs	r3, r3, #5
 8004a08:	2001      	movs	r0, #1
 8004a0a:	fa00 f202 	lsl.w	r2, r0, r2
 8004a0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004a12:	bf00      	nop
 8004a14:	370c      	adds	r7, #12
 8004a16:	46bd      	mov	sp, r7
 8004a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1c:	4770      	bx	lr
 8004a1e:	bf00      	nop
 8004a20:	e000e100 	.word	0xe000e100

08004a24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b083      	sub	sp, #12
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	6039      	str	r1, [r7, #0]
 8004a2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	db0a      	blt.n	8004a4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	b2da      	uxtb	r2, r3
 8004a3c:	490c      	ldr	r1, [pc, #48]	; (8004a70 <__NVIC_SetPriority+0x4c>)
 8004a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a42:	0112      	lsls	r2, r2, #4
 8004a44:	b2d2      	uxtb	r2, r2
 8004a46:	440b      	add	r3, r1
 8004a48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004a4c:	e00a      	b.n	8004a64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	b2da      	uxtb	r2, r3
 8004a52:	4908      	ldr	r1, [pc, #32]	; (8004a74 <__NVIC_SetPriority+0x50>)
 8004a54:	79fb      	ldrb	r3, [r7, #7]
 8004a56:	f003 030f 	and.w	r3, r3, #15
 8004a5a:	3b04      	subs	r3, #4
 8004a5c:	0112      	lsls	r2, r2, #4
 8004a5e:	b2d2      	uxtb	r2, r2
 8004a60:	440b      	add	r3, r1
 8004a62:	761a      	strb	r2, [r3, #24]
}
 8004a64:	bf00      	nop
 8004a66:	370c      	adds	r7, #12
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6e:	4770      	bx	lr
 8004a70:	e000e100 	.word	0xe000e100
 8004a74:	e000ed00 	.word	0xe000ed00

08004a78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b089      	sub	sp, #36	; 0x24
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	60f8      	str	r0, [r7, #12]
 8004a80:	60b9      	str	r1, [r7, #8]
 8004a82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	f003 0307 	and.w	r3, r3, #7
 8004a8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004a8c:	69fb      	ldr	r3, [r7, #28]
 8004a8e:	f1c3 0307 	rsb	r3, r3, #7
 8004a92:	2b04      	cmp	r3, #4
 8004a94:	bf28      	it	cs
 8004a96:	2304      	movcs	r3, #4
 8004a98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004a9a:	69fb      	ldr	r3, [r7, #28]
 8004a9c:	3304      	adds	r3, #4
 8004a9e:	2b06      	cmp	r3, #6
 8004aa0:	d902      	bls.n	8004aa8 <NVIC_EncodePriority+0x30>
 8004aa2:	69fb      	ldr	r3, [r7, #28]
 8004aa4:	3b03      	subs	r3, #3
 8004aa6:	e000      	b.n	8004aaa <NVIC_EncodePriority+0x32>
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004aac:	f04f 32ff 	mov.w	r2, #4294967295
 8004ab0:	69bb      	ldr	r3, [r7, #24]
 8004ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ab6:	43da      	mvns	r2, r3
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	401a      	ands	r2, r3
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004ac0:	f04f 31ff 	mov.w	r1, #4294967295
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	fa01 f303 	lsl.w	r3, r1, r3
 8004aca:	43d9      	mvns	r1, r3
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ad0:	4313      	orrs	r3, r2
         );
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	3724      	adds	r7, #36	; 0x24
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004adc:	4770      	bx	lr

08004ade <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ade:	b580      	push	{r7, lr}
 8004ae0:	b082      	sub	sp, #8
 8004ae2:	af00      	add	r7, sp, #0
 8004ae4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	f7ff ff4c 	bl	8004984 <__NVIC_SetPriorityGrouping>
}
 8004aec:	bf00      	nop
 8004aee:	3708      	adds	r7, #8
 8004af0:	46bd      	mov	sp, r7
 8004af2:	bd80      	pop	{r7, pc}

08004af4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b086      	sub	sp, #24
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	4603      	mov	r3, r0
 8004afc:	60b9      	str	r1, [r7, #8]
 8004afe:	607a      	str	r2, [r7, #4]
 8004b00:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004b02:	2300      	movs	r3, #0
 8004b04:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004b06:	f7ff ff61 	bl	80049cc <__NVIC_GetPriorityGrouping>
 8004b0a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004b0c:	687a      	ldr	r2, [r7, #4]
 8004b0e:	68b9      	ldr	r1, [r7, #8]
 8004b10:	6978      	ldr	r0, [r7, #20]
 8004b12:	f7ff ffb1 	bl	8004a78 <NVIC_EncodePriority>
 8004b16:	4602      	mov	r2, r0
 8004b18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b1c:	4611      	mov	r1, r2
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f7ff ff80 	bl	8004a24 <__NVIC_SetPriority>
}
 8004b24:	bf00      	nop
 8004b26:	3718      	adds	r7, #24
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bd80      	pop	{r7, pc}

08004b2c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b082      	sub	sp, #8
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	4603      	mov	r3, r0
 8004b34:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004b36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f7ff ff54 	bl	80049e8 <__NVIC_EnableIRQ>
}
 8004b40:	bf00      	nop
 8004b42:	3708      	adds	r7, #8
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd80      	pop	{r7, pc}

08004b48 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b086      	sub	sp, #24
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004b50:	2300      	movs	r3, #0
 8004b52:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004b54:	f7ff f85c 	bl	8003c10 <HAL_GetTick>
 8004b58:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d101      	bne.n	8004b64 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004b60:	2301      	movs	r3, #1
 8004b62:	e099      	b.n	8004c98 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2200      	movs	r2, #0
 8004b68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2202      	movs	r2, #2
 8004b70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f022 0201 	bic.w	r2, r2, #1
 8004b82:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004b84:	e00f      	b.n	8004ba6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004b86:	f7ff f843 	bl	8003c10 <HAL_GetTick>
 8004b8a:	4602      	mov	r2, r0
 8004b8c:	693b      	ldr	r3, [r7, #16]
 8004b8e:	1ad3      	subs	r3, r2, r3
 8004b90:	2b05      	cmp	r3, #5
 8004b92:	d908      	bls.n	8004ba6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2220      	movs	r2, #32
 8004b98:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2203      	movs	r2, #3
 8004b9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004ba2:	2303      	movs	r3, #3
 8004ba4:	e078      	b.n	8004c98 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f003 0301 	and.w	r3, r3, #1
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d1e8      	bne.n	8004b86 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004bbc:	697a      	ldr	r2, [r7, #20]
 8004bbe:	4b38      	ldr	r3, [pc, #224]	; (8004ca0 <HAL_DMA_Init+0x158>)
 8004bc0:	4013      	ands	r3, r2
 8004bc2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	685a      	ldr	r2, [r3, #4]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	689b      	ldr	r3, [r3, #8]
 8004bcc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004bd2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	691b      	ldr	r3, [r3, #16]
 8004bd8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004bde:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	699b      	ldr	r3, [r3, #24]
 8004be4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004bea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6a1b      	ldr	r3, [r3, #32]
 8004bf0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004bf2:	697a      	ldr	r2, [r7, #20]
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bfc:	2b04      	cmp	r3, #4
 8004bfe:	d107      	bne.n	8004c10 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	697a      	ldr	r2, [r7, #20]
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	697a      	ldr	r2, [r7, #20]
 8004c16:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	695b      	ldr	r3, [r3, #20]
 8004c1e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	f023 0307 	bic.w	r3, r3, #7
 8004c26:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c2c:	697a      	ldr	r2, [r7, #20]
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c36:	2b04      	cmp	r3, #4
 8004c38:	d117      	bne.n	8004c6a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c3e:	697a      	ldr	r2, [r7, #20]
 8004c40:	4313      	orrs	r3, r2
 8004c42:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d00e      	beq.n	8004c6a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004c4c:	6878      	ldr	r0, [r7, #4]
 8004c4e:	f000 fa91 	bl	8005174 <DMA_CheckFifoParam>
 8004c52:	4603      	mov	r3, r0
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d008      	beq.n	8004c6a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2240      	movs	r2, #64	; 0x40
 8004c5c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2201      	movs	r2, #1
 8004c62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004c66:	2301      	movs	r3, #1
 8004c68:	e016      	b.n	8004c98 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	697a      	ldr	r2, [r7, #20]
 8004c70:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f000 fa48 	bl	8005108 <DMA_CalcBaseAndBitshift>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c80:	223f      	movs	r2, #63	; 0x3f
 8004c82:	409a      	lsls	r2, r3
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2201      	movs	r2, #1
 8004c92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004c96:	2300      	movs	r3, #0
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	3718      	adds	r7, #24
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}
 8004ca0:	f010803f 	.word	0xf010803f

08004ca4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b086      	sub	sp, #24
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	60f8      	str	r0, [r7, #12]
 8004cac:	60b9      	str	r1, [r7, #8]
 8004cae:	607a      	str	r2, [r7, #4]
 8004cb0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cba:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004cc2:	2b01      	cmp	r3, #1
 8004cc4:	d101      	bne.n	8004cca <HAL_DMA_Start_IT+0x26>
 8004cc6:	2302      	movs	r3, #2
 8004cc8:	e040      	b.n	8004d4c <HAL_DMA_Start_IT+0xa8>
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	2201      	movs	r2, #1
 8004cce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004cd8:	b2db      	uxtb	r3, r3
 8004cda:	2b01      	cmp	r3, #1
 8004cdc:	d12f      	bne.n	8004d3e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	2202      	movs	r2, #2
 8004ce2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	687a      	ldr	r2, [r7, #4]
 8004cf0:	68b9      	ldr	r1, [r7, #8]
 8004cf2:	68f8      	ldr	r0, [r7, #12]
 8004cf4:	f000 f9da 	bl	80050ac <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cfc:	223f      	movs	r2, #63	; 0x3f
 8004cfe:	409a      	lsls	r2, r3
 8004d00:	693b      	ldr	r3, [r7, #16]
 8004d02:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	681a      	ldr	r2, [r3, #0]
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f042 0216 	orr.w	r2, r2, #22
 8004d12:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d007      	beq.n	8004d2c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	681a      	ldr	r2, [r3, #0]
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f042 0208 	orr.w	r2, r2, #8
 8004d2a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	681a      	ldr	r2, [r3, #0]
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f042 0201 	orr.w	r2, r2, #1
 8004d3a:	601a      	str	r2, [r3, #0]
 8004d3c:	e005      	b.n	8004d4a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2200      	movs	r2, #0
 8004d42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004d46:	2302      	movs	r3, #2
 8004d48:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004d4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	3718      	adds	r7, #24
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd80      	pop	{r7, pc}

08004d54 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004d54:	b480      	push	{r7}
 8004d56:	b083      	sub	sp, #12
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004d62:	b2db      	uxtb	r3, r3
 8004d64:	2b02      	cmp	r3, #2
 8004d66:	d004      	beq.n	8004d72 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2280      	movs	r2, #128	; 0x80
 8004d6c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	e00c      	b.n	8004d8c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2205      	movs	r2, #5
 8004d76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	681a      	ldr	r2, [r3, #0]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f022 0201 	bic.w	r2, r2, #1
 8004d88:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004d8a:	2300      	movs	r3, #0
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	370c      	adds	r7, #12
 8004d90:	46bd      	mov	sp, r7
 8004d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d96:	4770      	bx	lr

08004d98 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b086      	sub	sp, #24
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004da0:	2300      	movs	r3, #0
 8004da2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004da4:	4b92      	ldr	r3, [pc, #584]	; (8004ff0 <HAL_DMA_IRQHandler+0x258>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a92      	ldr	r2, [pc, #584]	; (8004ff4 <HAL_DMA_IRQHandler+0x25c>)
 8004daa:	fba2 2303 	umull	r2, r3, r2, r3
 8004dae:	0a9b      	lsrs	r3, r3, #10
 8004db0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004db6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004db8:	693b      	ldr	r3, [r7, #16]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dc2:	2208      	movs	r2, #8
 8004dc4:	409a      	lsls	r2, r3
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	4013      	ands	r3, r2
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d01a      	beq.n	8004e04 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f003 0304 	and.w	r3, r3, #4
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d013      	beq.n	8004e04 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	681a      	ldr	r2, [r3, #0]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f022 0204 	bic.w	r2, r2, #4
 8004dea:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004df0:	2208      	movs	r2, #8
 8004df2:	409a      	lsls	r2, r3
 8004df4:	693b      	ldr	r3, [r7, #16]
 8004df6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dfc:	f043 0201 	orr.w	r2, r3, #1
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e08:	2201      	movs	r2, #1
 8004e0a:	409a      	lsls	r2, r3
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	4013      	ands	r3, r2
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d012      	beq.n	8004e3a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	695b      	ldr	r3, [r3, #20]
 8004e1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d00b      	beq.n	8004e3a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e26:	2201      	movs	r2, #1
 8004e28:	409a      	lsls	r2, r3
 8004e2a:	693b      	ldr	r3, [r7, #16]
 8004e2c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e32:	f043 0202 	orr.w	r2, r3, #2
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e3e:	2204      	movs	r2, #4
 8004e40:	409a      	lsls	r2, r3
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	4013      	ands	r3, r2
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d012      	beq.n	8004e70 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f003 0302 	and.w	r3, r3, #2
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d00b      	beq.n	8004e70 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e5c:	2204      	movs	r2, #4
 8004e5e:	409a      	lsls	r2, r3
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e68:	f043 0204 	orr.w	r2, r3, #4
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e74:	2210      	movs	r2, #16
 8004e76:	409a      	lsls	r2, r3
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	4013      	ands	r3, r2
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d043      	beq.n	8004f08 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f003 0308 	and.w	r3, r3, #8
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d03c      	beq.n	8004f08 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e92:	2210      	movs	r2, #16
 8004e94:	409a      	lsls	r2, r3
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d018      	beq.n	8004eda <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d108      	bne.n	8004ec8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d024      	beq.n	8004f08 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ec2:	6878      	ldr	r0, [r7, #4]
 8004ec4:	4798      	blx	r3
 8004ec6:	e01f      	b.n	8004f08 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d01b      	beq.n	8004f08 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ed4:	6878      	ldr	r0, [r7, #4]
 8004ed6:	4798      	blx	r3
 8004ed8:	e016      	b.n	8004f08 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d107      	bne.n	8004ef8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	681a      	ldr	r2, [r3, #0]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f022 0208 	bic.w	r2, r2, #8
 8004ef6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d003      	beq.n	8004f08 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f04:	6878      	ldr	r0, [r7, #4]
 8004f06:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f0c:	2220      	movs	r2, #32
 8004f0e:	409a      	lsls	r2, r3
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	4013      	ands	r3, r2
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	f000 808e 	beq.w	8005036 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f003 0310 	and.w	r3, r3, #16
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	f000 8086 	beq.w	8005036 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f2e:	2220      	movs	r2, #32
 8004f30:	409a      	lsls	r2, r3
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004f3c:	b2db      	uxtb	r3, r3
 8004f3e:	2b05      	cmp	r3, #5
 8004f40:	d136      	bne.n	8004fb0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	681a      	ldr	r2, [r3, #0]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f022 0216 	bic.w	r2, r2, #22
 8004f50:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	695a      	ldr	r2, [r3, #20]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004f60:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d103      	bne.n	8004f72 <HAL_DMA_IRQHandler+0x1da>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d007      	beq.n	8004f82 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	681a      	ldr	r2, [r3, #0]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f022 0208 	bic.w	r2, r2, #8
 8004f80:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f86:	223f      	movs	r2, #63	; 0x3f
 8004f88:	409a      	lsls	r2, r3
 8004f8a:	693b      	ldr	r3, [r7, #16]
 8004f8c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2200      	movs	r2, #0
 8004f92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2201      	movs	r2, #1
 8004f9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d07d      	beq.n	80050a2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	4798      	blx	r3
        }
        return;
 8004fae:	e078      	b.n	80050a2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d01c      	beq.n	8004ff8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d108      	bne.n	8004fde <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d030      	beq.n	8005036 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fd8:	6878      	ldr	r0, [r7, #4]
 8004fda:	4798      	blx	r3
 8004fdc:	e02b      	b.n	8005036 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d027      	beq.n	8005036 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	4798      	blx	r3
 8004fee:	e022      	b.n	8005036 <HAL_DMA_IRQHandler+0x29e>
 8004ff0:	20000000 	.word	0x20000000
 8004ff4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005002:	2b00      	cmp	r3, #0
 8005004:	d10f      	bne.n	8005026 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	681a      	ldr	r2, [r3, #0]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f022 0210 	bic.w	r2, r2, #16
 8005014:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2200      	movs	r2, #0
 800501a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2201      	movs	r2, #1
 8005022:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800502a:	2b00      	cmp	r3, #0
 800502c:	d003      	beq.n	8005036 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800503a:	2b00      	cmp	r3, #0
 800503c:	d032      	beq.n	80050a4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005042:	f003 0301 	and.w	r3, r3, #1
 8005046:	2b00      	cmp	r3, #0
 8005048:	d022      	beq.n	8005090 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2205      	movs	r2, #5
 800504e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	681a      	ldr	r2, [r3, #0]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f022 0201 	bic.w	r2, r2, #1
 8005060:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	3301      	adds	r3, #1
 8005066:	60bb      	str	r3, [r7, #8]
 8005068:	697a      	ldr	r2, [r7, #20]
 800506a:	429a      	cmp	r2, r3
 800506c:	d307      	bcc.n	800507e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f003 0301 	and.w	r3, r3, #1
 8005078:	2b00      	cmp	r3, #0
 800507a:	d1f2      	bne.n	8005062 <HAL_DMA_IRQHandler+0x2ca>
 800507c:	e000      	b.n	8005080 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800507e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2200      	movs	r2, #0
 8005084:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2201      	movs	r2, #1
 800508c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005094:	2b00      	cmp	r3, #0
 8005096:	d005      	beq.n	80050a4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800509c:	6878      	ldr	r0, [r7, #4]
 800509e:	4798      	blx	r3
 80050a0:	e000      	b.n	80050a4 <HAL_DMA_IRQHandler+0x30c>
        return;
 80050a2:	bf00      	nop
    }
  }
}
 80050a4:	3718      	adds	r7, #24
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bd80      	pop	{r7, pc}
 80050aa:	bf00      	nop

080050ac <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80050ac:	b480      	push	{r7}
 80050ae:	b085      	sub	sp, #20
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	60f8      	str	r0, [r7, #12]
 80050b4:	60b9      	str	r1, [r7, #8]
 80050b6:	607a      	str	r2, [r7, #4]
 80050b8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	681a      	ldr	r2, [r3, #0]
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80050c8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	683a      	ldr	r2, [r7, #0]
 80050d0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	689b      	ldr	r3, [r3, #8]
 80050d6:	2b40      	cmp	r3, #64	; 0x40
 80050d8:	d108      	bne.n	80050ec <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	687a      	ldr	r2, [r7, #4]
 80050e0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	68ba      	ldr	r2, [r7, #8]
 80050e8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80050ea:	e007      	b.n	80050fc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	68ba      	ldr	r2, [r7, #8]
 80050f2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	687a      	ldr	r2, [r7, #4]
 80050fa:	60da      	str	r2, [r3, #12]
}
 80050fc:	bf00      	nop
 80050fe:	3714      	adds	r7, #20
 8005100:	46bd      	mov	sp, r7
 8005102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005106:	4770      	bx	lr

08005108 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005108:	b480      	push	{r7}
 800510a:	b085      	sub	sp, #20
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	b2db      	uxtb	r3, r3
 8005116:	3b10      	subs	r3, #16
 8005118:	4a14      	ldr	r2, [pc, #80]	; (800516c <DMA_CalcBaseAndBitshift+0x64>)
 800511a:	fba2 2303 	umull	r2, r3, r2, r3
 800511e:	091b      	lsrs	r3, r3, #4
 8005120:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005122:	4a13      	ldr	r2, [pc, #76]	; (8005170 <DMA_CalcBaseAndBitshift+0x68>)
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	4413      	add	r3, r2
 8005128:	781b      	ldrb	r3, [r3, #0]
 800512a:	461a      	mov	r2, r3
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	2b03      	cmp	r3, #3
 8005134:	d909      	bls.n	800514a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800513e:	f023 0303 	bic.w	r3, r3, #3
 8005142:	1d1a      	adds	r2, r3, #4
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	659a      	str	r2, [r3, #88]	; 0x58
 8005148:	e007      	b.n	800515a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005152:	f023 0303 	bic.w	r3, r3, #3
 8005156:	687a      	ldr	r2, [r7, #4]
 8005158:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800515e:	4618      	mov	r0, r3
 8005160:	3714      	adds	r7, #20
 8005162:	46bd      	mov	sp, r7
 8005164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005168:	4770      	bx	lr
 800516a:	bf00      	nop
 800516c:	aaaaaaab 	.word	0xaaaaaaab
 8005170:	0800c830 	.word	0x0800c830

08005174 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005174:	b480      	push	{r7}
 8005176:	b085      	sub	sp, #20
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800517c:	2300      	movs	r3, #0
 800517e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005184:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	699b      	ldr	r3, [r3, #24]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d11f      	bne.n	80051ce <DMA_CheckFifoParam+0x5a>
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	2b03      	cmp	r3, #3
 8005192:	d856      	bhi.n	8005242 <DMA_CheckFifoParam+0xce>
 8005194:	a201      	add	r2, pc, #4	; (adr r2, 800519c <DMA_CheckFifoParam+0x28>)
 8005196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800519a:	bf00      	nop
 800519c:	080051ad 	.word	0x080051ad
 80051a0:	080051bf 	.word	0x080051bf
 80051a4:	080051ad 	.word	0x080051ad
 80051a8:	08005243 	.word	0x08005243
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d046      	beq.n	8005246 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80051b8:	2301      	movs	r3, #1
 80051ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80051bc:	e043      	b.n	8005246 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051c2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80051c6:	d140      	bne.n	800524a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80051c8:	2301      	movs	r3, #1
 80051ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80051cc:	e03d      	b.n	800524a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	699b      	ldr	r3, [r3, #24]
 80051d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051d6:	d121      	bne.n	800521c <DMA_CheckFifoParam+0xa8>
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	2b03      	cmp	r3, #3
 80051dc:	d837      	bhi.n	800524e <DMA_CheckFifoParam+0xda>
 80051de:	a201      	add	r2, pc, #4	; (adr r2, 80051e4 <DMA_CheckFifoParam+0x70>)
 80051e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051e4:	080051f5 	.word	0x080051f5
 80051e8:	080051fb 	.word	0x080051fb
 80051ec:	080051f5 	.word	0x080051f5
 80051f0:	0800520d 	.word	0x0800520d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80051f4:	2301      	movs	r3, #1
 80051f6:	73fb      	strb	r3, [r7, #15]
      break;
 80051f8:	e030      	b.n	800525c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005202:	2b00      	cmp	r3, #0
 8005204:	d025      	beq.n	8005252 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005206:	2301      	movs	r3, #1
 8005208:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800520a:	e022      	b.n	8005252 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005210:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005214:	d11f      	bne.n	8005256 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005216:	2301      	movs	r3, #1
 8005218:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800521a:	e01c      	b.n	8005256 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	2b02      	cmp	r3, #2
 8005220:	d903      	bls.n	800522a <DMA_CheckFifoParam+0xb6>
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	2b03      	cmp	r3, #3
 8005226:	d003      	beq.n	8005230 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005228:	e018      	b.n	800525c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800522a:	2301      	movs	r3, #1
 800522c:	73fb      	strb	r3, [r7, #15]
      break;
 800522e:	e015      	b.n	800525c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005234:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005238:	2b00      	cmp	r3, #0
 800523a:	d00e      	beq.n	800525a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800523c:	2301      	movs	r3, #1
 800523e:	73fb      	strb	r3, [r7, #15]
      break;
 8005240:	e00b      	b.n	800525a <DMA_CheckFifoParam+0xe6>
      break;
 8005242:	bf00      	nop
 8005244:	e00a      	b.n	800525c <DMA_CheckFifoParam+0xe8>
      break;
 8005246:	bf00      	nop
 8005248:	e008      	b.n	800525c <DMA_CheckFifoParam+0xe8>
      break;
 800524a:	bf00      	nop
 800524c:	e006      	b.n	800525c <DMA_CheckFifoParam+0xe8>
      break;
 800524e:	bf00      	nop
 8005250:	e004      	b.n	800525c <DMA_CheckFifoParam+0xe8>
      break;
 8005252:	bf00      	nop
 8005254:	e002      	b.n	800525c <DMA_CheckFifoParam+0xe8>
      break;   
 8005256:	bf00      	nop
 8005258:	e000      	b.n	800525c <DMA_CheckFifoParam+0xe8>
      break;
 800525a:	bf00      	nop
    }
  } 
  
  return status; 
 800525c:	7bfb      	ldrb	r3, [r7, #15]
}
 800525e:	4618      	mov	r0, r3
 8005260:	3714      	adds	r7, #20
 8005262:	46bd      	mov	sp, r7
 8005264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005268:	4770      	bx	lr
 800526a:	bf00      	nop

0800526c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800526c:	b480      	push	{r7}
 800526e:	b089      	sub	sp, #36	; 0x24
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
 8005274:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005276:	2300      	movs	r3, #0
 8005278:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800527a:	2300      	movs	r3, #0
 800527c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800527e:	2300      	movs	r3, #0
 8005280:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005282:	2300      	movs	r3, #0
 8005284:	61fb      	str	r3, [r7, #28]
 8005286:	e177      	b.n	8005578 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005288:	2201      	movs	r2, #1
 800528a:	69fb      	ldr	r3, [r7, #28]
 800528c:	fa02 f303 	lsl.w	r3, r2, r3
 8005290:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	697a      	ldr	r2, [r7, #20]
 8005298:	4013      	ands	r3, r2
 800529a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800529c:	693a      	ldr	r2, [r7, #16]
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	429a      	cmp	r2, r3
 80052a2:	f040 8166 	bne.w	8005572 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	2b01      	cmp	r3, #1
 80052ac:	d00b      	beq.n	80052c6 <HAL_GPIO_Init+0x5a>
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	2b02      	cmp	r3, #2
 80052b4:	d007      	beq.n	80052c6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80052ba:	2b11      	cmp	r3, #17
 80052bc:	d003      	beq.n	80052c6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	2b12      	cmp	r3, #18
 80052c4:	d130      	bne.n	8005328 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	689b      	ldr	r3, [r3, #8]
 80052ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80052cc:	69fb      	ldr	r3, [r7, #28]
 80052ce:	005b      	lsls	r3, r3, #1
 80052d0:	2203      	movs	r2, #3
 80052d2:	fa02 f303 	lsl.w	r3, r2, r3
 80052d6:	43db      	mvns	r3, r3
 80052d8:	69ba      	ldr	r2, [r7, #24]
 80052da:	4013      	ands	r3, r2
 80052dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	68da      	ldr	r2, [r3, #12]
 80052e2:	69fb      	ldr	r3, [r7, #28]
 80052e4:	005b      	lsls	r3, r3, #1
 80052e6:	fa02 f303 	lsl.w	r3, r2, r3
 80052ea:	69ba      	ldr	r2, [r7, #24]
 80052ec:	4313      	orrs	r3, r2
 80052ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	69ba      	ldr	r2, [r7, #24]
 80052f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80052fc:	2201      	movs	r2, #1
 80052fe:	69fb      	ldr	r3, [r7, #28]
 8005300:	fa02 f303 	lsl.w	r3, r2, r3
 8005304:	43db      	mvns	r3, r3
 8005306:	69ba      	ldr	r2, [r7, #24]
 8005308:	4013      	ands	r3, r2
 800530a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	091b      	lsrs	r3, r3, #4
 8005312:	f003 0201 	and.w	r2, r3, #1
 8005316:	69fb      	ldr	r3, [r7, #28]
 8005318:	fa02 f303 	lsl.w	r3, r2, r3
 800531c:	69ba      	ldr	r2, [r7, #24]
 800531e:	4313      	orrs	r3, r2
 8005320:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	69ba      	ldr	r2, [r7, #24]
 8005326:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	68db      	ldr	r3, [r3, #12]
 800532c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800532e:	69fb      	ldr	r3, [r7, #28]
 8005330:	005b      	lsls	r3, r3, #1
 8005332:	2203      	movs	r2, #3
 8005334:	fa02 f303 	lsl.w	r3, r2, r3
 8005338:	43db      	mvns	r3, r3
 800533a:	69ba      	ldr	r2, [r7, #24]
 800533c:	4013      	ands	r3, r2
 800533e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	689a      	ldr	r2, [r3, #8]
 8005344:	69fb      	ldr	r3, [r7, #28]
 8005346:	005b      	lsls	r3, r3, #1
 8005348:	fa02 f303 	lsl.w	r3, r2, r3
 800534c:	69ba      	ldr	r2, [r7, #24]
 800534e:	4313      	orrs	r3, r2
 8005350:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	69ba      	ldr	r2, [r7, #24]
 8005356:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	2b02      	cmp	r3, #2
 800535e:	d003      	beq.n	8005368 <HAL_GPIO_Init+0xfc>
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	2b12      	cmp	r3, #18
 8005366:	d123      	bne.n	80053b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005368:	69fb      	ldr	r3, [r7, #28]
 800536a:	08da      	lsrs	r2, r3, #3
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	3208      	adds	r2, #8
 8005370:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005374:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005376:	69fb      	ldr	r3, [r7, #28]
 8005378:	f003 0307 	and.w	r3, r3, #7
 800537c:	009b      	lsls	r3, r3, #2
 800537e:	220f      	movs	r2, #15
 8005380:	fa02 f303 	lsl.w	r3, r2, r3
 8005384:	43db      	mvns	r3, r3
 8005386:	69ba      	ldr	r2, [r7, #24]
 8005388:	4013      	ands	r3, r2
 800538a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	691a      	ldr	r2, [r3, #16]
 8005390:	69fb      	ldr	r3, [r7, #28]
 8005392:	f003 0307 	and.w	r3, r3, #7
 8005396:	009b      	lsls	r3, r3, #2
 8005398:	fa02 f303 	lsl.w	r3, r2, r3
 800539c:	69ba      	ldr	r2, [r7, #24]
 800539e:	4313      	orrs	r3, r2
 80053a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80053a2:	69fb      	ldr	r3, [r7, #28]
 80053a4:	08da      	lsrs	r2, r3, #3
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	3208      	adds	r2, #8
 80053aa:	69b9      	ldr	r1, [r7, #24]
 80053ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80053b6:	69fb      	ldr	r3, [r7, #28]
 80053b8:	005b      	lsls	r3, r3, #1
 80053ba:	2203      	movs	r2, #3
 80053bc:	fa02 f303 	lsl.w	r3, r2, r3
 80053c0:	43db      	mvns	r3, r3
 80053c2:	69ba      	ldr	r2, [r7, #24]
 80053c4:	4013      	ands	r3, r2
 80053c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	f003 0203 	and.w	r2, r3, #3
 80053d0:	69fb      	ldr	r3, [r7, #28]
 80053d2:	005b      	lsls	r3, r3, #1
 80053d4:	fa02 f303 	lsl.w	r3, r2, r3
 80053d8:	69ba      	ldr	r2, [r7, #24]
 80053da:	4313      	orrs	r3, r2
 80053dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	69ba      	ldr	r2, [r7, #24]
 80053e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	f000 80c0 	beq.w	8005572 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80053f2:	2300      	movs	r3, #0
 80053f4:	60fb      	str	r3, [r7, #12]
 80053f6:	4b66      	ldr	r3, [pc, #408]	; (8005590 <HAL_GPIO_Init+0x324>)
 80053f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053fa:	4a65      	ldr	r2, [pc, #404]	; (8005590 <HAL_GPIO_Init+0x324>)
 80053fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005400:	6453      	str	r3, [r2, #68]	; 0x44
 8005402:	4b63      	ldr	r3, [pc, #396]	; (8005590 <HAL_GPIO_Init+0x324>)
 8005404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005406:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800540a:	60fb      	str	r3, [r7, #12]
 800540c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800540e:	4a61      	ldr	r2, [pc, #388]	; (8005594 <HAL_GPIO_Init+0x328>)
 8005410:	69fb      	ldr	r3, [r7, #28]
 8005412:	089b      	lsrs	r3, r3, #2
 8005414:	3302      	adds	r3, #2
 8005416:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800541a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800541c:	69fb      	ldr	r3, [r7, #28]
 800541e:	f003 0303 	and.w	r3, r3, #3
 8005422:	009b      	lsls	r3, r3, #2
 8005424:	220f      	movs	r2, #15
 8005426:	fa02 f303 	lsl.w	r3, r2, r3
 800542a:	43db      	mvns	r3, r3
 800542c:	69ba      	ldr	r2, [r7, #24]
 800542e:	4013      	ands	r3, r2
 8005430:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	4a58      	ldr	r2, [pc, #352]	; (8005598 <HAL_GPIO_Init+0x32c>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d037      	beq.n	80054aa <HAL_GPIO_Init+0x23e>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	4a57      	ldr	r2, [pc, #348]	; (800559c <HAL_GPIO_Init+0x330>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d031      	beq.n	80054a6 <HAL_GPIO_Init+0x23a>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	4a56      	ldr	r2, [pc, #344]	; (80055a0 <HAL_GPIO_Init+0x334>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d02b      	beq.n	80054a2 <HAL_GPIO_Init+0x236>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	4a55      	ldr	r2, [pc, #340]	; (80055a4 <HAL_GPIO_Init+0x338>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d025      	beq.n	800549e <HAL_GPIO_Init+0x232>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	4a54      	ldr	r2, [pc, #336]	; (80055a8 <HAL_GPIO_Init+0x33c>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d01f      	beq.n	800549a <HAL_GPIO_Init+0x22e>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	4a53      	ldr	r2, [pc, #332]	; (80055ac <HAL_GPIO_Init+0x340>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d019      	beq.n	8005496 <HAL_GPIO_Init+0x22a>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	4a52      	ldr	r2, [pc, #328]	; (80055b0 <HAL_GPIO_Init+0x344>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d013      	beq.n	8005492 <HAL_GPIO_Init+0x226>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	4a51      	ldr	r2, [pc, #324]	; (80055b4 <HAL_GPIO_Init+0x348>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d00d      	beq.n	800548e <HAL_GPIO_Init+0x222>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	4a50      	ldr	r2, [pc, #320]	; (80055b8 <HAL_GPIO_Init+0x34c>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d007      	beq.n	800548a <HAL_GPIO_Init+0x21e>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	4a4f      	ldr	r2, [pc, #316]	; (80055bc <HAL_GPIO_Init+0x350>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d101      	bne.n	8005486 <HAL_GPIO_Init+0x21a>
 8005482:	2309      	movs	r3, #9
 8005484:	e012      	b.n	80054ac <HAL_GPIO_Init+0x240>
 8005486:	230a      	movs	r3, #10
 8005488:	e010      	b.n	80054ac <HAL_GPIO_Init+0x240>
 800548a:	2308      	movs	r3, #8
 800548c:	e00e      	b.n	80054ac <HAL_GPIO_Init+0x240>
 800548e:	2307      	movs	r3, #7
 8005490:	e00c      	b.n	80054ac <HAL_GPIO_Init+0x240>
 8005492:	2306      	movs	r3, #6
 8005494:	e00a      	b.n	80054ac <HAL_GPIO_Init+0x240>
 8005496:	2305      	movs	r3, #5
 8005498:	e008      	b.n	80054ac <HAL_GPIO_Init+0x240>
 800549a:	2304      	movs	r3, #4
 800549c:	e006      	b.n	80054ac <HAL_GPIO_Init+0x240>
 800549e:	2303      	movs	r3, #3
 80054a0:	e004      	b.n	80054ac <HAL_GPIO_Init+0x240>
 80054a2:	2302      	movs	r3, #2
 80054a4:	e002      	b.n	80054ac <HAL_GPIO_Init+0x240>
 80054a6:	2301      	movs	r3, #1
 80054a8:	e000      	b.n	80054ac <HAL_GPIO_Init+0x240>
 80054aa:	2300      	movs	r3, #0
 80054ac:	69fa      	ldr	r2, [r7, #28]
 80054ae:	f002 0203 	and.w	r2, r2, #3
 80054b2:	0092      	lsls	r2, r2, #2
 80054b4:	4093      	lsls	r3, r2
 80054b6:	69ba      	ldr	r2, [r7, #24]
 80054b8:	4313      	orrs	r3, r2
 80054ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80054bc:	4935      	ldr	r1, [pc, #212]	; (8005594 <HAL_GPIO_Init+0x328>)
 80054be:	69fb      	ldr	r3, [r7, #28]
 80054c0:	089b      	lsrs	r3, r3, #2
 80054c2:	3302      	adds	r3, #2
 80054c4:	69ba      	ldr	r2, [r7, #24]
 80054c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80054ca:	4b3d      	ldr	r3, [pc, #244]	; (80055c0 <HAL_GPIO_Init+0x354>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	43db      	mvns	r3, r3
 80054d4:	69ba      	ldr	r2, [r7, #24]
 80054d6:	4013      	ands	r3, r2
 80054d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d003      	beq.n	80054ee <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80054e6:	69ba      	ldr	r2, [r7, #24]
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	4313      	orrs	r3, r2
 80054ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80054ee:	4a34      	ldr	r2, [pc, #208]	; (80055c0 <HAL_GPIO_Init+0x354>)
 80054f0:	69bb      	ldr	r3, [r7, #24]
 80054f2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80054f4:	4b32      	ldr	r3, [pc, #200]	; (80055c0 <HAL_GPIO_Init+0x354>)
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	43db      	mvns	r3, r3
 80054fe:	69ba      	ldr	r2, [r7, #24]
 8005500:	4013      	ands	r3, r2
 8005502:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	685b      	ldr	r3, [r3, #4]
 8005508:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800550c:	2b00      	cmp	r3, #0
 800550e:	d003      	beq.n	8005518 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005510:	69ba      	ldr	r2, [r7, #24]
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	4313      	orrs	r3, r2
 8005516:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005518:	4a29      	ldr	r2, [pc, #164]	; (80055c0 <HAL_GPIO_Init+0x354>)
 800551a:	69bb      	ldr	r3, [r7, #24]
 800551c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800551e:	4b28      	ldr	r3, [pc, #160]	; (80055c0 <HAL_GPIO_Init+0x354>)
 8005520:	689b      	ldr	r3, [r3, #8]
 8005522:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	43db      	mvns	r3, r3
 8005528:	69ba      	ldr	r2, [r7, #24]
 800552a:	4013      	ands	r3, r2
 800552c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	685b      	ldr	r3, [r3, #4]
 8005532:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005536:	2b00      	cmp	r3, #0
 8005538:	d003      	beq.n	8005542 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800553a:	69ba      	ldr	r2, [r7, #24]
 800553c:	693b      	ldr	r3, [r7, #16]
 800553e:	4313      	orrs	r3, r2
 8005540:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005542:	4a1f      	ldr	r2, [pc, #124]	; (80055c0 <HAL_GPIO_Init+0x354>)
 8005544:	69bb      	ldr	r3, [r7, #24]
 8005546:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005548:	4b1d      	ldr	r3, [pc, #116]	; (80055c0 <HAL_GPIO_Init+0x354>)
 800554a:	68db      	ldr	r3, [r3, #12]
 800554c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800554e:	693b      	ldr	r3, [r7, #16]
 8005550:	43db      	mvns	r3, r3
 8005552:	69ba      	ldr	r2, [r7, #24]
 8005554:	4013      	ands	r3, r2
 8005556:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	685b      	ldr	r3, [r3, #4]
 800555c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005560:	2b00      	cmp	r3, #0
 8005562:	d003      	beq.n	800556c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005564:	69ba      	ldr	r2, [r7, #24]
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	4313      	orrs	r3, r2
 800556a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800556c:	4a14      	ldr	r2, [pc, #80]	; (80055c0 <HAL_GPIO_Init+0x354>)
 800556e:	69bb      	ldr	r3, [r7, #24]
 8005570:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005572:	69fb      	ldr	r3, [r7, #28]
 8005574:	3301      	adds	r3, #1
 8005576:	61fb      	str	r3, [r7, #28]
 8005578:	69fb      	ldr	r3, [r7, #28]
 800557a:	2b0f      	cmp	r3, #15
 800557c:	f67f ae84 	bls.w	8005288 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005580:	bf00      	nop
 8005582:	bf00      	nop
 8005584:	3724      	adds	r7, #36	; 0x24
 8005586:	46bd      	mov	sp, r7
 8005588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558c:	4770      	bx	lr
 800558e:	bf00      	nop
 8005590:	40023800 	.word	0x40023800
 8005594:	40013800 	.word	0x40013800
 8005598:	40020000 	.word	0x40020000
 800559c:	40020400 	.word	0x40020400
 80055a0:	40020800 	.word	0x40020800
 80055a4:	40020c00 	.word	0x40020c00
 80055a8:	40021000 	.word	0x40021000
 80055ac:	40021400 	.word	0x40021400
 80055b0:	40021800 	.word	0x40021800
 80055b4:	40021c00 	.word	0x40021c00
 80055b8:	40022000 	.word	0x40022000
 80055bc:	40022400 	.word	0x40022400
 80055c0:	40013c00 	.word	0x40013c00

080055c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80055c4:	b480      	push	{r7}
 80055c6:	b083      	sub	sp, #12
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
 80055cc:	460b      	mov	r3, r1
 80055ce:	807b      	strh	r3, [r7, #2]
 80055d0:	4613      	mov	r3, r2
 80055d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80055d4:	787b      	ldrb	r3, [r7, #1]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d003      	beq.n	80055e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80055da:	887a      	ldrh	r2, [r7, #2]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80055e0:	e003      	b.n	80055ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80055e2:	887b      	ldrh	r3, [r7, #2]
 80055e4:	041a      	lsls	r2, r3, #16
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	619a      	str	r2, [r3, #24]
}
 80055ea:	bf00      	nop
 80055ec:	370c      	adds	r7, #12
 80055ee:	46bd      	mov	sp, r7
 80055f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f4:	4770      	bx	lr
	...

080055f8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b082      	sub	sp, #8
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	4603      	mov	r3, r0
 8005600:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005602:	4b08      	ldr	r3, [pc, #32]	; (8005624 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005604:	695a      	ldr	r2, [r3, #20]
 8005606:	88fb      	ldrh	r3, [r7, #6]
 8005608:	4013      	ands	r3, r2
 800560a:	2b00      	cmp	r3, #0
 800560c:	d006      	beq.n	800561c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800560e:	4a05      	ldr	r2, [pc, #20]	; (8005624 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005610:	88fb      	ldrh	r3, [r7, #6]
 8005612:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005614:	88fb      	ldrh	r3, [r7, #6]
 8005616:	4618      	mov	r0, r3
 8005618:	f000 f806 	bl	8005628 <HAL_GPIO_EXTI_Callback>
  }
}
 800561c:	bf00      	nop
 800561e:	3708      	adds	r7, #8
 8005620:	46bd      	mov	sp, r7
 8005622:	bd80      	pop	{r7, pc}
 8005624:	40013c00 	.word	0x40013c00

08005628 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005628:	b480      	push	{r7}
 800562a:	b083      	sub	sp, #12
 800562c:	af00      	add	r7, sp, #0
 800562e:	4603      	mov	r3, r0
 8005630:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8005632:	bf00      	nop
 8005634:	370c      	adds	r7, #12
 8005636:	46bd      	mov	sp, r7
 8005638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563c:	4770      	bx	lr
	...

08005640 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b086      	sub	sp, #24
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d101      	bne.n	8005652 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800564e:	2301      	movs	r3, #1
 8005650:	e25b      	b.n	8005b0a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f003 0301 	and.w	r3, r3, #1
 800565a:	2b00      	cmp	r3, #0
 800565c:	d075      	beq.n	800574a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800565e:	4ba3      	ldr	r3, [pc, #652]	; (80058ec <HAL_RCC_OscConfig+0x2ac>)
 8005660:	689b      	ldr	r3, [r3, #8]
 8005662:	f003 030c 	and.w	r3, r3, #12
 8005666:	2b04      	cmp	r3, #4
 8005668:	d00c      	beq.n	8005684 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800566a:	4ba0      	ldr	r3, [pc, #640]	; (80058ec <HAL_RCC_OscConfig+0x2ac>)
 800566c:	689b      	ldr	r3, [r3, #8]
 800566e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005672:	2b08      	cmp	r3, #8
 8005674:	d112      	bne.n	800569c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005676:	4b9d      	ldr	r3, [pc, #628]	; (80058ec <HAL_RCC_OscConfig+0x2ac>)
 8005678:	685b      	ldr	r3, [r3, #4]
 800567a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800567e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005682:	d10b      	bne.n	800569c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005684:	4b99      	ldr	r3, [pc, #612]	; (80058ec <HAL_RCC_OscConfig+0x2ac>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800568c:	2b00      	cmp	r3, #0
 800568e:	d05b      	beq.n	8005748 <HAL_RCC_OscConfig+0x108>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d157      	bne.n	8005748 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005698:	2301      	movs	r3, #1
 800569a:	e236      	b.n	8005b0a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056a4:	d106      	bne.n	80056b4 <HAL_RCC_OscConfig+0x74>
 80056a6:	4b91      	ldr	r3, [pc, #580]	; (80058ec <HAL_RCC_OscConfig+0x2ac>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a90      	ldr	r2, [pc, #576]	; (80058ec <HAL_RCC_OscConfig+0x2ac>)
 80056ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056b0:	6013      	str	r3, [r2, #0]
 80056b2:	e01d      	b.n	80056f0 <HAL_RCC_OscConfig+0xb0>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	685b      	ldr	r3, [r3, #4]
 80056b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80056bc:	d10c      	bne.n	80056d8 <HAL_RCC_OscConfig+0x98>
 80056be:	4b8b      	ldr	r3, [pc, #556]	; (80058ec <HAL_RCC_OscConfig+0x2ac>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4a8a      	ldr	r2, [pc, #552]	; (80058ec <HAL_RCC_OscConfig+0x2ac>)
 80056c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80056c8:	6013      	str	r3, [r2, #0]
 80056ca:	4b88      	ldr	r3, [pc, #544]	; (80058ec <HAL_RCC_OscConfig+0x2ac>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	4a87      	ldr	r2, [pc, #540]	; (80058ec <HAL_RCC_OscConfig+0x2ac>)
 80056d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056d4:	6013      	str	r3, [r2, #0]
 80056d6:	e00b      	b.n	80056f0 <HAL_RCC_OscConfig+0xb0>
 80056d8:	4b84      	ldr	r3, [pc, #528]	; (80058ec <HAL_RCC_OscConfig+0x2ac>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a83      	ldr	r2, [pc, #524]	; (80058ec <HAL_RCC_OscConfig+0x2ac>)
 80056de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056e2:	6013      	str	r3, [r2, #0]
 80056e4:	4b81      	ldr	r3, [pc, #516]	; (80058ec <HAL_RCC_OscConfig+0x2ac>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4a80      	ldr	r2, [pc, #512]	; (80058ec <HAL_RCC_OscConfig+0x2ac>)
 80056ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80056ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d013      	beq.n	8005720 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056f8:	f7fe fa8a 	bl	8003c10 <HAL_GetTick>
 80056fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056fe:	e008      	b.n	8005712 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005700:	f7fe fa86 	bl	8003c10 <HAL_GetTick>
 8005704:	4602      	mov	r2, r0
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	1ad3      	subs	r3, r2, r3
 800570a:	2b64      	cmp	r3, #100	; 0x64
 800570c:	d901      	bls.n	8005712 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800570e:	2303      	movs	r3, #3
 8005710:	e1fb      	b.n	8005b0a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005712:	4b76      	ldr	r3, [pc, #472]	; (80058ec <HAL_RCC_OscConfig+0x2ac>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800571a:	2b00      	cmp	r3, #0
 800571c:	d0f0      	beq.n	8005700 <HAL_RCC_OscConfig+0xc0>
 800571e:	e014      	b.n	800574a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005720:	f7fe fa76 	bl	8003c10 <HAL_GetTick>
 8005724:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005726:	e008      	b.n	800573a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005728:	f7fe fa72 	bl	8003c10 <HAL_GetTick>
 800572c:	4602      	mov	r2, r0
 800572e:	693b      	ldr	r3, [r7, #16]
 8005730:	1ad3      	subs	r3, r2, r3
 8005732:	2b64      	cmp	r3, #100	; 0x64
 8005734:	d901      	bls.n	800573a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005736:	2303      	movs	r3, #3
 8005738:	e1e7      	b.n	8005b0a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800573a:	4b6c      	ldr	r3, [pc, #432]	; (80058ec <HAL_RCC_OscConfig+0x2ac>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005742:	2b00      	cmp	r3, #0
 8005744:	d1f0      	bne.n	8005728 <HAL_RCC_OscConfig+0xe8>
 8005746:	e000      	b.n	800574a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005748:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f003 0302 	and.w	r3, r3, #2
 8005752:	2b00      	cmp	r3, #0
 8005754:	d063      	beq.n	800581e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005756:	4b65      	ldr	r3, [pc, #404]	; (80058ec <HAL_RCC_OscConfig+0x2ac>)
 8005758:	689b      	ldr	r3, [r3, #8]
 800575a:	f003 030c 	and.w	r3, r3, #12
 800575e:	2b00      	cmp	r3, #0
 8005760:	d00b      	beq.n	800577a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005762:	4b62      	ldr	r3, [pc, #392]	; (80058ec <HAL_RCC_OscConfig+0x2ac>)
 8005764:	689b      	ldr	r3, [r3, #8]
 8005766:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800576a:	2b08      	cmp	r3, #8
 800576c:	d11c      	bne.n	80057a8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800576e:	4b5f      	ldr	r3, [pc, #380]	; (80058ec <HAL_RCC_OscConfig+0x2ac>)
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005776:	2b00      	cmp	r3, #0
 8005778:	d116      	bne.n	80057a8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800577a:	4b5c      	ldr	r3, [pc, #368]	; (80058ec <HAL_RCC_OscConfig+0x2ac>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f003 0302 	and.w	r3, r3, #2
 8005782:	2b00      	cmp	r3, #0
 8005784:	d005      	beq.n	8005792 <HAL_RCC_OscConfig+0x152>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	68db      	ldr	r3, [r3, #12]
 800578a:	2b01      	cmp	r3, #1
 800578c:	d001      	beq.n	8005792 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800578e:	2301      	movs	r3, #1
 8005790:	e1bb      	b.n	8005b0a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005792:	4b56      	ldr	r3, [pc, #344]	; (80058ec <HAL_RCC_OscConfig+0x2ac>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	691b      	ldr	r3, [r3, #16]
 800579e:	00db      	lsls	r3, r3, #3
 80057a0:	4952      	ldr	r1, [pc, #328]	; (80058ec <HAL_RCC_OscConfig+0x2ac>)
 80057a2:	4313      	orrs	r3, r2
 80057a4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80057a6:	e03a      	b.n	800581e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	68db      	ldr	r3, [r3, #12]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d020      	beq.n	80057f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80057b0:	4b4f      	ldr	r3, [pc, #316]	; (80058f0 <HAL_RCC_OscConfig+0x2b0>)
 80057b2:	2201      	movs	r2, #1
 80057b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057b6:	f7fe fa2b 	bl	8003c10 <HAL_GetTick>
 80057ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057bc:	e008      	b.n	80057d0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80057be:	f7fe fa27 	bl	8003c10 <HAL_GetTick>
 80057c2:	4602      	mov	r2, r0
 80057c4:	693b      	ldr	r3, [r7, #16]
 80057c6:	1ad3      	subs	r3, r2, r3
 80057c8:	2b02      	cmp	r3, #2
 80057ca:	d901      	bls.n	80057d0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80057cc:	2303      	movs	r3, #3
 80057ce:	e19c      	b.n	8005b0a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057d0:	4b46      	ldr	r3, [pc, #280]	; (80058ec <HAL_RCC_OscConfig+0x2ac>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f003 0302 	and.w	r3, r3, #2
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d0f0      	beq.n	80057be <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057dc:	4b43      	ldr	r3, [pc, #268]	; (80058ec <HAL_RCC_OscConfig+0x2ac>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	691b      	ldr	r3, [r3, #16]
 80057e8:	00db      	lsls	r3, r3, #3
 80057ea:	4940      	ldr	r1, [pc, #256]	; (80058ec <HAL_RCC_OscConfig+0x2ac>)
 80057ec:	4313      	orrs	r3, r2
 80057ee:	600b      	str	r3, [r1, #0]
 80057f0:	e015      	b.n	800581e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80057f2:	4b3f      	ldr	r3, [pc, #252]	; (80058f0 <HAL_RCC_OscConfig+0x2b0>)
 80057f4:	2200      	movs	r2, #0
 80057f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057f8:	f7fe fa0a 	bl	8003c10 <HAL_GetTick>
 80057fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80057fe:	e008      	b.n	8005812 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005800:	f7fe fa06 	bl	8003c10 <HAL_GetTick>
 8005804:	4602      	mov	r2, r0
 8005806:	693b      	ldr	r3, [r7, #16]
 8005808:	1ad3      	subs	r3, r2, r3
 800580a:	2b02      	cmp	r3, #2
 800580c:	d901      	bls.n	8005812 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800580e:	2303      	movs	r3, #3
 8005810:	e17b      	b.n	8005b0a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005812:	4b36      	ldr	r3, [pc, #216]	; (80058ec <HAL_RCC_OscConfig+0x2ac>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f003 0302 	and.w	r3, r3, #2
 800581a:	2b00      	cmp	r3, #0
 800581c:	d1f0      	bne.n	8005800 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f003 0308 	and.w	r3, r3, #8
 8005826:	2b00      	cmp	r3, #0
 8005828:	d030      	beq.n	800588c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	695b      	ldr	r3, [r3, #20]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d016      	beq.n	8005860 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005832:	4b30      	ldr	r3, [pc, #192]	; (80058f4 <HAL_RCC_OscConfig+0x2b4>)
 8005834:	2201      	movs	r2, #1
 8005836:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005838:	f7fe f9ea 	bl	8003c10 <HAL_GetTick>
 800583c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800583e:	e008      	b.n	8005852 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005840:	f7fe f9e6 	bl	8003c10 <HAL_GetTick>
 8005844:	4602      	mov	r2, r0
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	1ad3      	subs	r3, r2, r3
 800584a:	2b02      	cmp	r3, #2
 800584c:	d901      	bls.n	8005852 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800584e:	2303      	movs	r3, #3
 8005850:	e15b      	b.n	8005b0a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005852:	4b26      	ldr	r3, [pc, #152]	; (80058ec <HAL_RCC_OscConfig+0x2ac>)
 8005854:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005856:	f003 0302 	and.w	r3, r3, #2
 800585a:	2b00      	cmp	r3, #0
 800585c:	d0f0      	beq.n	8005840 <HAL_RCC_OscConfig+0x200>
 800585e:	e015      	b.n	800588c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005860:	4b24      	ldr	r3, [pc, #144]	; (80058f4 <HAL_RCC_OscConfig+0x2b4>)
 8005862:	2200      	movs	r2, #0
 8005864:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005866:	f7fe f9d3 	bl	8003c10 <HAL_GetTick>
 800586a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800586c:	e008      	b.n	8005880 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800586e:	f7fe f9cf 	bl	8003c10 <HAL_GetTick>
 8005872:	4602      	mov	r2, r0
 8005874:	693b      	ldr	r3, [r7, #16]
 8005876:	1ad3      	subs	r3, r2, r3
 8005878:	2b02      	cmp	r3, #2
 800587a:	d901      	bls.n	8005880 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800587c:	2303      	movs	r3, #3
 800587e:	e144      	b.n	8005b0a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005880:	4b1a      	ldr	r3, [pc, #104]	; (80058ec <HAL_RCC_OscConfig+0x2ac>)
 8005882:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005884:	f003 0302 	and.w	r3, r3, #2
 8005888:	2b00      	cmp	r3, #0
 800588a:	d1f0      	bne.n	800586e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f003 0304 	and.w	r3, r3, #4
 8005894:	2b00      	cmp	r3, #0
 8005896:	f000 80a0 	beq.w	80059da <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800589a:	2300      	movs	r3, #0
 800589c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800589e:	4b13      	ldr	r3, [pc, #76]	; (80058ec <HAL_RCC_OscConfig+0x2ac>)
 80058a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d10f      	bne.n	80058ca <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80058aa:	2300      	movs	r3, #0
 80058ac:	60bb      	str	r3, [r7, #8]
 80058ae:	4b0f      	ldr	r3, [pc, #60]	; (80058ec <HAL_RCC_OscConfig+0x2ac>)
 80058b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058b2:	4a0e      	ldr	r2, [pc, #56]	; (80058ec <HAL_RCC_OscConfig+0x2ac>)
 80058b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058b8:	6413      	str	r3, [r2, #64]	; 0x40
 80058ba:	4b0c      	ldr	r3, [pc, #48]	; (80058ec <HAL_RCC_OscConfig+0x2ac>)
 80058bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058c2:	60bb      	str	r3, [r7, #8]
 80058c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80058c6:	2301      	movs	r3, #1
 80058c8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058ca:	4b0b      	ldr	r3, [pc, #44]	; (80058f8 <HAL_RCC_OscConfig+0x2b8>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d121      	bne.n	800591a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80058d6:	4b08      	ldr	r3, [pc, #32]	; (80058f8 <HAL_RCC_OscConfig+0x2b8>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a07      	ldr	r2, [pc, #28]	; (80058f8 <HAL_RCC_OscConfig+0x2b8>)
 80058dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80058e2:	f7fe f995 	bl	8003c10 <HAL_GetTick>
 80058e6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058e8:	e011      	b.n	800590e <HAL_RCC_OscConfig+0x2ce>
 80058ea:	bf00      	nop
 80058ec:	40023800 	.word	0x40023800
 80058f0:	42470000 	.word	0x42470000
 80058f4:	42470e80 	.word	0x42470e80
 80058f8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058fc:	f7fe f988 	bl	8003c10 <HAL_GetTick>
 8005900:	4602      	mov	r2, r0
 8005902:	693b      	ldr	r3, [r7, #16]
 8005904:	1ad3      	subs	r3, r2, r3
 8005906:	2b02      	cmp	r3, #2
 8005908:	d901      	bls.n	800590e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800590a:	2303      	movs	r3, #3
 800590c:	e0fd      	b.n	8005b0a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800590e:	4b81      	ldr	r3, [pc, #516]	; (8005b14 <HAL_RCC_OscConfig+0x4d4>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005916:	2b00      	cmp	r3, #0
 8005918:	d0f0      	beq.n	80058fc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	689b      	ldr	r3, [r3, #8]
 800591e:	2b01      	cmp	r3, #1
 8005920:	d106      	bne.n	8005930 <HAL_RCC_OscConfig+0x2f0>
 8005922:	4b7d      	ldr	r3, [pc, #500]	; (8005b18 <HAL_RCC_OscConfig+0x4d8>)
 8005924:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005926:	4a7c      	ldr	r2, [pc, #496]	; (8005b18 <HAL_RCC_OscConfig+0x4d8>)
 8005928:	f043 0301 	orr.w	r3, r3, #1
 800592c:	6713      	str	r3, [r2, #112]	; 0x70
 800592e:	e01c      	b.n	800596a <HAL_RCC_OscConfig+0x32a>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	689b      	ldr	r3, [r3, #8]
 8005934:	2b05      	cmp	r3, #5
 8005936:	d10c      	bne.n	8005952 <HAL_RCC_OscConfig+0x312>
 8005938:	4b77      	ldr	r3, [pc, #476]	; (8005b18 <HAL_RCC_OscConfig+0x4d8>)
 800593a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800593c:	4a76      	ldr	r2, [pc, #472]	; (8005b18 <HAL_RCC_OscConfig+0x4d8>)
 800593e:	f043 0304 	orr.w	r3, r3, #4
 8005942:	6713      	str	r3, [r2, #112]	; 0x70
 8005944:	4b74      	ldr	r3, [pc, #464]	; (8005b18 <HAL_RCC_OscConfig+0x4d8>)
 8005946:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005948:	4a73      	ldr	r2, [pc, #460]	; (8005b18 <HAL_RCC_OscConfig+0x4d8>)
 800594a:	f043 0301 	orr.w	r3, r3, #1
 800594e:	6713      	str	r3, [r2, #112]	; 0x70
 8005950:	e00b      	b.n	800596a <HAL_RCC_OscConfig+0x32a>
 8005952:	4b71      	ldr	r3, [pc, #452]	; (8005b18 <HAL_RCC_OscConfig+0x4d8>)
 8005954:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005956:	4a70      	ldr	r2, [pc, #448]	; (8005b18 <HAL_RCC_OscConfig+0x4d8>)
 8005958:	f023 0301 	bic.w	r3, r3, #1
 800595c:	6713      	str	r3, [r2, #112]	; 0x70
 800595e:	4b6e      	ldr	r3, [pc, #440]	; (8005b18 <HAL_RCC_OscConfig+0x4d8>)
 8005960:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005962:	4a6d      	ldr	r2, [pc, #436]	; (8005b18 <HAL_RCC_OscConfig+0x4d8>)
 8005964:	f023 0304 	bic.w	r3, r3, #4
 8005968:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	689b      	ldr	r3, [r3, #8]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d015      	beq.n	800599e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005972:	f7fe f94d 	bl	8003c10 <HAL_GetTick>
 8005976:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005978:	e00a      	b.n	8005990 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800597a:	f7fe f949 	bl	8003c10 <HAL_GetTick>
 800597e:	4602      	mov	r2, r0
 8005980:	693b      	ldr	r3, [r7, #16]
 8005982:	1ad3      	subs	r3, r2, r3
 8005984:	f241 3288 	movw	r2, #5000	; 0x1388
 8005988:	4293      	cmp	r3, r2
 800598a:	d901      	bls.n	8005990 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800598c:	2303      	movs	r3, #3
 800598e:	e0bc      	b.n	8005b0a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005990:	4b61      	ldr	r3, [pc, #388]	; (8005b18 <HAL_RCC_OscConfig+0x4d8>)
 8005992:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005994:	f003 0302 	and.w	r3, r3, #2
 8005998:	2b00      	cmp	r3, #0
 800599a:	d0ee      	beq.n	800597a <HAL_RCC_OscConfig+0x33a>
 800599c:	e014      	b.n	80059c8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800599e:	f7fe f937 	bl	8003c10 <HAL_GetTick>
 80059a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80059a4:	e00a      	b.n	80059bc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80059a6:	f7fe f933 	bl	8003c10 <HAL_GetTick>
 80059aa:	4602      	mov	r2, r0
 80059ac:	693b      	ldr	r3, [r7, #16]
 80059ae:	1ad3      	subs	r3, r2, r3
 80059b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d901      	bls.n	80059bc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80059b8:	2303      	movs	r3, #3
 80059ba:	e0a6      	b.n	8005b0a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80059bc:	4b56      	ldr	r3, [pc, #344]	; (8005b18 <HAL_RCC_OscConfig+0x4d8>)
 80059be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059c0:	f003 0302 	and.w	r3, r3, #2
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d1ee      	bne.n	80059a6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80059c8:	7dfb      	ldrb	r3, [r7, #23]
 80059ca:	2b01      	cmp	r3, #1
 80059cc:	d105      	bne.n	80059da <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80059ce:	4b52      	ldr	r3, [pc, #328]	; (8005b18 <HAL_RCC_OscConfig+0x4d8>)
 80059d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059d2:	4a51      	ldr	r2, [pc, #324]	; (8005b18 <HAL_RCC_OscConfig+0x4d8>)
 80059d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80059d8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	699b      	ldr	r3, [r3, #24]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	f000 8092 	beq.w	8005b08 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80059e4:	4b4c      	ldr	r3, [pc, #304]	; (8005b18 <HAL_RCC_OscConfig+0x4d8>)
 80059e6:	689b      	ldr	r3, [r3, #8]
 80059e8:	f003 030c 	and.w	r3, r3, #12
 80059ec:	2b08      	cmp	r3, #8
 80059ee:	d05c      	beq.n	8005aaa <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	699b      	ldr	r3, [r3, #24]
 80059f4:	2b02      	cmp	r3, #2
 80059f6:	d141      	bne.n	8005a7c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059f8:	4b48      	ldr	r3, [pc, #288]	; (8005b1c <HAL_RCC_OscConfig+0x4dc>)
 80059fa:	2200      	movs	r2, #0
 80059fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059fe:	f7fe f907 	bl	8003c10 <HAL_GetTick>
 8005a02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a04:	e008      	b.n	8005a18 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a06:	f7fe f903 	bl	8003c10 <HAL_GetTick>
 8005a0a:	4602      	mov	r2, r0
 8005a0c:	693b      	ldr	r3, [r7, #16]
 8005a0e:	1ad3      	subs	r3, r2, r3
 8005a10:	2b02      	cmp	r3, #2
 8005a12:	d901      	bls.n	8005a18 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005a14:	2303      	movs	r3, #3
 8005a16:	e078      	b.n	8005b0a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a18:	4b3f      	ldr	r3, [pc, #252]	; (8005b18 <HAL_RCC_OscConfig+0x4d8>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d1f0      	bne.n	8005a06 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	69da      	ldr	r2, [r3, #28]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6a1b      	ldr	r3, [r3, #32]
 8005a2c:	431a      	orrs	r2, r3
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a32:	019b      	lsls	r3, r3, #6
 8005a34:	431a      	orrs	r2, r3
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a3a:	085b      	lsrs	r3, r3, #1
 8005a3c:	3b01      	subs	r3, #1
 8005a3e:	041b      	lsls	r3, r3, #16
 8005a40:	431a      	orrs	r2, r3
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a46:	061b      	lsls	r3, r3, #24
 8005a48:	4933      	ldr	r1, [pc, #204]	; (8005b18 <HAL_RCC_OscConfig+0x4d8>)
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005a4e:	4b33      	ldr	r3, [pc, #204]	; (8005b1c <HAL_RCC_OscConfig+0x4dc>)
 8005a50:	2201      	movs	r2, #1
 8005a52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a54:	f7fe f8dc 	bl	8003c10 <HAL_GetTick>
 8005a58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a5a:	e008      	b.n	8005a6e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a5c:	f7fe f8d8 	bl	8003c10 <HAL_GetTick>
 8005a60:	4602      	mov	r2, r0
 8005a62:	693b      	ldr	r3, [r7, #16]
 8005a64:	1ad3      	subs	r3, r2, r3
 8005a66:	2b02      	cmp	r3, #2
 8005a68:	d901      	bls.n	8005a6e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005a6a:	2303      	movs	r3, #3
 8005a6c:	e04d      	b.n	8005b0a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a6e:	4b2a      	ldr	r3, [pc, #168]	; (8005b18 <HAL_RCC_OscConfig+0x4d8>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d0f0      	beq.n	8005a5c <HAL_RCC_OscConfig+0x41c>
 8005a7a:	e045      	b.n	8005b08 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a7c:	4b27      	ldr	r3, [pc, #156]	; (8005b1c <HAL_RCC_OscConfig+0x4dc>)
 8005a7e:	2200      	movs	r2, #0
 8005a80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a82:	f7fe f8c5 	bl	8003c10 <HAL_GetTick>
 8005a86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a88:	e008      	b.n	8005a9c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a8a:	f7fe f8c1 	bl	8003c10 <HAL_GetTick>
 8005a8e:	4602      	mov	r2, r0
 8005a90:	693b      	ldr	r3, [r7, #16]
 8005a92:	1ad3      	subs	r3, r2, r3
 8005a94:	2b02      	cmp	r3, #2
 8005a96:	d901      	bls.n	8005a9c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005a98:	2303      	movs	r3, #3
 8005a9a:	e036      	b.n	8005b0a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a9c:	4b1e      	ldr	r3, [pc, #120]	; (8005b18 <HAL_RCC_OscConfig+0x4d8>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d1f0      	bne.n	8005a8a <HAL_RCC_OscConfig+0x44a>
 8005aa8:	e02e      	b.n	8005b08 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	699b      	ldr	r3, [r3, #24]
 8005aae:	2b01      	cmp	r3, #1
 8005ab0:	d101      	bne.n	8005ab6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	e029      	b.n	8005b0a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005ab6:	4b18      	ldr	r3, [pc, #96]	; (8005b18 <HAL_RCC_OscConfig+0x4d8>)
 8005ab8:	685b      	ldr	r3, [r3, #4]
 8005aba:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	69db      	ldr	r3, [r3, #28]
 8005ac6:	429a      	cmp	r2, r3
 8005ac8:	d11c      	bne.n	8005b04 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ad4:	429a      	cmp	r2, r3
 8005ad6:	d115      	bne.n	8005b04 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005ad8:	68fa      	ldr	r2, [r7, #12]
 8005ada:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005ade:	4013      	ands	r3, r2
 8005ae0:	687a      	ldr	r2, [r7, #4]
 8005ae2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d10d      	bne.n	8005b04 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005af2:	429a      	cmp	r2, r3
 8005af4:	d106      	bne.n	8005b04 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005b00:	429a      	cmp	r2, r3
 8005b02:	d001      	beq.n	8005b08 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8005b04:	2301      	movs	r3, #1
 8005b06:	e000      	b.n	8005b0a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8005b08:	2300      	movs	r3, #0
}
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	3718      	adds	r7, #24
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bd80      	pop	{r7, pc}
 8005b12:	bf00      	nop
 8005b14:	40007000 	.word	0x40007000
 8005b18:	40023800 	.word	0x40023800
 8005b1c:	42470060 	.word	0x42470060

08005b20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b084      	sub	sp, #16
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
 8005b28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d101      	bne.n	8005b34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005b30:	2301      	movs	r3, #1
 8005b32:	e0cc      	b.n	8005cce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005b34:	4b68      	ldr	r3, [pc, #416]	; (8005cd8 <HAL_RCC_ClockConfig+0x1b8>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f003 030f 	and.w	r3, r3, #15
 8005b3c:	683a      	ldr	r2, [r7, #0]
 8005b3e:	429a      	cmp	r2, r3
 8005b40:	d90c      	bls.n	8005b5c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b42:	4b65      	ldr	r3, [pc, #404]	; (8005cd8 <HAL_RCC_ClockConfig+0x1b8>)
 8005b44:	683a      	ldr	r2, [r7, #0]
 8005b46:	b2d2      	uxtb	r2, r2
 8005b48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b4a:	4b63      	ldr	r3, [pc, #396]	; (8005cd8 <HAL_RCC_ClockConfig+0x1b8>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f003 030f 	and.w	r3, r3, #15
 8005b52:	683a      	ldr	r2, [r7, #0]
 8005b54:	429a      	cmp	r2, r3
 8005b56:	d001      	beq.n	8005b5c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005b58:	2301      	movs	r3, #1
 8005b5a:	e0b8      	b.n	8005cce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f003 0302 	and.w	r3, r3, #2
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d020      	beq.n	8005baa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f003 0304 	and.w	r3, r3, #4
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d005      	beq.n	8005b80 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005b74:	4b59      	ldr	r3, [pc, #356]	; (8005cdc <HAL_RCC_ClockConfig+0x1bc>)
 8005b76:	689b      	ldr	r3, [r3, #8]
 8005b78:	4a58      	ldr	r2, [pc, #352]	; (8005cdc <HAL_RCC_ClockConfig+0x1bc>)
 8005b7a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005b7e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f003 0308 	and.w	r3, r3, #8
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d005      	beq.n	8005b98 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005b8c:	4b53      	ldr	r3, [pc, #332]	; (8005cdc <HAL_RCC_ClockConfig+0x1bc>)
 8005b8e:	689b      	ldr	r3, [r3, #8]
 8005b90:	4a52      	ldr	r2, [pc, #328]	; (8005cdc <HAL_RCC_ClockConfig+0x1bc>)
 8005b92:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005b96:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b98:	4b50      	ldr	r3, [pc, #320]	; (8005cdc <HAL_RCC_ClockConfig+0x1bc>)
 8005b9a:	689b      	ldr	r3, [r3, #8]
 8005b9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	689b      	ldr	r3, [r3, #8]
 8005ba4:	494d      	ldr	r1, [pc, #308]	; (8005cdc <HAL_RCC_ClockConfig+0x1bc>)
 8005ba6:	4313      	orrs	r3, r2
 8005ba8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f003 0301 	and.w	r3, r3, #1
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d044      	beq.n	8005c40 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	685b      	ldr	r3, [r3, #4]
 8005bba:	2b01      	cmp	r3, #1
 8005bbc:	d107      	bne.n	8005bce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005bbe:	4b47      	ldr	r3, [pc, #284]	; (8005cdc <HAL_RCC_ClockConfig+0x1bc>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d119      	bne.n	8005bfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005bca:	2301      	movs	r3, #1
 8005bcc:	e07f      	b.n	8005cce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	2b02      	cmp	r3, #2
 8005bd4:	d003      	beq.n	8005bde <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005bda:	2b03      	cmp	r3, #3
 8005bdc:	d107      	bne.n	8005bee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005bde:	4b3f      	ldr	r3, [pc, #252]	; (8005cdc <HAL_RCC_ClockConfig+0x1bc>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d109      	bne.n	8005bfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005bea:	2301      	movs	r3, #1
 8005bec:	e06f      	b.n	8005cce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005bee:	4b3b      	ldr	r3, [pc, #236]	; (8005cdc <HAL_RCC_ClockConfig+0x1bc>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f003 0302 	and.w	r3, r3, #2
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d101      	bne.n	8005bfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	e067      	b.n	8005cce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005bfe:	4b37      	ldr	r3, [pc, #220]	; (8005cdc <HAL_RCC_ClockConfig+0x1bc>)
 8005c00:	689b      	ldr	r3, [r3, #8]
 8005c02:	f023 0203 	bic.w	r2, r3, #3
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	685b      	ldr	r3, [r3, #4]
 8005c0a:	4934      	ldr	r1, [pc, #208]	; (8005cdc <HAL_RCC_ClockConfig+0x1bc>)
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005c10:	f7fd fffe 	bl	8003c10 <HAL_GetTick>
 8005c14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c16:	e00a      	b.n	8005c2e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c18:	f7fd fffa 	bl	8003c10 <HAL_GetTick>
 8005c1c:	4602      	mov	r2, r0
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	1ad3      	subs	r3, r2, r3
 8005c22:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d901      	bls.n	8005c2e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005c2a:	2303      	movs	r3, #3
 8005c2c:	e04f      	b.n	8005cce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c2e:	4b2b      	ldr	r3, [pc, #172]	; (8005cdc <HAL_RCC_ClockConfig+0x1bc>)
 8005c30:	689b      	ldr	r3, [r3, #8]
 8005c32:	f003 020c 	and.w	r2, r3, #12
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	009b      	lsls	r3, r3, #2
 8005c3c:	429a      	cmp	r2, r3
 8005c3e:	d1eb      	bne.n	8005c18 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005c40:	4b25      	ldr	r3, [pc, #148]	; (8005cd8 <HAL_RCC_ClockConfig+0x1b8>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f003 030f 	and.w	r3, r3, #15
 8005c48:	683a      	ldr	r2, [r7, #0]
 8005c4a:	429a      	cmp	r2, r3
 8005c4c:	d20c      	bcs.n	8005c68 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c4e:	4b22      	ldr	r3, [pc, #136]	; (8005cd8 <HAL_RCC_ClockConfig+0x1b8>)
 8005c50:	683a      	ldr	r2, [r7, #0]
 8005c52:	b2d2      	uxtb	r2, r2
 8005c54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c56:	4b20      	ldr	r3, [pc, #128]	; (8005cd8 <HAL_RCC_ClockConfig+0x1b8>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f003 030f 	and.w	r3, r3, #15
 8005c5e:	683a      	ldr	r2, [r7, #0]
 8005c60:	429a      	cmp	r2, r3
 8005c62:	d001      	beq.n	8005c68 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005c64:	2301      	movs	r3, #1
 8005c66:	e032      	b.n	8005cce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f003 0304 	and.w	r3, r3, #4
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d008      	beq.n	8005c86 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005c74:	4b19      	ldr	r3, [pc, #100]	; (8005cdc <HAL_RCC_ClockConfig+0x1bc>)
 8005c76:	689b      	ldr	r3, [r3, #8]
 8005c78:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	68db      	ldr	r3, [r3, #12]
 8005c80:	4916      	ldr	r1, [pc, #88]	; (8005cdc <HAL_RCC_ClockConfig+0x1bc>)
 8005c82:	4313      	orrs	r3, r2
 8005c84:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f003 0308 	and.w	r3, r3, #8
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d009      	beq.n	8005ca6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005c92:	4b12      	ldr	r3, [pc, #72]	; (8005cdc <HAL_RCC_ClockConfig+0x1bc>)
 8005c94:	689b      	ldr	r3, [r3, #8]
 8005c96:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	691b      	ldr	r3, [r3, #16]
 8005c9e:	00db      	lsls	r3, r3, #3
 8005ca0:	490e      	ldr	r1, [pc, #56]	; (8005cdc <HAL_RCC_ClockConfig+0x1bc>)
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005ca6:	f000 f821 	bl	8005cec <HAL_RCC_GetSysClockFreq>
 8005caa:	4602      	mov	r2, r0
 8005cac:	4b0b      	ldr	r3, [pc, #44]	; (8005cdc <HAL_RCC_ClockConfig+0x1bc>)
 8005cae:	689b      	ldr	r3, [r3, #8]
 8005cb0:	091b      	lsrs	r3, r3, #4
 8005cb2:	f003 030f 	and.w	r3, r3, #15
 8005cb6:	490a      	ldr	r1, [pc, #40]	; (8005ce0 <HAL_RCC_ClockConfig+0x1c0>)
 8005cb8:	5ccb      	ldrb	r3, [r1, r3]
 8005cba:	fa22 f303 	lsr.w	r3, r2, r3
 8005cbe:	4a09      	ldr	r2, [pc, #36]	; (8005ce4 <HAL_RCC_ClockConfig+0x1c4>)
 8005cc0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005cc2:	4b09      	ldr	r3, [pc, #36]	; (8005ce8 <HAL_RCC_ClockConfig+0x1c8>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	f7fb feea 	bl	8001aa0 <HAL_InitTick>

  return HAL_OK;
 8005ccc:	2300      	movs	r3, #0
}
 8005cce:	4618      	mov	r0, r3
 8005cd0:	3710      	adds	r7, #16
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bd80      	pop	{r7, pc}
 8005cd6:	bf00      	nop
 8005cd8:	40023c00 	.word	0x40023c00
 8005cdc:	40023800 	.word	0x40023800
 8005ce0:	0800c818 	.word	0x0800c818
 8005ce4:	20000000 	.word	0x20000000
 8005ce8:	2000000c 	.word	0x2000000c

08005cec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005cec:	b5b0      	push	{r4, r5, r7, lr}
 8005cee:	b084      	sub	sp, #16
 8005cf0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005cf2:	2100      	movs	r1, #0
 8005cf4:	6079      	str	r1, [r7, #4]
 8005cf6:	2100      	movs	r1, #0
 8005cf8:	60f9      	str	r1, [r7, #12]
 8005cfa:	2100      	movs	r1, #0
 8005cfc:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005cfe:	2100      	movs	r1, #0
 8005d00:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005d02:	4952      	ldr	r1, [pc, #328]	; (8005e4c <HAL_RCC_GetSysClockFreq+0x160>)
 8005d04:	6889      	ldr	r1, [r1, #8]
 8005d06:	f001 010c 	and.w	r1, r1, #12
 8005d0a:	2908      	cmp	r1, #8
 8005d0c:	d00d      	beq.n	8005d2a <HAL_RCC_GetSysClockFreq+0x3e>
 8005d0e:	2908      	cmp	r1, #8
 8005d10:	f200 8094 	bhi.w	8005e3c <HAL_RCC_GetSysClockFreq+0x150>
 8005d14:	2900      	cmp	r1, #0
 8005d16:	d002      	beq.n	8005d1e <HAL_RCC_GetSysClockFreq+0x32>
 8005d18:	2904      	cmp	r1, #4
 8005d1a:	d003      	beq.n	8005d24 <HAL_RCC_GetSysClockFreq+0x38>
 8005d1c:	e08e      	b.n	8005e3c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005d1e:	4b4c      	ldr	r3, [pc, #304]	; (8005e50 <HAL_RCC_GetSysClockFreq+0x164>)
 8005d20:	60bb      	str	r3, [r7, #8]
       break;
 8005d22:	e08e      	b.n	8005e42 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005d24:	4b4b      	ldr	r3, [pc, #300]	; (8005e54 <HAL_RCC_GetSysClockFreq+0x168>)
 8005d26:	60bb      	str	r3, [r7, #8]
      break;
 8005d28:	e08b      	b.n	8005e42 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005d2a:	4948      	ldr	r1, [pc, #288]	; (8005e4c <HAL_RCC_GetSysClockFreq+0x160>)
 8005d2c:	6849      	ldr	r1, [r1, #4]
 8005d2e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8005d32:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005d34:	4945      	ldr	r1, [pc, #276]	; (8005e4c <HAL_RCC_GetSysClockFreq+0x160>)
 8005d36:	6849      	ldr	r1, [r1, #4]
 8005d38:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8005d3c:	2900      	cmp	r1, #0
 8005d3e:	d024      	beq.n	8005d8a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005d40:	4942      	ldr	r1, [pc, #264]	; (8005e4c <HAL_RCC_GetSysClockFreq+0x160>)
 8005d42:	6849      	ldr	r1, [r1, #4]
 8005d44:	0989      	lsrs	r1, r1, #6
 8005d46:	4608      	mov	r0, r1
 8005d48:	f04f 0100 	mov.w	r1, #0
 8005d4c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8005d50:	f04f 0500 	mov.w	r5, #0
 8005d54:	ea00 0204 	and.w	r2, r0, r4
 8005d58:	ea01 0305 	and.w	r3, r1, r5
 8005d5c:	493d      	ldr	r1, [pc, #244]	; (8005e54 <HAL_RCC_GetSysClockFreq+0x168>)
 8005d5e:	fb01 f003 	mul.w	r0, r1, r3
 8005d62:	2100      	movs	r1, #0
 8005d64:	fb01 f102 	mul.w	r1, r1, r2
 8005d68:	1844      	adds	r4, r0, r1
 8005d6a:	493a      	ldr	r1, [pc, #232]	; (8005e54 <HAL_RCC_GetSysClockFreq+0x168>)
 8005d6c:	fba2 0101 	umull	r0, r1, r2, r1
 8005d70:	1863      	adds	r3, r4, r1
 8005d72:	4619      	mov	r1, r3
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	461a      	mov	r2, r3
 8005d78:	f04f 0300 	mov.w	r3, #0
 8005d7c:	f7fa ff06 	bl	8000b8c <__aeabi_uldivmod>
 8005d80:	4602      	mov	r2, r0
 8005d82:	460b      	mov	r3, r1
 8005d84:	4613      	mov	r3, r2
 8005d86:	60fb      	str	r3, [r7, #12]
 8005d88:	e04a      	b.n	8005e20 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005d8a:	4b30      	ldr	r3, [pc, #192]	; (8005e4c <HAL_RCC_GetSysClockFreq+0x160>)
 8005d8c:	685b      	ldr	r3, [r3, #4]
 8005d8e:	099b      	lsrs	r3, r3, #6
 8005d90:	461a      	mov	r2, r3
 8005d92:	f04f 0300 	mov.w	r3, #0
 8005d96:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005d9a:	f04f 0100 	mov.w	r1, #0
 8005d9e:	ea02 0400 	and.w	r4, r2, r0
 8005da2:	ea03 0501 	and.w	r5, r3, r1
 8005da6:	4620      	mov	r0, r4
 8005da8:	4629      	mov	r1, r5
 8005daa:	f04f 0200 	mov.w	r2, #0
 8005dae:	f04f 0300 	mov.w	r3, #0
 8005db2:	014b      	lsls	r3, r1, #5
 8005db4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005db8:	0142      	lsls	r2, r0, #5
 8005dba:	4610      	mov	r0, r2
 8005dbc:	4619      	mov	r1, r3
 8005dbe:	1b00      	subs	r0, r0, r4
 8005dc0:	eb61 0105 	sbc.w	r1, r1, r5
 8005dc4:	f04f 0200 	mov.w	r2, #0
 8005dc8:	f04f 0300 	mov.w	r3, #0
 8005dcc:	018b      	lsls	r3, r1, #6
 8005dce:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005dd2:	0182      	lsls	r2, r0, #6
 8005dd4:	1a12      	subs	r2, r2, r0
 8005dd6:	eb63 0301 	sbc.w	r3, r3, r1
 8005dda:	f04f 0000 	mov.w	r0, #0
 8005dde:	f04f 0100 	mov.w	r1, #0
 8005de2:	00d9      	lsls	r1, r3, #3
 8005de4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005de8:	00d0      	lsls	r0, r2, #3
 8005dea:	4602      	mov	r2, r0
 8005dec:	460b      	mov	r3, r1
 8005dee:	1912      	adds	r2, r2, r4
 8005df0:	eb45 0303 	adc.w	r3, r5, r3
 8005df4:	f04f 0000 	mov.w	r0, #0
 8005df8:	f04f 0100 	mov.w	r1, #0
 8005dfc:	0299      	lsls	r1, r3, #10
 8005dfe:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005e02:	0290      	lsls	r0, r2, #10
 8005e04:	4602      	mov	r2, r0
 8005e06:	460b      	mov	r3, r1
 8005e08:	4610      	mov	r0, r2
 8005e0a:	4619      	mov	r1, r3
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	461a      	mov	r2, r3
 8005e10:	f04f 0300 	mov.w	r3, #0
 8005e14:	f7fa feba 	bl	8000b8c <__aeabi_uldivmod>
 8005e18:	4602      	mov	r2, r0
 8005e1a:	460b      	mov	r3, r1
 8005e1c:	4613      	mov	r3, r2
 8005e1e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005e20:	4b0a      	ldr	r3, [pc, #40]	; (8005e4c <HAL_RCC_GetSysClockFreq+0x160>)
 8005e22:	685b      	ldr	r3, [r3, #4]
 8005e24:	0c1b      	lsrs	r3, r3, #16
 8005e26:	f003 0303 	and.w	r3, r3, #3
 8005e2a:	3301      	adds	r3, #1
 8005e2c:	005b      	lsls	r3, r3, #1
 8005e2e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005e30:	68fa      	ldr	r2, [r7, #12]
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e38:	60bb      	str	r3, [r7, #8]
      break;
 8005e3a:	e002      	b.n	8005e42 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005e3c:	4b04      	ldr	r3, [pc, #16]	; (8005e50 <HAL_RCC_GetSysClockFreq+0x164>)
 8005e3e:	60bb      	str	r3, [r7, #8]
      break;
 8005e40:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005e42:	68bb      	ldr	r3, [r7, #8]
}
 8005e44:	4618      	mov	r0, r3
 8005e46:	3710      	adds	r7, #16
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	bdb0      	pop	{r4, r5, r7, pc}
 8005e4c:	40023800 	.word	0x40023800
 8005e50:	00f42400 	.word	0x00f42400
 8005e54:	00b71b00 	.word	0x00b71b00

08005e58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005e5c:	4b03      	ldr	r3, [pc, #12]	; (8005e6c <HAL_RCC_GetHCLKFreq+0x14>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
}
 8005e60:	4618      	mov	r0, r3
 8005e62:	46bd      	mov	sp, r7
 8005e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e68:	4770      	bx	lr
 8005e6a:	bf00      	nop
 8005e6c:	20000000 	.word	0x20000000

08005e70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005e74:	f7ff fff0 	bl	8005e58 <HAL_RCC_GetHCLKFreq>
 8005e78:	4602      	mov	r2, r0
 8005e7a:	4b05      	ldr	r3, [pc, #20]	; (8005e90 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005e7c:	689b      	ldr	r3, [r3, #8]
 8005e7e:	0a9b      	lsrs	r3, r3, #10
 8005e80:	f003 0307 	and.w	r3, r3, #7
 8005e84:	4903      	ldr	r1, [pc, #12]	; (8005e94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005e86:	5ccb      	ldrb	r3, [r1, r3]
 8005e88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	bd80      	pop	{r7, pc}
 8005e90:	40023800 	.word	0x40023800
 8005e94:	0800c828 	.word	0x0800c828

08005e98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005e9c:	f7ff ffdc 	bl	8005e58 <HAL_RCC_GetHCLKFreq>
 8005ea0:	4602      	mov	r2, r0
 8005ea2:	4b05      	ldr	r3, [pc, #20]	; (8005eb8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005ea4:	689b      	ldr	r3, [r3, #8]
 8005ea6:	0b5b      	lsrs	r3, r3, #13
 8005ea8:	f003 0307 	and.w	r3, r3, #7
 8005eac:	4903      	ldr	r1, [pc, #12]	; (8005ebc <HAL_RCC_GetPCLK2Freq+0x24>)
 8005eae:	5ccb      	ldrb	r3, [r1, r3]
 8005eb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	bd80      	pop	{r7, pc}
 8005eb8:	40023800 	.word	0x40023800
 8005ebc:	0800c828 	.word	0x0800c828

08005ec0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b083      	sub	sp, #12
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
 8005ec8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	220f      	movs	r2, #15
 8005ece:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005ed0:	4b12      	ldr	r3, [pc, #72]	; (8005f1c <HAL_RCC_GetClockConfig+0x5c>)
 8005ed2:	689b      	ldr	r3, [r3, #8]
 8005ed4:	f003 0203 	and.w	r2, r3, #3
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005edc:	4b0f      	ldr	r3, [pc, #60]	; (8005f1c <HAL_RCC_GetClockConfig+0x5c>)
 8005ede:	689b      	ldr	r3, [r3, #8]
 8005ee0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005ee8:	4b0c      	ldr	r3, [pc, #48]	; (8005f1c <HAL_RCC_GetClockConfig+0x5c>)
 8005eea:	689b      	ldr	r3, [r3, #8]
 8005eec:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005ef4:	4b09      	ldr	r3, [pc, #36]	; (8005f1c <HAL_RCC_GetClockConfig+0x5c>)
 8005ef6:	689b      	ldr	r3, [r3, #8]
 8005ef8:	08db      	lsrs	r3, r3, #3
 8005efa:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005f02:	4b07      	ldr	r3, [pc, #28]	; (8005f20 <HAL_RCC_GetClockConfig+0x60>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f003 020f 	and.w	r2, r3, #15
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	601a      	str	r2, [r3, #0]
}
 8005f0e:	bf00      	nop
 8005f10:	370c      	adds	r7, #12
 8005f12:	46bd      	mov	sp, r7
 8005f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f18:	4770      	bx	lr
 8005f1a:	bf00      	nop
 8005f1c:	40023800 	.word	0x40023800
 8005f20:	40023c00 	.word	0x40023c00

08005f24 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b082      	sub	sp, #8
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d101      	bne.n	8005f36 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005f32:	2301      	movs	r3, #1
 8005f34:	e056      	b.n	8005fe4 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005f42:	b2db      	uxtb	r3, r3
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d106      	bne.n	8005f56 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005f50:	6878      	ldr	r0, [r7, #4]
 8005f52:	f7fb fca3 	bl	800189c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2202      	movs	r2, #2
 8005f5a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	681a      	ldr	r2, [r3, #0]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f6c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	685a      	ldr	r2, [r3, #4]
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	689b      	ldr	r3, [r3, #8]
 8005f76:	431a      	orrs	r2, r3
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	68db      	ldr	r3, [r3, #12]
 8005f7c:	431a      	orrs	r2, r3
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	691b      	ldr	r3, [r3, #16]
 8005f82:	431a      	orrs	r2, r3
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	695b      	ldr	r3, [r3, #20]
 8005f88:	431a      	orrs	r2, r3
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	699b      	ldr	r3, [r3, #24]
 8005f8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f92:	431a      	orrs	r2, r3
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	69db      	ldr	r3, [r3, #28]
 8005f98:	431a      	orrs	r2, r3
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6a1b      	ldr	r3, [r3, #32]
 8005f9e:	ea42 0103 	orr.w	r1, r2, r3
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	430a      	orrs	r2, r1
 8005fac:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	699b      	ldr	r3, [r3, #24]
 8005fb2:	0c1b      	lsrs	r3, r3, #16
 8005fb4:	f003 0104 	and.w	r1, r3, #4
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	430a      	orrs	r2, r1
 8005fc2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	69da      	ldr	r2, [r3, #28]
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005fd2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2201      	movs	r2, #1
 8005fde:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005fe2:	2300      	movs	r3, #0
}
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	3708      	adds	r7, #8
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	bd80      	pop	{r7, pc}

08005fec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b082      	sub	sp, #8
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d101      	bne.n	8005ffe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	e01d      	b.n	800603a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006004:	b2db      	uxtb	r3, r3
 8006006:	2b00      	cmp	r3, #0
 8006008:	d106      	bne.n	8006018 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2200      	movs	r2, #0
 800600e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f7fb ff1c 	bl	8001e50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2202      	movs	r2, #2
 800601c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681a      	ldr	r2, [r3, #0]
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	3304      	adds	r3, #4
 8006028:	4619      	mov	r1, r3
 800602a:	4610      	mov	r0, r2
 800602c:	f000 fb50 	bl	80066d0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2201      	movs	r2, #1
 8006034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006038:	2300      	movs	r3, #0
}
 800603a:	4618      	mov	r0, r3
 800603c:	3708      	adds	r7, #8
 800603e:	46bd      	mov	sp, r7
 8006040:	bd80      	pop	{r7, pc}

08006042 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006042:	b480      	push	{r7}
 8006044:	b085      	sub	sp, #20
 8006046:	af00      	add	r7, sp, #0
 8006048:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	68da      	ldr	r2, [r3, #12]
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f042 0201 	orr.w	r2, r2, #1
 8006058:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	689b      	ldr	r3, [r3, #8]
 8006060:	f003 0307 	and.w	r3, r3, #7
 8006064:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	2b06      	cmp	r3, #6
 800606a:	d007      	beq.n	800607c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	681a      	ldr	r2, [r3, #0]
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f042 0201 	orr.w	r2, r2, #1
 800607a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800607c:	2300      	movs	r3, #0
}
 800607e:	4618      	mov	r0, r3
 8006080:	3714      	adds	r7, #20
 8006082:	46bd      	mov	sp, r7
 8006084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006088:	4770      	bx	lr

0800608a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800608a:	b580      	push	{r7, lr}
 800608c:	b082      	sub	sp, #8
 800608e:	af00      	add	r7, sp, #0
 8006090:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d101      	bne.n	800609c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006098:	2301      	movs	r3, #1
 800609a:	e01d      	b.n	80060d8 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060a2:	b2db      	uxtb	r3, r3
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d106      	bne.n	80060b6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2200      	movs	r2, #0
 80060ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80060b0:	6878      	ldr	r0, [r7, #4]
 80060b2:	f7fb feab 	bl	8001e0c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2202      	movs	r2, #2
 80060ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681a      	ldr	r2, [r3, #0]
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	3304      	adds	r3, #4
 80060c6:	4619      	mov	r1, r3
 80060c8:	4610      	mov	r0, r2
 80060ca:	f000 fb01 	bl	80066d0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2201      	movs	r2, #1
 80060d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80060d6:	2300      	movs	r3, #0
}
 80060d8:	4618      	mov	r0, r3
 80060da:	3708      	adds	r7, #8
 80060dc:	46bd      	mov	sp, r7
 80060de:	bd80      	pop	{r7, pc}

080060e0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b084      	sub	sp, #16
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
 80060e8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	2201      	movs	r2, #1
 80060f0:	6839      	ldr	r1, [r7, #0]
 80060f2:	4618      	mov	r0, r3
 80060f4:	f000 fdd6 	bl	8006ca4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4a15      	ldr	r2, [pc, #84]	; (8006154 <HAL_TIM_PWM_Start+0x74>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d004      	beq.n	800610c <HAL_TIM_PWM_Start+0x2c>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4a14      	ldr	r2, [pc, #80]	; (8006158 <HAL_TIM_PWM_Start+0x78>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d101      	bne.n	8006110 <HAL_TIM_PWM_Start+0x30>
 800610c:	2301      	movs	r3, #1
 800610e:	e000      	b.n	8006112 <HAL_TIM_PWM_Start+0x32>
 8006110:	2300      	movs	r3, #0
 8006112:	2b00      	cmp	r3, #0
 8006114:	d007      	beq.n	8006126 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006124:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	689b      	ldr	r3, [r3, #8]
 800612c:	f003 0307 	and.w	r3, r3, #7
 8006130:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	2b06      	cmp	r3, #6
 8006136:	d007      	beq.n	8006148 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	681a      	ldr	r2, [r3, #0]
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f042 0201 	orr.w	r2, r2, #1
 8006146:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006148:	2300      	movs	r3, #0
}
 800614a:	4618      	mov	r0, r3
 800614c:	3710      	adds	r7, #16
 800614e:	46bd      	mov	sp, r7
 8006150:	bd80      	pop	{r7, pc}
 8006152:	bf00      	nop
 8006154:	40010000 	.word	0x40010000
 8006158:	40010400 	.word	0x40010400

0800615c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b082      	sub	sp, #8
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	691b      	ldr	r3, [r3, #16]
 800616a:	f003 0302 	and.w	r3, r3, #2
 800616e:	2b02      	cmp	r3, #2
 8006170:	d122      	bne.n	80061b8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	68db      	ldr	r3, [r3, #12]
 8006178:	f003 0302 	and.w	r3, r3, #2
 800617c:	2b02      	cmp	r3, #2
 800617e:	d11b      	bne.n	80061b8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f06f 0202 	mvn.w	r2, #2
 8006188:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2201      	movs	r2, #1
 800618e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	699b      	ldr	r3, [r3, #24]
 8006196:	f003 0303 	and.w	r3, r3, #3
 800619a:	2b00      	cmp	r3, #0
 800619c:	d003      	beq.n	80061a6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	f000 fa78 	bl	8006694 <HAL_TIM_IC_CaptureCallback>
 80061a4:	e005      	b.n	80061b2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80061a6:	6878      	ldr	r0, [r7, #4]
 80061a8:	f000 fa6a 	bl	8006680 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061ac:	6878      	ldr	r0, [r7, #4]
 80061ae:	f000 fa7b 	bl	80066a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2200      	movs	r2, #0
 80061b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	691b      	ldr	r3, [r3, #16]
 80061be:	f003 0304 	and.w	r3, r3, #4
 80061c2:	2b04      	cmp	r3, #4
 80061c4:	d122      	bne.n	800620c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	68db      	ldr	r3, [r3, #12]
 80061cc:	f003 0304 	and.w	r3, r3, #4
 80061d0:	2b04      	cmp	r3, #4
 80061d2:	d11b      	bne.n	800620c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f06f 0204 	mvn.w	r2, #4
 80061dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2202      	movs	r2, #2
 80061e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	699b      	ldr	r3, [r3, #24]
 80061ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d003      	beq.n	80061fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061f2:	6878      	ldr	r0, [r7, #4]
 80061f4:	f000 fa4e 	bl	8006694 <HAL_TIM_IC_CaptureCallback>
 80061f8:	e005      	b.n	8006206 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061fa:	6878      	ldr	r0, [r7, #4]
 80061fc:	f000 fa40 	bl	8006680 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006200:	6878      	ldr	r0, [r7, #4]
 8006202:	f000 fa51 	bl	80066a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2200      	movs	r2, #0
 800620a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	691b      	ldr	r3, [r3, #16]
 8006212:	f003 0308 	and.w	r3, r3, #8
 8006216:	2b08      	cmp	r3, #8
 8006218:	d122      	bne.n	8006260 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	68db      	ldr	r3, [r3, #12]
 8006220:	f003 0308 	and.w	r3, r3, #8
 8006224:	2b08      	cmp	r3, #8
 8006226:	d11b      	bne.n	8006260 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f06f 0208 	mvn.w	r2, #8
 8006230:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2204      	movs	r2, #4
 8006236:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	69db      	ldr	r3, [r3, #28]
 800623e:	f003 0303 	and.w	r3, r3, #3
 8006242:	2b00      	cmp	r3, #0
 8006244:	d003      	beq.n	800624e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006246:	6878      	ldr	r0, [r7, #4]
 8006248:	f000 fa24 	bl	8006694 <HAL_TIM_IC_CaptureCallback>
 800624c:	e005      	b.n	800625a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	f000 fa16 	bl	8006680 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006254:	6878      	ldr	r0, [r7, #4]
 8006256:	f000 fa27 	bl	80066a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2200      	movs	r2, #0
 800625e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	691b      	ldr	r3, [r3, #16]
 8006266:	f003 0310 	and.w	r3, r3, #16
 800626a:	2b10      	cmp	r3, #16
 800626c:	d122      	bne.n	80062b4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	68db      	ldr	r3, [r3, #12]
 8006274:	f003 0310 	and.w	r3, r3, #16
 8006278:	2b10      	cmp	r3, #16
 800627a:	d11b      	bne.n	80062b4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f06f 0210 	mvn.w	r2, #16
 8006284:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2208      	movs	r2, #8
 800628a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	69db      	ldr	r3, [r3, #28]
 8006292:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006296:	2b00      	cmp	r3, #0
 8006298:	d003      	beq.n	80062a2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800629a:	6878      	ldr	r0, [r7, #4]
 800629c:	f000 f9fa 	bl	8006694 <HAL_TIM_IC_CaptureCallback>
 80062a0:	e005      	b.n	80062ae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062a2:	6878      	ldr	r0, [r7, #4]
 80062a4:	f000 f9ec 	bl	8006680 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062a8:	6878      	ldr	r0, [r7, #4]
 80062aa:	f000 f9fd 	bl	80066a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2200      	movs	r2, #0
 80062b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	691b      	ldr	r3, [r3, #16]
 80062ba:	f003 0301 	and.w	r3, r3, #1
 80062be:	2b01      	cmp	r3, #1
 80062c0:	d10e      	bne.n	80062e0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	68db      	ldr	r3, [r3, #12]
 80062c8:	f003 0301 	and.w	r3, r3, #1
 80062cc:	2b01      	cmp	r3, #1
 80062ce:	d107      	bne.n	80062e0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f06f 0201 	mvn.w	r2, #1
 80062d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f7fb fa90 	bl	8001800 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	691b      	ldr	r3, [r3, #16]
 80062e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062ea:	2b80      	cmp	r3, #128	; 0x80
 80062ec:	d10e      	bne.n	800630c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	68db      	ldr	r3, [r3, #12]
 80062f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062f8:	2b80      	cmp	r3, #128	; 0x80
 80062fa:	d107      	bne.n	800630c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006304:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	f000 fd78 	bl	8006dfc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	691b      	ldr	r3, [r3, #16]
 8006312:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006316:	2b40      	cmp	r3, #64	; 0x40
 8006318:	d10e      	bne.n	8006338 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	68db      	ldr	r3, [r3, #12]
 8006320:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006324:	2b40      	cmp	r3, #64	; 0x40
 8006326:	d107      	bne.n	8006338 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006330:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f000 f9c2 	bl	80066bc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	691b      	ldr	r3, [r3, #16]
 800633e:	f003 0320 	and.w	r3, r3, #32
 8006342:	2b20      	cmp	r3, #32
 8006344:	d10e      	bne.n	8006364 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	68db      	ldr	r3, [r3, #12]
 800634c:	f003 0320 	and.w	r3, r3, #32
 8006350:	2b20      	cmp	r3, #32
 8006352:	d107      	bne.n	8006364 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f06f 0220 	mvn.w	r2, #32
 800635c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800635e:	6878      	ldr	r0, [r7, #4]
 8006360:	f000 fd42 	bl	8006de8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006364:	bf00      	nop
 8006366:	3708      	adds	r7, #8
 8006368:	46bd      	mov	sp, r7
 800636a:	bd80      	pop	{r7, pc}

0800636c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b084      	sub	sp, #16
 8006370:	af00      	add	r7, sp, #0
 8006372:	60f8      	str	r0, [r7, #12]
 8006374:	60b9      	str	r1, [r7, #8]
 8006376:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800637e:	2b01      	cmp	r3, #1
 8006380:	d101      	bne.n	8006386 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006382:	2302      	movs	r3, #2
 8006384:	e0b4      	b.n	80064f0 <HAL_TIM_PWM_ConfigChannel+0x184>
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	2201      	movs	r2, #1
 800638a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	2202      	movs	r2, #2
 8006392:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2b0c      	cmp	r3, #12
 800639a:	f200 809f 	bhi.w	80064dc <HAL_TIM_PWM_ConfigChannel+0x170>
 800639e:	a201      	add	r2, pc, #4	; (adr r2, 80063a4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80063a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063a4:	080063d9 	.word	0x080063d9
 80063a8:	080064dd 	.word	0x080064dd
 80063ac:	080064dd 	.word	0x080064dd
 80063b0:	080064dd 	.word	0x080064dd
 80063b4:	08006419 	.word	0x08006419
 80063b8:	080064dd 	.word	0x080064dd
 80063bc:	080064dd 	.word	0x080064dd
 80063c0:	080064dd 	.word	0x080064dd
 80063c4:	0800645b 	.word	0x0800645b
 80063c8:	080064dd 	.word	0x080064dd
 80063cc:	080064dd 	.word	0x080064dd
 80063d0:	080064dd 	.word	0x080064dd
 80063d4:	0800649b 	.word	0x0800649b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	68b9      	ldr	r1, [r7, #8]
 80063de:	4618      	mov	r0, r3
 80063e0:	f000 fa16 	bl	8006810 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	699a      	ldr	r2, [r3, #24]
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f042 0208 	orr.w	r2, r2, #8
 80063f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	699a      	ldr	r2, [r3, #24]
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f022 0204 	bic.w	r2, r2, #4
 8006402:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	6999      	ldr	r1, [r3, #24]
 800640a:	68bb      	ldr	r3, [r7, #8]
 800640c:	691a      	ldr	r2, [r3, #16]
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	430a      	orrs	r2, r1
 8006414:	619a      	str	r2, [r3, #24]
      break;
 8006416:	e062      	b.n	80064de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	68b9      	ldr	r1, [r7, #8]
 800641e:	4618      	mov	r0, r3
 8006420:	f000 fa66 	bl	80068f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	699a      	ldr	r2, [r3, #24]
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006432:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	699a      	ldr	r2, [r3, #24]
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006442:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	6999      	ldr	r1, [r3, #24]
 800644a:	68bb      	ldr	r3, [r7, #8]
 800644c:	691b      	ldr	r3, [r3, #16]
 800644e:	021a      	lsls	r2, r3, #8
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	430a      	orrs	r2, r1
 8006456:	619a      	str	r2, [r3, #24]
      break;
 8006458:	e041      	b.n	80064de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	68b9      	ldr	r1, [r7, #8]
 8006460:	4618      	mov	r0, r3
 8006462:	f000 fabb 	bl	80069dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	69da      	ldr	r2, [r3, #28]
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f042 0208 	orr.w	r2, r2, #8
 8006474:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	69da      	ldr	r2, [r3, #28]
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f022 0204 	bic.w	r2, r2, #4
 8006484:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	69d9      	ldr	r1, [r3, #28]
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	691a      	ldr	r2, [r3, #16]
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	430a      	orrs	r2, r1
 8006496:	61da      	str	r2, [r3, #28]
      break;
 8006498:	e021      	b.n	80064de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	68b9      	ldr	r1, [r7, #8]
 80064a0:	4618      	mov	r0, r3
 80064a2:	f000 fb0f 	bl	8006ac4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	69da      	ldr	r2, [r3, #28]
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80064b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	69da      	ldr	r2, [r3, #28]
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	69d9      	ldr	r1, [r3, #28]
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	691b      	ldr	r3, [r3, #16]
 80064d0:	021a      	lsls	r2, r3, #8
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	430a      	orrs	r2, r1
 80064d8:	61da      	str	r2, [r3, #28]
      break;
 80064da:	e000      	b.n	80064de <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80064dc:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	2201      	movs	r2, #1
 80064e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	2200      	movs	r2, #0
 80064ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80064ee:	2300      	movs	r3, #0
}
 80064f0:	4618      	mov	r0, r3
 80064f2:	3710      	adds	r7, #16
 80064f4:	46bd      	mov	sp, r7
 80064f6:	bd80      	pop	{r7, pc}

080064f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b084      	sub	sp, #16
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
 8006500:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006508:	2b01      	cmp	r3, #1
 800650a:	d101      	bne.n	8006510 <HAL_TIM_ConfigClockSource+0x18>
 800650c:	2302      	movs	r3, #2
 800650e:	e0b3      	b.n	8006678 <HAL_TIM_ConfigClockSource+0x180>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2201      	movs	r2, #1
 8006514:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2202      	movs	r2, #2
 800651c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	689b      	ldr	r3, [r3, #8]
 8006526:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800652e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006536:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	68fa      	ldr	r2, [r7, #12]
 800653e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006548:	d03e      	beq.n	80065c8 <HAL_TIM_ConfigClockSource+0xd0>
 800654a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800654e:	f200 8087 	bhi.w	8006660 <HAL_TIM_ConfigClockSource+0x168>
 8006552:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006556:	f000 8085 	beq.w	8006664 <HAL_TIM_ConfigClockSource+0x16c>
 800655a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800655e:	d87f      	bhi.n	8006660 <HAL_TIM_ConfigClockSource+0x168>
 8006560:	2b70      	cmp	r3, #112	; 0x70
 8006562:	d01a      	beq.n	800659a <HAL_TIM_ConfigClockSource+0xa2>
 8006564:	2b70      	cmp	r3, #112	; 0x70
 8006566:	d87b      	bhi.n	8006660 <HAL_TIM_ConfigClockSource+0x168>
 8006568:	2b60      	cmp	r3, #96	; 0x60
 800656a:	d050      	beq.n	800660e <HAL_TIM_ConfigClockSource+0x116>
 800656c:	2b60      	cmp	r3, #96	; 0x60
 800656e:	d877      	bhi.n	8006660 <HAL_TIM_ConfigClockSource+0x168>
 8006570:	2b50      	cmp	r3, #80	; 0x50
 8006572:	d03c      	beq.n	80065ee <HAL_TIM_ConfigClockSource+0xf6>
 8006574:	2b50      	cmp	r3, #80	; 0x50
 8006576:	d873      	bhi.n	8006660 <HAL_TIM_ConfigClockSource+0x168>
 8006578:	2b40      	cmp	r3, #64	; 0x40
 800657a:	d058      	beq.n	800662e <HAL_TIM_ConfigClockSource+0x136>
 800657c:	2b40      	cmp	r3, #64	; 0x40
 800657e:	d86f      	bhi.n	8006660 <HAL_TIM_ConfigClockSource+0x168>
 8006580:	2b30      	cmp	r3, #48	; 0x30
 8006582:	d064      	beq.n	800664e <HAL_TIM_ConfigClockSource+0x156>
 8006584:	2b30      	cmp	r3, #48	; 0x30
 8006586:	d86b      	bhi.n	8006660 <HAL_TIM_ConfigClockSource+0x168>
 8006588:	2b20      	cmp	r3, #32
 800658a:	d060      	beq.n	800664e <HAL_TIM_ConfigClockSource+0x156>
 800658c:	2b20      	cmp	r3, #32
 800658e:	d867      	bhi.n	8006660 <HAL_TIM_ConfigClockSource+0x168>
 8006590:	2b00      	cmp	r3, #0
 8006592:	d05c      	beq.n	800664e <HAL_TIM_ConfigClockSource+0x156>
 8006594:	2b10      	cmp	r3, #16
 8006596:	d05a      	beq.n	800664e <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8006598:	e062      	b.n	8006660 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6818      	ldr	r0, [r3, #0]
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	6899      	ldr	r1, [r3, #8]
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	685a      	ldr	r2, [r3, #4]
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	68db      	ldr	r3, [r3, #12]
 80065aa:	f000 fb5b 	bl	8006c64 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	689b      	ldr	r3, [r3, #8]
 80065b4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80065bc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	68fa      	ldr	r2, [r7, #12]
 80065c4:	609a      	str	r2, [r3, #8]
      break;
 80065c6:	e04e      	b.n	8006666 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6818      	ldr	r0, [r3, #0]
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	6899      	ldr	r1, [r3, #8]
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	685a      	ldr	r2, [r3, #4]
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	68db      	ldr	r3, [r3, #12]
 80065d8:	f000 fb44 	bl	8006c64 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	689a      	ldr	r2, [r3, #8]
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80065ea:	609a      	str	r2, [r3, #8]
      break;
 80065ec:	e03b      	b.n	8006666 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6818      	ldr	r0, [r3, #0]
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	6859      	ldr	r1, [r3, #4]
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	68db      	ldr	r3, [r3, #12]
 80065fa:	461a      	mov	r2, r3
 80065fc:	f000 fab8 	bl	8006b70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	2150      	movs	r1, #80	; 0x50
 8006606:	4618      	mov	r0, r3
 8006608:	f000 fb11 	bl	8006c2e <TIM_ITRx_SetConfig>
      break;
 800660c:	e02b      	b.n	8006666 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6818      	ldr	r0, [r3, #0]
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	6859      	ldr	r1, [r3, #4]
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	68db      	ldr	r3, [r3, #12]
 800661a:	461a      	mov	r2, r3
 800661c:	f000 fad7 	bl	8006bce <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	2160      	movs	r1, #96	; 0x60
 8006626:	4618      	mov	r0, r3
 8006628:	f000 fb01 	bl	8006c2e <TIM_ITRx_SetConfig>
      break;
 800662c:	e01b      	b.n	8006666 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6818      	ldr	r0, [r3, #0]
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	6859      	ldr	r1, [r3, #4]
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	68db      	ldr	r3, [r3, #12]
 800663a:	461a      	mov	r2, r3
 800663c:	f000 fa98 	bl	8006b70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	2140      	movs	r1, #64	; 0x40
 8006646:	4618      	mov	r0, r3
 8006648:	f000 faf1 	bl	8006c2e <TIM_ITRx_SetConfig>
      break;
 800664c:	e00b      	b.n	8006666 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681a      	ldr	r2, [r3, #0]
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	4619      	mov	r1, r3
 8006658:	4610      	mov	r0, r2
 800665a:	f000 fae8 	bl	8006c2e <TIM_ITRx_SetConfig>
      break;
 800665e:	e002      	b.n	8006666 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006660:	bf00      	nop
 8006662:	e000      	b.n	8006666 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006664:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2201      	movs	r2, #1
 800666a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2200      	movs	r2, #0
 8006672:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006676:	2300      	movs	r3, #0
}
 8006678:	4618      	mov	r0, r3
 800667a:	3710      	adds	r7, #16
 800667c:	46bd      	mov	sp, r7
 800667e:	bd80      	pop	{r7, pc}

08006680 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006680:	b480      	push	{r7}
 8006682:	b083      	sub	sp, #12
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006688:	bf00      	nop
 800668a:	370c      	adds	r7, #12
 800668c:	46bd      	mov	sp, r7
 800668e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006692:	4770      	bx	lr

08006694 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006694:	b480      	push	{r7}
 8006696:	b083      	sub	sp, #12
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800669c:	bf00      	nop
 800669e:	370c      	adds	r7, #12
 80066a0:	46bd      	mov	sp, r7
 80066a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a6:	4770      	bx	lr

080066a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80066a8:	b480      	push	{r7}
 80066aa:	b083      	sub	sp, #12
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80066b0:	bf00      	nop
 80066b2:	370c      	adds	r7, #12
 80066b4:	46bd      	mov	sp, r7
 80066b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ba:	4770      	bx	lr

080066bc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80066bc:	b480      	push	{r7}
 80066be:	b083      	sub	sp, #12
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80066c4:	bf00      	nop
 80066c6:	370c      	adds	r7, #12
 80066c8:	46bd      	mov	sp, r7
 80066ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ce:	4770      	bx	lr

080066d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80066d0:	b480      	push	{r7}
 80066d2:	b085      	sub	sp, #20
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
 80066d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	4a40      	ldr	r2, [pc, #256]	; (80067e4 <TIM_Base_SetConfig+0x114>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d013      	beq.n	8006710 <TIM_Base_SetConfig+0x40>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066ee:	d00f      	beq.n	8006710 <TIM_Base_SetConfig+0x40>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	4a3d      	ldr	r2, [pc, #244]	; (80067e8 <TIM_Base_SetConfig+0x118>)
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d00b      	beq.n	8006710 <TIM_Base_SetConfig+0x40>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	4a3c      	ldr	r2, [pc, #240]	; (80067ec <TIM_Base_SetConfig+0x11c>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d007      	beq.n	8006710 <TIM_Base_SetConfig+0x40>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	4a3b      	ldr	r2, [pc, #236]	; (80067f0 <TIM_Base_SetConfig+0x120>)
 8006704:	4293      	cmp	r3, r2
 8006706:	d003      	beq.n	8006710 <TIM_Base_SetConfig+0x40>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	4a3a      	ldr	r2, [pc, #232]	; (80067f4 <TIM_Base_SetConfig+0x124>)
 800670c:	4293      	cmp	r3, r2
 800670e:	d108      	bne.n	8006722 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006716:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	685b      	ldr	r3, [r3, #4]
 800671c:	68fa      	ldr	r2, [r7, #12]
 800671e:	4313      	orrs	r3, r2
 8006720:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	4a2f      	ldr	r2, [pc, #188]	; (80067e4 <TIM_Base_SetConfig+0x114>)
 8006726:	4293      	cmp	r3, r2
 8006728:	d02b      	beq.n	8006782 <TIM_Base_SetConfig+0xb2>
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006730:	d027      	beq.n	8006782 <TIM_Base_SetConfig+0xb2>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	4a2c      	ldr	r2, [pc, #176]	; (80067e8 <TIM_Base_SetConfig+0x118>)
 8006736:	4293      	cmp	r3, r2
 8006738:	d023      	beq.n	8006782 <TIM_Base_SetConfig+0xb2>
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	4a2b      	ldr	r2, [pc, #172]	; (80067ec <TIM_Base_SetConfig+0x11c>)
 800673e:	4293      	cmp	r3, r2
 8006740:	d01f      	beq.n	8006782 <TIM_Base_SetConfig+0xb2>
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	4a2a      	ldr	r2, [pc, #168]	; (80067f0 <TIM_Base_SetConfig+0x120>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d01b      	beq.n	8006782 <TIM_Base_SetConfig+0xb2>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	4a29      	ldr	r2, [pc, #164]	; (80067f4 <TIM_Base_SetConfig+0x124>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d017      	beq.n	8006782 <TIM_Base_SetConfig+0xb2>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	4a28      	ldr	r2, [pc, #160]	; (80067f8 <TIM_Base_SetConfig+0x128>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d013      	beq.n	8006782 <TIM_Base_SetConfig+0xb2>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	4a27      	ldr	r2, [pc, #156]	; (80067fc <TIM_Base_SetConfig+0x12c>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d00f      	beq.n	8006782 <TIM_Base_SetConfig+0xb2>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	4a26      	ldr	r2, [pc, #152]	; (8006800 <TIM_Base_SetConfig+0x130>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d00b      	beq.n	8006782 <TIM_Base_SetConfig+0xb2>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	4a25      	ldr	r2, [pc, #148]	; (8006804 <TIM_Base_SetConfig+0x134>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d007      	beq.n	8006782 <TIM_Base_SetConfig+0xb2>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	4a24      	ldr	r2, [pc, #144]	; (8006808 <TIM_Base_SetConfig+0x138>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d003      	beq.n	8006782 <TIM_Base_SetConfig+0xb2>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	4a23      	ldr	r2, [pc, #140]	; (800680c <TIM_Base_SetConfig+0x13c>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d108      	bne.n	8006794 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006788:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	68db      	ldr	r3, [r3, #12]
 800678e:	68fa      	ldr	r2, [r7, #12]
 8006790:	4313      	orrs	r3, r2
 8006792:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	695b      	ldr	r3, [r3, #20]
 800679e:	4313      	orrs	r3, r2
 80067a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	68fa      	ldr	r2, [r7, #12]
 80067a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	689a      	ldr	r2, [r3, #8]
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	681a      	ldr	r2, [r3, #0]
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	4a0a      	ldr	r2, [pc, #40]	; (80067e4 <TIM_Base_SetConfig+0x114>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d003      	beq.n	80067c8 <TIM_Base_SetConfig+0xf8>
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	4a0c      	ldr	r2, [pc, #48]	; (80067f4 <TIM_Base_SetConfig+0x124>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d103      	bne.n	80067d0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	691a      	ldr	r2, [r3, #16]
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2201      	movs	r2, #1
 80067d4:	615a      	str	r2, [r3, #20]
}
 80067d6:	bf00      	nop
 80067d8:	3714      	adds	r7, #20
 80067da:	46bd      	mov	sp, r7
 80067dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e0:	4770      	bx	lr
 80067e2:	bf00      	nop
 80067e4:	40010000 	.word	0x40010000
 80067e8:	40000400 	.word	0x40000400
 80067ec:	40000800 	.word	0x40000800
 80067f0:	40000c00 	.word	0x40000c00
 80067f4:	40010400 	.word	0x40010400
 80067f8:	40014000 	.word	0x40014000
 80067fc:	40014400 	.word	0x40014400
 8006800:	40014800 	.word	0x40014800
 8006804:	40001800 	.word	0x40001800
 8006808:	40001c00 	.word	0x40001c00
 800680c:	40002000 	.word	0x40002000

08006810 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006810:	b480      	push	{r7}
 8006812:	b087      	sub	sp, #28
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
 8006818:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6a1b      	ldr	r3, [r3, #32]
 800681e:	f023 0201 	bic.w	r2, r3, #1
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6a1b      	ldr	r3, [r3, #32]
 800682a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	685b      	ldr	r3, [r3, #4]
 8006830:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	699b      	ldr	r3, [r3, #24]
 8006836:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800683e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	f023 0303 	bic.w	r3, r3, #3
 8006846:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	68fa      	ldr	r2, [r7, #12]
 800684e:	4313      	orrs	r3, r2
 8006850:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006852:	697b      	ldr	r3, [r7, #20]
 8006854:	f023 0302 	bic.w	r3, r3, #2
 8006858:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	689b      	ldr	r3, [r3, #8]
 800685e:	697a      	ldr	r2, [r7, #20]
 8006860:	4313      	orrs	r3, r2
 8006862:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	4a20      	ldr	r2, [pc, #128]	; (80068e8 <TIM_OC1_SetConfig+0xd8>)
 8006868:	4293      	cmp	r3, r2
 800686a:	d003      	beq.n	8006874 <TIM_OC1_SetConfig+0x64>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	4a1f      	ldr	r2, [pc, #124]	; (80068ec <TIM_OC1_SetConfig+0xdc>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d10c      	bne.n	800688e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006874:	697b      	ldr	r3, [r7, #20]
 8006876:	f023 0308 	bic.w	r3, r3, #8
 800687a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	68db      	ldr	r3, [r3, #12]
 8006880:	697a      	ldr	r2, [r7, #20]
 8006882:	4313      	orrs	r3, r2
 8006884:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006886:	697b      	ldr	r3, [r7, #20]
 8006888:	f023 0304 	bic.w	r3, r3, #4
 800688c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	4a15      	ldr	r2, [pc, #84]	; (80068e8 <TIM_OC1_SetConfig+0xd8>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d003      	beq.n	800689e <TIM_OC1_SetConfig+0x8e>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	4a14      	ldr	r2, [pc, #80]	; (80068ec <TIM_OC1_SetConfig+0xdc>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d111      	bne.n	80068c2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800689e:	693b      	ldr	r3, [r7, #16]
 80068a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80068a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80068a6:	693b      	ldr	r3, [r7, #16]
 80068a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80068ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	695b      	ldr	r3, [r3, #20]
 80068b2:	693a      	ldr	r2, [r7, #16]
 80068b4:	4313      	orrs	r3, r2
 80068b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	699b      	ldr	r3, [r3, #24]
 80068bc:	693a      	ldr	r2, [r7, #16]
 80068be:	4313      	orrs	r3, r2
 80068c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	693a      	ldr	r2, [r7, #16]
 80068c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	68fa      	ldr	r2, [r7, #12]
 80068cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	685a      	ldr	r2, [r3, #4]
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	697a      	ldr	r2, [r7, #20]
 80068da:	621a      	str	r2, [r3, #32]
}
 80068dc:	bf00      	nop
 80068de:	371c      	adds	r7, #28
 80068e0:	46bd      	mov	sp, r7
 80068e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e6:	4770      	bx	lr
 80068e8:	40010000 	.word	0x40010000
 80068ec:	40010400 	.word	0x40010400

080068f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80068f0:	b480      	push	{r7}
 80068f2:	b087      	sub	sp, #28
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
 80068f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6a1b      	ldr	r3, [r3, #32]
 80068fe:	f023 0210 	bic.w	r2, r3, #16
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6a1b      	ldr	r3, [r3, #32]
 800690a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	685b      	ldr	r3, [r3, #4]
 8006910:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	699b      	ldr	r3, [r3, #24]
 8006916:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800691e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006926:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	021b      	lsls	r3, r3, #8
 800692e:	68fa      	ldr	r2, [r7, #12]
 8006930:	4313      	orrs	r3, r2
 8006932:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006934:	697b      	ldr	r3, [r7, #20]
 8006936:	f023 0320 	bic.w	r3, r3, #32
 800693a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	689b      	ldr	r3, [r3, #8]
 8006940:	011b      	lsls	r3, r3, #4
 8006942:	697a      	ldr	r2, [r7, #20]
 8006944:	4313      	orrs	r3, r2
 8006946:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	4a22      	ldr	r2, [pc, #136]	; (80069d4 <TIM_OC2_SetConfig+0xe4>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d003      	beq.n	8006958 <TIM_OC2_SetConfig+0x68>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	4a21      	ldr	r2, [pc, #132]	; (80069d8 <TIM_OC2_SetConfig+0xe8>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d10d      	bne.n	8006974 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006958:	697b      	ldr	r3, [r7, #20]
 800695a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800695e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	68db      	ldr	r3, [r3, #12]
 8006964:	011b      	lsls	r3, r3, #4
 8006966:	697a      	ldr	r2, [r7, #20]
 8006968:	4313      	orrs	r3, r2
 800696a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800696c:	697b      	ldr	r3, [r7, #20]
 800696e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006972:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	4a17      	ldr	r2, [pc, #92]	; (80069d4 <TIM_OC2_SetConfig+0xe4>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d003      	beq.n	8006984 <TIM_OC2_SetConfig+0x94>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	4a16      	ldr	r2, [pc, #88]	; (80069d8 <TIM_OC2_SetConfig+0xe8>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d113      	bne.n	80069ac <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006984:	693b      	ldr	r3, [r7, #16]
 8006986:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800698a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800698c:	693b      	ldr	r3, [r7, #16]
 800698e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006992:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	695b      	ldr	r3, [r3, #20]
 8006998:	009b      	lsls	r3, r3, #2
 800699a:	693a      	ldr	r2, [r7, #16]
 800699c:	4313      	orrs	r3, r2
 800699e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	699b      	ldr	r3, [r3, #24]
 80069a4:	009b      	lsls	r3, r3, #2
 80069a6:	693a      	ldr	r2, [r7, #16]
 80069a8:	4313      	orrs	r3, r2
 80069aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	693a      	ldr	r2, [r7, #16]
 80069b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	68fa      	ldr	r2, [r7, #12]
 80069b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	685a      	ldr	r2, [r3, #4]
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	697a      	ldr	r2, [r7, #20]
 80069c4:	621a      	str	r2, [r3, #32]
}
 80069c6:	bf00      	nop
 80069c8:	371c      	adds	r7, #28
 80069ca:	46bd      	mov	sp, r7
 80069cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d0:	4770      	bx	lr
 80069d2:	bf00      	nop
 80069d4:	40010000 	.word	0x40010000
 80069d8:	40010400 	.word	0x40010400

080069dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80069dc:	b480      	push	{r7}
 80069de:	b087      	sub	sp, #28
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
 80069e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6a1b      	ldr	r3, [r3, #32]
 80069ea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6a1b      	ldr	r3, [r3, #32]
 80069f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	685b      	ldr	r3, [r3, #4]
 80069fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	69db      	ldr	r3, [r3, #28]
 8006a02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	f023 0303 	bic.w	r3, r3, #3
 8006a12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	68fa      	ldr	r2, [r7, #12]
 8006a1a:	4313      	orrs	r3, r2
 8006a1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006a24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	689b      	ldr	r3, [r3, #8]
 8006a2a:	021b      	lsls	r3, r3, #8
 8006a2c:	697a      	ldr	r2, [r7, #20]
 8006a2e:	4313      	orrs	r3, r2
 8006a30:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	4a21      	ldr	r2, [pc, #132]	; (8006abc <TIM_OC3_SetConfig+0xe0>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d003      	beq.n	8006a42 <TIM_OC3_SetConfig+0x66>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	4a20      	ldr	r2, [pc, #128]	; (8006ac0 <TIM_OC3_SetConfig+0xe4>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d10d      	bne.n	8006a5e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006a42:	697b      	ldr	r3, [r7, #20]
 8006a44:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006a48:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	68db      	ldr	r3, [r3, #12]
 8006a4e:	021b      	lsls	r3, r3, #8
 8006a50:	697a      	ldr	r2, [r7, #20]
 8006a52:	4313      	orrs	r3, r2
 8006a54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006a56:	697b      	ldr	r3, [r7, #20]
 8006a58:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006a5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	4a16      	ldr	r2, [pc, #88]	; (8006abc <TIM_OC3_SetConfig+0xe0>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d003      	beq.n	8006a6e <TIM_OC3_SetConfig+0x92>
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	4a15      	ldr	r2, [pc, #84]	; (8006ac0 <TIM_OC3_SetConfig+0xe4>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d113      	bne.n	8006a96 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006a6e:	693b      	ldr	r3, [r7, #16]
 8006a70:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006a74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006a76:	693b      	ldr	r3, [r7, #16]
 8006a78:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006a7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	695b      	ldr	r3, [r3, #20]
 8006a82:	011b      	lsls	r3, r3, #4
 8006a84:	693a      	ldr	r2, [r7, #16]
 8006a86:	4313      	orrs	r3, r2
 8006a88:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	699b      	ldr	r3, [r3, #24]
 8006a8e:	011b      	lsls	r3, r3, #4
 8006a90:	693a      	ldr	r2, [r7, #16]
 8006a92:	4313      	orrs	r3, r2
 8006a94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	693a      	ldr	r2, [r7, #16]
 8006a9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	68fa      	ldr	r2, [r7, #12]
 8006aa0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	685a      	ldr	r2, [r3, #4]
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	697a      	ldr	r2, [r7, #20]
 8006aae:	621a      	str	r2, [r3, #32]
}
 8006ab0:	bf00      	nop
 8006ab2:	371c      	adds	r7, #28
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aba:	4770      	bx	lr
 8006abc:	40010000 	.word	0x40010000
 8006ac0:	40010400 	.word	0x40010400

08006ac4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	b087      	sub	sp, #28
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
 8006acc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6a1b      	ldr	r3, [r3, #32]
 8006ad2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6a1b      	ldr	r3, [r3, #32]
 8006ade:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	685b      	ldr	r3, [r3, #4]
 8006ae4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	69db      	ldr	r3, [r3, #28]
 8006aea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006af2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006afa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	021b      	lsls	r3, r3, #8
 8006b02:	68fa      	ldr	r2, [r7, #12]
 8006b04:	4313      	orrs	r3, r2
 8006b06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006b08:	693b      	ldr	r3, [r7, #16]
 8006b0a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006b0e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	689b      	ldr	r3, [r3, #8]
 8006b14:	031b      	lsls	r3, r3, #12
 8006b16:	693a      	ldr	r2, [r7, #16]
 8006b18:	4313      	orrs	r3, r2
 8006b1a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	4a12      	ldr	r2, [pc, #72]	; (8006b68 <TIM_OC4_SetConfig+0xa4>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d003      	beq.n	8006b2c <TIM_OC4_SetConfig+0x68>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	4a11      	ldr	r2, [pc, #68]	; (8006b6c <TIM_OC4_SetConfig+0xa8>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d109      	bne.n	8006b40 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006b2c:	697b      	ldr	r3, [r7, #20]
 8006b2e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b32:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	695b      	ldr	r3, [r3, #20]
 8006b38:	019b      	lsls	r3, r3, #6
 8006b3a:	697a      	ldr	r2, [r7, #20]
 8006b3c:	4313      	orrs	r3, r2
 8006b3e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	697a      	ldr	r2, [r7, #20]
 8006b44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	68fa      	ldr	r2, [r7, #12]
 8006b4a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	685a      	ldr	r2, [r3, #4]
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	693a      	ldr	r2, [r7, #16]
 8006b58:	621a      	str	r2, [r3, #32]
}
 8006b5a:	bf00      	nop
 8006b5c:	371c      	adds	r7, #28
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b64:	4770      	bx	lr
 8006b66:	bf00      	nop
 8006b68:	40010000 	.word	0x40010000
 8006b6c:	40010400 	.word	0x40010400

08006b70 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b70:	b480      	push	{r7}
 8006b72:	b087      	sub	sp, #28
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	60f8      	str	r0, [r7, #12]
 8006b78:	60b9      	str	r1, [r7, #8]
 8006b7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	6a1b      	ldr	r3, [r3, #32]
 8006b80:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	6a1b      	ldr	r3, [r3, #32]
 8006b86:	f023 0201 	bic.w	r2, r3, #1
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	699b      	ldr	r3, [r3, #24]
 8006b92:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006b94:	693b      	ldr	r3, [r7, #16]
 8006b96:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006b9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	011b      	lsls	r3, r3, #4
 8006ba0:	693a      	ldr	r2, [r7, #16]
 8006ba2:	4313      	orrs	r3, r2
 8006ba4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006ba6:	697b      	ldr	r3, [r7, #20]
 8006ba8:	f023 030a 	bic.w	r3, r3, #10
 8006bac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006bae:	697a      	ldr	r2, [r7, #20]
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	4313      	orrs	r3, r2
 8006bb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	693a      	ldr	r2, [r7, #16]
 8006bba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	697a      	ldr	r2, [r7, #20]
 8006bc0:	621a      	str	r2, [r3, #32]
}
 8006bc2:	bf00      	nop
 8006bc4:	371c      	adds	r7, #28
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bcc:	4770      	bx	lr

08006bce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006bce:	b480      	push	{r7}
 8006bd0:	b087      	sub	sp, #28
 8006bd2:	af00      	add	r7, sp, #0
 8006bd4:	60f8      	str	r0, [r7, #12]
 8006bd6:	60b9      	str	r1, [r7, #8]
 8006bd8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	6a1b      	ldr	r3, [r3, #32]
 8006bde:	f023 0210 	bic.w	r2, r3, #16
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	699b      	ldr	r3, [r3, #24]
 8006bea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	6a1b      	ldr	r3, [r3, #32]
 8006bf0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006bf2:	697b      	ldr	r3, [r7, #20]
 8006bf4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006bf8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	031b      	lsls	r3, r3, #12
 8006bfe:	697a      	ldr	r2, [r7, #20]
 8006c00:	4313      	orrs	r3, r2
 8006c02:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006c04:	693b      	ldr	r3, [r7, #16]
 8006c06:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006c0a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	011b      	lsls	r3, r3, #4
 8006c10:	693a      	ldr	r2, [r7, #16]
 8006c12:	4313      	orrs	r3, r2
 8006c14:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	697a      	ldr	r2, [r7, #20]
 8006c1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	693a      	ldr	r2, [r7, #16]
 8006c20:	621a      	str	r2, [r3, #32]
}
 8006c22:	bf00      	nop
 8006c24:	371c      	adds	r7, #28
 8006c26:	46bd      	mov	sp, r7
 8006c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2c:	4770      	bx	lr

08006c2e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006c2e:	b480      	push	{r7}
 8006c30:	b085      	sub	sp, #20
 8006c32:	af00      	add	r7, sp, #0
 8006c34:	6078      	str	r0, [r7, #4]
 8006c36:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	689b      	ldr	r3, [r3, #8]
 8006c3c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c44:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006c46:	683a      	ldr	r2, [r7, #0]
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	4313      	orrs	r3, r2
 8006c4c:	f043 0307 	orr.w	r3, r3, #7
 8006c50:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	68fa      	ldr	r2, [r7, #12]
 8006c56:	609a      	str	r2, [r3, #8]
}
 8006c58:	bf00      	nop
 8006c5a:	3714      	adds	r7, #20
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c62:	4770      	bx	lr

08006c64 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006c64:	b480      	push	{r7}
 8006c66:	b087      	sub	sp, #28
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	60f8      	str	r0, [r7, #12]
 8006c6c:	60b9      	str	r1, [r7, #8]
 8006c6e:	607a      	str	r2, [r7, #4]
 8006c70:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	689b      	ldr	r3, [r3, #8]
 8006c76:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c78:	697b      	ldr	r3, [r7, #20]
 8006c7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006c7e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	021a      	lsls	r2, r3, #8
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	431a      	orrs	r2, r3
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	4313      	orrs	r3, r2
 8006c8c:	697a      	ldr	r2, [r7, #20]
 8006c8e:	4313      	orrs	r3, r2
 8006c90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	697a      	ldr	r2, [r7, #20]
 8006c96:	609a      	str	r2, [r3, #8]
}
 8006c98:	bf00      	nop
 8006c9a:	371c      	adds	r7, #28
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca2:	4770      	bx	lr

08006ca4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006ca4:	b480      	push	{r7}
 8006ca6:	b087      	sub	sp, #28
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	60f8      	str	r0, [r7, #12]
 8006cac:	60b9      	str	r1, [r7, #8]
 8006cae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006cb0:	68bb      	ldr	r3, [r7, #8]
 8006cb2:	f003 031f 	and.w	r3, r3, #31
 8006cb6:	2201      	movs	r2, #1
 8006cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8006cbc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	6a1a      	ldr	r2, [r3, #32]
 8006cc2:	697b      	ldr	r3, [r7, #20]
 8006cc4:	43db      	mvns	r3, r3
 8006cc6:	401a      	ands	r2, r3
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	6a1a      	ldr	r2, [r3, #32]
 8006cd0:	68bb      	ldr	r3, [r7, #8]
 8006cd2:	f003 031f 	and.w	r3, r3, #31
 8006cd6:	6879      	ldr	r1, [r7, #4]
 8006cd8:	fa01 f303 	lsl.w	r3, r1, r3
 8006cdc:	431a      	orrs	r2, r3
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	621a      	str	r2, [r3, #32]
}
 8006ce2:	bf00      	nop
 8006ce4:	371c      	adds	r7, #28
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cec:	4770      	bx	lr
	...

08006cf0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006cf0:	b480      	push	{r7}
 8006cf2:	b085      	sub	sp, #20
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
 8006cf8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d00:	2b01      	cmp	r3, #1
 8006d02:	d101      	bne.n	8006d08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006d04:	2302      	movs	r3, #2
 8006d06:	e05a      	b.n	8006dbe <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2201      	movs	r2, #1
 8006d0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2202      	movs	r2, #2
 8006d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	685b      	ldr	r3, [r3, #4]
 8006d1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	689b      	ldr	r3, [r3, #8]
 8006d26:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d2e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	68fa      	ldr	r2, [r7, #12]
 8006d36:	4313      	orrs	r3, r2
 8006d38:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	68fa      	ldr	r2, [r7, #12]
 8006d40:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	4a21      	ldr	r2, [pc, #132]	; (8006dcc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d022      	beq.n	8006d92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d54:	d01d      	beq.n	8006d92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	4a1d      	ldr	r2, [pc, #116]	; (8006dd0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d018      	beq.n	8006d92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	4a1b      	ldr	r2, [pc, #108]	; (8006dd4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d013      	beq.n	8006d92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	4a1a      	ldr	r2, [pc, #104]	; (8006dd8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d00e      	beq.n	8006d92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	4a18      	ldr	r2, [pc, #96]	; (8006ddc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d009      	beq.n	8006d92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	4a17      	ldr	r2, [pc, #92]	; (8006de0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d004      	beq.n	8006d92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	4a15      	ldr	r2, [pc, #84]	; (8006de4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d10c      	bne.n	8006dac <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006d92:	68bb      	ldr	r3, [r7, #8]
 8006d94:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d98:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	685b      	ldr	r3, [r3, #4]
 8006d9e:	68ba      	ldr	r2, [r7, #8]
 8006da0:	4313      	orrs	r3, r2
 8006da2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	68ba      	ldr	r2, [r7, #8]
 8006daa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2201      	movs	r2, #1
 8006db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2200      	movs	r2, #0
 8006db8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006dbc:	2300      	movs	r3, #0
}
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	3714      	adds	r7, #20
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc8:	4770      	bx	lr
 8006dca:	bf00      	nop
 8006dcc:	40010000 	.word	0x40010000
 8006dd0:	40000400 	.word	0x40000400
 8006dd4:	40000800 	.word	0x40000800
 8006dd8:	40000c00 	.word	0x40000c00
 8006ddc:	40010400 	.word	0x40010400
 8006de0:	40014000 	.word	0x40014000
 8006de4:	40001800 	.word	0x40001800

08006de8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006de8:	b480      	push	{r7}
 8006dea:	b083      	sub	sp, #12
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006df0:	bf00      	nop
 8006df2:	370c      	adds	r7, #12
 8006df4:	46bd      	mov	sp, r7
 8006df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfa:	4770      	bx	lr

08006dfc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006dfc:	b480      	push	{r7}
 8006dfe:	b083      	sub	sp, #12
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006e04:	bf00      	nop
 8006e06:	370c      	adds	r7, #12
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0e:	4770      	bx	lr

08006e10 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b082      	sub	sp, #8
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d101      	bne.n	8006e22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006e1e:	2301      	movs	r3, #1
 8006e20:	e03f      	b.n	8006ea2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006e28:	b2db      	uxtb	r3, r3
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d106      	bne.n	8006e3c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2200      	movs	r2, #0
 8006e32:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	f7fb f90e 	bl	8002058 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2224      	movs	r2, #36	; 0x24
 8006e40:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	68da      	ldr	r2, [r3, #12]
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006e52:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006e54:	6878      	ldr	r0, [r7, #4]
 8006e56:	f000 fc41 	bl	80076dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	691a      	ldr	r2, [r3, #16]
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006e68:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	695a      	ldr	r2, [r3, #20]
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006e78:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	68da      	ldr	r2, [r3, #12]
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006e88:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2220      	movs	r2, #32
 8006e94:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2220      	movs	r2, #32
 8006e9c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8006ea0:	2300      	movs	r3, #0
}
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	3708      	adds	r7, #8
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	bd80      	pop	{r7, pc}
	...

08006eac <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b086      	sub	sp, #24
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	60f8      	str	r0, [r7, #12]
 8006eb4:	60b9      	str	r1, [r7, #8]
 8006eb6:	4613      	mov	r3, r2
 8006eb8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006ec0:	b2db      	uxtb	r3, r3
 8006ec2:	2b20      	cmp	r3, #32
 8006ec4:	d166      	bne.n	8006f94 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ec6:	68bb      	ldr	r3, [r7, #8]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d002      	beq.n	8006ed2 <HAL_UART_Receive_DMA+0x26>
 8006ecc:	88fb      	ldrh	r3, [r7, #6]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d101      	bne.n	8006ed6 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	e05f      	b.n	8006f96 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006edc:	2b01      	cmp	r3, #1
 8006ede:	d101      	bne.n	8006ee4 <HAL_UART_Receive_DMA+0x38>
 8006ee0:	2302      	movs	r3, #2
 8006ee2:	e058      	b.n	8006f96 <HAL_UART_Receive_DMA+0xea>
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	2201      	movs	r2, #1
 8006ee8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8006eec:	68ba      	ldr	r2, [r7, #8]
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	88fa      	ldrh	r2, [r7, #6]
 8006ef6:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	2200      	movs	r2, #0
 8006efc:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	2222      	movs	r2, #34	; 0x22
 8006f02:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f0a:	4a25      	ldr	r2, [pc, #148]	; (8006fa0 <HAL_UART_Receive_DMA+0xf4>)
 8006f0c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f12:	4a24      	ldr	r2, [pc, #144]	; (8006fa4 <HAL_UART_Receive_DMA+0xf8>)
 8006f14:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f1a:	4a23      	ldr	r2, [pc, #140]	; (8006fa8 <HAL_UART_Receive_DMA+0xfc>)
 8006f1c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f22:	2200      	movs	r2, #0
 8006f24:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 8006f26:	f107 0308 	add.w	r3, r7, #8
 8006f2a:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	3304      	adds	r3, #4
 8006f36:	4619      	mov	r1, r3
 8006f38:	697b      	ldr	r3, [r7, #20]
 8006f3a:	681a      	ldr	r2, [r3, #0]
 8006f3c:	88fb      	ldrh	r3, [r7, #6]
 8006f3e:	f7fd feb1 	bl	8004ca4 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8006f42:	2300      	movs	r3, #0
 8006f44:	613b      	str	r3, [r7, #16]
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	613b      	str	r3, [r7, #16]
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	685b      	ldr	r3, [r3, #4]
 8006f54:	613b      	str	r3, [r7, #16]
 8006f56:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	68da      	ldr	r2, [r3, #12]
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006f6e:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	695a      	ldr	r2, [r3, #20]
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f042 0201 	orr.w	r2, r2, #1
 8006f7e:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	695a      	ldr	r2, [r3, #20]
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f8e:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8006f90:	2300      	movs	r3, #0
 8006f92:	e000      	b.n	8006f96 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8006f94:	2302      	movs	r3, #2
  }
}
 8006f96:	4618      	mov	r0, r3
 8006f98:	3718      	adds	r7, #24
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bd80      	pop	{r7, pc}
 8006f9e:	bf00      	nop
 8006fa0:	08007355 	.word	0x08007355
 8006fa4:	080073bd 	.word	0x080073bd
 8006fa8:	080073d9 	.word	0x080073d9

08006fac <HAL_UART_DMAPause>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAPause(UART_HandleTypeDef *huart)
{
 8006fac:	b480      	push	{r7}
 8006fae:	b085      	sub	sp, #20
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006fbe:	2b01      	cmp	r3, #1
 8006fc0:	d101      	bne.n	8006fc6 <HAL_UART_DMAPause+0x1a>
 8006fc2:	2302      	movs	r3, #2
 8006fc4:	e050      	b.n	8007068 <HAL_UART_DMAPause+0xbc>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2201      	movs	r2, #1
 8006fca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	695b      	ldr	r3, [r3, #20]
 8006fd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fd8:	2b80      	cmp	r3, #128	; 0x80
 8006fda:	bf0c      	ite	eq
 8006fdc:	2301      	moveq	r3, #1
 8006fde:	2300      	movne	r3, #0
 8006fe0:	b2db      	uxtb	r3, r3
 8006fe2:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006fea:	b2db      	uxtb	r3, r3
 8006fec:	2b21      	cmp	r3, #33	; 0x21
 8006fee:	d10a      	bne.n	8007006 <HAL_UART_DMAPause+0x5a>
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d007      	beq.n	8007006 <HAL_UART_DMAPause+0x5a>
  {
    /* Disable the UART DMA Tx request */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	695a      	ldr	r2, [r3, #20]
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007004:	615a      	str	r2, [r3, #20]
  }

  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	695b      	ldr	r3, [r3, #20]
 800700c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007010:	2b40      	cmp	r3, #64	; 0x40
 8007012:	bf0c      	ite	eq
 8007014:	2301      	moveq	r3, #1
 8007016:	2300      	movne	r3, #0
 8007018:	b2db      	uxtb	r3, r3
 800701a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007022:	b2db      	uxtb	r3, r3
 8007024:	2b22      	cmp	r3, #34	; 0x22
 8007026:	d11a      	bne.n	800705e <HAL_UART_DMAPause+0xb2>
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d017      	beq.n	800705e <HAL_UART_DMAPause+0xb2>
  {
    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	68da      	ldr	r2, [r3, #12]
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800703c:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	695a      	ldr	r2, [r3, #20]
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f022 0201 	bic.w	r2, r2, #1
 800704c:	615a      	str	r2, [r3, #20]

    /* Disable the UART DMA Rx request */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	695a      	ldr	r2, [r3, #20]
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800705c:	615a      	str	r2, [r3, #20]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2200      	movs	r2, #0
 8007062:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8007066:	2300      	movs	r3, #0
}
 8007068:	4618      	mov	r0, r3
 800706a:	3714      	adds	r7, #20
 800706c:	46bd      	mov	sp, r7
 800706e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007072:	4770      	bx	lr

08007074 <HAL_UART_DMAResume>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAResume(UART_HandleTypeDef *huart)
{
 8007074:	b480      	push	{r7}
 8007076:	b085      	sub	sp, #20
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007082:	2b01      	cmp	r3, #1
 8007084:	d101      	bne.n	800708a <HAL_UART_DMAResume+0x16>
 8007086:	2302      	movs	r3, #2
 8007088:	e03f      	b.n	800710a <HAL_UART_DMAResume+0x96>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2201      	movs	r2, #1
 800708e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007098:	b2db      	uxtb	r3, r3
 800709a:	2b21      	cmp	r3, #33	; 0x21
 800709c:	d107      	bne.n	80070ae <HAL_UART_DMAResume+0x3a>
  {
    /* Enable the UART DMA Tx request */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	695a      	ldr	r2, [r3, #20]
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80070ac:	615a      	str	r2, [r3, #20]
  }

  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80070b4:	b2db      	uxtb	r3, r3
 80070b6:	2b22      	cmp	r3, #34	; 0x22
 80070b8:	d122      	bne.n	8007100 <HAL_UART_DMAResume+0x8c>
  {
    /* Clear the Overrun flag before resuming the Rx transfer*/
    __HAL_UART_CLEAR_OREFLAG(huart);
 80070ba:	2300      	movs	r3, #0
 80070bc:	60fb      	str	r3, [r7, #12]
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	60fb      	str	r3, [r7, #12]
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	685b      	ldr	r3, [r3, #4]
 80070cc:	60fb      	str	r3, [r7, #12]
 80070ce:	68fb      	ldr	r3, [r7, #12]

    /* Reenable PE and ERR (Frame error, noise error, overrun error) interrupts */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	68da      	ldr	r2, [r3, #12]
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80070de:	60da      	str	r2, [r3, #12]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	695a      	ldr	r2, [r3, #20]
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f042 0201 	orr.w	r2, r2, #1
 80070ee:	615a      	str	r2, [r3, #20]

    /* Enable the UART DMA Rx request */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	695a      	ldr	r2, [r3, #20]
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80070fe:	615a      	str	r2, [r3, #20]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2200      	movs	r2, #0
 8007104:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8007108:	2300      	movs	r3, #0
}
 800710a:	4618      	mov	r0, r3
 800710c:	3714      	adds	r7, #20
 800710e:	46bd      	mov	sp, r7
 8007110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007114:	4770      	bx	lr
	...

08007118 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b088      	sub	sp, #32
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	68db      	ldr	r3, [r3, #12]
 800712e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	695b      	ldr	r3, [r3, #20]
 8007136:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8007138:	2300      	movs	r3, #0
 800713a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800713c:	2300      	movs	r3, #0
 800713e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007140:	69fb      	ldr	r3, [r7, #28]
 8007142:	f003 030f 	and.w	r3, r3, #15
 8007146:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8007148:	693b      	ldr	r3, [r7, #16]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d10d      	bne.n	800716a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800714e:	69fb      	ldr	r3, [r7, #28]
 8007150:	f003 0320 	and.w	r3, r3, #32
 8007154:	2b00      	cmp	r3, #0
 8007156:	d008      	beq.n	800716a <HAL_UART_IRQHandler+0x52>
 8007158:	69bb      	ldr	r3, [r7, #24]
 800715a:	f003 0320 	and.w	r3, r3, #32
 800715e:	2b00      	cmp	r3, #0
 8007160:	d003      	beq.n	800716a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8007162:	6878      	ldr	r0, [r7, #4]
 8007164:	f000 fa38 	bl	80075d8 <UART_Receive_IT>
      return;
 8007168:	e0d0      	b.n	800730c <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800716a:	693b      	ldr	r3, [r7, #16]
 800716c:	2b00      	cmp	r3, #0
 800716e:	f000 80b0 	beq.w	80072d2 <HAL_UART_IRQHandler+0x1ba>
 8007172:	697b      	ldr	r3, [r7, #20]
 8007174:	f003 0301 	and.w	r3, r3, #1
 8007178:	2b00      	cmp	r3, #0
 800717a:	d105      	bne.n	8007188 <HAL_UART_IRQHandler+0x70>
 800717c:	69bb      	ldr	r3, [r7, #24]
 800717e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007182:	2b00      	cmp	r3, #0
 8007184:	f000 80a5 	beq.w	80072d2 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007188:	69fb      	ldr	r3, [r7, #28]
 800718a:	f003 0301 	and.w	r3, r3, #1
 800718e:	2b00      	cmp	r3, #0
 8007190:	d00a      	beq.n	80071a8 <HAL_UART_IRQHandler+0x90>
 8007192:	69bb      	ldr	r3, [r7, #24]
 8007194:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007198:	2b00      	cmp	r3, #0
 800719a:	d005      	beq.n	80071a8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071a0:	f043 0201 	orr.w	r2, r3, #1
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80071a8:	69fb      	ldr	r3, [r7, #28]
 80071aa:	f003 0304 	and.w	r3, r3, #4
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d00a      	beq.n	80071c8 <HAL_UART_IRQHandler+0xb0>
 80071b2:	697b      	ldr	r3, [r7, #20]
 80071b4:	f003 0301 	and.w	r3, r3, #1
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d005      	beq.n	80071c8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071c0:	f043 0202 	orr.w	r2, r3, #2
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80071c8:	69fb      	ldr	r3, [r7, #28]
 80071ca:	f003 0302 	and.w	r3, r3, #2
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d00a      	beq.n	80071e8 <HAL_UART_IRQHandler+0xd0>
 80071d2:	697b      	ldr	r3, [r7, #20]
 80071d4:	f003 0301 	and.w	r3, r3, #1
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d005      	beq.n	80071e8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071e0:	f043 0204 	orr.w	r2, r3, #4
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80071e8:	69fb      	ldr	r3, [r7, #28]
 80071ea:	f003 0308 	and.w	r3, r3, #8
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d00f      	beq.n	8007212 <HAL_UART_IRQHandler+0xfa>
 80071f2:	69bb      	ldr	r3, [r7, #24]
 80071f4:	f003 0320 	and.w	r3, r3, #32
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d104      	bne.n	8007206 <HAL_UART_IRQHandler+0xee>
 80071fc:	697b      	ldr	r3, [r7, #20]
 80071fe:	f003 0301 	and.w	r3, r3, #1
 8007202:	2b00      	cmp	r3, #0
 8007204:	d005      	beq.n	8007212 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800720a:	f043 0208 	orr.w	r2, r3, #8
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007216:	2b00      	cmp	r3, #0
 8007218:	d077      	beq.n	800730a <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800721a:	69fb      	ldr	r3, [r7, #28]
 800721c:	f003 0320 	and.w	r3, r3, #32
 8007220:	2b00      	cmp	r3, #0
 8007222:	d007      	beq.n	8007234 <HAL_UART_IRQHandler+0x11c>
 8007224:	69bb      	ldr	r3, [r7, #24]
 8007226:	f003 0320 	and.w	r3, r3, #32
 800722a:	2b00      	cmp	r3, #0
 800722c:	d002      	beq.n	8007234 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	f000 f9d2 	bl	80075d8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	695b      	ldr	r3, [r3, #20]
 800723a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800723e:	2b40      	cmp	r3, #64	; 0x40
 8007240:	bf0c      	ite	eq
 8007242:	2301      	moveq	r3, #1
 8007244:	2300      	movne	r3, #0
 8007246:	b2db      	uxtb	r3, r3
 8007248:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800724e:	f003 0308 	and.w	r3, r3, #8
 8007252:	2b00      	cmp	r3, #0
 8007254:	d102      	bne.n	800725c <HAL_UART_IRQHandler+0x144>
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d031      	beq.n	80072c0 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800725c:	6878      	ldr	r0, [r7, #4]
 800725e:	f000 f91b 	bl	8007498 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	695b      	ldr	r3, [r3, #20]
 8007268:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800726c:	2b40      	cmp	r3, #64	; 0x40
 800726e:	d123      	bne.n	80072b8 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	695a      	ldr	r2, [r3, #20]
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800727e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007284:	2b00      	cmp	r3, #0
 8007286:	d013      	beq.n	80072b0 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800728c:	4a21      	ldr	r2, [pc, #132]	; (8007314 <HAL_UART_IRQHandler+0x1fc>)
 800728e:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007294:	4618      	mov	r0, r3
 8007296:	f7fd fd5d 	bl	8004d54 <HAL_DMA_Abort_IT>
 800729a:	4603      	mov	r3, r0
 800729c:	2b00      	cmp	r3, #0
 800729e:	d016      	beq.n	80072ce <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072a6:	687a      	ldr	r2, [r7, #4]
 80072a8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80072aa:	4610      	mov	r0, r2
 80072ac:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072ae:	e00e      	b.n	80072ce <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80072b0:	6878      	ldr	r0, [r7, #4]
 80072b2:	f000 f845 	bl	8007340 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072b6:	e00a      	b.n	80072ce <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80072b8:	6878      	ldr	r0, [r7, #4]
 80072ba:	f000 f841 	bl	8007340 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072be:	e006      	b.n	80072ce <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80072c0:	6878      	ldr	r0, [r7, #4]
 80072c2:	f000 f83d 	bl	8007340 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2200      	movs	r2, #0
 80072ca:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80072cc:	e01d      	b.n	800730a <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072ce:	bf00      	nop
    return;
 80072d0:	e01b      	b.n	800730a <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80072d2:	69fb      	ldr	r3, [r7, #28]
 80072d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d008      	beq.n	80072ee <HAL_UART_IRQHandler+0x1d6>
 80072dc:	69bb      	ldr	r3, [r7, #24]
 80072de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d003      	beq.n	80072ee <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80072e6:	6878      	ldr	r0, [r7, #4]
 80072e8:	f000 f908 	bl	80074fc <UART_Transmit_IT>
    return;
 80072ec:	e00e      	b.n	800730c <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80072ee:	69fb      	ldr	r3, [r7, #28]
 80072f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d009      	beq.n	800730c <HAL_UART_IRQHandler+0x1f4>
 80072f8:	69bb      	ldr	r3, [r7, #24]
 80072fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d004      	beq.n	800730c <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8007302:	6878      	ldr	r0, [r7, #4]
 8007304:	f000 f950 	bl	80075a8 <UART_EndTransmit_IT>
    return;
 8007308:	e000      	b.n	800730c <HAL_UART_IRQHandler+0x1f4>
    return;
 800730a:	bf00      	nop
  }
}
 800730c:	3720      	adds	r7, #32
 800730e:	46bd      	mov	sp, r7
 8007310:	bd80      	pop	{r7, pc}
 8007312:	bf00      	nop
 8007314:	080074d5 	.word	0x080074d5

08007318 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007318:	b480      	push	{r7}
 800731a:	b083      	sub	sp, #12
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007320:	bf00      	nop
 8007322:	370c      	adds	r7, #12
 8007324:	46bd      	mov	sp, r7
 8007326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732a:	4770      	bx	lr

0800732c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800732c:	b480      	push	{r7}
 800732e:	b083      	sub	sp, #12
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007334:	bf00      	nop
 8007336:	370c      	adds	r7, #12
 8007338:	46bd      	mov	sp, r7
 800733a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733e:	4770      	bx	lr

08007340 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007340:	b480      	push	{r7}
 8007342:	b083      	sub	sp, #12
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007348:	bf00      	nop
 800734a:	370c      	adds	r7, #12
 800734c:	46bd      	mov	sp, r7
 800734e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007352:	4770      	bx	lr

08007354 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b084      	sub	sp, #16
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007360:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800736c:	2b00      	cmp	r3, #0
 800736e:	d11e      	bne.n	80073ae <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	2200      	movs	r2, #0
 8007374:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	68da      	ldr	r2, [r3, #12]
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007384:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	695a      	ldr	r2, [r3, #20]
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f022 0201 	bic.w	r2, r2, #1
 8007394:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	695a      	ldr	r2, [r3, #20]
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80073a4:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	2220      	movs	r2, #32
 80073aa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 80073ae:	68f8      	ldr	r0, [r7, #12]
 80073b0:	f7f9 feaa 	bl	8001108 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80073b4:	bf00      	nop
 80073b6:	3710      	adds	r7, #16
 80073b8:	46bd      	mov	sp, r7
 80073ba:	bd80      	pop	{r7, pc}

080073bc <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b084      	sub	sp, #16
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073c8:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 80073ca:	68f8      	ldr	r0, [r7, #12]
 80073cc:	f7ff ffae 	bl	800732c <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80073d0:	bf00      	nop
 80073d2:	3710      	adds	r7, #16
 80073d4:	46bd      	mov	sp, r7
 80073d6:	bd80      	pop	{r7, pc}

080073d8 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b084      	sub	sp, #16
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80073e0:	2300      	movs	r3, #0
 80073e2:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073e8:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80073ea:	68bb      	ldr	r3, [r7, #8]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	695b      	ldr	r3, [r3, #20]
 80073f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073f4:	2b80      	cmp	r3, #128	; 0x80
 80073f6:	bf0c      	ite	eq
 80073f8:	2301      	moveq	r3, #1
 80073fa:	2300      	movne	r3, #0
 80073fc:	b2db      	uxtb	r3, r3
 80073fe:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007400:	68bb      	ldr	r3, [r7, #8]
 8007402:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007406:	b2db      	uxtb	r3, r3
 8007408:	2b21      	cmp	r3, #33	; 0x21
 800740a:	d108      	bne.n	800741e <UART_DMAError+0x46>
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d005      	beq.n	800741e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007412:	68bb      	ldr	r3, [r7, #8]
 8007414:	2200      	movs	r2, #0
 8007416:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8007418:	68b8      	ldr	r0, [r7, #8]
 800741a:	f000 f827 	bl	800746c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800741e:	68bb      	ldr	r3, [r7, #8]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	695b      	ldr	r3, [r3, #20]
 8007424:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007428:	2b40      	cmp	r3, #64	; 0x40
 800742a:	bf0c      	ite	eq
 800742c:	2301      	moveq	r3, #1
 800742e:	2300      	movne	r3, #0
 8007430:	b2db      	uxtb	r3, r3
 8007432:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007434:	68bb      	ldr	r3, [r7, #8]
 8007436:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800743a:	b2db      	uxtb	r3, r3
 800743c:	2b22      	cmp	r3, #34	; 0x22
 800743e:	d108      	bne.n	8007452 <UART_DMAError+0x7a>
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d005      	beq.n	8007452 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007446:	68bb      	ldr	r3, [r7, #8]
 8007448:	2200      	movs	r2, #0
 800744a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800744c:	68b8      	ldr	r0, [r7, #8]
 800744e:	f000 f823 	bl	8007498 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007452:	68bb      	ldr	r3, [r7, #8]
 8007454:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007456:	f043 0210 	orr.w	r2, r3, #16
 800745a:	68bb      	ldr	r3, [r7, #8]
 800745c:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800745e:	68b8      	ldr	r0, [r7, #8]
 8007460:	f7ff ff6e 	bl	8007340 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007464:	bf00      	nop
 8007466:	3710      	adds	r7, #16
 8007468:	46bd      	mov	sp, r7
 800746a:	bd80      	pop	{r7, pc}

0800746c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800746c:	b480      	push	{r7}
 800746e:	b083      	sub	sp, #12
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	68da      	ldr	r2, [r3, #12]
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8007482:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2220      	movs	r2, #32
 8007488:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 800748c:	bf00      	nop
 800748e:	370c      	adds	r7, #12
 8007490:	46bd      	mov	sp, r7
 8007492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007496:	4770      	bx	lr

08007498 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007498:	b480      	push	{r7}
 800749a:	b083      	sub	sp, #12
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	68da      	ldr	r2, [r3, #12]
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80074ae:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	695a      	ldr	r2, [r3, #20]
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f022 0201 	bic.w	r2, r2, #1
 80074be:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2220      	movs	r2, #32
 80074c4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80074c8:	bf00      	nop
 80074ca:	370c      	adds	r7, #12
 80074cc:	46bd      	mov	sp, r7
 80074ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d2:	4770      	bx	lr

080074d4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b084      	sub	sp, #16
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074e0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	2200      	movs	r2, #0
 80074e6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	2200      	movs	r2, #0
 80074ec:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80074ee:	68f8      	ldr	r0, [r7, #12]
 80074f0:	f7ff ff26 	bl	8007340 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80074f4:	bf00      	nop
 80074f6:	3710      	adds	r7, #16
 80074f8:	46bd      	mov	sp, r7
 80074fa:	bd80      	pop	{r7, pc}

080074fc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80074fc:	b480      	push	{r7}
 80074fe:	b085      	sub	sp, #20
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800750a:	b2db      	uxtb	r3, r3
 800750c:	2b21      	cmp	r3, #33	; 0x21
 800750e:	d144      	bne.n	800759a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	689b      	ldr	r3, [r3, #8]
 8007514:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007518:	d11a      	bne.n	8007550 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6a1b      	ldr	r3, [r3, #32]
 800751e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	881b      	ldrh	r3, [r3, #0]
 8007524:	461a      	mov	r2, r3
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800752e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	691b      	ldr	r3, [r3, #16]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d105      	bne.n	8007544 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	6a1b      	ldr	r3, [r3, #32]
 800753c:	1c9a      	adds	r2, r3, #2
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	621a      	str	r2, [r3, #32]
 8007542:	e00e      	b.n	8007562 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	6a1b      	ldr	r3, [r3, #32]
 8007548:	1c5a      	adds	r2, r3, #1
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	621a      	str	r2, [r3, #32]
 800754e:	e008      	b.n	8007562 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6a1b      	ldr	r3, [r3, #32]
 8007554:	1c59      	adds	r1, r3, #1
 8007556:	687a      	ldr	r2, [r7, #4]
 8007558:	6211      	str	r1, [r2, #32]
 800755a:	781a      	ldrb	r2, [r3, #0]
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007566:	b29b      	uxth	r3, r3
 8007568:	3b01      	subs	r3, #1
 800756a:	b29b      	uxth	r3, r3
 800756c:	687a      	ldr	r2, [r7, #4]
 800756e:	4619      	mov	r1, r3
 8007570:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007572:	2b00      	cmp	r3, #0
 8007574:	d10f      	bne.n	8007596 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	68da      	ldr	r2, [r3, #12]
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007584:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	68da      	ldr	r2, [r3, #12]
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007594:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007596:	2300      	movs	r3, #0
 8007598:	e000      	b.n	800759c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800759a:	2302      	movs	r3, #2
  }
}
 800759c:	4618      	mov	r0, r3
 800759e:	3714      	adds	r7, #20
 80075a0:	46bd      	mov	sp, r7
 80075a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a6:	4770      	bx	lr

080075a8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b082      	sub	sp, #8
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	68da      	ldr	r2, [r3, #12]
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80075be:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2220      	movs	r2, #32
 80075c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80075c8:	6878      	ldr	r0, [r7, #4]
 80075ca:	f7ff fea5 	bl	8007318 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80075ce:	2300      	movs	r3, #0
}
 80075d0:	4618      	mov	r0, r3
 80075d2:	3708      	adds	r7, #8
 80075d4:	46bd      	mov	sp, r7
 80075d6:	bd80      	pop	{r7, pc}

080075d8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b084      	sub	sp, #16
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80075e6:	b2db      	uxtb	r3, r3
 80075e8:	2b22      	cmp	r3, #34	; 0x22
 80075ea:	d171      	bne.n	80076d0 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	689b      	ldr	r3, [r3, #8]
 80075f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075f4:	d123      	bne.n	800763e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075fa:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	691b      	ldr	r3, [r3, #16]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d10e      	bne.n	8007622 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	685b      	ldr	r3, [r3, #4]
 800760a:	b29b      	uxth	r3, r3
 800760c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007610:	b29a      	uxth	r2, r3
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800761a:	1c9a      	adds	r2, r3, #2
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	629a      	str	r2, [r3, #40]	; 0x28
 8007620:	e029      	b.n	8007676 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	685b      	ldr	r3, [r3, #4]
 8007628:	b29b      	uxth	r3, r3
 800762a:	b2db      	uxtb	r3, r3
 800762c:	b29a      	uxth	r2, r3
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007636:	1c5a      	adds	r2, r3, #1
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	629a      	str	r2, [r3, #40]	; 0x28
 800763c:	e01b      	b.n	8007676 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	691b      	ldr	r3, [r3, #16]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d10a      	bne.n	800765c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	6858      	ldr	r0, [r3, #4]
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007650:	1c59      	adds	r1, r3, #1
 8007652:	687a      	ldr	r2, [r7, #4]
 8007654:	6291      	str	r1, [r2, #40]	; 0x28
 8007656:	b2c2      	uxtb	r2, r0
 8007658:	701a      	strb	r2, [r3, #0]
 800765a:	e00c      	b.n	8007676 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	685b      	ldr	r3, [r3, #4]
 8007662:	b2da      	uxtb	r2, r3
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007668:	1c58      	adds	r0, r3, #1
 800766a:	6879      	ldr	r1, [r7, #4]
 800766c:	6288      	str	r0, [r1, #40]	; 0x28
 800766e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007672:	b2d2      	uxtb	r2, r2
 8007674:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800767a:	b29b      	uxth	r3, r3
 800767c:	3b01      	subs	r3, #1
 800767e:	b29b      	uxth	r3, r3
 8007680:	687a      	ldr	r2, [r7, #4]
 8007682:	4619      	mov	r1, r3
 8007684:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007686:	2b00      	cmp	r3, #0
 8007688:	d120      	bne.n	80076cc <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	68da      	ldr	r2, [r3, #12]
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f022 0220 	bic.w	r2, r2, #32
 8007698:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	68da      	ldr	r2, [r3, #12]
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80076a8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	695a      	ldr	r2, [r3, #20]
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f022 0201 	bic.w	r2, r2, #1
 80076b8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	2220      	movs	r2, #32
 80076be:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80076c2:	6878      	ldr	r0, [r7, #4]
 80076c4:	f7f9 fd20 	bl	8001108 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80076c8:	2300      	movs	r3, #0
 80076ca:	e002      	b.n	80076d2 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80076cc:	2300      	movs	r3, #0
 80076ce:	e000      	b.n	80076d2 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80076d0:	2302      	movs	r3, #2
  }
}
 80076d2:	4618      	mov	r0, r3
 80076d4:	3710      	adds	r7, #16
 80076d6:	46bd      	mov	sp, r7
 80076d8:	bd80      	pop	{r7, pc}
	...

080076dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80076dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076e0:	b0bd      	sub	sp, #244	; 0xf4
 80076e2:	af00      	add	r7, sp, #0
 80076e4:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80076e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	691b      	ldr	r3, [r3, #16]
 80076f0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80076f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076f8:	68d9      	ldr	r1, [r3, #12]
 80076fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076fe:	681a      	ldr	r2, [r3, #0]
 8007700:	ea40 0301 	orr.w	r3, r0, r1
 8007704:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007706:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800770a:	689a      	ldr	r2, [r3, #8]
 800770c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007710:	691b      	ldr	r3, [r3, #16]
 8007712:	431a      	orrs	r2, r3
 8007714:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007718:	695b      	ldr	r3, [r3, #20]
 800771a:	431a      	orrs	r2, r3
 800771c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007720:	69db      	ldr	r3, [r3, #28]
 8007722:	4313      	orrs	r3, r2
 8007724:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 8007728:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	68db      	ldr	r3, [r3, #12]
 8007730:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007734:	f021 010c 	bic.w	r1, r1, #12
 8007738:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800773c:	681a      	ldr	r2, [r3, #0]
 800773e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007742:	430b      	orrs	r3, r1
 8007744:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007746:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	695b      	ldr	r3, [r3, #20]
 800774e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007752:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007756:	6999      	ldr	r1, [r3, #24]
 8007758:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800775c:	681a      	ldr	r2, [r3, #0]
 800775e:	ea40 0301 	orr.w	r3, r0, r1
 8007762:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007764:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007768:	69db      	ldr	r3, [r3, #28]
 800776a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800776e:	f040 81a5 	bne.w	8007abc <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007772:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007776:	681a      	ldr	r2, [r3, #0]
 8007778:	4bcd      	ldr	r3, [pc, #820]	; (8007ab0 <UART_SetConfig+0x3d4>)
 800777a:	429a      	cmp	r2, r3
 800777c:	d006      	beq.n	800778c <UART_SetConfig+0xb0>
 800777e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007782:	681a      	ldr	r2, [r3, #0]
 8007784:	4bcb      	ldr	r3, [pc, #812]	; (8007ab4 <UART_SetConfig+0x3d8>)
 8007786:	429a      	cmp	r2, r3
 8007788:	f040 80cb 	bne.w	8007922 <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800778c:	f7fe fb84 	bl	8005e98 <HAL_RCC_GetPCLK2Freq>
 8007790:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007794:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007798:	461c      	mov	r4, r3
 800779a:	f04f 0500 	mov.w	r5, #0
 800779e:	4622      	mov	r2, r4
 80077a0:	462b      	mov	r3, r5
 80077a2:	1891      	adds	r1, r2, r2
 80077a4:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 80077a8:	415b      	adcs	r3, r3
 80077aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80077ae:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80077b2:	1912      	adds	r2, r2, r4
 80077b4:	eb45 0303 	adc.w	r3, r5, r3
 80077b8:	f04f 0000 	mov.w	r0, #0
 80077bc:	f04f 0100 	mov.w	r1, #0
 80077c0:	00d9      	lsls	r1, r3, #3
 80077c2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80077c6:	00d0      	lsls	r0, r2, #3
 80077c8:	4602      	mov	r2, r0
 80077ca:	460b      	mov	r3, r1
 80077cc:	1911      	adds	r1, r2, r4
 80077ce:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 80077d2:	416b      	adcs	r3, r5
 80077d4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80077d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077dc:	685b      	ldr	r3, [r3, #4]
 80077de:	461a      	mov	r2, r3
 80077e0:	f04f 0300 	mov.w	r3, #0
 80077e4:	1891      	adds	r1, r2, r2
 80077e6:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 80077ea:	415b      	adcs	r3, r3
 80077ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80077f0:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 80077f4:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 80077f8:	f7f9 f9c8 	bl	8000b8c <__aeabi_uldivmod>
 80077fc:	4602      	mov	r2, r0
 80077fe:	460b      	mov	r3, r1
 8007800:	4bad      	ldr	r3, [pc, #692]	; (8007ab8 <UART_SetConfig+0x3dc>)
 8007802:	fba3 2302 	umull	r2, r3, r3, r2
 8007806:	095b      	lsrs	r3, r3, #5
 8007808:	011e      	lsls	r6, r3, #4
 800780a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800780e:	461c      	mov	r4, r3
 8007810:	f04f 0500 	mov.w	r5, #0
 8007814:	4622      	mov	r2, r4
 8007816:	462b      	mov	r3, r5
 8007818:	1891      	adds	r1, r2, r2
 800781a:	67b9      	str	r1, [r7, #120]	; 0x78
 800781c:	415b      	adcs	r3, r3
 800781e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007820:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8007824:	1912      	adds	r2, r2, r4
 8007826:	eb45 0303 	adc.w	r3, r5, r3
 800782a:	f04f 0000 	mov.w	r0, #0
 800782e:	f04f 0100 	mov.w	r1, #0
 8007832:	00d9      	lsls	r1, r3, #3
 8007834:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007838:	00d0      	lsls	r0, r2, #3
 800783a:	4602      	mov	r2, r0
 800783c:	460b      	mov	r3, r1
 800783e:	1911      	adds	r1, r2, r4
 8007840:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8007844:	416b      	adcs	r3, r5
 8007846:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800784a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800784e:	685b      	ldr	r3, [r3, #4]
 8007850:	461a      	mov	r2, r3
 8007852:	f04f 0300 	mov.w	r3, #0
 8007856:	1891      	adds	r1, r2, r2
 8007858:	6739      	str	r1, [r7, #112]	; 0x70
 800785a:	415b      	adcs	r3, r3
 800785c:	677b      	str	r3, [r7, #116]	; 0x74
 800785e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8007862:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8007866:	f7f9 f991 	bl	8000b8c <__aeabi_uldivmod>
 800786a:	4602      	mov	r2, r0
 800786c:	460b      	mov	r3, r1
 800786e:	4b92      	ldr	r3, [pc, #584]	; (8007ab8 <UART_SetConfig+0x3dc>)
 8007870:	fba3 1302 	umull	r1, r3, r3, r2
 8007874:	095b      	lsrs	r3, r3, #5
 8007876:	2164      	movs	r1, #100	; 0x64
 8007878:	fb01 f303 	mul.w	r3, r1, r3
 800787c:	1ad3      	subs	r3, r2, r3
 800787e:	00db      	lsls	r3, r3, #3
 8007880:	3332      	adds	r3, #50	; 0x32
 8007882:	4a8d      	ldr	r2, [pc, #564]	; (8007ab8 <UART_SetConfig+0x3dc>)
 8007884:	fba2 2303 	umull	r2, r3, r2, r3
 8007888:	095b      	lsrs	r3, r3, #5
 800788a:	005b      	lsls	r3, r3, #1
 800788c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007890:	441e      	add	r6, r3
 8007892:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007896:	4618      	mov	r0, r3
 8007898:	f04f 0100 	mov.w	r1, #0
 800789c:	4602      	mov	r2, r0
 800789e:	460b      	mov	r3, r1
 80078a0:	1894      	adds	r4, r2, r2
 80078a2:	66bc      	str	r4, [r7, #104]	; 0x68
 80078a4:	415b      	adcs	r3, r3
 80078a6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80078a8:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80078ac:	1812      	adds	r2, r2, r0
 80078ae:	eb41 0303 	adc.w	r3, r1, r3
 80078b2:	f04f 0400 	mov.w	r4, #0
 80078b6:	f04f 0500 	mov.w	r5, #0
 80078ba:	00dd      	lsls	r5, r3, #3
 80078bc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80078c0:	00d4      	lsls	r4, r2, #3
 80078c2:	4622      	mov	r2, r4
 80078c4:	462b      	mov	r3, r5
 80078c6:	1814      	adds	r4, r2, r0
 80078c8:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 80078cc:	414b      	adcs	r3, r1
 80078ce:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80078d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078d6:	685b      	ldr	r3, [r3, #4]
 80078d8:	461a      	mov	r2, r3
 80078da:	f04f 0300 	mov.w	r3, #0
 80078de:	1891      	adds	r1, r2, r2
 80078e0:	6639      	str	r1, [r7, #96]	; 0x60
 80078e2:	415b      	adcs	r3, r3
 80078e4:	667b      	str	r3, [r7, #100]	; 0x64
 80078e6:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80078ea:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80078ee:	f7f9 f94d 	bl	8000b8c <__aeabi_uldivmod>
 80078f2:	4602      	mov	r2, r0
 80078f4:	460b      	mov	r3, r1
 80078f6:	4b70      	ldr	r3, [pc, #448]	; (8007ab8 <UART_SetConfig+0x3dc>)
 80078f8:	fba3 1302 	umull	r1, r3, r3, r2
 80078fc:	095b      	lsrs	r3, r3, #5
 80078fe:	2164      	movs	r1, #100	; 0x64
 8007900:	fb01 f303 	mul.w	r3, r1, r3
 8007904:	1ad3      	subs	r3, r2, r3
 8007906:	00db      	lsls	r3, r3, #3
 8007908:	3332      	adds	r3, #50	; 0x32
 800790a:	4a6b      	ldr	r2, [pc, #428]	; (8007ab8 <UART_SetConfig+0x3dc>)
 800790c:	fba2 2303 	umull	r2, r3, r2, r3
 8007910:	095b      	lsrs	r3, r3, #5
 8007912:	f003 0207 	and.w	r2, r3, #7
 8007916:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	4432      	add	r2, r6
 800791e:	609a      	str	r2, [r3, #8]
 8007920:	e26d      	b.n	8007dfe <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007922:	f7fe faa5 	bl	8005e70 <HAL_RCC_GetPCLK1Freq>
 8007926:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800792a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800792e:	461c      	mov	r4, r3
 8007930:	f04f 0500 	mov.w	r5, #0
 8007934:	4622      	mov	r2, r4
 8007936:	462b      	mov	r3, r5
 8007938:	1891      	adds	r1, r2, r2
 800793a:	65b9      	str	r1, [r7, #88]	; 0x58
 800793c:	415b      	adcs	r3, r3
 800793e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007940:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007944:	1912      	adds	r2, r2, r4
 8007946:	eb45 0303 	adc.w	r3, r5, r3
 800794a:	f04f 0000 	mov.w	r0, #0
 800794e:	f04f 0100 	mov.w	r1, #0
 8007952:	00d9      	lsls	r1, r3, #3
 8007954:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007958:	00d0      	lsls	r0, r2, #3
 800795a:	4602      	mov	r2, r0
 800795c:	460b      	mov	r3, r1
 800795e:	1911      	adds	r1, r2, r4
 8007960:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8007964:	416b      	adcs	r3, r5
 8007966:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800796a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800796e:	685b      	ldr	r3, [r3, #4]
 8007970:	461a      	mov	r2, r3
 8007972:	f04f 0300 	mov.w	r3, #0
 8007976:	1891      	adds	r1, r2, r2
 8007978:	6539      	str	r1, [r7, #80]	; 0x50
 800797a:	415b      	adcs	r3, r3
 800797c:	657b      	str	r3, [r7, #84]	; 0x54
 800797e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007982:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8007986:	f7f9 f901 	bl	8000b8c <__aeabi_uldivmod>
 800798a:	4602      	mov	r2, r0
 800798c:	460b      	mov	r3, r1
 800798e:	4b4a      	ldr	r3, [pc, #296]	; (8007ab8 <UART_SetConfig+0x3dc>)
 8007990:	fba3 2302 	umull	r2, r3, r3, r2
 8007994:	095b      	lsrs	r3, r3, #5
 8007996:	011e      	lsls	r6, r3, #4
 8007998:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800799c:	461c      	mov	r4, r3
 800799e:	f04f 0500 	mov.w	r5, #0
 80079a2:	4622      	mov	r2, r4
 80079a4:	462b      	mov	r3, r5
 80079a6:	1891      	adds	r1, r2, r2
 80079a8:	64b9      	str	r1, [r7, #72]	; 0x48
 80079aa:	415b      	adcs	r3, r3
 80079ac:	64fb      	str	r3, [r7, #76]	; 0x4c
 80079ae:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80079b2:	1912      	adds	r2, r2, r4
 80079b4:	eb45 0303 	adc.w	r3, r5, r3
 80079b8:	f04f 0000 	mov.w	r0, #0
 80079bc:	f04f 0100 	mov.w	r1, #0
 80079c0:	00d9      	lsls	r1, r3, #3
 80079c2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80079c6:	00d0      	lsls	r0, r2, #3
 80079c8:	4602      	mov	r2, r0
 80079ca:	460b      	mov	r3, r1
 80079cc:	1911      	adds	r1, r2, r4
 80079ce:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 80079d2:	416b      	adcs	r3, r5
 80079d4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80079d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079dc:	685b      	ldr	r3, [r3, #4]
 80079de:	461a      	mov	r2, r3
 80079e0:	f04f 0300 	mov.w	r3, #0
 80079e4:	1891      	adds	r1, r2, r2
 80079e6:	6439      	str	r1, [r7, #64]	; 0x40
 80079e8:	415b      	adcs	r3, r3
 80079ea:	647b      	str	r3, [r7, #68]	; 0x44
 80079ec:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80079f0:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 80079f4:	f7f9 f8ca 	bl	8000b8c <__aeabi_uldivmod>
 80079f8:	4602      	mov	r2, r0
 80079fa:	460b      	mov	r3, r1
 80079fc:	4b2e      	ldr	r3, [pc, #184]	; (8007ab8 <UART_SetConfig+0x3dc>)
 80079fe:	fba3 1302 	umull	r1, r3, r3, r2
 8007a02:	095b      	lsrs	r3, r3, #5
 8007a04:	2164      	movs	r1, #100	; 0x64
 8007a06:	fb01 f303 	mul.w	r3, r1, r3
 8007a0a:	1ad3      	subs	r3, r2, r3
 8007a0c:	00db      	lsls	r3, r3, #3
 8007a0e:	3332      	adds	r3, #50	; 0x32
 8007a10:	4a29      	ldr	r2, [pc, #164]	; (8007ab8 <UART_SetConfig+0x3dc>)
 8007a12:	fba2 2303 	umull	r2, r3, r2, r3
 8007a16:	095b      	lsrs	r3, r3, #5
 8007a18:	005b      	lsls	r3, r3, #1
 8007a1a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007a1e:	441e      	add	r6, r3
 8007a20:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007a24:	4618      	mov	r0, r3
 8007a26:	f04f 0100 	mov.w	r1, #0
 8007a2a:	4602      	mov	r2, r0
 8007a2c:	460b      	mov	r3, r1
 8007a2e:	1894      	adds	r4, r2, r2
 8007a30:	63bc      	str	r4, [r7, #56]	; 0x38
 8007a32:	415b      	adcs	r3, r3
 8007a34:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007a36:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007a3a:	1812      	adds	r2, r2, r0
 8007a3c:	eb41 0303 	adc.w	r3, r1, r3
 8007a40:	f04f 0400 	mov.w	r4, #0
 8007a44:	f04f 0500 	mov.w	r5, #0
 8007a48:	00dd      	lsls	r5, r3, #3
 8007a4a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007a4e:	00d4      	lsls	r4, r2, #3
 8007a50:	4622      	mov	r2, r4
 8007a52:	462b      	mov	r3, r5
 8007a54:	1814      	adds	r4, r2, r0
 8007a56:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 8007a5a:	414b      	adcs	r3, r1
 8007a5c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007a60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a64:	685b      	ldr	r3, [r3, #4]
 8007a66:	461a      	mov	r2, r3
 8007a68:	f04f 0300 	mov.w	r3, #0
 8007a6c:	1891      	adds	r1, r2, r2
 8007a6e:	6339      	str	r1, [r7, #48]	; 0x30
 8007a70:	415b      	adcs	r3, r3
 8007a72:	637b      	str	r3, [r7, #52]	; 0x34
 8007a74:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007a78:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007a7c:	f7f9 f886 	bl	8000b8c <__aeabi_uldivmod>
 8007a80:	4602      	mov	r2, r0
 8007a82:	460b      	mov	r3, r1
 8007a84:	4b0c      	ldr	r3, [pc, #48]	; (8007ab8 <UART_SetConfig+0x3dc>)
 8007a86:	fba3 1302 	umull	r1, r3, r3, r2
 8007a8a:	095b      	lsrs	r3, r3, #5
 8007a8c:	2164      	movs	r1, #100	; 0x64
 8007a8e:	fb01 f303 	mul.w	r3, r1, r3
 8007a92:	1ad3      	subs	r3, r2, r3
 8007a94:	00db      	lsls	r3, r3, #3
 8007a96:	3332      	adds	r3, #50	; 0x32
 8007a98:	4a07      	ldr	r2, [pc, #28]	; (8007ab8 <UART_SetConfig+0x3dc>)
 8007a9a:	fba2 2303 	umull	r2, r3, r2, r3
 8007a9e:	095b      	lsrs	r3, r3, #5
 8007aa0:	f003 0207 	and.w	r2, r3, #7
 8007aa4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	4432      	add	r2, r6
 8007aac:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8007aae:	e1a6      	b.n	8007dfe <UART_SetConfig+0x722>
 8007ab0:	40011000 	.word	0x40011000
 8007ab4:	40011400 	.word	0x40011400
 8007ab8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007abc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ac0:	681a      	ldr	r2, [r3, #0]
 8007ac2:	4bd1      	ldr	r3, [pc, #836]	; (8007e08 <UART_SetConfig+0x72c>)
 8007ac4:	429a      	cmp	r2, r3
 8007ac6:	d006      	beq.n	8007ad6 <UART_SetConfig+0x3fa>
 8007ac8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007acc:	681a      	ldr	r2, [r3, #0]
 8007ace:	4bcf      	ldr	r3, [pc, #828]	; (8007e0c <UART_SetConfig+0x730>)
 8007ad0:	429a      	cmp	r2, r3
 8007ad2:	f040 80ca 	bne.w	8007c6a <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 8007ad6:	f7fe f9df 	bl	8005e98 <HAL_RCC_GetPCLK2Freq>
 8007ada:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007ade:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007ae2:	461c      	mov	r4, r3
 8007ae4:	f04f 0500 	mov.w	r5, #0
 8007ae8:	4622      	mov	r2, r4
 8007aea:	462b      	mov	r3, r5
 8007aec:	1891      	adds	r1, r2, r2
 8007aee:	62b9      	str	r1, [r7, #40]	; 0x28
 8007af0:	415b      	adcs	r3, r3
 8007af2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007af4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007af8:	1912      	adds	r2, r2, r4
 8007afa:	eb45 0303 	adc.w	r3, r5, r3
 8007afe:	f04f 0000 	mov.w	r0, #0
 8007b02:	f04f 0100 	mov.w	r1, #0
 8007b06:	00d9      	lsls	r1, r3, #3
 8007b08:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007b0c:	00d0      	lsls	r0, r2, #3
 8007b0e:	4602      	mov	r2, r0
 8007b10:	460b      	mov	r3, r1
 8007b12:	eb12 0a04 	adds.w	sl, r2, r4
 8007b16:	eb43 0b05 	adc.w	fp, r3, r5
 8007b1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b1e:	685b      	ldr	r3, [r3, #4]
 8007b20:	4618      	mov	r0, r3
 8007b22:	f04f 0100 	mov.w	r1, #0
 8007b26:	f04f 0200 	mov.w	r2, #0
 8007b2a:	f04f 0300 	mov.w	r3, #0
 8007b2e:	008b      	lsls	r3, r1, #2
 8007b30:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007b34:	0082      	lsls	r2, r0, #2
 8007b36:	4650      	mov	r0, sl
 8007b38:	4659      	mov	r1, fp
 8007b3a:	f7f9 f827 	bl	8000b8c <__aeabi_uldivmod>
 8007b3e:	4602      	mov	r2, r0
 8007b40:	460b      	mov	r3, r1
 8007b42:	4bb3      	ldr	r3, [pc, #716]	; (8007e10 <UART_SetConfig+0x734>)
 8007b44:	fba3 2302 	umull	r2, r3, r3, r2
 8007b48:	095b      	lsrs	r3, r3, #5
 8007b4a:	011e      	lsls	r6, r3, #4
 8007b4c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007b50:	4618      	mov	r0, r3
 8007b52:	f04f 0100 	mov.w	r1, #0
 8007b56:	4602      	mov	r2, r0
 8007b58:	460b      	mov	r3, r1
 8007b5a:	1894      	adds	r4, r2, r2
 8007b5c:	623c      	str	r4, [r7, #32]
 8007b5e:	415b      	adcs	r3, r3
 8007b60:	627b      	str	r3, [r7, #36]	; 0x24
 8007b62:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007b66:	1812      	adds	r2, r2, r0
 8007b68:	eb41 0303 	adc.w	r3, r1, r3
 8007b6c:	f04f 0400 	mov.w	r4, #0
 8007b70:	f04f 0500 	mov.w	r5, #0
 8007b74:	00dd      	lsls	r5, r3, #3
 8007b76:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007b7a:	00d4      	lsls	r4, r2, #3
 8007b7c:	4622      	mov	r2, r4
 8007b7e:	462b      	mov	r3, r5
 8007b80:	1814      	adds	r4, r2, r0
 8007b82:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8007b86:	414b      	adcs	r3, r1
 8007b88:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007b8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b90:	685b      	ldr	r3, [r3, #4]
 8007b92:	4618      	mov	r0, r3
 8007b94:	f04f 0100 	mov.w	r1, #0
 8007b98:	f04f 0200 	mov.w	r2, #0
 8007b9c:	f04f 0300 	mov.w	r3, #0
 8007ba0:	008b      	lsls	r3, r1, #2
 8007ba2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007ba6:	0082      	lsls	r2, r0, #2
 8007ba8:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8007bac:	f7f8 ffee 	bl	8000b8c <__aeabi_uldivmod>
 8007bb0:	4602      	mov	r2, r0
 8007bb2:	460b      	mov	r3, r1
 8007bb4:	4b96      	ldr	r3, [pc, #600]	; (8007e10 <UART_SetConfig+0x734>)
 8007bb6:	fba3 1302 	umull	r1, r3, r3, r2
 8007bba:	095b      	lsrs	r3, r3, #5
 8007bbc:	2164      	movs	r1, #100	; 0x64
 8007bbe:	fb01 f303 	mul.w	r3, r1, r3
 8007bc2:	1ad3      	subs	r3, r2, r3
 8007bc4:	011b      	lsls	r3, r3, #4
 8007bc6:	3332      	adds	r3, #50	; 0x32
 8007bc8:	4a91      	ldr	r2, [pc, #580]	; (8007e10 <UART_SetConfig+0x734>)
 8007bca:	fba2 2303 	umull	r2, r3, r2, r3
 8007bce:	095b      	lsrs	r3, r3, #5
 8007bd0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007bd4:	441e      	add	r6, r3
 8007bd6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007bda:	4618      	mov	r0, r3
 8007bdc:	f04f 0100 	mov.w	r1, #0
 8007be0:	4602      	mov	r2, r0
 8007be2:	460b      	mov	r3, r1
 8007be4:	1894      	adds	r4, r2, r2
 8007be6:	61bc      	str	r4, [r7, #24]
 8007be8:	415b      	adcs	r3, r3
 8007bea:	61fb      	str	r3, [r7, #28]
 8007bec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007bf0:	1812      	adds	r2, r2, r0
 8007bf2:	eb41 0303 	adc.w	r3, r1, r3
 8007bf6:	f04f 0400 	mov.w	r4, #0
 8007bfa:	f04f 0500 	mov.w	r5, #0
 8007bfe:	00dd      	lsls	r5, r3, #3
 8007c00:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007c04:	00d4      	lsls	r4, r2, #3
 8007c06:	4622      	mov	r2, r4
 8007c08:	462b      	mov	r3, r5
 8007c0a:	1814      	adds	r4, r2, r0
 8007c0c:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 8007c10:	414b      	adcs	r3, r1
 8007c12:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007c16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c1a:	685b      	ldr	r3, [r3, #4]
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	f04f 0100 	mov.w	r1, #0
 8007c22:	f04f 0200 	mov.w	r2, #0
 8007c26:	f04f 0300 	mov.w	r3, #0
 8007c2a:	008b      	lsls	r3, r1, #2
 8007c2c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007c30:	0082      	lsls	r2, r0, #2
 8007c32:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8007c36:	f7f8 ffa9 	bl	8000b8c <__aeabi_uldivmod>
 8007c3a:	4602      	mov	r2, r0
 8007c3c:	460b      	mov	r3, r1
 8007c3e:	4b74      	ldr	r3, [pc, #464]	; (8007e10 <UART_SetConfig+0x734>)
 8007c40:	fba3 1302 	umull	r1, r3, r3, r2
 8007c44:	095b      	lsrs	r3, r3, #5
 8007c46:	2164      	movs	r1, #100	; 0x64
 8007c48:	fb01 f303 	mul.w	r3, r1, r3
 8007c4c:	1ad3      	subs	r3, r2, r3
 8007c4e:	011b      	lsls	r3, r3, #4
 8007c50:	3332      	adds	r3, #50	; 0x32
 8007c52:	4a6f      	ldr	r2, [pc, #444]	; (8007e10 <UART_SetConfig+0x734>)
 8007c54:	fba2 2303 	umull	r2, r3, r2, r3
 8007c58:	095b      	lsrs	r3, r3, #5
 8007c5a:	f003 020f 	and.w	r2, r3, #15
 8007c5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	4432      	add	r2, r6
 8007c66:	609a      	str	r2, [r3, #8]
 8007c68:	e0c9      	b.n	8007dfe <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 8007c6a:	f7fe f901 	bl	8005e70 <HAL_RCC_GetPCLK1Freq>
 8007c6e:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007c72:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007c76:	461c      	mov	r4, r3
 8007c78:	f04f 0500 	mov.w	r5, #0
 8007c7c:	4622      	mov	r2, r4
 8007c7e:	462b      	mov	r3, r5
 8007c80:	1891      	adds	r1, r2, r2
 8007c82:	6139      	str	r1, [r7, #16]
 8007c84:	415b      	adcs	r3, r3
 8007c86:	617b      	str	r3, [r7, #20]
 8007c88:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007c8c:	1912      	adds	r2, r2, r4
 8007c8e:	eb45 0303 	adc.w	r3, r5, r3
 8007c92:	f04f 0000 	mov.w	r0, #0
 8007c96:	f04f 0100 	mov.w	r1, #0
 8007c9a:	00d9      	lsls	r1, r3, #3
 8007c9c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007ca0:	00d0      	lsls	r0, r2, #3
 8007ca2:	4602      	mov	r2, r0
 8007ca4:	460b      	mov	r3, r1
 8007ca6:	eb12 0804 	adds.w	r8, r2, r4
 8007caa:	eb43 0905 	adc.w	r9, r3, r5
 8007cae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007cb2:	685b      	ldr	r3, [r3, #4]
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	f04f 0100 	mov.w	r1, #0
 8007cba:	f04f 0200 	mov.w	r2, #0
 8007cbe:	f04f 0300 	mov.w	r3, #0
 8007cc2:	008b      	lsls	r3, r1, #2
 8007cc4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007cc8:	0082      	lsls	r2, r0, #2
 8007cca:	4640      	mov	r0, r8
 8007ccc:	4649      	mov	r1, r9
 8007cce:	f7f8 ff5d 	bl	8000b8c <__aeabi_uldivmod>
 8007cd2:	4602      	mov	r2, r0
 8007cd4:	460b      	mov	r3, r1
 8007cd6:	4b4e      	ldr	r3, [pc, #312]	; (8007e10 <UART_SetConfig+0x734>)
 8007cd8:	fba3 2302 	umull	r2, r3, r3, r2
 8007cdc:	095b      	lsrs	r3, r3, #5
 8007cde:	011e      	lsls	r6, r3, #4
 8007ce0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	f04f 0100 	mov.w	r1, #0
 8007cea:	4602      	mov	r2, r0
 8007cec:	460b      	mov	r3, r1
 8007cee:	1894      	adds	r4, r2, r2
 8007cf0:	60bc      	str	r4, [r7, #8]
 8007cf2:	415b      	adcs	r3, r3
 8007cf4:	60fb      	str	r3, [r7, #12]
 8007cf6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007cfa:	1812      	adds	r2, r2, r0
 8007cfc:	eb41 0303 	adc.w	r3, r1, r3
 8007d00:	f04f 0400 	mov.w	r4, #0
 8007d04:	f04f 0500 	mov.w	r5, #0
 8007d08:	00dd      	lsls	r5, r3, #3
 8007d0a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007d0e:	00d4      	lsls	r4, r2, #3
 8007d10:	4622      	mov	r2, r4
 8007d12:	462b      	mov	r3, r5
 8007d14:	1814      	adds	r4, r2, r0
 8007d16:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8007d1a:	414b      	adcs	r3, r1
 8007d1c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007d20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d24:	685b      	ldr	r3, [r3, #4]
 8007d26:	4618      	mov	r0, r3
 8007d28:	f04f 0100 	mov.w	r1, #0
 8007d2c:	f04f 0200 	mov.w	r2, #0
 8007d30:	f04f 0300 	mov.w	r3, #0
 8007d34:	008b      	lsls	r3, r1, #2
 8007d36:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007d3a:	0082      	lsls	r2, r0, #2
 8007d3c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007d40:	f7f8 ff24 	bl	8000b8c <__aeabi_uldivmod>
 8007d44:	4602      	mov	r2, r0
 8007d46:	460b      	mov	r3, r1
 8007d48:	4b31      	ldr	r3, [pc, #196]	; (8007e10 <UART_SetConfig+0x734>)
 8007d4a:	fba3 1302 	umull	r1, r3, r3, r2
 8007d4e:	095b      	lsrs	r3, r3, #5
 8007d50:	2164      	movs	r1, #100	; 0x64
 8007d52:	fb01 f303 	mul.w	r3, r1, r3
 8007d56:	1ad3      	subs	r3, r2, r3
 8007d58:	011b      	lsls	r3, r3, #4
 8007d5a:	3332      	adds	r3, #50	; 0x32
 8007d5c:	4a2c      	ldr	r2, [pc, #176]	; (8007e10 <UART_SetConfig+0x734>)
 8007d5e:	fba2 2303 	umull	r2, r3, r2, r3
 8007d62:	095b      	lsrs	r3, r3, #5
 8007d64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007d68:	441e      	add	r6, r3
 8007d6a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007d6e:	4618      	mov	r0, r3
 8007d70:	f04f 0100 	mov.w	r1, #0
 8007d74:	4602      	mov	r2, r0
 8007d76:	460b      	mov	r3, r1
 8007d78:	1894      	adds	r4, r2, r2
 8007d7a:	603c      	str	r4, [r7, #0]
 8007d7c:	415b      	adcs	r3, r3
 8007d7e:	607b      	str	r3, [r7, #4]
 8007d80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d84:	1812      	adds	r2, r2, r0
 8007d86:	eb41 0303 	adc.w	r3, r1, r3
 8007d8a:	f04f 0400 	mov.w	r4, #0
 8007d8e:	f04f 0500 	mov.w	r5, #0
 8007d92:	00dd      	lsls	r5, r3, #3
 8007d94:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007d98:	00d4      	lsls	r4, r2, #3
 8007d9a:	4622      	mov	r2, r4
 8007d9c:	462b      	mov	r3, r5
 8007d9e:	1814      	adds	r4, r2, r0
 8007da0:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8007da4:	414b      	adcs	r3, r1
 8007da6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007daa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007dae:	685b      	ldr	r3, [r3, #4]
 8007db0:	4618      	mov	r0, r3
 8007db2:	f04f 0100 	mov.w	r1, #0
 8007db6:	f04f 0200 	mov.w	r2, #0
 8007dba:	f04f 0300 	mov.w	r3, #0
 8007dbe:	008b      	lsls	r3, r1, #2
 8007dc0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007dc4:	0082      	lsls	r2, r0, #2
 8007dc6:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8007dca:	f7f8 fedf 	bl	8000b8c <__aeabi_uldivmod>
 8007dce:	4602      	mov	r2, r0
 8007dd0:	460b      	mov	r3, r1
 8007dd2:	4b0f      	ldr	r3, [pc, #60]	; (8007e10 <UART_SetConfig+0x734>)
 8007dd4:	fba3 1302 	umull	r1, r3, r3, r2
 8007dd8:	095b      	lsrs	r3, r3, #5
 8007dda:	2164      	movs	r1, #100	; 0x64
 8007ddc:	fb01 f303 	mul.w	r3, r1, r3
 8007de0:	1ad3      	subs	r3, r2, r3
 8007de2:	011b      	lsls	r3, r3, #4
 8007de4:	3332      	adds	r3, #50	; 0x32
 8007de6:	4a0a      	ldr	r2, [pc, #40]	; (8007e10 <UART_SetConfig+0x734>)
 8007de8:	fba2 2303 	umull	r2, r3, r2, r3
 8007dec:	095b      	lsrs	r3, r3, #5
 8007dee:	f003 020f 	and.w	r2, r3, #15
 8007df2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	4432      	add	r2, r6
 8007dfa:	609a      	str	r2, [r3, #8]
}
 8007dfc:	e7ff      	b.n	8007dfe <UART_SetConfig+0x722>
 8007dfe:	bf00      	nop
 8007e00:	37f4      	adds	r7, #244	; 0xf4
 8007e02:	46bd      	mov	sp, r7
 8007e04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e08:	40011000 	.word	0x40011000
 8007e0c:	40011400 	.word	0x40011400
 8007e10:	51eb851f 	.word	0x51eb851f

08007e14 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007e14:	b480      	push	{r7}
 8007e16:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8007e18:	bf00      	nop
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e20:	4770      	bx	lr
	...

08007e24 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007e24:	b480      	push	{r7}
 8007e26:	b085      	sub	sp, #20
 8007e28:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007e2a:	f3ef 8305 	mrs	r3, IPSR
 8007e2e:	60bb      	str	r3, [r7, #8]
  return(result);
 8007e30:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d10f      	bne.n	8007e56 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007e36:	f3ef 8310 	mrs	r3, PRIMASK
 8007e3a:	607b      	str	r3, [r7, #4]
  return(result);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d105      	bne.n	8007e4e <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007e42:	f3ef 8311 	mrs	r3, BASEPRI
 8007e46:	603b      	str	r3, [r7, #0]
  return(result);
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d007      	beq.n	8007e5e <osKernelInitialize+0x3a>
 8007e4e:	4b0e      	ldr	r3, [pc, #56]	; (8007e88 <osKernelInitialize+0x64>)
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	2b02      	cmp	r3, #2
 8007e54:	d103      	bne.n	8007e5e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8007e56:	f06f 0305 	mvn.w	r3, #5
 8007e5a:	60fb      	str	r3, [r7, #12]
 8007e5c:	e00c      	b.n	8007e78 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007e5e:	4b0a      	ldr	r3, [pc, #40]	; (8007e88 <osKernelInitialize+0x64>)
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d105      	bne.n	8007e72 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007e66:	4b08      	ldr	r3, [pc, #32]	; (8007e88 <osKernelInitialize+0x64>)
 8007e68:	2201      	movs	r2, #1
 8007e6a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	60fb      	str	r3, [r7, #12]
 8007e70:	e002      	b.n	8007e78 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8007e72:	f04f 33ff 	mov.w	r3, #4294967295
 8007e76:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8007e78:	68fb      	ldr	r3, [r7, #12]
}
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	3714      	adds	r7, #20
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e84:	4770      	bx	lr
 8007e86:	bf00      	nop
 8007e88:	20004ed0 	.word	0x20004ed0

08007e8c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b084      	sub	sp, #16
 8007e90:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007e92:	f3ef 8305 	mrs	r3, IPSR
 8007e96:	60bb      	str	r3, [r7, #8]
  return(result);
 8007e98:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d10f      	bne.n	8007ebe <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007e9e:	f3ef 8310 	mrs	r3, PRIMASK
 8007ea2:	607b      	str	r3, [r7, #4]
  return(result);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d105      	bne.n	8007eb6 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007eaa:	f3ef 8311 	mrs	r3, BASEPRI
 8007eae:	603b      	str	r3, [r7, #0]
  return(result);
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d007      	beq.n	8007ec6 <osKernelStart+0x3a>
 8007eb6:	4b0f      	ldr	r3, [pc, #60]	; (8007ef4 <osKernelStart+0x68>)
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	2b02      	cmp	r3, #2
 8007ebc:	d103      	bne.n	8007ec6 <osKernelStart+0x3a>
    stat = osErrorISR;
 8007ebe:	f06f 0305 	mvn.w	r3, #5
 8007ec2:	60fb      	str	r3, [r7, #12]
 8007ec4:	e010      	b.n	8007ee8 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007ec6:	4b0b      	ldr	r3, [pc, #44]	; (8007ef4 <osKernelStart+0x68>)
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	2b01      	cmp	r3, #1
 8007ecc:	d109      	bne.n	8007ee2 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007ece:	f7ff ffa1 	bl	8007e14 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007ed2:	4b08      	ldr	r3, [pc, #32]	; (8007ef4 <osKernelStart+0x68>)
 8007ed4:	2202      	movs	r2, #2
 8007ed6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007ed8:	f001 fdec 	bl	8009ab4 <vTaskStartScheduler>
      stat = osOK;
 8007edc:	2300      	movs	r3, #0
 8007ede:	60fb      	str	r3, [r7, #12]
 8007ee0:	e002      	b.n	8007ee8 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8007ee2:	f04f 33ff 	mov.w	r3, #4294967295
 8007ee6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8007ee8:	68fb      	ldr	r3, [r7, #12]
}
 8007eea:	4618      	mov	r0, r3
 8007eec:	3710      	adds	r7, #16
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	bd80      	pop	{r7, pc}
 8007ef2:	bf00      	nop
 8007ef4:	20004ed0 	.word	0x20004ed0

08007ef8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b090      	sub	sp, #64	; 0x40
 8007efc:	af04      	add	r7, sp, #16
 8007efe:	60f8      	str	r0, [r7, #12]
 8007f00:	60b9      	str	r1, [r7, #8]
 8007f02:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007f04:	2300      	movs	r3, #0
 8007f06:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007f08:	f3ef 8305 	mrs	r3, IPSR
 8007f0c:	61fb      	str	r3, [r7, #28]
  return(result);
 8007f0e:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	f040 808f 	bne.w	8008034 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f16:	f3ef 8310 	mrs	r3, PRIMASK
 8007f1a:	61bb      	str	r3, [r7, #24]
  return(result);
 8007f1c:	69bb      	ldr	r3, [r7, #24]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d105      	bne.n	8007f2e <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007f22:	f3ef 8311 	mrs	r3, BASEPRI
 8007f26:	617b      	str	r3, [r7, #20]
  return(result);
 8007f28:	697b      	ldr	r3, [r7, #20]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d003      	beq.n	8007f36 <osThreadNew+0x3e>
 8007f2e:	4b44      	ldr	r3, [pc, #272]	; (8008040 <osThreadNew+0x148>)
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	2b02      	cmp	r3, #2
 8007f34:	d07e      	beq.n	8008034 <osThreadNew+0x13c>
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d07b      	beq.n	8008034 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8007f3c:	2380      	movs	r3, #128	; 0x80
 8007f3e:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8007f40:	2318      	movs	r3, #24
 8007f42:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8007f44:	2300      	movs	r3, #0
 8007f46:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8007f48:	f04f 33ff 	mov.w	r3, #4294967295
 8007f4c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d045      	beq.n	8007fe0 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d002      	beq.n	8007f62 <osThreadNew+0x6a>
        name = attr->name;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	699b      	ldr	r3, [r3, #24]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d002      	beq.n	8007f70 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	699b      	ldr	r3, [r3, #24]
 8007f6e:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d008      	beq.n	8007f88 <osThreadNew+0x90>
 8007f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f78:	2b38      	cmp	r3, #56	; 0x38
 8007f7a:	d805      	bhi.n	8007f88 <osThreadNew+0x90>
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	685b      	ldr	r3, [r3, #4]
 8007f80:	f003 0301 	and.w	r3, r3, #1
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d001      	beq.n	8007f8c <osThreadNew+0x94>
        return (NULL);
 8007f88:	2300      	movs	r3, #0
 8007f8a:	e054      	b.n	8008036 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	695b      	ldr	r3, [r3, #20]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d003      	beq.n	8007f9c <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	695b      	ldr	r3, [r3, #20]
 8007f98:	089b      	lsrs	r3, r3, #2
 8007f9a:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	689b      	ldr	r3, [r3, #8]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d00e      	beq.n	8007fc2 <osThreadNew+0xca>
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	68db      	ldr	r3, [r3, #12]
 8007fa8:	2b5b      	cmp	r3, #91	; 0x5b
 8007faa:	d90a      	bls.n	8007fc2 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d006      	beq.n	8007fc2 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	695b      	ldr	r3, [r3, #20]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d002      	beq.n	8007fc2 <osThreadNew+0xca>
        mem = 1;
 8007fbc:	2301      	movs	r3, #1
 8007fbe:	623b      	str	r3, [r7, #32]
 8007fc0:	e010      	b.n	8007fe4 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	689b      	ldr	r3, [r3, #8]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d10c      	bne.n	8007fe4 <osThreadNew+0xec>
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	68db      	ldr	r3, [r3, #12]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d108      	bne.n	8007fe4 <osThreadNew+0xec>
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	691b      	ldr	r3, [r3, #16]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d104      	bne.n	8007fe4 <osThreadNew+0xec>
          mem = 0;
 8007fda:	2300      	movs	r3, #0
 8007fdc:	623b      	str	r3, [r7, #32]
 8007fde:	e001      	b.n	8007fe4 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8007fe4:	6a3b      	ldr	r3, [r7, #32]
 8007fe6:	2b01      	cmp	r3, #1
 8007fe8:	d110      	bne.n	800800c <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8007fee:	687a      	ldr	r2, [r7, #4]
 8007ff0:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007ff2:	9202      	str	r2, [sp, #8]
 8007ff4:	9301      	str	r3, [sp, #4]
 8007ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ff8:	9300      	str	r3, [sp, #0]
 8007ffa:	68bb      	ldr	r3, [r7, #8]
 8007ffc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007ffe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008000:	68f8      	ldr	r0, [r7, #12]
 8008002:	f001 fb81 	bl	8009708 <xTaskCreateStatic>
 8008006:	4603      	mov	r3, r0
 8008008:	613b      	str	r3, [r7, #16]
 800800a:	e013      	b.n	8008034 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800800c:	6a3b      	ldr	r3, [r7, #32]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d110      	bne.n	8008034 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008014:	b29a      	uxth	r2, r3
 8008016:	f107 0310 	add.w	r3, r7, #16
 800801a:	9301      	str	r3, [sp, #4]
 800801c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800801e:	9300      	str	r3, [sp, #0]
 8008020:	68bb      	ldr	r3, [r7, #8]
 8008022:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008024:	68f8      	ldr	r0, [r7, #12]
 8008026:	f001 fbcc 	bl	80097c2 <xTaskCreate>
 800802a:	4603      	mov	r3, r0
 800802c:	2b01      	cmp	r3, #1
 800802e:	d001      	beq.n	8008034 <osThreadNew+0x13c>
          hTask = NULL;
 8008030:	2300      	movs	r3, #0
 8008032:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008034:	693b      	ldr	r3, [r7, #16]
}
 8008036:	4618      	mov	r0, r3
 8008038:	3730      	adds	r7, #48	; 0x30
 800803a:	46bd      	mov	sp, r7
 800803c:	bd80      	pop	{r7, pc}
 800803e:	bf00      	nop
 8008040:	20004ed0 	.word	0x20004ed0

08008044 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8008044:	b580      	push	{r7, lr}
 8008046:	b086      	sub	sp, #24
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800804c:	f3ef 8305 	mrs	r3, IPSR
 8008050:	613b      	str	r3, [r7, #16]
  return(result);
 8008052:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008054:	2b00      	cmp	r3, #0
 8008056:	d10f      	bne.n	8008078 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008058:	f3ef 8310 	mrs	r3, PRIMASK
 800805c:	60fb      	str	r3, [r7, #12]
  return(result);
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d105      	bne.n	8008070 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008064:	f3ef 8311 	mrs	r3, BASEPRI
 8008068:	60bb      	str	r3, [r7, #8]
  return(result);
 800806a:	68bb      	ldr	r3, [r7, #8]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d007      	beq.n	8008080 <osDelay+0x3c>
 8008070:	4b0a      	ldr	r3, [pc, #40]	; (800809c <osDelay+0x58>)
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	2b02      	cmp	r3, #2
 8008076:	d103      	bne.n	8008080 <osDelay+0x3c>
    stat = osErrorISR;
 8008078:	f06f 0305 	mvn.w	r3, #5
 800807c:	617b      	str	r3, [r7, #20]
 800807e:	e007      	b.n	8008090 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8008080:	2300      	movs	r3, #0
 8008082:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d002      	beq.n	8008090 <osDelay+0x4c>
      vTaskDelay(ticks);
 800808a:	6878      	ldr	r0, [r7, #4]
 800808c:	f001 fcde 	bl	8009a4c <vTaskDelay>
    }
  }

  return (stat);
 8008090:	697b      	ldr	r3, [r7, #20]
}
 8008092:	4618      	mov	r0, r3
 8008094:	3718      	adds	r7, #24
 8008096:	46bd      	mov	sp, r7
 8008098:	bd80      	pop	{r7, pc}
 800809a:	bf00      	nop
 800809c:	20004ed0 	.word	0x20004ed0

080080a0 <osEventFlagsNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b088      	sub	sp, #32
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 80080a8:	2300      	movs	r3, #0
 80080aa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80080ac:	f3ef 8305 	mrs	r3, IPSR
 80080b0:	617b      	str	r3, [r7, #20]
  return(result);
 80080b2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ()) {
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d13d      	bne.n	8008134 <osEventFlagsNew+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80080b8:	f3ef 8310 	mrs	r3, PRIMASK
 80080bc:	613b      	str	r3, [r7, #16]
  return(result);
 80080be:	693b      	ldr	r3, [r7, #16]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d105      	bne.n	80080d0 <osEventFlagsNew+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80080c4:	f3ef 8311 	mrs	r3, BASEPRI
 80080c8:	60fb      	str	r3, [r7, #12]
  return(result);
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d003      	beq.n	80080d8 <osEventFlagsNew+0x38>
 80080d0:	4b1b      	ldr	r3, [pc, #108]	; (8008140 <osEventFlagsNew+0xa0>)
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	2b02      	cmp	r3, #2
 80080d6:	d02d      	beq.n	8008134 <osEventFlagsNew+0x94>
    mem = -1;
 80080d8:	f04f 33ff 	mov.w	r3, #4294967295
 80080dc:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d015      	beq.n	8008110 <osEventFlagsNew+0x70>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	689b      	ldr	r3, [r3, #8]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d006      	beq.n	80080fa <osEventFlagsNew+0x5a>
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	68db      	ldr	r3, [r3, #12]
 80080f0:	2b1f      	cmp	r3, #31
 80080f2:	d902      	bls.n	80080fa <osEventFlagsNew+0x5a>
        mem = 1;
 80080f4:	2301      	movs	r3, #1
 80080f6:	61bb      	str	r3, [r7, #24]
 80080f8:	e00c      	b.n	8008114 <osEventFlagsNew+0x74>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	689b      	ldr	r3, [r3, #8]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d108      	bne.n	8008114 <osEventFlagsNew+0x74>
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	68db      	ldr	r3, [r3, #12]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d104      	bne.n	8008114 <osEventFlagsNew+0x74>
          mem = 0;
 800810a:	2300      	movs	r3, #0
 800810c:	61bb      	str	r3, [r7, #24]
 800810e:	e001      	b.n	8008114 <osEventFlagsNew+0x74>
        }
      }
    }
    else {
      mem = 0;
 8008110:	2300      	movs	r3, #0
 8008112:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008114:	69bb      	ldr	r3, [r7, #24]
 8008116:	2b01      	cmp	r3, #1
 8008118:	d106      	bne.n	8008128 <osEventFlagsNew+0x88>
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	689b      	ldr	r3, [r3, #8]
 800811e:	4618      	mov	r0, r3
 8008120:	f000 f9f2 	bl	8008508 <xEventGroupCreateStatic>
 8008124:	61f8      	str	r0, [r7, #28]
 8008126:	e005      	b.n	8008134 <osEventFlagsNew+0x94>
    }
    else {
      if (mem == 0) {
 8008128:	69bb      	ldr	r3, [r7, #24]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d102      	bne.n	8008134 <osEventFlagsNew+0x94>
        hEventGroup = xEventGroupCreate();
 800812e:	f000 fa22 	bl	8008576 <xEventGroupCreate>
 8008132:	61f8      	str	r0, [r7, #28]
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8008134:	69fb      	ldr	r3, [r7, #28]
}
 8008136:	4618      	mov	r0, r3
 8008138:	3720      	adds	r7, #32
 800813a:	46bd      	mov	sp, r7
 800813c:	bd80      	pop	{r7, pc}
 800813e:	bf00      	nop
 8008140:	20004ed0 	.word	0x20004ed0

08008144 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8008144:	b580      	push	{r7, lr}
 8008146:	b088      	sub	sp, #32
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
 800814c:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	61bb      	str	r3, [r7, #24]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8008152:	69bb      	ldr	r3, [r7, #24]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d004      	beq.n	8008162 <osEventFlagsSet+0x1e>
 8008158:	683b      	ldr	r3, [r7, #0]
 800815a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800815e:	2b00      	cmp	r3, #0
 8008160:	d003      	beq.n	800816a <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 8008162:	f06f 0303 	mvn.w	r3, #3
 8008166:	61fb      	str	r3, [r7, #28]
 8008168:	e03a      	b.n	80081e0 <osEventFlagsSet+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800816a:	f3ef 8305 	mrs	r3, IPSR
 800816e:	617b      	str	r3, [r7, #20]
  return(result);
 8008170:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8008172:	2b00      	cmp	r3, #0
 8008174:	d10f      	bne.n	8008196 <osEventFlagsSet+0x52>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008176:	f3ef 8310 	mrs	r3, PRIMASK
 800817a:	613b      	str	r3, [r7, #16]
  return(result);
 800817c:	693b      	ldr	r3, [r7, #16]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d105      	bne.n	800818e <osEventFlagsSet+0x4a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008182:	f3ef 8311 	mrs	r3, BASEPRI
 8008186:	60fb      	str	r3, [r7, #12]
  return(result);
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d021      	beq.n	80081d2 <osEventFlagsSet+0x8e>
 800818e:	4b17      	ldr	r3, [pc, #92]	; (80081ec <osEventFlagsSet+0xa8>)
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	2b02      	cmp	r3, #2
 8008194:	d11d      	bne.n	80081d2 <osEventFlagsSet+0x8e>
    yield = pdFALSE;
 8008196:	2300      	movs	r3, #0
 8008198:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 800819a:	f107 0308 	add.w	r3, r7, #8
 800819e:	461a      	mov	r2, r3
 80081a0:	6839      	ldr	r1, [r7, #0]
 80081a2:	69b8      	ldr	r0, [r7, #24]
 80081a4:	f000 fc08 	bl	80089b8 <xEventGroupSetBitsFromISR>
 80081a8:	4603      	mov	r3, r0
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d103      	bne.n	80081b6 <osEventFlagsSet+0x72>
      rflags = (uint32_t)osErrorResource;
 80081ae:	f06f 0302 	mvn.w	r3, #2
 80081b2:	61fb      	str	r3, [r7, #28]
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 80081b4:	e013      	b.n	80081de <osEventFlagsSet+0x9a>
    } else {
      rflags = flags;
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	61fb      	str	r3, [r7, #28]
      portYIELD_FROM_ISR (yield);
 80081ba:	68bb      	ldr	r3, [r7, #8]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d00e      	beq.n	80081de <osEventFlagsSet+0x9a>
 80081c0:	4b0b      	ldr	r3, [pc, #44]	; (80081f0 <osEventFlagsSet+0xac>)
 80081c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081c6:	601a      	str	r2, [r3, #0]
 80081c8:	f3bf 8f4f 	dsb	sy
 80081cc:	f3bf 8f6f 	isb	sy
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 80081d0:	e005      	b.n	80081de <osEventFlagsSet+0x9a>
    }
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 80081d2:	6839      	ldr	r1, [r7, #0]
 80081d4:	69b8      	ldr	r0, [r7, #24]
 80081d6:	f000 fb27 	bl	8008828 <xEventGroupSetBits>
 80081da:	61f8      	str	r0, [r7, #28]
 80081dc:	e000      	b.n	80081e0 <osEventFlagsSet+0x9c>
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 80081de:	bf00      	nop
  }

  return (rflags);
 80081e0:	69fb      	ldr	r3, [r7, #28]
}
 80081e2:	4618      	mov	r0, r3
 80081e4:	3720      	adds	r7, #32
 80081e6:	46bd      	mov	sp, r7
 80081e8:	bd80      	pop	{r7, pc}
 80081ea:	bf00      	nop
 80081ec:	20004ed0 	.word	0x20004ed0
 80081f0:	e000ed04 	.word	0xe000ed04

080081f4 <osEventFlagsClear>:

uint32_t osEventFlagsClear (osEventFlagsId_t ef_id, uint32_t flags) {
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b088      	sub	sp, #32
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
 80081fc:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	61bb      	str	r3, [r7, #24]
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8008202:	69bb      	ldr	r3, [r7, #24]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d004      	beq.n	8008212 <osEventFlagsClear+0x1e>
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800820e:	2b00      	cmp	r3, #0
 8008210:	d003      	beq.n	800821a <osEventFlagsClear+0x26>
    rflags = (uint32_t)osErrorParameter;
 8008212:	f06f 0303 	mvn.w	r3, #3
 8008216:	61fb      	str	r3, [r7, #28]
 8008218:	e029      	b.n	800826e <osEventFlagsClear+0x7a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800821a:	f3ef 8305 	mrs	r3, IPSR
 800821e:	617b      	str	r3, [r7, #20]
  return(result);
 8008220:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8008222:	2b00      	cmp	r3, #0
 8008224:	d10f      	bne.n	8008246 <osEventFlagsClear+0x52>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008226:	f3ef 8310 	mrs	r3, PRIMASK
 800822a:	613b      	str	r3, [r7, #16]
  return(result);
 800822c:	693b      	ldr	r3, [r7, #16]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d105      	bne.n	800823e <osEventFlagsClear+0x4a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008232:	f3ef 8311 	mrs	r3, BASEPRI
 8008236:	60fb      	str	r3, [r7, #12]
  return(result);
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d012      	beq.n	8008264 <osEventFlagsClear+0x70>
 800823e:	4b0e      	ldr	r3, [pc, #56]	; (8008278 <osEventFlagsClear+0x84>)
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	2b02      	cmp	r3, #2
 8008244:	d10e      	bne.n	8008264 <osEventFlagsClear+0x70>
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 8008246:	69b8      	ldr	r0, [r7, #24]
 8008248:	f000 faca 	bl	80087e0 <xEventGroupGetBitsFromISR>
 800824c:	61f8      	str	r0, [r7, #28]

    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 800824e:	6839      	ldr	r1, [r7, #0]
 8008250:	69b8      	ldr	r0, [r7, #24]
 8008252:	f000 fab1 	bl	80087b8 <xEventGroupClearBitsFromISR>
 8008256:	4603      	mov	r3, r0
 8008258:	2b00      	cmp	r3, #0
 800825a:	d108      	bne.n	800826e <osEventFlagsClear+0x7a>
      rflags = (uint32_t)osErrorResource;
 800825c:	f06f 0302 	mvn.w	r3, #2
 8008260:	61fb      	str	r3, [r7, #28]
    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 8008262:	e004      	b.n	800826e <osEventFlagsClear+0x7a>
    }
  }
  else {
    rflags = xEventGroupClearBits (hEventGroup, (EventBits_t)flags);
 8008264:	6839      	ldr	r1, [r7, #0]
 8008266:	69b8      	ldr	r0, [r7, #24]
 8008268:	f000 fa6e 	bl	8008748 <xEventGroupClearBits>
 800826c:	61f8      	str	r0, [r7, #28]
  }

  return (rflags);
 800826e:	69fb      	ldr	r3, [r7, #28]
}
 8008270:	4618      	mov	r0, r3
 8008272:	3720      	adds	r7, #32
 8008274:	46bd      	mov	sp, r7
 8008276:	bd80      	pop	{r7, pc}
 8008278:	20004ed0 	.word	0x20004ed0

0800827c <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 800827c:	b580      	push	{r7, lr}
 800827e:	b08e      	sub	sp, #56	; 0x38
 8008280:	af02      	add	r7, sp, #8
 8008282:	60f8      	str	r0, [r7, #12]
 8008284:	60b9      	str	r1, [r7, #8]
 8008286:	607a      	str	r2, [r7, #4]
 8008288:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	623b      	str	r3, [r7, #32]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800828e:	6a3b      	ldr	r3, [r7, #32]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d004      	beq.n	800829e <osEventFlagsWait+0x22>
 8008294:	68bb      	ldr	r3, [r7, #8]
 8008296:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800829a:	2b00      	cmp	r3, #0
 800829c:	d003      	beq.n	80082a6 <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 800829e:	f06f 0303 	mvn.w	r3, #3
 80082a2:	627b      	str	r3, [r7, #36]	; 0x24
 80082a4:	e059      	b.n	800835a <osEventFlagsWait+0xde>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80082a6:	f3ef 8305 	mrs	r3, IPSR
 80082aa:	61fb      	str	r3, [r7, #28]
  return(result);
 80082ac:	69fb      	ldr	r3, [r7, #28]
  }
  else if (IS_IRQ()) {
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d10f      	bne.n	80082d2 <osEventFlagsWait+0x56>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80082b2:	f3ef 8310 	mrs	r3, PRIMASK
 80082b6:	61bb      	str	r3, [r7, #24]
  return(result);
 80082b8:	69bb      	ldr	r3, [r7, #24]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d105      	bne.n	80082ca <osEventFlagsWait+0x4e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80082be:	f3ef 8311 	mrs	r3, BASEPRI
 80082c2:	617b      	str	r3, [r7, #20]
  return(result);
 80082c4:	697b      	ldr	r3, [r7, #20]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d007      	beq.n	80082da <osEventFlagsWait+0x5e>
 80082ca:	4b26      	ldr	r3, [pc, #152]	; (8008364 <osEventFlagsWait+0xe8>)
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	2b02      	cmp	r3, #2
 80082d0:	d103      	bne.n	80082da <osEventFlagsWait+0x5e>
    rflags = (uint32_t)osErrorISR;
 80082d2:	f06f 0305 	mvn.w	r3, #5
 80082d6:	627b      	str	r3, [r7, #36]	; 0x24
 80082d8:	e03f      	b.n	800835a <osEventFlagsWait+0xde>
  }
  else {
    if (options & osFlagsWaitAll) {
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	f003 0301 	and.w	r3, r3, #1
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d002      	beq.n	80082ea <osEventFlagsWait+0x6e>
      wait_all = pdTRUE;
 80082e4:	2301      	movs	r3, #1
 80082e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80082e8:	e001      	b.n	80082ee <osEventFlagsWait+0x72>
    } else {
      wait_all = pdFAIL;
 80082ea:	2300      	movs	r3, #0
 80082ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    if (options & osFlagsNoClear) {
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	f003 0302 	and.w	r3, r3, #2
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d002      	beq.n	80082fe <osEventFlagsWait+0x82>
      exit_clr = pdFAIL;
 80082f8:	2300      	movs	r3, #0
 80082fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80082fc:	e001      	b.n	8008302 <osEventFlagsWait+0x86>
    } else {
      exit_clr = pdTRUE;
 80082fe:	2301      	movs	r3, #1
 8008300:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8008302:	683b      	ldr	r3, [r7, #0]
 8008304:	9300      	str	r3, [sp, #0]
 8008306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008308:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800830a:	68b9      	ldr	r1, [r7, #8]
 800830c:	6a38      	ldr	r0, [r7, #32]
 800830e:	f000 f94d 	bl	80085ac <xEventGroupWaitBits>
 8008312:	6278      	str	r0, [r7, #36]	; 0x24

    if (options & osFlagsWaitAll) {
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	f003 0301 	and.w	r3, r3, #1
 800831a:	2b00      	cmp	r3, #0
 800831c:	d00e      	beq.n	800833c <osEventFlagsWait+0xc0>
      if (flags != rflags) {
 800831e:	68ba      	ldr	r2, [r7, #8]
 8008320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008322:	429a      	cmp	r2, r3
 8008324:	d019      	beq.n	800835a <osEventFlagsWait+0xde>
        if (timeout > 0U) {
 8008326:	683b      	ldr	r3, [r7, #0]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d003      	beq.n	8008334 <osEventFlagsWait+0xb8>
          rflags = (uint32_t)osErrorTimeout;
 800832c:	f06f 0301 	mvn.w	r3, #1
 8008330:	627b      	str	r3, [r7, #36]	; 0x24
 8008332:	e012      	b.n	800835a <osEventFlagsWait+0xde>
        } else {
          rflags = (uint32_t)osErrorResource;
 8008334:	f06f 0302 	mvn.w	r3, #2
 8008338:	627b      	str	r3, [r7, #36]	; 0x24
 800833a:	e00e      	b.n	800835a <osEventFlagsWait+0xde>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 800833c:	68ba      	ldr	r2, [r7, #8]
 800833e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008340:	4013      	ands	r3, r2
 8008342:	2b00      	cmp	r3, #0
 8008344:	d109      	bne.n	800835a <osEventFlagsWait+0xde>
        if (timeout > 0U) {
 8008346:	683b      	ldr	r3, [r7, #0]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d003      	beq.n	8008354 <osEventFlagsWait+0xd8>
          rflags = (uint32_t)osErrorTimeout;
 800834c:	f06f 0301 	mvn.w	r3, #1
 8008350:	627b      	str	r3, [r7, #36]	; 0x24
 8008352:	e002      	b.n	800835a <osEventFlagsWait+0xde>
        } else {
          rflags = (uint32_t)osErrorResource;
 8008354:	f06f 0302 	mvn.w	r3, #2
 8008358:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }
  }

  return (rflags);
 800835a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800835c:	4618      	mov	r0, r3
 800835e:	3730      	adds	r7, #48	; 0x30
 8008360:	46bd      	mov	sp, r7
 8008362:	bd80      	pop	{r7, pc}
 8008364:	20004ed0 	.word	0x20004ed0

08008368 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8008368:	b580      	push	{r7, lr}
 800836a:	b08c      	sub	sp, #48	; 0x30
 800836c:	af02      	add	r7, sp, #8
 800836e:	60f8      	str	r0, [r7, #12]
 8008370:	60b9      	str	r1, [r7, #8]
 8008372:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8008374:	2300      	movs	r3, #0
 8008376:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008378:	f3ef 8305 	mrs	r3, IPSR
 800837c:	61bb      	str	r3, [r7, #24]
  return(result);
 800837e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8008380:	2b00      	cmp	r3, #0
 8008382:	f040 8086 	bne.w	8008492 <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008386:	f3ef 8310 	mrs	r3, PRIMASK
 800838a:	617b      	str	r3, [r7, #20]
  return(result);
 800838c:	697b      	ldr	r3, [r7, #20]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d105      	bne.n	800839e <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008392:	f3ef 8311 	mrs	r3, BASEPRI
 8008396:	613b      	str	r3, [r7, #16]
  return(result);
 8008398:	693b      	ldr	r3, [r7, #16]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d003      	beq.n	80083a6 <osSemaphoreNew+0x3e>
 800839e:	4b3f      	ldr	r3, [pc, #252]	; (800849c <osSemaphoreNew+0x134>)
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	2b02      	cmp	r3, #2
 80083a4:	d075      	beq.n	8008492 <osSemaphoreNew+0x12a>
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d072      	beq.n	8008492 <osSemaphoreNew+0x12a>
 80083ac:	68ba      	ldr	r2, [r7, #8]
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	429a      	cmp	r2, r3
 80083b2:	d86e      	bhi.n	8008492 <osSemaphoreNew+0x12a>
    mem = -1;
 80083b4:	f04f 33ff 	mov.w	r3, #4294967295
 80083b8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d015      	beq.n	80083ec <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	689b      	ldr	r3, [r3, #8]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d006      	beq.n	80083d6 <osSemaphoreNew+0x6e>
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	68db      	ldr	r3, [r3, #12]
 80083cc:	2b4f      	cmp	r3, #79	; 0x4f
 80083ce:	d902      	bls.n	80083d6 <osSemaphoreNew+0x6e>
        mem = 1;
 80083d0:	2301      	movs	r3, #1
 80083d2:	623b      	str	r3, [r7, #32]
 80083d4:	e00c      	b.n	80083f0 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	689b      	ldr	r3, [r3, #8]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d108      	bne.n	80083f0 <osSemaphoreNew+0x88>
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	68db      	ldr	r3, [r3, #12]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d104      	bne.n	80083f0 <osSemaphoreNew+0x88>
          mem = 0;
 80083e6:	2300      	movs	r3, #0
 80083e8:	623b      	str	r3, [r7, #32]
 80083ea:	e001      	b.n	80083f0 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 80083ec:	2300      	movs	r3, #0
 80083ee:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 80083f0:	6a3b      	ldr	r3, [r7, #32]
 80083f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083f6:	d04c      	beq.n	8008492 <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	2b01      	cmp	r3, #1
 80083fc:	d128      	bne.n	8008450 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 80083fe:	6a3b      	ldr	r3, [r7, #32]
 8008400:	2b01      	cmp	r3, #1
 8008402:	d10a      	bne.n	800841a <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	689b      	ldr	r3, [r3, #8]
 8008408:	2203      	movs	r2, #3
 800840a:	9200      	str	r2, [sp, #0]
 800840c:	2200      	movs	r2, #0
 800840e:	2100      	movs	r1, #0
 8008410:	2001      	movs	r0, #1
 8008412:	f000 fc01 	bl	8008c18 <xQueueGenericCreateStatic>
 8008416:	6278      	str	r0, [r7, #36]	; 0x24
 8008418:	e005      	b.n	8008426 <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 800841a:	2203      	movs	r2, #3
 800841c:	2100      	movs	r1, #0
 800841e:	2001      	movs	r0, #1
 8008420:	f000 fc72 	bl	8008d08 <xQueueGenericCreate>
 8008424:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8008426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008428:	2b00      	cmp	r3, #0
 800842a:	d022      	beq.n	8008472 <osSemaphoreNew+0x10a>
 800842c:	68bb      	ldr	r3, [r7, #8]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d01f      	beq.n	8008472 <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8008432:	2300      	movs	r3, #0
 8008434:	2200      	movs	r2, #0
 8008436:	2100      	movs	r1, #0
 8008438:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800843a:	f000 fd33 	bl	8008ea4 <xQueueGenericSend>
 800843e:	4603      	mov	r3, r0
 8008440:	2b01      	cmp	r3, #1
 8008442:	d016      	beq.n	8008472 <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 8008444:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008446:	f000 ffa3 	bl	8009390 <vQueueDelete>
            hSemaphore = NULL;
 800844a:	2300      	movs	r3, #0
 800844c:	627b      	str	r3, [r7, #36]	; 0x24
 800844e:	e010      	b.n	8008472 <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 8008450:	6a3b      	ldr	r3, [r7, #32]
 8008452:	2b01      	cmp	r3, #1
 8008454:	d108      	bne.n	8008468 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	689b      	ldr	r3, [r3, #8]
 800845a:	461a      	mov	r2, r3
 800845c:	68b9      	ldr	r1, [r7, #8]
 800845e:	68f8      	ldr	r0, [r7, #12]
 8008460:	f000 fcb5 	bl	8008dce <xQueueCreateCountingSemaphoreStatic>
 8008464:	6278      	str	r0, [r7, #36]	; 0x24
 8008466:	e004      	b.n	8008472 <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8008468:	68b9      	ldr	r1, [r7, #8]
 800846a:	68f8      	ldr	r0, [r7, #12]
 800846c:	f000 fce6 	bl	8008e3c <xQueueCreateCountingSemaphore>
 8008470:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8008472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008474:	2b00      	cmp	r3, #0
 8008476:	d00c      	beq.n	8008492 <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d003      	beq.n	8008486 <osSemaphoreNew+0x11e>
          name = attr->name;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	61fb      	str	r3, [r7, #28]
 8008484:	e001      	b.n	800848a <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 8008486:	2300      	movs	r3, #0
 8008488:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800848a:	69f9      	ldr	r1, [r7, #28]
 800848c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800848e:	f001 f8b3 	bl	80095f8 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8008492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008494:	4618      	mov	r0, r3
 8008496:	3728      	adds	r7, #40	; 0x28
 8008498:	46bd      	mov	sp, r7
 800849a:	bd80      	pop	{r7, pc}
 800849c:	20004ed0 	.word	0x20004ed0

080084a0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80084a0:	b480      	push	{r7}
 80084a2:	b085      	sub	sp, #20
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	60f8      	str	r0, [r7, #12]
 80084a8:	60b9      	str	r1, [r7, #8]
 80084aa:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	4a07      	ldr	r2, [pc, #28]	; (80084cc <vApplicationGetIdleTaskMemory+0x2c>)
 80084b0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80084b2:	68bb      	ldr	r3, [r7, #8]
 80084b4:	4a06      	ldr	r2, [pc, #24]	; (80084d0 <vApplicationGetIdleTaskMemory+0x30>)
 80084b6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	2280      	movs	r2, #128	; 0x80
 80084bc:	601a      	str	r2, [r3, #0]
}
 80084be:	bf00      	nop
 80084c0:	3714      	adds	r7, #20
 80084c2:	46bd      	mov	sp, r7
 80084c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c8:	4770      	bx	lr
 80084ca:	bf00      	nop
 80084cc:	20004ed4 	.word	0x20004ed4
 80084d0:	20004f30 	.word	0x20004f30

080084d4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80084d4:	b480      	push	{r7}
 80084d6:	b085      	sub	sp, #20
 80084d8:	af00      	add	r7, sp, #0
 80084da:	60f8      	str	r0, [r7, #12]
 80084dc:	60b9      	str	r1, [r7, #8]
 80084de:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	4a07      	ldr	r2, [pc, #28]	; (8008500 <vApplicationGetTimerTaskMemory+0x2c>)
 80084e4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80084e6:	68bb      	ldr	r3, [r7, #8]
 80084e8:	4a06      	ldr	r2, [pc, #24]	; (8008504 <vApplicationGetTimerTaskMemory+0x30>)
 80084ea:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80084f2:	601a      	str	r2, [r3, #0]
}
 80084f4:	bf00      	nop
 80084f6:	3714      	adds	r7, #20
 80084f8:	46bd      	mov	sp, r7
 80084fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fe:	4770      	bx	lr
 8008500:	20005130 	.word	0x20005130
 8008504:	2000518c 	.word	0x2000518c

08008508 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8008508:	b580      	push	{r7, lr}
 800850a:	b086      	sub	sp, #24
 800850c:	af00      	add	r7, sp, #0
 800850e:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d10a      	bne.n	800852c <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800851a:	f383 8811 	msr	BASEPRI, r3
 800851e:	f3bf 8f6f 	isb	sy
 8008522:	f3bf 8f4f 	dsb	sy
 8008526:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008528:	bf00      	nop
 800852a:	e7fe      	b.n	800852a <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 800852c:	2320      	movs	r3, #32
 800852e:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8008530:	68bb      	ldr	r3, [r7, #8]
 8008532:	2b20      	cmp	r3, #32
 8008534:	d00a      	beq.n	800854c <xEventGroupCreateStatic+0x44>
	__asm volatile
 8008536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800853a:	f383 8811 	msr	BASEPRI, r3
 800853e:	f3bf 8f6f 	isb	sy
 8008542:	f3bf 8f4f 	dsb	sy
 8008546:	60fb      	str	r3, [r7, #12]
}
 8008548:	bf00      	nop
 800854a:	e7fe      	b.n	800854a <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8008550:	697b      	ldr	r3, [r7, #20]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d00a      	beq.n	800856c <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 8008556:	697b      	ldr	r3, [r7, #20]
 8008558:	2200      	movs	r2, #0
 800855a:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800855c:	697b      	ldr	r3, [r7, #20]
 800855e:	3304      	adds	r3, #4
 8008560:	4618      	mov	r0, r3
 8008562:	f000 fa3d 	bl	80089e0 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8008566:	697b      	ldr	r3, [r7, #20]
 8008568:	2201      	movs	r2, #1
 800856a:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 800856c:	697b      	ldr	r3, [r7, #20]
	}
 800856e:	4618      	mov	r0, r3
 8008570:	3718      	adds	r7, #24
 8008572:	46bd      	mov	sp, r7
 8008574:	bd80      	pop	{r7, pc}

08008576 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8008576:	b580      	push	{r7, lr}
 8008578:	b082      	sub	sp, #8
 800857a:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 800857c:	2020      	movs	r0, #32
 800857e:	f002 fe33 	bl	800b1e8 <pvPortMalloc>
 8008582:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d00a      	beq.n	80085a0 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	2200      	movs	r2, #0
 800858e:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	3304      	adds	r3, #4
 8008594:	4618      	mov	r0, r3
 8008596:	f000 fa23 	bl	80089e0 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	2200      	movs	r2, #0
 800859e:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 80085a0:	687b      	ldr	r3, [r7, #4]
	}
 80085a2:	4618      	mov	r0, r3
 80085a4:	3708      	adds	r7, #8
 80085a6:	46bd      	mov	sp, r7
 80085a8:	bd80      	pop	{r7, pc}
	...

080085ac <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b090      	sub	sp, #64	; 0x40
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	60f8      	str	r0, [r7, #12]
 80085b4:	60b9      	str	r1, [r7, #8]
 80085b6:	607a      	str	r2, [r7, #4]
 80085b8:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 80085be:	2300      	movs	r3, #0
 80085c0:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 80085c2:	2300      	movs	r3, #0
 80085c4:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d10a      	bne.n	80085e2 <xEventGroupWaitBits+0x36>
	__asm volatile
 80085cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085d0:	f383 8811 	msr	BASEPRI, r3
 80085d4:	f3bf 8f6f 	isb	sy
 80085d8:	f3bf 8f4f 	dsb	sy
 80085dc:	623b      	str	r3, [r7, #32]
}
 80085de:	bf00      	nop
 80085e0:	e7fe      	b.n	80085e0 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80085e2:	68bb      	ldr	r3, [r7, #8]
 80085e4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d00a      	beq.n	8008602 <xEventGroupWaitBits+0x56>
	__asm volatile
 80085ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085f0:	f383 8811 	msr	BASEPRI, r3
 80085f4:	f3bf 8f6f 	isb	sy
 80085f8:	f3bf 8f4f 	dsb	sy
 80085fc:	61fb      	str	r3, [r7, #28]
}
 80085fe:	bf00      	nop
 8008600:	e7fe      	b.n	8008600 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8008602:	68bb      	ldr	r3, [r7, #8]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d10a      	bne.n	800861e <xEventGroupWaitBits+0x72>
	__asm volatile
 8008608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800860c:	f383 8811 	msr	BASEPRI, r3
 8008610:	f3bf 8f6f 	isb	sy
 8008614:	f3bf 8f4f 	dsb	sy
 8008618:	61bb      	str	r3, [r7, #24]
}
 800861a:	bf00      	nop
 800861c:	e7fe      	b.n	800861c <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800861e:	f001 ff2f 	bl	800a480 <xTaskGetSchedulerState>
 8008622:	4603      	mov	r3, r0
 8008624:	2b00      	cmp	r3, #0
 8008626:	d102      	bne.n	800862e <xEventGroupWaitBits+0x82>
 8008628:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800862a:	2b00      	cmp	r3, #0
 800862c:	d101      	bne.n	8008632 <xEventGroupWaitBits+0x86>
 800862e:	2301      	movs	r3, #1
 8008630:	e000      	b.n	8008634 <xEventGroupWaitBits+0x88>
 8008632:	2300      	movs	r3, #0
 8008634:	2b00      	cmp	r3, #0
 8008636:	d10a      	bne.n	800864e <xEventGroupWaitBits+0xa2>
	__asm volatile
 8008638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800863c:	f383 8811 	msr	BASEPRI, r3
 8008640:	f3bf 8f6f 	isb	sy
 8008644:	f3bf 8f4f 	dsb	sy
 8008648:	617b      	str	r3, [r7, #20]
}
 800864a:	bf00      	nop
 800864c:	e7fe      	b.n	800864c <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 800864e:	f001 fa97 	bl	8009b80 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8008652:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8008658:	683a      	ldr	r2, [r7, #0]
 800865a:	68b9      	ldr	r1, [r7, #8]
 800865c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800865e:	f000 f988 	bl	8008972 <prvTestWaitCondition>
 8008662:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8008664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008666:	2b00      	cmp	r3, #0
 8008668:	d00e      	beq.n	8008688 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 800866a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800866c:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 800866e:	2300      	movs	r3, #0
 8008670:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d028      	beq.n	80086ca <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8008678:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800867a:	681a      	ldr	r2, [r3, #0]
 800867c:	68bb      	ldr	r3, [r7, #8]
 800867e:	43db      	mvns	r3, r3
 8008680:	401a      	ands	r2, r3
 8008682:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008684:	601a      	str	r2, [r3, #0]
 8008686:	e020      	b.n	80086ca <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8008688:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800868a:	2b00      	cmp	r3, #0
 800868c:	d104      	bne.n	8008698 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 800868e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008690:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8008692:	2301      	movs	r3, #1
 8008694:	633b      	str	r3, [r7, #48]	; 0x30
 8008696:	e018      	b.n	80086ca <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d003      	beq.n	80086a6 <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 800869e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086a0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80086a4:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 80086a6:	683b      	ldr	r3, [r7, #0]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d003      	beq.n	80086b4 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 80086ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086ae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80086b2:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 80086b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086b6:	1d18      	adds	r0, r3, #4
 80086b8:	68ba      	ldr	r2, [r7, #8]
 80086ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086bc:	4313      	orrs	r3, r2
 80086be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80086c0:	4619      	mov	r1, r3
 80086c2:	f001 fc55 	bl	8009f70 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 80086c6:	2300      	movs	r3, #0
 80086c8:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 80086ca:	f001 fa67 	bl	8009b9c <xTaskResumeAll>
 80086ce:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 80086d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d031      	beq.n	800873a <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 80086d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d107      	bne.n	80086ec <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 80086dc:	4b19      	ldr	r3, [pc, #100]	; (8008744 <xEventGroupWaitBits+0x198>)
 80086de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086e2:	601a      	str	r2, [r3, #0]
 80086e4:	f3bf 8f4f 	dsb	sy
 80086e8:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 80086ec:	f001 ff54 	bl	800a598 <uxTaskResetEventItemValue>
 80086f0:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 80086f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d11a      	bne.n	8008732 <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 80086fc:	f002 fc52 	bl	800afa4 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8008700:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8008706:	683a      	ldr	r2, [r7, #0]
 8008708:	68b9      	ldr	r1, [r7, #8]
 800870a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800870c:	f000 f931 	bl	8008972 <prvTestWaitCondition>
 8008710:	4603      	mov	r3, r0
 8008712:	2b00      	cmp	r3, #0
 8008714:	d009      	beq.n	800872a <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d006      	beq.n	800872a <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800871c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800871e:	681a      	ldr	r2, [r3, #0]
 8008720:	68bb      	ldr	r3, [r7, #8]
 8008722:	43db      	mvns	r3, r3
 8008724:	401a      	ands	r2, r3
 8008726:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008728:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 800872a:	2301      	movs	r3, #1
 800872c:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 800872e:	f002 fc69 	bl	800b004 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8008732:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008734:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008738:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 800873a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800873c:	4618      	mov	r0, r3
 800873e:	3740      	adds	r7, #64	; 0x40
 8008740:	46bd      	mov	sp, r7
 8008742:	bd80      	pop	{r7, pc}
 8008744:	e000ed04 	.word	0xe000ed04

08008748 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 8008748:	b580      	push	{r7, lr}
 800874a:	b086      	sub	sp, #24
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
 8008750:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d10a      	bne.n	8008772 <xEventGroupClearBits+0x2a>
	__asm volatile
 800875c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008760:	f383 8811 	msr	BASEPRI, r3
 8008764:	f3bf 8f6f 	isb	sy
 8008768:	f3bf 8f4f 	dsb	sy
 800876c:	60fb      	str	r3, [r7, #12]
}
 800876e:	bf00      	nop
 8008770:	e7fe      	b.n	8008770 <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8008772:	683b      	ldr	r3, [r7, #0]
 8008774:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8008778:	2b00      	cmp	r3, #0
 800877a:	d00a      	beq.n	8008792 <xEventGroupClearBits+0x4a>
	__asm volatile
 800877c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008780:	f383 8811 	msr	BASEPRI, r3
 8008784:	f3bf 8f6f 	isb	sy
 8008788:	f3bf 8f4f 	dsb	sy
 800878c:	60bb      	str	r3, [r7, #8]
}
 800878e:	bf00      	nop
 8008790:	e7fe      	b.n	8008790 <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 8008792:	f002 fc07 	bl	800afa4 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 8008796:	697b      	ldr	r3, [r7, #20]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800879c:	697b      	ldr	r3, [r7, #20]
 800879e:	681a      	ldr	r2, [r3, #0]
 80087a0:	683b      	ldr	r3, [r7, #0]
 80087a2:	43db      	mvns	r3, r3
 80087a4:	401a      	ands	r2, r3
 80087a6:	697b      	ldr	r3, [r7, #20]
 80087a8:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 80087aa:	f002 fc2b 	bl	800b004 <vPortExitCritical>

	return uxReturn;
 80087ae:	693b      	ldr	r3, [r7, #16]
}
 80087b0:	4618      	mov	r0, r3
 80087b2:	3718      	adds	r7, #24
 80087b4:	46bd      	mov	sp, r7
 80087b6:	bd80      	pop	{r7, pc}

080087b8 <xEventGroupClearBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
	{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b084      	sub	sp, #16
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
 80087c0:	6039      	str	r1, [r7, #0]
		BaseType_t xReturn;

		traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToClear, NULL ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 80087c2:	2300      	movs	r3, #0
 80087c4:	683a      	ldr	r2, [r7, #0]
 80087c6:	6879      	ldr	r1, [r7, #4]
 80087c8:	4804      	ldr	r0, [pc, #16]	; (80087dc <xEventGroupClearBitsFromISR+0x24>)
 80087ca:	f002 fa9f 	bl	800ad0c <xTimerPendFunctionCallFromISR>
 80087ce:	60f8      	str	r0, [r7, #12]

		return xReturn;
 80087d0:	68fb      	ldr	r3, [r7, #12]
	}
 80087d2:	4618      	mov	r0, r3
 80087d4:	3710      	adds	r7, #16
 80087d6:	46bd      	mov	sp, r7
 80087d8:	bd80      	pop	{r7, pc}
 80087da:	bf00      	nop
 80087dc:	08008959 	.word	0x08008959

080087e0 <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
 80087e0:	b480      	push	{r7}
 80087e2:	b089      	sub	sp, #36	; 0x24
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
UBaseType_t uxSavedInterruptStatus;
EventGroup_t const * const pxEventBits = xEventGroup;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	61fb      	str	r3, [r7, #28]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80087ec:	f3ef 8211 	mrs	r2, BASEPRI
 80087f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087f4:	f383 8811 	msr	BASEPRI, r3
 80087f8:	f3bf 8f6f 	isb	sy
 80087fc:	f3bf 8f4f 	dsb	sy
 8008800:	60fa      	str	r2, [r7, #12]
 8008802:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008804:	68fb      	ldr	r3, [r7, #12]
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008806:	61bb      	str	r3, [r7, #24]
	{
		uxReturn = pxEventBits->uxEventBits;
 8008808:	69fb      	ldr	r3, [r7, #28]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	617b      	str	r3, [r7, #20]
 800880e:	69bb      	ldr	r3, [r7, #24]
 8008810:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008812:	693b      	ldr	r3, [r7, #16]
 8008814:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008818:	bf00      	nop
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
 800881a:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
 800881c:	4618      	mov	r0, r3
 800881e:	3724      	adds	r7, #36	; 0x24
 8008820:	46bd      	mov	sp, r7
 8008822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008826:	4770      	bx	lr

08008828 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b08e      	sub	sp, #56	; 0x38
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
 8008830:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8008832:	2300      	movs	r3, #0
 8008834:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 800883a:	2300      	movs	r3, #0
 800883c:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d10a      	bne.n	800885a <xEventGroupSetBits+0x32>
	__asm volatile
 8008844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008848:	f383 8811 	msr	BASEPRI, r3
 800884c:	f3bf 8f6f 	isb	sy
 8008850:	f3bf 8f4f 	dsb	sy
 8008854:	613b      	str	r3, [r7, #16]
}
 8008856:	bf00      	nop
 8008858:	e7fe      	b.n	8008858 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800885a:	683b      	ldr	r3, [r7, #0]
 800885c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8008860:	2b00      	cmp	r3, #0
 8008862:	d00a      	beq.n	800887a <xEventGroupSetBits+0x52>
	__asm volatile
 8008864:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008868:	f383 8811 	msr	BASEPRI, r3
 800886c:	f3bf 8f6f 	isb	sy
 8008870:	f3bf 8f4f 	dsb	sy
 8008874:	60fb      	str	r3, [r7, #12]
}
 8008876:	bf00      	nop
 8008878:	e7fe      	b.n	8008878 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 800887a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800887c:	3304      	adds	r3, #4
 800887e:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008882:	3308      	adds	r3, #8
 8008884:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8008886:	f001 f97b 	bl	8009b80 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 800888a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800888c:	68db      	ldr	r3, [r3, #12]
 800888e:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8008890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008892:	681a      	ldr	r2, [r3, #0]
 8008894:	683b      	ldr	r3, [r7, #0]
 8008896:	431a      	orrs	r2, r3
 8008898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800889a:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 800889c:	e03c      	b.n	8008918 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 800889e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088a0:	685b      	ldr	r3, [r3, #4]
 80088a2:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 80088a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 80088aa:	2300      	movs	r3, #0
 80088ac:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 80088ae:	69bb      	ldr	r3, [r7, #24]
 80088b0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80088b4:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 80088b6:	69bb      	ldr	r3, [r7, #24]
 80088b8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80088bc:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 80088be:	697b      	ldr	r3, [r7, #20]
 80088c0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d108      	bne.n	80088da <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 80088c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088ca:	681a      	ldr	r2, [r3, #0]
 80088cc:	69bb      	ldr	r3, [r7, #24]
 80088ce:	4013      	ands	r3, r2
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d00b      	beq.n	80088ec <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 80088d4:	2301      	movs	r3, #1
 80088d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80088d8:	e008      	b.n	80088ec <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 80088da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088dc:	681a      	ldr	r2, [r3, #0]
 80088de:	69bb      	ldr	r3, [r7, #24]
 80088e0:	4013      	ands	r3, r2
 80088e2:	69ba      	ldr	r2, [r7, #24]
 80088e4:	429a      	cmp	r2, r3
 80088e6:	d101      	bne.n	80088ec <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 80088e8:	2301      	movs	r3, #1
 80088ea:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 80088ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d010      	beq.n	8008914 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 80088f2:	697b      	ldr	r3, [r7, #20]
 80088f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d003      	beq.n	8008904 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 80088fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80088fe:	69bb      	ldr	r3, [r7, #24]
 8008900:	4313      	orrs	r3, r2
 8008902:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8008904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800890c:	4619      	mov	r1, r3
 800890e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8008910:	f001 fbfa 	bl	800a108 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8008914:	69fb      	ldr	r3, [r7, #28]
 8008916:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8008918:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800891a:	6a3b      	ldr	r3, [r7, #32]
 800891c:	429a      	cmp	r2, r3
 800891e:	d1be      	bne.n	800889e <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8008920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008922:	681a      	ldr	r2, [r3, #0]
 8008924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008926:	43db      	mvns	r3, r3
 8008928:	401a      	ands	r2, r3
 800892a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800892c:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 800892e:	f001 f935 	bl	8009b9c <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8008932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008934:	681b      	ldr	r3, [r3, #0]
}
 8008936:	4618      	mov	r0, r3
 8008938:	3738      	adds	r7, #56	; 0x38
 800893a:	46bd      	mov	sp, r7
 800893c:	bd80      	pop	{r7, pc}

0800893e <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 800893e:	b580      	push	{r7, lr}
 8008940:	b082      	sub	sp, #8
 8008942:	af00      	add	r7, sp, #0
 8008944:	6078      	str	r0, [r7, #4]
 8008946:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8008948:	6839      	ldr	r1, [r7, #0]
 800894a:	6878      	ldr	r0, [r7, #4]
 800894c:	f7ff ff6c 	bl	8008828 <xEventGroupSetBits>
}
 8008950:	bf00      	nop
 8008952:	3708      	adds	r7, #8
 8008954:	46bd      	mov	sp, r7
 8008956:	bd80      	pop	{r7, pc}

08008958 <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
 8008958:	b580      	push	{r7, lr}
 800895a:	b082      	sub	sp, #8
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
 8008960:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8008962:	6839      	ldr	r1, [r7, #0]
 8008964:	6878      	ldr	r0, [r7, #4]
 8008966:	f7ff feef 	bl	8008748 <xEventGroupClearBits>
}
 800896a:	bf00      	nop
 800896c:	3708      	adds	r7, #8
 800896e:	46bd      	mov	sp, r7
 8008970:	bd80      	pop	{r7, pc}

08008972 <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8008972:	b480      	push	{r7}
 8008974:	b087      	sub	sp, #28
 8008976:	af00      	add	r7, sp, #0
 8008978:	60f8      	str	r0, [r7, #12]
 800897a:	60b9      	str	r1, [r7, #8]
 800897c:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 800897e:	2300      	movs	r3, #0
 8008980:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d107      	bne.n	8008998 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8008988:	68fa      	ldr	r2, [r7, #12]
 800898a:	68bb      	ldr	r3, [r7, #8]
 800898c:	4013      	ands	r3, r2
 800898e:	2b00      	cmp	r3, #0
 8008990:	d00a      	beq.n	80089a8 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8008992:	2301      	movs	r3, #1
 8008994:	617b      	str	r3, [r7, #20]
 8008996:	e007      	b.n	80089a8 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8008998:	68fa      	ldr	r2, [r7, #12]
 800899a:	68bb      	ldr	r3, [r7, #8]
 800899c:	4013      	ands	r3, r2
 800899e:	68ba      	ldr	r2, [r7, #8]
 80089a0:	429a      	cmp	r2, r3
 80089a2:	d101      	bne.n	80089a8 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80089a4:	2301      	movs	r3, #1
 80089a6:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 80089a8:	697b      	ldr	r3, [r7, #20]
}
 80089aa:	4618      	mov	r0, r3
 80089ac:	371c      	adds	r7, #28
 80089ae:	46bd      	mov	sp, r7
 80089b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b4:	4770      	bx	lr
	...

080089b8 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80089b8:	b580      	push	{r7, lr}
 80089ba:	b086      	sub	sp, #24
 80089bc:	af00      	add	r7, sp, #0
 80089be:	60f8      	str	r0, [r7, #12]
 80089c0:	60b9      	str	r1, [r7, #8]
 80089c2:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	68ba      	ldr	r2, [r7, #8]
 80089c8:	68f9      	ldr	r1, [r7, #12]
 80089ca:	4804      	ldr	r0, [pc, #16]	; (80089dc <xEventGroupSetBitsFromISR+0x24>)
 80089cc:	f002 f99e 	bl	800ad0c <xTimerPendFunctionCallFromISR>
 80089d0:	6178      	str	r0, [r7, #20]

		return xReturn;
 80089d2:	697b      	ldr	r3, [r7, #20]
	}
 80089d4:	4618      	mov	r0, r3
 80089d6:	3718      	adds	r7, #24
 80089d8:	46bd      	mov	sp, r7
 80089da:	bd80      	pop	{r7, pc}
 80089dc:	0800893f 	.word	0x0800893f

080089e0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80089e0:	b480      	push	{r7}
 80089e2:	b083      	sub	sp, #12
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	f103 0208 	add.w	r2, r3, #8
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	f04f 32ff 	mov.w	r2, #4294967295
 80089f8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	f103 0208 	add.w	r2, r3, #8
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	f103 0208 	add.w	r2, r3, #8
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	2200      	movs	r2, #0
 8008a12:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008a14:	bf00      	nop
 8008a16:	370c      	adds	r7, #12
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1e:	4770      	bx	lr

08008a20 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008a20:	b480      	push	{r7}
 8008a22:	b083      	sub	sp, #12
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008a2e:	bf00      	nop
 8008a30:	370c      	adds	r7, #12
 8008a32:	46bd      	mov	sp, r7
 8008a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a38:	4770      	bx	lr

08008a3a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008a3a:	b480      	push	{r7}
 8008a3c:	b085      	sub	sp, #20
 8008a3e:	af00      	add	r7, sp, #0
 8008a40:	6078      	str	r0, [r7, #4]
 8008a42:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	685b      	ldr	r3, [r3, #4]
 8008a48:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	68fa      	ldr	r2, [r7, #12]
 8008a4e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	689a      	ldr	r2, [r3, #8]
 8008a54:	683b      	ldr	r3, [r7, #0]
 8008a56:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	689b      	ldr	r3, [r3, #8]
 8008a5c:	683a      	ldr	r2, [r7, #0]
 8008a5e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	683a      	ldr	r2, [r7, #0]
 8008a64:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008a66:	683b      	ldr	r3, [r7, #0]
 8008a68:	687a      	ldr	r2, [r7, #4]
 8008a6a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	1c5a      	adds	r2, r3, #1
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	601a      	str	r2, [r3, #0]
}
 8008a76:	bf00      	nop
 8008a78:	3714      	adds	r7, #20
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a80:	4770      	bx	lr

08008a82 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008a82:	b480      	push	{r7}
 8008a84:	b085      	sub	sp, #20
 8008a86:	af00      	add	r7, sp, #0
 8008a88:	6078      	str	r0, [r7, #4]
 8008a8a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008a8c:	683b      	ldr	r3, [r7, #0]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008a92:	68bb      	ldr	r3, [r7, #8]
 8008a94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a98:	d103      	bne.n	8008aa2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	691b      	ldr	r3, [r3, #16]
 8008a9e:	60fb      	str	r3, [r7, #12]
 8008aa0:	e00c      	b.n	8008abc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	3308      	adds	r3, #8
 8008aa6:	60fb      	str	r3, [r7, #12]
 8008aa8:	e002      	b.n	8008ab0 <vListInsert+0x2e>
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	685b      	ldr	r3, [r3, #4]
 8008aae:	60fb      	str	r3, [r7, #12]
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	685b      	ldr	r3, [r3, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	68ba      	ldr	r2, [r7, #8]
 8008ab8:	429a      	cmp	r2, r3
 8008aba:	d2f6      	bcs.n	8008aaa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	685a      	ldr	r2, [r3, #4]
 8008ac0:	683b      	ldr	r3, [r7, #0]
 8008ac2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008ac4:	683b      	ldr	r3, [r7, #0]
 8008ac6:	685b      	ldr	r3, [r3, #4]
 8008ac8:	683a      	ldr	r2, [r7, #0]
 8008aca:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	68fa      	ldr	r2, [r7, #12]
 8008ad0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	683a      	ldr	r2, [r7, #0]
 8008ad6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008ad8:	683b      	ldr	r3, [r7, #0]
 8008ada:	687a      	ldr	r2, [r7, #4]
 8008adc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	1c5a      	adds	r2, r3, #1
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	601a      	str	r2, [r3, #0]
}
 8008ae8:	bf00      	nop
 8008aea:	3714      	adds	r7, #20
 8008aec:	46bd      	mov	sp, r7
 8008aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af2:	4770      	bx	lr

08008af4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008af4:	b480      	push	{r7}
 8008af6:	b085      	sub	sp, #20
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	691b      	ldr	r3, [r3, #16]
 8008b00:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	685b      	ldr	r3, [r3, #4]
 8008b06:	687a      	ldr	r2, [r7, #4]
 8008b08:	6892      	ldr	r2, [r2, #8]
 8008b0a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	689b      	ldr	r3, [r3, #8]
 8008b10:	687a      	ldr	r2, [r7, #4]
 8008b12:	6852      	ldr	r2, [r2, #4]
 8008b14:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	685b      	ldr	r3, [r3, #4]
 8008b1a:	687a      	ldr	r2, [r7, #4]
 8008b1c:	429a      	cmp	r2, r3
 8008b1e:	d103      	bne.n	8008b28 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	689a      	ldr	r2, [r3, #8]
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	1e5a      	subs	r2, r3, #1
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	681b      	ldr	r3, [r3, #0]
}
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	3714      	adds	r7, #20
 8008b40:	46bd      	mov	sp, r7
 8008b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b46:	4770      	bx	lr

08008b48 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	b084      	sub	sp, #16
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	6078      	str	r0, [r7, #4]
 8008b50:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d10a      	bne.n	8008b72 <xQueueGenericReset+0x2a>
	__asm volatile
 8008b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b60:	f383 8811 	msr	BASEPRI, r3
 8008b64:	f3bf 8f6f 	isb	sy
 8008b68:	f3bf 8f4f 	dsb	sy
 8008b6c:	60bb      	str	r3, [r7, #8]
}
 8008b6e:	bf00      	nop
 8008b70:	e7fe      	b.n	8008b70 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008b72:	f002 fa17 	bl	800afa4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	681a      	ldr	r2, [r3, #0]
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b7e:	68f9      	ldr	r1, [r7, #12]
 8008b80:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008b82:	fb01 f303 	mul.w	r3, r1, r3
 8008b86:	441a      	add	r2, r3
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	2200      	movs	r2, #0
 8008b90:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	681a      	ldr	r2, [r3, #0]
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	681a      	ldr	r2, [r3, #0]
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ba2:	3b01      	subs	r3, #1
 8008ba4:	68f9      	ldr	r1, [r7, #12]
 8008ba6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008ba8:	fb01 f303 	mul.w	r3, r1, r3
 8008bac:	441a      	add	r2, r3
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	22ff      	movs	r2, #255	; 0xff
 8008bb6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	22ff      	movs	r2, #255	; 0xff
 8008bbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008bc2:	683b      	ldr	r3, [r7, #0]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d114      	bne.n	8008bf2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	691b      	ldr	r3, [r3, #16]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d01a      	beq.n	8008c06 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	3310      	adds	r3, #16
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	f001 fa33 	bl	800a040 <xTaskRemoveFromEventList>
 8008bda:	4603      	mov	r3, r0
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d012      	beq.n	8008c06 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008be0:	4b0c      	ldr	r3, [pc, #48]	; (8008c14 <xQueueGenericReset+0xcc>)
 8008be2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008be6:	601a      	str	r2, [r3, #0]
 8008be8:	f3bf 8f4f 	dsb	sy
 8008bec:	f3bf 8f6f 	isb	sy
 8008bf0:	e009      	b.n	8008c06 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	3310      	adds	r3, #16
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	f7ff fef2 	bl	80089e0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	3324      	adds	r3, #36	; 0x24
 8008c00:	4618      	mov	r0, r3
 8008c02:	f7ff feed 	bl	80089e0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008c06:	f002 f9fd 	bl	800b004 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008c0a:	2301      	movs	r3, #1
}
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	3710      	adds	r7, #16
 8008c10:	46bd      	mov	sp, r7
 8008c12:	bd80      	pop	{r7, pc}
 8008c14:	e000ed04 	.word	0xe000ed04

08008c18 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b08e      	sub	sp, #56	; 0x38
 8008c1c:	af02      	add	r7, sp, #8
 8008c1e:	60f8      	str	r0, [r7, #12]
 8008c20:	60b9      	str	r1, [r7, #8]
 8008c22:	607a      	str	r2, [r7, #4]
 8008c24:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d10a      	bne.n	8008c42 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c30:	f383 8811 	msr	BASEPRI, r3
 8008c34:	f3bf 8f6f 	isb	sy
 8008c38:	f3bf 8f4f 	dsb	sy
 8008c3c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008c3e:	bf00      	nop
 8008c40:	e7fe      	b.n	8008c40 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008c42:	683b      	ldr	r3, [r7, #0]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d10a      	bne.n	8008c5e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c4c:	f383 8811 	msr	BASEPRI, r3
 8008c50:	f3bf 8f6f 	isb	sy
 8008c54:	f3bf 8f4f 	dsb	sy
 8008c58:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008c5a:	bf00      	nop
 8008c5c:	e7fe      	b.n	8008c5c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d002      	beq.n	8008c6a <xQueueGenericCreateStatic+0x52>
 8008c64:	68bb      	ldr	r3, [r7, #8]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d001      	beq.n	8008c6e <xQueueGenericCreateStatic+0x56>
 8008c6a:	2301      	movs	r3, #1
 8008c6c:	e000      	b.n	8008c70 <xQueueGenericCreateStatic+0x58>
 8008c6e:	2300      	movs	r3, #0
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d10a      	bne.n	8008c8a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c78:	f383 8811 	msr	BASEPRI, r3
 8008c7c:	f3bf 8f6f 	isb	sy
 8008c80:	f3bf 8f4f 	dsb	sy
 8008c84:	623b      	str	r3, [r7, #32]
}
 8008c86:	bf00      	nop
 8008c88:	e7fe      	b.n	8008c88 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d102      	bne.n	8008c96 <xQueueGenericCreateStatic+0x7e>
 8008c90:	68bb      	ldr	r3, [r7, #8]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d101      	bne.n	8008c9a <xQueueGenericCreateStatic+0x82>
 8008c96:	2301      	movs	r3, #1
 8008c98:	e000      	b.n	8008c9c <xQueueGenericCreateStatic+0x84>
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d10a      	bne.n	8008cb6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ca4:	f383 8811 	msr	BASEPRI, r3
 8008ca8:	f3bf 8f6f 	isb	sy
 8008cac:	f3bf 8f4f 	dsb	sy
 8008cb0:	61fb      	str	r3, [r7, #28]
}
 8008cb2:	bf00      	nop
 8008cb4:	e7fe      	b.n	8008cb4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008cb6:	2350      	movs	r3, #80	; 0x50
 8008cb8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008cba:	697b      	ldr	r3, [r7, #20]
 8008cbc:	2b50      	cmp	r3, #80	; 0x50
 8008cbe:	d00a      	beq.n	8008cd6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cc4:	f383 8811 	msr	BASEPRI, r3
 8008cc8:	f3bf 8f6f 	isb	sy
 8008ccc:	f3bf 8f4f 	dsb	sy
 8008cd0:	61bb      	str	r3, [r7, #24]
}
 8008cd2:	bf00      	nop
 8008cd4:	e7fe      	b.n	8008cd4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008cd6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008cd8:	683b      	ldr	r3, [r7, #0]
 8008cda:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d00d      	beq.n	8008cfe <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ce4:	2201      	movs	r2, #1
 8008ce6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008cea:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cf0:	9300      	str	r3, [sp, #0]
 8008cf2:	4613      	mov	r3, r2
 8008cf4:	687a      	ldr	r2, [r7, #4]
 8008cf6:	68b9      	ldr	r1, [r7, #8]
 8008cf8:	68f8      	ldr	r0, [r7, #12]
 8008cfa:	f000 f845 	bl	8008d88 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008d00:	4618      	mov	r0, r3
 8008d02:	3730      	adds	r7, #48	; 0x30
 8008d04:	46bd      	mov	sp, r7
 8008d06:	bd80      	pop	{r7, pc}

08008d08 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b08a      	sub	sp, #40	; 0x28
 8008d0c:	af02      	add	r7, sp, #8
 8008d0e:	60f8      	str	r0, [r7, #12]
 8008d10:	60b9      	str	r1, [r7, #8]
 8008d12:	4613      	mov	r3, r2
 8008d14:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d10a      	bne.n	8008d32 <xQueueGenericCreate+0x2a>
	__asm volatile
 8008d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d20:	f383 8811 	msr	BASEPRI, r3
 8008d24:	f3bf 8f6f 	isb	sy
 8008d28:	f3bf 8f4f 	dsb	sy
 8008d2c:	613b      	str	r3, [r7, #16]
}
 8008d2e:	bf00      	nop
 8008d30:	e7fe      	b.n	8008d30 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8008d32:	68bb      	ldr	r3, [r7, #8]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d102      	bne.n	8008d3e <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8008d38:	2300      	movs	r3, #0
 8008d3a:	61fb      	str	r3, [r7, #28]
 8008d3c:	e004      	b.n	8008d48 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	68ba      	ldr	r2, [r7, #8]
 8008d42:	fb02 f303 	mul.w	r3, r2, r3
 8008d46:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008d48:	69fb      	ldr	r3, [r7, #28]
 8008d4a:	3350      	adds	r3, #80	; 0x50
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	f002 fa4b 	bl	800b1e8 <pvPortMalloc>
 8008d52:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008d54:	69bb      	ldr	r3, [r7, #24]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d011      	beq.n	8008d7e <xQueueGenericCreate+0x76>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008d5a:	69bb      	ldr	r3, [r7, #24]
 8008d5c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008d5e:	697b      	ldr	r3, [r7, #20]
 8008d60:	3350      	adds	r3, #80	; 0x50
 8008d62:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008d64:	69bb      	ldr	r3, [r7, #24]
 8008d66:	2200      	movs	r2, #0
 8008d68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008d6c:	79fa      	ldrb	r2, [r7, #7]
 8008d6e:	69bb      	ldr	r3, [r7, #24]
 8008d70:	9300      	str	r3, [sp, #0]
 8008d72:	4613      	mov	r3, r2
 8008d74:	697a      	ldr	r2, [r7, #20]
 8008d76:	68b9      	ldr	r1, [r7, #8]
 8008d78:	68f8      	ldr	r0, [r7, #12]
 8008d7a:	f000 f805 	bl	8008d88 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008d7e:	69bb      	ldr	r3, [r7, #24]
	}
 8008d80:	4618      	mov	r0, r3
 8008d82:	3720      	adds	r7, #32
 8008d84:	46bd      	mov	sp, r7
 8008d86:	bd80      	pop	{r7, pc}

08008d88 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b084      	sub	sp, #16
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	60f8      	str	r0, [r7, #12]
 8008d90:	60b9      	str	r1, [r7, #8]
 8008d92:	607a      	str	r2, [r7, #4]
 8008d94:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008d96:	68bb      	ldr	r3, [r7, #8]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d103      	bne.n	8008da4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008d9c:	69bb      	ldr	r3, [r7, #24]
 8008d9e:	69ba      	ldr	r2, [r7, #24]
 8008da0:	601a      	str	r2, [r3, #0]
 8008da2:	e002      	b.n	8008daa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008da4:	69bb      	ldr	r3, [r7, #24]
 8008da6:	687a      	ldr	r2, [r7, #4]
 8008da8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008daa:	69bb      	ldr	r3, [r7, #24]
 8008dac:	68fa      	ldr	r2, [r7, #12]
 8008dae:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008db0:	69bb      	ldr	r3, [r7, #24]
 8008db2:	68ba      	ldr	r2, [r7, #8]
 8008db4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008db6:	2101      	movs	r1, #1
 8008db8:	69b8      	ldr	r0, [r7, #24]
 8008dba:	f7ff fec5 	bl	8008b48 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008dbe:	69bb      	ldr	r3, [r7, #24]
 8008dc0:	78fa      	ldrb	r2, [r7, #3]
 8008dc2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008dc6:	bf00      	nop
 8008dc8:	3710      	adds	r7, #16
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	bd80      	pop	{r7, pc}

08008dce <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8008dce:	b580      	push	{r7, lr}
 8008dd0:	b08a      	sub	sp, #40	; 0x28
 8008dd2:	af02      	add	r7, sp, #8
 8008dd4:	60f8      	str	r0, [r7, #12]
 8008dd6:	60b9      	str	r1, [r7, #8]
 8008dd8:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d10a      	bne.n	8008df6 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8008de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008de4:	f383 8811 	msr	BASEPRI, r3
 8008de8:	f3bf 8f6f 	isb	sy
 8008dec:	f3bf 8f4f 	dsb	sy
 8008df0:	61bb      	str	r3, [r7, #24]
}
 8008df2:	bf00      	nop
 8008df4:	e7fe      	b.n	8008df4 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8008df6:	68ba      	ldr	r2, [r7, #8]
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	429a      	cmp	r2, r3
 8008dfc:	d90a      	bls.n	8008e14 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8008dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e02:	f383 8811 	msr	BASEPRI, r3
 8008e06:	f3bf 8f6f 	isb	sy
 8008e0a:	f3bf 8f4f 	dsb	sy
 8008e0e:	617b      	str	r3, [r7, #20]
}
 8008e10:	bf00      	nop
 8008e12:	e7fe      	b.n	8008e12 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008e14:	2302      	movs	r3, #2
 8008e16:	9300      	str	r3, [sp, #0]
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	2100      	movs	r1, #0
 8008e1e:	68f8      	ldr	r0, [r7, #12]
 8008e20:	f7ff fefa 	bl	8008c18 <xQueueGenericCreateStatic>
 8008e24:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8008e26:	69fb      	ldr	r3, [r7, #28]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d002      	beq.n	8008e32 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008e2c:	69fb      	ldr	r3, [r7, #28]
 8008e2e:	68ba      	ldr	r2, [r7, #8]
 8008e30:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8008e32:	69fb      	ldr	r3, [r7, #28]
	}
 8008e34:	4618      	mov	r0, r3
 8008e36:	3720      	adds	r7, #32
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	bd80      	pop	{r7, pc}

08008e3c <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	b086      	sub	sp, #24
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
 8008e44:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d10a      	bne.n	8008e62 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8008e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e50:	f383 8811 	msr	BASEPRI, r3
 8008e54:	f3bf 8f6f 	isb	sy
 8008e58:	f3bf 8f4f 	dsb	sy
 8008e5c:	613b      	str	r3, [r7, #16]
}
 8008e5e:	bf00      	nop
 8008e60:	e7fe      	b.n	8008e60 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8008e62:	683a      	ldr	r2, [r7, #0]
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	429a      	cmp	r2, r3
 8008e68:	d90a      	bls.n	8008e80 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8008e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e6e:	f383 8811 	msr	BASEPRI, r3
 8008e72:	f3bf 8f6f 	isb	sy
 8008e76:	f3bf 8f4f 	dsb	sy
 8008e7a:	60fb      	str	r3, [r7, #12]
}
 8008e7c:	bf00      	nop
 8008e7e:	e7fe      	b.n	8008e7e <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008e80:	2202      	movs	r2, #2
 8008e82:	2100      	movs	r1, #0
 8008e84:	6878      	ldr	r0, [r7, #4]
 8008e86:	f7ff ff3f 	bl	8008d08 <xQueueGenericCreate>
 8008e8a:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8008e8c:	697b      	ldr	r3, [r7, #20]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d002      	beq.n	8008e98 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008e92:	697b      	ldr	r3, [r7, #20]
 8008e94:	683a      	ldr	r2, [r7, #0]
 8008e96:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8008e98:	697b      	ldr	r3, [r7, #20]
	}
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	3718      	adds	r7, #24
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	bd80      	pop	{r7, pc}
	...

08008ea4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	b08e      	sub	sp, #56	; 0x38
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	60f8      	str	r0, [r7, #12]
 8008eac:	60b9      	str	r1, [r7, #8]
 8008eae:	607a      	str	r2, [r7, #4]
 8008eb0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d10a      	bne.n	8008ed6 <xQueueGenericSend+0x32>
	__asm volatile
 8008ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ec4:	f383 8811 	msr	BASEPRI, r3
 8008ec8:	f3bf 8f6f 	isb	sy
 8008ecc:	f3bf 8f4f 	dsb	sy
 8008ed0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008ed2:	bf00      	nop
 8008ed4:	e7fe      	b.n	8008ed4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008ed6:	68bb      	ldr	r3, [r7, #8]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d103      	bne.n	8008ee4 <xQueueGenericSend+0x40>
 8008edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d101      	bne.n	8008ee8 <xQueueGenericSend+0x44>
 8008ee4:	2301      	movs	r3, #1
 8008ee6:	e000      	b.n	8008eea <xQueueGenericSend+0x46>
 8008ee8:	2300      	movs	r3, #0
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d10a      	bne.n	8008f04 <xQueueGenericSend+0x60>
	__asm volatile
 8008eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ef2:	f383 8811 	msr	BASEPRI, r3
 8008ef6:	f3bf 8f6f 	isb	sy
 8008efa:	f3bf 8f4f 	dsb	sy
 8008efe:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008f00:	bf00      	nop
 8008f02:	e7fe      	b.n	8008f02 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008f04:	683b      	ldr	r3, [r7, #0]
 8008f06:	2b02      	cmp	r3, #2
 8008f08:	d103      	bne.n	8008f12 <xQueueGenericSend+0x6e>
 8008f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f0e:	2b01      	cmp	r3, #1
 8008f10:	d101      	bne.n	8008f16 <xQueueGenericSend+0x72>
 8008f12:	2301      	movs	r3, #1
 8008f14:	e000      	b.n	8008f18 <xQueueGenericSend+0x74>
 8008f16:	2300      	movs	r3, #0
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d10a      	bne.n	8008f32 <xQueueGenericSend+0x8e>
	__asm volatile
 8008f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f20:	f383 8811 	msr	BASEPRI, r3
 8008f24:	f3bf 8f6f 	isb	sy
 8008f28:	f3bf 8f4f 	dsb	sy
 8008f2c:	623b      	str	r3, [r7, #32]
}
 8008f2e:	bf00      	nop
 8008f30:	e7fe      	b.n	8008f30 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008f32:	f001 faa5 	bl	800a480 <xTaskGetSchedulerState>
 8008f36:	4603      	mov	r3, r0
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d102      	bne.n	8008f42 <xQueueGenericSend+0x9e>
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d101      	bne.n	8008f46 <xQueueGenericSend+0xa2>
 8008f42:	2301      	movs	r3, #1
 8008f44:	e000      	b.n	8008f48 <xQueueGenericSend+0xa4>
 8008f46:	2300      	movs	r3, #0
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d10a      	bne.n	8008f62 <xQueueGenericSend+0xbe>
	__asm volatile
 8008f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f50:	f383 8811 	msr	BASEPRI, r3
 8008f54:	f3bf 8f6f 	isb	sy
 8008f58:	f3bf 8f4f 	dsb	sy
 8008f5c:	61fb      	str	r3, [r7, #28]
}
 8008f5e:	bf00      	nop
 8008f60:	e7fe      	b.n	8008f60 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008f62:	f002 f81f 	bl	800afa4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f6e:	429a      	cmp	r2, r3
 8008f70:	d302      	bcc.n	8008f78 <xQueueGenericSend+0xd4>
 8008f72:	683b      	ldr	r3, [r7, #0]
 8008f74:	2b02      	cmp	r3, #2
 8008f76:	d129      	bne.n	8008fcc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008f78:	683a      	ldr	r2, [r7, #0]
 8008f7a:	68b9      	ldr	r1, [r7, #8]
 8008f7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008f7e:	f000 fa2a 	bl	80093d6 <prvCopyDataToQueue>
 8008f82:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d010      	beq.n	8008fae <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f8e:	3324      	adds	r3, #36	; 0x24
 8008f90:	4618      	mov	r0, r3
 8008f92:	f001 f855 	bl	800a040 <xTaskRemoveFromEventList>
 8008f96:	4603      	mov	r3, r0
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d013      	beq.n	8008fc4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008f9c:	4b3f      	ldr	r3, [pc, #252]	; (800909c <xQueueGenericSend+0x1f8>)
 8008f9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008fa2:	601a      	str	r2, [r3, #0]
 8008fa4:	f3bf 8f4f 	dsb	sy
 8008fa8:	f3bf 8f6f 	isb	sy
 8008fac:	e00a      	b.n	8008fc4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d007      	beq.n	8008fc4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008fb4:	4b39      	ldr	r3, [pc, #228]	; (800909c <xQueueGenericSend+0x1f8>)
 8008fb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008fba:	601a      	str	r2, [r3, #0]
 8008fbc:	f3bf 8f4f 	dsb	sy
 8008fc0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008fc4:	f002 f81e 	bl	800b004 <vPortExitCritical>
				return pdPASS;
 8008fc8:	2301      	movs	r3, #1
 8008fca:	e063      	b.n	8009094 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d103      	bne.n	8008fda <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008fd2:	f002 f817 	bl	800b004 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	e05c      	b.n	8009094 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008fda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d106      	bne.n	8008fee <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008fe0:	f107 0314 	add.w	r3, r7, #20
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	f001 f8f1 	bl	800a1cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008fea:	2301      	movs	r3, #1
 8008fec:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008fee:	f002 f809 	bl	800b004 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008ff2:	f000 fdc5 	bl	8009b80 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008ff6:	f001 ffd5 	bl	800afa4 <vPortEnterCritical>
 8008ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ffc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009000:	b25b      	sxtb	r3, r3
 8009002:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009006:	d103      	bne.n	8009010 <xQueueGenericSend+0x16c>
 8009008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800900a:	2200      	movs	r2, #0
 800900c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009012:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009016:	b25b      	sxtb	r3, r3
 8009018:	f1b3 3fff 	cmp.w	r3, #4294967295
 800901c:	d103      	bne.n	8009026 <xQueueGenericSend+0x182>
 800901e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009020:	2200      	movs	r2, #0
 8009022:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009026:	f001 ffed 	bl	800b004 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800902a:	1d3a      	adds	r2, r7, #4
 800902c:	f107 0314 	add.w	r3, r7, #20
 8009030:	4611      	mov	r1, r2
 8009032:	4618      	mov	r0, r3
 8009034:	f001 f8e0 	bl	800a1f8 <xTaskCheckForTimeOut>
 8009038:	4603      	mov	r3, r0
 800903a:	2b00      	cmp	r3, #0
 800903c:	d124      	bne.n	8009088 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800903e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009040:	f000 fac1 	bl	80095c6 <prvIsQueueFull>
 8009044:	4603      	mov	r3, r0
 8009046:	2b00      	cmp	r3, #0
 8009048:	d018      	beq.n	800907c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800904a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800904c:	3310      	adds	r3, #16
 800904e:	687a      	ldr	r2, [r7, #4]
 8009050:	4611      	mov	r1, r2
 8009052:	4618      	mov	r0, r3
 8009054:	f000 ff68 	bl	8009f28 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009058:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800905a:	f000 fa4c 	bl	80094f6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800905e:	f000 fd9d 	bl	8009b9c <xTaskResumeAll>
 8009062:	4603      	mov	r3, r0
 8009064:	2b00      	cmp	r3, #0
 8009066:	f47f af7c 	bne.w	8008f62 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800906a:	4b0c      	ldr	r3, [pc, #48]	; (800909c <xQueueGenericSend+0x1f8>)
 800906c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009070:	601a      	str	r2, [r3, #0]
 8009072:	f3bf 8f4f 	dsb	sy
 8009076:	f3bf 8f6f 	isb	sy
 800907a:	e772      	b.n	8008f62 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800907c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800907e:	f000 fa3a 	bl	80094f6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009082:	f000 fd8b 	bl	8009b9c <xTaskResumeAll>
 8009086:	e76c      	b.n	8008f62 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009088:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800908a:	f000 fa34 	bl	80094f6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800908e:	f000 fd85 	bl	8009b9c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009092:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009094:	4618      	mov	r0, r3
 8009096:	3738      	adds	r7, #56	; 0x38
 8009098:	46bd      	mov	sp, r7
 800909a:	bd80      	pop	{r7, pc}
 800909c:	e000ed04 	.word	0xe000ed04

080090a0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b08e      	sub	sp, #56	; 0x38
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	60f8      	str	r0, [r7, #12]
 80090a8:	60b9      	str	r1, [r7, #8]
 80090aa:	607a      	str	r2, [r7, #4]
 80090ac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80090b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d10a      	bne.n	80090ce <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80090b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090bc:	f383 8811 	msr	BASEPRI, r3
 80090c0:	f3bf 8f6f 	isb	sy
 80090c4:	f3bf 8f4f 	dsb	sy
 80090c8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80090ca:	bf00      	nop
 80090cc:	e7fe      	b.n	80090cc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80090ce:	68bb      	ldr	r3, [r7, #8]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d103      	bne.n	80090dc <xQueueGenericSendFromISR+0x3c>
 80090d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d101      	bne.n	80090e0 <xQueueGenericSendFromISR+0x40>
 80090dc:	2301      	movs	r3, #1
 80090de:	e000      	b.n	80090e2 <xQueueGenericSendFromISR+0x42>
 80090e0:	2300      	movs	r3, #0
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d10a      	bne.n	80090fc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80090e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090ea:	f383 8811 	msr	BASEPRI, r3
 80090ee:	f3bf 8f6f 	isb	sy
 80090f2:	f3bf 8f4f 	dsb	sy
 80090f6:	623b      	str	r3, [r7, #32]
}
 80090f8:	bf00      	nop
 80090fa:	e7fe      	b.n	80090fa <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80090fc:	683b      	ldr	r3, [r7, #0]
 80090fe:	2b02      	cmp	r3, #2
 8009100:	d103      	bne.n	800910a <xQueueGenericSendFromISR+0x6a>
 8009102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009104:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009106:	2b01      	cmp	r3, #1
 8009108:	d101      	bne.n	800910e <xQueueGenericSendFromISR+0x6e>
 800910a:	2301      	movs	r3, #1
 800910c:	e000      	b.n	8009110 <xQueueGenericSendFromISR+0x70>
 800910e:	2300      	movs	r3, #0
 8009110:	2b00      	cmp	r3, #0
 8009112:	d10a      	bne.n	800912a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8009114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009118:	f383 8811 	msr	BASEPRI, r3
 800911c:	f3bf 8f6f 	isb	sy
 8009120:	f3bf 8f4f 	dsb	sy
 8009124:	61fb      	str	r3, [r7, #28]
}
 8009126:	bf00      	nop
 8009128:	e7fe      	b.n	8009128 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800912a:	f002 f81d 	bl	800b168 <vPortValidateInterruptPriority>
	__asm volatile
 800912e:	f3ef 8211 	mrs	r2, BASEPRI
 8009132:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009136:	f383 8811 	msr	BASEPRI, r3
 800913a:	f3bf 8f6f 	isb	sy
 800913e:	f3bf 8f4f 	dsb	sy
 8009142:	61ba      	str	r2, [r7, #24]
 8009144:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8009146:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009148:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800914a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800914c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800914e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009150:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009152:	429a      	cmp	r2, r3
 8009154:	d302      	bcc.n	800915c <xQueueGenericSendFromISR+0xbc>
 8009156:	683b      	ldr	r3, [r7, #0]
 8009158:	2b02      	cmp	r3, #2
 800915a:	d12c      	bne.n	80091b6 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800915c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800915e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009162:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009166:	683a      	ldr	r2, [r7, #0]
 8009168:	68b9      	ldr	r1, [r7, #8]
 800916a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800916c:	f000 f933 	bl	80093d6 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009170:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8009174:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009178:	d112      	bne.n	80091a0 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800917a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800917c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800917e:	2b00      	cmp	r3, #0
 8009180:	d016      	beq.n	80091b0 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009184:	3324      	adds	r3, #36	; 0x24
 8009186:	4618      	mov	r0, r3
 8009188:	f000 ff5a 	bl	800a040 <xTaskRemoveFromEventList>
 800918c:	4603      	mov	r3, r0
 800918e:	2b00      	cmp	r3, #0
 8009190:	d00e      	beq.n	80091b0 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	2b00      	cmp	r3, #0
 8009196:	d00b      	beq.n	80091b0 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	2201      	movs	r2, #1
 800919c:	601a      	str	r2, [r3, #0]
 800919e:	e007      	b.n	80091b0 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80091a0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80091a4:	3301      	adds	r3, #1
 80091a6:	b2db      	uxtb	r3, r3
 80091a8:	b25a      	sxtb	r2, r3
 80091aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80091b0:	2301      	movs	r3, #1
 80091b2:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80091b4:	e001      	b.n	80091ba <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80091b6:	2300      	movs	r3, #0
 80091b8:	637b      	str	r3, [r7, #52]	; 0x34
 80091ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091bc:	613b      	str	r3, [r7, #16]
	__asm volatile
 80091be:	693b      	ldr	r3, [r7, #16]
 80091c0:	f383 8811 	msr	BASEPRI, r3
}
 80091c4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80091c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80091c8:	4618      	mov	r0, r3
 80091ca:	3738      	adds	r7, #56	; 0x38
 80091cc:	46bd      	mov	sp, r7
 80091ce:	bd80      	pop	{r7, pc}

080091d0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80091d0:	b580      	push	{r7, lr}
 80091d2:	b08c      	sub	sp, #48	; 0x30
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	60f8      	str	r0, [r7, #12]
 80091d8:	60b9      	str	r1, [r7, #8]
 80091da:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80091dc:	2300      	movs	r3, #0
 80091de:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80091e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d10a      	bne.n	8009200 <xQueueReceive+0x30>
	__asm volatile
 80091ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091ee:	f383 8811 	msr	BASEPRI, r3
 80091f2:	f3bf 8f6f 	isb	sy
 80091f6:	f3bf 8f4f 	dsb	sy
 80091fa:	623b      	str	r3, [r7, #32]
}
 80091fc:	bf00      	nop
 80091fe:	e7fe      	b.n	80091fe <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009200:	68bb      	ldr	r3, [r7, #8]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d103      	bne.n	800920e <xQueueReceive+0x3e>
 8009206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800920a:	2b00      	cmp	r3, #0
 800920c:	d101      	bne.n	8009212 <xQueueReceive+0x42>
 800920e:	2301      	movs	r3, #1
 8009210:	e000      	b.n	8009214 <xQueueReceive+0x44>
 8009212:	2300      	movs	r3, #0
 8009214:	2b00      	cmp	r3, #0
 8009216:	d10a      	bne.n	800922e <xQueueReceive+0x5e>
	__asm volatile
 8009218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800921c:	f383 8811 	msr	BASEPRI, r3
 8009220:	f3bf 8f6f 	isb	sy
 8009224:	f3bf 8f4f 	dsb	sy
 8009228:	61fb      	str	r3, [r7, #28]
}
 800922a:	bf00      	nop
 800922c:	e7fe      	b.n	800922c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800922e:	f001 f927 	bl	800a480 <xTaskGetSchedulerState>
 8009232:	4603      	mov	r3, r0
 8009234:	2b00      	cmp	r3, #0
 8009236:	d102      	bne.n	800923e <xQueueReceive+0x6e>
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d101      	bne.n	8009242 <xQueueReceive+0x72>
 800923e:	2301      	movs	r3, #1
 8009240:	e000      	b.n	8009244 <xQueueReceive+0x74>
 8009242:	2300      	movs	r3, #0
 8009244:	2b00      	cmp	r3, #0
 8009246:	d10a      	bne.n	800925e <xQueueReceive+0x8e>
	__asm volatile
 8009248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800924c:	f383 8811 	msr	BASEPRI, r3
 8009250:	f3bf 8f6f 	isb	sy
 8009254:	f3bf 8f4f 	dsb	sy
 8009258:	61bb      	str	r3, [r7, #24]
}
 800925a:	bf00      	nop
 800925c:	e7fe      	b.n	800925c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800925e:	f001 fea1 	bl	800afa4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009266:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800926a:	2b00      	cmp	r3, #0
 800926c:	d01f      	beq.n	80092ae <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800926e:	68b9      	ldr	r1, [r7, #8]
 8009270:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009272:	f000 f91a 	bl	80094aa <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009278:	1e5a      	subs	r2, r3, #1
 800927a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800927c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800927e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009280:	691b      	ldr	r3, [r3, #16]
 8009282:	2b00      	cmp	r3, #0
 8009284:	d00f      	beq.n	80092a6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009288:	3310      	adds	r3, #16
 800928a:	4618      	mov	r0, r3
 800928c:	f000 fed8 	bl	800a040 <xTaskRemoveFromEventList>
 8009290:	4603      	mov	r3, r0
 8009292:	2b00      	cmp	r3, #0
 8009294:	d007      	beq.n	80092a6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009296:	4b3d      	ldr	r3, [pc, #244]	; (800938c <xQueueReceive+0x1bc>)
 8009298:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800929c:	601a      	str	r2, [r3, #0]
 800929e:	f3bf 8f4f 	dsb	sy
 80092a2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80092a6:	f001 fead 	bl	800b004 <vPortExitCritical>
				return pdPASS;
 80092aa:	2301      	movs	r3, #1
 80092ac:	e069      	b.n	8009382 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d103      	bne.n	80092bc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80092b4:	f001 fea6 	bl	800b004 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80092b8:	2300      	movs	r3, #0
 80092ba:	e062      	b.n	8009382 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80092bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d106      	bne.n	80092d0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80092c2:	f107 0310 	add.w	r3, r7, #16
 80092c6:	4618      	mov	r0, r3
 80092c8:	f000 ff80 	bl	800a1cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80092cc:	2301      	movs	r3, #1
 80092ce:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80092d0:	f001 fe98 	bl	800b004 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80092d4:	f000 fc54 	bl	8009b80 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80092d8:	f001 fe64 	bl	800afa4 <vPortEnterCritical>
 80092dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092de:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80092e2:	b25b      	sxtb	r3, r3
 80092e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092e8:	d103      	bne.n	80092f2 <xQueueReceive+0x122>
 80092ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092ec:	2200      	movs	r2, #0
 80092ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80092f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80092f8:	b25b      	sxtb	r3, r3
 80092fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092fe:	d103      	bne.n	8009308 <xQueueReceive+0x138>
 8009300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009302:	2200      	movs	r2, #0
 8009304:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009308:	f001 fe7c 	bl	800b004 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800930c:	1d3a      	adds	r2, r7, #4
 800930e:	f107 0310 	add.w	r3, r7, #16
 8009312:	4611      	mov	r1, r2
 8009314:	4618      	mov	r0, r3
 8009316:	f000 ff6f 	bl	800a1f8 <xTaskCheckForTimeOut>
 800931a:	4603      	mov	r3, r0
 800931c:	2b00      	cmp	r3, #0
 800931e:	d123      	bne.n	8009368 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009320:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009322:	f000 f93a 	bl	800959a <prvIsQueueEmpty>
 8009326:	4603      	mov	r3, r0
 8009328:	2b00      	cmp	r3, #0
 800932a:	d017      	beq.n	800935c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800932c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800932e:	3324      	adds	r3, #36	; 0x24
 8009330:	687a      	ldr	r2, [r7, #4]
 8009332:	4611      	mov	r1, r2
 8009334:	4618      	mov	r0, r3
 8009336:	f000 fdf7 	bl	8009f28 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800933a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800933c:	f000 f8db 	bl	80094f6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009340:	f000 fc2c 	bl	8009b9c <xTaskResumeAll>
 8009344:	4603      	mov	r3, r0
 8009346:	2b00      	cmp	r3, #0
 8009348:	d189      	bne.n	800925e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800934a:	4b10      	ldr	r3, [pc, #64]	; (800938c <xQueueReceive+0x1bc>)
 800934c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009350:	601a      	str	r2, [r3, #0]
 8009352:	f3bf 8f4f 	dsb	sy
 8009356:	f3bf 8f6f 	isb	sy
 800935a:	e780      	b.n	800925e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800935c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800935e:	f000 f8ca 	bl	80094f6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009362:	f000 fc1b 	bl	8009b9c <xTaskResumeAll>
 8009366:	e77a      	b.n	800925e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009368:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800936a:	f000 f8c4 	bl	80094f6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800936e:	f000 fc15 	bl	8009b9c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009372:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009374:	f000 f911 	bl	800959a <prvIsQueueEmpty>
 8009378:	4603      	mov	r3, r0
 800937a:	2b00      	cmp	r3, #0
 800937c:	f43f af6f 	beq.w	800925e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009380:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009382:	4618      	mov	r0, r3
 8009384:	3730      	adds	r7, #48	; 0x30
 8009386:	46bd      	mov	sp, r7
 8009388:	bd80      	pop	{r7, pc}
 800938a:	bf00      	nop
 800938c:	e000ed04 	.word	0xe000ed04

08009390 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8009390:	b580      	push	{r7, lr}
 8009392:	b084      	sub	sp, #16
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d10a      	bne.n	80093b8 <vQueueDelete+0x28>
	__asm volatile
 80093a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093a6:	f383 8811 	msr	BASEPRI, r3
 80093aa:	f3bf 8f6f 	isb	sy
 80093ae:	f3bf 8f4f 	dsb	sy
 80093b2:	60bb      	str	r3, [r7, #8]
}
 80093b4:	bf00      	nop
 80093b6:	e7fe      	b.n	80093b6 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80093b8:	68f8      	ldr	r0, [r7, #12]
 80093ba:	f000 f947 	bl	800964c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d102      	bne.n	80093ce <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 80093c8:	68f8      	ldr	r0, [r7, #12]
 80093ca:	f001 ffd1 	bl	800b370 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80093ce:	bf00      	nop
 80093d0:	3710      	adds	r7, #16
 80093d2:	46bd      	mov	sp, r7
 80093d4:	bd80      	pop	{r7, pc}

080093d6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80093d6:	b580      	push	{r7, lr}
 80093d8:	b086      	sub	sp, #24
 80093da:	af00      	add	r7, sp, #0
 80093dc:	60f8      	str	r0, [r7, #12]
 80093de:	60b9      	str	r1, [r7, #8]
 80093e0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80093e2:	2300      	movs	r3, #0
 80093e4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093ea:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d10d      	bne.n	8009410 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d14d      	bne.n	8009498 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	689b      	ldr	r3, [r3, #8]
 8009400:	4618      	mov	r0, r3
 8009402:	f001 f85b 	bl	800a4bc <xTaskPriorityDisinherit>
 8009406:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	2200      	movs	r2, #0
 800940c:	609a      	str	r2, [r3, #8]
 800940e:	e043      	b.n	8009498 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d119      	bne.n	800944a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	6858      	ldr	r0, [r3, #4]
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800941e:	461a      	mov	r2, r3
 8009420:	68b9      	ldr	r1, [r7, #8]
 8009422:	f002 f8df 	bl	800b5e4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	685a      	ldr	r2, [r3, #4]
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800942e:	441a      	add	r2, r3
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	685a      	ldr	r2, [r3, #4]
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	689b      	ldr	r3, [r3, #8]
 800943c:	429a      	cmp	r2, r3
 800943e:	d32b      	bcc.n	8009498 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	681a      	ldr	r2, [r3, #0]
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	605a      	str	r2, [r3, #4]
 8009448:	e026      	b.n	8009498 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	68d8      	ldr	r0, [r3, #12]
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009452:	461a      	mov	r2, r3
 8009454:	68b9      	ldr	r1, [r7, #8]
 8009456:	f002 f8c5 	bl	800b5e4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	68da      	ldr	r2, [r3, #12]
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009462:	425b      	negs	r3, r3
 8009464:	441a      	add	r2, r3
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	68da      	ldr	r2, [r3, #12]
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	429a      	cmp	r2, r3
 8009474:	d207      	bcs.n	8009486 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	689a      	ldr	r2, [r3, #8]
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800947e:	425b      	negs	r3, r3
 8009480:	441a      	add	r2, r3
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	2b02      	cmp	r3, #2
 800948a:	d105      	bne.n	8009498 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800948c:	693b      	ldr	r3, [r7, #16]
 800948e:	2b00      	cmp	r3, #0
 8009490:	d002      	beq.n	8009498 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009492:	693b      	ldr	r3, [r7, #16]
 8009494:	3b01      	subs	r3, #1
 8009496:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009498:	693b      	ldr	r3, [r7, #16]
 800949a:	1c5a      	adds	r2, r3, #1
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80094a0:	697b      	ldr	r3, [r7, #20]
}
 80094a2:	4618      	mov	r0, r3
 80094a4:	3718      	adds	r7, #24
 80094a6:	46bd      	mov	sp, r7
 80094a8:	bd80      	pop	{r7, pc}

080094aa <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80094aa:	b580      	push	{r7, lr}
 80094ac:	b082      	sub	sp, #8
 80094ae:	af00      	add	r7, sp, #0
 80094b0:	6078      	str	r0, [r7, #4]
 80094b2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d018      	beq.n	80094ee <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	68da      	ldr	r2, [r3, #12]
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094c4:	441a      	add	r2, r3
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	68da      	ldr	r2, [r3, #12]
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	689b      	ldr	r3, [r3, #8]
 80094d2:	429a      	cmp	r2, r3
 80094d4:	d303      	bcc.n	80094de <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681a      	ldr	r2, [r3, #0]
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	68d9      	ldr	r1, [r3, #12]
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094e6:	461a      	mov	r2, r3
 80094e8:	6838      	ldr	r0, [r7, #0]
 80094ea:	f002 f87b 	bl	800b5e4 <memcpy>
	}
}
 80094ee:	bf00      	nop
 80094f0:	3708      	adds	r7, #8
 80094f2:	46bd      	mov	sp, r7
 80094f4:	bd80      	pop	{r7, pc}

080094f6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80094f6:	b580      	push	{r7, lr}
 80094f8:	b084      	sub	sp, #16
 80094fa:	af00      	add	r7, sp, #0
 80094fc:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80094fe:	f001 fd51 	bl	800afa4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009508:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800950a:	e011      	b.n	8009530 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009510:	2b00      	cmp	r3, #0
 8009512:	d012      	beq.n	800953a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	3324      	adds	r3, #36	; 0x24
 8009518:	4618      	mov	r0, r3
 800951a:	f000 fd91 	bl	800a040 <xTaskRemoveFromEventList>
 800951e:	4603      	mov	r3, r0
 8009520:	2b00      	cmp	r3, #0
 8009522:	d001      	beq.n	8009528 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009524:	f000 feca 	bl	800a2bc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009528:	7bfb      	ldrb	r3, [r7, #15]
 800952a:	3b01      	subs	r3, #1
 800952c:	b2db      	uxtb	r3, r3
 800952e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009530:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009534:	2b00      	cmp	r3, #0
 8009536:	dce9      	bgt.n	800950c <prvUnlockQueue+0x16>
 8009538:	e000      	b.n	800953c <prvUnlockQueue+0x46>
					break;
 800953a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	22ff      	movs	r2, #255	; 0xff
 8009540:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009544:	f001 fd5e 	bl	800b004 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009548:	f001 fd2c 	bl	800afa4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009552:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009554:	e011      	b.n	800957a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	691b      	ldr	r3, [r3, #16]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d012      	beq.n	8009584 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	3310      	adds	r3, #16
 8009562:	4618      	mov	r0, r3
 8009564:	f000 fd6c 	bl	800a040 <xTaskRemoveFromEventList>
 8009568:	4603      	mov	r3, r0
 800956a:	2b00      	cmp	r3, #0
 800956c:	d001      	beq.n	8009572 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800956e:	f000 fea5 	bl	800a2bc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009572:	7bbb      	ldrb	r3, [r7, #14]
 8009574:	3b01      	subs	r3, #1
 8009576:	b2db      	uxtb	r3, r3
 8009578:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800957a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800957e:	2b00      	cmp	r3, #0
 8009580:	dce9      	bgt.n	8009556 <prvUnlockQueue+0x60>
 8009582:	e000      	b.n	8009586 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009584:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	22ff      	movs	r2, #255	; 0xff
 800958a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800958e:	f001 fd39 	bl	800b004 <vPortExitCritical>
}
 8009592:	bf00      	nop
 8009594:	3710      	adds	r7, #16
 8009596:	46bd      	mov	sp, r7
 8009598:	bd80      	pop	{r7, pc}

0800959a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800959a:	b580      	push	{r7, lr}
 800959c:	b084      	sub	sp, #16
 800959e:	af00      	add	r7, sp, #0
 80095a0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80095a2:	f001 fcff 	bl	800afa4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d102      	bne.n	80095b4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80095ae:	2301      	movs	r3, #1
 80095b0:	60fb      	str	r3, [r7, #12]
 80095b2:	e001      	b.n	80095b8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80095b4:	2300      	movs	r3, #0
 80095b6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80095b8:	f001 fd24 	bl	800b004 <vPortExitCritical>

	return xReturn;
 80095bc:	68fb      	ldr	r3, [r7, #12]
}
 80095be:	4618      	mov	r0, r3
 80095c0:	3710      	adds	r7, #16
 80095c2:	46bd      	mov	sp, r7
 80095c4:	bd80      	pop	{r7, pc}

080095c6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80095c6:	b580      	push	{r7, lr}
 80095c8:	b084      	sub	sp, #16
 80095ca:	af00      	add	r7, sp, #0
 80095cc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80095ce:	f001 fce9 	bl	800afa4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095da:	429a      	cmp	r2, r3
 80095dc:	d102      	bne.n	80095e4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80095de:	2301      	movs	r3, #1
 80095e0:	60fb      	str	r3, [r7, #12]
 80095e2:	e001      	b.n	80095e8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80095e4:	2300      	movs	r3, #0
 80095e6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80095e8:	f001 fd0c 	bl	800b004 <vPortExitCritical>

	return xReturn;
 80095ec:	68fb      	ldr	r3, [r7, #12]
}
 80095ee:	4618      	mov	r0, r3
 80095f0:	3710      	adds	r7, #16
 80095f2:	46bd      	mov	sp, r7
 80095f4:	bd80      	pop	{r7, pc}
	...

080095f8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80095f8:	b480      	push	{r7}
 80095fa:	b085      	sub	sp, #20
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]
 8009600:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009602:	2300      	movs	r3, #0
 8009604:	60fb      	str	r3, [r7, #12]
 8009606:	e014      	b.n	8009632 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009608:	4a0f      	ldr	r2, [pc, #60]	; (8009648 <vQueueAddToRegistry+0x50>)
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009610:	2b00      	cmp	r3, #0
 8009612:	d10b      	bne.n	800962c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009614:	490c      	ldr	r1, [pc, #48]	; (8009648 <vQueueAddToRegistry+0x50>)
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	683a      	ldr	r2, [r7, #0]
 800961a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800961e:	4a0a      	ldr	r2, [pc, #40]	; (8009648 <vQueueAddToRegistry+0x50>)
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	00db      	lsls	r3, r3, #3
 8009624:	4413      	add	r3, r2
 8009626:	687a      	ldr	r2, [r7, #4]
 8009628:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800962a:	e006      	b.n	800963a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	3301      	adds	r3, #1
 8009630:	60fb      	str	r3, [r7, #12]
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	2b07      	cmp	r3, #7
 8009636:	d9e7      	bls.n	8009608 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009638:	bf00      	nop
 800963a:	bf00      	nop
 800963c:	3714      	adds	r7, #20
 800963e:	46bd      	mov	sp, r7
 8009640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009644:	4770      	bx	lr
 8009646:	bf00      	nop
 8009648:	20009e60 	.word	0x20009e60

0800964c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800964c:	b480      	push	{r7}
 800964e:	b085      	sub	sp, #20
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009654:	2300      	movs	r3, #0
 8009656:	60fb      	str	r3, [r7, #12]
 8009658:	e016      	b.n	8009688 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800965a:	4a10      	ldr	r2, [pc, #64]	; (800969c <vQueueUnregisterQueue+0x50>)
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	00db      	lsls	r3, r3, #3
 8009660:	4413      	add	r3, r2
 8009662:	685b      	ldr	r3, [r3, #4]
 8009664:	687a      	ldr	r2, [r7, #4]
 8009666:	429a      	cmp	r2, r3
 8009668:	d10b      	bne.n	8009682 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800966a:	4a0c      	ldr	r2, [pc, #48]	; (800969c <vQueueUnregisterQueue+0x50>)
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	2100      	movs	r1, #0
 8009670:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8009674:	4a09      	ldr	r2, [pc, #36]	; (800969c <vQueueUnregisterQueue+0x50>)
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	00db      	lsls	r3, r3, #3
 800967a:	4413      	add	r3, r2
 800967c:	2200      	movs	r2, #0
 800967e:	605a      	str	r2, [r3, #4]
				break;
 8009680:	e006      	b.n	8009690 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	3301      	adds	r3, #1
 8009686:	60fb      	str	r3, [r7, #12]
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	2b07      	cmp	r3, #7
 800968c:	d9e5      	bls.n	800965a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800968e:	bf00      	nop
 8009690:	bf00      	nop
 8009692:	3714      	adds	r7, #20
 8009694:	46bd      	mov	sp, r7
 8009696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969a:	4770      	bx	lr
 800969c:	20009e60 	.word	0x20009e60

080096a0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b086      	sub	sp, #24
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	60f8      	str	r0, [r7, #12]
 80096a8:	60b9      	str	r1, [r7, #8]
 80096aa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80096b0:	f001 fc78 	bl	800afa4 <vPortEnterCritical>
 80096b4:	697b      	ldr	r3, [r7, #20]
 80096b6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80096ba:	b25b      	sxtb	r3, r3
 80096bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096c0:	d103      	bne.n	80096ca <vQueueWaitForMessageRestricted+0x2a>
 80096c2:	697b      	ldr	r3, [r7, #20]
 80096c4:	2200      	movs	r2, #0
 80096c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80096ca:	697b      	ldr	r3, [r7, #20]
 80096cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80096d0:	b25b      	sxtb	r3, r3
 80096d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096d6:	d103      	bne.n	80096e0 <vQueueWaitForMessageRestricted+0x40>
 80096d8:	697b      	ldr	r3, [r7, #20]
 80096da:	2200      	movs	r2, #0
 80096dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80096e0:	f001 fc90 	bl	800b004 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80096e4:	697b      	ldr	r3, [r7, #20]
 80096e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d106      	bne.n	80096fa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80096ec:	697b      	ldr	r3, [r7, #20]
 80096ee:	3324      	adds	r3, #36	; 0x24
 80096f0:	687a      	ldr	r2, [r7, #4]
 80096f2:	68b9      	ldr	r1, [r7, #8]
 80096f4:	4618      	mov	r0, r3
 80096f6:	f000 fc77 	bl	8009fe8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80096fa:	6978      	ldr	r0, [r7, #20]
 80096fc:	f7ff fefb 	bl	80094f6 <prvUnlockQueue>
	}
 8009700:	bf00      	nop
 8009702:	3718      	adds	r7, #24
 8009704:	46bd      	mov	sp, r7
 8009706:	bd80      	pop	{r7, pc}

08009708 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009708:	b580      	push	{r7, lr}
 800970a:	b08e      	sub	sp, #56	; 0x38
 800970c:	af04      	add	r7, sp, #16
 800970e:	60f8      	str	r0, [r7, #12]
 8009710:	60b9      	str	r1, [r7, #8]
 8009712:	607a      	str	r2, [r7, #4]
 8009714:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009716:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009718:	2b00      	cmp	r3, #0
 800971a:	d10a      	bne.n	8009732 <xTaskCreateStatic+0x2a>
	__asm volatile
 800971c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009720:	f383 8811 	msr	BASEPRI, r3
 8009724:	f3bf 8f6f 	isb	sy
 8009728:	f3bf 8f4f 	dsb	sy
 800972c:	623b      	str	r3, [r7, #32]
}
 800972e:	bf00      	nop
 8009730:	e7fe      	b.n	8009730 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009734:	2b00      	cmp	r3, #0
 8009736:	d10a      	bne.n	800974e <xTaskCreateStatic+0x46>
	__asm volatile
 8009738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800973c:	f383 8811 	msr	BASEPRI, r3
 8009740:	f3bf 8f6f 	isb	sy
 8009744:	f3bf 8f4f 	dsb	sy
 8009748:	61fb      	str	r3, [r7, #28]
}
 800974a:	bf00      	nop
 800974c:	e7fe      	b.n	800974c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800974e:	235c      	movs	r3, #92	; 0x5c
 8009750:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009752:	693b      	ldr	r3, [r7, #16]
 8009754:	2b5c      	cmp	r3, #92	; 0x5c
 8009756:	d00a      	beq.n	800976e <xTaskCreateStatic+0x66>
	__asm volatile
 8009758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800975c:	f383 8811 	msr	BASEPRI, r3
 8009760:	f3bf 8f6f 	isb	sy
 8009764:	f3bf 8f4f 	dsb	sy
 8009768:	61bb      	str	r3, [r7, #24]
}
 800976a:	bf00      	nop
 800976c:	e7fe      	b.n	800976c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800976e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009772:	2b00      	cmp	r3, #0
 8009774:	d01e      	beq.n	80097b4 <xTaskCreateStatic+0xac>
 8009776:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009778:	2b00      	cmp	r3, #0
 800977a:	d01b      	beq.n	80097b4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800977c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800977e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009782:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009784:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009788:	2202      	movs	r2, #2
 800978a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800978e:	2300      	movs	r3, #0
 8009790:	9303      	str	r3, [sp, #12]
 8009792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009794:	9302      	str	r3, [sp, #8]
 8009796:	f107 0314 	add.w	r3, r7, #20
 800979a:	9301      	str	r3, [sp, #4]
 800979c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800979e:	9300      	str	r3, [sp, #0]
 80097a0:	683b      	ldr	r3, [r7, #0]
 80097a2:	687a      	ldr	r2, [r7, #4]
 80097a4:	68b9      	ldr	r1, [r7, #8]
 80097a6:	68f8      	ldr	r0, [r7, #12]
 80097a8:	f000 f850 	bl	800984c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80097ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80097ae:	f000 f8dd 	bl	800996c <prvAddNewTaskToReadyList>
 80097b2:	e001      	b.n	80097b8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80097b4:	2300      	movs	r3, #0
 80097b6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80097b8:	697b      	ldr	r3, [r7, #20]
	}
 80097ba:	4618      	mov	r0, r3
 80097bc:	3728      	adds	r7, #40	; 0x28
 80097be:	46bd      	mov	sp, r7
 80097c0:	bd80      	pop	{r7, pc}

080097c2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80097c2:	b580      	push	{r7, lr}
 80097c4:	b08c      	sub	sp, #48	; 0x30
 80097c6:	af04      	add	r7, sp, #16
 80097c8:	60f8      	str	r0, [r7, #12]
 80097ca:	60b9      	str	r1, [r7, #8]
 80097cc:	603b      	str	r3, [r7, #0]
 80097ce:	4613      	mov	r3, r2
 80097d0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80097d2:	88fb      	ldrh	r3, [r7, #6]
 80097d4:	009b      	lsls	r3, r3, #2
 80097d6:	4618      	mov	r0, r3
 80097d8:	f001 fd06 	bl	800b1e8 <pvPortMalloc>
 80097dc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80097de:	697b      	ldr	r3, [r7, #20]
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d00e      	beq.n	8009802 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80097e4:	205c      	movs	r0, #92	; 0x5c
 80097e6:	f001 fcff 	bl	800b1e8 <pvPortMalloc>
 80097ea:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80097ec:	69fb      	ldr	r3, [r7, #28]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d003      	beq.n	80097fa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80097f2:	69fb      	ldr	r3, [r7, #28]
 80097f4:	697a      	ldr	r2, [r7, #20]
 80097f6:	631a      	str	r2, [r3, #48]	; 0x30
 80097f8:	e005      	b.n	8009806 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80097fa:	6978      	ldr	r0, [r7, #20]
 80097fc:	f001 fdb8 	bl	800b370 <vPortFree>
 8009800:	e001      	b.n	8009806 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009802:	2300      	movs	r3, #0
 8009804:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009806:	69fb      	ldr	r3, [r7, #28]
 8009808:	2b00      	cmp	r3, #0
 800980a:	d017      	beq.n	800983c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800980c:	69fb      	ldr	r3, [r7, #28]
 800980e:	2200      	movs	r2, #0
 8009810:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009814:	88fa      	ldrh	r2, [r7, #6]
 8009816:	2300      	movs	r3, #0
 8009818:	9303      	str	r3, [sp, #12]
 800981a:	69fb      	ldr	r3, [r7, #28]
 800981c:	9302      	str	r3, [sp, #8]
 800981e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009820:	9301      	str	r3, [sp, #4]
 8009822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009824:	9300      	str	r3, [sp, #0]
 8009826:	683b      	ldr	r3, [r7, #0]
 8009828:	68b9      	ldr	r1, [r7, #8]
 800982a:	68f8      	ldr	r0, [r7, #12]
 800982c:	f000 f80e 	bl	800984c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009830:	69f8      	ldr	r0, [r7, #28]
 8009832:	f000 f89b 	bl	800996c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009836:	2301      	movs	r3, #1
 8009838:	61bb      	str	r3, [r7, #24]
 800983a:	e002      	b.n	8009842 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800983c:	f04f 33ff 	mov.w	r3, #4294967295
 8009840:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009842:	69bb      	ldr	r3, [r7, #24]
	}
 8009844:	4618      	mov	r0, r3
 8009846:	3720      	adds	r7, #32
 8009848:	46bd      	mov	sp, r7
 800984a:	bd80      	pop	{r7, pc}

0800984c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800984c:	b580      	push	{r7, lr}
 800984e:	b088      	sub	sp, #32
 8009850:	af00      	add	r7, sp, #0
 8009852:	60f8      	str	r0, [r7, #12]
 8009854:	60b9      	str	r1, [r7, #8]
 8009856:	607a      	str	r2, [r7, #4]
 8009858:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800985a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800985c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	009b      	lsls	r3, r3, #2
 8009862:	461a      	mov	r2, r3
 8009864:	21a5      	movs	r1, #165	; 0xa5
 8009866:	f001 fecb 	bl	800b600 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800986a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800986c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009874:	3b01      	subs	r3, #1
 8009876:	009b      	lsls	r3, r3, #2
 8009878:	4413      	add	r3, r2
 800987a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800987c:	69bb      	ldr	r3, [r7, #24]
 800987e:	f023 0307 	bic.w	r3, r3, #7
 8009882:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009884:	69bb      	ldr	r3, [r7, #24]
 8009886:	f003 0307 	and.w	r3, r3, #7
 800988a:	2b00      	cmp	r3, #0
 800988c:	d00a      	beq.n	80098a4 <prvInitialiseNewTask+0x58>
	__asm volatile
 800988e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009892:	f383 8811 	msr	BASEPRI, r3
 8009896:	f3bf 8f6f 	isb	sy
 800989a:	f3bf 8f4f 	dsb	sy
 800989e:	617b      	str	r3, [r7, #20]
}
 80098a0:	bf00      	nop
 80098a2:	e7fe      	b.n	80098a2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80098a4:	68bb      	ldr	r3, [r7, #8]
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d01f      	beq.n	80098ea <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80098aa:	2300      	movs	r3, #0
 80098ac:	61fb      	str	r3, [r7, #28]
 80098ae:	e012      	b.n	80098d6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80098b0:	68ba      	ldr	r2, [r7, #8]
 80098b2:	69fb      	ldr	r3, [r7, #28]
 80098b4:	4413      	add	r3, r2
 80098b6:	7819      	ldrb	r1, [r3, #0]
 80098b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80098ba:	69fb      	ldr	r3, [r7, #28]
 80098bc:	4413      	add	r3, r2
 80098be:	3334      	adds	r3, #52	; 0x34
 80098c0:	460a      	mov	r2, r1
 80098c2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80098c4:	68ba      	ldr	r2, [r7, #8]
 80098c6:	69fb      	ldr	r3, [r7, #28]
 80098c8:	4413      	add	r3, r2
 80098ca:	781b      	ldrb	r3, [r3, #0]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d006      	beq.n	80098de <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80098d0:	69fb      	ldr	r3, [r7, #28]
 80098d2:	3301      	adds	r3, #1
 80098d4:	61fb      	str	r3, [r7, #28]
 80098d6:	69fb      	ldr	r3, [r7, #28]
 80098d8:	2b0f      	cmp	r3, #15
 80098da:	d9e9      	bls.n	80098b0 <prvInitialiseNewTask+0x64>
 80098dc:	e000      	b.n	80098e0 <prvInitialiseNewTask+0x94>
			{
				break;
 80098de:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80098e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098e2:	2200      	movs	r2, #0
 80098e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80098e8:	e003      	b.n	80098f2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80098ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098ec:	2200      	movs	r2, #0
 80098ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80098f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098f4:	2b37      	cmp	r3, #55	; 0x37
 80098f6:	d901      	bls.n	80098fc <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80098f8:	2337      	movs	r3, #55	; 0x37
 80098fa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80098fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009900:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009904:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009906:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800990a:	2200      	movs	r2, #0
 800990c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800990e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009910:	3304      	adds	r3, #4
 8009912:	4618      	mov	r0, r3
 8009914:	f7ff f884 	bl	8008a20 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800991a:	3318      	adds	r3, #24
 800991c:	4618      	mov	r0, r3
 800991e:	f7ff f87f 	bl	8008a20 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009924:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009926:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800992a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800992e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009930:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009934:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009936:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800993a:	2200      	movs	r2, #0
 800993c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800993e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009940:	2200      	movs	r2, #0
 8009942:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009946:	683a      	ldr	r2, [r7, #0]
 8009948:	68f9      	ldr	r1, [r7, #12]
 800994a:	69b8      	ldr	r0, [r7, #24]
 800994c:	f001 f9fe 	bl	800ad4c <pxPortInitialiseStack>
 8009950:	4602      	mov	r2, r0
 8009952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009954:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009958:	2b00      	cmp	r3, #0
 800995a:	d002      	beq.n	8009962 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800995c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800995e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009960:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009962:	bf00      	nop
 8009964:	3720      	adds	r7, #32
 8009966:	46bd      	mov	sp, r7
 8009968:	bd80      	pop	{r7, pc}
	...

0800996c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800996c:	b580      	push	{r7, lr}
 800996e:	b082      	sub	sp, #8
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009974:	f001 fb16 	bl	800afa4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009978:	4b2d      	ldr	r3, [pc, #180]	; (8009a30 <prvAddNewTaskToReadyList+0xc4>)
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	3301      	adds	r3, #1
 800997e:	4a2c      	ldr	r2, [pc, #176]	; (8009a30 <prvAddNewTaskToReadyList+0xc4>)
 8009980:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009982:	4b2c      	ldr	r3, [pc, #176]	; (8009a34 <prvAddNewTaskToReadyList+0xc8>)
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	2b00      	cmp	r3, #0
 8009988:	d109      	bne.n	800999e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800998a:	4a2a      	ldr	r2, [pc, #168]	; (8009a34 <prvAddNewTaskToReadyList+0xc8>)
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009990:	4b27      	ldr	r3, [pc, #156]	; (8009a30 <prvAddNewTaskToReadyList+0xc4>)
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	2b01      	cmp	r3, #1
 8009996:	d110      	bne.n	80099ba <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009998:	f000 fcb4 	bl	800a304 <prvInitialiseTaskLists>
 800999c:	e00d      	b.n	80099ba <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800999e:	4b26      	ldr	r3, [pc, #152]	; (8009a38 <prvAddNewTaskToReadyList+0xcc>)
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d109      	bne.n	80099ba <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80099a6:	4b23      	ldr	r3, [pc, #140]	; (8009a34 <prvAddNewTaskToReadyList+0xc8>)
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099b0:	429a      	cmp	r2, r3
 80099b2:	d802      	bhi.n	80099ba <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80099b4:	4a1f      	ldr	r2, [pc, #124]	; (8009a34 <prvAddNewTaskToReadyList+0xc8>)
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80099ba:	4b20      	ldr	r3, [pc, #128]	; (8009a3c <prvAddNewTaskToReadyList+0xd0>)
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	3301      	adds	r3, #1
 80099c0:	4a1e      	ldr	r2, [pc, #120]	; (8009a3c <prvAddNewTaskToReadyList+0xd0>)
 80099c2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80099c4:	4b1d      	ldr	r3, [pc, #116]	; (8009a3c <prvAddNewTaskToReadyList+0xd0>)
 80099c6:	681a      	ldr	r2, [r3, #0]
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099d0:	4b1b      	ldr	r3, [pc, #108]	; (8009a40 <prvAddNewTaskToReadyList+0xd4>)
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	429a      	cmp	r2, r3
 80099d6:	d903      	bls.n	80099e0 <prvAddNewTaskToReadyList+0x74>
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099dc:	4a18      	ldr	r2, [pc, #96]	; (8009a40 <prvAddNewTaskToReadyList+0xd4>)
 80099de:	6013      	str	r3, [r2, #0]
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099e4:	4613      	mov	r3, r2
 80099e6:	009b      	lsls	r3, r3, #2
 80099e8:	4413      	add	r3, r2
 80099ea:	009b      	lsls	r3, r3, #2
 80099ec:	4a15      	ldr	r2, [pc, #84]	; (8009a44 <prvAddNewTaskToReadyList+0xd8>)
 80099ee:	441a      	add	r2, r3
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	3304      	adds	r3, #4
 80099f4:	4619      	mov	r1, r3
 80099f6:	4610      	mov	r0, r2
 80099f8:	f7ff f81f 	bl	8008a3a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80099fc:	f001 fb02 	bl	800b004 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009a00:	4b0d      	ldr	r3, [pc, #52]	; (8009a38 <prvAddNewTaskToReadyList+0xcc>)
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d00e      	beq.n	8009a26 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009a08:	4b0a      	ldr	r3, [pc, #40]	; (8009a34 <prvAddNewTaskToReadyList+0xc8>)
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a12:	429a      	cmp	r2, r3
 8009a14:	d207      	bcs.n	8009a26 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009a16:	4b0c      	ldr	r3, [pc, #48]	; (8009a48 <prvAddNewTaskToReadyList+0xdc>)
 8009a18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a1c:	601a      	str	r2, [r3, #0]
 8009a1e:	f3bf 8f4f 	dsb	sy
 8009a22:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009a26:	bf00      	nop
 8009a28:	3708      	adds	r7, #8
 8009a2a:	46bd      	mov	sp, r7
 8009a2c:	bd80      	pop	{r7, pc}
 8009a2e:	bf00      	nop
 8009a30:	20005a60 	.word	0x20005a60
 8009a34:	2000558c 	.word	0x2000558c
 8009a38:	20005a6c 	.word	0x20005a6c
 8009a3c:	20005a7c 	.word	0x20005a7c
 8009a40:	20005a68 	.word	0x20005a68
 8009a44:	20005590 	.word	0x20005590
 8009a48:	e000ed04 	.word	0xe000ed04

08009a4c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009a4c:	b580      	push	{r7, lr}
 8009a4e:	b084      	sub	sp, #16
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009a54:	2300      	movs	r3, #0
 8009a56:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d017      	beq.n	8009a8e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009a5e:	4b13      	ldr	r3, [pc, #76]	; (8009aac <vTaskDelay+0x60>)
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d00a      	beq.n	8009a7c <vTaskDelay+0x30>
	__asm volatile
 8009a66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a6a:	f383 8811 	msr	BASEPRI, r3
 8009a6e:	f3bf 8f6f 	isb	sy
 8009a72:	f3bf 8f4f 	dsb	sy
 8009a76:	60bb      	str	r3, [r7, #8]
}
 8009a78:	bf00      	nop
 8009a7a:	e7fe      	b.n	8009a7a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009a7c:	f000 f880 	bl	8009b80 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009a80:	2100      	movs	r1, #0
 8009a82:	6878      	ldr	r0, [r7, #4]
 8009a84:	f000 fda0 	bl	800a5c8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009a88:	f000 f888 	bl	8009b9c <xTaskResumeAll>
 8009a8c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d107      	bne.n	8009aa4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009a94:	4b06      	ldr	r3, [pc, #24]	; (8009ab0 <vTaskDelay+0x64>)
 8009a96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a9a:	601a      	str	r2, [r3, #0]
 8009a9c:	f3bf 8f4f 	dsb	sy
 8009aa0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009aa4:	bf00      	nop
 8009aa6:	3710      	adds	r7, #16
 8009aa8:	46bd      	mov	sp, r7
 8009aaa:	bd80      	pop	{r7, pc}
 8009aac:	20005a88 	.word	0x20005a88
 8009ab0:	e000ed04 	.word	0xe000ed04

08009ab4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009ab4:	b580      	push	{r7, lr}
 8009ab6:	b08a      	sub	sp, #40	; 0x28
 8009ab8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009aba:	2300      	movs	r3, #0
 8009abc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009abe:	2300      	movs	r3, #0
 8009ac0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009ac2:	463a      	mov	r2, r7
 8009ac4:	1d39      	adds	r1, r7, #4
 8009ac6:	f107 0308 	add.w	r3, r7, #8
 8009aca:	4618      	mov	r0, r3
 8009acc:	f7fe fce8 	bl	80084a0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009ad0:	6839      	ldr	r1, [r7, #0]
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	68ba      	ldr	r2, [r7, #8]
 8009ad6:	9202      	str	r2, [sp, #8]
 8009ad8:	9301      	str	r3, [sp, #4]
 8009ada:	2300      	movs	r3, #0
 8009adc:	9300      	str	r3, [sp, #0]
 8009ade:	2300      	movs	r3, #0
 8009ae0:	460a      	mov	r2, r1
 8009ae2:	4921      	ldr	r1, [pc, #132]	; (8009b68 <vTaskStartScheduler+0xb4>)
 8009ae4:	4821      	ldr	r0, [pc, #132]	; (8009b6c <vTaskStartScheduler+0xb8>)
 8009ae6:	f7ff fe0f 	bl	8009708 <xTaskCreateStatic>
 8009aea:	4603      	mov	r3, r0
 8009aec:	4a20      	ldr	r2, [pc, #128]	; (8009b70 <vTaskStartScheduler+0xbc>)
 8009aee:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009af0:	4b1f      	ldr	r3, [pc, #124]	; (8009b70 <vTaskStartScheduler+0xbc>)
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d002      	beq.n	8009afe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009af8:	2301      	movs	r3, #1
 8009afa:	617b      	str	r3, [r7, #20]
 8009afc:	e001      	b.n	8009b02 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009afe:	2300      	movs	r3, #0
 8009b00:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009b02:	697b      	ldr	r3, [r7, #20]
 8009b04:	2b01      	cmp	r3, #1
 8009b06:	d102      	bne.n	8009b0e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009b08:	f000 fdb2 	bl	800a670 <xTimerCreateTimerTask>
 8009b0c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009b0e:	697b      	ldr	r3, [r7, #20]
 8009b10:	2b01      	cmp	r3, #1
 8009b12:	d116      	bne.n	8009b42 <vTaskStartScheduler+0x8e>
	__asm volatile
 8009b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b18:	f383 8811 	msr	BASEPRI, r3
 8009b1c:	f3bf 8f6f 	isb	sy
 8009b20:	f3bf 8f4f 	dsb	sy
 8009b24:	613b      	str	r3, [r7, #16]
}
 8009b26:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009b28:	4b12      	ldr	r3, [pc, #72]	; (8009b74 <vTaskStartScheduler+0xc0>)
 8009b2a:	f04f 32ff 	mov.w	r2, #4294967295
 8009b2e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009b30:	4b11      	ldr	r3, [pc, #68]	; (8009b78 <vTaskStartScheduler+0xc4>)
 8009b32:	2201      	movs	r2, #1
 8009b34:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009b36:	4b11      	ldr	r3, [pc, #68]	; (8009b7c <vTaskStartScheduler+0xc8>)
 8009b38:	2200      	movs	r2, #0
 8009b3a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009b3c:	f001 f990 	bl	800ae60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009b40:	e00e      	b.n	8009b60 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009b42:	697b      	ldr	r3, [r7, #20]
 8009b44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b48:	d10a      	bne.n	8009b60 <vTaskStartScheduler+0xac>
	__asm volatile
 8009b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b4e:	f383 8811 	msr	BASEPRI, r3
 8009b52:	f3bf 8f6f 	isb	sy
 8009b56:	f3bf 8f4f 	dsb	sy
 8009b5a:	60fb      	str	r3, [r7, #12]
}
 8009b5c:	bf00      	nop
 8009b5e:	e7fe      	b.n	8009b5e <vTaskStartScheduler+0xaa>
}
 8009b60:	bf00      	nop
 8009b62:	3718      	adds	r7, #24
 8009b64:	46bd      	mov	sp, r7
 8009b66:	bd80      	pop	{r7, pc}
 8009b68:	0800c794 	.word	0x0800c794
 8009b6c:	0800a2d5 	.word	0x0800a2d5
 8009b70:	20005a84 	.word	0x20005a84
 8009b74:	20005a80 	.word	0x20005a80
 8009b78:	20005a6c 	.word	0x20005a6c
 8009b7c:	20005a64 	.word	0x20005a64

08009b80 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009b80:	b480      	push	{r7}
 8009b82:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8009b84:	4b04      	ldr	r3, [pc, #16]	; (8009b98 <vTaskSuspendAll+0x18>)
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	3301      	adds	r3, #1
 8009b8a:	4a03      	ldr	r2, [pc, #12]	; (8009b98 <vTaskSuspendAll+0x18>)
 8009b8c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8009b8e:	bf00      	nop
 8009b90:	46bd      	mov	sp, r7
 8009b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b96:	4770      	bx	lr
 8009b98:	20005a88 	.word	0x20005a88

08009b9c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009b9c:	b580      	push	{r7, lr}
 8009b9e:	b084      	sub	sp, #16
 8009ba0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009ba2:	2300      	movs	r3, #0
 8009ba4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009ba6:	2300      	movs	r3, #0
 8009ba8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009baa:	4b42      	ldr	r3, [pc, #264]	; (8009cb4 <xTaskResumeAll+0x118>)
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d10a      	bne.n	8009bc8 <xTaskResumeAll+0x2c>
	__asm volatile
 8009bb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bb6:	f383 8811 	msr	BASEPRI, r3
 8009bba:	f3bf 8f6f 	isb	sy
 8009bbe:	f3bf 8f4f 	dsb	sy
 8009bc2:	603b      	str	r3, [r7, #0]
}
 8009bc4:	bf00      	nop
 8009bc6:	e7fe      	b.n	8009bc6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009bc8:	f001 f9ec 	bl	800afa4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009bcc:	4b39      	ldr	r3, [pc, #228]	; (8009cb4 <xTaskResumeAll+0x118>)
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	3b01      	subs	r3, #1
 8009bd2:	4a38      	ldr	r2, [pc, #224]	; (8009cb4 <xTaskResumeAll+0x118>)
 8009bd4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009bd6:	4b37      	ldr	r3, [pc, #220]	; (8009cb4 <xTaskResumeAll+0x118>)
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d162      	bne.n	8009ca4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009bde:	4b36      	ldr	r3, [pc, #216]	; (8009cb8 <xTaskResumeAll+0x11c>)
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d05e      	beq.n	8009ca4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009be6:	e02f      	b.n	8009c48 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009be8:	4b34      	ldr	r3, [pc, #208]	; (8009cbc <xTaskResumeAll+0x120>)
 8009bea:	68db      	ldr	r3, [r3, #12]
 8009bec:	68db      	ldr	r3, [r3, #12]
 8009bee:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	3318      	adds	r3, #24
 8009bf4:	4618      	mov	r0, r3
 8009bf6:	f7fe ff7d 	bl	8008af4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	3304      	adds	r3, #4
 8009bfe:	4618      	mov	r0, r3
 8009c00:	f7fe ff78 	bl	8008af4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c08:	4b2d      	ldr	r3, [pc, #180]	; (8009cc0 <xTaskResumeAll+0x124>)
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	429a      	cmp	r2, r3
 8009c0e:	d903      	bls.n	8009c18 <xTaskResumeAll+0x7c>
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c14:	4a2a      	ldr	r2, [pc, #168]	; (8009cc0 <xTaskResumeAll+0x124>)
 8009c16:	6013      	str	r3, [r2, #0]
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c1c:	4613      	mov	r3, r2
 8009c1e:	009b      	lsls	r3, r3, #2
 8009c20:	4413      	add	r3, r2
 8009c22:	009b      	lsls	r3, r3, #2
 8009c24:	4a27      	ldr	r2, [pc, #156]	; (8009cc4 <xTaskResumeAll+0x128>)
 8009c26:	441a      	add	r2, r3
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	3304      	adds	r3, #4
 8009c2c:	4619      	mov	r1, r3
 8009c2e:	4610      	mov	r0, r2
 8009c30:	f7fe ff03 	bl	8008a3a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c38:	4b23      	ldr	r3, [pc, #140]	; (8009cc8 <xTaskResumeAll+0x12c>)
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c3e:	429a      	cmp	r2, r3
 8009c40:	d302      	bcc.n	8009c48 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8009c42:	4b22      	ldr	r3, [pc, #136]	; (8009ccc <xTaskResumeAll+0x130>)
 8009c44:	2201      	movs	r2, #1
 8009c46:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009c48:	4b1c      	ldr	r3, [pc, #112]	; (8009cbc <xTaskResumeAll+0x120>)
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d1cb      	bne.n	8009be8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d001      	beq.n	8009c5a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009c56:	f000 fbf3 	bl	800a440 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8009c5a:	4b1d      	ldr	r3, [pc, #116]	; (8009cd0 <xTaskResumeAll+0x134>)
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d010      	beq.n	8009c88 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009c66:	f000 f847 	bl	8009cf8 <xTaskIncrementTick>
 8009c6a:	4603      	mov	r3, r0
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d002      	beq.n	8009c76 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009c70:	4b16      	ldr	r3, [pc, #88]	; (8009ccc <xTaskResumeAll+0x130>)
 8009c72:	2201      	movs	r2, #1
 8009c74:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	3b01      	subs	r3, #1
 8009c7a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d1f1      	bne.n	8009c66 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8009c82:	4b13      	ldr	r3, [pc, #76]	; (8009cd0 <xTaskResumeAll+0x134>)
 8009c84:	2200      	movs	r2, #0
 8009c86:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009c88:	4b10      	ldr	r3, [pc, #64]	; (8009ccc <xTaskResumeAll+0x130>)
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d009      	beq.n	8009ca4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009c90:	2301      	movs	r3, #1
 8009c92:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009c94:	4b0f      	ldr	r3, [pc, #60]	; (8009cd4 <xTaskResumeAll+0x138>)
 8009c96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c9a:	601a      	str	r2, [r3, #0]
 8009c9c:	f3bf 8f4f 	dsb	sy
 8009ca0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009ca4:	f001 f9ae 	bl	800b004 <vPortExitCritical>

	return xAlreadyYielded;
 8009ca8:	68bb      	ldr	r3, [r7, #8]
}
 8009caa:	4618      	mov	r0, r3
 8009cac:	3710      	adds	r7, #16
 8009cae:	46bd      	mov	sp, r7
 8009cb0:	bd80      	pop	{r7, pc}
 8009cb2:	bf00      	nop
 8009cb4:	20005a88 	.word	0x20005a88
 8009cb8:	20005a60 	.word	0x20005a60
 8009cbc:	20005a20 	.word	0x20005a20
 8009cc0:	20005a68 	.word	0x20005a68
 8009cc4:	20005590 	.word	0x20005590
 8009cc8:	2000558c 	.word	0x2000558c
 8009ccc:	20005a74 	.word	0x20005a74
 8009cd0:	20005a70 	.word	0x20005a70
 8009cd4:	e000ed04 	.word	0xe000ed04

08009cd8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009cd8:	b480      	push	{r7}
 8009cda:	b083      	sub	sp, #12
 8009cdc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009cde:	4b05      	ldr	r3, [pc, #20]	; (8009cf4 <xTaskGetTickCount+0x1c>)
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009ce4:	687b      	ldr	r3, [r7, #4]
}
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	370c      	adds	r7, #12
 8009cea:	46bd      	mov	sp, r7
 8009cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf0:	4770      	bx	lr
 8009cf2:	bf00      	nop
 8009cf4:	20005a64 	.word	0x20005a64

08009cf8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009cf8:	b580      	push	{r7, lr}
 8009cfa:	b086      	sub	sp, #24
 8009cfc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009cfe:	2300      	movs	r3, #0
 8009d00:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009d02:	4b4f      	ldr	r3, [pc, #316]	; (8009e40 <xTaskIncrementTick+0x148>)
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	f040 8089 	bne.w	8009e1e <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009d0c:	4b4d      	ldr	r3, [pc, #308]	; (8009e44 <xTaskIncrementTick+0x14c>)
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	3301      	adds	r3, #1
 8009d12:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009d14:	4a4b      	ldr	r2, [pc, #300]	; (8009e44 <xTaskIncrementTick+0x14c>)
 8009d16:	693b      	ldr	r3, [r7, #16]
 8009d18:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009d1a:	693b      	ldr	r3, [r7, #16]
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d120      	bne.n	8009d62 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009d20:	4b49      	ldr	r3, [pc, #292]	; (8009e48 <xTaskIncrementTick+0x150>)
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d00a      	beq.n	8009d40 <xTaskIncrementTick+0x48>
	__asm volatile
 8009d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d2e:	f383 8811 	msr	BASEPRI, r3
 8009d32:	f3bf 8f6f 	isb	sy
 8009d36:	f3bf 8f4f 	dsb	sy
 8009d3a:	603b      	str	r3, [r7, #0]
}
 8009d3c:	bf00      	nop
 8009d3e:	e7fe      	b.n	8009d3e <xTaskIncrementTick+0x46>
 8009d40:	4b41      	ldr	r3, [pc, #260]	; (8009e48 <xTaskIncrementTick+0x150>)
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	60fb      	str	r3, [r7, #12]
 8009d46:	4b41      	ldr	r3, [pc, #260]	; (8009e4c <xTaskIncrementTick+0x154>)
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	4a3f      	ldr	r2, [pc, #252]	; (8009e48 <xTaskIncrementTick+0x150>)
 8009d4c:	6013      	str	r3, [r2, #0]
 8009d4e:	4a3f      	ldr	r2, [pc, #252]	; (8009e4c <xTaskIncrementTick+0x154>)
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	6013      	str	r3, [r2, #0]
 8009d54:	4b3e      	ldr	r3, [pc, #248]	; (8009e50 <xTaskIncrementTick+0x158>)
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	3301      	adds	r3, #1
 8009d5a:	4a3d      	ldr	r2, [pc, #244]	; (8009e50 <xTaskIncrementTick+0x158>)
 8009d5c:	6013      	str	r3, [r2, #0]
 8009d5e:	f000 fb6f 	bl	800a440 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009d62:	4b3c      	ldr	r3, [pc, #240]	; (8009e54 <xTaskIncrementTick+0x15c>)
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	693a      	ldr	r2, [r7, #16]
 8009d68:	429a      	cmp	r2, r3
 8009d6a:	d349      	bcc.n	8009e00 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009d6c:	4b36      	ldr	r3, [pc, #216]	; (8009e48 <xTaskIncrementTick+0x150>)
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d104      	bne.n	8009d80 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009d76:	4b37      	ldr	r3, [pc, #220]	; (8009e54 <xTaskIncrementTick+0x15c>)
 8009d78:	f04f 32ff 	mov.w	r2, #4294967295
 8009d7c:	601a      	str	r2, [r3, #0]
					break;
 8009d7e:	e03f      	b.n	8009e00 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d80:	4b31      	ldr	r3, [pc, #196]	; (8009e48 <xTaskIncrementTick+0x150>)
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	68db      	ldr	r3, [r3, #12]
 8009d86:	68db      	ldr	r3, [r3, #12]
 8009d88:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009d8a:	68bb      	ldr	r3, [r7, #8]
 8009d8c:	685b      	ldr	r3, [r3, #4]
 8009d8e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009d90:	693a      	ldr	r2, [r7, #16]
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	429a      	cmp	r2, r3
 8009d96:	d203      	bcs.n	8009da0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009d98:	4a2e      	ldr	r2, [pc, #184]	; (8009e54 <xTaskIncrementTick+0x15c>)
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009d9e:	e02f      	b.n	8009e00 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009da0:	68bb      	ldr	r3, [r7, #8]
 8009da2:	3304      	adds	r3, #4
 8009da4:	4618      	mov	r0, r3
 8009da6:	f7fe fea5 	bl	8008af4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009daa:	68bb      	ldr	r3, [r7, #8]
 8009dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d004      	beq.n	8009dbc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009db2:	68bb      	ldr	r3, [r7, #8]
 8009db4:	3318      	adds	r3, #24
 8009db6:	4618      	mov	r0, r3
 8009db8:	f7fe fe9c 	bl	8008af4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009dbc:	68bb      	ldr	r3, [r7, #8]
 8009dbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009dc0:	4b25      	ldr	r3, [pc, #148]	; (8009e58 <xTaskIncrementTick+0x160>)
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	429a      	cmp	r2, r3
 8009dc6:	d903      	bls.n	8009dd0 <xTaskIncrementTick+0xd8>
 8009dc8:	68bb      	ldr	r3, [r7, #8]
 8009dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dcc:	4a22      	ldr	r2, [pc, #136]	; (8009e58 <xTaskIncrementTick+0x160>)
 8009dce:	6013      	str	r3, [r2, #0]
 8009dd0:	68bb      	ldr	r3, [r7, #8]
 8009dd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009dd4:	4613      	mov	r3, r2
 8009dd6:	009b      	lsls	r3, r3, #2
 8009dd8:	4413      	add	r3, r2
 8009dda:	009b      	lsls	r3, r3, #2
 8009ddc:	4a1f      	ldr	r2, [pc, #124]	; (8009e5c <xTaskIncrementTick+0x164>)
 8009dde:	441a      	add	r2, r3
 8009de0:	68bb      	ldr	r3, [r7, #8]
 8009de2:	3304      	adds	r3, #4
 8009de4:	4619      	mov	r1, r3
 8009de6:	4610      	mov	r0, r2
 8009de8:	f7fe fe27 	bl	8008a3a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009dec:	68bb      	ldr	r3, [r7, #8]
 8009dee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009df0:	4b1b      	ldr	r3, [pc, #108]	; (8009e60 <xTaskIncrementTick+0x168>)
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009df6:	429a      	cmp	r2, r3
 8009df8:	d3b8      	bcc.n	8009d6c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009dfa:	2301      	movs	r3, #1
 8009dfc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009dfe:	e7b5      	b.n	8009d6c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009e00:	4b17      	ldr	r3, [pc, #92]	; (8009e60 <xTaskIncrementTick+0x168>)
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e06:	4915      	ldr	r1, [pc, #84]	; (8009e5c <xTaskIncrementTick+0x164>)
 8009e08:	4613      	mov	r3, r2
 8009e0a:	009b      	lsls	r3, r3, #2
 8009e0c:	4413      	add	r3, r2
 8009e0e:	009b      	lsls	r3, r3, #2
 8009e10:	440b      	add	r3, r1
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	2b01      	cmp	r3, #1
 8009e16:	d907      	bls.n	8009e28 <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 8009e18:	2301      	movs	r3, #1
 8009e1a:	617b      	str	r3, [r7, #20]
 8009e1c:	e004      	b.n	8009e28 <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8009e1e:	4b11      	ldr	r3, [pc, #68]	; (8009e64 <xTaskIncrementTick+0x16c>)
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	3301      	adds	r3, #1
 8009e24:	4a0f      	ldr	r2, [pc, #60]	; (8009e64 <xTaskIncrementTick+0x16c>)
 8009e26:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8009e28:	4b0f      	ldr	r3, [pc, #60]	; (8009e68 <xTaskIncrementTick+0x170>)
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d001      	beq.n	8009e34 <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 8009e30:	2301      	movs	r3, #1
 8009e32:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009e34:	697b      	ldr	r3, [r7, #20]
}
 8009e36:	4618      	mov	r0, r3
 8009e38:	3718      	adds	r7, #24
 8009e3a:	46bd      	mov	sp, r7
 8009e3c:	bd80      	pop	{r7, pc}
 8009e3e:	bf00      	nop
 8009e40:	20005a88 	.word	0x20005a88
 8009e44:	20005a64 	.word	0x20005a64
 8009e48:	20005a18 	.word	0x20005a18
 8009e4c:	20005a1c 	.word	0x20005a1c
 8009e50:	20005a78 	.word	0x20005a78
 8009e54:	20005a80 	.word	0x20005a80
 8009e58:	20005a68 	.word	0x20005a68
 8009e5c:	20005590 	.word	0x20005590
 8009e60:	2000558c 	.word	0x2000558c
 8009e64:	20005a70 	.word	0x20005a70
 8009e68:	20005a74 	.word	0x20005a74

08009e6c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009e6c:	b480      	push	{r7}
 8009e6e:	b085      	sub	sp, #20
 8009e70:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009e72:	4b28      	ldr	r3, [pc, #160]	; (8009f14 <vTaskSwitchContext+0xa8>)
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d003      	beq.n	8009e82 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009e7a:	4b27      	ldr	r3, [pc, #156]	; (8009f18 <vTaskSwitchContext+0xac>)
 8009e7c:	2201      	movs	r2, #1
 8009e7e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009e80:	e041      	b.n	8009f06 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8009e82:	4b25      	ldr	r3, [pc, #148]	; (8009f18 <vTaskSwitchContext+0xac>)
 8009e84:	2200      	movs	r2, #0
 8009e86:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e88:	4b24      	ldr	r3, [pc, #144]	; (8009f1c <vTaskSwitchContext+0xb0>)
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	60fb      	str	r3, [r7, #12]
 8009e8e:	e010      	b.n	8009eb2 <vTaskSwitchContext+0x46>
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d10a      	bne.n	8009eac <vTaskSwitchContext+0x40>
	__asm volatile
 8009e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e9a:	f383 8811 	msr	BASEPRI, r3
 8009e9e:	f3bf 8f6f 	isb	sy
 8009ea2:	f3bf 8f4f 	dsb	sy
 8009ea6:	607b      	str	r3, [r7, #4]
}
 8009ea8:	bf00      	nop
 8009eaa:	e7fe      	b.n	8009eaa <vTaskSwitchContext+0x3e>
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	3b01      	subs	r3, #1
 8009eb0:	60fb      	str	r3, [r7, #12]
 8009eb2:	491b      	ldr	r1, [pc, #108]	; (8009f20 <vTaskSwitchContext+0xb4>)
 8009eb4:	68fa      	ldr	r2, [r7, #12]
 8009eb6:	4613      	mov	r3, r2
 8009eb8:	009b      	lsls	r3, r3, #2
 8009eba:	4413      	add	r3, r2
 8009ebc:	009b      	lsls	r3, r3, #2
 8009ebe:	440b      	add	r3, r1
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d0e4      	beq.n	8009e90 <vTaskSwitchContext+0x24>
 8009ec6:	68fa      	ldr	r2, [r7, #12]
 8009ec8:	4613      	mov	r3, r2
 8009eca:	009b      	lsls	r3, r3, #2
 8009ecc:	4413      	add	r3, r2
 8009ece:	009b      	lsls	r3, r3, #2
 8009ed0:	4a13      	ldr	r2, [pc, #76]	; (8009f20 <vTaskSwitchContext+0xb4>)
 8009ed2:	4413      	add	r3, r2
 8009ed4:	60bb      	str	r3, [r7, #8]
 8009ed6:	68bb      	ldr	r3, [r7, #8]
 8009ed8:	685b      	ldr	r3, [r3, #4]
 8009eda:	685a      	ldr	r2, [r3, #4]
 8009edc:	68bb      	ldr	r3, [r7, #8]
 8009ede:	605a      	str	r2, [r3, #4]
 8009ee0:	68bb      	ldr	r3, [r7, #8]
 8009ee2:	685a      	ldr	r2, [r3, #4]
 8009ee4:	68bb      	ldr	r3, [r7, #8]
 8009ee6:	3308      	adds	r3, #8
 8009ee8:	429a      	cmp	r2, r3
 8009eea:	d104      	bne.n	8009ef6 <vTaskSwitchContext+0x8a>
 8009eec:	68bb      	ldr	r3, [r7, #8]
 8009eee:	685b      	ldr	r3, [r3, #4]
 8009ef0:	685a      	ldr	r2, [r3, #4]
 8009ef2:	68bb      	ldr	r3, [r7, #8]
 8009ef4:	605a      	str	r2, [r3, #4]
 8009ef6:	68bb      	ldr	r3, [r7, #8]
 8009ef8:	685b      	ldr	r3, [r3, #4]
 8009efa:	68db      	ldr	r3, [r3, #12]
 8009efc:	4a09      	ldr	r2, [pc, #36]	; (8009f24 <vTaskSwitchContext+0xb8>)
 8009efe:	6013      	str	r3, [r2, #0]
 8009f00:	4a06      	ldr	r2, [pc, #24]	; (8009f1c <vTaskSwitchContext+0xb0>)
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	6013      	str	r3, [r2, #0]
}
 8009f06:	bf00      	nop
 8009f08:	3714      	adds	r7, #20
 8009f0a:	46bd      	mov	sp, r7
 8009f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f10:	4770      	bx	lr
 8009f12:	bf00      	nop
 8009f14:	20005a88 	.word	0x20005a88
 8009f18:	20005a74 	.word	0x20005a74
 8009f1c:	20005a68 	.word	0x20005a68
 8009f20:	20005590 	.word	0x20005590
 8009f24:	2000558c 	.word	0x2000558c

08009f28 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009f28:	b580      	push	{r7, lr}
 8009f2a:	b084      	sub	sp, #16
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	6078      	str	r0, [r7, #4]
 8009f30:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d10a      	bne.n	8009f4e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f3c:	f383 8811 	msr	BASEPRI, r3
 8009f40:	f3bf 8f6f 	isb	sy
 8009f44:	f3bf 8f4f 	dsb	sy
 8009f48:	60fb      	str	r3, [r7, #12]
}
 8009f4a:	bf00      	nop
 8009f4c:	e7fe      	b.n	8009f4c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009f4e:	4b07      	ldr	r3, [pc, #28]	; (8009f6c <vTaskPlaceOnEventList+0x44>)
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	3318      	adds	r3, #24
 8009f54:	4619      	mov	r1, r3
 8009f56:	6878      	ldr	r0, [r7, #4]
 8009f58:	f7fe fd93 	bl	8008a82 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009f5c:	2101      	movs	r1, #1
 8009f5e:	6838      	ldr	r0, [r7, #0]
 8009f60:	f000 fb32 	bl	800a5c8 <prvAddCurrentTaskToDelayedList>
}
 8009f64:	bf00      	nop
 8009f66:	3710      	adds	r7, #16
 8009f68:	46bd      	mov	sp, r7
 8009f6a:	bd80      	pop	{r7, pc}
 8009f6c:	2000558c 	.word	0x2000558c

08009f70 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8009f70:	b580      	push	{r7, lr}
 8009f72:	b086      	sub	sp, #24
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	60f8      	str	r0, [r7, #12]
 8009f78:	60b9      	str	r1, [r7, #8]
 8009f7a:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d10a      	bne.n	8009f98 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 8009f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f86:	f383 8811 	msr	BASEPRI, r3
 8009f8a:	f3bf 8f6f 	isb	sy
 8009f8e:	f3bf 8f4f 	dsb	sy
 8009f92:	617b      	str	r3, [r7, #20]
}
 8009f94:	bf00      	nop
 8009f96:	e7fe      	b.n	8009f96 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8009f98:	4b11      	ldr	r3, [pc, #68]	; (8009fe0 <vTaskPlaceOnUnorderedEventList+0x70>)
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d10a      	bne.n	8009fb6 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8009fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fa4:	f383 8811 	msr	BASEPRI, r3
 8009fa8:	f3bf 8f6f 	isb	sy
 8009fac:	f3bf 8f4f 	dsb	sy
 8009fb0:	613b      	str	r3, [r7, #16]
}
 8009fb2:	bf00      	nop
 8009fb4:	e7fe      	b.n	8009fb4 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8009fb6:	4b0b      	ldr	r3, [pc, #44]	; (8009fe4 <vTaskPlaceOnUnorderedEventList+0x74>)
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	68ba      	ldr	r2, [r7, #8]
 8009fbc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8009fc0:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009fc2:	4b08      	ldr	r3, [pc, #32]	; (8009fe4 <vTaskPlaceOnUnorderedEventList+0x74>)
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	3318      	adds	r3, #24
 8009fc8:	4619      	mov	r1, r3
 8009fca:	68f8      	ldr	r0, [r7, #12]
 8009fcc:	f7fe fd35 	bl	8008a3a <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009fd0:	2101      	movs	r1, #1
 8009fd2:	6878      	ldr	r0, [r7, #4]
 8009fd4:	f000 faf8 	bl	800a5c8 <prvAddCurrentTaskToDelayedList>
}
 8009fd8:	bf00      	nop
 8009fda:	3718      	adds	r7, #24
 8009fdc:	46bd      	mov	sp, r7
 8009fde:	bd80      	pop	{r7, pc}
 8009fe0:	20005a88 	.word	0x20005a88
 8009fe4:	2000558c 	.word	0x2000558c

08009fe8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009fe8:	b580      	push	{r7, lr}
 8009fea:	b086      	sub	sp, #24
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	60f8      	str	r0, [r7, #12]
 8009ff0:	60b9      	str	r1, [r7, #8]
 8009ff2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d10a      	bne.n	800a010 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8009ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ffe:	f383 8811 	msr	BASEPRI, r3
 800a002:	f3bf 8f6f 	isb	sy
 800a006:	f3bf 8f4f 	dsb	sy
 800a00a:	617b      	str	r3, [r7, #20]
}
 800a00c:	bf00      	nop
 800a00e:	e7fe      	b.n	800a00e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a010:	4b0a      	ldr	r3, [pc, #40]	; (800a03c <vTaskPlaceOnEventListRestricted+0x54>)
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	3318      	adds	r3, #24
 800a016:	4619      	mov	r1, r3
 800a018:	68f8      	ldr	r0, [r7, #12]
 800a01a:	f7fe fd0e 	bl	8008a3a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	2b00      	cmp	r3, #0
 800a022:	d002      	beq.n	800a02a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800a024:	f04f 33ff 	mov.w	r3, #4294967295
 800a028:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a02a:	6879      	ldr	r1, [r7, #4]
 800a02c:	68b8      	ldr	r0, [r7, #8]
 800a02e:	f000 facb 	bl	800a5c8 <prvAddCurrentTaskToDelayedList>
	}
 800a032:	bf00      	nop
 800a034:	3718      	adds	r7, #24
 800a036:	46bd      	mov	sp, r7
 800a038:	bd80      	pop	{r7, pc}
 800a03a:	bf00      	nop
 800a03c:	2000558c 	.word	0x2000558c

0800a040 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a040:	b580      	push	{r7, lr}
 800a042:	b086      	sub	sp, #24
 800a044:	af00      	add	r7, sp, #0
 800a046:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	68db      	ldr	r3, [r3, #12]
 800a04c:	68db      	ldr	r3, [r3, #12]
 800a04e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a050:	693b      	ldr	r3, [r7, #16]
 800a052:	2b00      	cmp	r3, #0
 800a054:	d10a      	bne.n	800a06c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a05a:	f383 8811 	msr	BASEPRI, r3
 800a05e:	f3bf 8f6f 	isb	sy
 800a062:	f3bf 8f4f 	dsb	sy
 800a066:	60fb      	str	r3, [r7, #12]
}
 800a068:	bf00      	nop
 800a06a:	e7fe      	b.n	800a06a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a06c:	693b      	ldr	r3, [r7, #16]
 800a06e:	3318      	adds	r3, #24
 800a070:	4618      	mov	r0, r3
 800a072:	f7fe fd3f 	bl	8008af4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a076:	4b1e      	ldr	r3, [pc, #120]	; (800a0f0 <xTaskRemoveFromEventList+0xb0>)
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d11d      	bne.n	800a0ba <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a07e:	693b      	ldr	r3, [r7, #16]
 800a080:	3304      	adds	r3, #4
 800a082:	4618      	mov	r0, r3
 800a084:	f7fe fd36 	bl	8008af4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a088:	693b      	ldr	r3, [r7, #16]
 800a08a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a08c:	4b19      	ldr	r3, [pc, #100]	; (800a0f4 <xTaskRemoveFromEventList+0xb4>)
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	429a      	cmp	r2, r3
 800a092:	d903      	bls.n	800a09c <xTaskRemoveFromEventList+0x5c>
 800a094:	693b      	ldr	r3, [r7, #16]
 800a096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a098:	4a16      	ldr	r2, [pc, #88]	; (800a0f4 <xTaskRemoveFromEventList+0xb4>)
 800a09a:	6013      	str	r3, [r2, #0]
 800a09c:	693b      	ldr	r3, [r7, #16]
 800a09e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0a0:	4613      	mov	r3, r2
 800a0a2:	009b      	lsls	r3, r3, #2
 800a0a4:	4413      	add	r3, r2
 800a0a6:	009b      	lsls	r3, r3, #2
 800a0a8:	4a13      	ldr	r2, [pc, #76]	; (800a0f8 <xTaskRemoveFromEventList+0xb8>)
 800a0aa:	441a      	add	r2, r3
 800a0ac:	693b      	ldr	r3, [r7, #16]
 800a0ae:	3304      	adds	r3, #4
 800a0b0:	4619      	mov	r1, r3
 800a0b2:	4610      	mov	r0, r2
 800a0b4:	f7fe fcc1 	bl	8008a3a <vListInsertEnd>
 800a0b8:	e005      	b.n	800a0c6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a0ba:	693b      	ldr	r3, [r7, #16]
 800a0bc:	3318      	adds	r3, #24
 800a0be:	4619      	mov	r1, r3
 800a0c0:	480e      	ldr	r0, [pc, #56]	; (800a0fc <xTaskRemoveFromEventList+0xbc>)
 800a0c2:	f7fe fcba 	bl	8008a3a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a0c6:	693b      	ldr	r3, [r7, #16]
 800a0c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0ca:	4b0d      	ldr	r3, [pc, #52]	; (800a100 <xTaskRemoveFromEventList+0xc0>)
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0d0:	429a      	cmp	r2, r3
 800a0d2:	d905      	bls.n	800a0e0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a0d4:	2301      	movs	r3, #1
 800a0d6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a0d8:	4b0a      	ldr	r3, [pc, #40]	; (800a104 <xTaskRemoveFromEventList+0xc4>)
 800a0da:	2201      	movs	r2, #1
 800a0dc:	601a      	str	r2, [r3, #0]
 800a0de:	e001      	b.n	800a0e4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800a0e0:	2300      	movs	r3, #0
 800a0e2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a0e4:	697b      	ldr	r3, [r7, #20]
}
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	3718      	adds	r7, #24
 800a0ea:	46bd      	mov	sp, r7
 800a0ec:	bd80      	pop	{r7, pc}
 800a0ee:	bf00      	nop
 800a0f0:	20005a88 	.word	0x20005a88
 800a0f4:	20005a68 	.word	0x20005a68
 800a0f8:	20005590 	.word	0x20005590
 800a0fc:	20005a20 	.word	0x20005a20
 800a100:	2000558c 	.word	0x2000558c
 800a104:	20005a74 	.word	0x20005a74

0800a108 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 800a108:	b580      	push	{r7, lr}
 800a10a:	b086      	sub	sp, #24
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	6078      	str	r0, [r7, #4]
 800a110:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800a112:	4b29      	ldr	r3, [pc, #164]	; (800a1b8 <vTaskRemoveFromUnorderedEventList+0xb0>)
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	2b00      	cmp	r3, #0
 800a118:	d10a      	bne.n	800a130 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 800a11a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a11e:	f383 8811 	msr	BASEPRI, r3
 800a122:	f3bf 8f6f 	isb	sy
 800a126:	f3bf 8f4f 	dsb	sy
 800a12a:	613b      	str	r3, [r7, #16]
}
 800a12c:	bf00      	nop
 800a12e:	e7fe      	b.n	800a12e <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800a130:	683b      	ldr	r3, [r7, #0]
 800a132:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	68db      	ldr	r3, [r3, #12]
 800a13e:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 800a140:	697b      	ldr	r3, [r7, #20]
 800a142:	2b00      	cmp	r3, #0
 800a144:	d10a      	bne.n	800a15c <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 800a146:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a14a:	f383 8811 	msr	BASEPRI, r3
 800a14e:	f3bf 8f6f 	isb	sy
 800a152:	f3bf 8f4f 	dsb	sy
 800a156:	60fb      	str	r3, [r7, #12]
}
 800a158:	bf00      	nop
 800a15a:	e7fe      	b.n	800a15a <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 800a15c:	6878      	ldr	r0, [r7, #4]
 800a15e:	f7fe fcc9 	bl	8008af4 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a162:	697b      	ldr	r3, [r7, #20]
 800a164:	3304      	adds	r3, #4
 800a166:	4618      	mov	r0, r3
 800a168:	f7fe fcc4 	bl	8008af4 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 800a16c:	697b      	ldr	r3, [r7, #20]
 800a16e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a170:	4b12      	ldr	r3, [pc, #72]	; (800a1bc <vTaskRemoveFromUnorderedEventList+0xb4>)
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	429a      	cmp	r2, r3
 800a176:	d903      	bls.n	800a180 <vTaskRemoveFromUnorderedEventList+0x78>
 800a178:	697b      	ldr	r3, [r7, #20]
 800a17a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a17c:	4a0f      	ldr	r2, [pc, #60]	; (800a1bc <vTaskRemoveFromUnorderedEventList+0xb4>)
 800a17e:	6013      	str	r3, [r2, #0]
 800a180:	697b      	ldr	r3, [r7, #20]
 800a182:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a184:	4613      	mov	r3, r2
 800a186:	009b      	lsls	r3, r3, #2
 800a188:	4413      	add	r3, r2
 800a18a:	009b      	lsls	r3, r3, #2
 800a18c:	4a0c      	ldr	r2, [pc, #48]	; (800a1c0 <vTaskRemoveFromUnorderedEventList+0xb8>)
 800a18e:	441a      	add	r2, r3
 800a190:	697b      	ldr	r3, [r7, #20]
 800a192:	3304      	adds	r3, #4
 800a194:	4619      	mov	r1, r3
 800a196:	4610      	mov	r0, r2
 800a198:	f7fe fc4f 	bl	8008a3a <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a19c:	697b      	ldr	r3, [r7, #20]
 800a19e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1a0:	4b08      	ldr	r3, [pc, #32]	; (800a1c4 <vTaskRemoveFromUnorderedEventList+0xbc>)
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1a6:	429a      	cmp	r2, r3
 800a1a8:	d902      	bls.n	800a1b0 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 800a1aa:	4b07      	ldr	r3, [pc, #28]	; (800a1c8 <vTaskRemoveFromUnorderedEventList+0xc0>)
 800a1ac:	2201      	movs	r2, #1
 800a1ae:	601a      	str	r2, [r3, #0]
	}
}
 800a1b0:	bf00      	nop
 800a1b2:	3718      	adds	r7, #24
 800a1b4:	46bd      	mov	sp, r7
 800a1b6:	bd80      	pop	{r7, pc}
 800a1b8:	20005a88 	.word	0x20005a88
 800a1bc:	20005a68 	.word	0x20005a68
 800a1c0:	20005590 	.word	0x20005590
 800a1c4:	2000558c 	.word	0x2000558c
 800a1c8:	20005a74 	.word	0x20005a74

0800a1cc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a1cc:	b480      	push	{r7}
 800a1ce:	b083      	sub	sp, #12
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a1d4:	4b06      	ldr	r3, [pc, #24]	; (800a1f0 <vTaskInternalSetTimeOutState+0x24>)
 800a1d6:	681a      	ldr	r2, [r3, #0]
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a1dc:	4b05      	ldr	r3, [pc, #20]	; (800a1f4 <vTaskInternalSetTimeOutState+0x28>)
 800a1de:	681a      	ldr	r2, [r3, #0]
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	605a      	str	r2, [r3, #4]
}
 800a1e4:	bf00      	nop
 800a1e6:	370c      	adds	r7, #12
 800a1e8:	46bd      	mov	sp, r7
 800a1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ee:	4770      	bx	lr
 800a1f0:	20005a78 	.word	0x20005a78
 800a1f4:	20005a64 	.word	0x20005a64

0800a1f8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a1f8:	b580      	push	{r7, lr}
 800a1fa:	b088      	sub	sp, #32
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	6078      	str	r0, [r7, #4]
 800a200:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	2b00      	cmp	r3, #0
 800a206:	d10a      	bne.n	800a21e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a20c:	f383 8811 	msr	BASEPRI, r3
 800a210:	f3bf 8f6f 	isb	sy
 800a214:	f3bf 8f4f 	dsb	sy
 800a218:	613b      	str	r3, [r7, #16]
}
 800a21a:	bf00      	nop
 800a21c:	e7fe      	b.n	800a21c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a21e:	683b      	ldr	r3, [r7, #0]
 800a220:	2b00      	cmp	r3, #0
 800a222:	d10a      	bne.n	800a23a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a224:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a228:	f383 8811 	msr	BASEPRI, r3
 800a22c:	f3bf 8f6f 	isb	sy
 800a230:	f3bf 8f4f 	dsb	sy
 800a234:	60fb      	str	r3, [r7, #12]
}
 800a236:	bf00      	nop
 800a238:	e7fe      	b.n	800a238 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a23a:	f000 feb3 	bl	800afa4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a23e:	4b1d      	ldr	r3, [pc, #116]	; (800a2b4 <xTaskCheckForTimeOut+0xbc>)
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	685b      	ldr	r3, [r3, #4]
 800a248:	69ba      	ldr	r2, [r7, #24]
 800a24a:	1ad3      	subs	r3, r2, r3
 800a24c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a24e:	683b      	ldr	r3, [r7, #0]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a256:	d102      	bne.n	800a25e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a258:	2300      	movs	r3, #0
 800a25a:	61fb      	str	r3, [r7, #28]
 800a25c:	e023      	b.n	800a2a6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	681a      	ldr	r2, [r3, #0]
 800a262:	4b15      	ldr	r3, [pc, #84]	; (800a2b8 <xTaskCheckForTimeOut+0xc0>)
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	429a      	cmp	r2, r3
 800a268:	d007      	beq.n	800a27a <xTaskCheckForTimeOut+0x82>
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	685b      	ldr	r3, [r3, #4]
 800a26e:	69ba      	ldr	r2, [r7, #24]
 800a270:	429a      	cmp	r2, r3
 800a272:	d302      	bcc.n	800a27a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a274:	2301      	movs	r3, #1
 800a276:	61fb      	str	r3, [r7, #28]
 800a278:	e015      	b.n	800a2a6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a27a:	683b      	ldr	r3, [r7, #0]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	697a      	ldr	r2, [r7, #20]
 800a280:	429a      	cmp	r2, r3
 800a282:	d20b      	bcs.n	800a29c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a284:	683b      	ldr	r3, [r7, #0]
 800a286:	681a      	ldr	r2, [r3, #0]
 800a288:	697b      	ldr	r3, [r7, #20]
 800a28a:	1ad2      	subs	r2, r2, r3
 800a28c:	683b      	ldr	r3, [r7, #0]
 800a28e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a290:	6878      	ldr	r0, [r7, #4]
 800a292:	f7ff ff9b 	bl	800a1cc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a296:	2300      	movs	r3, #0
 800a298:	61fb      	str	r3, [r7, #28]
 800a29a:	e004      	b.n	800a2a6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a29c:	683b      	ldr	r3, [r7, #0]
 800a29e:	2200      	movs	r2, #0
 800a2a0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a2a2:	2301      	movs	r3, #1
 800a2a4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a2a6:	f000 fead 	bl	800b004 <vPortExitCritical>

	return xReturn;
 800a2aa:	69fb      	ldr	r3, [r7, #28]
}
 800a2ac:	4618      	mov	r0, r3
 800a2ae:	3720      	adds	r7, #32
 800a2b0:	46bd      	mov	sp, r7
 800a2b2:	bd80      	pop	{r7, pc}
 800a2b4:	20005a64 	.word	0x20005a64
 800a2b8:	20005a78 	.word	0x20005a78

0800a2bc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a2bc:	b480      	push	{r7}
 800a2be:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a2c0:	4b03      	ldr	r3, [pc, #12]	; (800a2d0 <vTaskMissedYield+0x14>)
 800a2c2:	2201      	movs	r2, #1
 800a2c4:	601a      	str	r2, [r3, #0]
}
 800a2c6:	bf00      	nop
 800a2c8:	46bd      	mov	sp, r7
 800a2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ce:	4770      	bx	lr
 800a2d0:	20005a74 	.word	0x20005a74

0800a2d4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a2d4:	b580      	push	{r7, lr}
 800a2d6:	b082      	sub	sp, #8
 800a2d8:	af00      	add	r7, sp, #0
 800a2da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a2dc:	f000 f852 	bl	800a384 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a2e0:	4b06      	ldr	r3, [pc, #24]	; (800a2fc <prvIdleTask+0x28>)
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	2b01      	cmp	r3, #1
 800a2e6:	d9f9      	bls.n	800a2dc <prvIdleTask+0x8>
			{
				taskYIELD();
 800a2e8:	4b05      	ldr	r3, [pc, #20]	; (800a300 <prvIdleTask+0x2c>)
 800a2ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a2ee:	601a      	str	r2, [r3, #0]
 800a2f0:	f3bf 8f4f 	dsb	sy
 800a2f4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a2f8:	e7f0      	b.n	800a2dc <prvIdleTask+0x8>
 800a2fa:	bf00      	nop
 800a2fc:	20005590 	.word	0x20005590
 800a300:	e000ed04 	.word	0xe000ed04

0800a304 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a304:	b580      	push	{r7, lr}
 800a306:	b082      	sub	sp, #8
 800a308:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a30a:	2300      	movs	r3, #0
 800a30c:	607b      	str	r3, [r7, #4]
 800a30e:	e00c      	b.n	800a32a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a310:	687a      	ldr	r2, [r7, #4]
 800a312:	4613      	mov	r3, r2
 800a314:	009b      	lsls	r3, r3, #2
 800a316:	4413      	add	r3, r2
 800a318:	009b      	lsls	r3, r3, #2
 800a31a:	4a12      	ldr	r2, [pc, #72]	; (800a364 <prvInitialiseTaskLists+0x60>)
 800a31c:	4413      	add	r3, r2
 800a31e:	4618      	mov	r0, r3
 800a320:	f7fe fb5e 	bl	80089e0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	3301      	adds	r3, #1
 800a328:	607b      	str	r3, [r7, #4]
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	2b37      	cmp	r3, #55	; 0x37
 800a32e:	d9ef      	bls.n	800a310 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a330:	480d      	ldr	r0, [pc, #52]	; (800a368 <prvInitialiseTaskLists+0x64>)
 800a332:	f7fe fb55 	bl	80089e0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a336:	480d      	ldr	r0, [pc, #52]	; (800a36c <prvInitialiseTaskLists+0x68>)
 800a338:	f7fe fb52 	bl	80089e0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a33c:	480c      	ldr	r0, [pc, #48]	; (800a370 <prvInitialiseTaskLists+0x6c>)
 800a33e:	f7fe fb4f 	bl	80089e0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a342:	480c      	ldr	r0, [pc, #48]	; (800a374 <prvInitialiseTaskLists+0x70>)
 800a344:	f7fe fb4c 	bl	80089e0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a348:	480b      	ldr	r0, [pc, #44]	; (800a378 <prvInitialiseTaskLists+0x74>)
 800a34a:	f7fe fb49 	bl	80089e0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a34e:	4b0b      	ldr	r3, [pc, #44]	; (800a37c <prvInitialiseTaskLists+0x78>)
 800a350:	4a05      	ldr	r2, [pc, #20]	; (800a368 <prvInitialiseTaskLists+0x64>)
 800a352:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a354:	4b0a      	ldr	r3, [pc, #40]	; (800a380 <prvInitialiseTaskLists+0x7c>)
 800a356:	4a05      	ldr	r2, [pc, #20]	; (800a36c <prvInitialiseTaskLists+0x68>)
 800a358:	601a      	str	r2, [r3, #0]
}
 800a35a:	bf00      	nop
 800a35c:	3708      	adds	r7, #8
 800a35e:	46bd      	mov	sp, r7
 800a360:	bd80      	pop	{r7, pc}
 800a362:	bf00      	nop
 800a364:	20005590 	.word	0x20005590
 800a368:	200059f0 	.word	0x200059f0
 800a36c:	20005a04 	.word	0x20005a04
 800a370:	20005a20 	.word	0x20005a20
 800a374:	20005a34 	.word	0x20005a34
 800a378:	20005a4c 	.word	0x20005a4c
 800a37c:	20005a18 	.word	0x20005a18
 800a380:	20005a1c 	.word	0x20005a1c

0800a384 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a384:	b580      	push	{r7, lr}
 800a386:	b082      	sub	sp, #8
 800a388:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a38a:	e019      	b.n	800a3c0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a38c:	f000 fe0a 	bl	800afa4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a390:	4b10      	ldr	r3, [pc, #64]	; (800a3d4 <prvCheckTasksWaitingTermination+0x50>)
 800a392:	68db      	ldr	r3, [r3, #12]
 800a394:	68db      	ldr	r3, [r3, #12]
 800a396:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	3304      	adds	r3, #4
 800a39c:	4618      	mov	r0, r3
 800a39e:	f7fe fba9 	bl	8008af4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a3a2:	4b0d      	ldr	r3, [pc, #52]	; (800a3d8 <prvCheckTasksWaitingTermination+0x54>)
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	3b01      	subs	r3, #1
 800a3a8:	4a0b      	ldr	r2, [pc, #44]	; (800a3d8 <prvCheckTasksWaitingTermination+0x54>)
 800a3aa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a3ac:	4b0b      	ldr	r3, [pc, #44]	; (800a3dc <prvCheckTasksWaitingTermination+0x58>)
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	3b01      	subs	r3, #1
 800a3b2:	4a0a      	ldr	r2, [pc, #40]	; (800a3dc <prvCheckTasksWaitingTermination+0x58>)
 800a3b4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a3b6:	f000 fe25 	bl	800b004 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a3ba:	6878      	ldr	r0, [r7, #4]
 800a3bc:	f000 f810 	bl	800a3e0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a3c0:	4b06      	ldr	r3, [pc, #24]	; (800a3dc <prvCheckTasksWaitingTermination+0x58>)
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d1e1      	bne.n	800a38c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a3c8:	bf00      	nop
 800a3ca:	bf00      	nop
 800a3cc:	3708      	adds	r7, #8
 800a3ce:	46bd      	mov	sp, r7
 800a3d0:	bd80      	pop	{r7, pc}
 800a3d2:	bf00      	nop
 800a3d4:	20005a34 	.word	0x20005a34
 800a3d8:	20005a60 	.word	0x20005a60
 800a3dc:	20005a48 	.word	0x20005a48

0800a3e0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a3e0:	b580      	push	{r7, lr}
 800a3e2:	b084      	sub	sp, #16
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d108      	bne.n	800a404 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	f000 ffba 	bl	800b370 <vPortFree>
				vPortFree( pxTCB );
 800a3fc:	6878      	ldr	r0, [r7, #4]
 800a3fe:	f000 ffb7 	bl	800b370 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a402:	e018      	b.n	800a436 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a40a:	2b01      	cmp	r3, #1
 800a40c:	d103      	bne.n	800a416 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800a40e:	6878      	ldr	r0, [r7, #4]
 800a410:	f000 ffae 	bl	800b370 <vPortFree>
	}
 800a414:	e00f      	b.n	800a436 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a41c:	2b02      	cmp	r3, #2
 800a41e:	d00a      	beq.n	800a436 <prvDeleteTCB+0x56>
	__asm volatile
 800a420:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a424:	f383 8811 	msr	BASEPRI, r3
 800a428:	f3bf 8f6f 	isb	sy
 800a42c:	f3bf 8f4f 	dsb	sy
 800a430:	60fb      	str	r3, [r7, #12]
}
 800a432:	bf00      	nop
 800a434:	e7fe      	b.n	800a434 <prvDeleteTCB+0x54>
	}
 800a436:	bf00      	nop
 800a438:	3710      	adds	r7, #16
 800a43a:	46bd      	mov	sp, r7
 800a43c:	bd80      	pop	{r7, pc}
	...

0800a440 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a440:	b480      	push	{r7}
 800a442:	b083      	sub	sp, #12
 800a444:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a446:	4b0c      	ldr	r3, [pc, #48]	; (800a478 <prvResetNextTaskUnblockTime+0x38>)
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d104      	bne.n	800a45a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a450:	4b0a      	ldr	r3, [pc, #40]	; (800a47c <prvResetNextTaskUnblockTime+0x3c>)
 800a452:	f04f 32ff 	mov.w	r2, #4294967295
 800a456:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a458:	e008      	b.n	800a46c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a45a:	4b07      	ldr	r3, [pc, #28]	; (800a478 <prvResetNextTaskUnblockTime+0x38>)
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	68db      	ldr	r3, [r3, #12]
 800a460:	68db      	ldr	r3, [r3, #12]
 800a462:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	685b      	ldr	r3, [r3, #4]
 800a468:	4a04      	ldr	r2, [pc, #16]	; (800a47c <prvResetNextTaskUnblockTime+0x3c>)
 800a46a:	6013      	str	r3, [r2, #0]
}
 800a46c:	bf00      	nop
 800a46e:	370c      	adds	r7, #12
 800a470:	46bd      	mov	sp, r7
 800a472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a476:	4770      	bx	lr
 800a478:	20005a18 	.word	0x20005a18
 800a47c:	20005a80 	.word	0x20005a80

0800a480 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a480:	b480      	push	{r7}
 800a482:	b083      	sub	sp, #12
 800a484:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a486:	4b0b      	ldr	r3, [pc, #44]	; (800a4b4 <xTaskGetSchedulerState+0x34>)
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d102      	bne.n	800a494 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a48e:	2301      	movs	r3, #1
 800a490:	607b      	str	r3, [r7, #4]
 800a492:	e008      	b.n	800a4a6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a494:	4b08      	ldr	r3, [pc, #32]	; (800a4b8 <xTaskGetSchedulerState+0x38>)
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d102      	bne.n	800a4a2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a49c:	2302      	movs	r3, #2
 800a49e:	607b      	str	r3, [r7, #4]
 800a4a0:	e001      	b.n	800a4a6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a4a2:	2300      	movs	r3, #0
 800a4a4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a4a6:	687b      	ldr	r3, [r7, #4]
	}
 800a4a8:	4618      	mov	r0, r3
 800a4aa:	370c      	adds	r7, #12
 800a4ac:	46bd      	mov	sp, r7
 800a4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b2:	4770      	bx	lr
 800a4b4:	20005a6c 	.word	0x20005a6c
 800a4b8:	20005a88 	.word	0x20005a88

0800a4bc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a4bc:	b580      	push	{r7, lr}
 800a4be:	b086      	sub	sp, #24
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a4c8:	2300      	movs	r3, #0
 800a4ca:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d056      	beq.n	800a580 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a4d2:	4b2e      	ldr	r3, [pc, #184]	; (800a58c <xTaskPriorityDisinherit+0xd0>)
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	693a      	ldr	r2, [r7, #16]
 800a4d8:	429a      	cmp	r2, r3
 800a4da:	d00a      	beq.n	800a4f2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a4dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4e0:	f383 8811 	msr	BASEPRI, r3
 800a4e4:	f3bf 8f6f 	isb	sy
 800a4e8:	f3bf 8f4f 	dsb	sy
 800a4ec:	60fb      	str	r3, [r7, #12]
}
 800a4ee:	bf00      	nop
 800a4f0:	e7fe      	b.n	800a4f0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a4f2:	693b      	ldr	r3, [r7, #16]
 800a4f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d10a      	bne.n	800a510 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800a4fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4fe:	f383 8811 	msr	BASEPRI, r3
 800a502:	f3bf 8f6f 	isb	sy
 800a506:	f3bf 8f4f 	dsb	sy
 800a50a:	60bb      	str	r3, [r7, #8]
}
 800a50c:	bf00      	nop
 800a50e:	e7fe      	b.n	800a50e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800a510:	693b      	ldr	r3, [r7, #16]
 800a512:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a514:	1e5a      	subs	r2, r3, #1
 800a516:	693b      	ldr	r3, [r7, #16]
 800a518:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a51a:	693b      	ldr	r3, [r7, #16]
 800a51c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a51e:	693b      	ldr	r3, [r7, #16]
 800a520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a522:	429a      	cmp	r2, r3
 800a524:	d02c      	beq.n	800a580 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a526:	693b      	ldr	r3, [r7, #16]
 800a528:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d128      	bne.n	800a580 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a52e:	693b      	ldr	r3, [r7, #16]
 800a530:	3304      	adds	r3, #4
 800a532:	4618      	mov	r0, r3
 800a534:	f7fe fade 	bl	8008af4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a538:	693b      	ldr	r3, [r7, #16]
 800a53a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a53c:	693b      	ldr	r3, [r7, #16]
 800a53e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a540:	693b      	ldr	r3, [r7, #16]
 800a542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a544:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a548:	693b      	ldr	r3, [r7, #16]
 800a54a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a54c:	693b      	ldr	r3, [r7, #16]
 800a54e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a550:	4b0f      	ldr	r3, [pc, #60]	; (800a590 <xTaskPriorityDisinherit+0xd4>)
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	429a      	cmp	r2, r3
 800a556:	d903      	bls.n	800a560 <xTaskPriorityDisinherit+0xa4>
 800a558:	693b      	ldr	r3, [r7, #16]
 800a55a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a55c:	4a0c      	ldr	r2, [pc, #48]	; (800a590 <xTaskPriorityDisinherit+0xd4>)
 800a55e:	6013      	str	r3, [r2, #0]
 800a560:	693b      	ldr	r3, [r7, #16]
 800a562:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a564:	4613      	mov	r3, r2
 800a566:	009b      	lsls	r3, r3, #2
 800a568:	4413      	add	r3, r2
 800a56a:	009b      	lsls	r3, r3, #2
 800a56c:	4a09      	ldr	r2, [pc, #36]	; (800a594 <xTaskPriorityDisinherit+0xd8>)
 800a56e:	441a      	add	r2, r3
 800a570:	693b      	ldr	r3, [r7, #16]
 800a572:	3304      	adds	r3, #4
 800a574:	4619      	mov	r1, r3
 800a576:	4610      	mov	r0, r2
 800a578:	f7fe fa5f 	bl	8008a3a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a57c:	2301      	movs	r3, #1
 800a57e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a580:	697b      	ldr	r3, [r7, #20]
	}
 800a582:	4618      	mov	r0, r3
 800a584:	3718      	adds	r7, #24
 800a586:	46bd      	mov	sp, r7
 800a588:	bd80      	pop	{r7, pc}
 800a58a:	bf00      	nop
 800a58c:	2000558c 	.word	0x2000558c
 800a590:	20005a68 	.word	0x20005a68
 800a594:	20005590 	.word	0x20005590

0800a598 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 800a598:	b480      	push	{r7}
 800a59a:	b083      	sub	sp, #12
 800a59c:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800a59e:	4b09      	ldr	r3, [pc, #36]	; (800a5c4 <uxTaskResetEventItemValue+0x2c>)
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	699b      	ldr	r3, [r3, #24]
 800a5a4:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a5a6:	4b07      	ldr	r3, [pc, #28]	; (800a5c4 <uxTaskResetEventItemValue+0x2c>)
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5ac:	4b05      	ldr	r3, [pc, #20]	; (800a5c4 <uxTaskResetEventItemValue+0x2c>)
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 800a5b4:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800a5b6:	687b      	ldr	r3, [r7, #4]
}
 800a5b8:	4618      	mov	r0, r3
 800a5ba:	370c      	adds	r7, #12
 800a5bc:	46bd      	mov	sp, r7
 800a5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c2:	4770      	bx	lr
 800a5c4:	2000558c 	.word	0x2000558c

0800a5c8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a5c8:	b580      	push	{r7, lr}
 800a5ca:	b084      	sub	sp, #16
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	6078      	str	r0, [r7, #4]
 800a5d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a5d2:	4b21      	ldr	r3, [pc, #132]	; (800a658 <prvAddCurrentTaskToDelayedList+0x90>)
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a5d8:	4b20      	ldr	r3, [pc, #128]	; (800a65c <prvAddCurrentTaskToDelayedList+0x94>)
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	3304      	adds	r3, #4
 800a5de:	4618      	mov	r0, r3
 800a5e0:	f7fe fa88 	bl	8008af4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5ea:	d10a      	bne.n	800a602 <prvAddCurrentTaskToDelayedList+0x3a>
 800a5ec:	683b      	ldr	r3, [r7, #0]
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d007      	beq.n	800a602 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a5f2:	4b1a      	ldr	r3, [pc, #104]	; (800a65c <prvAddCurrentTaskToDelayedList+0x94>)
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	3304      	adds	r3, #4
 800a5f8:	4619      	mov	r1, r3
 800a5fa:	4819      	ldr	r0, [pc, #100]	; (800a660 <prvAddCurrentTaskToDelayedList+0x98>)
 800a5fc:	f7fe fa1d 	bl	8008a3a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a600:	e026      	b.n	800a650 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a602:	68fa      	ldr	r2, [r7, #12]
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	4413      	add	r3, r2
 800a608:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a60a:	4b14      	ldr	r3, [pc, #80]	; (800a65c <prvAddCurrentTaskToDelayedList+0x94>)
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	68ba      	ldr	r2, [r7, #8]
 800a610:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a612:	68ba      	ldr	r2, [r7, #8]
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	429a      	cmp	r2, r3
 800a618:	d209      	bcs.n	800a62e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a61a:	4b12      	ldr	r3, [pc, #72]	; (800a664 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a61c:	681a      	ldr	r2, [r3, #0]
 800a61e:	4b0f      	ldr	r3, [pc, #60]	; (800a65c <prvAddCurrentTaskToDelayedList+0x94>)
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	3304      	adds	r3, #4
 800a624:	4619      	mov	r1, r3
 800a626:	4610      	mov	r0, r2
 800a628:	f7fe fa2b 	bl	8008a82 <vListInsert>
}
 800a62c:	e010      	b.n	800a650 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a62e:	4b0e      	ldr	r3, [pc, #56]	; (800a668 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a630:	681a      	ldr	r2, [r3, #0]
 800a632:	4b0a      	ldr	r3, [pc, #40]	; (800a65c <prvAddCurrentTaskToDelayedList+0x94>)
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	3304      	adds	r3, #4
 800a638:	4619      	mov	r1, r3
 800a63a:	4610      	mov	r0, r2
 800a63c:	f7fe fa21 	bl	8008a82 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a640:	4b0a      	ldr	r3, [pc, #40]	; (800a66c <prvAddCurrentTaskToDelayedList+0xa4>)
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	68ba      	ldr	r2, [r7, #8]
 800a646:	429a      	cmp	r2, r3
 800a648:	d202      	bcs.n	800a650 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a64a:	4a08      	ldr	r2, [pc, #32]	; (800a66c <prvAddCurrentTaskToDelayedList+0xa4>)
 800a64c:	68bb      	ldr	r3, [r7, #8]
 800a64e:	6013      	str	r3, [r2, #0]
}
 800a650:	bf00      	nop
 800a652:	3710      	adds	r7, #16
 800a654:	46bd      	mov	sp, r7
 800a656:	bd80      	pop	{r7, pc}
 800a658:	20005a64 	.word	0x20005a64
 800a65c:	2000558c 	.word	0x2000558c
 800a660:	20005a4c 	.word	0x20005a4c
 800a664:	20005a1c 	.word	0x20005a1c
 800a668:	20005a18 	.word	0x20005a18
 800a66c:	20005a80 	.word	0x20005a80

0800a670 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a670:	b580      	push	{r7, lr}
 800a672:	b08a      	sub	sp, #40	; 0x28
 800a674:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a676:	2300      	movs	r3, #0
 800a678:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a67a:	f000 fb07 	bl	800ac8c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a67e:	4b1c      	ldr	r3, [pc, #112]	; (800a6f0 <xTimerCreateTimerTask+0x80>)
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	2b00      	cmp	r3, #0
 800a684:	d021      	beq.n	800a6ca <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a686:	2300      	movs	r3, #0
 800a688:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a68a:	2300      	movs	r3, #0
 800a68c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a68e:	1d3a      	adds	r2, r7, #4
 800a690:	f107 0108 	add.w	r1, r7, #8
 800a694:	f107 030c 	add.w	r3, r7, #12
 800a698:	4618      	mov	r0, r3
 800a69a:	f7fd ff1b 	bl	80084d4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a69e:	6879      	ldr	r1, [r7, #4]
 800a6a0:	68bb      	ldr	r3, [r7, #8]
 800a6a2:	68fa      	ldr	r2, [r7, #12]
 800a6a4:	9202      	str	r2, [sp, #8]
 800a6a6:	9301      	str	r3, [sp, #4]
 800a6a8:	2302      	movs	r3, #2
 800a6aa:	9300      	str	r3, [sp, #0]
 800a6ac:	2300      	movs	r3, #0
 800a6ae:	460a      	mov	r2, r1
 800a6b0:	4910      	ldr	r1, [pc, #64]	; (800a6f4 <xTimerCreateTimerTask+0x84>)
 800a6b2:	4811      	ldr	r0, [pc, #68]	; (800a6f8 <xTimerCreateTimerTask+0x88>)
 800a6b4:	f7ff f828 	bl	8009708 <xTaskCreateStatic>
 800a6b8:	4603      	mov	r3, r0
 800a6ba:	4a10      	ldr	r2, [pc, #64]	; (800a6fc <xTimerCreateTimerTask+0x8c>)
 800a6bc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a6be:	4b0f      	ldr	r3, [pc, #60]	; (800a6fc <xTimerCreateTimerTask+0x8c>)
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d001      	beq.n	800a6ca <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a6c6:	2301      	movs	r3, #1
 800a6c8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a6ca:	697b      	ldr	r3, [r7, #20]
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d10a      	bne.n	800a6e6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800a6d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6d4:	f383 8811 	msr	BASEPRI, r3
 800a6d8:	f3bf 8f6f 	isb	sy
 800a6dc:	f3bf 8f4f 	dsb	sy
 800a6e0:	613b      	str	r3, [r7, #16]
}
 800a6e2:	bf00      	nop
 800a6e4:	e7fe      	b.n	800a6e4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a6e6:	697b      	ldr	r3, [r7, #20]
}
 800a6e8:	4618      	mov	r0, r3
 800a6ea:	3718      	adds	r7, #24
 800a6ec:	46bd      	mov	sp, r7
 800a6ee:	bd80      	pop	{r7, pc}
 800a6f0:	20005abc 	.word	0x20005abc
 800a6f4:	0800c79c 	.word	0x0800c79c
 800a6f8:	0800a835 	.word	0x0800a835
 800a6fc:	20005ac0 	.word	0x20005ac0

0800a700 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a700:	b580      	push	{r7, lr}
 800a702:	b08a      	sub	sp, #40	; 0x28
 800a704:	af00      	add	r7, sp, #0
 800a706:	60f8      	str	r0, [r7, #12]
 800a708:	60b9      	str	r1, [r7, #8]
 800a70a:	607a      	str	r2, [r7, #4]
 800a70c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a70e:	2300      	movs	r3, #0
 800a710:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	2b00      	cmp	r3, #0
 800a716:	d10a      	bne.n	800a72e <xTimerGenericCommand+0x2e>
	__asm volatile
 800a718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a71c:	f383 8811 	msr	BASEPRI, r3
 800a720:	f3bf 8f6f 	isb	sy
 800a724:	f3bf 8f4f 	dsb	sy
 800a728:	623b      	str	r3, [r7, #32]
}
 800a72a:	bf00      	nop
 800a72c:	e7fe      	b.n	800a72c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a72e:	4b1a      	ldr	r3, [pc, #104]	; (800a798 <xTimerGenericCommand+0x98>)
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	2b00      	cmp	r3, #0
 800a734:	d02a      	beq.n	800a78c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a736:	68bb      	ldr	r3, [r7, #8]
 800a738:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a742:	68bb      	ldr	r3, [r7, #8]
 800a744:	2b05      	cmp	r3, #5
 800a746:	dc18      	bgt.n	800a77a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a748:	f7ff fe9a 	bl	800a480 <xTaskGetSchedulerState>
 800a74c:	4603      	mov	r3, r0
 800a74e:	2b02      	cmp	r3, #2
 800a750:	d109      	bne.n	800a766 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a752:	4b11      	ldr	r3, [pc, #68]	; (800a798 <xTimerGenericCommand+0x98>)
 800a754:	6818      	ldr	r0, [r3, #0]
 800a756:	f107 0110 	add.w	r1, r7, #16
 800a75a:	2300      	movs	r3, #0
 800a75c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a75e:	f7fe fba1 	bl	8008ea4 <xQueueGenericSend>
 800a762:	6278      	str	r0, [r7, #36]	; 0x24
 800a764:	e012      	b.n	800a78c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a766:	4b0c      	ldr	r3, [pc, #48]	; (800a798 <xTimerGenericCommand+0x98>)
 800a768:	6818      	ldr	r0, [r3, #0]
 800a76a:	f107 0110 	add.w	r1, r7, #16
 800a76e:	2300      	movs	r3, #0
 800a770:	2200      	movs	r2, #0
 800a772:	f7fe fb97 	bl	8008ea4 <xQueueGenericSend>
 800a776:	6278      	str	r0, [r7, #36]	; 0x24
 800a778:	e008      	b.n	800a78c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a77a:	4b07      	ldr	r3, [pc, #28]	; (800a798 <xTimerGenericCommand+0x98>)
 800a77c:	6818      	ldr	r0, [r3, #0]
 800a77e:	f107 0110 	add.w	r1, r7, #16
 800a782:	2300      	movs	r3, #0
 800a784:	683a      	ldr	r2, [r7, #0]
 800a786:	f7fe fc8b 	bl	80090a0 <xQueueGenericSendFromISR>
 800a78a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a78c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a78e:	4618      	mov	r0, r3
 800a790:	3728      	adds	r7, #40	; 0x28
 800a792:	46bd      	mov	sp, r7
 800a794:	bd80      	pop	{r7, pc}
 800a796:	bf00      	nop
 800a798:	20005abc 	.word	0x20005abc

0800a79c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a79c:	b580      	push	{r7, lr}
 800a79e:	b088      	sub	sp, #32
 800a7a0:	af02      	add	r7, sp, #8
 800a7a2:	6078      	str	r0, [r7, #4]
 800a7a4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a7a6:	4b22      	ldr	r3, [pc, #136]	; (800a830 <prvProcessExpiredTimer+0x94>)
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	68db      	ldr	r3, [r3, #12]
 800a7ac:	68db      	ldr	r3, [r3, #12]
 800a7ae:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a7b0:	697b      	ldr	r3, [r7, #20]
 800a7b2:	3304      	adds	r3, #4
 800a7b4:	4618      	mov	r0, r3
 800a7b6:	f7fe f99d 	bl	8008af4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a7ba:	697b      	ldr	r3, [r7, #20]
 800a7bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a7c0:	f003 0304 	and.w	r3, r3, #4
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d022      	beq.n	800a80e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a7c8:	697b      	ldr	r3, [r7, #20]
 800a7ca:	699a      	ldr	r2, [r3, #24]
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	18d1      	adds	r1, r2, r3
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	683a      	ldr	r2, [r7, #0]
 800a7d4:	6978      	ldr	r0, [r7, #20]
 800a7d6:	f000 f8d1 	bl	800a97c <prvInsertTimerInActiveList>
 800a7da:	4603      	mov	r3, r0
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d01f      	beq.n	800a820 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a7e0:	2300      	movs	r3, #0
 800a7e2:	9300      	str	r3, [sp, #0]
 800a7e4:	2300      	movs	r3, #0
 800a7e6:	687a      	ldr	r2, [r7, #4]
 800a7e8:	2100      	movs	r1, #0
 800a7ea:	6978      	ldr	r0, [r7, #20]
 800a7ec:	f7ff ff88 	bl	800a700 <xTimerGenericCommand>
 800a7f0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a7f2:	693b      	ldr	r3, [r7, #16]
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d113      	bne.n	800a820 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800a7f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7fc:	f383 8811 	msr	BASEPRI, r3
 800a800:	f3bf 8f6f 	isb	sy
 800a804:	f3bf 8f4f 	dsb	sy
 800a808:	60fb      	str	r3, [r7, #12]
}
 800a80a:	bf00      	nop
 800a80c:	e7fe      	b.n	800a80c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a80e:	697b      	ldr	r3, [r7, #20]
 800a810:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a814:	f023 0301 	bic.w	r3, r3, #1
 800a818:	b2da      	uxtb	r2, r3
 800a81a:	697b      	ldr	r3, [r7, #20]
 800a81c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a820:	697b      	ldr	r3, [r7, #20]
 800a822:	6a1b      	ldr	r3, [r3, #32]
 800a824:	6978      	ldr	r0, [r7, #20]
 800a826:	4798      	blx	r3
}
 800a828:	bf00      	nop
 800a82a:	3718      	adds	r7, #24
 800a82c:	46bd      	mov	sp, r7
 800a82e:	bd80      	pop	{r7, pc}
 800a830:	20005ab4 	.word	0x20005ab4

0800a834 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a834:	b580      	push	{r7, lr}
 800a836:	b084      	sub	sp, #16
 800a838:	af00      	add	r7, sp, #0
 800a83a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a83c:	f107 0308 	add.w	r3, r7, #8
 800a840:	4618      	mov	r0, r3
 800a842:	f000 f857 	bl	800a8f4 <prvGetNextExpireTime>
 800a846:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a848:	68bb      	ldr	r3, [r7, #8]
 800a84a:	4619      	mov	r1, r3
 800a84c:	68f8      	ldr	r0, [r7, #12]
 800a84e:	f000 f803 	bl	800a858 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a852:	f000 f8d5 	bl	800aa00 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a856:	e7f1      	b.n	800a83c <prvTimerTask+0x8>

0800a858 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a858:	b580      	push	{r7, lr}
 800a85a:	b084      	sub	sp, #16
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	6078      	str	r0, [r7, #4]
 800a860:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a862:	f7ff f98d 	bl	8009b80 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a866:	f107 0308 	add.w	r3, r7, #8
 800a86a:	4618      	mov	r0, r3
 800a86c:	f000 f866 	bl	800a93c <prvSampleTimeNow>
 800a870:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a872:	68bb      	ldr	r3, [r7, #8]
 800a874:	2b00      	cmp	r3, #0
 800a876:	d130      	bne.n	800a8da <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a878:	683b      	ldr	r3, [r7, #0]
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d10a      	bne.n	800a894 <prvProcessTimerOrBlockTask+0x3c>
 800a87e:	687a      	ldr	r2, [r7, #4]
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	429a      	cmp	r2, r3
 800a884:	d806      	bhi.n	800a894 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a886:	f7ff f989 	bl	8009b9c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a88a:	68f9      	ldr	r1, [r7, #12]
 800a88c:	6878      	ldr	r0, [r7, #4]
 800a88e:	f7ff ff85 	bl	800a79c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a892:	e024      	b.n	800a8de <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a894:	683b      	ldr	r3, [r7, #0]
 800a896:	2b00      	cmp	r3, #0
 800a898:	d008      	beq.n	800a8ac <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a89a:	4b13      	ldr	r3, [pc, #76]	; (800a8e8 <prvProcessTimerOrBlockTask+0x90>)
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d101      	bne.n	800a8a8 <prvProcessTimerOrBlockTask+0x50>
 800a8a4:	2301      	movs	r3, #1
 800a8a6:	e000      	b.n	800a8aa <prvProcessTimerOrBlockTask+0x52>
 800a8a8:	2300      	movs	r3, #0
 800a8aa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a8ac:	4b0f      	ldr	r3, [pc, #60]	; (800a8ec <prvProcessTimerOrBlockTask+0x94>)
 800a8ae:	6818      	ldr	r0, [r3, #0]
 800a8b0:	687a      	ldr	r2, [r7, #4]
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	1ad3      	subs	r3, r2, r3
 800a8b6:	683a      	ldr	r2, [r7, #0]
 800a8b8:	4619      	mov	r1, r3
 800a8ba:	f7fe fef1 	bl	80096a0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a8be:	f7ff f96d 	bl	8009b9c <xTaskResumeAll>
 800a8c2:	4603      	mov	r3, r0
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d10a      	bne.n	800a8de <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a8c8:	4b09      	ldr	r3, [pc, #36]	; (800a8f0 <prvProcessTimerOrBlockTask+0x98>)
 800a8ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a8ce:	601a      	str	r2, [r3, #0]
 800a8d0:	f3bf 8f4f 	dsb	sy
 800a8d4:	f3bf 8f6f 	isb	sy
}
 800a8d8:	e001      	b.n	800a8de <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a8da:	f7ff f95f 	bl	8009b9c <xTaskResumeAll>
}
 800a8de:	bf00      	nop
 800a8e0:	3710      	adds	r7, #16
 800a8e2:	46bd      	mov	sp, r7
 800a8e4:	bd80      	pop	{r7, pc}
 800a8e6:	bf00      	nop
 800a8e8:	20005ab8 	.word	0x20005ab8
 800a8ec:	20005abc 	.word	0x20005abc
 800a8f0:	e000ed04 	.word	0xe000ed04

0800a8f4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a8f4:	b480      	push	{r7}
 800a8f6:	b085      	sub	sp, #20
 800a8f8:	af00      	add	r7, sp, #0
 800a8fa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a8fc:	4b0e      	ldr	r3, [pc, #56]	; (800a938 <prvGetNextExpireTime+0x44>)
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	2b00      	cmp	r3, #0
 800a904:	d101      	bne.n	800a90a <prvGetNextExpireTime+0x16>
 800a906:	2201      	movs	r2, #1
 800a908:	e000      	b.n	800a90c <prvGetNextExpireTime+0x18>
 800a90a:	2200      	movs	r2, #0
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	2b00      	cmp	r3, #0
 800a916:	d105      	bne.n	800a924 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a918:	4b07      	ldr	r3, [pc, #28]	; (800a938 <prvGetNextExpireTime+0x44>)
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	68db      	ldr	r3, [r3, #12]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	60fb      	str	r3, [r7, #12]
 800a922:	e001      	b.n	800a928 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a924:	2300      	movs	r3, #0
 800a926:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a928:	68fb      	ldr	r3, [r7, #12]
}
 800a92a:	4618      	mov	r0, r3
 800a92c:	3714      	adds	r7, #20
 800a92e:	46bd      	mov	sp, r7
 800a930:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a934:	4770      	bx	lr
 800a936:	bf00      	nop
 800a938:	20005ab4 	.word	0x20005ab4

0800a93c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a93c:	b580      	push	{r7, lr}
 800a93e:	b084      	sub	sp, #16
 800a940:	af00      	add	r7, sp, #0
 800a942:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a944:	f7ff f9c8 	bl	8009cd8 <xTaskGetTickCount>
 800a948:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a94a:	4b0b      	ldr	r3, [pc, #44]	; (800a978 <prvSampleTimeNow+0x3c>)
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	68fa      	ldr	r2, [r7, #12]
 800a950:	429a      	cmp	r2, r3
 800a952:	d205      	bcs.n	800a960 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a954:	f000 f936 	bl	800abc4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	2201      	movs	r2, #1
 800a95c:	601a      	str	r2, [r3, #0]
 800a95e:	e002      	b.n	800a966 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	2200      	movs	r2, #0
 800a964:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a966:	4a04      	ldr	r2, [pc, #16]	; (800a978 <prvSampleTimeNow+0x3c>)
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a96c:	68fb      	ldr	r3, [r7, #12]
}
 800a96e:	4618      	mov	r0, r3
 800a970:	3710      	adds	r7, #16
 800a972:	46bd      	mov	sp, r7
 800a974:	bd80      	pop	{r7, pc}
 800a976:	bf00      	nop
 800a978:	20005ac4 	.word	0x20005ac4

0800a97c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a97c:	b580      	push	{r7, lr}
 800a97e:	b086      	sub	sp, #24
 800a980:	af00      	add	r7, sp, #0
 800a982:	60f8      	str	r0, [r7, #12]
 800a984:	60b9      	str	r1, [r7, #8]
 800a986:	607a      	str	r2, [r7, #4]
 800a988:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a98a:	2300      	movs	r3, #0
 800a98c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	68ba      	ldr	r2, [r7, #8]
 800a992:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	68fa      	ldr	r2, [r7, #12]
 800a998:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a99a:	68ba      	ldr	r2, [r7, #8]
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	429a      	cmp	r2, r3
 800a9a0:	d812      	bhi.n	800a9c8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a9a2:	687a      	ldr	r2, [r7, #4]
 800a9a4:	683b      	ldr	r3, [r7, #0]
 800a9a6:	1ad2      	subs	r2, r2, r3
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	699b      	ldr	r3, [r3, #24]
 800a9ac:	429a      	cmp	r2, r3
 800a9ae:	d302      	bcc.n	800a9b6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a9b0:	2301      	movs	r3, #1
 800a9b2:	617b      	str	r3, [r7, #20]
 800a9b4:	e01b      	b.n	800a9ee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a9b6:	4b10      	ldr	r3, [pc, #64]	; (800a9f8 <prvInsertTimerInActiveList+0x7c>)
 800a9b8:	681a      	ldr	r2, [r3, #0]
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	3304      	adds	r3, #4
 800a9be:	4619      	mov	r1, r3
 800a9c0:	4610      	mov	r0, r2
 800a9c2:	f7fe f85e 	bl	8008a82 <vListInsert>
 800a9c6:	e012      	b.n	800a9ee <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a9c8:	687a      	ldr	r2, [r7, #4]
 800a9ca:	683b      	ldr	r3, [r7, #0]
 800a9cc:	429a      	cmp	r2, r3
 800a9ce:	d206      	bcs.n	800a9de <prvInsertTimerInActiveList+0x62>
 800a9d0:	68ba      	ldr	r2, [r7, #8]
 800a9d2:	683b      	ldr	r3, [r7, #0]
 800a9d4:	429a      	cmp	r2, r3
 800a9d6:	d302      	bcc.n	800a9de <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a9d8:	2301      	movs	r3, #1
 800a9da:	617b      	str	r3, [r7, #20]
 800a9dc:	e007      	b.n	800a9ee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a9de:	4b07      	ldr	r3, [pc, #28]	; (800a9fc <prvInsertTimerInActiveList+0x80>)
 800a9e0:	681a      	ldr	r2, [r3, #0]
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	3304      	adds	r3, #4
 800a9e6:	4619      	mov	r1, r3
 800a9e8:	4610      	mov	r0, r2
 800a9ea:	f7fe f84a 	bl	8008a82 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a9ee:	697b      	ldr	r3, [r7, #20]
}
 800a9f0:	4618      	mov	r0, r3
 800a9f2:	3718      	adds	r7, #24
 800a9f4:	46bd      	mov	sp, r7
 800a9f6:	bd80      	pop	{r7, pc}
 800a9f8:	20005ab8 	.word	0x20005ab8
 800a9fc:	20005ab4 	.word	0x20005ab4

0800aa00 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800aa00:	b580      	push	{r7, lr}
 800aa02:	b08e      	sub	sp, #56	; 0x38
 800aa04:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800aa06:	e0ca      	b.n	800ab9e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	da18      	bge.n	800aa40 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800aa0e:	1d3b      	adds	r3, r7, #4
 800aa10:	3304      	adds	r3, #4
 800aa12:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800aa14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d10a      	bne.n	800aa30 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800aa1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa1e:	f383 8811 	msr	BASEPRI, r3
 800aa22:	f3bf 8f6f 	isb	sy
 800aa26:	f3bf 8f4f 	dsb	sy
 800aa2a:	61fb      	str	r3, [r7, #28]
}
 800aa2c:	bf00      	nop
 800aa2e:	e7fe      	b.n	800aa2e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800aa30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aa36:	6850      	ldr	r0, [r2, #4]
 800aa38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aa3a:	6892      	ldr	r2, [r2, #8]
 800aa3c:	4611      	mov	r1, r2
 800aa3e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	f2c0 80aa 	blt.w	800ab9c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800aa4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa4e:	695b      	ldr	r3, [r3, #20]
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d004      	beq.n	800aa5e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800aa54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa56:	3304      	adds	r3, #4
 800aa58:	4618      	mov	r0, r3
 800aa5a:	f7fe f84b 	bl	8008af4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800aa5e:	463b      	mov	r3, r7
 800aa60:	4618      	mov	r0, r3
 800aa62:	f7ff ff6b 	bl	800a93c <prvSampleTimeNow>
 800aa66:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	2b09      	cmp	r3, #9
 800aa6c:	f200 8097 	bhi.w	800ab9e <prvProcessReceivedCommands+0x19e>
 800aa70:	a201      	add	r2, pc, #4	; (adr r2, 800aa78 <prvProcessReceivedCommands+0x78>)
 800aa72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa76:	bf00      	nop
 800aa78:	0800aaa1 	.word	0x0800aaa1
 800aa7c:	0800aaa1 	.word	0x0800aaa1
 800aa80:	0800aaa1 	.word	0x0800aaa1
 800aa84:	0800ab15 	.word	0x0800ab15
 800aa88:	0800ab29 	.word	0x0800ab29
 800aa8c:	0800ab73 	.word	0x0800ab73
 800aa90:	0800aaa1 	.word	0x0800aaa1
 800aa94:	0800aaa1 	.word	0x0800aaa1
 800aa98:	0800ab15 	.word	0x0800ab15
 800aa9c:	0800ab29 	.word	0x0800ab29
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800aaa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaa2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aaa6:	f043 0301 	orr.w	r3, r3, #1
 800aaaa:	b2da      	uxtb	r2, r3
 800aaac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800aab2:	68ba      	ldr	r2, [r7, #8]
 800aab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aab6:	699b      	ldr	r3, [r3, #24]
 800aab8:	18d1      	adds	r1, r2, r3
 800aaba:	68bb      	ldr	r3, [r7, #8]
 800aabc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aabe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aac0:	f7ff ff5c 	bl	800a97c <prvInsertTimerInActiveList>
 800aac4:	4603      	mov	r3, r0
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d069      	beq.n	800ab9e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800aaca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aacc:	6a1b      	ldr	r3, [r3, #32]
 800aace:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aad0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800aad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aad4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aad8:	f003 0304 	and.w	r3, r3, #4
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d05e      	beq.n	800ab9e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800aae0:	68ba      	ldr	r2, [r7, #8]
 800aae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aae4:	699b      	ldr	r3, [r3, #24]
 800aae6:	441a      	add	r2, r3
 800aae8:	2300      	movs	r3, #0
 800aaea:	9300      	str	r3, [sp, #0]
 800aaec:	2300      	movs	r3, #0
 800aaee:	2100      	movs	r1, #0
 800aaf0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aaf2:	f7ff fe05 	bl	800a700 <xTimerGenericCommand>
 800aaf6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800aaf8:	6a3b      	ldr	r3, [r7, #32]
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d14f      	bne.n	800ab9e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800aafe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab02:	f383 8811 	msr	BASEPRI, r3
 800ab06:	f3bf 8f6f 	isb	sy
 800ab0a:	f3bf 8f4f 	dsb	sy
 800ab0e:	61bb      	str	r3, [r7, #24]
}
 800ab10:	bf00      	nop
 800ab12:	e7fe      	b.n	800ab12 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ab14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab16:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ab1a:	f023 0301 	bic.w	r3, r3, #1
 800ab1e:	b2da      	uxtb	r2, r3
 800ab20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab22:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800ab26:	e03a      	b.n	800ab9e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ab28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab2a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ab2e:	f043 0301 	orr.w	r3, r3, #1
 800ab32:	b2da      	uxtb	r2, r3
 800ab34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab36:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ab3a:	68ba      	ldr	r2, [r7, #8]
 800ab3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab3e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ab40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab42:	699b      	ldr	r3, [r3, #24]
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d10a      	bne.n	800ab5e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800ab48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab4c:	f383 8811 	msr	BASEPRI, r3
 800ab50:	f3bf 8f6f 	isb	sy
 800ab54:	f3bf 8f4f 	dsb	sy
 800ab58:	617b      	str	r3, [r7, #20]
}
 800ab5a:	bf00      	nop
 800ab5c:	e7fe      	b.n	800ab5c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ab5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab60:	699a      	ldr	r2, [r3, #24]
 800ab62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab64:	18d1      	adds	r1, r2, r3
 800ab66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ab6c:	f7ff ff06 	bl	800a97c <prvInsertTimerInActiveList>
					break;
 800ab70:	e015      	b.n	800ab9e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ab72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab74:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ab78:	f003 0302 	and.w	r3, r3, #2
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d103      	bne.n	800ab88 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800ab80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ab82:	f000 fbf5 	bl	800b370 <vPortFree>
 800ab86:	e00a      	b.n	800ab9e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ab88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab8a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ab8e:	f023 0301 	bic.w	r3, r3, #1
 800ab92:	b2da      	uxtb	r2, r3
 800ab94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab96:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ab9a:	e000      	b.n	800ab9e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800ab9c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ab9e:	4b08      	ldr	r3, [pc, #32]	; (800abc0 <prvProcessReceivedCommands+0x1c0>)
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	1d39      	adds	r1, r7, #4
 800aba4:	2200      	movs	r2, #0
 800aba6:	4618      	mov	r0, r3
 800aba8:	f7fe fb12 	bl	80091d0 <xQueueReceive>
 800abac:	4603      	mov	r3, r0
 800abae:	2b00      	cmp	r3, #0
 800abb0:	f47f af2a 	bne.w	800aa08 <prvProcessReceivedCommands+0x8>
	}
}
 800abb4:	bf00      	nop
 800abb6:	bf00      	nop
 800abb8:	3730      	adds	r7, #48	; 0x30
 800abba:	46bd      	mov	sp, r7
 800abbc:	bd80      	pop	{r7, pc}
 800abbe:	bf00      	nop
 800abc0:	20005abc 	.word	0x20005abc

0800abc4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800abc4:	b580      	push	{r7, lr}
 800abc6:	b088      	sub	sp, #32
 800abc8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800abca:	e048      	b.n	800ac5e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800abcc:	4b2d      	ldr	r3, [pc, #180]	; (800ac84 <prvSwitchTimerLists+0xc0>)
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	68db      	ldr	r3, [r3, #12]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800abd6:	4b2b      	ldr	r3, [pc, #172]	; (800ac84 <prvSwitchTimerLists+0xc0>)
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	68db      	ldr	r3, [r3, #12]
 800abdc:	68db      	ldr	r3, [r3, #12]
 800abde:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	3304      	adds	r3, #4
 800abe4:	4618      	mov	r0, r3
 800abe6:	f7fd ff85 	bl	8008af4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	6a1b      	ldr	r3, [r3, #32]
 800abee:	68f8      	ldr	r0, [r7, #12]
 800abf0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800abf8:	f003 0304 	and.w	r3, r3, #4
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d02e      	beq.n	800ac5e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	699b      	ldr	r3, [r3, #24]
 800ac04:	693a      	ldr	r2, [r7, #16]
 800ac06:	4413      	add	r3, r2
 800ac08:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ac0a:	68ba      	ldr	r2, [r7, #8]
 800ac0c:	693b      	ldr	r3, [r7, #16]
 800ac0e:	429a      	cmp	r2, r3
 800ac10:	d90e      	bls.n	800ac30 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	68ba      	ldr	r2, [r7, #8]
 800ac16:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	68fa      	ldr	r2, [r7, #12]
 800ac1c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ac1e:	4b19      	ldr	r3, [pc, #100]	; (800ac84 <prvSwitchTimerLists+0xc0>)
 800ac20:	681a      	ldr	r2, [r3, #0]
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	3304      	adds	r3, #4
 800ac26:	4619      	mov	r1, r3
 800ac28:	4610      	mov	r0, r2
 800ac2a:	f7fd ff2a 	bl	8008a82 <vListInsert>
 800ac2e:	e016      	b.n	800ac5e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ac30:	2300      	movs	r3, #0
 800ac32:	9300      	str	r3, [sp, #0]
 800ac34:	2300      	movs	r3, #0
 800ac36:	693a      	ldr	r2, [r7, #16]
 800ac38:	2100      	movs	r1, #0
 800ac3a:	68f8      	ldr	r0, [r7, #12]
 800ac3c:	f7ff fd60 	bl	800a700 <xTimerGenericCommand>
 800ac40:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d10a      	bne.n	800ac5e <prvSwitchTimerLists+0x9a>
	__asm volatile
 800ac48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac4c:	f383 8811 	msr	BASEPRI, r3
 800ac50:	f3bf 8f6f 	isb	sy
 800ac54:	f3bf 8f4f 	dsb	sy
 800ac58:	603b      	str	r3, [r7, #0]
}
 800ac5a:	bf00      	nop
 800ac5c:	e7fe      	b.n	800ac5c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ac5e:	4b09      	ldr	r3, [pc, #36]	; (800ac84 <prvSwitchTimerLists+0xc0>)
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d1b1      	bne.n	800abcc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ac68:	4b06      	ldr	r3, [pc, #24]	; (800ac84 <prvSwitchTimerLists+0xc0>)
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ac6e:	4b06      	ldr	r3, [pc, #24]	; (800ac88 <prvSwitchTimerLists+0xc4>)
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	4a04      	ldr	r2, [pc, #16]	; (800ac84 <prvSwitchTimerLists+0xc0>)
 800ac74:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ac76:	4a04      	ldr	r2, [pc, #16]	; (800ac88 <prvSwitchTimerLists+0xc4>)
 800ac78:	697b      	ldr	r3, [r7, #20]
 800ac7a:	6013      	str	r3, [r2, #0]
}
 800ac7c:	bf00      	nop
 800ac7e:	3718      	adds	r7, #24
 800ac80:	46bd      	mov	sp, r7
 800ac82:	bd80      	pop	{r7, pc}
 800ac84:	20005ab4 	.word	0x20005ab4
 800ac88:	20005ab8 	.word	0x20005ab8

0800ac8c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ac8c:	b580      	push	{r7, lr}
 800ac8e:	b082      	sub	sp, #8
 800ac90:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ac92:	f000 f987 	bl	800afa4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ac96:	4b15      	ldr	r3, [pc, #84]	; (800acec <prvCheckForValidListAndQueue+0x60>)
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d120      	bne.n	800ace0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ac9e:	4814      	ldr	r0, [pc, #80]	; (800acf0 <prvCheckForValidListAndQueue+0x64>)
 800aca0:	f7fd fe9e 	bl	80089e0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800aca4:	4813      	ldr	r0, [pc, #76]	; (800acf4 <prvCheckForValidListAndQueue+0x68>)
 800aca6:	f7fd fe9b 	bl	80089e0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800acaa:	4b13      	ldr	r3, [pc, #76]	; (800acf8 <prvCheckForValidListAndQueue+0x6c>)
 800acac:	4a10      	ldr	r2, [pc, #64]	; (800acf0 <prvCheckForValidListAndQueue+0x64>)
 800acae:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800acb0:	4b12      	ldr	r3, [pc, #72]	; (800acfc <prvCheckForValidListAndQueue+0x70>)
 800acb2:	4a10      	ldr	r2, [pc, #64]	; (800acf4 <prvCheckForValidListAndQueue+0x68>)
 800acb4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800acb6:	2300      	movs	r3, #0
 800acb8:	9300      	str	r3, [sp, #0]
 800acba:	4b11      	ldr	r3, [pc, #68]	; (800ad00 <prvCheckForValidListAndQueue+0x74>)
 800acbc:	4a11      	ldr	r2, [pc, #68]	; (800ad04 <prvCheckForValidListAndQueue+0x78>)
 800acbe:	2110      	movs	r1, #16
 800acc0:	200a      	movs	r0, #10
 800acc2:	f7fd ffa9 	bl	8008c18 <xQueueGenericCreateStatic>
 800acc6:	4603      	mov	r3, r0
 800acc8:	4a08      	ldr	r2, [pc, #32]	; (800acec <prvCheckForValidListAndQueue+0x60>)
 800acca:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800accc:	4b07      	ldr	r3, [pc, #28]	; (800acec <prvCheckForValidListAndQueue+0x60>)
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d005      	beq.n	800ace0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800acd4:	4b05      	ldr	r3, [pc, #20]	; (800acec <prvCheckForValidListAndQueue+0x60>)
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	490b      	ldr	r1, [pc, #44]	; (800ad08 <prvCheckForValidListAndQueue+0x7c>)
 800acda:	4618      	mov	r0, r3
 800acdc:	f7fe fc8c 	bl	80095f8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ace0:	f000 f990 	bl	800b004 <vPortExitCritical>
}
 800ace4:	bf00      	nop
 800ace6:	46bd      	mov	sp, r7
 800ace8:	bd80      	pop	{r7, pc}
 800acea:	bf00      	nop
 800acec:	20005abc 	.word	0x20005abc
 800acf0:	20005a8c 	.word	0x20005a8c
 800acf4:	20005aa0 	.word	0x20005aa0
 800acf8:	20005ab4 	.word	0x20005ab4
 800acfc:	20005ab8 	.word	0x20005ab8
 800ad00:	20005b68 	.word	0x20005b68
 800ad04:	20005ac8 	.word	0x20005ac8
 800ad08:	0800c7a4 	.word	0x0800c7a4

0800ad0c <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800ad0c:	b580      	push	{r7, lr}
 800ad0e:	b08a      	sub	sp, #40	; 0x28
 800ad10:	af00      	add	r7, sp, #0
 800ad12:	60f8      	str	r0, [r7, #12]
 800ad14:	60b9      	str	r1, [r7, #8]
 800ad16:	607a      	str	r2, [r7, #4]
 800ad18:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 800ad1a:	f06f 0301 	mvn.w	r3, #1
 800ad1e:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 800ad24:	68bb      	ldr	r3, [r7, #8]
 800ad26:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ad2c:	4b06      	ldr	r3, [pc, #24]	; (800ad48 <xTimerPendFunctionCallFromISR+0x3c>)
 800ad2e:	6818      	ldr	r0, [r3, #0]
 800ad30:	f107 0114 	add.w	r1, r7, #20
 800ad34:	2300      	movs	r3, #0
 800ad36:	683a      	ldr	r2, [r7, #0]
 800ad38:	f7fe f9b2 	bl	80090a0 <xQueueGenericSendFromISR>
 800ad3c:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 800ad3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800ad40:	4618      	mov	r0, r3
 800ad42:	3728      	adds	r7, #40	; 0x28
 800ad44:	46bd      	mov	sp, r7
 800ad46:	bd80      	pop	{r7, pc}
 800ad48:	20005abc 	.word	0x20005abc

0800ad4c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ad4c:	b480      	push	{r7}
 800ad4e:	b085      	sub	sp, #20
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	60f8      	str	r0, [r7, #12]
 800ad54:	60b9      	str	r1, [r7, #8]
 800ad56:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	3b04      	subs	r3, #4
 800ad5c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ad64:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	3b04      	subs	r3, #4
 800ad6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ad6c:	68bb      	ldr	r3, [r7, #8]
 800ad6e:	f023 0201 	bic.w	r2, r3, #1
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	3b04      	subs	r3, #4
 800ad7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ad7c:	4a0c      	ldr	r2, [pc, #48]	; (800adb0 <pxPortInitialiseStack+0x64>)
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	3b14      	subs	r3, #20
 800ad86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ad88:	687a      	ldr	r2, [r7, #4]
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	3b04      	subs	r3, #4
 800ad92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	f06f 0202 	mvn.w	r2, #2
 800ad9a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	3b20      	subs	r3, #32
 800ada0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ada2:	68fb      	ldr	r3, [r7, #12]
}
 800ada4:	4618      	mov	r0, r3
 800ada6:	3714      	adds	r7, #20
 800ada8:	46bd      	mov	sp, r7
 800adaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adae:	4770      	bx	lr
 800adb0:	0800adb5 	.word	0x0800adb5

0800adb4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800adb4:	b480      	push	{r7}
 800adb6:	b085      	sub	sp, #20
 800adb8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800adba:	2300      	movs	r3, #0
 800adbc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800adbe:	4b12      	ldr	r3, [pc, #72]	; (800ae08 <prvTaskExitError+0x54>)
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800adc6:	d00a      	beq.n	800adde <prvTaskExitError+0x2a>
	__asm volatile
 800adc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adcc:	f383 8811 	msr	BASEPRI, r3
 800add0:	f3bf 8f6f 	isb	sy
 800add4:	f3bf 8f4f 	dsb	sy
 800add8:	60fb      	str	r3, [r7, #12]
}
 800adda:	bf00      	nop
 800addc:	e7fe      	b.n	800addc <prvTaskExitError+0x28>
	__asm volatile
 800adde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ade2:	f383 8811 	msr	BASEPRI, r3
 800ade6:	f3bf 8f6f 	isb	sy
 800adea:	f3bf 8f4f 	dsb	sy
 800adee:	60bb      	str	r3, [r7, #8]
}
 800adf0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800adf2:	bf00      	nop
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d0fc      	beq.n	800adf4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800adfa:	bf00      	nop
 800adfc:	bf00      	nop
 800adfe:	3714      	adds	r7, #20
 800ae00:	46bd      	mov	sp, r7
 800ae02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae06:	4770      	bx	lr
 800ae08:	20000014 	.word	0x20000014
 800ae0c:	00000000 	.word	0x00000000

0800ae10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ae10:	4b07      	ldr	r3, [pc, #28]	; (800ae30 <pxCurrentTCBConst2>)
 800ae12:	6819      	ldr	r1, [r3, #0]
 800ae14:	6808      	ldr	r0, [r1, #0]
 800ae16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae1a:	f380 8809 	msr	PSP, r0
 800ae1e:	f3bf 8f6f 	isb	sy
 800ae22:	f04f 0000 	mov.w	r0, #0
 800ae26:	f380 8811 	msr	BASEPRI, r0
 800ae2a:	4770      	bx	lr
 800ae2c:	f3af 8000 	nop.w

0800ae30 <pxCurrentTCBConst2>:
 800ae30:	2000558c 	.word	0x2000558c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ae34:	bf00      	nop
 800ae36:	bf00      	nop

0800ae38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ae38:	4808      	ldr	r0, [pc, #32]	; (800ae5c <prvPortStartFirstTask+0x24>)
 800ae3a:	6800      	ldr	r0, [r0, #0]
 800ae3c:	6800      	ldr	r0, [r0, #0]
 800ae3e:	f380 8808 	msr	MSP, r0
 800ae42:	f04f 0000 	mov.w	r0, #0
 800ae46:	f380 8814 	msr	CONTROL, r0
 800ae4a:	b662      	cpsie	i
 800ae4c:	b661      	cpsie	f
 800ae4e:	f3bf 8f4f 	dsb	sy
 800ae52:	f3bf 8f6f 	isb	sy
 800ae56:	df00      	svc	0
 800ae58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ae5a:	bf00      	nop
 800ae5c:	e000ed08 	.word	0xe000ed08

0800ae60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ae60:	b580      	push	{r7, lr}
 800ae62:	b086      	sub	sp, #24
 800ae64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ae66:	4b46      	ldr	r3, [pc, #280]	; (800af80 <xPortStartScheduler+0x120>)
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	4a46      	ldr	r2, [pc, #280]	; (800af84 <xPortStartScheduler+0x124>)
 800ae6c:	4293      	cmp	r3, r2
 800ae6e:	d10a      	bne.n	800ae86 <xPortStartScheduler+0x26>
	__asm volatile
 800ae70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae74:	f383 8811 	msr	BASEPRI, r3
 800ae78:	f3bf 8f6f 	isb	sy
 800ae7c:	f3bf 8f4f 	dsb	sy
 800ae80:	613b      	str	r3, [r7, #16]
}
 800ae82:	bf00      	nop
 800ae84:	e7fe      	b.n	800ae84 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ae86:	4b3e      	ldr	r3, [pc, #248]	; (800af80 <xPortStartScheduler+0x120>)
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	4a3f      	ldr	r2, [pc, #252]	; (800af88 <xPortStartScheduler+0x128>)
 800ae8c:	4293      	cmp	r3, r2
 800ae8e:	d10a      	bne.n	800aea6 <xPortStartScheduler+0x46>
	__asm volatile
 800ae90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae94:	f383 8811 	msr	BASEPRI, r3
 800ae98:	f3bf 8f6f 	isb	sy
 800ae9c:	f3bf 8f4f 	dsb	sy
 800aea0:	60fb      	str	r3, [r7, #12]
}
 800aea2:	bf00      	nop
 800aea4:	e7fe      	b.n	800aea4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800aea6:	4b39      	ldr	r3, [pc, #228]	; (800af8c <xPortStartScheduler+0x12c>)
 800aea8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800aeaa:	697b      	ldr	r3, [r7, #20]
 800aeac:	781b      	ldrb	r3, [r3, #0]
 800aeae:	b2db      	uxtb	r3, r3
 800aeb0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800aeb2:	697b      	ldr	r3, [r7, #20]
 800aeb4:	22ff      	movs	r2, #255	; 0xff
 800aeb6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800aeb8:	697b      	ldr	r3, [r7, #20]
 800aeba:	781b      	ldrb	r3, [r3, #0]
 800aebc:	b2db      	uxtb	r3, r3
 800aebe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800aec0:	78fb      	ldrb	r3, [r7, #3]
 800aec2:	b2db      	uxtb	r3, r3
 800aec4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800aec8:	b2da      	uxtb	r2, r3
 800aeca:	4b31      	ldr	r3, [pc, #196]	; (800af90 <xPortStartScheduler+0x130>)
 800aecc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800aece:	4b31      	ldr	r3, [pc, #196]	; (800af94 <xPortStartScheduler+0x134>)
 800aed0:	2207      	movs	r2, #7
 800aed2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800aed4:	e009      	b.n	800aeea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800aed6:	4b2f      	ldr	r3, [pc, #188]	; (800af94 <xPortStartScheduler+0x134>)
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	3b01      	subs	r3, #1
 800aedc:	4a2d      	ldr	r2, [pc, #180]	; (800af94 <xPortStartScheduler+0x134>)
 800aede:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800aee0:	78fb      	ldrb	r3, [r7, #3]
 800aee2:	b2db      	uxtb	r3, r3
 800aee4:	005b      	lsls	r3, r3, #1
 800aee6:	b2db      	uxtb	r3, r3
 800aee8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800aeea:	78fb      	ldrb	r3, [r7, #3]
 800aeec:	b2db      	uxtb	r3, r3
 800aeee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aef2:	2b80      	cmp	r3, #128	; 0x80
 800aef4:	d0ef      	beq.n	800aed6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800aef6:	4b27      	ldr	r3, [pc, #156]	; (800af94 <xPortStartScheduler+0x134>)
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	f1c3 0307 	rsb	r3, r3, #7
 800aefe:	2b04      	cmp	r3, #4
 800af00:	d00a      	beq.n	800af18 <xPortStartScheduler+0xb8>
	__asm volatile
 800af02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af06:	f383 8811 	msr	BASEPRI, r3
 800af0a:	f3bf 8f6f 	isb	sy
 800af0e:	f3bf 8f4f 	dsb	sy
 800af12:	60bb      	str	r3, [r7, #8]
}
 800af14:	bf00      	nop
 800af16:	e7fe      	b.n	800af16 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800af18:	4b1e      	ldr	r3, [pc, #120]	; (800af94 <xPortStartScheduler+0x134>)
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	021b      	lsls	r3, r3, #8
 800af1e:	4a1d      	ldr	r2, [pc, #116]	; (800af94 <xPortStartScheduler+0x134>)
 800af20:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800af22:	4b1c      	ldr	r3, [pc, #112]	; (800af94 <xPortStartScheduler+0x134>)
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800af2a:	4a1a      	ldr	r2, [pc, #104]	; (800af94 <xPortStartScheduler+0x134>)
 800af2c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	b2da      	uxtb	r2, r3
 800af32:	697b      	ldr	r3, [r7, #20]
 800af34:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800af36:	4b18      	ldr	r3, [pc, #96]	; (800af98 <xPortStartScheduler+0x138>)
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	4a17      	ldr	r2, [pc, #92]	; (800af98 <xPortStartScheduler+0x138>)
 800af3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800af40:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800af42:	4b15      	ldr	r3, [pc, #84]	; (800af98 <xPortStartScheduler+0x138>)
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	4a14      	ldr	r2, [pc, #80]	; (800af98 <xPortStartScheduler+0x138>)
 800af48:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800af4c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800af4e:	f000 f8dd 	bl	800b10c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800af52:	4b12      	ldr	r3, [pc, #72]	; (800af9c <xPortStartScheduler+0x13c>)
 800af54:	2200      	movs	r2, #0
 800af56:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800af58:	f000 f8fc 	bl	800b154 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800af5c:	4b10      	ldr	r3, [pc, #64]	; (800afa0 <xPortStartScheduler+0x140>)
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	4a0f      	ldr	r2, [pc, #60]	; (800afa0 <xPortStartScheduler+0x140>)
 800af62:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800af66:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800af68:	f7ff ff66 	bl	800ae38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800af6c:	f7fe ff7e 	bl	8009e6c <vTaskSwitchContext>
	prvTaskExitError();
 800af70:	f7ff ff20 	bl	800adb4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800af74:	2300      	movs	r3, #0
}
 800af76:	4618      	mov	r0, r3
 800af78:	3718      	adds	r7, #24
 800af7a:	46bd      	mov	sp, r7
 800af7c:	bd80      	pop	{r7, pc}
 800af7e:	bf00      	nop
 800af80:	e000ed00 	.word	0xe000ed00
 800af84:	410fc271 	.word	0x410fc271
 800af88:	410fc270 	.word	0x410fc270
 800af8c:	e000e400 	.word	0xe000e400
 800af90:	20005bb8 	.word	0x20005bb8
 800af94:	20005bbc 	.word	0x20005bbc
 800af98:	e000ed20 	.word	0xe000ed20
 800af9c:	20000014 	.word	0x20000014
 800afa0:	e000ef34 	.word	0xe000ef34

0800afa4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800afa4:	b480      	push	{r7}
 800afa6:	b083      	sub	sp, #12
 800afa8:	af00      	add	r7, sp, #0
	__asm volatile
 800afaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afae:	f383 8811 	msr	BASEPRI, r3
 800afb2:	f3bf 8f6f 	isb	sy
 800afb6:	f3bf 8f4f 	dsb	sy
 800afba:	607b      	str	r3, [r7, #4]
}
 800afbc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800afbe:	4b0f      	ldr	r3, [pc, #60]	; (800affc <vPortEnterCritical+0x58>)
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	3301      	adds	r3, #1
 800afc4:	4a0d      	ldr	r2, [pc, #52]	; (800affc <vPortEnterCritical+0x58>)
 800afc6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800afc8:	4b0c      	ldr	r3, [pc, #48]	; (800affc <vPortEnterCritical+0x58>)
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	2b01      	cmp	r3, #1
 800afce:	d10f      	bne.n	800aff0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800afd0:	4b0b      	ldr	r3, [pc, #44]	; (800b000 <vPortEnterCritical+0x5c>)
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	b2db      	uxtb	r3, r3
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d00a      	beq.n	800aff0 <vPortEnterCritical+0x4c>
	__asm volatile
 800afda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afde:	f383 8811 	msr	BASEPRI, r3
 800afe2:	f3bf 8f6f 	isb	sy
 800afe6:	f3bf 8f4f 	dsb	sy
 800afea:	603b      	str	r3, [r7, #0]
}
 800afec:	bf00      	nop
 800afee:	e7fe      	b.n	800afee <vPortEnterCritical+0x4a>
	}
}
 800aff0:	bf00      	nop
 800aff2:	370c      	adds	r7, #12
 800aff4:	46bd      	mov	sp, r7
 800aff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800affa:	4770      	bx	lr
 800affc:	20000014 	.word	0x20000014
 800b000:	e000ed04 	.word	0xe000ed04

0800b004 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b004:	b480      	push	{r7}
 800b006:	b083      	sub	sp, #12
 800b008:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b00a:	4b12      	ldr	r3, [pc, #72]	; (800b054 <vPortExitCritical+0x50>)
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d10a      	bne.n	800b028 <vPortExitCritical+0x24>
	__asm volatile
 800b012:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b016:	f383 8811 	msr	BASEPRI, r3
 800b01a:	f3bf 8f6f 	isb	sy
 800b01e:	f3bf 8f4f 	dsb	sy
 800b022:	607b      	str	r3, [r7, #4]
}
 800b024:	bf00      	nop
 800b026:	e7fe      	b.n	800b026 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b028:	4b0a      	ldr	r3, [pc, #40]	; (800b054 <vPortExitCritical+0x50>)
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	3b01      	subs	r3, #1
 800b02e:	4a09      	ldr	r2, [pc, #36]	; (800b054 <vPortExitCritical+0x50>)
 800b030:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b032:	4b08      	ldr	r3, [pc, #32]	; (800b054 <vPortExitCritical+0x50>)
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	2b00      	cmp	r3, #0
 800b038:	d105      	bne.n	800b046 <vPortExitCritical+0x42>
 800b03a:	2300      	movs	r3, #0
 800b03c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b03e:	683b      	ldr	r3, [r7, #0]
 800b040:	f383 8811 	msr	BASEPRI, r3
}
 800b044:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b046:	bf00      	nop
 800b048:	370c      	adds	r7, #12
 800b04a:	46bd      	mov	sp, r7
 800b04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b050:	4770      	bx	lr
 800b052:	bf00      	nop
 800b054:	20000014 	.word	0x20000014
	...

0800b060 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b060:	f3ef 8009 	mrs	r0, PSP
 800b064:	f3bf 8f6f 	isb	sy
 800b068:	4b15      	ldr	r3, [pc, #84]	; (800b0c0 <pxCurrentTCBConst>)
 800b06a:	681a      	ldr	r2, [r3, #0]
 800b06c:	f01e 0f10 	tst.w	lr, #16
 800b070:	bf08      	it	eq
 800b072:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b076:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b07a:	6010      	str	r0, [r2, #0]
 800b07c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b080:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b084:	f380 8811 	msr	BASEPRI, r0
 800b088:	f3bf 8f4f 	dsb	sy
 800b08c:	f3bf 8f6f 	isb	sy
 800b090:	f7fe feec 	bl	8009e6c <vTaskSwitchContext>
 800b094:	f04f 0000 	mov.w	r0, #0
 800b098:	f380 8811 	msr	BASEPRI, r0
 800b09c:	bc09      	pop	{r0, r3}
 800b09e:	6819      	ldr	r1, [r3, #0]
 800b0a0:	6808      	ldr	r0, [r1, #0]
 800b0a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0a6:	f01e 0f10 	tst.w	lr, #16
 800b0aa:	bf08      	it	eq
 800b0ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b0b0:	f380 8809 	msr	PSP, r0
 800b0b4:	f3bf 8f6f 	isb	sy
 800b0b8:	4770      	bx	lr
 800b0ba:	bf00      	nop
 800b0bc:	f3af 8000 	nop.w

0800b0c0 <pxCurrentTCBConst>:
 800b0c0:	2000558c 	.word	0x2000558c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b0c4:	bf00      	nop
 800b0c6:	bf00      	nop

0800b0c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b0c8:	b580      	push	{r7, lr}
 800b0ca:	b082      	sub	sp, #8
 800b0cc:	af00      	add	r7, sp, #0
	__asm volatile
 800b0ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0d2:	f383 8811 	msr	BASEPRI, r3
 800b0d6:	f3bf 8f6f 	isb	sy
 800b0da:	f3bf 8f4f 	dsb	sy
 800b0de:	607b      	str	r3, [r7, #4]
}
 800b0e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b0e2:	f7fe fe09 	bl	8009cf8 <xTaskIncrementTick>
 800b0e6:	4603      	mov	r3, r0
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d003      	beq.n	800b0f4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b0ec:	4b06      	ldr	r3, [pc, #24]	; (800b108 <SysTick_Handler+0x40>)
 800b0ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b0f2:	601a      	str	r2, [r3, #0]
 800b0f4:	2300      	movs	r3, #0
 800b0f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b0f8:	683b      	ldr	r3, [r7, #0]
 800b0fa:	f383 8811 	msr	BASEPRI, r3
}
 800b0fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b100:	bf00      	nop
 800b102:	3708      	adds	r7, #8
 800b104:	46bd      	mov	sp, r7
 800b106:	bd80      	pop	{r7, pc}
 800b108:	e000ed04 	.word	0xe000ed04

0800b10c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b10c:	b480      	push	{r7}
 800b10e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b110:	4b0b      	ldr	r3, [pc, #44]	; (800b140 <vPortSetupTimerInterrupt+0x34>)
 800b112:	2200      	movs	r2, #0
 800b114:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b116:	4b0b      	ldr	r3, [pc, #44]	; (800b144 <vPortSetupTimerInterrupt+0x38>)
 800b118:	2200      	movs	r2, #0
 800b11a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b11c:	4b0a      	ldr	r3, [pc, #40]	; (800b148 <vPortSetupTimerInterrupt+0x3c>)
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	4a0a      	ldr	r2, [pc, #40]	; (800b14c <vPortSetupTimerInterrupt+0x40>)
 800b122:	fba2 2303 	umull	r2, r3, r2, r3
 800b126:	099b      	lsrs	r3, r3, #6
 800b128:	4a09      	ldr	r2, [pc, #36]	; (800b150 <vPortSetupTimerInterrupt+0x44>)
 800b12a:	3b01      	subs	r3, #1
 800b12c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b12e:	4b04      	ldr	r3, [pc, #16]	; (800b140 <vPortSetupTimerInterrupt+0x34>)
 800b130:	2207      	movs	r2, #7
 800b132:	601a      	str	r2, [r3, #0]
}
 800b134:	bf00      	nop
 800b136:	46bd      	mov	sp, r7
 800b138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b13c:	4770      	bx	lr
 800b13e:	bf00      	nop
 800b140:	e000e010 	.word	0xe000e010
 800b144:	e000e018 	.word	0xe000e018
 800b148:	20000000 	.word	0x20000000
 800b14c:	10624dd3 	.word	0x10624dd3
 800b150:	e000e014 	.word	0xe000e014

0800b154 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b154:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b164 <vPortEnableVFP+0x10>
 800b158:	6801      	ldr	r1, [r0, #0]
 800b15a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b15e:	6001      	str	r1, [r0, #0]
 800b160:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b162:	bf00      	nop
 800b164:	e000ed88 	.word	0xe000ed88

0800b168 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b168:	b480      	push	{r7}
 800b16a:	b085      	sub	sp, #20
 800b16c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b16e:	f3ef 8305 	mrs	r3, IPSR
 800b172:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	2b0f      	cmp	r3, #15
 800b178:	d914      	bls.n	800b1a4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b17a:	4a17      	ldr	r2, [pc, #92]	; (800b1d8 <vPortValidateInterruptPriority+0x70>)
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	4413      	add	r3, r2
 800b180:	781b      	ldrb	r3, [r3, #0]
 800b182:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b184:	4b15      	ldr	r3, [pc, #84]	; (800b1dc <vPortValidateInterruptPriority+0x74>)
 800b186:	781b      	ldrb	r3, [r3, #0]
 800b188:	7afa      	ldrb	r2, [r7, #11]
 800b18a:	429a      	cmp	r2, r3
 800b18c:	d20a      	bcs.n	800b1a4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b18e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b192:	f383 8811 	msr	BASEPRI, r3
 800b196:	f3bf 8f6f 	isb	sy
 800b19a:	f3bf 8f4f 	dsb	sy
 800b19e:	607b      	str	r3, [r7, #4]
}
 800b1a0:	bf00      	nop
 800b1a2:	e7fe      	b.n	800b1a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b1a4:	4b0e      	ldr	r3, [pc, #56]	; (800b1e0 <vPortValidateInterruptPriority+0x78>)
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b1ac:	4b0d      	ldr	r3, [pc, #52]	; (800b1e4 <vPortValidateInterruptPriority+0x7c>)
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	429a      	cmp	r2, r3
 800b1b2:	d90a      	bls.n	800b1ca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b1b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1b8:	f383 8811 	msr	BASEPRI, r3
 800b1bc:	f3bf 8f6f 	isb	sy
 800b1c0:	f3bf 8f4f 	dsb	sy
 800b1c4:	603b      	str	r3, [r7, #0]
}
 800b1c6:	bf00      	nop
 800b1c8:	e7fe      	b.n	800b1c8 <vPortValidateInterruptPriority+0x60>
	}
 800b1ca:	bf00      	nop
 800b1cc:	3714      	adds	r7, #20
 800b1ce:	46bd      	mov	sp, r7
 800b1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d4:	4770      	bx	lr
 800b1d6:	bf00      	nop
 800b1d8:	e000e3f0 	.word	0xe000e3f0
 800b1dc:	20005bb8 	.word	0x20005bb8
 800b1e0:	e000ed0c 	.word	0xe000ed0c
 800b1e4:	20005bbc 	.word	0x20005bbc

0800b1e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b1e8:	b580      	push	{r7, lr}
 800b1ea:	b08a      	sub	sp, #40	; 0x28
 800b1ec:	af00      	add	r7, sp, #0
 800b1ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b1f0:	2300      	movs	r3, #0
 800b1f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b1f4:	f7fe fcc4 	bl	8009b80 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b1f8:	4b58      	ldr	r3, [pc, #352]	; (800b35c <pvPortMalloc+0x174>)
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d101      	bne.n	800b204 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b200:	f000 f910 	bl	800b424 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b204:	4b56      	ldr	r3, [pc, #344]	; (800b360 <pvPortMalloc+0x178>)
 800b206:	681a      	ldr	r2, [r3, #0]
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	4013      	ands	r3, r2
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	f040 808e 	bne.w	800b32e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	2b00      	cmp	r3, #0
 800b216:	d01d      	beq.n	800b254 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b218:	2208      	movs	r2, #8
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	4413      	add	r3, r2
 800b21e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	f003 0307 	and.w	r3, r3, #7
 800b226:	2b00      	cmp	r3, #0
 800b228:	d014      	beq.n	800b254 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	f023 0307 	bic.w	r3, r3, #7
 800b230:	3308      	adds	r3, #8
 800b232:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	f003 0307 	and.w	r3, r3, #7
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d00a      	beq.n	800b254 <pvPortMalloc+0x6c>
	__asm volatile
 800b23e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b242:	f383 8811 	msr	BASEPRI, r3
 800b246:	f3bf 8f6f 	isb	sy
 800b24a:	f3bf 8f4f 	dsb	sy
 800b24e:	617b      	str	r3, [r7, #20]
}
 800b250:	bf00      	nop
 800b252:	e7fe      	b.n	800b252 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	2b00      	cmp	r3, #0
 800b258:	d069      	beq.n	800b32e <pvPortMalloc+0x146>
 800b25a:	4b42      	ldr	r3, [pc, #264]	; (800b364 <pvPortMalloc+0x17c>)
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	687a      	ldr	r2, [r7, #4]
 800b260:	429a      	cmp	r2, r3
 800b262:	d864      	bhi.n	800b32e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b264:	4b40      	ldr	r3, [pc, #256]	; (800b368 <pvPortMalloc+0x180>)
 800b266:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b268:	4b3f      	ldr	r3, [pc, #252]	; (800b368 <pvPortMalloc+0x180>)
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b26e:	e004      	b.n	800b27a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b272:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b27a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b27c:	685b      	ldr	r3, [r3, #4]
 800b27e:	687a      	ldr	r2, [r7, #4]
 800b280:	429a      	cmp	r2, r3
 800b282:	d903      	bls.n	800b28c <pvPortMalloc+0xa4>
 800b284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d1f1      	bne.n	800b270 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b28c:	4b33      	ldr	r3, [pc, #204]	; (800b35c <pvPortMalloc+0x174>)
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b292:	429a      	cmp	r2, r3
 800b294:	d04b      	beq.n	800b32e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b296:	6a3b      	ldr	r3, [r7, #32]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	2208      	movs	r2, #8
 800b29c:	4413      	add	r3, r2
 800b29e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b2a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2a2:	681a      	ldr	r2, [r3, #0]
 800b2a4:	6a3b      	ldr	r3, [r7, #32]
 800b2a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b2a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2aa:	685a      	ldr	r2, [r3, #4]
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	1ad2      	subs	r2, r2, r3
 800b2b0:	2308      	movs	r3, #8
 800b2b2:	005b      	lsls	r3, r3, #1
 800b2b4:	429a      	cmp	r2, r3
 800b2b6:	d91f      	bls.n	800b2f8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b2b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	4413      	add	r3, r2
 800b2be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b2c0:	69bb      	ldr	r3, [r7, #24]
 800b2c2:	f003 0307 	and.w	r3, r3, #7
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d00a      	beq.n	800b2e0 <pvPortMalloc+0xf8>
	__asm volatile
 800b2ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2ce:	f383 8811 	msr	BASEPRI, r3
 800b2d2:	f3bf 8f6f 	isb	sy
 800b2d6:	f3bf 8f4f 	dsb	sy
 800b2da:	613b      	str	r3, [r7, #16]
}
 800b2dc:	bf00      	nop
 800b2de:	e7fe      	b.n	800b2de <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b2e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2e2:	685a      	ldr	r2, [r3, #4]
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	1ad2      	subs	r2, r2, r3
 800b2e8:	69bb      	ldr	r3, [r7, #24]
 800b2ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b2ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2ee:	687a      	ldr	r2, [r7, #4]
 800b2f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b2f2:	69b8      	ldr	r0, [r7, #24]
 800b2f4:	f000 f8f8 	bl	800b4e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b2f8:	4b1a      	ldr	r3, [pc, #104]	; (800b364 <pvPortMalloc+0x17c>)
 800b2fa:	681a      	ldr	r2, [r3, #0]
 800b2fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2fe:	685b      	ldr	r3, [r3, #4]
 800b300:	1ad3      	subs	r3, r2, r3
 800b302:	4a18      	ldr	r2, [pc, #96]	; (800b364 <pvPortMalloc+0x17c>)
 800b304:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b306:	4b17      	ldr	r3, [pc, #92]	; (800b364 <pvPortMalloc+0x17c>)
 800b308:	681a      	ldr	r2, [r3, #0]
 800b30a:	4b18      	ldr	r3, [pc, #96]	; (800b36c <pvPortMalloc+0x184>)
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	429a      	cmp	r2, r3
 800b310:	d203      	bcs.n	800b31a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b312:	4b14      	ldr	r3, [pc, #80]	; (800b364 <pvPortMalloc+0x17c>)
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	4a15      	ldr	r2, [pc, #84]	; (800b36c <pvPortMalloc+0x184>)
 800b318:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b31a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b31c:	685a      	ldr	r2, [r3, #4]
 800b31e:	4b10      	ldr	r3, [pc, #64]	; (800b360 <pvPortMalloc+0x178>)
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	431a      	orrs	r2, r3
 800b324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b326:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b32a:	2200      	movs	r2, #0
 800b32c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b32e:	f7fe fc35 	bl	8009b9c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b332:	69fb      	ldr	r3, [r7, #28]
 800b334:	f003 0307 	and.w	r3, r3, #7
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d00a      	beq.n	800b352 <pvPortMalloc+0x16a>
	__asm volatile
 800b33c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b340:	f383 8811 	msr	BASEPRI, r3
 800b344:	f3bf 8f6f 	isb	sy
 800b348:	f3bf 8f4f 	dsb	sy
 800b34c:	60fb      	str	r3, [r7, #12]
}
 800b34e:	bf00      	nop
 800b350:	e7fe      	b.n	800b350 <pvPortMalloc+0x168>
	return pvReturn;
 800b352:	69fb      	ldr	r3, [r7, #28]
}
 800b354:	4618      	mov	r0, r3
 800b356:	3728      	adds	r7, #40	; 0x28
 800b358:	46bd      	mov	sp, r7
 800b35a:	bd80      	pop	{r7, pc}
 800b35c:	200097c8 	.word	0x200097c8
 800b360:	200097d4 	.word	0x200097d4
 800b364:	200097cc 	.word	0x200097cc
 800b368:	200097c0 	.word	0x200097c0
 800b36c:	200097d0 	.word	0x200097d0

0800b370 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b370:	b580      	push	{r7, lr}
 800b372:	b086      	sub	sp, #24
 800b374:	af00      	add	r7, sp, #0
 800b376:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d048      	beq.n	800b414 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b382:	2308      	movs	r3, #8
 800b384:	425b      	negs	r3, r3
 800b386:	697a      	ldr	r2, [r7, #20]
 800b388:	4413      	add	r3, r2
 800b38a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b38c:	697b      	ldr	r3, [r7, #20]
 800b38e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b390:	693b      	ldr	r3, [r7, #16]
 800b392:	685a      	ldr	r2, [r3, #4]
 800b394:	4b21      	ldr	r3, [pc, #132]	; (800b41c <vPortFree+0xac>)
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	4013      	ands	r3, r2
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d10a      	bne.n	800b3b4 <vPortFree+0x44>
	__asm volatile
 800b39e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3a2:	f383 8811 	msr	BASEPRI, r3
 800b3a6:	f3bf 8f6f 	isb	sy
 800b3aa:	f3bf 8f4f 	dsb	sy
 800b3ae:	60fb      	str	r3, [r7, #12]
}
 800b3b0:	bf00      	nop
 800b3b2:	e7fe      	b.n	800b3b2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b3b4:	693b      	ldr	r3, [r7, #16]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d00a      	beq.n	800b3d2 <vPortFree+0x62>
	__asm volatile
 800b3bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3c0:	f383 8811 	msr	BASEPRI, r3
 800b3c4:	f3bf 8f6f 	isb	sy
 800b3c8:	f3bf 8f4f 	dsb	sy
 800b3cc:	60bb      	str	r3, [r7, #8]
}
 800b3ce:	bf00      	nop
 800b3d0:	e7fe      	b.n	800b3d0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b3d2:	693b      	ldr	r3, [r7, #16]
 800b3d4:	685a      	ldr	r2, [r3, #4]
 800b3d6:	4b11      	ldr	r3, [pc, #68]	; (800b41c <vPortFree+0xac>)
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	4013      	ands	r3, r2
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d019      	beq.n	800b414 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b3e0:	693b      	ldr	r3, [r7, #16]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d115      	bne.n	800b414 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b3e8:	693b      	ldr	r3, [r7, #16]
 800b3ea:	685a      	ldr	r2, [r3, #4]
 800b3ec:	4b0b      	ldr	r3, [pc, #44]	; (800b41c <vPortFree+0xac>)
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	43db      	mvns	r3, r3
 800b3f2:	401a      	ands	r2, r3
 800b3f4:	693b      	ldr	r3, [r7, #16]
 800b3f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b3f8:	f7fe fbc2 	bl	8009b80 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b3fc:	693b      	ldr	r3, [r7, #16]
 800b3fe:	685a      	ldr	r2, [r3, #4]
 800b400:	4b07      	ldr	r3, [pc, #28]	; (800b420 <vPortFree+0xb0>)
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	4413      	add	r3, r2
 800b406:	4a06      	ldr	r2, [pc, #24]	; (800b420 <vPortFree+0xb0>)
 800b408:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b40a:	6938      	ldr	r0, [r7, #16]
 800b40c:	f000 f86c 	bl	800b4e8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800b410:	f7fe fbc4 	bl	8009b9c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b414:	bf00      	nop
 800b416:	3718      	adds	r7, #24
 800b418:	46bd      	mov	sp, r7
 800b41a:	bd80      	pop	{r7, pc}
 800b41c:	200097d4 	.word	0x200097d4
 800b420:	200097cc 	.word	0x200097cc

0800b424 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b424:	b480      	push	{r7}
 800b426:	b085      	sub	sp, #20
 800b428:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b42a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800b42e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b430:	4b27      	ldr	r3, [pc, #156]	; (800b4d0 <prvHeapInit+0xac>)
 800b432:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	f003 0307 	and.w	r3, r3, #7
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d00c      	beq.n	800b458 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	3307      	adds	r3, #7
 800b442:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	f023 0307 	bic.w	r3, r3, #7
 800b44a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b44c:	68ba      	ldr	r2, [r7, #8]
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	1ad3      	subs	r3, r2, r3
 800b452:	4a1f      	ldr	r2, [pc, #124]	; (800b4d0 <prvHeapInit+0xac>)
 800b454:	4413      	add	r3, r2
 800b456:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b45c:	4a1d      	ldr	r2, [pc, #116]	; (800b4d4 <prvHeapInit+0xb0>)
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b462:	4b1c      	ldr	r3, [pc, #112]	; (800b4d4 <prvHeapInit+0xb0>)
 800b464:	2200      	movs	r2, #0
 800b466:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	68ba      	ldr	r2, [r7, #8]
 800b46c:	4413      	add	r3, r2
 800b46e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b470:	2208      	movs	r2, #8
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	1a9b      	subs	r3, r3, r2
 800b476:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	f023 0307 	bic.w	r3, r3, #7
 800b47e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	4a15      	ldr	r2, [pc, #84]	; (800b4d8 <prvHeapInit+0xb4>)
 800b484:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b486:	4b14      	ldr	r3, [pc, #80]	; (800b4d8 <prvHeapInit+0xb4>)
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	2200      	movs	r2, #0
 800b48c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b48e:	4b12      	ldr	r3, [pc, #72]	; (800b4d8 <prvHeapInit+0xb4>)
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	2200      	movs	r2, #0
 800b494:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b49a:	683b      	ldr	r3, [r7, #0]
 800b49c:	68fa      	ldr	r2, [r7, #12]
 800b49e:	1ad2      	subs	r2, r2, r3
 800b4a0:	683b      	ldr	r3, [r7, #0]
 800b4a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b4a4:	4b0c      	ldr	r3, [pc, #48]	; (800b4d8 <prvHeapInit+0xb4>)
 800b4a6:	681a      	ldr	r2, [r3, #0]
 800b4a8:	683b      	ldr	r3, [r7, #0]
 800b4aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b4ac:	683b      	ldr	r3, [r7, #0]
 800b4ae:	685b      	ldr	r3, [r3, #4]
 800b4b0:	4a0a      	ldr	r2, [pc, #40]	; (800b4dc <prvHeapInit+0xb8>)
 800b4b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b4b4:	683b      	ldr	r3, [r7, #0]
 800b4b6:	685b      	ldr	r3, [r3, #4]
 800b4b8:	4a09      	ldr	r2, [pc, #36]	; (800b4e0 <prvHeapInit+0xbc>)
 800b4ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b4bc:	4b09      	ldr	r3, [pc, #36]	; (800b4e4 <prvHeapInit+0xc0>)
 800b4be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b4c2:	601a      	str	r2, [r3, #0]
}
 800b4c4:	bf00      	nop
 800b4c6:	3714      	adds	r7, #20
 800b4c8:	46bd      	mov	sp, r7
 800b4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ce:	4770      	bx	lr
 800b4d0:	20005bc0 	.word	0x20005bc0
 800b4d4:	200097c0 	.word	0x200097c0
 800b4d8:	200097c8 	.word	0x200097c8
 800b4dc:	200097d0 	.word	0x200097d0
 800b4e0:	200097cc 	.word	0x200097cc
 800b4e4:	200097d4 	.word	0x200097d4

0800b4e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b4e8:	b480      	push	{r7}
 800b4ea:	b085      	sub	sp, #20
 800b4ec:	af00      	add	r7, sp, #0
 800b4ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b4f0:	4b28      	ldr	r3, [pc, #160]	; (800b594 <prvInsertBlockIntoFreeList+0xac>)
 800b4f2:	60fb      	str	r3, [r7, #12]
 800b4f4:	e002      	b.n	800b4fc <prvInsertBlockIntoFreeList+0x14>
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	60fb      	str	r3, [r7, #12]
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	687a      	ldr	r2, [r7, #4]
 800b502:	429a      	cmp	r2, r3
 800b504:	d8f7      	bhi.n	800b4f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	685b      	ldr	r3, [r3, #4]
 800b50e:	68ba      	ldr	r2, [r7, #8]
 800b510:	4413      	add	r3, r2
 800b512:	687a      	ldr	r2, [r7, #4]
 800b514:	429a      	cmp	r2, r3
 800b516:	d108      	bne.n	800b52a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	685a      	ldr	r2, [r3, #4]
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	685b      	ldr	r3, [r3, #4]
 800b520:	441a      	add	r2, r3
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	685b      	ldr	r3, [r3, #4]
 800b532:	68ba      	ldr	r2, [r7, #8]
 800b534:	441a      	add	r2, r3
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	429a      	cmp	r2, r3
 800b53c:	d118      	bne.n	800b570 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	681a      	ldr	r2, [r3, #0]
 800b542:	4b15      	ldr	r3, [pc, #84]	; (800b598 <prvInsertBlockIntoFreeList+0xb0>)
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	429a      	cmp	r2, r3
 800b548:	d00d      	beq.n	800b566 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	685a      	ldr	r2, [r3, #4]
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	685b      	ldr	r3, [r3, #4]
 800b554:	441a      	add	r2, r3
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	681a      	ldr	r2, [r3, #0]
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	601a      	str	r2, [r3, #0]
 800b564:	e008      	b.n	800b578 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b566:	4b0c      	ldr	r3, [pc, #48]	; (800b598 <prvInsertBlockIntoFreeList+0xb0>)
 800b568:	681a      	ldr	r2, [r3, #0]
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	601a      	str	r2, [r3, #0]
 800b56e:	e003      	b.n	800b578 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	681a      	ldr	r2, [r3, #0]
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b578:	68fa      	ldr	r2, [r7, #12]
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	429a      	cmp	r2, r3
 800b57e:	d002      	beq.n	800b586 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	687a      	ldr	r2, [r7, #4]
 800b584:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b586:	bf00      	nop
 800b588:	3714      	adds	r7, #20
 800b58a:	46bd      	mov	sp, r7
 800b58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b590:	4770      	bx	lr
 800b592:	bf00      	nop
 800b594:	200097c0 	.word	0x200097c0
 800b598:	200097c8 	.word	0x200097c8

0800b59c <__libc_init_array>:
 800b59c:	b570      	push	{r4, r5, r6, lr}
 800b59e:	4d0d      	ldr	r5, [pc, #52]	; (800b5d4 <__libc_init_array+0x38>)
 800b5a0:	4c0d      	ldr	r4, [pc, #52]	; (800b5d8 <__libc_init_array+0x3c>)
 800b5a2:	1b64      	subs	r4, r4, r5
 800b5a4:	10a4      	asrs	r4, r4, #2
 800b5a6:	2600      	movs	r6, #0
 800b5a8:	42a6      	cmp	r6, r4
 800b5aa:	d109      	bne.n	800b5c0 <__libc_init_array+0x24>
 800b5ac:	4d0b      	ldr	r5, [pc, #44]	; (800b5dc <__libc_init_array+0x40>)
 800b5ae:	4c0c      	ldr	r4, [pc, #48]	; (800b5e0 <__libc_init_array+0x44>)
 800b5b0:	f001 f8b4 	bl	800c71c <_init>
 800b5b4:	1b64      	subs	r4, r4, r5
 800b5b6:	10a4      	asrs	r4, r4, #2
 800b5b8:	2600      	movs	r6, #0
 800b5ba:	42a6      	cmp	r6, r4
 800b5bc:	d105      	bne.n	800b5ca <__libc_init_array+0x2e>
 800b5be:	bd70      	pop	{r4, r5, r6, pc}
 800b5c0:	f855 3b04 	ldr.w	r3, [r5], #4
 800b5c4:	4798      	blx	r3
 800b5c6:	3601      	adds	r6, #1
 800b5c8:	e7ee      	b.n	800b5a8 <__libc_init_array+0xc>
 800b5ca:	f855 3b04 	ldr.w	r3, [r5], #4
 800b5ce:	4798      	blx	r3
 800b5d0:	3601      	adds	r6, #1
 800b5d2:	e7f2      	b.n	800b5ba <__libc_init_array+0x1e>
 800b5d4:	0800ca18 	.word	0x0800ca18
 800b5d8:	0800ca18 	.word	0x0800ca18
 800b5dc:	0800ca18 	.word	0x0800ca18
 800b5e0:	0800ca1c 	.word	0x0800ca1c

0800b5e4 <memcpy>:
 800b5e4:	440a      	add	r2, r1
 800b5e6:	4291      	cmp	r1, r2
 800b5e8:	f100 33ff 	add.w	r3, r0, #4294967295
 800b5ec:	d100      	bne.n	800b5f0 <memcpy+0xc>
 800b5ee:	4770      	bx	lr
 800b5f0:	b510      	push	{r4, lr}
 800b5f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b5f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b5fa:	4291      	cmp	r1, r2
 800b5fc:	d1f9      	bne.n	800b5f2 <memcpy+0xe>
 800b5fe:	bd10      	pop	{r4, pc}

0800b600 <memset>:
 800b600:	4402      	add	r2, r0
 800b602:	4603      	mov	r3, r0
 800b604:	4293      	cmp	r3, r2
 800b606:	d100      	bne.n	800b60a <memset+0xa>
 800b608:	4770      	bx	lr
 800b60a:	f803 1b01 	strb.w	r1, [r3], #1
 800b60e:	e7f9      	b.n	800b604 <memset+0x4>

0800b610 <cos>:
 800b610:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b612:	ec53 2b10 	vmov	r2, r3, d0
 800b616:	4824      	ldr	r0, [pc, #144]	; (800b6a8 <cos+0x98>)
 800b618:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b61c:	4281      	cmp	r1, r0
 800b61e:	dc06      	bgt.n	800b62e <cos+0x1e>
 800b620:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 800b6a0 <cos+0x90>
 800b624:	f000 faa4 	bl	800bb70 <__kernel_cos>
 800b628:	ec51 0b10 	vmov	r0, r1, d0
 800b62c:	e007      	b.n	800b63e <cos+0x2e>
 800b62e:	481f      	ldr	r0, [pc, #124]	; (800b6ac <cos+0x9c>)
 800b630:	4281      	cmp	r1, r0
 800b632:	dd09      	ble.n	800b648 <cos+0x38>
 800b634:	ee10 0a10 	vmov	r0, s0
 800b638:	4619      	mov	r1, r3
 800b63a:	f7f4 fddd 	bl	80001f8 <__aeabi_dsub>
 800b63e:	ec41 0b10 	vmov	d0, r0, r1
 800b642:	b005      	add	sp, #20
 800b644:	f85d fb04 	ldr.w	pc, [sp], #4
 800b648:	4668      	mov	r0, sp
 800b64a:	f000 f885 	bl	800b758 <__ieee754_rem_pio2>
 800b64e:	f000 0003 	and.w	r0, r0, #3
 800b652:	2801      	cmp	r0, #1
 800b654:	d007      	beq.n	800b666 <cos+0x56>
 800b656:	2802      	cmp	r0, #2
 800b658:	d012      	beq.n	800b680 <cos+0x70>
 800b65a:	b9c0      	cbnz	r0, 800b68e <cos+0x7e>
 800b65c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b660:	ed9d 0b00 	vldr	d0, [sp]
 800b664:	e7de      	b.n	800b624 <cos+0x14>
 800b666:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b66a:	ed9d 0b00 	vldr	d0, [sp]
 800b66e:	f000 fe87 	bl	800c380 <__kernel_sin>
 800b672:	ec53 2b10 	vmov	r2, r3, d0
 800b676:	ee10 0a10 	vmov	r0, s0
 800b67a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800b67e:	e7de      	b.n	800b63e <cos+0x2e>
 800b680:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b684:	ed9d 0b00 	vldr	d0, [sp]
 800b688:	f000 fa72 	bl	800bb70 <__kernel_cos>
 800b68c:	e7f1      	b.n	800b672 <cos+0x62>
 800b68e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b692:	ed9d 0b00 	vldr	d0, [sp]
 800b696:	2001      	movs	r0, #1
 800b698:	f000 fe72 	bl	800c380 <__kernel_sin>
 800b69c:	e7c4      	b.n	800b628 <cos+0x18>
 800b69e:	bf00      	nop
	...
 800b6a8:	3fe921fb 	.word	0x3fe921fb
 800b6ac:	7fefffff 	.word	0x7fefffff

0800b6b0 <sin>:
 800b6b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b6b2:	ec53 2b10 	vmov	r2, r3, d0
 800b6b6:	4826      	ldr	r0, [pc, #152]	; (800b750 <sin+0xa0>)
 800b6b8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b6bc:	4281      	cmp	r1, r0
 800b6be:	dc07      	bgt.n	800b6d0 <sin+0x20>
 800b6c0:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800b748 <sin+0x98>
 800b6c4:	2000      	movs	r0, #0
 800b6c6:	f000 fe5b 	bl	800c380 <__kernel_sin>
 800b6ca:	ec51 0b10 	vmov	r0, r1, d0
 800b6ce:	e007      	b.n	800b6e0 <sin+0x30>
 800b6d0:	4820      	ldr	r0, [pc, #128]	; (800b754 <sin+0xa4>)
 800b6d2:	4281      	cmp	r1, r0
 800b6d4:	dd09      	ble.n	800b6ea <sin+0x3a>
 800b6d6:	ee10 0a10 	vmov	r0, s0
 800b6da:	4619      	mov	r1, r3
 800b6dc:	f7f4 fd8c 	bl	80001f8 <__aeabi_dsub>
 800b6e0:	ec41 0b10 	vmov	d0, r0, r1
 800b6e4:	b005      	add	sp, #20
 800b6e6:	f85d fb04 	ldr.w	pc, [sp], #4
 800b6ea:	4668      	mov	r0, sp
 800b6ec:	f000 f834 	bl	800b758 <__ieee754_rem_pio2>
 800b6f0:	f000 0003 	and.w	r0, r0, #3
 800b6f4:	2801      	cmp	r0, #1
 800b6f6:	d008      	beq.n	800b70a <sin+0x5a>
 800b6f8:	2802      	cmp	r0, #2
 800b6fa:	d00d      	beq.n	800b718 <sin+0x68>
 800b6fc:	b9d0      	cbnz	r0, 800b734 <sin+0x84>
 800b6fe:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b702:	ed9d 0b00 	vldr	d0, [sp]
 800b706:	2001      	movs	r0, #1
 800b708:	e7dd      	b.n	800b6c6 <sin+0x16>
 800b70a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b70e:	ed9d 0b00 	vldr	d0, [sp]
 800b712:	f000 fa2d 	bl	800bb70 <__kernel_cos>
 800b716:	e7d8      	b.n	800b6ca <sin+0x1a>
 800b718:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b71c:	ed9d 0b00 	vldr	d0, [sp]
 800b720:	2001      	movs	r0, #1
 800b722:	f000 fe2d 	bl	800c380 <__kernel_sin>
 800b726:	ec53 2b10 	vmov	r2, r3, d0
 800b72a:	ee10 0a10 	vmov	r0, s0
 800b72e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800b732:	e7d5      	b.n	800b6e0 <sin+0x30>
 800b734:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b738:	ed9d 0b00 	vldr	d0, [sp]
 800b73c:	f000 fa18 	bl	800bb70 <__kernel_cos>
 800b740:	e7f1      	b.n	800b726 <sin+0x76>
 800b742:	bf00      	nop
 800b744:	f3af 8000 	nop.w
	...
 800b750:	3fe921fb 	.word	0x3fe921fb
 800b754:	7fefffff 	.word	0x7fefffff

0800b758 <__ieee754_rem_pio2>:
 800b758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b75c:	ed2d 8b02 	vpush	{d8}
 800b760:	ec55 4b10 	vmov	r4, r5, d0
 800b764:	4bca      	ldr	r3, [pc, #808]	; (800ba90 <__ieee754_rem_pio2+0x338>)
 800b766:	b08b      	sub	sp, #44	; 0x2c
 800b768:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800b76c:	4598      	cmp	r8, r3
 800b76e:	4682      	mov	sl, r0
 800b770:	9502      	str	r5, [sp, #8]
 800b772:	dc08      	bgt.n	800b786 <__ieee754_rem_pio2+0x2e>
 800b774:	2200      	movs	r2, #0
 800b776:	2300      	movs	r3, #0
 800b778:	ed80 0b00 	vstr	d0, [r0]
 800b77c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800b780:	f04f 0b00 	mov.w	fp, #0
 800b784:	e028      	b.n	800b7d8 <__ieee754_rem_pio2+0x80>
 800b786:	4bc3      	ldr	r3, [pc, #780]	; (800ba94 <__ieee754_rem_pio2+0x33c>)
 800b788:	4598      	cmp	r8, r3
 800b78a:	dc78      	bgt.n	800b87e <__ieee754_rem_pio2+0x126>
 800b78c:	9b02      	ldr	r3, [sp, #8]
 800b78e:	4ec2      	ldr	r6, [pc, #776]	; (800ba98 <__ieee754_rem_pio2+0x340>)
 800b790:	2b00      	cmp	r3, #0
 800b792:	ee10 0a10 	vmov	r0, s0
 800b796:	a3b0      	add	r3, pc, #704	; (adr r3, 800ba58 <__ieee754_rem_pio2+0x300>)
 800b798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b79c:	4629      	mov	r1, r5
 800b79e:	dd39      	ble.n	800b814 <__ieee754_rem_pio2+0xbc>
 800b7a0:	f7f4 fd2a 	bl	80001f8 <__aeabi_dsub>
 800b7a4:	45b0      	cmp	r8, r6
 800b7a6:	4604      	mov	r4, r0
 800b7a8:	460d      	mov	r5, r1
 800b7aa:	d01b      	beq.n	800b7e4 <__ieee754_rem_pio2+0x8c>
 800b7ac:	a3ac      	add	r3, pc, #688	; (adr r3, 800ba60 <__ieee754_rem_pio2+0x308>)
 800b7ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7b2:	f7f4 fd21 	bl	80001f8 <__aeabi_dsub>
 800b7b6:	4602      	mov	r2, r0
 800b7b8:	460b      	mov	r3, r1
 800b7ba:	e9ca 2300 	strd	r2, r3, [sl]
 800b7be:	4620      	mov	r0, r4
 800b7c0:	4629      	mov	r1, r5
 800b7c2:	f7f4 fd19 	bl	80001f8 <__aeabi_dsub>
 800b7c6:	a3a6      	add	r3, pc, #664	; (adr r3, 800ba60 <__ieee754_rem_pio2+0x308>)
 800b7c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7cc:	f7f4 fd14 	bl	80001f8 <__aeabi_dsub>
 800b7d0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b7d4:	f04f 0b01 	mov.w	fp, #1
 800b7d8:	4658      	mov	r0, fp
 800b7da:	b00b      	add	sp, #44	; 0x2c
 800b7dc:	ecbd 8b02 	vpop	{d8}
 800b7e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7e4:	a3a0      	add	r3, pc, #640	; (adr r3, 800ba68 <__ieee754_rem_pio2+0x310>)
 800b7e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7ea:	f7f4 fd05 	bl	80001f8 <__aeabi_dsub>
 800b7ee:	a3a0      	add	r3, pc, #640	; (adr r3, 800ba70 <__ieee754_rem_pio2+0x318>)
 800b7f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7f4:	4604      	mov	r4, r0
 800b7f6:	460d      	mov	r5, r1
 800b7f8:	f7f4 fcfe 	bl	80001f8 <__aeabi_dsub>
 800b7fc:	4602      	mov	r2, r0
 800b7fe:	460b      	mov	r3, r1
 800b800:	e9ca 2300 	strd	r2, r3, [sl]
 800b804:	4620      	mov	r0, r4
 800b806:	4629      	mov	r1, r5
 800b808:	f7f4 fcf6 	bl	80001f8 <__aeabi_dsub>
 800b80c:	a398      	add	r3, pc, #608	; (adr r3, 800ba70 <__ieee754_rem_pio2+0x318>)
 800b80e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b812:	e7db      	b.n	800b7cc <__ieee754_rem_pio2+0x74>
 800b814:	f7f4 fcf2 	bl	80001fc <__adddf3>
 800b818:	45b0      	cmp	r8, r6
 800b81a:	4604      	mov	r4, r0
 800b81c:	460d      	mov	r5, r1
 800b81e:	d016      	beq.n	800b84e <__ieee754_rem_pio2+0xf6>
 800b820:	a38f      	add	r3, pc, #572	; (adr r3, 800ba60 <__ieee754_rem_pio2+0x308>)
 800b822:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b826:	f7f4 fce9 	bl	80001fc <__adddf3>
 800b82a:	4602      	mov	r2, r0
 800b82c:	460b      	mov	r3, r1
 800b82e:	e9ca 2300 	strd	r2, r3, [sl]
 800b832:	4620      	mov	r0, r4
 800b834:	4629      	mov	r1, r5
 800b836:	f7f4 fcdf 	bl	80001f8 <__aeabi_dsub>
 800b83a:	a389      	add	r3, pc, #548	; (adr r3, 800ba60 <__ieee754_rem_pio2+0x308>)
 800b83c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b840:	f7f4 fcdc 	bl	80001fc <__adddf3>
 800b844:	f04f 3bff 	mov.w	fp, #4294967295
 800b848:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b84c:	e7c4      	b.n	800b7d8 <__ieee754_rem_pio2+0x80>
 800b84e:	a386      	add	r3, pc, #536	; (adr r3, 800ba68 <__ieee754_rem_pio2+0x310>)
 800b850:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b854:	f7f4 fcd2 	bl	80001fc <__adddf3>
 800b858:	a385      	add	r3, pc, #532	; (adr r3, 800ba70 <__ieee754_rem_pio2+0x318>)
 800b85a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b85e:	4604      	mov	r4, r0
 800b860:	460d      	mov	r5, r1
 800b862:	f7f4 fccb 	bl	80001fc <__adddf3>
 800b866:	4602      	mov	r2, r0
 800b868:	460b      	mov	r3, r1
 800b86a:	e9ca 2300 	strd	r2, r3, [sl]
 800b86e:	4620      	mov	r0, r4
 800b870:	4629      	mov	r1, r5
 800b872:	f7f4 fcc1 	bl	80001f8 <__aeabi_dsub>
 800b876:	a37e      	add	r3, pc, #504	; (adr r3, 800ba70 <__ieee754_rem_pio2+0x318>)
 800b878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b87c:	e7e0      	b.n	800b840 <__ieee754_rem_pio2+0xe8>
 800b87e:	4b87      	ldr	r3, [pc, #540]	; (800ba9c <__ieee754_rem_pio2+0x344>)
 800b880:	4598      	cmp	r8, r3
 800b882:	f300 80d9 	bgt.w	800ba38 <__ieee754_rem_pio2+0x2e0>
 800b886:	f000 fe39 	bl	800c4fc <fabs>
 800b88a:	ec55 4b10 	vmov	r4, r5, d0
 800b88e:	ee10 0a10 	vmov	r0, s0
 800b892:	a379      	add	r3, pc, #484	; (adr r3, 800ba78 <__ieee754_rem_pio2+0x320>)
 800b894:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b898:	4629      	mov	r1, r5
 800b89a:	f7f4 fe65 	bl	8000568 <__aeabi_dmul>
 800b89e:	4b80      	ldr	r3, [pc, #512]	; (800baa0 <__ieee754_rem_pio2+0x348>)
 800b8a0:	2200      	movs	r2, #0
 800b8a2:	f7f4 fcab 	bl	80001fc <__adddf3>
 800b8a6:	f7f5 f8f9 	bl	8000a9c <__aeabi_d2iz>
 800b8aa:	4683      	mov	fp, r0
 800b8ac:	f7f4 fdf2 	bl	8000494 <__aeabi_i2d>
 800b8b0:	4602      	mov	r2, r0
 800b8b2:	460b      	mov	r3, r1
 800b8b4:	ec43 2b18 	vmov	d8, r2, r3
 800b8b8:	a367      	add	r3, pc, #412	; (adr r3, 800ba58 <__ieee754_rem_pio2+0x300>)
 800b8ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8be:	f7f4 fe53 	bl	8000568 <__aeabi_dmul>
 800b8c2:	4602      	mov	r2, r0
 800b8c4:	460b      	mov	r3, r1
 800b8c6:	4620      	mov	r0, r4
 800b8c8:	4629      	mov	r1, r5
 800b8ca:	f7f4 fc95 	bl	80001f8 <__aeabi_dsub>
 800b8ce:	a364      	add	r3, pc, #400	; (adr r3, 800ba60 <__ieee754_rem_pio2+0x308>)
 800b8d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8d4:	4606      	mov	r6, r0
 800b8d6:	460f      	mov	r7, r1
 800b8d8:	ec51 0b18 	vmov	r0, r1, d8
 800b8dc:	f7f4 fe44 	bl	8000568 <__aeabi_dmul>
 800b8e0:	f1bb 0f1f 	cmp.w	fp, #31
 800b8e4:	4604      	mov	r4, r0
 800b8e6:	460d      	mov	r5, r1
 800b8e8:	dc0d      	bgt.n	800b906 <__ieee754_rem_pio2+0x1ae>
 800b8ea:	4b6e      	ldr	r3, [pc, #440]	; (800baa4 <__ieee754_rem_pio2+0x34c>)
 800b8ec:	f10b 32ff 	add.w	r2, fp, #4294967295
 800b8f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8f4:	4543      	cmp	r3, r8
 800b8f6:	d006      	beq.n	800b906 <__ieee754_rem_pio2+0x1ae>
 800b8f8:	4622      	mov	r2, r4
 800b8fa:	462b      	mov	r3, r5
 800b8fc:	4630      	mov	r0, r6
 800b8fe:	4639      	mov	r1, r7
 800b900:	f7f4 fc7a 	bl	80001f8 <__aeabi_dsub>
 800b904:	e00f      	b.n	800b926 <__ieee754_rem_pio2+0x1ce>
 800b906:	462b      	mov	r3, r5
 800b908:	4622      	mov	r2, r4
 800b90a:	4630      	mov	r0, r6
 800b90c:	4639      	mov	r1, r7
 800b90e:	f7f4 fc73 	bl	80001f8 <__aeabi_dsub>
 800b912:	ea4f 5328 	mov.w	r3, r8, asr #20
 800b916:	9303      	str	r3, [sp, #12]
 800b918:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b91c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800b920:	f1b8 0f10 	cmp.w	r8, #16
 800b924:	dc02      	bgt.n	800b92c <__ieee754_rem_pio2+0x1d4>
 800b926:	e9ca 0100 	strd	r0, r1, [sl]
 800b92a:	e039      	b.n	800b9a0 <__ieee754_rem_pio2+0x248>
 800b92c:	a34e      	add	r3, pc, #312	; (adr r3, 800ba68 <__ieee754_rem_pio2+0x310>)
 800b92e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b932:	ec51 0b18 	vmov	r0, r1, d8
 800b936:	f7f4 fe17 	bl	8000568 <__aeabi_dmul>
 800b93a:	4604      	mov	r4, r0
 800b93c:	460d      	mov	r5, r1
 800b93e:	4602      	mov	r2, r0
 800b940:	460b      	mov	r3, r1
 800b942:	4630      	mov	r0, r6
 800b944:	4639      	mov	r1, r7
 800b946:	f7f4 fc57 	bl	80001f8 <__aeabi_dsub>
 800b94a:	4602      	mov	r2, r0
 800b94c:	460b      	mov	r3, r1
 800b94e:	4680      	mov	r8, r0
 800b950:	4689      	mov	r9, r1
 800b952:	4630      	mov	r0, r6
 800b954:	4639      	mov	r1, r7
 800b956:	f7f4 fc4f 	bl	80001f8 <__aeabi_dsub>
 800b95a:	4622      	mov	r2, r4
 800b95c:	462b      	mov	r3, r5
 800b95e:	f7f4 fc4b 	bl	80001f8 <__aeabi_dsub>
 800b962:	a343      	add	r3, pc, #268	; (adr r3, 800ba70 <__ieee754_rem_pio2+0x318>)
 800b964:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b968:	4604      	mov	r4, r0
 800b96a:	460d      	mov	r5, r1
 800b96c:	ec51 0b18 	vmov	r0, r1, d8
 800b970:	f7f4 fdfa 	bl	8000568 <__aeabi_dmul>
 800b974:	4622      	mov	r2, r4
 800b976:	462b      	mov	r3, r5
 800b978:	f7f4 fc3e 	bl	80001f8 <__aeabi_dsub>
 800b97c:	4602      	mov	r2, r0
 800b97e:	460b      	mov	r3, r1
 800b980:	4604      	mov	r4, r0
 800b982:	460d      	mov	r5, r1
 800b984:	4640      	mov	r0, r8
 800b986:	4649      	mov	r1, r9
 800b988:	f7f4 fc36 	bl	80001f8 <__aeabi_dsub>
 800b98c:	9a03      	ldr	r2, [sp, #12]
 800b98e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b992:	1ad3      	subs	r3, r2, r3
 800b994:	2b31      	cmp	r3, #49	; 0x31
 800b996:	dc24      	bgt.n	800b9e2 <__ieee754_rem_pio2+0x28a>
 800b998:	e9ca 0100 	strd	r0, r1, [sl]
 800b99c:	4646      	mov	r6, r8
 800b99e:	464f      	mov	r7, r9
 800b9a0:	e9da 8900 	ldrd	r8, r9, [sl]
 800b9a4:	4630      	mov	r0, r6
 800b9a6:	4642      	mov	r2, r8
 800b9a8:	464b      	mov	r3, r9
 800b9aa:	4639      	mov	r1, r7
 800b9ac:	f7f4 fc24 	bl	80001f8 <__aeabi_dsub>
 800b9b0:	462b      	mov	r3, r5
 800b9b2:	4622      	mov	r2, r4
 800b9b4:	f7f4 fc20 	bl	80001f8 <__aeabi_dsub>
 800b9b8:	9b02      	ldr	r3, [sp, #8]
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b9c0:	f6bf af0a 	bge.w	800b7d8 <__ieee754_rem_pio2+0x80>
 800b9c4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800b9c8:	f8ca 3004 	str.w	r3, [sl, #4]
 800b9cc:	f8ca 8000 	str.w	r8, [sl]
 800b9d0:	f8ca 0008 	str.w	r0, [sl, #8]
 800b9d4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b9d8:	f8ca 300c 	str.w	r3, [sl, #12]
 800b9dc:	f1cb 0b00 	rsb	fp, fp, #0
 800b9e0:	e6fa      	b.n	800b7d8 <__ieee754_rem_pio2+0x80>
 800b9e2:	a327      	add	r3, pc, #156	; (adr r3, 800ba80 <__ieee754_rem_pio2+0x328>)
 800b9e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9e8:	ec51 0b18 	vmov	r0, r1, d8
 800b9ec:	f7f4 fdbc 	bl	8000568 <__aeabi_dmul>
 800b9f0:	4604      	mov	r4, r0
 800b9f2:	460d      	mov	r5, r1
 800b9f4:	4602      	mov	r2, r0
 800b9f6:	460b      	mov	r3, r1
 800b9f8:	4640      	mov	r0, r8
 800b9fa:	4649      	mov	r1, r9
 800b9fc:	f7f4 fbfc 	bl	80001f8 <__aeabi_dsub>
 800ba00:	4602      	mov	r2, r0
 800ba02:	460b      	mov	r3, r1
 800ba04:	4606      	mov	r6, r0
 800ba06:	460f      	mov	r7, r1
 800ba08:	4640      	mov	r0, r8
 800ba0a:	4649      	mov	r1, r9
 800ba0c:	f7f4 fbf4 	bl	80001f8 <__aeabi_dsub>
 800ba10:	4622      	mov	r2, r4
 800ba12:	462b      	mov	r3, r5
 800ba14:	f7f4 fbf0 	bl	80001f8 <__aeabi_dsub>
 800ba18:	a31b      	add	r3, pc, #108	; (adr r3, 800ba88 <__ieee754_rem_pio2+0x330>)
 800ba1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba1e:	4604      	mov	r4, r0
 800ba20:	460d      	mov	r5, r1
 800ba22:	ec51 0b18 	vmov	r0, r1, d8
 800ba26:	f7f4 fd9f 	bl	8000568 <__aeabi_dmul>
 800ba2a:	4622      	mov	r2, r4
 800ba2c:	462b      	mov	r3, r5
 800ba2e:	f7f4 fbe3 	bl	80001f8 <__aeabi_dsub>
 800ba32:	4604      	mov	r4, r0
 800ba34:	460d      	mov	r5, r1
 800ba36:	e75f      	b.n	800b8f8 <__ieee754_rem_pio2+0x1a0>
 800ba38:	4b1b      	ldr	r3, [pc, #108]	; (800baa8 <__ieee754_rem_pio2+0x350>)
 800ba3a:	4598      	cmp	r8, r3
 800ba3c:	dd36      	ble.n	800baac <__ieee754_rem_pio2+0x354>
 800ba3e:	ee10 2a10 	vmov	r2, s0
 800ba42:	462b      	mov	r3, r5
 800ba44:	4620      	mov	r0, r4
 800ba46:	4629      	mov	r1, r5
 800ba48:	f7f4 fbd6 	bl	80001f8 <__aeabi_dsub>
 800ba4c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ba50:	e9ca 0100 	strd	r0, r1, [sl]
 800ba54:	e694      	b.n	800b780 <__ieee754_rem_pio2+0x28>
 800ba56:	bf00      	nop
 800ba58:	54400000 	.word	0x54400000
 800ba5c:	3ff921fb 	.word	0x3ff921fb
 800ba60:	1a626331 	.word	0x1a626331
 800ba64:	3dd0b461 	.word	0x3dd0b461
 800ba68:	1a600000 	.word	0x1a600000
 800ba6c:	3dd0b461 	.word	0x3dd0b461
 800ba70:	2e037073 	.word	0x2e037073
 800ba74:	3ba3198a 	.word	0x3ba3198a
 800ba78:	6dc9c883 	.word	0x6dc9c883
 800ba7c:	3fe45f30 	.word	0x3fe45f30
 800ba80:	2e000000 	.word	0x2e000000
 800ba84:	3ba3198a 	.word	0x3ba3198a
 800ba88:	252049c1 	.word	0x252049c1
 800ba8c:	397b839a 	.word	0x397b839a
 800ba90:	3fe921fb 	.word	0x3fe921fb
 800ba94:	4002d97b 	.word	0x4002d97b
 800ba98:	3ff921fb 	.word	0x3ff921fb
 800ba9c:	413921fb 	.word	0x413921fb
 800baa0:	3fe00000 	.word	0x3fe00000
 800baa4:	0800c838 	.word	0x0800c838
 800baa8:	7fefffff 	.word	0x7fefffff
 800baac:	ea4f 5428 	mov.w	r4, r8, asr #20
 800bab0:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800bab4:	ee10 0a10 	vmov	r0, s0
 800bab8:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800babc:	ee10 6a10 	vmov	r6, s0
 800bac0:	460f      	mov	r7, r1
 800bac2:	f7f4 ffeb 	bl	8000a9c <__aeabi_d2iz>
 800bac6:	f7f4 fce5 	bl	8000494 <__aeabi_i2d>
 800baca:	4602      	mov	r2, r0
 800bacc:	460b      	mov	r3, r1
 800bace:	4630      	mov	r0, r6
 800bad0:	4639      	mov	r1, r7
 800bad2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800bad6:	f7f4 fb8f 	bl	80001f8 <__aeabi_dsub>
 800bada:	4b22      	ldr	r3, [pc, #136]	; (800bb64 <__ieee754_rem_pio2+0x40c>)
 800badc:	2200      	movs	r2, #0
 800bade:	f7f4 fd43 	bl	8000568 <__aeabi_dmul>
 800bae2:	460f      	mov	r7, r1
 800bae4:	4606      	mov	r6, r0
 800bae6:	f7f4 ffd9 	bl	8000a9c <__aeabi_d2iz>
 800baea:	f7f4 fcd3 	bl	8000494 <__aeabi_i2d>
 800baee:	4602      	mov	r2, r0
 800baf0:	460b      	mov	r3, r1
 800baf2:	4630      	mov	r0, r6
 800baf4:	4639      	mov	r1, r7
 800baf6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800bafa:	f7f4 fb7d 	bl	80001f8 <__aeabi_dsub>
 800bafe:	4b19      	ldr	r3, [pc, #100]	; (800bb64 <__ieee754_rem_pio2+0x40c>)
 800bb00:	2200      	movs	r2, #0
 800bb02:	f7f4 fd31 	bl	8000568 <__aeabi_dmul>
 800bb06:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800bb0a:	ad04      	add	r5, sp, #16
 800bb0c:	f04f 0803 	mov.w	r8, #3
 800bb10:	46a9      	mov	r9, r5
 800bb12:	2600      	movs	r6, #0
 800bb14:	2700      	movs	r7, #0
 800bb16:	4632      	mov	r2, r6
 800bb18:	463b      	mov	r3, r7
 800bb1a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800bb1e:	46c3      	mov	fp, r8
 800bb20:	3d08      	subs	r5, #8
 800bb22:	f108 38ff 	add.w	r8, r8, #4294967295
 800bb26:	f7f4 ff87 	bl	8000a38 <__aeabi_dcmpeq>
 800bb2a:	2800      	cmp	r0, #0
 800bb2c:	d1f3      	bne.n	800bb16 <__ieee754_rem_pio2+0x3be>
 800bb2e:	4b0e      	ldr	r3, [pc, #56]	; (800bb68 <__ieee754_rem_pio2+0x410>)
 800bb30:	9301      	str	r3, [sp, #4]
 800bb32:	2302      	movs	r3, #2
 800bb34:	9300      	str	r3, [sp, #0]
 800bb36:	4622      	mov	r2, r4
 800bb38:	465b      	mov	r3, fp
 800bb3a:	4651      	mov	r1, sl
 800bb3c:	4648      	mov	r0, r9
 800bb3e:	f000 f8df 	bl	800bd00 <__kernel_rem_pio2>
 800bb42:	9b02      	ldr	r3, [sp, #8]
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	4683      	mov	fp, r0
 800bb48:	f6bf ae46 	bge.w	800b7d8 <__ieee754_rem_pio2+0x80>
 800bb4c:	f8da 3004 	ldr.w	r3, [sl, #4]
 800bb50:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800bb54:	f8ca 3004 	str.w	r3, [sl, #4]
 800bb58:	f8da 300c 	ldr.w	r3, [sl, #12]
 800bb5c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800bb60:	e73a      	b.n	800b9d8 <__ieee754_rem_pio2+0x280>
 800bb62:	bf00      	nop
 800bb64:	41700000 	.word	0x41700000
 800bb68:	0800c8b8 	.word	0x0800c8b8
 800bb6c:	00000000 	.word	0x00000000

0800bb70 <__kernel_cos>:
 800bb70:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb74:	ec57 6b10 	vmov	r6, r7, d0
 800bb78:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800bb7c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800bb80:	ed8d 1b00 	vstr	d1, [sp]
 800bb84:	da07      	bge.n	800bb96 <__kernel_cos+0x26>
 800bb86:	ee10 0a10 	vmov	r0, s0
 800bb8a:	4639      	mov	r1, r7
 800bb8c:	f7f4 ff86 	bl	8000a9c <__aeabi_d2iz>
 800bb90:	2800      	cmp	r0, #0
 800bb92:	f000 8088 	beq.w	800bca6 <__kernel_cos+0x136>
 800bb96:	4632      	mov	r2, r6
 800bb98:	463b      	mov	r3, r7
 800bb9a:	4630      	mov	r0, r6
 800bb9c:	4639      	mov	r1, r7
 800bb9e:	f7f4 fce3 	bl	8000568 <__aeabi_dmul>
 800bba2:	4b51      	ldr	r3, [pc, #324]	; (800bce8 <__kernel_cos+0x178>)
 800bba4:	2200      	movs	r2, #0
 800bba6:	4604      	mov	r4, r0
 800bba8:	460d      	mov	r5, r1
 800bbaa:	f7f4 fcdd 	bl	8000568 <__aeabi_dmul>
 800bbae:	a340      	add	r3, pc, #256	; (adr r3, 800bcb0 <__kernel_cos+0x140>)
 800bbb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbb4:	4682      	mov	sl, r0
 800bbb6:	468b      	mov	fp, r1
 800bbb8:	4620      	mov	r0, r4
 800bbba:	4629      	mov	r1, r5
 800bbbc:	f7f4 fcd4 	bl	8000568 <__aeabi_dmul>
 800bbc0:	a33d      	add	r3, pc, #244	; (adr r3, 800bcb8 <__kernel_cos+0x148>)
 800bbc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbc6:	f7f4 fb19 	bl	80001fc <__adddf3>
 800bbca:	4622      	mov	r2, r4
 800bbcc:	462b      	mov	r3, r5
 800bbce:	f7f4 fccb 	bl	8000568 <__aeabi_dmul>
 800bbd2:	a33b      	add	r3, pc, #236	; (adr r3, 800bcc0 <__kernel_cos+0x150>)
 800bbd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbd8:	f7f4 fb0e 	bl	80001f8 <__aeabi_dsub>
 800bbdc:	4622      	mov	r2, r4
 800bbde:	462b      	mov	r3, r5
 800bbe0:	f7f4 fcc2 	bl	8000568 <__aeabi_dmul>
 800bbe4:	a338      	add	r3, pc, #224	; (adr r3, 800bcc8 <__kernel_cos+0x158>)
 800bbe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbea:	f7f4 fb07 	bl	80001fc <__adddf3>
 800bbee:	4622      	mov	r2, r4
 800bbf0:	462b      	mov	r3, r5
 800bbf2:	f7f4 fcb9 	bl	8000568 <__aeabi_dmul>
 800bbf6:	a336      	add	r3, pc, #216	; (adr r3, 800bcd0 <__kernel_cos+0x160>)
 800bbf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbfc:	f7f4 fafc 	bl	80001f8 <__aeabi_dsub>
 800bc00:	4622      	mov	r2, r4
 800bc02:	462b      	mov	r3, r5
 800bc04:	f7f4 fcb0 	bl	8000568 <__aeabi_dmul>
 800bc08:	a333      	add	r3, pc, #204	; (adr r3, 800bcd8 <__kernel_cos+0x168>)
 800bc0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc0e:	f7f4 faf5 	bl	80001fc <__adddf3>
 800bc12:	4622      	mov	r2, r4
 800bc14:	462b      	mov	r3, r5
 800bc16:	f7f4 fca7 	bl	8000568 <__aeabi_dmul>
 800bc1a:	4622      	mov	r2, r4
 800bc1c:	462b      	mov	r3, r5
 800bc1e:	f7f4 fca3 	bl	8000568 <__aeabi_dmul>
 800bc22:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bc26:	4604      	mov	r4, r0
 800bc28:	460d      	mov	r5, r1
 800bc2a:	4630      	mov	r0, r6
 800bc2c:	4639      	mov	r1, r7
 800bc2e:	f7f4 fc9b 	bl	8000568 <__aeabi_dmul>
 800bc32:	460b      	mov	r3, r1
 800bc34:	4602      	mov	r2, r0
 800bc36:	4629      	mov	r1, r5
 800bc38:	4620      	mov	r0, r4
 800bc3a:	f7f4 fadd 	bl	80001f8 <__aeabi_dsub>
 800bc3e:	4b2b      	ldr	r3, [pc, #172]	; (800bcec <__kernel_cos+0x17c>)
 800bc40:	4598      	cmp	r8, r3
 800bc42:	4606      	mov	r6, r0
 800bc44:	460f      	mov	r7, r1
 800bc46:	dc10      	bgt.n	800bc6a <__kernel_cos+0xfa>
 800bc48:	4602      	mov	r2, r0
 800bc4a:	460b      	mov	r3, r1
 800bc4c:	4650      	mov	r0, sl
 800bc4e:	4659      	mov	r1, fp
 800bc50:	f7f4 fad2 	bl	80001f8 <__aeabi_dsub>
 800bc54:	460b      	mov	r3, r1
 800bc56:	4926      	ldr	r1, [pc, #152]	; (800bcf0 <__kernel_cos+0x180>)
 800bc58:	4602      	mov	r2, r0
 800bc5a:	2000      	movs	r0, #0
 800bc5c:	f7f4 facc 	bl	80001f8 <__aeabi_dsub>
 800bc60:	ec41 0b10 	vmov	d0, r0, r1
 800bc64:	b003      	add	sp, #12
 800bc66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc6a:	4b22      	ldr	r3, [pc, #136]	; (800bcf4 <__kernel_cos+0x184>)
 800bc6c:	4920      	ldr	r1, [pc, #128]	; (800bcf0 <__kernel_cos+0x180>)
 800bc6e:	4598      	cmp	r8, r3
 800bc70:	bfcc      	ite	gt
 800bc72:	4d21      	ldrgt	r5, [pc, #132]	; (800bcf8 <__kernel_cos+0x188>)
 800bc74:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800bc78:	2400      	movs	r4, #0
 800bc7a:	4622      	mov	r2, r4
 800bc7c:	462b      	mov	r3, r5
 800bc7e:	2000      	movs	r0, #0
 800bc80:	f7f4 faba 	bl	80001f8 <__aeabi_dsub>
 800bc84:	4622      	mov	r2, r4
 800bc86:	4680      	mov	r8, r0
 800bc88:	4689      	mov	r9, r1
 800bc8a:	462b      	mov	r3, r5
 800bc8c:	4650      	mov	r0, sl
 800bc8e:	4659      	mov	r1, fp
 800bc90:	f7f4 fab2 	bl	80001f8 <__aeabi_dsub>
 800bc94:	4632      	mov	r2, r6
 800bc96:	463b      	mov	r3, r7
 800bc98:	f7f4 faae 	bl	80001f8 <__aeabi_dsub>
 800bc9c:	4602      	mov	r2, r0
 800bc9e:	460b      	mov	r3, r1
 800bca0:	4640      	mov	r0, r8
 800bca2:	4649      	mov	r1, r9
 800bca4:	e7da      	b.n	800bc5c <__kernel_cos+0xec>
 800bca6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800bce0 <__kernel_cos+0x170>
 800bcaa:	e7db      	b.n	800bc64 <__kernel_cos+0xf4>
 800bcac:	f3af 8000 	nop.w
 800bcb0:	be8838d4 	.word	0xbe8838d4
 800bcb4:	bda8fae9 	.word	0xbda8fae9
 800bcb8:	bdb4b1c4 	.word	0xbdb4b1c4
 800bcbc:	3e21ee9e 	.word	0x3e21ee9e
 800bcc0:	809c52ad 	.word	0x809c52ad
 800bcc4:	3e927e4f 	.word	0x3e927e4f
 800bcc8:	19cb1590 	.word	0x19cb1590
 800bccc:	3efa01a0 	.word	0x3efa01a0
 800bcd0:	16c15177 	.word	0x16c15177
 800bcd4:	3f56c16c 	.word	0x3f56c16c
 800bcd8:	5555554c 	.word	0x5555554c
 800bcdc:	3fa55555 	.word	0x3fa55555
 800bce0:	00000000 	.word	0x00000000
 800bce4:	3ff00000 	.word	0x3ff00000
 800bce8:	3fe00000 	.word	0x3fe00000
 800bcec:	3fd33332 	.word	0x3fd33332
 800bcf0:	3ff00000 	.word	0x3ff00000
 800bcf4:	3fe90000 	.word	0x3fe90000
 800bcf8:	3fd20000 	.word	0x3fd20000
 800bcfc:	00000000 	.word	0x00000000

0800bd00 <__kernel_rem_pio2>:
 800bd00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd04:	ed2d 8b02 	vpush	{d8}
 800bd08:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800bd0c:	f112 0f14 	cmn.w	r2, #20
 800bd10:	9308      	str	r3, [sp, #32]
 800bd12:	9101      	str	r1, [sp, #4]
 800bd14:	4bc6      	ldr	r3, [pc, #792]	; (800c030 <__kernel_rem_pio2+0x330>)
 800bd16:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800bd18:	9009      	str	r0, [sp, #36]	; 0x24
 800bd1a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800bd1e:	9304      	str	r3, [sp, #16]
 800bd20:	9b08      	ldr	r3, [sp, #32]
 800bd22:	f103 33ff 	add.w	r3, r3, #4294967295
 800bd26:	bfa8      	it	ge
 800bd28:	1ed4      	subge	r4, r2, #3
 800bd2a:	9306      	str	r3, [sp, #24]
 800bd2c:	bfb2      	itee	lt
 800bd2e:	2400      	movlt	r4, #0
 800bd30:	2318      	movge	r3, #24
 800bd32:	fb94 f4f3 	sdivge	r4, r4, r3
 800bd36:	f06f 0317 	mvn.w	r3, #23
 800bd3a:	fb04 3303 	mla	r3, r4, r3, r3
 800bd3e:	eb03 0a02 	add.w	sl, r3, r2
 800bd42:	9b04      	ldr	r3, [sp, #16]
 800bd44:	9a06      	ldr	r2, [sp, #24]
 800bd46:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800c020 <__kernel_rem_pio2+0x320>
 800bd4a:	eb03 0802 	add.w	r8, r3, r2
 800bd4e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800bd50:	1aa7      	subs	r7, r4, r2
 800bd52:	ae20      	add	r6, sp, #128	; 0x80
 800bd54:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800bd58:	2500      	movs	r5, #0
 800bd5a:	4545      	cmp	r5, r8
 800bd5c:	dd18      	ble.n	800bd90 <__kernel_rem_pio2+0x90>
 800bd5e:	9b08      	ldr	r3, [sp, #32]
 800bd60:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800bd64:	aa20      	add	r2, sp, #128	; 0x80
 800bd66:	ed9f 8bae 	vldr	d8, [pc, #696]	; 800c020 <__kernel_rem_pio2+0x320>
 800bd6a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800bd6e:	f1c3 0301 	rsb	r3, r3, #1
 800bd72:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800bd76:	9307      	str	r3, [sp, #28]
 800bd78:	9b07      	ldr	r3, [sp, #28]
 800bd7a:	9a04      	ldr	r2, [sp, #16]
 800bd7c:	4443      	add	r3, r8
 800bd7e:	429a      	cmp	r2, r3
 800bd80:	db2f      	blt.n	800bde2 <__kernel_rem_pio2+0xe2>
 800bd82:	ed8d 8b02 	vstr	d8, [sp, #8]
 800bd86:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800bd8a:	462f      	mov	r7, r5
 800bd8c:	2600      	movs	r6, #0
 800bd8e:	e01b      	b.n	800bdc8 <__kernel_rem_pio2+0xc8>
 800bd90:	42ef      	cmn	r7, r5
 800bd92:	d407      	bmi.n	800bda4 <__kernel_rem_pio2+0xa4>
 800bd94:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800bd98:	f7f4 fb7c 	bl	8000494 <__aeabi_i2d>
 800bd9c:	e8e6 0102 	strd	r0, r1, [r6], #8
 800bda0:	3501      	adds	r5, #1
 800bda2:	e7da      	b.n	800bd5a <__kernel_rem_pio2+0x5a>
 800bda4:	ec51 0b18 	vmov	r0, r1, d8
 800bda8:	e7f8      	b.n	800bd9c <__kernel_rem_pio2+0x9c>
 800bdaa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bdae:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800bdb2:	f7f4 fbd9 	bl	8000568 <__aeabi_dmul>
 800bdb6:	4602      	mov	r2, r0
 800bdb8:	460b      	mov	r3, r1
 800bdba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bdbe:	f7f4 fa1d 	bl	80001fc <__adddf3>
 800bdc2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bdc6:	3601      	adds	r6, #1
 800bdc8:	9b06      	ldr	r3, [sp, #24]
 800bdca:	429e      	cmp	r6, r3
 800bdcc:	f1a7 0708 	sub.w	r7, r7, #8
 800bdd0:	ddeb      	ble.n	800bdaa <__kernel_rem_pio2+0xaa>
 800bdd2:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bdd6:	3508      	adds	r5, #8
 800bdd8:	ecab 7b02 	vstmia	fp!, {d7}
 800bddc:	f108 0801 	add.w	r8, r8, #1
 800bde0:	e7ca      	b.n	800bd78 <__kernel_rem_pio2+0x78>
 800bde2:	9b04      	ldr	r3, [sp, #16]
 800bde4:	aa0c      	add	r2, sp, #48	; 0x30
 800bde6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bdea:	930b      	str	r3, [sp, #44]	; 0x2c
 800bdec:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800bdee:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800bdf2:	9c04      	ldr	r4, [sp, #16]
 800bdf4:	930a      	str	r3, [sp, #40]	; 0x28
 800bdf6:	ab98      	add	r3, sp, #608	; 0x260
 800bdf8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bdfc:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800be00:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 800be04:	f8cd b008 	str.w	fp, [sp, #8]
 800be08:	4625      	mov	r5, r4
 800be0a:	2d00      	cmp	r5, #0
 800be0c:	dc78      	bgt.n	800bf00 <__kernel_rem_pio2+0x200>
 800be0e:	ec47 6b10 	vmov	d0, r6, r7
 800be12:	4650      	mov	r0, sl
 800be14:	f000 fbfc 	bl	800c610 <scalbn>
 800be18:	ec57 6b10 	vmov	r6, r7, d0
 800be1c:	2200      	movs	r2, #0
 800be1e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800be22:	ee10 0a10 	vmov	r0, s0
 800be26:	4639      	mov	r1, r7
 800be28:	f7f4 fb9e 	bl	8000568 <__aeabi_dmul>
 800be2c:	ec41 0b10 	vmov	d0, r0, r1
 800be30:	f000 fb6e 	bl	800c510 <floor>
 800be34:	4b7f      	ldr	r3, [pc, #508]	; (800c034 <__kernel_rem_pio2+0x334>)
 800be36:	ec51 0b10 	vmov	r0, r1, d0
 800be3a:	2200      	movs	r2, #0
 800be3c:	f7f4 fb94 	bl	8000568 <__aeabi_dmul>
 800be40:	4602      	mov	r2, r0
 800be42:	460b      	mov	r3, r1
 800be44:	4630      	mov	r0, r6
 800be46:	4639      	mov	r1, r7
 800be48:	f7f4 f9d6 	bl	80001f8 <__aeabi_dsub>
 800be4c:	460f      	mov	r7, r1
 800be4e:	4606      	mov	r6, r0
 800be50:	f7f4 fe24 	bl	8000a9c <__aeabi_d2iz>
 800be54:	9007      	str	r0, [sp, #28]
 800be56:	f7f4 fb1d 	bl	8000494 <__aeabi_i2d>
 800be5a:	4602      	mov	r2, r0
 800be5c:	460b      	mov	r3, r1
 800be5e:	4630      	mov	r0, r6
 800be60:	4639      	mov	r1, r7
 800be62:	f7f4 f9c9 	bl	80001f8 <__aeabi_dsub>
 800be66:	f1ba 0f00 	cmp.w	sl, #0
 800be6a:	4606      	mov	r6, r0
 800be6c:	460f      	mov	r7, r1
 800be6e:	dd70      	ble.n	800bf52 <__kernel_rem_pio2+0x252>
 800be70:	1e62      	subs	r2, r4, #1
 800be72:	ab0c      	add	r3, sp, #48	; 0x30
 800be74:	9d07      	ldr	r5, [sp, #28]
 800be76:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800be7a:	f1ca 0118 	rsb	r1, sl, #24
 800be7e:	fa40 f301 	asr.w	r3, r0, r1
 800be82:	441d      	add	r5, r3
 800be84:	408b      	lsls	r3, r1
 800be86:	1ac0      	subs	r0, r0, r3
 800be88:	ab0c      	add	r3, sp, #48	; 0x30
 800be8a:	9507      	str	r5, [sp, #28]
 800be8c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800be90:	f1ca 0317 	rsb	r3, sl, #23
 800be94:	fa40 f303 	asr.w	r3, r0, r3
 800be98:	9302      	str	r3, [sp, #8]
 800be9a:	9b02      	ldr	r3, [sp, #8]
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	dd66      	ble.n	800bf6e <__kernel_rem_pio2+0x26e>
 800bea0:	9b07      	ldr	r3, [sp, #28]
 800bea2:	2200      	movs	r2, #0
 800bea4:	3301      	adds	r3, #1
 800bea6:	9307      	str	r3, [sp, #28]
 800bea8:	4615      	mov	r5, r2
 800beaa:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800beae:	4294      	cmp	r4, r2
 800beb0:	f300 8099 	bgt.w	800bfe6 <__kernel_rem_pio2+0x2e6>
 800beb4:	f1ba 0f00 	cmp.w	sl, #0
 800beb8:	dd07      	ble.n	800beca <__kernel_rem_pio2+0x1ca>
 800beba:	f1ba 0f01 	cmp.w	sl, #1
 800bebe:	f000 80a5 	beq.w	800c00c <__kernel_rem_pio2+0x30c>
 800bec2:	f1ba 0f02 	cmp.w	sl, #2
 800bec6:	f000 80c1 	beq.w	800c04c <__kernel_rem_pio2+0x34c>
 800beca:	9b02      	ldr	r3, [sp, #8]
 800becc:	2b02      	cmp	r3, #2
 800bece:	d14e      	bne.n	800bf6e <__kernel_rem_pio2+0x26e>
 800bed0:	4632      	mov	r2, r6
 800bed2:	463b      	mov	r3, r7
 800bed4:	4958      	ldr	r1, [pc, #352]	; (800c038 <__kernel_rem_pio2+0x338>)
 800bed6:	2000      	movs	r0, #0
 800bed8:	f7f4 f98e 	bl	80001f8 <__aeabi_dsub>
 800bedc:	4606      	mov	r6, r0
 800bede:	460f      	mov	r7, r1
 800bee0:	2d00      	cmp	r5, #0
 800bee2:	d044      	beq.n	800bf6e <__kernel_rem_pio2+0x26e>
 800bee4:	4650      	mov	r0, sl
 800bee6:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800c028 <__kernel_rem_pio2+0x328>
 800beea:	f000 fb91 	bl	800c610 <scalbn>
 800beee:	4630      	mov	r0, r6
 800bef0:	4639      	mov	r1, r7
 800bef2:	ec53 2b10 	vmov	r2, r3, d0
 800bef6:	f7f4 f97f 	bl	80001f8 <__aeabi_dsub>
 800befa:	4606      	mov	r6, r0
 800befc:	460f      	mov	r7, r1
 800befe:	e036      	b.n	800bf6e <__kernel_rem_pio2+0x26e>
 800bf00:	4b4e      	ldr	r3, [pc, #312]	; (800c03c <__kernel_rem_pio2+0x33c>)
 800bf02:	2200      	movs	r2, #0
 800bf04:	4630      	mov	r0, r6
 800bf06:	4639      	mov	r1, r7
 800bf08:	f7f4 fb2e 	bl	8000568 <__aeabi_dmul>
 800bf0c:	f7f4 fdc6 	bl	8000a9c <__aeabi_d2iz>
 800bf10:	f7f4 fac0 	bl	8000494 <__aeabi_i2d>
 800bf14:	4b4a      	ldr	r3, [pc, #296]	; (800c040 <__kernel_rem_pio2+0x340>)
 800bf16:	2200      	movs	r2, #0
 800bf18:	4680      	mov	r8, r0
 800bf1a:	4689      	mov	r9, r1
 800bf1c:	f7f4 fb24 	bl	8000568 <__aeabi_dmul>
 800bf20:	4602      	mov	r2, r0
 800bf22:	460b      	mov	r3, r1
 800bf24:	4630      	mov	r0, r6
 800bf26:	4639      	mov	r1, r7
 800bf28:	f7f4 f966 	bl	80001f8 <__aeabi_dsub>
 800bf2c:	f7f4 fdb6 	bl	8000a9c <__aeabi_d2iz>
 800bf30:	9b02      	ldr	r3, [sp, #8]
 800bf32:	f843 0b04 	str.w	r0, [r3], #4
 800bf36:	3d01      	subs	r5, #1
 800bf38:	9302      	str	r3, [sp, #8]
 800bf3a:	ab70      	add	r3, sp, #448	; 0x1c0
 800bf3c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800bf40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf44:	4640      	mov	r0, r8
 800bf46:	4649      	mov	r1, r9
 800bf48:	f7f4 f958 	bl	80001fc <__adddf3>
 800bf4c:	4606      	mov	r6, r0
 800bf4e:	460f      	mov	r7, r1
 800bf50:	e75b      	b.n	800be0a <__kernel_rem_pio2+0x10a>
 800bf52:	d105      	bne.n	800bf60 <__kernel_rem_pio2+0x260>
 800bf54:	1e63      	subs	r3, r4, #1
 800bf56:	aa0c      	add	r2, sp, #48	; 0x30
 800bf58:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800bf5c:	15c3      	asrs	r3, r0, #23
 800bf5e:	e79b      	b.n	800be98 <__kernel_rem_pio2+0x198>
 800bf60:	4b38      	ldr	r3, [pc, #224]	; (800c044 <__kernel_rem_pio2+0x344>)
 800bf62:	2200      	movs	r2, #0
 800bf64:	f7f4 fd86 	bl	8000a74 <__aeabi_dcmpge>
 800bf68:	2800      	cmp	r0, #0
 800bf6a:	d139      	bne.n	800bfe0 <__kernel_rem_pio2+0x2e0>
 800bf6c:	9002      	str	r0, [sp, #8]
 800bf6e:	2200      	movs	r2, #0
 800bf70:	2300      	movs	r3, #0
 800bf72:	4630      	mov	r0, r6
 800bf74:	4639      	mov	r1, r7
 800bf76:	f7f4 fd5f 	bl	8000a38 <__aeabi_dcmpeq>
 800bf7a:	2800      	cmp	r0, #0
 800bf7c:	f000 80b4 	beq.w	800c0e8 <__kernel_rem_pio2+0x3e8>
 800bf80:	f104 3bff 	add.w	fp, r4, #4294967295
 800bf84:	465b      	mov	r3, fp
 800bf86:	2200      	movs	r2, #0
 800bf88:	9904      	ldr	r1, [sp, #16]
 800bf8a:	428b      	cmp	r3, r1
 800bf8c:	da65      	bge.n	800c05a <__kernel_rem_pio2+0x35a>
 800bf8e:	2a00      	cmp	r2, #0
 800bf90:	d07b      	beq.n	800c08a <__kernel_rem_pio2+0x38a>
 800bf92:	ab0c      	add	r3, sp, #48	; 0x30
 800bf94:	f1aa 0a18 	sub.w	sl, sl, #24
 800bf98:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	f000 80a0 	beq.w	800c0e2 <__kernel_rem_pio2+0x3e2>
 800bfa2:	ed9f 0b21 	vldr	d0, [pc, #132]	; 800c028 <__kernel_rem_pio2+0x328>
 800bfa6:	4650      	mov	r0, sl
 800bfa8:	f000 fb32 	bl	800c610 <scalbn>
 800bfac:	4f23      	ldr	r7, [pc, #140]	; (800c03c <__kernel_rem_pio2+0x33c>)
 800bfae:	ec55 4b10 	vmov	r4, r5, d0
 800bfb2:	46d8      	mov	r8, fp
 800bfb4:	2600      	movs	r6, #0
 800bfb6:	f1b8 0f00 	cmp.w	r8, #0
 800bfba:	f280 80cf 	bge.w	800c15c <__kernel_rem_pio2+0x45c>
 800bfbe:	ed9f 8b18 	vldr	d8, [pc, #96]	; 800c020 <__kernel_rem_pio2+0x320>
 800bfc2:	465f      	mov	r7, fp
 800bfc4:	f04f 0800 	mov.w	r8, #0
 800bfc8:	2f00      	cmp	r7, #0
 800bfca:	f2c0 80fd 	blt.w	800c1c8 <__kernel_rem_pio2+0x4c8>
 800bfce:	ab70      	add	r3, sp, #448	; 0x1c0
 800bfd0:	f8df a074 	ldr.w	sl, [pc, #116]	; 800c048 <__kernel_rem_pio2+0x348>
 800bfd4:	ec55 4b18 	vmov	r4, r5, d8
 800bfd8:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 800bfdc:	2600      	movs	r6, #0
 800bfde:	e0e5      	b.n	800c1ac <__kernel_rem_pio2+0x4ac>
 800bfe0:	2302      	movs	r3, #2
 800bfe2:	9302      	str	r3, [sp, #8]
 800bfe4:	e75c      	b.n	800bea0 <__kernel_rem_pio2+0x1a0>
 800bfe6:	f8db 3000 	ldr.w	r3, [fp]
 800bfea:	b955      	cbnz	r5, 800c002 <__kernel_rem_pio2+0x302>
 800bfec:	b123      	cbz	r3, 800bff8 <__kernel_rem_pio2+0x2f8>
 800bfee:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800bff2:	f8cb 3000 	str.w	r3, [fp]
 800bff6:	2301      	movs	r3, #1
 800bff8:	3201      	adds	r2, #1
 800bffa:	f10b 0b04 	add.w	fp, fp, #4
 800bffe:	461d      	mov	r5, r3
 800c000:	e755      	b.n	800beae <__kernel_rem_pio2+0x1ae>
 800c002:	1acb      	subs	r3, r1, r3
 800c004:	f8cb 3000 	str.w	r3, [fp]
 800c008:	462b      	mov	r3, r5
 800c00a:	e7f5      	b.n	800bff8 <__kernel_rem_pio2+0x2f8>
 800c00c:	1e62      	subs	r2, r4, #1
 800c00e:	ab0c      	add	r3, sp, #48	; 0x30
 800c010:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c014:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800c018:	a90c      	add	r1, sp, #48	; 0x30
 800c01a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800c01e:	e754      	b.n	800beca <__kernel_rem_pio2+0x1ca>
	...
 800c02c:	3ff00000 	.word	0x3ff00000
 800c030:	0800ca00 	.word	0x0800ca00
 800c034:	40200000 	.word	0x40200000
 800c038:	3ff00000 	.word	0x3ff00000
 800c03c:	3e700000 	.word	0x3e700000
 800c040:	41700000 	.word	0x41700000
 800c044:	3fe00000 	.word	0x3fe00000
 800c048:	0800c9c0 	.word	0x0800c9c0
 800c04c:	1e62      	subs	r2, r4, #1
 800c04e:	ab0c      	add	r3, sp, #48	; 0x30
 800c050:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c054:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800c058:	e7de      	b.n	800c018 <__kernel_rem_pio2+0x318>
 800c05a:	a90c      	add	r1, sp, #48	; 0x30
 800c05c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800c060:	3b01      	subs	r3, #1
 800c062:	430a      	orrs	r2, r1
 800c064:	e790      	b.n	800bf88 <__kernel_rem_pio2+0x288>
 800c066:	3301      	adds	r3, #1
 800c068:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800c06c:	2900      	cmp	r1, #0
 800c06e:	d0fa      	beq.n	800c066 <__kernel_rem_pio2+0x366>
 800c070:	9a08      	ldr	r2, [sp, #32]
 800c072:	18e3      	adds	r3, r4, r3
 800c074:	18a6      	adds	r6, r4, r2
 800c076:	aa20      	add	r2, sp, #128	; 0x80
 800c078:	1c65      	adds	r5, r4, #1
 800c07a:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800c07e:	9302      	str	r3, [sp, #8]
 800c080:	9b02      	ldr	r3, [sp, #8]
 800c082:	42ab      	cmp	r3, r5
 800c084:	da04      	bge.n	800c090 <__kernel_rem_pio2+0x390>
 800c086:	461c      	mov	r4, r3
 800c088:	e6b5      	b.n	800bdf6 <__kernel_rem_pio2+0xf6>
 800c08a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c08c:	2301      	movs	r3, #1
 800c08e:	e7eb      	b.n	800c068 <__kernel_rem_pio2+0x368>
 800c090:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c092:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c096:	f7f4 f9fd 	bl	8000494 <__aeabi_i2d>
 800c09a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800c09e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c0a0:	46b3      	mov	fp, r6
 800c0a2:	461c      	mov	r4, r3
 800c0a4:	2700      	movs	r7, #0
 800c0a6:	f04f 0800 	mov.w	r8, #0
 800c0aa:	f04f 0900 	mov.w	r9, #0
 800c0ae:	9b06      	ldr	r3, [sp, #24]
 800c0b0:	429f      	cmp	r7, r3
 800c0b2:	dd06      	ble.n	800c0c2 <__kernel_rem_pio2+0x3c2>
 800c0b4:	ab70      	add	r3, sp, #448	; 0x1c0
 800c0b6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800c0ba:	e9c3 8900 	strd	r8, r9, [r3]
 800c0be:	3501      	adds	r5, #1
 800c0c0:	e7de      	b.n	800c080 <__kernel_rem_pio2+0x380>
 800c0c2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800c0c6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800c0ca:	f7f4 fa4d 	bl	8000568 <__aeabi_dmul>
 800c0ce:	4602      	mov	r2, r0
 800c0d0:	460b      	mov	r3, r1
 800c0d2:	4640      	mov	r0, r8
 800c0d4:	4649      	mov	r1, r9
 800c0d6:	f7f4 f891 	bl	80001fc <__adddf3>
 800c0da:	3701      	adds	r7, #1
 800c0dc:	4680      	mov	r8, r0
 800c0de:	4689      	mov	r9, r1
 800c0e0:	e7e5      	b.n	800c0ae <__kernel_rem_pio2+0x3ae>
 800c0e2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c0e6:	e754      	b.n	800bf92 <__kernel_rem_pio2+0x292>
 800c0e8:	ec47 6b10 	vmov	d0, r6, r7
 800c0ec:	f1ca 0000 	rsb	r0, sl, #0
 800c0f0:	f000 fa8e 	bl	800c610 <scalbn>
 800c0f4:	ec57 6b10 	vmov	r6, r7, d0
 800c0f8:	4b9f      	ldr	r3, [pc, #636]	; (800c378 <__kernel_rem_pio2+0x678>)
 800c0fa:	ee10 0a10 	vmov	r0, s0
 800c0fe:	2200      	movs	r2, #0
 800c100:	4639      	mov	r1, r7
 800c102:	f7f4 fcb7 	bl	8000a74 <__aeabi_dcmpge>
 800c106:	b300      	cbz	r0, 800c14a <__kernel_rem_pio2+0x44a>
 800c108:	4b9c      	ldr	r3, [pc, #624]	; (800c37c <__kernel_rem_pio2+0x67c>)
 800c10a:	2200      	movs	r2, #0
 800c10c:	4630      	mov	r0, r6
 800c10e:	4639      	mov	r1, r7
 800c110:	f7f4 fa2a 	bl	8000568 <__aeabi_dmul>
 800c114:	f7f4 fcc2 	bl	8000a9c <__aeabi_d2iz>
 800c118:	4605      	mov	r5, r0
 800c11a:	f7f4 f9bb 	bl	8000494 <__aeabi_i2d>
 800c11e:	4b96      	ldr	r3, [pc, #600]	; (800c378 <__kernel_rem_pio2+0x678>)
 800c120:	2200      	movs	r2, #0
 800c122:	f7f4 fa21 	bl	8000568 <__aeabi_dmul>
 800c126:	460b      	mov	r3, r1
 800c128:	4602      	mov	r2, r0
 800c12a:	4639      	mov	r1, r7
 800c12c:	4630      	mov	r0, r6
 800c12e:	f7f4 f863 	bl	80001f8 <__aeabi_dsub>
 800c132:	f7f4 fcb3 	bl	8000a9c <__aeabi_d2iz>
 800c136:	f104 0b01 	add.w	fp, r4, #1
 800c13a:	ab0c      	add	r3, sp, #48	; 0x30
 800c13c:	f10a 0a18 	add.w	sl, sl, #24
 800c140:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800c144:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 800c148:	e72b      	b.n	800bfa2 <__kernel_rem_pio2+0x2a2>
 800c14a:	4630      	mov	r0, r6
 800c14c:	4639      	mov	r1, r7
 800c14e:	f7f4 fca5 	bl	8000a9c <__aeabi_d2iz>
 800c152:	ab0c      	add	r3, sp, #48	; 0x30
 800c154:	46a3      	mov	fp, r4
 800c156:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800c15a:	e722      	b.n	800bfa2 <__kernel_rem_pio2+0x2a2>
 800c15c:	ab70      	add	r3, sp, #448	; 0x1c0
 800c15e:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 800c162:	ab0c      	add	r3, sp, #48	; 0x30
 800c164:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800c168:	f7f4 f994 	bl	8000494 <__aeabi_i2d>
 800c16c:	4622      	mov	r2, r4
 800c16e:	462b      	mov	r3, r5
 800c170:	f7f4 f9fa 	bl	8000568 <__aeabi_dmul>
 800c174:	4632      	mov	r2, r6
 800c176:	e9c9 0100 	strd	r0, r1, [r9]
 800c17a:	463b      	mov	r3, r7
 800c17c:	4620      	mov	r0, r4
 800c17e:	4629      	mov	r1, r5
 800c180:	f7f4 f9f2 	bl	8000568 <__aeabi_dmul>
 800c184:	f108 38ff 	add.w	r8, r8, #4294967295
 800c188:	4604      	mov	r4, r0
 800c18a:	460d      	mov	r5, r1
 800c18c:	e713      	b.n	800bfb6 <__kernel_rem_pio2+0x2b6>
 800c18e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800c192:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800c196:	f7f4 f9e7 	bl	8000568 <__aeabi_dmul>
 800c19a:	4602      	mov	r2, r0
 800c19c:	460b      	mov	r3, r1
 800c19e:	4620      	mov	r0, r4
 800c1a0:	4629      	mov	r1, r5
 800c1a2:	f7f4 f82b 	bl	80001fc <__adddf3>
 800c1a6:	3601      	adds	r6, #1
 800c1a8:	4604      	mov	r4, r0
 800c1aa:	460d      	mov	r5, r1
 800c1ac:	9b04      	ldr	r3, [sp, #16]
 800c1ae:	429e      	cmp	r6, r3
 800c1b0:	dc01      	bgt.n	800c1b6 <__kernel_rem_pio2+0x4b6>
 800c1b2:	45b0      	cmp	r8, r6
 800c1b4:	daeb      	bge.n	800c18e <__kernel_rem_pio2+0x48e>
 800c1b6:	ab48      	add	r3, sp, #288	; 0x120
 800c1b8:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800c1bc:	e9c3 4500 	strd	r4, r5, [r3]
 800c1c0:	3f01      	subs	r7, #1
 800c1c2:	f108 0801 	add.w	r8, r8, #1
 800c1c6:	e6ff      	b.n	800bfc8 <__kernel_rem_pio2+0x2c8>
 800c1c8:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800c1ca:	2b02      	cmp	r3, #2
 800c1cc:	dc0b      	bgt.n	800c1e6 <__kernel_rem_pio2+0x4e6>
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	dc6e      	bgt.n	800c2b0 <__kernel_rem_pio2+0x5b0>
 800c1d2:	d045      	beq.n	800c260 <__kernel_rem_pio2+0x560>
 800c1d4:	9b07      	ldr	r3, [sp, #28]
 800c1d6:	f003 0007 	and.w	r0, r3, #7
 800c1da:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800c1de:	ecbd 8b02 	vpop	{d8}
 800c1e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1e6:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800c1e8:	2b03      	cmp	r3, #3
 800c1ea:	d1f3      	bne.n	800c1d4 <__kernel_rem_pio2+0x4d4>
 800c1ec:	ab48      	add	r3, sp, #288	; 0x120
 800c1ee:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 800c1f2:	46d0      	mov	r8, sl
 800c1f4:	46d9      	mov	r9, fp
 800c1f6:	f1b9 0f00 	cmp.w	r9, #0
 800c1fa:	f1a8 0808 	sub.w	r8, r8, #8
 800c1fe:	dc64      	bgt.n	800c2ca <__kernel_rem_pio2+0x5ca>
 800c200:	465c      	mov	r4, fp
 800c202:	2c01      	cmp	r4, #1
 800c204:	f1aa 0a08 	sub.w	sl, sl, #8
 800c208:	dc7e      	bgt.n	800c308 <__kernel_rem_pio2+0x608>
 800c20a:	2000      	movs	r0, #0
 800c20c:	2100      	movs	r1, #0
 800c20e:	f1bb 0f01 	cmp.w	fp, #1
 800c212:	f300 8097 	bgt.w	800c344 <__kernel_rem_pio2+0x644>
 800c216:	9b02      	ldr	r3, [sp, #8]
 800c218:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 800c21c:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800c220:	2b00      	cmp	r3, #0
 800c222:	f040 8099 	bne.w	800c358 <__kernel_rem_pio2+0x658>
 800c226:	9b01      	ldr	r3, [sp, #4]
 800c228:	e9c3 5600 	strd	r5, r6, [r3]
 800c22c:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800c230:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800c234:	e7ce      	b.n	800c1d4 <__kernel_rem_pio2+0x4d4>
 800c236:	ab48      	add	r3, sp, #288	; 0x120
 800c238:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c23c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c240:	f7f3 ffdc 	bl	80001fc <__adddf3>
 800c244:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c248:	f1bb 0f00 	cmp.w	fp, #0
 800c24c:	daf3      	bge.n	800c236 <__kernel_rem_pio2+0x536>
 800c24e:	9b02      	ldr	r3, [sp, #8]
 800c250:	b113      	cbz	r3, 800c258 <__kernel_rem_pio2+0x558>
 800c252:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c256:	4619      	mov	r1, r3
 800c258:	9b01      	ldr	r3, [sp, #4]
 800c25a:	e9c3 0100 	strd	r0, r1, [r3]
 800c25e:	e7b9      	b.n	800c1d4 <__kernel_rem_pio2+0x4d4>
 800c260:	2000      	movs	r0, #0
 800c262:	2100      	movs	r1, #0
 800c264:	e7f0      	b.n	800c248 <__kernel_rem_pio2+0x548>
 800c266:	ab48      	add	r3, sp, #288	; 0x120
 800c268:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c26c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c270:	f7f3 ffc4 	bl	80001fc <__adddf3>
 800c274:	3c01      	subs	r4, #1
 800c276:	2c00      	cmp	r4, #0
 800c278:	daf5      	bge.n	800c266 <__kernel_rem_pio2+0x566>
 800c27a:	9b02      	ldr	r3, [sp, #8]
 800c27c:	b1e3      	cbz	r3, 800c2b8 <__kernel_rem_pio2+0x5b8>
 800c27e:	4602      	mov	r2, r0
 800c280:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c284:	9c01      	ldr	r4, [sp, #4]
 800c286:	e9c4 2300 	strd	r2, r3, [r4]
 800c28a:	4602      	mov	r2, r0
 800c28c:	460b      	mov	r3, r1
 800c28e:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800c292:	f7f3 ffb1 	bl	80001f8 <__aeabi_dsub>
 800c296:	ad4a      	add	r5, sp, #296	; 0x128
 800c298:	2401      	movs	r4, #1
 800c29a:	45a3      	cmp	fp, r4
 800c29c:	da0f      	bge.n	800c2be <__kernel_rem_pio2+0x5be>
 800c29e:	9b02      	ldr	r3, [sp, #8]
 800c2a0:	b113      	cbz	r3, 800c2a8 <__kernel_rem_pio2+0x5a8>
 800c2a2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c2a6:	4619      	mov	r1, r3
 800c2a8:	9b01      	ldr	r3, [sp, #4]
 800c2aa:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800c2ae:	e791      	b.n	800c1d4 <__kernel_rem_pio2+0x4d4>
 800c2b0:	465c      	mov	r4, fp
 800c2b2:	2000      	movs	r0, #0
 800c2b4:	2100      	movs	r1, #0
 800c2b6:	e7de      	b.n	800c276 <__kernel_rem_pio2+0x576>
 800c2b8:	4602      	mov	r2, r0
 800c2ba:	460b      	mov	r3, r1
 800c2bc:	e7e2      	b.n	800c284 <__kernel_rem_pio2+0x584>
 800c2be:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800c2c2:	f7f3 ff9b 	bl	80001fc <__adddf3>
 800c2c6:	3401      	adds	r4, #1
 800c2c8:	e7e7      	b.n	800c29a <__kernel_rem_pio2+0x59a>
 800c2ca:	e9d8 4500 	ldrd	r4, r5, [r8]
 800c2ce:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 800c2d2:	4620      	mov	r0, r4
 800c2d4:	4632      	mov	r2, r6
 800c2d6:	463b      	mov	r3, r7
 800c2d8:	4629      	mov	r1, r5
 800c2da:	f7f3 ff8f 	bl	80001fc <__adddf3>
 800c2de:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c2e2:	4602      	mov	r2, r0
 800c2e4:	460b      	mov	r3, r1
 800c2e6:	4620      	mov	r0, r4
 800c2e8:	4629      	mov	r1, r5
 800c2ea:	f7f3 ff85 	bl	80001f8 <__aeabi_dsub>
 800c2ee:	4632      	mov	r2, r6
 800c2f0:	463b      	mov	r3, r7
 800c2f2:	f7f3 ff83 	bl	80001fc <__adddf3>
 800c2f6:	ed9d 7b04 	vldr	d7, [sp, #16]
 800c2fa:	e9c8 0102 	strd	r0, r1, [r8, #8]
 800c2fe:	ed88 7b00 	vstr	d7, [r8]
 800c302:	f109 39ff 	add.w	r9, r9, #4294967295
 800c306:	e776      	b.n	800c1f6 <__kernel_rem_pio2+0x4f6>
 800c308:	e9da 8900 	ldrd	r8, r9, [sl]
 800c30c:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800c310:	4640      	mov	r0, r8
 800c312:	4632      	mov	r2, r6
 800c314:	463b      	mov	r3, r7
 800c316:	4649      	mov	r1, r9
 800c318:	f7f3 ff70 	bl	80001fc <__adddf3>
 800c31c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c320:	4602      	mov	r2, r0
 800c322:	460b      	mov	r3, r1
 800c324:	4640      	mov	r0, r8
 800c326:	4649      	mov	r1, r9
 800c328:	f7f3 ff66 	bl	80001f8 <__aeabi_dsub>
 800c32c:	4632      	mov	r2, r6
 800c32e:	463b      	mov	r3, r7
 800c330:	f7f3 ff64 	bl	80001fc <__adddf3>
 800c334:	ed9d 7b04 	vldr	d7, [sp, #16]
 800c338:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c33c:	ed8a 7b00 	vstr	d7, [sl]
 800c340:	3c01      	subs	r4, #1
 800c342:	e75e      	b.n	800c202 <__kernel_rem_pio2+0x502>
 800c344:	ab48      	add	r3, sp, #288	; 0x120
 800c346:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c34a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c34e:	f7f3 ff55 	bl	80001fc <__adddf3>
 800c352:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c356:	e75a      	b.n	800c20e <__kernel_rem_pio2+0x50e>
 800c358:	9b01      	ldr	r3, [sp, #4]
 800c35a:	9a01      	ldr	r2, [sp, #4]
 800c35c:	601d      	str	r5, [r3, #0]
 800c35e:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800c362:	605c      	str	r4, [r3, #4]
 800c364:	609f      	str	r7, [r3, #8]
 800c366:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800c36a:	60d3      	str	r3, [r2, #12]
 800c36c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c370:	6110      	str	r0, [r2, #16]
 800c372:	6153      	str	r3, [r2, #20]
 800c374:	e72e      	b.n	800c1d4 <__kernel_rem_pio2+0x4d4>
 800c376:	bf00      	nop
 800c378:	41700000 	.word	0x41700000
 800c37c:	3e700000 	.word	0x3e700000

0800c380 <__kernel_sin>:
 800c380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c384:	ed2d 8b04 	vpush	{d8-d9}
 800c388:	eeb0 8a41 	vmov.f32	s16, s2
 800c38c:	eef0 8a61 	vmov.f32	s17, s3
 800c390:	ec55 4b10 	vmov	r4, r5, d0
 800c394:	b083      	sub	sp, #12
 800c396:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c39a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800c39e:	9001      	str	r0, [sp, #4]
 800c3a0:	da06      	bge.n	800c3b0 <__kernel_sin+0x30>
 800c3a2:	ee10 0a10 	vmov	r0, s0
 800c3a6:	4629      	mov	r1, r5
 800c3a8:	f7f4 fb78 	bl	8000a9c <__aeabi_d2iz>
 800c3ac:	2800      	cmp	r0, #0
 800c3ae:	d051      	beq.n	800c454 <__kernel_sin+0xd4>
 800c3b0:	4622      	mov	r2, r4
 800c3b2:	462b      	mov	r3, r5
 800c3b4:	4620      	mov	r0, r4
 800c3b6:	4629      	mov	r1, r5
 800c3b8:	f7f4 f8d6 	bl	8000568 <__aeabi_dmul>
 800c3bc:	4682      	mov	sl, r0
 800c3be:	468b      	mov	fp, r1
 800c3c0:	4602      	mov	r2, r0
 800c3c2:	460b      	mov	r3, r1
 800c3c4:	4620      	mov	r0, r4
 800c3c6:	4629      	mov	r1, r5
 800c3c8:	f7f4 f8ce 	bl	8000568 <__aeabi_dmul>
 800c3cc:	a341      	add	r3, pc, #260	; (adr r3, 800c4d4 <__kernel_sin+0x154>)
 800c3ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3d2:	4680      	mov	r8, r0
 800c3d4:	4689      	mov	r9, r1
 800c3d6:	4650      	mov	r0, sl
 800c3d8:	4659      	mov	r1, fp
 800c3da:	f7f4 f8c5 	bl	8000568 <__aeabi_dmul>
 800c3de:	a33f      	add	r3, pc, #252	; (adr r3, 800c4dc <__kernel_sin+0x15c>)
 800c3e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3e4:	f7f3 ff08 	bl	80001f8 <__aeabi_dsub>
 800c3e8:	4652      	mov	r2, sl
 800c3ea:	465b      	mov	r3, fp
 800c3ec:	f7f4 f8bc 	bl	8000568 <__aeabi_dmul>
 800c3f0:	a33c      	add	r3, pc, #240	; (adr r3, 800c4e4 <__kernel_sin+0x164>)
 800c3f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3f6:	f7f3 ff01 	bl	80001fc <__adddf3>
 800c3fa:	4652      	mov	r2, sl
 800c3fc:	465b      	mov	r3, fp
 800c3fe:	f7f4 f8b3 	bl	8000568 <__aeabi_dmul>
 800c402:	a33a      	add	r3, pc, #232	; (adr r3, 800c4ec <__kernel_sin+0x16c>)
 800c404:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c408:	f7f3 fef6 	bl	80001f8 <__aeabi_dsub>
 800c40c:	4652      	mov	r2, sl
 800c40e:	465b      	mov	r3, fp
 800c410:	f7f4 f8aa 	bl	8000568 <__aeabi_dmul>
 800c414:	a337      	add	r3, pc, #220	; (adr r3, 800c4f4 <__kernel_sin+0x174>)
 800c416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c41a:	f7f3 feef 	bl	80001fc <__adddf3>
 800c41e:	9b01      	ldr	r3, [sp, #4]
 800c420:	4606      	mov	r6, r0
 800c422:	460f      	mov	r7, r1
 800c424:	b9eb      	cbnz	r3, 800c462 <__kernel_sin+0xe2>
 800c426:	4602      	mov	r2, r0
 800c428:	460b      	mov	r3, r1
 800c42a:	4650      	mov	r0, sl
 800c42c:	4659      	mov	r1, fp
 800c42e:	f7f4 f89b 	bl	8000568 <__aeabi_dmul>
 800c432:	a325      	add	r3, pc, #148	; (adr r3, 800c4c8 <__kernel_sin+0x148>)
 800c434:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c438:	f7f3 fede 	bl	80001f8 <__aeabi_dsub>
 800c43c:	4642      	mov	r2, r8
 800c43e:	464b      	mov	r3, r9
 800c440:	f7f4 f892 	bl	8000568 <__aeabi_dmul>
 800c444:	4602      	mov	r2, r0
 800c446:	460b      	mov	r3, r1
 800c448:	4620      	mov	r0, r4
 800c44a:	4629      	mov	r1, r5
 800c44c:	f7f3 fed6 	bl	80001fc <__adddf3>
 800c450:	4604      	mov	r4, r0
 800c452:	460d      	mov	r5, r1
 800c454:	ec45 4b10 	vmov	d0, r4, r5
 800c458:	b003      	add	sp, #12
 800c45a:	ecbd 8b04 	vpop	{d8-d9}
 800c45e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c462:	4b1b      	ldr	r3, [pc, #108]	; (800c4d0 <__kernel_sin+0x150>)
 800c464:	ec51 0b18 	vmov	r0, r1, d8
 800c468:	2200      	movs	r2, #0
 800c46a:	f7f4 f87d 	bl	8000568 <__aeabi_dmul>
 800c46e:	4632      	mov	r2, r6
 800c470:	ec41 0b19 	vmov	d9, r0, r1
 800c474:	463b      	mov	r3, r7
 800c476:	4640      	mov	r0, r8
 800c478:	4649      	mov	r1, r9
 800c47a:	f7f4 f875 	bl	8000568 <__aeabi_dmul>
 800c47e:	4602      	mov	r2, r0
 800c480:	460b      	mov	r3, r1
 800c482:	ec51 0b19 	vmov	r0, r1, d9
 800c486:	f7f3 feb7 	bl	80001f8 <__aeabi_dsub>
 800c48a:	4652      	mov	r2, sl
 800c48c:	465b      	mov	r3, fp
 800c48e:	f7f4 f86b 	bl	8000568 <__aeabi_dmul>
 800c492:	ec53 2b18 	vmov	r2, r3, d8
 800c496:	f7f3 feaf 	bl	80001f8 <__aeabi_dsub>
 800c49a:	a30b      	add	r3, pc, #44	; (adr r3, 800c4c8 <__kernel_sin+0x148>)
 800c49c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4a0:	4606      	mov	r6, r0
 800c4a2:	460f      	mov	r7, r1
 800c4a4:	4640      	mov	r0, r8
 800c4a6:	4649      	mov	r1, r9
 800c4a8:	f7f4 f85e 	bl	8000568 <__aeabi_dmul>
 800c4ac:	4602      	mov	r2, r0
 800c4ae:	460b      	mov	r3, r1
 800c4b0:	4630      	mov	r0, r6
 800c4b2:	4639      	mov	r1, r7
 800c4b4:	f7f3 fea2 	bl	80001fc <__adddf3>
 800c4b8:	4602      	mov	r2, r0
 800c4ba:	460b      	mov	r3, r1
 800c4bc:	4620      	mov	r0, r4
 800c4be:	4629      	mov	r1, r5
 800c4c0:	f7f3 fe9a 	bl	80001f8 <__aeabi_dsub>
 800c4c4:	e7c4      	b.n	800c450 <__kernel_sin+0xd0>
 800c4c6:	bf00      	nop
 800c4c8:	55555549 	.word	0x55555549
 800c4cc:	3fc55555 	.word	0x3fc55555
 800c4d0:	3fe00000 	.word	0x3fe00000
 800c4d4:	5acfd57c 	.word	0x5acfd57c
 800c4d8:	3de5d93a 	.word	0x3de5d93a
 800c4dc:	8a2b9ceb 	.word	0x8a2b9ceb
 800c4e0:	3e5ae5e6 	.word	0x3e5ae5e6
 800c4e4:	57b1fe7d 	.word	0x57b1fe7d
 800c4e8:	3ec71de3 	.word	0x3ec71de3
 800c4ec:	19c161d5 	.word	0x19c161d5
 800c4f0:	3f2a01a0 	.word	0x3f2a01a0
 800c4f4:	1110f8a6 	.word	0x1110f8a6
 800c4f8:	3f811111 	.word	0x3f811111

0800c4fc <fabs>:
 800c4fc:	ec51 0b10 	vmov	r0, r1, d0
 800c500:	ee10 2a10 	vmov	r2, s0
 800c504:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c508:	ec43 2b10 	vmov	d0, r2, r3
 800c50c:	4770      	bx	lr
	...

0800c510 <floor>:
 800c510:	ec51 0b10 	vmov	r0, r1, d0
 800c514:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c518:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800c51c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800c520:	2e13      	cmp	r6, #19
 800c522:	ee10 5a10 	vmov	r5, s0
 800c526:	ee10 8a10 	vmov	r8, s0
 800c52a:	460c      	mov	r4, r1
 800c52c:	dc32      	bgt.n	800c594 <floor+0x84>
 800c52e:	2e00      	cmp	r6, #0
 800c530:	da14      	bge.n	800c55c <floor+0x4c>
 800c532:	a333      	add	r3, pc, #204	; (adr r3, 800c600 <floor+0xf0>)
 800c534:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c538:	f7f3 fe60 	bl	80001fc <__adddf3>
 800c53c:	2200      	movs	r2, #0
 800c53e:	2300      	movs	r3, #0
 800c540:	f7f4 faa2 	bl	8000a88 <__aeabi_dcmpgt>
 800c544:	b138      	cbz	r0, 800c556 <floor+0x46>
 800c546:	2c00      	cmp	r4, #0
 800c548:	da57      	bge.n	800c5fa <floor+0xea>
 800c54a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800c54e:	431d      	orrs	r5, r3
 800c550:	d001      	beq.n	800c556 <floor+0x46>
 800c552:	4c2d      	ldr	r4, [pc, #180]	; (800c608 <floor+0xf8>)
 800c554:	2500      	movs	r5, #0
 800c556:	4621      	mov	r1, r4
 800c558:	4628      	mov	r0, r5
 800c55a:	e025      	b.n	800c5a8 <floor+0x98>
 800c55c:	4f2b      	ldr	r7, [pc, #172]	; (800c60c <floor+0xfc>)
 800c55e:	4137      	asrs	r7, r6
 800c560:	ea01 0307 	and.w	r3, r1, r7
 800c564:	4303      	orrs	r3, r0
 800c566:	d01f      	beq.n	800c5a8 <floor+0x98>
 800c568:	a325      	add	r3, pc, #148	; (adr r3, 800c600 <floor+0xf0>)
 800c56a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c56e:	f7f3 fe45 	bl	80001fc <__adddf3>
 800c572:	2200      	movs	r2, #0
 800c574:	2300      	movs	r3, #0
 800c576:	f7f4 fa87 	bl	8000a88 <__aeabi_dcmpgt>
 800c57a:	2800      	cmp	r0, #0
 800c57c:	d0eb      	beq.n	800c556 <floor+0x46>
 800c57e:	2c00      	cmp	r4, #0
 800c580:	bfbe      	ittt	lt
 800c582:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800c586:	fa43 f606 	asrlt.w	r6, r3, r6
 800c58a:	19a4      	addlt	r4, r4, r6
 800c58c:	ea24 0407 	bic.w	r4, r4, r7
 800c590:	2500      	movs	r5, #0
 800c592:	e7e0      	b.n	800c556 <floor+0x46>
 800c594:	2e33      	cmp	r6, #51	; 0x33
 800c596:	dd0b      	ble.n	800c5b0 <floor+0xa0>
 800c598:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800c59c:	d104      	bne.n	800c5a8 <floor+0x98>
 800c59e:	ee10 2a10 	vmov	r2, s0
 800c5a2:	460b      	mov	r3, r1
 800c5a4:	f7f3 fe2a 	bl	80001fc <__adddf3>
 800c5a8:	ec41 0b10 	vmov	d0, r0, r1
 800c5ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c5b0:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800c5b4:	f04f 33ff 	mov.w	r3, #4294967295
 800c5b8:	fa23 f707 	lsr.w	r7, r3, r7
 800c5bc:	4207      	tst	r7, r0
 800c5be:	d0f3      	beq.n	800c5a8 <floor+0x98>
 800c5c0:	a30f      	add	r3, pc, #60	; (adr r3, 800c600 <floor+0xf0>)
 800c5c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5c6:	f7f3 fe19 	bl	80001fc <__adddf3>
 800c5ca:	2200      	movs	r2, #0
 800c5cc:	2300      	movs	r3, #0
 800c5ce:	f7f4 fa5b 	bl	8000a88 <__aeabi_dcmpgt>
 800c5d2:	2800      	cmp	r0, #0
 800c5d4:	d0bf      	beq.n	800c556 <floor+0x46>
 800c5d6:	2c00      	cmp	r4, #0
 800c5d8:	da02      	bge.n	800c5e0 <floor+0xd0>
 800c5da:	2e14      	cmp	r6, #20
 800c5dc:	d103      	bne.n	800c5e6 <floor+0xd6>
 800c5de:	3401      	adds	r4, #1
 800c5e0:	ea25 0507 	bic.w	r5, r5, r7
 800c5e4:	e7b7      	b.n	800c556 <floor+0x46>
 800c5e6:	2301      	movs	r3, #1
 800c5e8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800c5ec:	fa03 f606 	lsl.w	r6, r3, r6
 800c5f0:	4435      	add	r5, r6
 800c5f2:	4545      	cmp	r5, r8
 800c5f4:	bf38      	it	cc
 800c5f6:	18e4      	addcc	r4, r4, r3
 800c5f8:	e7f2      	b.n	800c5e0 <floor+0xd0>
 800c5fa:	2500      	movs	r5, #0
 800c5fc:	462c      	mov	r4, r5
 800c5fe:	e7aa      	b.n	800c556 <floor+0x46>
 800c600:	8800759c 	.word	0x8800759c
 800c604:	7e37e43c 	.word	0x7e37e43c
 800c608:	bff00000 	.word	0xbff00000
 800c60c:	000fffff 	.word	0x000fffff

0800c610 <scalbn>:
 800c610:	b570      	push	{r4, r5, r6, lr}
 800c612:	ec55 4b10 	vmov	r4, r5, d0
 800c616:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800c61a:	4606      	mov	r6, r0
 800c61c:	462b      	mov	r3, r5
 800c61e:	b99a      	cbnz	r2, 800c648 <scalbn+0x38>
 800c620:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c624:	4323      	orrs	r3, r4
 800c626:	d036      	beq.n	800c696 <scalbn+0x86>
 800c628:	4b39      	ldr	r3, [pc, #228]	; (800c710 <scalbn+0x100>)
 800c62a:	4629      	mov	r1, r5
 800c62c:	ee10 0a10 	vmov	r0, s0
 800c630:	2200      	movs	r2, #0
 800c632:	f7f3 ff99 	bl	8000568 <__aeabi_dmul>
 800c636:	4b37      	ldr	r3, [pc, #220]	; (800c714 <scalbn+0x104>)
 800c638:	429e      	cmp	r6, r3
 800c63a:	4604      	mov	r4, r0
 800c63c:	460d      	mov	r5, r1
 800c63e:	da10      	bge.n	800c662 <scalbn+0x52>
 800c640:	a32b      	add	r3, pc, #172	; (adr r3, 800c6f0 <scalbn+0xe0>)
 800c642:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c646:	e03a      	b.n	800c6be <scalbn+0xae>
 800c648:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800c64c:	428a      	cmp	r2, r1
 800c64e:	d10c      	bne.n	800c66a <scalbn+0x5a>
 800c650:	ee10 2a10 	vmov	r2, s0
 800c654:	4620      	mov	r0, r4
 800c656:	4629      	mov	r1, r5
 800c658:	f7f3 fdd0 	bl	80001fc <__adddf3>
 800c65c:	4604      	mov	r4, r0
 800c65e:	460d      	mov	r5, r1
 800c660:	e019      	b.n	800c696 <scalbn+0x86>
 800c662:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c666:	460b      	mov	r3, r1
 800c668:	3a36      	subs	r2, #54	; 0x36
 800c66a:	4432      	add	r2, r6
 800c66c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800c670:	428a      	cmp	r2, r1
 800c672:	dd08      	ble.n	800c686 <scalbn+0x76>
 800c674:	2d00      	cmp	r5, #0
 800c676:	a120      	add	r1, pc, #128	; (adr r1, 800c6f8 <scalbn+0xe8>)
 800c678:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c67c:	da1c      	bge.n	800c6b8 <scalbn+0xa8>
 800c67e:	a120      	add	r1, pc, #128	; (adr r1, 800c700 <scalbn+0xf0>)
 800c680:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c684:	e018      	b.n	800c6b8 <scalbn+0xa8>
 800c686:	2a00      	cmp	r2, #0
 800c688:	dd08      	ble.n	800c69c <scalbn+0x8c>
 800c68a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c68e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c692:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c696:	ec45 4b10 	vmov	d0, r4, r5
 800c69a:	bd70      	pop	{r4, r5, r6, pc}
 800c69c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800c6a0:	da19      	bge.n	800c6d6 <scalbn+0xc6>
 800c6a2:	f24c 3350 	movw	r3, #50000	; 0xc350
 800c6a6:	429e      	cmp	r6, r3
 800c6a8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800c6ac:	dd0a      	ble.n	800c6c4 <scalbn+0xb4>
 800c6ae:	a112      	add	r1, pc, #72	; (adr r1, 800c6f8 <scalbn+0xe8>)
 800c6b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d1e2      	bne.n	800c67e <scalbn+0x6e>
 800c6b8:	a30f      	add	r3, pc, #60	; (adr r3, 800c6f8 <scalbn+0xe8>)
 800c6ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6be:	f7f3 ff53 	bl	8000568 <__aeabi_dmul>
 800c6c2:	e7cb      	b.n	800c65c <scalbn+0x4c>
 800c6c4:	a10a      	add	r1, pc, #40	; (adr r1, 800c6f0 <scalbn+0xe0>)
 800c6c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d0b8      	beq.n	800c640 <scalbn+0x30>
 800c6ce:	a10e      	add	r1, pc, #56	; (adr r1, 800c708 <scalbn+0xf8>)
 800c6d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c6d4:	e7b4      	b.n	800c640 <scalbn+0x30>
 800c6d6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c6da:	3236      	adds	r2, #54	; 0x36
 800c6dc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c6e0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800c6e4:	4620      	mov	r0, r4
 800c6e6:	4b0c      	ldr	r3, [pc, #48]	; (800c718 <scalbn+0x108>)
 800c6e8:	2200      	movs	r2, #0
 800c6ea:	e7e8      	b.n	800c6be <scalbn+0xae>
 800c6ec:	f3af 8000 	nop.w
 800c6f0:	c2f8f359 	.word	0xc2f8f359
 800c6f4:	01a56e1f 	.word	0x01a56e1f
 800c6f8:	8800759c 	.word	0x8800759c
 800c6fc:	7e37e43c 	.word	0x7e37e43c
 800c700:	8800759c 	.word	0x8800759c
 800c704:	fe37e43c 	.word	0xfe37e43c
 800c708:	c2f8f359 	.word	0xc2f8f359
 800c70c:	81a56e1f 	.word	0x81a56e1f
 800c710:	43500000 	.word	0x43500000
 800c714:	ffff3cb0 	.word	0xffff3cb0
 800c718:	3c900000 	.word	0x3c900000

0800c71c <_init>:
 800c71c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c71e:	bf00      	nop
 800c720:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c722:	bc08      	pop	{r3}
 800c724:	469e      	mov	lr, r3
 800c726:	4770      	bx	lr

0800c728 <_fini>:
 800c728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c72a:	bf00      	nop
 800c72c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c72e:	bc08      	pop	{r3}
 800c730:	469e      	mov	lr, r3
 800c732:	4770      	bx	lr
