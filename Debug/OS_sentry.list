
OS_sentry.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cbac  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000270  0800cd5c  0800cd5c  0001cd5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cfcc  0800cfcc  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  0800cfcc  0800cfcc  0001cfcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cfd4  0800cfd4  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cfd4  0800cfd4  0001cfd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cfd8  0800cfd8  0001cfd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  0800cfdc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009ec8  20000080  0800d058  00020080  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20009f48  0800d058  00029f48  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000328dd  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000060b0  00000000  00000000  00052989  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b00  00000000  00000000  00058a40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001878  00000000  00000000  0005a540  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a193  00000000  00000000  0005bdb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023544  00000000  00000000  00085f4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e75ea  00000000  00000000  000a948f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00190a79  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007918  00000000  00000000  00190acc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000cc  00000000  00000000  001983e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001b9  00000000  00000000  001984b0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000080 	.word	0x20000080
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800cd44 	.word	0x0800cd44

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000084 	.word	0x20000084
 80001ec:	0800cd44 	.word	0x0800cd44

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_d2iz>:
 8000b3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b44:	d215      	bcs.n	8000b72 <__aeabi_d2iz+0x36>
 8000b46:	d511      	bpl.n	8000b6c <__aeabi_d2iz+0x30>
 8000b48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b50:	d912      	bls.n	8000b78 <__aeabi_d2iz+0x3c>
 8000b52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b5e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b62:	fa23 f002 	lsr.w	r0, r3, r2
 8000b66:	bf18      	it	ne
 8000b68:	4240      	negne	r0, r0
 8000b6a:	4770      	bx	lr
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b76:	d105      	bne.n	8000b84 <__aeabi_d2iz+0x48>
 8000b78:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b7c:	bf08      	it	eq
 8000b7e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b82:	4770      	bx	lr
 8000b84:	f04f 0000 	mov.w	r0, #0
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop

08000b8c <__aeabi_d2f>:
 8000b8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b90:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b94:	bf24      	itt	cs
 8000b96:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b9a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b9e:	d90d      	bls.n	8000bbc <__aeabi_d2f+0x30>
 8000ba0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ba4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ba8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bac:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bb0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bb4:	bf08      	it	eq
 8000bb6:	f020 0001 	biceq.w	r0, r0, #1
 8000bba:	4770      	bx	lr
 8000bbc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bc0:	d121      	bne.n	8000c06 <__aeabi_d2f+0x7a>
 8000bc2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bc6:	bfbc      	itt	lt
 8000bc8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bcc:	4770      	bxlt	lr
 8000bce:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bd2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bd6:	f1c2 0218 	rsb	r2, r2, #24
 8000bda:	f1c2 0c20 	rsb	ip, r2, #32
 8000bde:	fa10 f30c 	lsls.w	r3, r0, ip
 8000be2:	fa20 f002 	lsr.w	r0, r0, r2
 8000be6:	bf18      	it	ne
 8000be8:	f040 0001 	orrne.w	r0, r0, #1
 8000bec:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bf4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bf8:	ea40 000c 	orr.w	r0, r0, ip
 8000bfc:	fa23 f302 	lsr.w	r3, r3, r2
 8000c00:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c04:	e7cc      	b.n	8000ba0 <__aeabi_d2f+0x14>
 8000c06:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c0a:	d107      	bne.n	8000c1c <__aeabi_d2f+0x90>
 8000c0c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c10:	bf1e      	ittt	ne
 8000c12:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c16:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c1a:	4770      	bxne	lr
 8000c1c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c20:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c24:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop

08000c2c <__aeabi_uldivmod>:
 8000c2c:	b953      	cbnz	r3, 8000c44 <__aeabi_uldivmod+0x18>
 8000c2e:	b94a      	cbnz	r2, 8000c44 <__aeabi_uldivmod+0x18>
 8000c30:	2900      	cmp	r1, #0
 8000c32:	bf08      	it	eq
 8000c34:	2800      	cmpeq	r0, #0
 8000c36:	bf1c      	itt	ne
 8000c38:	f04f 31ff 	movne.w	r1, #4294967295
 8000c3c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c40:	f000 b96e 	b.w	8000f20 <__aeabi_idiv0>
 8000c44:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c48:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c4c:	f000 f806 	bl	8000c5c <__udivmoddi4>
 8000c50:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c58:	b004      	add	sp, #16
 8000c5a:	4770      	bx	lr

08000c5c <__udivmoddi4>:
 8000c5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c60:	9d08      	ldr	r5, [sp, #32]
 8000c62:	4604      	mov	r4, r0
 8000c64:	468c      	mov	ip, r1
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	f040 8083 	bne.w	8000d72 <__udivmoddi4+0x116>
 8000c6c:	428a      	cmp	r2, r1
 8000c6e:	4617      	mov	r7, r2
 8000c70:	d947      	bls.n	8000d02 <__udivmoddi4+0xa6>
 8000c72:	fab2 f282 	clz	r2, r2
 8000c76:	b142      	cbz	r2, 8000c8a <__udivmoddi4+0x2e>
 8000c78:	f1c2 0020 	rsb	r0, r2, #32
 8000c7c:	fa24 f000 	lsr.w	r0, r4, r0
 8000c80:	4091      	lsls	r1, r2
 8000c82:	4097      	lsls	r7, r2
 8000c84:	ea40 0c01 	orr.w	ip, r0, r1
 8000c88:	4094      	lsls	r4, r2
 8000c8a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c8e:	0c23      	lsrs	r3, r4, #16
 8000c90:	fbbc f6f8 	udiv	r6, ip, r8
 8000c94:	fa1f fe87 	uxth.w	lr, r7
 8000c98:	fb08 c116 	mls	r1, r8, r6, ip
 8000c9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ca0:	fb06 f10e 	mul.w	r1, r6, lr
 8000ca4:	4299      	cmp	r1, r3
 8000ca6:	d909      	bls.n	8000cbc <__udivmoddi4+0x60>
 8000ca8:	18fb      	adds	r3, r7, r3
 8000caa:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cae:	f080 8119 	bcs.w	8000ee4 <__udivmoddi4+0x288>
 8000cb2:	4299      	cmp	r1, r3
 8000cb4:	f240 8116 	bls.w	8000ee4 <__udivmoddi4+0x288>
 8000cb8:	3e02      	subs	r6, #2
 8000cba:	443b      	add	r3, r7
 8000cbc:	1a5b      	subs	r3, r3, r1
 8000cbe:	b2a4      	uxth	r4, r4
 8000cc0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cc4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cc8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ccc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cd0:	45a6      	cmp	lr, r4
 8000cd2:	d909      	bls.n	8000ce8 <__udivmoddi4+0x8c>
 8000cd4:	193c      	adds	r4, r7, r4
 8000cd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cda:	f080 8105 	bcs.w	8000ee8 <__udivmoddi4+0x28c>
 8000cde:	45a6      	cmp	lr, r4
 8000ce0:	f240 8102 	bls.w	8000ee8 <__udivmoddi4+0x28c>
 8000ce4:	3802      	subs	r0, #2
 8000ce6:	443c      	add	r4, r7
 8000ce8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cec:	eba4 040e 	sub.w	r4, r4, lr
 8000cf0:	2600      	movs	r6, #0
 8000cf2:	b11d      	cbz	r5, 8000cfc <__udivmoddi4+0xa0>
 8000cf4:	40d4      	lsrs	r4, r2
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cfc:	4631      	mov	r1, r6
 8000cfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d02:	b902      	cbnz	r2, 8000d06 <__udivmoddi4+0xaa>
 8000d04:	deff      	udf	#255	; 0xff
 8000d06:	fab2 f282 	clz	r2, r2
 8000d0a:	2a00      	cmp	r2, #0
 8000d0c:	d150      	bne.n	8000db0 <__udivmoddi4+0x154>
 8000d0e:	1bcb      	subs	r3, r1, r7
 8000d10:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d14:	fa1f f887 	uxth.w	r8, r7
 8000d18:	2601      	movs	r6, #1
 8000d1a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d1e:	0c21      	lsrs	r1, r4, #16
 8000d20:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d28:	fb08 f30c 	mul.w	r3, r8, ip
 8000d2c:	428b      	cmp	r3, r1
 8000d2e:	d907      	bls.n	8000d40 <__udivmoddi4+0xe4>
 8000d30:	1879      	adds	r1, r7, r1
 8000d32:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d36:	d202      	bcs.n	8000d3e <__udivmoddi4+0xe2>
 8000d38:	428b      	cmp	r3, r1
 8000d3a:	f200 80e9 	bhi.w	8000f10 <__udivmoddi4+0x2b4>
 8000d3e:	4684      	mov	ip, r0
 8000d40:	1ac9      	subs	r1, r1, r3
 8000d42:	b2a3      	uxth	r3, r4
 8000d44:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d48:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d4c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d50:	fb08 f800 	mul.w	r8, r8, r0
 8000d54:	45a0      	cmp	r8, r4
 8000d56:	d907      	bls.n	8000d68 <__udivmoddi4+0x10c>
 8000d58:	193c      	adds	r4, r7, r4
 8000d5a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d5e:	d202      	bcs.n	8000d66 <__udivmoddi4+0x10a>
 8000d60:	45a0      	cmp	r8, r4
 8000d62:	f200 80d9 	bhi.w	8000f18 <__udivmoddi4+0x2bc>
 8000d66:	4618      	mov	r0, r3
 8000d68:	eba4 0408 	sub.w	r4, r4, r8
 8000d6c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d70:	e7bf      	b.n	8000cf2 <__udivmoddi4+0x96>
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d909      	bls.n	8000d8a <__udivmoddi4+0x12e>
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	f000 80b1 	beq.w	8000ede <__udivmoddi4+0x282>
 8000d7c:	2600      	movs	r6, #0
 8000d7e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d82:	4630      	mov	r0, r6
 8000d84:	4631      	mov	r1, r6
 8000d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8a:	fab3 f683 	clz	r6, r3
 8000d8e:	2e00      	cmp	r6, #0
 8000d90:	d14a      	bne.n	8000e28 <__udivmoddi4+0x1cc>
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d302      	bcc.n	8000d9c <__udivmoddi4+0x140>
 8000d96:	4282      	cmp	r2, r0
 8000d98:	f200 80b8 	bhi.w	8000f0c <__udivmoddi4+0x2b0>
 8000d9c:	1a84      	subs	r4, r0, r2
 8000d9e:	eb61 0103 	sbc.w	r1, r1, r3
 8000da2:	2001      	movs	r0, #1
 8000da4:	468c      	mov	ip, r1
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	d0a8      	beq.n	8000cfc <__udivmoddi4+0xa0>
 8000daa:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dae:	e7a5      	b.n	8000cfc <__udivmoddi4+0xa0>
 8000db0:	f1c2 0320 	rsb	r3, r2, #32
 8000db4:	fa20 f603 	lsr.w	r6, r0, r3
 8000db8:	4097      	lsls	r7, r2
 8000dba:	fa01 f002 	lsl.w	r0, r1, r2
 8000dbe:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dc2:	40d9      	lsrs	r1, r3
 8000dc4:	4330      	orrs	r0, r6
 8000dc6:	0c03      	lsrs	r3, r0, #16
 8000dc8:	fbb1 f6fe 	udiv	r6, r1, lr
 8000dcc:	fa1f f887 	uxth.w	r8, r7
 8000dd0:	fb0e 1116 	mls	r1, lr, r6, r1
 8000dd4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dd8:	fb06 f108 	mul.w	r1, r6, r8
 8000ddc:	4299      	cmp	r1, r3
 8000dde:	fa04 f402 	lsl.w	r4, r4, r2
 8000de2:	d909      	bls.n	8000df8 <__udivmoddi4+0x19c>
 8000de4:	18fb      	adds	r3, r7, r3
 8000de6:	f106 3cff 	add.w	ip, r6, #4294967295
 8000dea:	f080 808d 	bcs.w	8000f08 <__udivmoddi4+0x2ac>
 8000dee:	4299      	cmp	r1, r3
 8000df0:	f240 808a 	bls.w	8000f08 <__udivmoddi4+0x2ac>
 8000df4:	3e02      	subs	r6, #2
 8000df6:	443b      	add	r3, r7
 8000df8:	1a5b      	subs	r3, r3, r1
 8000dfa:	b281      	uxth	r1, r0
 8000dfc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e00:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e04:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e08:	fb00 f308 	mul.w	r3, r0, r8
 8000e0c:	428b      	cmp	r3, r1
 8000e0e:	d907      	bls.n	8000e20 <__udivmoddi4+0x1c4>
 8000e10:	1879      	adds	r1, r7, r1
 8000e12:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e16:	d273      	bcs.n	8000f00 <__udivmoddi4+0x2a4>
 8000e18:	428b      	cmp	r3, r1
 8000e1a:	d971      	bls.n	8000f00 <__udivmoddi4+0x2a4>
 8000e1c:	3802      	subs	r0, #2
 8000e1e:	4439      	add	r1, r7
 8000e20:	1acb      	subs	r3, r1, r3
 8000e22:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e26:	e778      	b.n	8000d1a <__udivmoddi4+0xbe>
 8000e28:	f1c6 0c20 	rsb	ip, r6, #32
 8000e2c:	fa03 f406 	lsl.w	r4, r3, r6
 8000e30:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e34:	431c      	orrs	r4, r3
 8000e36:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e3a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e3e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e42:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e46:	431f      	orrs	r7, r3
 8000e48:	0c3b      	lsrs	r3, r7, #16
 8000e4a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e4e:	fa1f f884 	uxth.w	r8, r4
 8000e52:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e56:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e5a:	fb09 fa08 	mul.w	sl, r9, r8
 8000e5e:	458a      	cmp	sl, r1
 8000e60:	fa02 f206 	lsl.w	r2, r2, r6
 8000e64:	fa00 f306 	lsl.w	r3, r0, r6
 8000e68:	d908      	bls.n	8000e7c <__udivmoddi4+0x220>
 8000e6a:	1861      	adds	r1, r4, r1
 8000e6c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e70:	d248      	bcs.n	8000f04 <__udivmoddi4+0x2a8>
 8000e72:	458a      	cmp	sl, r1
 8000e74:	d946      	bls.n	8000f04 <__udivmoddi4+0x2a8>
 8000e76:	f1a9 0902 	sub.w	r9, r9, #2
 8000e7a:	4421      	add	r1, r4
 8000e7c:	eba1 010a 	sub.w	r1, r1, sl
 8000e80:	b2bf      	uxth	r7, r7
 8000e82:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e86:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e8a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e8e:	fb00 f808 	mul.w	r8, r0, r8
 8000e92:	45b8      	cmp	r8, r7
 8000e94:	d907      	bls.n	8000ea6 <__udivmoddi4+0x24a>
 8000e96:	19e7      	adds	r7, r4, r7
 8000e98:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e9c:	d22e      	bcs.n	8000efc <__udivmoddi4+0x2a0>
 8000e9e:	45b8      	cmp	r8, r7
 8000ea0:	d92c      	bls.n	8000efc <__udivmoddi4+0x2a0>
 8000ea2:	3802      	subs	r0, #2
 8000ea4:	4427      	add	r7, r4
 8000ea6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000eaa:	eba7 0708 	sub.w	r7, r7, r8
 8000eae:	fba0 8902 	umull	r8, r9, r0, r2
 8000eb2:	454f      	cmp	r7, r9
 8000eb4:	46c6      	mov	lr, r8
 8000eb6:	4649      	mov	r1, r9
 8000eb8:	d31a      	bcc.n	8000ef0 <__udivmoddi4+0x294>
 8000eba:	d017      	beq.n	8000eec <__udivmoddi4+0x290>
 8000ebc:	b15d      	cbz	r5, 8000ed6 <__udivmoddi4+0x27a>
 8000ebe:	ebb3 020e 	subs.w	r2, r3, lr
 8000ec2:	eb67 0701 	sbc.w	r7, r7, r1
 8000ec6:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000eca:	40f2      	lsrs	r2, r6
 8000ecc:	ea4c 0202 	orr.w	r2, ip, r2
 8000ed0:	40f7      	lsrs	r7, r6
 8000ed2:	e9c5 2700 	strd	r2, r7, [r5]
 8000ed6:	2600      	movs	r6, #0
 8000ed8:	4631      	mov	r1, r6
 8000eda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ede:	462e      	mov	r6, r5
 8000ee0:	4628      	mov	r0, r5
 8000ee2:	e70b      	b.n	8000cfc <__udivmoddi4+0xa0>
 8000ee4:	4606      	mov	r6, r0
 8000ee6:	e6e9      	b.n	8000cbc <__udivmoddi4+0x60>
 8000ee8:	4618      	mov	r0, r3
 8000eea:	e6fd      	b.n	8000ce8 <__udivmoddi4+0x8c>
 8000eec:	4543      	cmp	r3, r8
 8000eee:	d2e5      	bcs.n	8000ebc <__udivmoddi4+0x260>
 8000ef0:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ef4:	eb69 0104 	sbc.w	r1, r9, r4
 8000ef8:	3801      	subs	r0, #1
 8000efa:	e7df      	b.n	8000ebc <__udivmoddi4+0x260>
 8000efc:	4608      	mov	r0, r1
 8000efe:	e7d2      	b.n	8000ea6 <__udivmoddi4+0x24a>
 8000f00:	4660      	mov	r0, ip
 8000f02:	e78d      	b.n	8000e20 <__udivmoddi4+0x1c4>
 8000f04:	4681      	mov	r9, r0
 8000f06:	e7b9      	b.n	8000e7c <__udivmoddi4+0x220>
 8000f08:	4666      	mov	r6, ip
 8000f0a:	e775      	b.n	8000df8 <__udivmoddi4+0x19c>
 8000f0c:	4630      	mov	r0, r6
 8000f0e:	e74a      	b.n	8000da6 <__udivmoddi4+0x14a>
 8000f10:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f14:	4439      	add	r1, r7
 8000f16:	e713      	b.n	8000d40 <__udivmoddi4+0xe4>
 8000f18:	3802      	subs	r0, #2
 8000f1a:	443c      	add	r4, r7
 8000f1c:	e724      	b.n	8000d68 <__udivmoddi4+0x10c>
 8000f1e:	bf00      	nop

08000f20 <__aeabi_idiv0>:
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop

08000f24 <buzzer>:

#include "board_lib.h"
#include "bsp_buzzer.h"

void buzzer(uint16_t freq)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	80fb      	strh	r3, [r7, #6]
	if (freq == 0)
 8000f2e:	88fb      	ldrh	r3, [r7, #6]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d104      	bne.n	8000f3e <buzzer+0x1a>
	{
		htim12.Instance->CCR1 = 0;
 8000f34:	4b0b      	ldr	r3, [pc, #44]	; (8000f64 <buzzer+0x40>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	2200      	movs	r2, #0
 8000f3a:	635a      	str	r2, [r3, #52]	; 0x34
	else
	{
		__HAL_TIM_SET_PRESCALER(&htim12, (84 * 500/freq));
		htim12.Instance->CCR1 = 500;
	}
}
 8000f3c:	e00c      	b.n	8000f58 <buzzer+0x34>
		__HAL_TIM_SET_PRESCALER(&htim12, (84 * 500/freq));
 8000f3e:	88fb      	ldrh	r3, [r7, #6]
 8000f40:	f24a 4210 	movw	r2, #42000	; 0xa410
 8000f44:	fb92 f2f3 	sdiv	r2, r2, r3
 8000f48:	4b06      	ldr	r3, [pc, #24]	; (8000f64 <buzzer+0x40>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	629a      	str	r2, [r3, #40]	; 0x28
		htim12.Instance->CCR1 = 500;
 8000f4e:	4b05      	ldr	r3, [pc, #20]	; (8000f64 <buzzer+0x40>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000f56:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000f58:	bf00      	nop
 8000f5a:	370c      	adds	r7, #12
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr
 8000f64:	20009a8c 	.word	0x20009a8c

08000f68 <buzzer_init>:


void buzzer_init()
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
	  HAL_TIM_PWM_Start(&htim12,TIM_CHANNEL_1);
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	4804      	ldr	r0, [pc, #16]	; (8000f80 <buzzer_init+0x18>)
 8000f70:	f005 fbfe 	bl	8006770 <HAL_TIM_PWM_Start>
	  htim12.Instance->CCR1 = 0;
 8000f74:	4b02      	ldr	r3, [pc, #8]	; (8000f80 <buzzer_init+0x18>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	2200      	movs	r2, #0
 8000f7a:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000f7c:	bf00      	nop
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	20009a8c 	.word	0x20009a8c

08000f84 <HAL_CAN_RxFifo0MsgPendingCallback>:

/**
 * HAL internal callback function that calls abstracted ISR for ease of use.
 * Define can_ISR() elsewhere in code to define behaviour of CAN receive ISR.
 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
	can_ISR(hcan);
 8000f8c:	6878      	ldr	r0, [r7, #4]
 8000f8e:	f001 fa83 	bl	8002498 <can_ISR>
}
 8000f92:	bf00      	nop
 8000f94:	3708      	adds	r7, #8
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}

08000f9a <can_get_msg>:

HAL_StatusTypeDef can_get_msg(CAN_HandleTypeDef *hcan, CAN_RxHeaderTypeDef *rx_msg_header, uint8_t *rx_buffer)
{
 8000f9a:	b580      	push	{r7, lr}
 8000f9c:	b084      	sub	sp, #16
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	60f8      	str	r0, [r7, #12]
 8000fa2:	60b9      	str	r1, [r7, #8]
 8000fa4:	607a      	str	r2, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, rx_msg_header, rx_buffer);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	68ba      	ldr	r2, [r7, #8]
 8000faa:	2100      	movs	r1, #0
 8000fac:	68f8      	ldr	r0, [r7, #12]
 8000fae:	f003 fca2 	bl	80048f6 <HAL_CAN_GetRxMessage>
	return HAL_OK;
 8000fb2:	2300      	movs	r3, #0
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	3710      	adds	r7, #16
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}

08000fbc <can_start>:


/**
 * CAN1 and CAN2 are handled slightly differently.
 */
void can_start(CAN_HandleTypeDef *hcan) {
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b08c      	sub	sp, #48	; 0x30
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
    CAN_FilterTypeDef can_filter_st = {0};
 8000fc4:	f107 0308 	add.w	r3, r7, #8
 8000fc8:	2228      	movs	r2, #40	; 0x28
 8000fca:	2100      	movs	r1, #0
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f00a fe5f 	bl	800bc90 <memset>
    can_filter_st.FilterActivation = ENABLE;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	62bb      	str	r3, [r7, #40]	; 0x28
	can_filter_st.FilterMode = CAN_FILTERMODE_IDMASK;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	623b      	str	r3, [r7, #32]
	can_filter_st.FilterScale = CAN_FILTERSCALE_32BIT;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	627b      	str	r3, [r7, #36]	; 0x24
	can_filter_st.FilterIdHigh = 0x0000;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	60bb      	str	r3, [r7, #8]
	can_filter_st.FilterIdLow = 0x0000;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	60fb      	str	r3, [r7, #12]
	can_filter_st.FilterMaskIdHigh = 0x0000;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	613b      	str	r3, [r7, #16]
	can_filter_st.FilterMaskIdLow = 0x0000;
 8000fea:	2300      	movs	r3, #0
 8000fec:	617b      	str	r3, [r7, #20]
    can_filter_st.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	61bb      	str	r3, [r7, #24]
    // can_filter_st.FilterFIFOAssignment = CAN_RX_FIFO1; // Uncomment line if using RX1 queue as well.

	if (hcan->Instance == CAN1) {
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4a10      	ldr	r2, [pc, #64]	; (8001038 <can_start+0x7c>)
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	d102      	bne.n	8001002 <can_start+0x46>
	    can_filter_st.FilterBank = 0;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	61fb      	str	r3, [r7, #28]
 8001000:	e008      	b.n	8001014 <can_start+0x58>
	} else if (hcan->Instance == CAN2) {
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4a0d      	ldr	r2, [pc, #52]	; (800103c <can_start+0x80>)
 8001008:	4293      	cmp	r3, r2
 800100a:	d103      	bne.n	8001014 <can_start+0x58>
		can_filter_st.SlaveStartFilterBank = 14;
 800100c:	230e      	movs	r3, #14
 800100e:	62fb      	str	r3, [r7, #44]	; 0x2c
		can_filter_st.FilterBank = 14;
 8001010:	230e      	movs	r3, #14
 8001012:	61fb      	str	r3, [r7, #28]
	}

    HAL_CAN_ConfigFilter(hcan, &can_filter_st);
 8001014:	f107 0308 	add.w	r3, r7, #8
 8001018:	4619      	mov	r1, r3
 800101a:	6878      	ldr	r0, [r7, #4]
 800101c:	f003 fa6c 	bl	80044f8 <HAL_CAN_ConfigFilter>
    HAL_CAN_Start(hcan);
 8001020:	6878      	ldr	r0, [r7, #4]
 8001022:	f003 fb49 	bl	80046b8 <HAL_CAN_Start>
    HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001026:	2102      	movs	r1, #2
 8001028:	6878      	ldr	r0, [r7, #4]
 800102a:	f003 fd76 	bl	8004b1a <HAL_CAN_ActivateNotification>
    // HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO1_MSG_PENDING); // Uncomment line if using RX1 queue as well.
}
 800102e:	bf00      	nop
 8001030:	3730      	adds	r7, #48	; 0x30
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	40006400 	.word	0x40006400
 800103c:	40006800 	.word	0x40006800

08001040 <dbus_remote_start>:
/**
 * This function starts the circular DMA for receiving on a UART port. It is specifically
 * written for the UART1 port for DBUS interface from the controller.
 */
HAL_StatusTypeDef dbus_remote_start(uint8_t *pData)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b086      	sub	sp, #24
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
	UART_HandleTypeDef *huart = &DBUS_UART;
 8001048:	4b33      	ldr	r3, [pc, #204]	; (8001118 <dbus_remote_start+0xd8>)
 800104a:	617b      	str	r3, [r7, #20]
	uint32_t *tmp;

	/* Check that a Rx process is not already ongoing */
	if (huart->RxState == HAL_UART_STATE_READY) {
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001052:	b2db      	uxtb	r3, r3
 8001054:	2b20      	cmp	r3, #32
 8001056:	d15a      	bne.n	800110e <dbus_remote_start+0xce>
		if ((pData == NULL) || (REMOTE_DATA_SIZE == 0U)) {
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d101      	bne.n	8001062 <dbus_remote_start+0x22>
			return HAL_ERROR;
 800105e:	2301      	movs	r3, #1
 8001060:	e056      	b.n	8001110 <dbus_remote_start+0xd0>
		}

		/* Process Locked */
		__HAL_LOCK(huart);
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001068:	2b01      	cmp	r3, #1
 800106a:	d101      	bne.n	8001070 <dbus_remote_start+0x30>
 800106c:	2302      	movs	r3, #2
 800106e:	e04f      	b.n	8001110 <dbus_remote_start+0xd0>
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	2201      	movs	r2, #1
 8001074:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

		huart->pRxBuffPtr = pData;
 8001078:	687a      	ldr	r2, [r7, #4]
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	629a      	str	r2, [r3, #40]	; 0x28
		huart->RxXferSize = REMOTE_DATA_SIZE;
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	2212      	movs	r2, #18
 8001082:	859a      	strh	r2, [r3, #44]	; 0x2c

		huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	2200      	movs	r2, #0
 8001088:	63da      	str	r2, [r3, #60]	; 0x3c
		huart->RxState = HAL_UART_STATE_BUSY_RX;
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	2222      	movs	r2, #34	; 0x22
 800108e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

		/* Set the UART DMA transfer complete callback */
		huart->hdmarx->XferCpltCallback = dbus_remote_ISR;
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001096:	4a21      	ldr	r2, [pc, #132]	; (800111c <dbus_remote_start+0xdc>)
 8001098:	63da      	str	r2, [r3, #60]	; 0x3c

		/* Set the DMA abort callback */
		huart->hdmarx->XferAbortCallback = NULL;
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800109e:	2200      	movs	r2, #0
 80010a0:	651a      	str	r2, [r3, #80]	; 0x50

		/* Enable the DMA stream */
		tmp = (uint32_t *)&pData;
 80010a2:	1d3b      	adds	r3, r7, #4
 80010a4:	613b      	str	r3, [r7, #16]
		HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, REMOTE_DATA_SIZE);
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	3304      	adds	r3, #4
 80010b0:	4619      	mov	r1, r3
 80010b2:	693b      	ldr	r3, [r7, #16]
 80010b4:	681a      	ldr	r2, [r3, #0]
 80010b6:	2312      	movs	r3, #18
 80010b8:	f004 f93c 	bl	8005334 <HAL_DMA_Start_IT>

		/* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
		__HAL_UART_CLEAR_OREFLAG(huart);
 80010bc:	2300      	movs	r3, #0
 80010be:	60fb      	str	r3, [r7, #12]
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	60fb      	str	r3, [r7, #12]
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	60fb      	str	r3, [r7, #12]
 80010d0:	68fb      	ldr	r3, [r7, #12]

		/* Process Unlocked */
		__HAL_UNLOCK(huart);
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	2200      	movs	r2, #0
 80010d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

		/* Enable the UART Parity Error Interrupt */
		SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	68da      	ldr	r2, [r3, #12]
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80010e8:	60da      	str	r2, [r3, #12]

		/* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
		SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80010ea:	697b      	ldr	r3, [r7, #20]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	695a      	ldr	r2, [r3, #20]
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f042 0201 	orr.w	r2, r2, #1
 80010f8:	615a      	str	r2, [r3, #20]

		/* Enable the DMA transfer for the receiver request by setting the DMAR bit
	    in the UART CR3 register */
		SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	695a      	ldr	r2, [r3, #20]
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001108:	615a      	str	r2, [r3, #20]

		return HAL_OK;
 800110a:	2300      	movs	r3, #0
 800110c:	e000      	b.n	8001110 <dbus_remote_start+0xd0>
	} else {
		return HAL_BUSY;
 800110e:	2302      	movs	r3, #2
	}
}
 8001110:	4618      	mov	r0, r3
 8001112:	3718      	adds	r7, #24
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	20009c2c 	.word	0x20009c2c
 800111c:	08003c85 	.word	0x08003c85

08001120 <GPIO_ToggleBits>:
 *      Author: Kai Yang
 */

#include "bsp_led.h"

void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin){
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
 8001128:	460b      	mov	r3, r1
 800112a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  /* points to address of GPIOx register and does bitwise XOR with bit GPIO_Pin */
  GPIOx->ODR ^= GPIO_Pin;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	695a      	ldr	r2, [r3, #20]
 8001130:	887b      	ldrh	r3, [r7, #2]
 8001132:	405a      	eors	r2, r3
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	615a      	str	r2, [r3, #20]
}
 8001138:	bf00      	nop
 800113a:	370c      	adds	r7, #12
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr

08001144 <led_green_off>:

/* calls HAL library function to directly write pin.             */
/* LEDs are active low, so SET (1) == off, while RESET (0) == on */
/* Definitions for LED port and pins are given in main.h file    */
void led_green_off(void){
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_SET);
 8001148:	2201      	movs	r2, #1
 800114a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800114e:	4802      	ldr	r0, [pc, #8]	; (8001158 <led_green_off+0x14>)
 8001150:	f004 fd80 	bl	8005c54 <HAL_GPIO_WritePin>
}
 8001154:	bf00      	nop
 8001156:	bd80      	pop	{r7, pc}
 8001158:	40021400 	.word	0x40021400

0800115c <led_on>:

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_SET);
}

void led_on(void){
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);
 8001160:	2200      	movs	r2, #0
 8001162:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001166:	4805      	ldr	r0, [pc, #20]	; (800117c <led_on+0x20>)
 8001168:	f004 fd74 	bl	8005c54 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, GPIO_PIN_RESET);
 800116c:	2200      	movs	r2, #0
 800116e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001172:	4803      	ldr	r0, [pc, #12]	; (8001180 <led_on+0x24>)
 8001174:	f004 fd6e 	bl	8005c54 <HAL_GPIO_WritePin>
}
 8001178:	bf00      	nop
 800117a:	bd80      	pop	{r7, pc}
 800117c:	40021000 	.word	0x40021000
 8001180:	40021400 	.word	0x40021400

08001184 <led_toggle>:
void led_toggle(void){
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
	GPIO_ToggleBits(GPIOE, GPIO_PIN_11);
 8001188:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800118c:	4804      	ldr	r0, [pc, #16]	; (80011a0 <led_toggle+0x1c>)
 800118e:	f7ff ffc7 	bl	8001120 <GPIO_ToggleBits>
	GPIO_ToggleBits(GPIOF, GPIO_PIN_14);
 8001192:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001196:	4803      	ldr	r0, [pc, #12]	; (80011a4 <led_toggle+0x20>)
 8001198:	f7ff ffc2 	bl	8001120 <GPIO_ToggleBits>
}
 800119c:	bf00      	nop
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	40021000 	.word	0x40021000
 80011a4:	40021400 	.word	0x40021400

080011a8 <HAL_UART_RxCpltCallback>:
{
	HAL_UART_Transmit(huart, tx_buffer, buffer_size, timeout);
	return HAL_OK;
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle) {
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
	usart_ISR(UartHandle);
 80011b0:	6878      	ldr	r0, [r7, #4]
 80011b2:	f001 fb81 	bl	80028b8 <usart_ISR>
}
 80011b6:	bf00      	nop
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
	...

080011c0 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 80011c4:	4b17      	ldr	r3, [pc, #92]	; (8001224 <MX_CAN1_Init+0x64>)
 80011c6:	4a18      	ldr	r2, [pc, #96]	; (8001228 <MX_CAN1_Init+0x68>)
 80011c8:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 80011ca:	4b16      	ldr	r3, [pc, #88]	; (8001224 <MX_CAN1_Init+0x64>)
 80011cc:	2203      	movs	r2, #3
 80011ce:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80011d0:	4b14      	ldr	r3, [pc, #80]	; (8001224 <MX_CAN1_Init+0x64>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80011d6:	4b13      	ldr	r3, [pc, #76]	; (8001224 <MX_CAN1_Init+0x64>)
 80011d8:	2200      	movs	r2, #0
 80011da:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_9TQ;
 80011dc:	4b11      	ldr	r3, [pc, #68]	; (8001224 <MX_CAN1_Init+0x64>)
 80011de:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80011e2:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 80011e4:	4b0f      	ldr	r3, [pc, #60]	; (8001224 <MX_CAN1_Init+0x64>)
 80011e6:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 80011ea:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80011ec:	4b0d      	ldr	r3, [pc, #52]	; (8001224 <MX_CAN1_Init+0x64>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80011f2:	4b0c      	ldr	r3, [pc, #48]	; (8001224 <MX_CAN1_Init+0x64>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80011f8:	4b0a      	ldr	r3, [pc, #40]	; (8001224 <MX_CAN1_Init+0x64>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80011fe:	4b09      	ldr	r3, [pc, #36]	; (8001224 <MX_CAN1_Init+0x64>)
 8001200:	2200      	movs	r2, #0
 8001202:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001204:	4b07      	ldr	r3, [pc, #28]	; (8001224 <MX_CAN1_Init+0x64>)
 8001206:	2200      	movs	r2, #0
 8001208:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800120a:	4b06      	ldr	r3, [pc, #24]	; (8001224 <MX_CAN1_Init+0x64>)
 800120c:	2200      	movs	r2, #0
 800120e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001210:	4804      	ldr	r0, [pc, #16]	; (8001224 <MX_CAN1_Init+0x64>)
 8001212:	f003 f875 	bl	8004300 <HAL_CAN_Init>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 800121c:	f000 fb54 	bl	80018c8 <Error_Handler>
  }

}
 8001220:	bf00      	nop
 8001222:	bd80      	pop	{r7, pc}
 8001224:	20009898 	.word	0x20009898
 8001228:	40006400 	.word	0x40006400

0800122c <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0

  hcan2.Instance = CAN2;
 8001230:	4b17      	ldr	r3, [pc, #92]	; (8001290 <MX_CAN2_Init+0x64>)
 8001232:	4a18      	ldr	r2, [pc, #96]	; (8001294 <MX_CAN2_Init+0x68>)
 8001234:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 3;
 8001236:	4b16      	ldr	r3, [pc, #88]	; (8001290 <MX_CAN2_Init+0x64>)
 8001238:	2203      	movs	r2, #3
 800123a:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 800123c:	4b14      	ldr	r3, [pc, #80]	; (8001290 <MX_CAN2_Init+0x64>)
 800123e:	2200      	movs	r2, #0
 8001240:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001242:	4b13      	ldr	r3, [pc, #76]	; (8001290 <MX_CAN2_Init+0x64>)
 8001244:	2200      	movs	r2, #0
 8001246:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_9TQ;
 8001248:	4b11      	ldr	r3, [pc, #68]	; (8001290 <MX_CAN2_Init+0x64>)
 800124a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800124e:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_4TQ;
 8001250:	4b0f      	ldr	r3, [pc, #60]	; (8001290 <MX_CAN2_Init+0x64>)
 8001252:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8001256:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8001258:	4b0d      	ldr	r3, [pc, #52]	; (8001290 <MX_CAN2_Init+0x64>)
 800125a:	2200      	movs	r2, #0
 800125c:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 800125e:	4b0c      	ldr	r3, [pc, #48]	; (8001290 <MX_CAN2_Init+0x64>)
 8001260:	2200      	movs	r2, #0
 8001262:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8001264:	4b0a      	ldr	r3, [pc, #40]	; (8001290 <MX_CAN2_Init+0x64>)
 8001266:	2200      	movs	r2, #0
 8001268:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 800126a:	4b09      	ldr	r3, [pc, #36]	; (8001290 <MX_CAN2_Init+0x64>)
 800126c:	2200      	movs	r2, #0
 800126e:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8001270:	4b07      	ldr	r3, [pc, #28]	; (8001290 <MX_CAN2_Init+0x64>)
 8001272:	2200      	movs	r2, #0
 8001274:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8001276:	4b06      	ldr	r3, [pc, #24]	; (8001290 <MX_CAN2_Init+0x64>)
 8001278:	2200      	movs	r2, #0
 800127a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 800127c:	4804      	ldr	r0, [pc, #16]	; (8001290 <MX_CAN2_Init+0x64>)
 800127e:	f003 f83f 	bl	8004300 <HAL_CAN_Init>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8001288:	f000 fb1e 	bl	80018c8 <Error_Handler>
  }

}
 800128c:	bf00      	nop
 800128e:	bd80      	pop	{r7, pc}
 8001290:	20009870 	.word	0x20009870
 8001294:	40006800 	.word	0x40006800

08001298 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b08c      	sub	sp, #48	; 0x30
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a0:	f107 031c 	add.w	r3, r7, #28
 80012a4:	2200      	movs	r2, #0
 80012a6:	601a      	str	r2, [r3, #0]
 80012a8:	605a      	str	r2, [r3, #4]
 80012aa:	609a      	str	r2, [r3, #8]
 80012ac:	60da      	str	r2, [r3, #12]
 80012ae:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a4a      	ldr	r2, [pc, #296]	; (80013e0 <HAL_CAN_MspInit+0x148>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d13d      	bne.n	8001336 <HAL_CAN_MspInit+0x9e>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 80012ba:	4b4a      	ldr	r3, [pc, #296]	; (80013e4 <HAL_CAN_MspInit+0x14c>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	3301      	adds	r3, #1
 80012c0:	4a48      	ldr	r2, [pc, #288]	; (80013e4 <HAL_CAN_MspInit+0x14c>)
 80012c2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80012c4:	4b47      	ldr	r3, [pc, #284]	; (80013e4 <HAL_CAN_MspInit+0x14c>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	d10d      	bne.n	80012e8 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80012cc:	2300      	movs	r3, #0
 80012ce:	61bb      	str	r3, [r7, #24]
 80012d0:	4b45      	ldr	r3, [pc, #276]	; (80013e8 <HAL_CAN_MspInit+0x150>)
 80012d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d4:	4a44      	ldr	r2, [pc, #272]	; (80013e8 <HAL_CAN_MspInit+0x150>)
 80012d6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80012da:	6413      	str	r3, [r2, #64]	; 0x40
 80012dc:	4b42      	ldr	r3, [pc, #264]	; (80013e8 <HAL_CAN_MspInit+0x150>)
 80012de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012e4:	61bb      	str	r3, [r7, #24]
 80012e6:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012e8:	2300      	movs	r3, #0
 80012ea:	617b      	str	r3, [r7, #20]
 80012ec:	4b3e      	ldr	r3, [pc, #248]	; (80013e8 <HAL_CAN_MspInit+0x150>)
 80012ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f0:	4a3d      	ldr	r2, [pc, #244]	; (80013e8 <HAL_CAN_MspInit+0x150>)
 80012f2:	f043 0308 	orr.w	r3, r3, #8
 80012f6:	6313      	str	r3, [r2, #48]	; 0x30
 80012f8:	4b3b      	ldr	r3, [pc, #236]	; (80013e8 <HAL_CAN_MspInit+0x150>)
 80012fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fc:	f003 0308 	and.w	r3, r3, #8
 8001300:	617b      	str	r3, [r7, #20]
 8001302:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001304:	2303      	movs	r3, #3
 8001306:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001308:	2302      	movs	r3, #2
 800130a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130c:	2300      	movs	r3, #0
 800130e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001310:	2303      	movs	r3, #3
 8001312:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001314:	2309      	movs	r3, #9
 8001316:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001318:	f107 031c 	add.w	r3, r7, #28
 800131c:	4619      	mov	r1, r3
 800131e:	4833      	ldr	r0, [pc, #204]	; (80013ec <HAL_CAN_MspInit+0x154>)
 8001320:	f004 faec 	bl	80058fc <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8001324:	2200      	movs	r2, #0
 8001326:	2105      	movs	r1, #5
 8001328:	2014      	movs	r0, #20
 800132a:	f003 ff2b 	bl	8005184 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800132e:	2014      	movs	r0, #20
 8001330:	f003 ff44 	bl	80051bc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 8001334:	e050      	b.n	80013d8 <HAL_CAN_MspInit+0x140>
  else if(canHandle->Instance==CAN2)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4a2d      	ldr	r2, [pc, #180]	; (80013f0 <HAL_CAN_MspInit+0x158>)
 800133c:	4293      	cmp	r3, r2
 800133e:	d14b      	bne.n	80013d8 <HAL_CAN_MspInit+0x140>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8001340:	2300      	movs	r3, #0
 8001342:	613b      	str	r3, [r7, #16]
 8001344:	4b28      	ldr	r3, [pc, #160]	; (80013e8 <HAL_CAN_MspInit+0x150>)
 8001346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001348:	4a27      	ldr	r2, [pc, #156]	; (80013e8 <HAL_CAN_MspInit+0x150>)
 800134a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800134e:	6413      	str	r3, [r2, #64]	; 0x40
 8001350:	4b25      	ldr	r3, [pc, #148]	; (80013e8 <HAL_CAN_MspInit+0x150>)
 8001352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001354:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001358:	613b      	str	r3, [r7, #16]
 800135a:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 800135c:	4b21      	ldr	r3, [pc, #132]	; (80013e4 <HAL_CAN_MspInit+0x14c>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	3301      	adds	r3, #1
 8001362:	4a20      	ldr	r2, [pc, #128]	; (80013e4 <HAL_CAN_MspInit+0x14c>)
 8001364:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001366:	4b1f      	ldr	r3, [pc, #124]	; (80013e4 <HAL_CAN_MspInit+0x14c>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	2b01      	cmp	r3, #1
 800136c:	d10d      	bne.n	800138a <HAL_CAN_MspInit+0xf2>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800136e:	2300      	movs	r3, #0
 8001370:	60fb      	str	r3, [r7, #12]
 8001372:	4b1d      	ldr	r3, [pc, #116]	; (80013e8 <HAL_CAN_MspInit+0x150>)
 8001374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001376:	4a1c      	ldr	r2, [pc, #112]	; (80013e8 <HAL_CAN_MspInit+0x150>)
 8001378:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800137c:	6413      	str	r3, [r2, #64]	; 0x40
 800137e:	4b1a      	ldr	r3, [pc, #104]	; (80013e8 <HAL_CAN_MspInit+0x150>)
 8001380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001382:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001386:	60fb      	str	r3, [r7, #12]
 8001388:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800138a:	2300      	movs	r3, #0
 800138c:	60bb      	str	r3, [r7, #8]
 800138e:	4b16      	ldr	r3, [pc, #88]	; (80013e8 <HAL_CAN_MspInit+0x150>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001392:	4a15      	ldr	r2, [pc, #84]	; (80013e8 <HAL_CAN_MspInit+0x150>)
 8001394:	f043 0302 	orr.w	r3, r3, #2
 8001398:	6313      	str	r3, [r2, #48]	; 0x30
 800139a:	4b13      	ldr	r3, [pc, #76]	; (80013e8 <HAL_CAN_MspInit+0x150>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139e:	f003 0302 	and.w	r3, r3, #2
 80013a2:	60bb      	str	r3, [r7, #8]
 80013a4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80013a6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80013aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ac:	2302      	movs	r3, #2
 80013ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b0:	2300      	movs	r3, #0
 80013b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013b4:	2303      	movs	r3, #3
 80013b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 80013b8:	2309      	movs	r3, #9
 80013ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013bc:	f107 031c 	add.w	r3, r7, #28
 80013c0:	4619      	mov	r1, r3
 80013c2:	480c      	ldr	r0, [pc, #48]	; (80013f4 <HAL_CAN_MspInit+0x15c>)
 80013c4:	f004 fa9a 	bl	80058fc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 5, 0);
 80013c8:	2200      	movs	r2, #0
 80013ca:	2105      	movs	r1, #5
 80013cc:	2040      	movs	r0, #64	; 0x40
 80013ce:	f003 fed9 	bl	8005184 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 80013d2:	2040      	movs	r0, #64	; 0x40
 80013d4:	f003 fef2 	bl	80051bc <HAL_NVIC_EnableIRQ>
}
 80013d8:	bf00      	nop
 80013da:	3730      	adds	r7, #48	; 0x30
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	40006400 	.word	0x40006400
 80013e4:	200000b0 	.word	0x200000b0
 80013e8:	40023800 	.word	0x40023800
 80013ec:	40020c00 	.word	0x40020c00
 80013f0:	40006800 	.word	0x40006800
 80013f4:	40020400 	.word	0x40020400

080013f8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80013fe:	2300      	movs	r3, #0
 8001400:	607b      	str	r3, [r7, #4]
 8001402:	4b23      	ldr	r3, [pc, #140]	; (8001490 <MX_DMA_Init+0x98>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001406:	4a22      	ldr	r2, [pc, #136]	; (8001490 <MX_DMA_Init+0x98>)
 8001408:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800140c:	6313      	str	r3, [r2, #48]	; 0x30
 800140e:	4b20      	ldr	r3, [pc, #128]	; (8001490 <MX_DMA_Init+0x98>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001412:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001416:	607b      	str	r3, [r7, #4]
 8001418:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800141a:	2300      	movs	r3, #0
 800141c:	603b      	str	r3, [r7, #0]
 800141e:	4b1c      	ldr	r3, [pc, #112]	; (8001490 <MX_DMA_Init+0x98>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001422:	4a1b      	ldr	r2, [pc, #108]	; (8001490 <MX_DMA_Init+0x98>)
 8001424:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001428:	6313      	str	r3, [r2, #48]	; 0x30
 800142a:	4b19      	ldr	r3, [pc, #100]	; (8001490 <MX_DMA_Init+0x98>)
 800142c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001432:	603b      	str	r3, [r7, #0]
 8001434:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8001436:	2200      	movs	r2, #0
 8001438:	2105      	movs	r1, #5
 800143a:	200e      	movs	r0, #14
 800143c:	f003 fea2 	bl	8005184 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001440:	200e      	movs	r0, #14
 8001442:	f003 febb 	bl	80051bc <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8001446:	2200      	movs	r2, #0
 8001448:	2105      	movs	r1, #5
 800144a:	2039      	movs	r0, #57	; 0x39
 800144c:	f003 fe9a 	bl	8005184 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001450:	2039      	movs	r0, #57	; 0x39
 8001452:	f003 feb3 	bl	80051bc <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8001456:	2200      	movs	r2, #0
 8001458:	2105      	movs	r1, #5
 800145a:	203a      	movs	r0, #58	; 0x3a
 800145c:	f003 fe92 	bl	8005184 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001460:	203a      	movs	r0, #58	; 0x3a
 8001462:	f003 feab 	bl	80051bc <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8001466:	2200      	movs	r2, #0
 8001468:	2105      	movs	r1, #5
 800146a:	203b      	movs	r0, #59	; 0x3b
 800146c:	f003 fe8a 	bl	8005184 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001470:	203b      	movs	r0, #59	; 0x3b
 8001472:	f003 fea3 	bl	80051bc <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 5, 0);
 8001476:	2200      	movs	r2, #0
 8001478:	2105      	movs	r1, #5
 800147a:	203c      	movs	r0, #60	; 0x3c
 800147c:	f003 fe82 	bl	8005184 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8001480:	203c      	movs	r0, #60	; 0x3c
 8001482:	f003 fe9b 	bl	80051bc <HAL_NVIC_EnableIRQ>

}
 8001486:	bf00      	nop
 8001488:	3708      	adds	r7, #8
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	40023800 	.word	0x40023800

08001494 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
//	startup_task();
	gimbal_data_flag = osEventFlagsNew(NULL);
 8001498:	2000      	movs	r0, #0
 800149a:	f007 f949 	bl	8008730 <osEventFlagsNew>
 800149e:	4603      	mov	r3, r0
 80014a0:	4a21      	ldr	r2, [pc, #132]	; (8001528 <MX_FREERTOS_Init+0x94>)
 80014a2:	6013      	str	r3, [r2, #0]
	chassis_data_flag = osEventFlagsNew(NULL);
 80014a4:	2000      	movs	r0, #0
 80014a6:	f007 f943 	bl	8008730 <osEventFlagsNew>
 80014aa:	4603      	mov	r3, r0
 80014ac:	4a1f      	ldr	r2, [pc, #124]	; (800152c <MX_FREERTOS_Init+0x98>)
 80014ae:	6013      	str	r3, [r2, #0]
	gun_data_flag = osEventFlagsNew(NULL);
 80014b0:	2000      	movs	r0, #0
 80014b2:	f007 f93d 	bl	8008730 <osEventFlagsNew>
 80014b6:	4603      	mov	r3, r0
 80014b8:	4a1d      	ldr	r2, [pc, #116]	; (8001530 <MX_FREERTOS_Init+0x9c>)
 80014ba:	6013      	str	r3, [r2, #0]
	rc_data_flag = osEventFlagsNew(NULL);
 80014bc:	2000      	movs	r0, #0
 80014be:	f007 f937 	bl	8008730 <osEventFlagsNew>
 80014c2:	4603      	mov	r3, r0
 80014c4:	4a1b      	ldr	r2, [pc, #108]	; (8001534 <MX_FREERTOS_Init+0xa0>)
 80014c6:	6013      	str	r3, [r2, #0]
	control_data_flag = osEventFlagsNew(NULL);
 80014c8:	2000      	movs	r0, #0
 80014ca:	f007 f931 	bl	8008730 <osEventFlagsNew>
 80014ce:	4603      	mov	r3, r0
 80014d0:	4a19      	ldr	r2, [pc, #100]	; (8001538 <MX_FREERTOS_Init+0xa4>)
 80014d2:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
	sem_refUart = osSemaphoreNew(ISR_SEMAPHORE_COUNT, 0, NULL);
 80014d4:	2200      	movs	r2, #0
 80014d6:	2100      	movs	r1, #0
 80014d8:	2001      	movs	r0, #1
 80014da:	f007 fa8d 	bl	80089f8 <osSemaphoreNew>
 80014de:	4603      	mov	r3, r0
 80014e0:	4a16      	ldr	r2, [pc, #88]	; (800153c <MX_FREERTOS_Init+0xa8>)
 80014e2:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80014e4:	4a16      	ldr	r2, [pc, #88]	; (8001540 <MX_FREERTOS_Init+0xac>)
 80014e6:	2100      	movs	r1, #0
 80014e8:	4816      	ldr	r0, [pc, #88]	; (8001544 <MX_FREERTOS_Init+0xb0>)
 80014ea:	f007 f84d 	bl	8008588 <osThreadNew>
 80014ee:	4603      	mov	r3, r0
 80014f0:	4a15      	ldr	r2, [pc, #84]	; (8001548 <MX_FREERTOS_Init+0xb4>)
 80014f2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  //todo: adjust priorities
  //Threads creation
  	gimbal_control_task_handle   = osThreadNew(gimbal_control_task, NULL, &high2_priority_task_attributes);
 80014f4:	4a15      	ldr	r2, [pc, #84]	; (800154c <MX_FREERTOS_Init+0xb8>)
 80014f6:	2100      	movs	r1, #0
 80014f8:	4815      	ldr	r0, [pc, #84]	; (8001550 <MX_FREERTOS_Init+0xbc>)
 80014fa:	f007 f845 	bl	8008588 <osThreadNew>
 80014fe:	4603      	mov	r3, r0
 8001500:	4a14      	ldr	r2, [pc, #80]	; (8001554 <MX_FREERTOS_Init+0xc0>)
 8001502:	6013      	str	r3, [r2, #0]
  	movement_control_task_handle = osThreadNew(movement_control_task, NULL, &low2_priority_task_attributes);//run now
 8001504:	4a14      	ldr	r2, [pc, #80]	; (8001558 <MX_FREERTOS_Init+0xc4>)
 8001506:	2100      	movs	r1, #0
 8001508:	4814      	ldr	r0, [pc, #80]	; (800155c <MX_FREERTOS_Init+0xc8>)
 800150a:	f007 f83d 	bl	8008588 <osThreadNew>
 800150e:	4603      	mov	r3, r0
 8001510:	4a13      	ldr	r2, [pc, #76]	; (8001560 <MX_FREERTOS_Init+0xcc>)
 8001512:	6013      	str	r3, [r2, #0]
  	gun_control_task_handle = osThreadNew(gun_control_task, NULL, &low_priority_task_attributes);
 8001514:	4a13      	ldr	r2, [pc, #76]	; (8001564 <MX_FREERTOS_Init+0xd0>)
 8001516:	2100      	movs	r1, #0
 8001518:	4813      	ldr	r0, [pc, #76]	; (8001568 <MX_FREERTOS_Init+0xd4>)
 800151a:	f007 f835 	bl	8008588 <osThreadNew>
 800151e:	4603      	mov	r3, r0
 8001520:	4a12      	ldr	r2, [pc, #72]	; (800156c <MX_FREERTOS_Init+0xd8>)
 8001522:	6013      	str	r3, [r2, #0]
  	//todo: add event flags
	//Signals when a certain event has occurred

  /* USER CODE END RTOS_EVENTS */

}
 8001524:	bf00      	nop
 8001526:	bd80      	pop	{r7, pc}
 8001528:	200098cc 	.word	0x200098cc
 800152c:	200098e4 	.word	0x200098e4
 8001530:	200098d0 	.word	0x200098d0
 8001534:	200098c4 	.word	0x200098c4
 8001538:	200098d4 	.word	0x200098d4
 800153c:	200098e0 	.word	0x200098e0
 8001540:	0800ce3c 	.word	0x0800ce3c
 8001544:	08001571 	.word	0x08001571
 8001548:	200098c0 	.word	0x200098c0
 800154c:	0800ce18 	.word	0x0800ce18
 8001550:	08002959 	.word	0x08002959
 8001554:	200098e8 	.word	0x200098e8
 8001558:	0800cdf4 	.word	0x0800cdf4
 800155c:	080035f9 	.word	0x080035f9
 8001560:	200098c8 	.word	0x200098c8
 8001564:	0800cdd0 	.word	0x0800cdd0
 8001568:	08002e41 	.word	0x08002e41
 800156c:	200098d8 	.word	0x200098d8

08001570 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001578:	2001      	movs	r0, #1
 800157a:	f007 f8ab 	bl	80086d4 <osDelay>
 800157e:	e7fb      	b.n	8001578 <StartDefaultTask+0x8>

08001580 <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PA7   ------> SPI1_MOSI
*/
void MX_GPIO_Init(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b08c      	sub	sp, #48	; 0x30
 8001584:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001586:	f107 031c 	add.w	r3, r7, #28
 800158a:	2200      	movs	r2, #0
 800158c:	601a      	str	r2, [r3, #0]
 800158e:	605a      	str	r2, [r3, #4]
 8001590:	609a      	str	r2, [r3, #8]
 8001592:	60da      	str	r2, [r3, #12]
 8001594:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001596:	2300      	movs	r3, #0
 8001598:	61bb      	str	r3, [r7, #24]
 800159a:	4b74      	ldr	r3, [pc, #464]	; (800176c <MX_GPIO_Init+0x1ec>)
 800159c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159e:	4a73      	ldr	r2, [pc, #460]	; (800176c <MX_GPIO_Init+0x1ec>)
 80015a0:	f043 0310 	orr.w	r3, r3, #16
 80015a4:	6313      	str	r3, [r2, #48]	; 0x30
 80015a6:	4b71      	ldr	r3, [pc, #452]	; (800176c <MX_GPIO_Init+0x1ec>)
 80015a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015aa:	f003 0310 	and.w	r3, r3, #16
 80015ae:	61bb      	str	r3, [r7, #24]
 80015b0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015b2:	2300      	movs	r3, #0
 80015b4:	617b      	str	r3, [r7, #20]
 80015b6:	4b6d      	ldr	r3, [pc, #436]	; (800176c <MX_GPIO_Init+0x1ec>)
 80015b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ba:	4a6c      	ldr	r2, [pc, #432]	; (800176c <MX_GPIO_Init+0x1ec>)
 80015bc:	f043 0302 	orr.w	r3, r3, #2
 80015c0:	6313      	str	r3, [r2, #48]	; 0x30
 80015c2:	4b6a      	ldr	r3, [pc, #424]	; (800176c <MX_GPIO_Init+0x1ec>)
 80015c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c6:	f003 0302 	and.w	r3, r3, #2
 80015ca:	617b      	str	r3, [r7, #20]
 80015cc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80015ce:	2300      	movs	r3, #0
 80015d0:	613b      	str	r3, [r7, #16]
 80015d2:	4b66      	ldr	r3, [pc, #408]	; (800176c <MX_GPIO_Init+0x1ec>)
 80015d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d6:	4a65      	ldr	r2, [pc, #404]	; (800176c <MX_GPIO_Init+0x1ec>)
 80015d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015dc:	6313      	str	r3, [r2, #48]	; 0x30
 80015de:	4b63      	ldr	r3, [pc, #396]	; (800176c <MX_GPIO_Init+0x1ec>)
 80015e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015e6:	613b      	str	r3, [r7, #16]
 80015e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015ea:	2300      	movs	r3, #0
 80015ec:	60fb      	str	r3, [r7, #12]
 80015ee:	4b5f      	ldr	r3, [pc, #380]	; (800176c <MX_GPIO_Init+0x1ec>)
 80015f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f2:	4a5e      	ldr	r2, [pc, #376]	; (800176c <MX_GPIO_Init+0x1ec>)
 80015f4:	f043 0308 	orr.w	r3, r3, #8
 80015f8:	6313      	str	r3, [r2, #48]	; 0x30
 80015fa:	4b5c      	ldr	r3, [pc, #368]	; (800176c <MX_GPIO_Init+0x1ec>)
 80015fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fe:	f003 0308 	and.w	r3, r3, #8
 8001602:	60fb      	str	r3, [r7, #12]
 8001604:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001606:	2300      	movs	r3, #0
 8001608:	60bb      	str	r3, [r7, #8]
 800160a:	4b58      	ldr	r3, [pc, #352]	; (800176c <MX_GPIO_Init+0x1ec>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160e:	4a57      	ldr	r2, [pc, #348]	; (800176c <MX_GPIO_Init+0x1ec>)
 8001610:	f043 0301 	orr.w	r3, r3, #1
 8001614:	6313      	str	r3, [r2, #48]	; 0x30
 8001616:	4b55      	ldr	r3, [pc, #340]	; (800176c <MX_GPIO_Init+0x1ec>)
 8001618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161a:	f003 0301 	and.w	r3, r3, #1
 800161e:	60bb      	str	r3, [r7, #8]
 8001620:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001622:	2300      	movs	r3, #0
 8001624:	607b      	str	r3, [r7, #4]
 8001626:	4b51      	ldr	r3, [pc, #324]	; (800176c <MX_GPIO_Init+0x1ec>)
 8001628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162a:	4a50      	ldr	r2, [pc, #320]	; (800176c <MX_GPIO_Init+0x1ec>)
 800162c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001630:	6313      	str	r3, [r2, #48]	; 0x30
 8001632:	4b4e      	ldr	r3, [pc, #312]	; (800176c <MX_GPIO_Init+0x1ec>)
 8001634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001636:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800163a:	607b      	str	r3, [r7, #4]
 800163c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800163e:	2300      	movs	r3, #0
 8001640:	603b      	str	r3, [r7, #0]
 8001642:	4b4a      	ldr	r3, [pc, #296]	; (800176c <MX_GPIO_Init+0x1ec>)
 8001644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001646:	4a49      	ldr	r2, [pc, #292]	; (800176c <MX_GPIO_Init+0x1ec>)
 8001648:	f043 0320 	orr.w	r3, r3, #32
 800164c:	6313      	str	r3, [r2, #48]	; 0x30
 800164e:	4b47      	ldr	r3, [pc, #284]	; (800176c <MX_GPIO_Init+0x1ec>)
 8001650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001652:	f003 0320 	and.w	r3, r3, #32
 8001656:	603b      	str	r3, [r7, #0]
 8001658:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, PWR_A_Pin|PWR_B_Pin|PWR_C_Pin|PWR_D_Pin, GPIO_PIN_SET);
 800165a:	2201      	movs	r2, #1
 800165c:	213c      	movs	r1, #60	; 0x3c
 800165e:	4844      	ldr	r0, [pc, #272]	; (8001770 <MX_GPIO_Init+0x1f0>)
 8001660:	f004 faf8 	bl	8005c54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6|LED_G_Pin, GPIO_PIN_RESET);
 8001664:	2200      	movs	r2, #0
 8001666:	f244 0140 	movw	r1, #16448	; 0x4040
 800166a:	4842      	ldr	r0, [pc, #264]	; (8001774 <MX_GPIO_Init+0x1f4>)
 800166c:	f004 faf2 	bl	8005c54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_RESET);
 8001670:	2200      	movs	r2, #0
 8001672:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001676:	4840      	ldr	r0, [pc, #256]	; (8001778 <MX_GPIO_Init+0x1f8>)
 8001678:	f004 faec 	bl	8005c54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IST_INT_Pin;
 800167c:	2308      	movs	r3, #8
 800167e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001680:	4b3e      	ldr	r3, [pc, #248]	; (800177c <MX_GPIO_Init+0x1fc>)
 8001682:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001684:	2302      	movs	r3, #2
 8001686:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(IST_INT_GPIO_Port, &GPIO_InitStruct);
 8001688:	f107 031c 	add.w	r3, r7, #28
 800168c:	4619      	mov	r1, r3
 800168e:	483a      	ldr	r0, [pc, #232]	; (8001778 <MX_GPIO_Init+0x1f8>)
 8001690:	f004 f934 	bl	80058fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MPU_INT_Pin;
 8001694:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001698:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800169a:	4b38      	ldr	r3, [pc, #224]	; (800177c <MX_GPIO_Init+0x1fc>)
 800169c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800169e:	2302      	movs	r3, #2
 80016a0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MPU_INT_GPIO_Port, &GPIO_InitStruct);
 80016a2:	f107 031c 	add.w	r3, r7, #28
 80016a6:	4619      	mov	r1, r3
 80016a8:	4835      	ldr	r0, [pc, #212]	; (8001780 <MX_GPIO_Init+0x200>)
 80016aa:	f004 f927 	bl	80058fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin PHPin */
  GPIO_InitStruct.Pin = PWR_A_Pin|PWR_B_Pin|PWR_C_Pin|PWR_D_Pin;
 80016ae:	233c      	movs	r3, #60	; 0x3c
 80016b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016b2:	2301      	movs	r3, #1
 80016b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016b6:	2301      	movs	r3, #1
 80016b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ba:	2300      	movs	r3, #0
 80016bc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80016be:	f107 031c 	add.w	r3, r7, #28
 80016c2:	4619      	mov	r1, r3
 80016c4:	482a      	ldr	r0, [pc, #168]	; (8001770 <MX_GPIO_Init+0x1f0>)
 80016c6:	f004 f919 	bl	80058fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PF6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80016ca:	2340      	movs	r3, #64	; 0x40
 80016cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ce:	2301      	movs	r3, #1
 80016d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80016d2:	2302      	movs	r3, #2
 80016d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80016d6:	2301      	movs	r3, #1
 80016d8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80016da:	f107 031c 	add.w	r3, r7, #28
 80016de:	4619      	mov	r1, r3
 80016e0:	4824      	ldr	r0, [pc, #144]	; (8001774 <MX_GPIO_Init+0x1f4>)
 80016e2:	f004 f90b 	bl	80058fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_R_Pin;
 80016e6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80016ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ec:	2301      	movs	r3, #1
 80016ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f0:	2300      	movs	r3, #0
 80016f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f4:	2300      	movs	r3, #0
 80016f6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_R_GPIO_Port, &GPIO_InitStruct);
 80016f8:	f107 031c 	add.w	r3, r7, #28
 80016fc:	4619      	mov	r1, r3
 80016fe:	481e      	ldr	r0, [pc, #120]	; (8001778 <MX_GPIO_Init+0x1f8>)
 8001700:	f004 f8fc 	bl	80058fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001704:	2380      	movs	r3, #128	; 0x80
 8001706:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001708:	2302      	movs	r3, #2
 800170a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170c:	2300      	movs	r3, #0
 800170e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001710:	2303      	movs	r3, #3
 8001712:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001714:	2305      	movs	r3, #5
 8001716:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001718:	f107 031c 	add.w	r3, r7, #28
 800171c:	4619      	mov	r1, r3
 800171e:	4819      	ldr	r0, [pc, #100]	; (8001784 <MX_GPIO_Init+0x204>)
 8001720:	f004 f8ec 	bl	80058fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_G_Pin;
 8001724:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001728:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800172a:	2301      	movs	r3, #1
 800172c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172e:	2300      	movs	r3, #0
 8001730:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001732:	2300      	movs	r3, #0
 8001734:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_G_GPIO_Port, &GPIO_InitStruct);
 8001736:	f107 031c 	add.w	r3, r7, #28
 800173a:	4619      	mov	r1, r3
 800173c:	480d      	ldr	r0, [pc, #52]	; (8001774 <MX_GPIO_Init+0x1f4>)
 800173e:	f004 f8dd 	bl	80058fc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8001742:	2200      	movs	r2, #0
 8001744:	2105      	movs	r1, #5
 8001746:	2009      	movs	r0, #9
 8001748:	f003 fd1c 	bl	8005184 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800174c:	2009      	movs	r0, #9
 800174e:	f003 fd35 	bl	80051bc <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8001752:	2200      	movs	r2, #0
 8001754:	2105      	movs	r1, #5
 8001756:	2017      	movs	r0, #23
 8001758:	f003 fd14 	bl	8005184 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800175c:	2017      	movs	r0, #23
 800175e:	f003 fd2d 	bl	80051bc <HAL_NVIC_EnableIRQ>

}
 8001762:	bf00      	nop
 8001764:	3730      	adds	r7, #48	; 0x30
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	40023800 	.word	0x40023800
 8001770:	40021c00 	.word	0x40021c00
 8001774:	40021400 	.word	0x40021400
 8001778:	40021000 	.word	0x40021000
 800177c:	10110000 	.word	0x10110000
 8001780:	40020400 	.word	0x40020400
 8001784:	40020000 	.word	0x40020000

08001788 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800178c:	f002 fd52 	bl	8004234 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001790:	f000 f81e 	bl	80017d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001794:	f7ff fef4 	bl	8001580 <MX_GPIO_Init>
  MX_DMA_Init();
 8001798:	f7ff fe2e 	bl	80013f8 <MX_DMA_Init>
  MX_USART1_UART_Init();
 800179c:	f000 fc78 	bl	8002090 <MX_USART1_UART_Init>
  MX_CAN1_Init();
 80017a0:	f7ff fd0e 	bl	80011c0 <MX_CAN1_Init>
  MX_USART6_UART_Init();
 80017a4:	f000 fca0 	bl	80020e8 <MX_USART6_UART_Init>
  MX_SPI5_Init();
 80017a8:	f000 f894 	bl	80018d4 <MX_SPI5_Init>
  MX_TIM12_Init();
 80017ac:	f000 fb3e 	bl	8001e2c <MX_TIM12_Init>
  MX_CAN2_Init();
 80017b0:	f7ff fd3c 	bl	800122c <MX_CAN2_Init>
  MX_TIM4_Init();
 80017b4:	f000 fac0 	bl	8001d38 <MX_TIM4_Init>
  MX_UART7_Init();
 80017b8:	f000 fc40 	bl	800203c <MX_UART7_Init>
  /* USER CODE BEGIN 2 */

  startup_task();
 80017bc:	f002 fb90 	bl	8003ee0 <startup_task>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80017c0:	f006 fe78 	bl	80084b4 <osKernelInitialize>
  MX_FREERTOS_Init();
 80017c4:	f7ff fe66 	bl	8001494 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 80017c8:	f006 fea8 	bl	800851c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80017cc:	e7fe      	b.n	80017cc <main+0x44>
	...

080017d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b094      	sub	sp, #80	; 0x50
 80017d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017d6:	f107 0320 	add.w	r3, r7, #32
 80017da:	2230      	movs	r2, #48	; 0x30
 80017dc:	2100      	movs	r1, #0
 80017de:	4618      	mov	r0, r3
 80017e0:	f00a fa56 	bl	800bc90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017e4:	f107 030c 	add.w	r3, r7, #12
 80017e8:	2200      	movs	r2, #0
 80017ea:	601a      	str	r2, [r3, #0]
 80017ec:	605a      	str	r2, [r3, #4]
 80017ee:	609a      	str	r2, [r3, #8]
 80017f0:	60da      	str	r2, [r3, #12]
 80017f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80017f4:	2300      	movs	r3, #0
 80017f6:	60bb      	str	r3, [r7, #8]
 80017f8:	4b28      	ldr	r3, [pc, #160]	; (800189c <SystemClock_Config+0xcc>)
 80017fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fc:	4a27      	ldr	r2, [pc, #156]	; (800189c <SystemClock_Config+0xcc>)
 80017fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001802:	6413      	str	r3, [r2, #64]	; 0x40
 8001804:	4b25      	ldr	r3, [pc, #148]	; (800189c <SystemClock_Config+0xcc>)
 8001806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001808:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800180c:	60bb      	str	r3, [r7, #8]
 800180e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001810:	2300      	movs	r3, #0
 8001812:	607b      	str	r3, [r7, #4]
 8001814:	4b22      	ldr	r3, [pc, #136]	; (80018a0 <SystemClock_Config+0xd0>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a21      	ldr	r2, [pc, #132]	; (80018a0 <SystemClock_Config+0xd0>)
 800181a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800181e:	6013      	str	r3, [r2, #0]
 8001820:	4b1f      	ldr	r3, [pc, #124]	; (80018a0 <SystemClock_Config+0xd0>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001828:	607b      	str	r3, [r7, #4]
 800182a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800182c:	2301      	movs	r3, #1
 800182e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001830:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001834:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001836:	2302      	movs	r3, #2
 8001838:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800183a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800183e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8001840:	2306      	movs	r3, #6
 8001842:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001844:	23a8      	movs	r3, #168	; 0xa8
 8001846:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001848:	2302      	movs	r3, #2
 800184a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800184c:	2304      	movs	r3, #4
 800184e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001850:	f107 0320 	add.w	r3, r7, #32
 8001854:	4618      	mov	r0, r3
 8001856:	f004 fa3b 	bl	8005cd0 <HAL_RCC_OscConfig>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d001      	beq.n	8001864 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001860:	f000 f832 	bl	80018c8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001864:	230f      	movs	r3, #15
 8001866:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001868:	2302      	movs	r3, #2
 800186a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800186c:	2300      	movs	r3, #0
 800186e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001870:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001874:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001876:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800187a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800187c:	f107 030c 	add.w	r3, r7, #12
 8001880:	2105      	movs	r1, #5
 8001882:	4618      	mov	r0, r3
 8001884:	f004 fc94 	bl	80061b0 <HAL_RCC_ClockConfig>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d001      	beq.n	8001892 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800188e:	f000 f81b 	bl	80018c8 <Error_Handler>
  }
}
 8001892:	bf00      	nop
 8001894:	3750      	adds	r7, #80	; 0x50
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	40023800 	.word	0x40023800
 80018a0:	40007000 	.word	0x40007000

080018a4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a04      	ldr	r2, [pc, #16]	; (80018c4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d101      	bne.n	80018ba <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80018b6:	f002 fcdf 	bl	8004278 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80018ba:	bf00      	nop
 80018bc:	3708      	adds	r7, #8
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	40000400 	.word	0x40000400

080018c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018cc:	b672      	cpsid	i
}
 80018ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018d0:	e7fe      	b.n	80018d0 <Error_Handler+0x8>
	...

080018d4 <MX_SPI5_Init>:
DMA_HandleTypeDef hdma_spi5_rx;
DMA_HandleTypeDef hdma_spi5_tx;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0

  hspi5.Instance = SPI5;
 80018d8:	4b17      	ldr	r3, [pc, #92]	; (8001938 <MX_SPI5_Init+0x64>)
 80018da:	4a18      	ldr	r2, [pc, #96]	; (800193c <MX_SPI5_Init+0x68>)
 80018dc:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80018de:	4b16      	ldr	r3, [pc, #88]	; (8001938 <MX_SPI5_Init+0x64>)
 80018e0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80018e4:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80018e6:	4b14      	ldr	r3, [pc, #80]	; (8001938 <MX_SPI5_Init+0x64>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80018ec:	4b12      	ldr	r3, [pc, #72]	; (8001938 <MX_SPI5_Init+0x64>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80018f2:	4b11      	ldr	r3, [pc, #68]	; (8001938 <MX_SPI5_Init+0x64>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80018f8:	4b0f      	ldr	r3, [pc, #60]	; (8001938 <MX_SPI5_Init+0x64>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80018fe:	4b0e      	ldr	r3, [pc, #56]	; (8001938 <MX_SPI5_Init+0x64>)
 8001900:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001904:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001906:	4b0c      	ldr	r3, [pc, #48]	; (8001938 <MX_SPI5_Init+0x64>)
 8001908:	2200      	movs	r2, #0
 800190a:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800190c:	4b0a      	ldr	r3, [pc, #40]	; (8001938 <MX_SPI5_Init+0x64>)
 800190e:	2200      	movs	r2, #0
 8001910:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001912:	4b09      	ldr	r3, [pc, #36]	; (8001938 <MX_SPI5_Init+0x64>)
 8001914:	2200      	movs	r2, #0
 8001916:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001918:	4b07      	ldr	r3, [pc, #28]	; (8001938 <MX_SPI5_Init+0x64>)
 800191a:	2200      	movs	r2, #0
 800191c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 800191e:	4b06      	ldr	r3, [pc, #24]	; (8001938 <MX_SPI5_Init+0x64>)
 8001920:	220a      	movs	r2, #10
 8001922:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001924:	4804      	ldr	r0, [pc, #16]	; (8001938 <MX_SPI5_Init+0x64>)
 8001926:	f004 fe45 	bl	80065b4 <HAL_SPI_Init>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d001      	beq.n	8001934 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8001930:	f7ff ffca 	bl	80018c8 <Error_Handler>
  }

}
 8001934:	bf00      	nop
 8001936:	bd80      	pop	{r7, pc}
 8001938:	200098f4 	.word	0x200098f4
 800193c:	40015000 	.word	0x40015000

08001940 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b08a      	sub	sp, #40	; 0x28
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001948:	f107 0314 	add.w	r3, r7, #20
 800194c:	2200      	movs	r2, #0
 800194e:	601a      	str	r2, [r3, #0]
 8001950:	605a      	str	r2, [r3, #4]
 8001952:	609a      	str	r2, [r3, #8]
 8001954:	60da      	str	r2, [r3, #12]
 8001956:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a4d      	ldr	r2, [pc, #308]	; (8001a94 <HAL_SPI_MspInit+0x154>)
 800195e:	4293      	cmp	r3, r2
 8001960:	f040 8094 	bne.w	8001a8c <HAL_SPI_MspInit+0x14c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001964:	2300      	movs	r3, #0
 8001966:	613b      	str	r3, [r7, #16]
 8001968:	4b4b      	ldr	r3, [pc, #300]	; (8001a98 <HAL_SPI_MspInit+0x158>)
 800196a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800196c:	4a4a      	ldr	r2, [pc, #296]	; (8001a98 <HAL_SPI_MspInit+0x158>)
 800196e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001972:	6453      	str	r3, [r2, #68]	; 0x44
 8001974:	4b48      	ldr	r3, [pc, #288]	; (8001a98 <HAL_SPI_MspInit+0x158>)
 8001976:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001978:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800197c:	613b      	str	r3, [r7, #16]
 800197e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001980:	2300      	movs	r3, #0
 8001982:	60fb      	str	r3, [r7, #12]
 8001984:	4b44      	ldr	r3, [pc, #272]	; (8001a98 <HAL_SPI_MspInit+0x158>)
 8001986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001988:	4a43      	ldr	r2, [pc, #268]	; (8001a98 <HAL_SPI_MspInit+0x158>)
 800198a:	f043 0320 	orr.w	r3, r3, #32
 800198e:	6313      	str	r3, [r2, #48]	; 0x30
 8001990:	4b41      	ldr	r3, [pc, #260]	; (8001a98 <HAL_SPI_MspInit+0x158>)
 8001992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001994:	f003 0320 	and.w	r3, r3, #32
 8001998:	60fb      	str	r3, [r7, #12]
 800199a:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF9     ------> SPI5_MOSI
    PF8     ------> SPI5_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_8;
 800199c:	f44f 7360 	mov.w	r3, #896	; 0x380
 80019a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a2:	2302      	movs	r3, #2
 80019a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a6:	2300      	movs	r3, #0
 80019a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019aa:	2303      	movs	r3, #3
 80019ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80019ae:	2305      	movs	r3, #5
 80019b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80019b2:	f107 0314 	add.w	r3, r7, #20
 80019b6:	4619      	mov	r1, r3
 80019b8:	4838      	ldr	r0, [pc, #224]	; (8001a9c <HAL_SPI_MspInit+0x15c>)
 80019ba:	f003 ff9f 	bl	80058fc <HAL_GPIO_Init>

    /* SPI5 DMA Init */
    /* SPI5_RX Init */
    hdma_spi5_rx.Instance = DMA2_Stream3;
 80019be:	4b38      	ldr	r3, [pc, #224]	; (8001aa0 <HAL_SPI_MspInit+0x160>)
 80019c0:	4a38      	ldr	r2, [pc, #224]	; (8001aa4 <HAL_SPI_MspInit+0x164>)
 80019c2:	601a      	str	r2, [r3, #0]
    hdma_spi5_rx.Init.Channel = DMA_CHANNEL_2;
 80019c4:	4b36      	ldr	r3, [pc, #216]	; (8001aa0 <HAL_SPI_MspInit+0x160>)
 80019c6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80019ca:	605a      	str	r2, [r3, #4]
    hdma_spi5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80019cc:	4b34      	ldr	r3, [pc, #208]	; (8001aa0 <HAL_SPI_MspInit+0x160>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	609a      	str	r2, [r3, #8]
    hdma_spi5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019d2:	4b33      	ldr	r3, [pc, #204]	; (8001aa0 <HAL_SPI_MspInit+0x160>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	60da      	str	r2, [r3, #12]
    hdma_spi5_rx.Init.MemInc = DMA_MINC_ENABLE;
 80019d8:	4b31      	ldr	r3, [pc, #196]	; (8001aa0 <HAL_SPI_MspInit+0x160>)
 80019da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019de:	611a      	str	r2, [r3, #16]
    hdma_spi5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80019e0:	4b2f      	ldr	r3, [pc, #188]	; (8001aa0 <HAL_SPI_MspInit+0x160>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	615a      	str	r2, [r3, #20]
    hdma_spi5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80019e6:	4b2e      	ldr	r3, [pc, #184]	; (8001aa0 <HAL_SPI_MspInit+0x160>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	619a      	str	r2, [r3, #24]
    hdma_spi5_rx.Init.Mode = DMA_NORMAL;
 80019ec:	4b2c      	ldr	r3, [pc, #176]	; (8001aa0 <HAL_SPI_MspInit+0x160>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	61da      	str	r2, [r3, #28]
    hdma_spi5_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80019f2:	4b2b      	ldr	r3, [pc, #172]	; (8001aa0 <HAL_SPI_MspInit+0x160>)
 80019f4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80019f8:	621a      	str	r2, [r3, #32]
    hdma_spi5_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80019fa:	4b29      	ldr	r3, [pc, #164]	; (8001aa0 <HAL_SPI_MspInit+0x160>)
 80019fc:	2204      	movs	r2, #4
 80019fe:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi5_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001a00:	4b27      	ldr	r3, [pc, #156]	; (8001aa0 <HAL_SPI_MspInit+0x160>)
 8001a02:	2203      	movs	r2, #3
 8001a04:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi5_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8001a06:	4b26      	ldr	r3, [pc, #152]	; (8001aa0 <HAL_SPI_MspInit+0x160>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi5_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001a0c:	4b24      	ldr	r3, [pc, #144]	; (8001aa0 <HAL_SPI_MspInit+0x160>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi5_rx) != HAL_OK)
 8001a12:	4823      	ldr	r0, [pc, #140]	; (8001aa0 <HAL_SPI_MspInit+0x160>)
 8001a14:	f003 fbe0 	bl	80051d8 <HAL_DMA_Init>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d001      	beq.n	8001a22 <HAL_SPI_MspInit+0xe2>
    {
      Error_Handler();
 8001a1e:	f7ff ff53 	bl	80018c8 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi5_rx);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	4a1e      	ldr	r2, [pc, #120]	; (8001aa0 <HAL_SPI_MspInit+0x160>)
 8001a26:	64da      	str	r2, [r3, #76]	; 0x4c
 8001a28:	4a1d      	ldr	r2, [pc, #116]	; (8001aa0 <HAL_SPI_MspInit+0x160>)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI5_TX Init */
    hdma_spi5_tx.Instance = DMA2_Stream4;
 8001a2e:	4b1e      	ldr	r3, [pc, #120]	; (8001aa8 <HAL_SPI_MspInit+0x168>)
 8001a30:	4a1e      	ldr	r2, [pc, #120]	; (8001aac <HAL_SPI_MspInit+0x16c>)
 8001a32:	601a      	str	r2, [r3, #0]
    hdma_spi5_tx.Init.Channel = DMA_CHANNEL_2;
 8001a34:	4b1c      	ldr	r3, [pc, #112]	; (8001aa8 <HAL_SPI_MspInit+0x168>)
 8001a36:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001a3a:	605a      	str	r2, [r3, #4]
    hdma_spi5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a3c:	4b1a      	ldr	r3, [pc, #104]	; (8001aa8 <HAL_SPI_MspInit+0x168>)
 8001a3e:	2240      	movs	r2, #64	; 0x40
 8001a40:	609a      	str	r2, [r3, #8]
    hdma_spi5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a42:	4b19      	ldr	r3, [pc, #100]	; (8001aa8 <HAL_SPI_MspInit+0x168>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	60da      	str	r2, [r3, #12]
    hdma_spi5_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001a48:	4b17      	ldr	r3, [pc, #92]	; (8001aa8 <HAL_SPI_MspInit+0x168>)
 8001a4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a4e:	611a      	str	r2, [r3, #16]
    hdma_spi5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a50:	4b15      	ldr	r3, [pc, #84]	; (8001aa8 <HAL_SPI_MspInit+0x168>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	615a      	str	r2, [r3, #20]
    hdma_spi5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a56:	4b14      	ldr	r3, [pc, #80]	; (8001aa8 <HAL_SPI_MspInit+0x168>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	619a      	str	r2, [r3, #24]
    hdma_spi5_tx.Init.Mode = DMA_NORMAL;
 8001a5c:	4b12      	ldr	r3, [pc, #72]	; (8001aa8 <HAL_SPI_MspInit+0x168>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	61da      	str	r2, [r3, #28]
    hdma_spi5_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001a62:	4b11      	ldr	r3, [pc, #68]	; (8001aa8 <HAL_SPI_MspInit+0x168>)
 8001a64:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001a68:	621a      	str	r2, [r3, #32]
    hdma_spi5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a6a:	4b0f      	ldr	r3, [pc, #60]	; (8001aa8 <HAL_SPI_MspInit+0x168>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi5_tx) != HAL_OK)
 8001a70:	480d      	ldr	r0, [pc, #52]	; (8001aa8 <HAL_SPI_MspInit+0x168>)
 8001a72:	f003 fbb1 	bl	80051d8 <HAL_DMA_Init>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d001      	beq.n	8001a80 <HAL_SPI_MspInit+0x140>
    {
      Error_Handler();
 8001a7c:	f7ff ff24 	bl	80018c8 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi5_tx);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	4a09      	ldr	r2, [pc, #36]	; (8001aa8 <HAL_SPI_MspInit+0x168>)
 8001a84:	649a      	str	r2, [r3, #72]	; 0x48
 8001a86:	4a08      	ldr	r2, [pc, #32]	; (8001aa8 <HAL_SPI_MspInit+0x168>)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8001a8c:	bf00      	nop
 8001a8e:	3728      	adds	r7, #40	; 0x28
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	40015000 	.word	0x40015000
 8001a98:	40023800 	.word	0x40023800
 8001a9c:	40021400 	.word	0x40021400
 8001aa0:	2000994c 	.word	0x2000994c
 8001aa4:	40026458 	.word	0x40026458
 8001aa8:	200099ac 	.word	0x200099ac
 8001aac:	40026470 	.word	0x40026470

08001ab0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	607b      	str	r3, [r7, #4]
 8001aba:	4b21      	ldr	r3, [pc, #132]	; (8001b40 <HAL_MspInit+0x90>)
 8001abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001abe:	4a20      	ldr	r2, [pc, #128]	; (8001b40 <HAL_MspInit+0x90>)
 8001ac0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ac4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ac6:	4b1e      	ldr	r3, [pc, #120]	; (8001b40 <HAL_MspInit+0x90>)
 8001ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ace:	607b      	str	r3, [r7, #4]
 8001ad0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	603b      	str	r3, [r7, #0]
 8001ad6:	4b1a      	ldr	r3, [pc, #104]	; (8001b40 <HAL_MspInit+0x90>)
 8001ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ada:	4a19      	ldr	r2, [pc, #100]	; (8001b40 <HAL_MspInit+0x90>)
 8001adc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ae0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ae2:	4b17      	ldr	r3, [pc, #92]	; (8001b40 <HAL_MspInit+0x90>)
 8001ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aea:	603b      	str	r3, [r7, #0]
 8001aec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 1, 0);
 8001aee:	2200      	movs	r2, #0
 8001af0:	2101      	movs	r1, #1
 8001af2:	f06f 000b 	mvn.w	r0, #11
 8001af6:	f003 fb45 	bl	8005184 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 2, 0);
 8001afa:	2200      	movs	r2, #0
 8001afc:	2102      	movs	r1, #2
 8001afe:	f06f 000a 	mvn.w	r0, #10
 8001b02:	f003 fb3f 	bl	8005184 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 3, 0);
 8001b06:	2200      	movs	r2, #0
 8001b08:	2103      	movs	r1, #3
 8001b0a:	f06f 0009 	mvn.w	r0, #9
 8001b0e:	f003 fb39 	bl	8005184 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 4, 0);
 8001b12:	2200      	movs	r2, #0
 8001b14:	2104      	movs	r1, #4
 8001b16:	f06f 0004 	mvn.w	r0, #4
 8001b1a:	f003 fb33 	bl	8005184 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 5, 0);
 8001b1e:	2200      	movs	r2, #0
 8001b20:	2105      	movs	r1, #5
 8001b22:	f06f 0003 	mvn.w	r0, #3
 8001b26:	f003 fb2d 	bl	8005184 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	210f      	movs	r1, #15
 8001b2e:	f06f 0001 	mvn.w	r0, #1
 8001b32:	f003 fb27 	bl	8005184 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b36:	bf00      	nop
 8001b38:	3708      	adds	r7, #8
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	40023800 	.word	0x40023800

08001b44 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b08c      	sub	sp, #48	; 0x30
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001b50:	2300      	movs	r3, #0
 8001b52:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM3 IRQ priority */
  HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0);
 8001b54:	2200      	movs	r2, #0
 8001b56:	6879      	ldr	r1, [r7, #4]
 8001b58:	201d      	movs	r0, #29
 8001b5a:	f003 fb13 	bl	8005184 <HAL_NVIC_SetPriority>

  /* Enable the TIM3 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001b5e:	201d      	movs	r0, #29
 8001b60:	f003 fb2c 	bl	80051bc <HAL_NVIC_EnableIRQ>
  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8001b64:	2300      	movs	r3, #0
 8001b66:	60fb      	str	r3, [r7, #12]
 8001b68:	4b1f      	ldr	r3, [pc, #124]	; (8001be8 <HAL_InitTick+0xa4>)
 8001b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6c:	4a1e      	ldr	r2, [pc, #120]	; (8001be8 <HAL_InitTick+0xa4>)
 8001b6e:	f043 0302 	orr.w	r3, r3, #2
 8001b72:	6413      	str	r3, [r2, #64]	; 0x40
 8001b74:	4b1c      	ldr	r3, [pc, #112]	; (8001be8 <HAL_InitTick+0xa4>)
 8001b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b78:	f003 0302 	and.w	r3, r3, #2
 8001b7c:	60fb      	str	r3, [r7, #12]
 8001b7e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001b80:	f107 0210 	add.w	r2, r7, #16
 8001b84:	f107 0314 	add.w	r3, r7, #20
 8001b88:	4611      	mov	r1, r2
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f004 fce0 	bl	8006550 <HAL_RCC_GetClockConfig>

  /* Compute TIM3 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001b90:	f004 fcb6 	bl	8006500 <HAL_RCC_GetPCLK1Freq>
 8001b94:	4603      	mov	r3, r0
 8001b96:	005b      	lsls	r3, r3, #1
 8001b98:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b9c:	4a13      	ldr	r2, [pc, #76]	; (8001bec <HAL_InitTick+0xa8>)
 8001b9e:	fba2 2303 	umull	r2, r3, r2, r3
 8001ba2:	0c9b      	lsrs	r3, r3, #18
 8001ba4:	3b01      	subs	r3, #1
 8001ba6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8001ba8:	4b11      	ldr	r3, [pc, #68]	; (8001bf0 <HAL_InitTick+0xac>)
 8001baa:	4a12      	ldr	r2, [pc, #72]	; (8001bf4 <HAL_InitTick+0xb0>)
 8001bac:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8001bae:	4b10      	ldr	r3, [pc, #64]	; (8001bf0 <HAL_InitTick+0xac>)
 8001bb0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001bb4:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8001bb6:	4a0e      	ldr	r2, [pc, #56]	; (8001bf0 <HAL_InitTick+0xac>)
 8001bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bba:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8001bbc:	4b0c      	ldr	r3, [pc, #48]	; (8001bf0 <HAL_InitTick+0xac>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bc2:	4b0b      	ldr	r3, [pc, #44]	; (8001bf0 <HAL_InitTick+0xac>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 8001bc8:	4809      	ldr	r0, [pc, #36]	; (8001bf0 <HAL_InitTick+0xac>)
 8001bca:	f004 fd57 	bl	800667c <HAL_TIM_Base_Init>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d104      	bne.n	8001bde <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim3);
 8001bd4:	4806      	ldr	r0, [pc, #24]	; (8001bf0 <HAL_InitTick+0xac>)
 8001bd6:	f004 fd7c 	bl	80066d2 <HAL_TIM_Base_Start_IT>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	e000      	b.n	8001be0 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	3730      	adds	r7, #48	; 0x30
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	40023800 	.word	0x40023800
 8001bec:	431bde83 	.word	0x431bde83
 8001bf0:	20009a0c 	.word	0x20009a0c
 8001bf4:	40000400 	.word	0x40000400

08001bf8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001bfc:	e7fe      	b.n	8001bfc <NMI_Handler+0x4>

08001bfe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bfe:	b480      	push	{r7}
 8001c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c02:	e7fe      	b.n	8001c02 <HardFault_Handler+0x4>

08001c04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c08:	e7fe      	b.n	8001c08 <MemManage_Handler+0x4>

08001c0a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c0a:	b480      	push	{r7}
 8001c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c0e:	e7fe      	b.n	8001c0e <BusFault_Handler+0x4>

08001c10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c14:	e7fe      	b.n	8001c14 <UsageFault_Handler+0x4>

08001c16 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c16:	b480      	push	{r7}
 8001c18:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c1a:	bf00      	nop
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr

08001c24 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8001c28:	2008      	movs	r0, #8
 8001c2a:	f004 f82d 	bl	8005c88 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001c2e:	bf00      	nop
 8001c30:	bd80      	pop	{r7, pc}
	...

08001c34 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_rx);
 8001c38:	4802      	ldr	r0, [pc, #8]	; (8001c44 <DMA1_Stream3_IRQHandler+0x10>)
 8001c3a:	f003 fbf5 	bl	8005428 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001c3e:	bf00      	nop
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	20009b6c 	.word	0x20009b6c

08001c48 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001c4c:	4802      	ldr	r0, [pc, #8]	; (8001c58 <CAN1_RX0_IRQHandler+0x10>)
 8001c4e:	f002 ffb1 	bl	8004bb4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001c52:	bf00      	nop
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	20009898 	.word	0x20009898

08001c5c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001c60:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001c64:	f004 f810 	bl	8005c88 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001c68:	bf00      	nop
 8001c6a:	bd80      	pop	{r7, pc}

08001c6c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001c70:	4802      	ldr	r0, [pc, #8]	; (8001c7c <TIM3_IRQHandler+0x10>)
 8001c72:	f004 fdbb 	bl	80067ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001c76:	bf00      	nop
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	20009a0c 	.word	0x20009a0c

08001c80 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8001c84:	4802      	ldr	r0, [pc, #8]	; (8001c90 <DMA2_Stream1_IRQHandler+0x10>)
 8001c86:	f003 fbcf 	bl	8005428 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001c8a:	bf00      	nop
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	20009acc 	.word	0x20009acc

08001c94 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001c98:	4802      	ldr	r0, [pc, #8]	; (8001ca4 <DMA2_Stream2_IRQHandler+0x10>)
 8001c9a:	f003 fbc5 	bl	8005428 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001c9e:	bf00      	nop
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	20009bcc 	.word	0x20009bcc

08001ca8 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi5_rx);
 8001cac:	4802      	ldr	r0, [pc, #8]	; (8001cb8 <DMA2_Stream3_IRQHandler+0x10>)
 8001cae:	f003 fbbb 	bl	8005428 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001cb2:	bf00      	nop
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	2000994c 	.word	0x2000994c

08001cbc <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi5_tx);
 8001cc0:	4802      	ldr	r0, [pc, #8]	; (8001ccc <DMA2_Stream4_IRQHandler+0x10>)
 8001cc2:	f003 fbb1 	bl	8005428 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8001cc6:	bf00      	nop
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	200099ac 	.word	0x200099ac

08001cd0 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8001cd4:	4802      	ldr	r0, [pc, #8]	; (8001ce0 <CAN2_RX0_IRQHandler+0x10>)
 8001cd6:	f002 ff6d 	bl	8004bb4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8001cda:	bf00      	nop
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	20009870 	.word	0x20009870

08001ce4 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001ce8:	4802      	ldr	r0, [pc, #8]	; (8001cf4 <USART6_IRQHandler+0x10>)
 8001cea:	f005 fd5d 	bl	80077a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001cee:	bf00      	nop
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	20009c6c 	.word	0x20009c6c

08001cf8 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8001cfc:	4802      	ldr	r0, [pc, #8]	; (8001d08 <UART7_IRQHandler+0x10>)
 8001cfe:	f005 fd53 	bl	80077a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8001d02:	bf00      	nop
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	20009b2c 	.word	0x20009b2c

08001d0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d10:	4b08      	ldr	r3, [pc, #32]	; (8001d34 <SystemInit+0x28>)
 8001d12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d16:	4a07      	ldr	r2, [pc, #28]	; (8001d34 <SystemInit+0x28>)
 8001d18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001d20:	4b04      	ldr	r3, [pc, #16]	; (8001d34 <SystemInit+0x28>)
 8001d22:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d26:	609a      	str	r2, [r3, #8]
#endif
}
 8001d28:	bf00      	nop
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr
 8001d32:	bf00      	nop
 8001d34:	e000ed00 	.word	0xe000ed00

08001d38 <MX_TIM4_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim12;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b08a      	sub	sp, #40	; 0x28
 8001d3c:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d3e:	f107 0320 	add.w	r3, r7, #32
 8001d42:	2200      	movs	r2, #0
 8001d44:	601a      	str	r2, [r3, #0]
 8001d46:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d48:	1d3b      	adds	r3, r7, #4
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	601a      	str	r2, [r3, #0]
 8001d4e:	605a      	str	r2, [r3, #4]
 8001d50:	609a      	str	r2, [r3, #8]
 8001d52:	60da      	str	r2, [r3, #12]
 8001d54:	611a      	str	r2, [r3, #16]
 8001d56:	615a      	str	r2, [r3, #20]
 8001d58:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 8001d5a:	4b32      	ldr	r3, [pc, #200]	; (8001e24 <MX_TIM4_Init+0xec>)
 8001d5c:	4a32      	ldr	r2, [pc, #200]	; (8001e28 <MX_TIM4_Init+0xf0>)
 8001d5e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 84;
 8001d60:	4b30      	ldr	r3, [pc, #192]	; (8001e24 <MX_TIM4_Init+0xec>)
 8001d62:	2254      	movs	r2, #84	; 0x54
 8001d64:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d66:	4b2f      	ldr	r3, [pc, #188]	; (8001e24 <MX_TIM4_Init+0xec>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 8001d6c:	4b2d      	ldr	r3, [pc, #180]	; (8001e24 <MX_TIM4_Init+0xec>)
 8001d6e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001d72:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d74:	4b2b      	ldr	r3, [pc, #172]	; (8001e24 <MX_TIM4_Init+0xec>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d7a:	4b2a      	ldr	r3, [pc, #168]	; (8001e24 <MX_TIM4_Init+0xec>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001d80:	4828      	ldr	r0, [pc, #160]	; (8001e24 <MX_TIM4_Init+0xec>)
 8001d82:	f004 fcca 	bl	800671a <HAL_TIM_PWM_Init>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d001      	beq.n	8001d90 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8001d8c:	f7ff fd9c 	bl	80018c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d90:	2300      	movs	r3, #0
 8001d92:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d94:	2300      	movs	r3, #0
 8001d96:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001d98:	f107 0320 	add.w	r3, r7, #32
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	4821      	ldr	r0, [pc, #132]	; (8001e24 <MX_TIM4_Init+0xec>)
 8001da0:	f005 faee 	bl	8007380 <HAL_TIMEx_MasterConfigSynchronization>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d001      	beq.n	8001dae <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8001daa:	f7ff fd8d 	bl	80018c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001dae:	2360      	movs	r3, #96	; 0x60
 8001db0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001db2:	2300      	movs	r3, #0
 8001db4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001db6:	2300      	movs	r3, #0
 8001db8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001dbe:	1d3b      	adds	r3, r7, #4
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	4817      	ldr	r0, [pc, #92]	; (8001e24 <MX_TIM4_Init+0xec>)
 8001dc6:	f004 fe19 	bl	80069fc <HAL_TIM_PWM_ConfigChannel>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d001      	beq.n	8001dd4 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8001dd0:	f7ff fd7a 	bl	80018c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001dd4:	1d3b      	adds	r3, r7, #4
 8001dd6:	2204      	movs	r2, #4
 8001dd8:	4619      	mov	r1, r3
 8001dda:	4812      	ldr	r0, [pc, #72]	; (8001e24 <MX_TIM4_Init+0xec>)
 8001ddc:	f004 fe0e 	bl	80069fc <HAL_TIM_PWM_ConfigChannel>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d001      	beq.n	8001dea <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8001de6:	f7ff fd6f 	bl	80018c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001dea:	1d3b      	adds	r3, r7, #4
 8001dec:	2208      	movs	r2, #8
 8001dee:	4619      	mov	r1, r3
 8001df0:	480c      	ldr	r0, [pc, #48]	; (8001e24 <MX_TIM4_Init+0xec>)
 8001df2:	f004 fe03 	bl	80069fc <HAL_TIM_PWM_ConfigChannel>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d001      	beq.n	8001e00 <MX_TIM4_Init+0xc8>
  {
    Error_Handler();
 8001dfc:	f7ff fd64 	bl	80018c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001e00:	1d3b      	adds	r3, r7, #4
 8001e02:	220c      	movs	r2, #12
 8001e04:	4619      	mov	r1, r3
 8001e06:	4807      	ldr	r0, [pc, #28]	; (8001e24 <MX_TIM4_Init+0xec>)
 8001e08:	f004 fdf8 	bl	80069fc <HAL_TIM_PWM_ConfigChannel>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d001      	beq.n	8001e16 <MX_TIM4_Init+0xde>
  {
    Error_Handler();
 8001e12:	f7ff fd59 	bl	80018c8 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim4);
 8001e16:	4803      	ldr	r0, [pc, #12]	; (8001e24 <MX_TIM4_Init+0xec>)
 8001e18:	f000 f8ae 	bl	8001f78 <HAL_TIM_MspPostInit>

}
 8001e1c:	bf00      	nop
 8001e1e:	3728      	adds	r7, #40	; 0x28
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	20009a4c 	.word	0x20009a4c
 8001e28:	40000800 	.word	0x40000800

08001e2c <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b08c      	sub	sp, #48	; 0x30
 8001e30:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e32:	f107 0320 	add.w	r3, r7, #32
 8001e36:	2200      	movs	r2, #0
 8001e38:	601a      	str	r2, [r3, #0]
 8001e3a:	605a      	str	r2, [r3, #4]
 8001e3c:	609a      	str	r2, [r3, #8]
 8001e3e:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e40:	1d3b      	adds	r3, r7, #4
 8001e42:	2200      	movs	r2, #0
 8001e44:	601a      	str	r2, [r3, #0]
 8001e46:	605a      	str	r2, [r3, #4]
 8001e48:	609a      	str	r2, [r3, #8]
 8001e4a:	60da      	str	r2, [r3, #12]
 8001e4c:	611a      	str	r2, [r3, #16]
 8001e4e:	615a      	str	r2, [r3, #20]
 8001e50:	619a      	str	r2, [r3, #24]

  htim12.Instance = TIM12;
 8001e52:	4b25      	ldr	r3, [pc, #148]	; (8001ee8 <MX_TIM12_Init+0xbc>)
 8001e54:	4a25      	ldr	r2, [pc, #148]	; (8001eec <MX_TIM12_Init+0xc0>)
 8001e56:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 84;
 8001e58:	4b23      	ldr	r3, [pc, #140]	; (8001ee8 <MX_TIM12_Init+0xbc>)
 8001e5a:	2254      	movs	r2, #84	; 0x54
 8001e5c:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e5e:	4b22      	ldr	r3, [pc, #136]	; (8001ee8 <MX_TIM12_Init+0xbc>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 1000;
 8001e64:	4b20      	ldr	r3, [pc, #128]	; (8001ee8 <MX_TIM12_Init+0xbc>)
 8001e66:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001e6a:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e6c:	4b1e      	ldr	r3, [pc, #120]	; (8001ee8 <MX_TIM12_Init+0xbc>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e72:	4b1d      	ldr	r3, [pc, #116]	; (8001ee8 <MX_TIM12_Init+0xbc>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8001e78:	481b      	ldr	r0, [pc, #108]	; (8001ee8 <MX_TIM12_Init+0xbc>)
 8001e7a:	f004 fbff 	bl	800667c <HAL_TIM_Base_Init>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d001      	beq.n	8001e88 <MX_TIM12_Init+0x5c>
  {
    Error_Handler();
 8001e84:	f7ff fd20 	bl	80018c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e8c:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8001e8e:	f107 0320 	add.w	r3, r7, #32
 8001e92:	4619      	mov	r1, r3
 8001e94:	4814      	ldr	r0, [pc, #80]	; (8001ee8 <MX_TIM12_Init+0xbc>)
 8001e96:	f004 fe77 	bl	8006b88 <HAL_TIM_ConfigClockSource>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d001      	beq.n	8001ea4 <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 8001ea0:	f7ff fd12 	bl	80018c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001ea4:	4810      	ldr	r0, [pc, #64]	; (8001ee8 <MX_TIM12_Init+0xbc>)
 8001ea6:	f004 fc38 	bl	800671a <HAL_TIM_PWM_Init>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d001      	beq.n	8001eb4 <MX_TIM12_Init+0x88>
  {
    Error_Handler();
 8001eb0:	f7ff fd0a 	bl	80018c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001eb4:	2360      	movs	r3, #96	; 0x60
 8001eb6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ec4:	1d3b      	adds	r3, r7, #4
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	4619      	mov	r1, r3
 8001eca:	4807      	ldr	r0, [pc, #28]	; (8001ee8 <MX_TIM12_Init+0xbc>)
 8001ecc:	f004 fd96 	bl	80069fc <HAL_TIM_PWM_ConfigChannel>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d001      	beq.n	8001eda <MX_TIM12_Init+0xae>
  {
    Error_Handler();
 8001ed6:	f7ff fcf7 	bl	80018c8 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim12);
 8001eda:	4803      	ldr	r0, [pc, #12]	; (8001ee8 <MX_TIM12_Init+0xbc>)
 8001edc:	f000 f84c 	bl	8001f78 <HAL_TIM_MspPostInit>

}
 8001ee0:	bf00      	nop
 8001ee2:	3730      	adds	r7, #48	; 0x30
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	20009a8c 	.word	0x20009a8c
 8001eec:	40001800 	.word	0x40001800

08001ef0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b085      	sub	sp, #20
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM4)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a0b      	ldr	r2, [pc, #44]	; (8001f2c <HAL_TIM_PWM_MspInit+0x3c>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d10d      	bne.n	8001f1e <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001f02:	2300      	movs	r3, #0
 8001f04:	60fb      	str	r3, [r7, #12]
 8001f06:	4b0a      	ldr	r3, [pc, #40]	; (8001f30 <HAL_TIM_PWM_MspInit+0x40>)
 8001f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0a:	4a09      	ldr	r2, [pc, #36]	; (8001f30 <HAL_TIM_PWM_MspInit+0x40>)
 8001f0c:	f043 0304 	orr.w	r3, r3, #4
 8001f10:	6413      	str	r3, [r2, #64]	; 0x40
 8001f12:	4b07      	ldr	r3, [pc, #28]	; (8001f30 <HAL_TIM_PWM_MspInit+0x40>)
 8001f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f16:	f003 0304 	and.w	r3, r3, #4
 8001f1a:	60fb      	str	r3, [r7, #12]
 8001f1c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001f1e:	bf00      	nop
 8001f20:	3714      	adds	r7, #20
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr
 8001f2a:	bf00      	nop
 8001f2c:	40000800 	.word	0x40000800
 8001f30:	40023800 	.word	0x40023800

08001f34 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b085      	sub	sp, #20
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM12)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a0b      	ldr	r2, [pc, #44]	; (8001f70 <HAL_TIM_Base_MspInit+0x3c>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d10d      	bne.n	8001f62 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* TIM12 clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 8001f46:	2300      	movs	r3, #0
 8001f48:	60fb      	str	r3, [r7, #12]
 8001f4a:	4b0a      	ldr	r3, [pc, #40]	; (8001f74 <HAL_TIM_Base_MspInit+0x40>)
 8001f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4e:	4a09      	ldr	r2, [pc, #36]	; (8001f74 <HAL_TIM_Base_MspInit+0x40>)
 8001f50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f54:	6413      	str	r3, [r2, #64]	; 0x40
 8001f56:	4b07      	ldr	r3, [pc, #28]	; (8001f74 <HAL_TIM_Base_MspInit+0x40>)
 8001f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f5e:	60fb      	str	r3, [r7, #12]
 8001f60:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 8001f62:	bf00      	nop
 8001f64:	3714      	adds	r7, #20
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr
 8001f6e:	bf00      	nop
 8001f70:	40001800 	.word	0x40001800
 8001f74:	40023800 	.word	0x40023800

08001f78 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b08a      	sub	sp, #40	; 0x28
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f80:	f107 0314 	add.w	r3, r7, #20
 8001f84:	2200      	movs	r2, #0
 8001f86:	601a      	str	r2, [r3, #0]
 8001f88:	605a      	str	r2, [r3, #4]
 8001f8a:	609a      	str	r2, [r3, #8]
 8001f8c:	60da      	str	r2, [r3, #12]
 8001f8e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a24      	ldr	r2, [pc, #144]	; (8002028 <HAL_TIM_MspPostInit+0xb0>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d11f      	bne.n	8001fda <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	613b      	str	r3, [r7, #16]
 8001f9e:	4b23      	ldr	r3, [pc, #140]	; (800202c <HAL_TIM_MspPostInit+0xb4>)
 8001fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa2:	4a22      	ldr	r2, [pc, #136]	; (800202c <HAL_TIM_MspPostInit+0xb4>)
 8001fa4:	f043 0308 	orr.w	r3, r3, #8
 8001fa8:	6313      	str	r3, [r2, #48]	; 0x30
 8001faa:	4b20      	ldr	r3, [pc, #128]	; (800202c <HAL_TIM_MspPostInit+0xb4>)
 8001fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fae:	f003 0308 	and.w	r3, r3, #8
 8001fb2:	613b      	str	r3, [r7, #16]
 8001fb4:	693b      	ldr	r3, [r7, #16]
    PD15     ------> TIM4_CH4
    PD14     ------> TIM4_CH3
    PD13     ------> TIM4_CH2
    PD12     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_12;
 8001fb6:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001fba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fbc:	2302      	movs	r3, #2
 8001fbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001fc8:	2302      	movs	r3, #2
 8001fca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001fcc:	f107 0314 	add.w	r3, r7, #20
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	4817      	ldr	r0, [pc, #92]	; (8002030 <HAL_TIM_MspPostInit+0xb8>)
 8001fd4:	f003 fc92 	bl	80058fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8001fd8:	e022      	b.n	8002020 <HAL_TIM_MspPostInit+0xa8>
  else if(timHandle->Instance==TIM12)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a15      	ldr	r2, [pc, #84]	; (8002034 <HAL_TIM_MspPostInit+0xbc>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d11d      	bne.n	8002020 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	60fb      	str	r3, [r7, #12]
 8001fe8:	4b10      	ldr	r3, [pc, #64]	; (800202c <HAL_TIM_MspPostInit+0xb4>)
 8001fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fec:	4a0f      	ldr	r2, [pc, #60]	; (800202c <HAL_TIM_MspPostInit+0xb4>)
 8001fee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ff2:	6313      	str	r3, [r2, #48]	; 0x30
 8001ff4:	4b0d      	ldr	r3, [pc, #52]	; (800202c <HAL_TIM_MspPostInit+0xb4>)
 8001ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ffc:	60fb      	str	r3, [r7, #12]
 8001ffe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002000:	2340      	movs	r3, #64	; 0x40
 8002002:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002004:	2302      	movs	r3, #2
 8002006:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002008:	2300      	movs	r3, #0
 800200a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800200c:	2300      	movs	r3, #0
 800200e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8002010:	2309      	movs	r3, #9
 8002012:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002014:	f107 0314 	add.w	r3, r7, #20
 8002018:	4619      	mov	r1, r3
 800201a:	4807      	ldr	r0, [pc, #28]	; (8002038 <HAL_TIM_MspPostInit+0xc0>)
 800201c:	f003 fc6e 	bl	80058fc <HAL_GPIO_Init>
}
 8002020:	bf00      	nop
 8002022:	3728      	adds	r7, #40	; 0x28
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}
 8002028:	40000800 	.word	0x40000800
 800202c:	40023800 	.word	0x40023800
 8002030:	40020c00 	.word	0x40020c00
 8002034:	40001800 	.word	0x40001800
 8002038:	40021c00 	.word	0x40021c00

0800203c <MX_UART7_Init>:
DMA_HandleTypeDef hdma_usart1_rx;
DMA_HandleTypeDef hdma_usart6_rx;

/* UART7 init function */
void MX_UART7_Init(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	af00      	add	r7, sp, #0

  huart7.Instance = UART7;
 8002040:	4b11      	ldr	r3, [pc, #68]	; (8002088 <MX_UART7_Init+0x4c>)
 8002042:	4a12      	ldr	r2, [pc, #72]	; (800208c <MX_UART7_Init+0x50>)
 8002044:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8002046:	4b10      	ldr	r3, [pc, #64]	; (8002088 <MX_UART7_Init+0x4c>)
 8002048:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800204c:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 800204e:	4b0e      	ldr	r3, [pc, #56]	; (8002088 <MX_UART7_Init+0x4c>)
 8002050:	2200      	movs	r2, #0
 8002052:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8002054:	4b0c      	ldr	r3, [pc, #48]	; (8002088 <MX_UART7_Init+0x4c>)
 8002056:	2200      	movs	r2, #0
 8002058:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 800205a:	4b0b      	ldr	r3, [pc, #44]	; (8002088 <MX_UART7_Init+0x4c>)
 800205c:	2200      	movs	r2, #0
 800205e:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8002060:	4b09      	ldr	r3, [pc, #36]	; (8002088 <MX_UART7_Init+0x4c>)
 8002062:	220c      	movs	r2, #12
 8002064:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002066:	4b08      	ldr	r3, [pc, #32]	; (8002088 <MX_UART7_Init+0x4c>)
 8002068:	2200      	movs	r2, #0
 800206a:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 800206c:	4b06      	ldr	r3, [pc, #24]	; (8002088 <MX_UART7_Init+0x4c>)
 800206e:	2200      	movs	r2, #0
 8002070:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8002072:	4805      	ldr	r0, [pc, #20]	; (8002088 <MX_UART7_Init+0x4c>)
 8002074:	f005 fa14 	bl	80074a0 <HAL_UART_Init>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d001      	beq.n	8002082 <MX_UART7_Init+0x46>
  {
    Error_Handler();
 800207e:	f7ff fc23 	bl	80018c8 <Error_Handler>
  }

}
 8002082:	bf00      	nop
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	20009b2c 	.word	0x20009b2c
 800208c:	40007800 	.word	0x40007800

08002090 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8002094:	4b11      	ldr	r3, [pc, #68]	; (80020dc <MX_USART1_UART_Init+0x4c>)
 8002096:	4a12      	ldr	r2, [pc, #72]	; (80020e0 <MX_USART1_UART_Init+0x50>)
 8002098:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 100000;
 800209a:	4b10      	ldr	r3, [pc, #64]	; (80020dc <MX_USART1_UART_Init+0x4c>)
 800209c:	4a11      	ldr	r2, [pc, #68]	; (80020e4 <MX_USART1_UART_Init+0x54>)
 800209e:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 80020a0:	4b0e      	ldr	r3, [pc, #56]	; (80020dc <MX_USART1_UART_Init+0x4c>)
 80020a2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80020a6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80020a8:	4b0c      	ldr	r3, [pc, #48]	; (80020dc <MX_USART1_UART_Init+0x4c>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 80020ae:	4b0b      	ldr	r3, [pc, #44]	; (80020dc <MX_USART1_UART_Init+0x4c>)
 80020b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80020b4:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_RX;
 80020b6:	4b09      	ldr	r3, [pc, #36]	; (80020dc <MX_USART1_UART_Init+0x4c>)
 80020b8:	2204      	movs	r2, #4
 80020ba:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020bc:	4b07      	ldr	r3, [pc, #28]	; (80020dc <MX_USART1_UART_Init+0x4c>)
 80020be:	2200      	movs	r2, #0
 80020c0:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80020c2:	4b06      	ldr	r3, [pc, #24]	; (80020dc <MX_USART1_UART_Init+0x4c>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80020c8:	4804      	ldr	r0, [pc, #16]	; (80020dc <MX_USART1_UART_Init+0x4c>)
 80020ca:	f005 f9e9 	bl	80074a0 <HAL_UART_Init>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d001      	beq.n	80020d8 <MX_USART1_UART_Init+0x48>
  {
    Error_Handler();
 80020d4:	f7ff fbf8 	bl	80018c8 <Error_Handler>
  }

}
 80020d8:	bf00      	nop
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	20009c2c 	.word	0x20009c2c
 80020e0:	40011000 	.word	0x40011000
 80020e4:	000186a0 	.word	0x000186a0

080020e8 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	af00      	add	r7, sp, #0

  huart6.Instance = USART6;
 80020ec:	4b11      	ldr	r3, [pc, #68]	; (8002134 <MX_USART6_UART_Init+0x4c>)
 80020ee:	4a12      	ldr	r2, [pc, #72]	; (8002138 <MX_USART6_UART_Init+0x50>)
 80020f0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80020f2:	4b10      	ldr	r3, [pc, #64]	; (8002134 <MX_USART6_UART_Init+0x4c>)
 80020f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80020f8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80020fa:	4b0e      	ldr	r3, [pc, #56]	; (8002134 <MX_USART6_UART_Init+0x4c>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002100:	4b0c      	ldr	r3, [pc, #48]	; (8002134 <MX_USART6_UART_Init+0x4c>)
 8002102:	2200      	movs	r2, #0
 8002104:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002106:	4b0b      	ldr	r3, [pc, #44]	; (8002134 <MX_USART6_UART_Init+0x4c>)
 8002108:	2200      	movs	r2, #0
 800210a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_RX;
 800210c:	4b09      	ldr	r3, [pc, #36]	; (8002134 <MX_USART6_UART_Init+0x4c>)
 800210e:	2204      	movs	r2, #4
 8002110:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002112:	4b08      	ldr	r3, [pc, #32]	; (8002134 <MX_USART6_UART_Init+0x4c>)
 8002114:	2200      	movs	r2, #0
 8002116:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002118:	4b06      	ldr	r3, [pc, #24]	; (8002134 <MX_USART6_UART_Init+0x4c>)
 800211a:	2200      	movs	r2, #0
 800211c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800211e:	4805      	ldr	r0, [pc, #20]	; (8002134 <MX_USART6_UART_Init+0x4c>)
 8002120:	f005 f9be 	bl	80074a0 <HAL_UART_Init>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	d001      	beq.n	800212e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800212a:	f7ff fbcd 	bl	80018c8 <Error_Handler>
  }

}
 800212e:	bf00      	nop
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	20009c6c 	.word	0x20009c6c
 8002138:	40011400 	.word	0x40011400

0800213c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b08e      	sub	sp, #56	; 0x38
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002144:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002148:	2200      	movs	r2, #0
 800214a:	601a      	str	r2, [r3, #0]
 800214c:	605a      	str	r2, [r3, #4]
 800214e:	609a      	str	r2, [r3, #8]
 8002150:	60da      	str	r2, [r3, #12]
 8002152:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART7)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a74      	ldr	r2, [pc, #464]	; (800232c <HAL_UART_MspInit+0x1f0>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d164      	bne.n	8002228 <HAL_UART_MspInit+0xec>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* UART7 clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 800215e:	2300      	movs	r3, #0
 8002160:	623b      	str	r3, [r7, #32]
 8002162:	4b73      	ldr	r3, [pc, #460]	; (8002330 <HAL_UART_MspInit+0x1f4>)
 8002164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002166:	4a72      	ldr	r2, [pc, #456]	; (8002330 <HAL_UART_MspInit+0x1f4>)
 8002168:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800216c:	6413      	str	r3, [r2, #64]	; 0x40
 800216e:	4b70      	ldr	r3, [pc, #448]	; (8002330 <HAL_UART_MspInit+0x1f4>)
 8002170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002172:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002176:	623b      	str	r3, [r7, #32]
 8002178:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800217a:	2300      	movs	r3, #0
 800217c:	61fb      	str	r3, [r7, #28]
 800217e:	4b6c      	ldr	r3, [pc, #432]	; (8002330 <HAL_UART_MspInit+0x1f4>)
 8002180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002182:	4a6b      	ldr	r2, [pc, #428]	; (8002330 <HAL_UART_MspInit+0x1f4>)
 8002184:	f043 0310 	orr.w	r3, r3, #16
 8002188:	6313      	str	r3, [r2, #48]	; 0x30
 800218a:	4b69      	ldr	r3, [pc, #420]	; (8002330 <HAL_UART_MspInit+0x1f4>)
 800218c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218e:	f003 0310 	and.w	r3, r3, #16
 8002192:	61fb      	str	r3, [r7, #28]
 8002194:	69fb      	ldr	r3, [r7, #28]
    /**UART7 GPIO Configuration
    PE8     ------> UART7_TX
    PE7     ------> UART7_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_7;
 8002196:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800219a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800219c:	2302      	movs	r3, #2
 800219e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021a0:	2301      	movs	r3, #1
 80021a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021a4:	2303      	movs	r3, #3
 80021a6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 80021a8:	2308      	movs	r3, #8
 80021aa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80021ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021b0:	4619      	mov	r1, r3
 80021b2:	4860      	ldr	r0, [pc, #384]	; (8002334 <HAL_UART_MspInit+0x1f8>)
 80021b4:	f003 fba2 	bl	80058fc <HAL_GPIO_Init>

    /* UART7 DMA Init */
    /* UART7_RX Init */
    hdma_uart7_rx.Instance = DMA1_Stream3;
 80021b8:	4b5f      	ldr	r3, [pc, #380]	; (8002338 <HAL_UART_MspInit+0x1fc>)
 80021ba:	4a60      	ldr	r2, [pc, #384]	; (800233c <HAL_UART_MspInit+0x200>)
 80021bc:	601a      	str	r2, [r3, #0]
    hdma_uart7_rx.Init.Channel = DMA_CHANNEL_5;
 80021be:	4b5e      	ldr	r3, [pc, #376]	; (8002338 <HAL_UART_MspInit+0x1fc>)
 80021c0:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80021c4:	605a      	str	r2, [r3, #4]
    hdma_uart7_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80021c6:	4b5c      	ldr	r3, [pc, #368]	; (8002338 <HAL_UART_MspInit+0x1fc>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	609a      	str	r2, [r3, #8]
    hdma_uart7_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80021cc:	4b5a      	ldr	r3, [pc, #360]	; (8002338 <HAL_UART_MspInit+0x1fc>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	60da      	str	r2, [r3, #12]
    hdma_uart7_rx.Init.MemInc = DMA_MINC_ENABLE;
 80021d2:	4b59      	ldr	r3, [pc, #356]	; (8002338 <HAL_UART_MspInit+0x1fc>)
 80021d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80021d8:	611a      	str	r2, [r3, #16]
    hdma_uart7_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80021da:	4b57      	ldr	r3, [pc, #348]	; (8002338 <HAL_UART_MspInit+0x1fc>)
 80021dc:	2200      	movs	r2, #0
 80021de:	615a      	str	r2, [r3, #20]
    hdma_uart7_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80021e0:	4b55      	ldr	r3, [pc, #340]	; (8002338 <HAL_UART_MspInit+0x1fc>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	619a      	str	r2, [r3, #24]
    hdma_uart7_rx.Init.Mode = DMA_CIRCULAR;
 80021e6:	4b54      	ldr	r3, [pc, #336]	; (8002338 <HAL_UART_MspInit+0x1fc>)
 80021e8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80021ec:	61da      	str	r2, [r3, #28]
    hdma_uart7_rx.Init.Priority = DMA_PRIORITY_LOW;
 80021ee:	4b52      	ldr	r3, [pc, #328]	; (8002338 <HAL_UART_MspInit+0x1fc>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	621a      	str	r2, [r3, #32]
    hdma_uart7_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80021f4:	4b50      	ldr	r3, [pc, #320]	; (8002338 <HAL_UART_MspInit+0x1fc>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart7_rx) != HAL_OK)
 80021fa:	484f      	ldr	r0, [pc, #316]	; (8002338 <HAL_UART_MspInit+0x1fc>)
 80021fc:	f002 ffec 	bl	80051d8 <HAL_DMA_Init>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d001      	beq.n	800220a <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8002206:	f7ff fb5f 	bl	80018c8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart7_rx);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4a4a      	ldr	r2, [pc, #296]	; (8002338 <HAL_UART_MspInit+0x1fc>)
 800220e:	635a      	str	r2, [r3, #52]	; 0x34
 8002210:	4a49      	ldr	r2, [pc, #292]	; (8002338 <HAL_UART_MspInit+0x1fc>)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART7 interrupt Init */
    HAL_NVIC_SetPriority(UART7_IRQn, 5, 0);
 8002216:	2200      	movs	r2, #0
 8002218:	2105      	movs	r1, #5
 800221a:	2052      	movs	r0, #82	; 0x52
 800221c:	f002 ffb2 	bl	8005184 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8002220:	2052      	movs	r0, #82	; 0x52
 8002222:	f002 ffcb 	bl	80051bc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8002226:	e0fe      	b.n	8002426 <HAL_UART_MspInit+0x2ea>
  else if(uartHandle->Instance==USART1)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a44      	ldr	r2, [pc, #272]	; (8002340 <HAL_UART_MspInit+0x204>)
 800222e:	4293      	cmp	r3, r2
 8002230:	f040 8090 	bne.w	8002354 <HAL_UART_MspInit+0x218>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002234:	2300      	movs	r3, #0
 8002236:	61bb      	str	r3, [r7, #24]
 8002238:	4b3d      	ldr	r3, [pc, #244]	; (8002330 <HAL_UART_MspInit+0x1f4>)
 800223a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800223c:	4a3c      	ldr	r2, [pc, #240]	; (8002330 <HAL_UART_MspInit+0x1f4>)
 800223e:	f043 0310 	orr.w	r3, r3, #16
 8002242:	6453      	str	r3, [r2, #68]	; 0x44
 8002244:	4b3a      	ldr	r3, [pc, #232]	; (8002330 <HAL_UART_MspInit+0x1f4>)
 8002246:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002248:	f003 0310 	and.w	r3, r3, #16
 800224c:	61bb      	str	r3, [r7, #24]
 800224e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002250:	2300      	movs	r3, #0
 8002252:	617b      	str	r3, [r7, #20]
 8002254:	4b36      	ldr	r3, [pc, #216]	; (8002330 <HAL_UART_MspInit+0x1f4>)
 8002256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002258:	4a35      	ldr	r2, [pc, #212]	; (8002330 <HAL_UART_MspInit+0x1f4>)
 800225a:	f043 0302 	orr.w	r3, r3, #2
 800225e:	6313      	str	r3, [r2, #48]	; 0x30
 8002260:	4b33      	ldr	r3, [pc, #204]	; (8002330 <HAL_UART_MspInit+0x1f4>)
 8002262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002264:	f003 0302 	and.w	r3, r3, #2
 8002268:	617b      	str	r3, [r7, #20]
 800226a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800226c:	2300      	movs	r3, #0
 800226e:	613b      	str	r3, [r7, #16]
 8002270:	4b2f      	ldr	r3, [pc, #188]	; (8002330 <HAL_UART_MspInit+0x1f4>)
 8002272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002274:	4a2e      	ldr	r2, [pc, #184]	; (8002330 <HAL_UART_MspInit+0x1f4>)
 8002276:	f043 0301 	orr.w	r3, r3, #1
 800227a:	6313      	str	r3, [r2, #48]	; 0x30
 800227c:	4b2c      	ldr	r3, [pc, #176]	; (8002330 <HAL_UART_MspInit+0x1f4>)
 800227e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002280:	f003 0301 	and.w	r3, r3, #1
 8002284:	613b      	str	r3, [r7, #16]
 8002286:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002288:	2380      	movs	r3, #128	; 0x80
 800228a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800228c:	2302      	movs	r3, #2
 800228e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002290:	2300      	movs	r3, #0
 8002292:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002294:	2303      	movs	r3, #3
 8002296:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002298:	2307      	movs	r3, #7
 800229a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800229c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022a0:	4619      	mov	r1, r3
 80022a2:	4828      	ldr	r0, [pc, #160]	; (8002344 <HAL_UART_MspInit+0x208>)
 80022a4:	f003 fb2a 	bl	80058fc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80022a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ae:	2302      	movs	r3, #2
 80022b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b2:	2300      	movs	r3, #0
 80022b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022b6:	2303      	movs	r3, #3
 80022b8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80022ba:	2307      	movs	r3, #7
 80022bc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022c2:	4619      	mov	r1, r3
 80022c4:	4820      	ldr	r0, [pc, #128]	; (8002348 <HAL_UART_MspInit+0x20c>)
 80022c6:	f003 fb19 	bl	80058fc <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80022ca:	4b20      	ldr	r3, [pc, #128]	; (800234c <HAL_UART_MspInit+0x210>)
 80022cc:	4a20      	ldr	r2, [pc, #128]	; (8002350 <HAL_UART_MspInit+0x214>)
 80022ce:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80022d0:	4b1e      	ldr	r3, [pc, #120]	; (800234c <HAL_UART_MspInit+0x210>)
 80022d2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80022d6:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80022d8:	4b1c      	ldr	r3, [pc, #112]	; (800234c <HAL_UART_MspInit+0x210>)
 80022da:	2200      	movs	r2, #0
 80022dc:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80022de:	4b1b      	ldr	r3, [pc, #108]	; (800234c <HAL_UART_MspInit+0x210>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80022e4:	4b19      	ldr	r3, [pc, #100]	; (800234c <HAL_UART_MspInit+0x210>)
 80022e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80022ea:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80022ec:	4b17      	ldr	r3, [pc, #92]	; (800234c <HAL_UART_MspInit+0x210>)
 80022ee:	2200      	movs	r2, #0
 80022f0:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80022f2:	4b16      	ldr	r3, [pc, #88]	; (800234c <HAL_UART_MspInit+0x210>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80022f8:	4b14      	ldr	r3, [pc, #80]	; (800234c <HAL_UART_MspInit+0x210>)
 80022fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80022fe:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002300:	4b12      	ldr	r3, [pc, #72]	; (800234c <HAL_UART_MspInit+0x210>)
 8002302:	2200      	movs	r2, #0
 8002304:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002306:	4b11      	ldr	r3, [pc, #68]	; (800234c <HAL_UART_MspInit+0x210>)
 8002308:	2200      	movs	r2, #0
 800230a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800230c:	480f      	ldr	r0, [pc, #60]	; (800234c <HAL_UART_MspInit+0x210>)
 800230e:	f002 ff63 	bl	80051d8 <HAL_DMA_Init>
 8002312:	4603      	mov	r3, r0
 8002314:	2b00      	cmp	r3, #0
 8002316:	d001      	beq.n	800231c <HAL_UART_MspInit+0x1e0>
      Error_Handler();
 8002318:	f7ff fad6 	bl	80018c8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	4a0b      	ldr	r2, [pc, #44]	; (800234c <HAL_UART_MspInit+0x210>)
 8002320:	635a      	str	r2, [r3, #52]	; 0x34
 8002322:	4a0a      	ldr	r2, [pc, #40]	; (800234c <HAL_UART_MspInit+0x210>)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002328:	e07d      	b.n	8002426 <HAL_UART_MspInit+0x2ea>
 800232a:	bf00      	nop
 800232c:	40007800 	.word	0x40007800
 8002330:	40023800 	.word	0x40023800
 8002334:	40021000 	.word	0x40021000
 8002338:	20009b6c 	.word	0x20009b6c
 800233c:	40026058 	.word	0x40026058
 8002340:	40011000 	.word	0x40011000
 8002344:	40020400 	.word	0x40020400
 8002348:	40020000 	.word	0x40020000
 800234c:	20009bcc 	.word	0x20009bcc
 8002350:	40026440 	.word	0x40026440
  else if(uartHandle->Instance==USART6)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a35      	ldr	r2, [pc, #212]	; (8002430 <HAL_UART_MspInit+0x2f4>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d163      	bne.n	8002426 <HAL_UART_MspInit+0x2ea>
    __HAL_RCC_USART6_CLK_ENABLE();
 800235e:	2300      	movs	r3, #0
 8002360:	60fb      	str	r3, [r7, #12]
 8002362:	4b34      	ldr	r3, [pc, #208]	; (8002434 <HAL_UART_MspInit+0x2f8>)
 8002364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002366:	4a33      	ldr	r2, [pc, #204]	; (8002434 <HAL_UART_MspInit+0x2f8>)
 8002368:	f043 0320 	orr.w	r3, r3, #32
 800236c:	6453      	str	r3, [r2, #68]	; 0x44
 800236e:	4b31      	ldr	r3, [pc, #196]	; (8002434 <HAL_UART_MspInit+0x2f8>)
 8002370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002372:	f003 0320 	and.w	r3, r3, #32
 8002376:	60fb      	str	r3, [r7, #12]
 8002378:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800237a:	2300      	movs	r3, #0
 800237c:	60bb      	str	r3, [r7, #8]
 800237e:	4b2d      	ldr	r3, [pc, #180]	; (8002434 <HAL_UART_MspInit+0x2f8>)
 8002380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002382:	4a2c      	ldr	r2, [pc, #176]	; (8002434 <HAL_UART_MspInit+0x2f8>)
 8002384:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002388:	6313      	str	r3, [r2, #48]	; 0x30
 800238a:	4b2a      	ldr	r3, [pc, #168]	; (8002434 <HAL_UART_MspInit+0x2f8>)
 800238c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800238e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002392:	60bb      	str	r3, [r7, #8]
 8002394:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_9;
 8002396:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 800239a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800239c:	2302      	movs	r3, #2
 800239e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a0:	2300      	movs	r3, #0
 80023a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023a4:	2303      	movs	r3, #3
 80023a6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80023a8:	2308      	movs	r3, #8
 80023aa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80023ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023b0:	4619      	mov	r1, r3
 80023b2:	4821      	ldr	r0, [pc, #132]	; (8002438 <HAL_UART_MspInit+0x2fc>)
 80023b4:	f003 faa2 	bl	80058fc <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 80023b8:	4b20      	ldr	r3, [pc, #128]	; (800243c <HAL_UART_MspInit+0x300>)
 80023ba:	4a21      	ldr	r2, [pc, #132]	; (8002440 <HAL_UART_MspInit+0x304>)
 80023bc:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 80023be:	4b1f      	ldr	r3, [pc, #124]	; (800243c <HAL_UART_MspInit+0x300>)
 80023c0:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80023c4:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80023c6:	4b1d      	ldr	r3, [pc, #116]	; (800243c <HAL_UART_MspInit+0x300>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80023cc:	4b1b      	ldr	r3, [pc, #108]	; (800243c <HAL_UART_MspInit+0x300>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 80023d2:	4b1a      	ldr	r3, [pc, #104]	; (800243c <HAL_UART_MspInit+0x300>)
 80023d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80023d8:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80023da:	4b18      	ldr	r3, [pc, #96]	; (800243c <HAL_UART_MspInit+0x300>)
 80023dc:	2200      	movs	r2, #0
 80023de:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80023e0:	4b16      	ldr	r3, [pc, #88]	; (800243c <HAL_UART_MspInit+0x300>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 80023e6:	4b15      	ldr	r3, [pc, #84]	; (800243c <HAL_UART_MspInit+0x300>)
 80023e8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80023ec:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 80023ee:	4b13      	ldr	r3, [pc, #76]	; (800243c <HAL_UART_MspInit+0x300>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80023f4:	4b11      	ldr	r3, [pc, #68]	; (800243c <HAL_UART_MspInit+0x300>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 80023fa:	4810      	ldr	r0, [pc, #64]	; (800243c <HAL_UART_MspInit+0x300>)
 80023fc:	f002 feec 	bl	80051d8 <HAL_DMA_Init>
 8002400:	4603      	mov	r3, r0
 8002402:	2b00      	cmp	r3, #0
 8002404:	d001      	beq.n	800240a <HAL_UART_MspInit+0x2ce>
      Error_Handler();
 8002406:	f7ff fa5f 	bl	80018c8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	4a0b      	ldr	r2, [pc, #44]	; (800243c <HAL_UART_MspInit+0x300>)
 800240e:	635a      	str	r2, [r3, #52]	; 0x34
 8002410:	4a0a      	ldr	r2, [pc, #40]	; (800243c <HAL_UART_MspInit+0x300>)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8002416:	2200      	movs	r2, #0
 8002418:	2105      	movs	r1, #5
 800241a:	2047      	movs	r0, #71	; 0x47
 800241c:	f002 feb2 	bl	8005184 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002420:	2047      	movs	r0, #71	; 0x47
 8002422:	f002 fecb 	bl	80051bc <HAL_NVIC_EnableIRQ>
}
 8002426:	bf00      	nop
 8002428:	3738      	adds	r7, #56	; 0x38
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	40011400 	.word	0x40011400
 8002434:	40023800 	.word	0x40023800
 8002438:	40021800 	.word	0x40021800
 800243c:	20009acc 	.word	0x20009acc
 8002440:	40026428 	.word	0x40026428

08002444 <Reset_Handler>:
 8002444:	f8df d034 	ldr.w	sp, [pc, #52]	; 800247c <LoopFillZerobss+0x14>
 8002448:	2100      	movs	r1, #0
 800244a:	e003      	b.n	8002454 <LoopCopyDataInit>

0800244c <CopyDataInit>:
 800244c:	4b0c      	ldr	r3, [pc, #48]	; (8002480 <LoopFillZerobss+0x18>)
 800244e:	585b      	ldr	r3, [r3, r1]
 8002450:	5043      	str	r3, [r0, r1]
 8002452:	3104      	adds	r1, #4

08002454 <LoopCopyDataInit>:
 8002454:	480b      	ldr	r0, [pc, #44]	; (8002484 <LoopFillZerobss+0x1c>)
 8002456:	4b0c      	ldr	r3, [pc, #48]	; (8002488 <LoopFillZerobss+0x20>)
 8002458:	1842      	adds	r2, r0, r1
 800245a:	429a      	cmp	r2, r3
 800245c:	d3f6      	bcc.n	800244c <CopyDataInit>
 800245e:	4a0b      	ldr	r2, [pc, #44]	; (800248c <LoopFillZerobss+0x24>)
 8002460:	e002      	b.n	8002468 <LoopFillZerobss>

08002462 <FillZerobss>:
 8002462:	2300      	movs	r3, #0
 8002464:	f842 3b04 	str.w	r3, [r2], #4

08002468 <LoopFillZerobss>:
 8002468:	4b09      	ldr	r3, [pc, #36]	; (8002490 <LoopFillZerobss+0x28>)
 800246a:	429a      	cmp	r2, r3
 800246c:	d3f9      	bcc.n	8002462 <FillZerobss>
 800246e:	f7ff fc4d 	bl	8001d0c <SystemInit>
 8002472:	f009 fbdb 	bl	800bc2c <__libc_init_array>
 8002476:	f7ff f987 	bl	8001788 <main>
 800247a:	4770      	bx	lr
 800247c:	20030000 	.word	0x20030000
 8002480:	0800cfdc 	.word	0x0800cfdc
 8002484:	20000000 	.word	0x20000000
 8002488:	2000007c 	.word	0x2000007c
 800248c:	20000080 	.word	0x20000080
 8002490:	20009f48 	.word	0x20009f48

08002494 <ADC_IRQHandler>:
 8002494:	e7fe      	b.n	8002494 <ADC_IRQHandler>
	...

08002498 <can_ISR>:
/**
 * CAN ISR function, triggered upon RX_FIFO0_MSG_PENDING
 * converts the raw can data to the motor_data struct form as well
 */
void can_ISR(CAN_HandleTypeDef *hcan)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b094      	sub	sp, #80	; 0x50
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
	HAL_CAN_DeactivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_RX_FIFO0_FULL | CAN_IT_RX_FIFO0_OVERRUN);
 80024a0:	210e      	movs	r1, #14
 80024a2:	6878      	ldr	r0, [r7, #4]
 80024a4:	f002 fb5f 	bl	8004b66 <HAL_CAN_DeactivateNotification>
	if (hcan->Instance == CAN1)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a2f      	ldr	r2, [pc, #188]	; (800256c <can_ISR+0xd4>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d129      	bne.n	8002506 <can_ISR+0x6e>
	{
		CAN_RxHeaderTypeDef rx_msg_header;
		uint8_t rx_buffer[CAN_BUFFER_SIZE];
		can_get_msg(&hcan1, &rx_msg_header, rx_buffer);
 80024b2:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80024b6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80024ba:	4619      	mov	r1, r3
 80024bc:	482c      	ldr	r0, [pc, #176]	; (8002570 <can_ISR+0xd8>)
 80024be:	f7fe fd6c 	bl	8000f9a <can_get_msg>
		convert_raw_can_data(rx_msg_header.StdId, rx_buffer);
 80024c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024c4:	b29b      	uxth	r3, r3
 80024c6:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80024ca:	4611      	mov	r1, r2
 80024cc:	4618      	mov	r0, r3
 80024ce:	f000 f859 	bl	8002584 <convert_raw_can_data>
		history[history_index++] = rx_msg_header.StdId;
 80024d2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80024d4:	4b27      	ldr	r3, [pc, #156]	; (8002574 <can_ISR+0xdc>)
 80024d6:	881b      	ldrh	r3, [r3, #0]
 80024d8:	1c5a      	adds	r2, r3, #1
 80024da:	b290      	uxth	r0, r2
 80024dc:	4a25      	ldr	r2, [pc, #148]	; (8002574 <can_ISR+0xdc>)
 80024de:	8010      	strh	r0, [r2, #0]
 80024e0:	461a      	mov	r2, r3
 80024e2:	b289      	uxth	r1, r1
 80024e4:	4b24      	ldr	r3, [pc, #144]	; (8002578 <can_ISR+0xe0>)
 80024e6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		if (history_index >= 10000)
 80024ea:	4b22      	ldr	r3, [pc, #136]	; (8002574 <can_ISR+0xdc>)
 80024ec:	881b      	ldrh	r3, [r3, #0]
 80024ee:	f242 720f 	movw	r2, #9999	; 0x270f
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d902      	bls.n	80024fc <can_ISR+0x64>
		{
			history_index = 0;
 80024f6:	4b1f      	ldr	r3, [pc, #124]	; (8002574 <can_ISR+0xdc>)
 80024f8:	2200      	movs	r2, #0
 80024fa:	801a      	strh	r2, [r3, #0]
		}
		HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_RX_FIFO0_FULL	| CAN_IT_RX_FIFO0_OVERRUN);
 80024fc:	210e      	movs	r1, #14
 80024fe:	481c      	ldr	r0, [pc, #112]	; (8002570 <can_ISR+0xd8>)
 8002500:	f002 fb0b 	bl	8004b1a <HAL_CAN_ActivateNotification>
		}

		HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_RX_FIFO0_FULL	| CAN_IT_RX_FIFO0_OVERRUN);
		// something
	}
}
 8002504:	e02d      	b.n	8002562 <can_ISR+0xca>
	else if (hcan->Instance == CAN2)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a1c      	ldr	r2, [pc, #112]	; (800257c <can_ISR+0xe4>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d128      	bne.n	8002562 <can_ISR+0xca>
		can_get_msg(&hcan2, &rx_msg_header, rx_buffer);
 8002510:	f107 0208 	add.w	r2, r7, #8
 8002514:	f107 0310 	add.w	r3, r7, #16
 8002518:	4619      	mov	r1, r3
 800251a:	4819      	ldr	r0, [pc, #100]	; (8002580 <can_ISR+0xe8>)
 800251c:	f7fe fd3d 	bl	8000f9a <can_get_msg>
		convert_raw_can_data(rx_msg_header.StdId, rx_buffer);
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	b29b      	uxth	r3, r3
 8002524:	f107 0208 	add.w	r2, r7, #8
 8002528:	4611      	mov	r1, r2
 800252a:	4618      	mov	r0, r3
 800252c:	f000 f82a 	bl	8002584 <convert_raw_can_data>
		history[history_index++] = rx_msg_header.StdId;
 8002530:	6939      	ldr	r1, [r7, #16]
 8002532:	4b10      	ldr	r3, [pc, #64]	; (8002574 <can_ISR+0xdc>)
 8002534:	881b      	ldrh	r3, [r3, #0]
 8002536:	1c5a      	adds	r2, r3, #1
 8002538:	b290      	uxth	r0, r2
 800253a:	4a0e      	ldr	r2, [pc, #56]	; (8002574 <can_ISR+0xdc>)
 800253c:	8010      	strh	r0, [r2, #0]
 800253e:	461a      	mov	r2, r3
 8002540:	b289      	uxth	r1, r1
 8002542:	4b0d      	ldr	r3, [pc, #52]	; (8002578 <can_ISR+0xe0>)
 8002544:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		if (history_index >= 10000)
 8002548:	4b0a      	ldr	r3, [pc, #40]	; (8002574 <can_ISR+0xdc>)
 800254a:	881b      	ldrh	r3, [r3, #0]
 800254c:	f242 720f 	movw	r2, #9999	; 0x270f
 8002550:	4293      	cmp	r3, r2
 8002552:	d902      	bls.n	800255a <can_ISR+0xc2>
			history_index = 0;
 8002554:	4b07      	ldr	r3, [pc, #28]	; (8002574 <can_ISR+0xdc>)
 8002556:	2200      	movs	r2, #0
 8002558:	801a      	strh	r2, [r3, #0]
		HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_RX_FIFO0_FULL	| CAN_IT_RX_FIFO0_OVERRUN);
 800255a:	210e      	movs	r1, #14
 800255c:	4808      	ldr	r0, [pc, #32]	; (8002580 <can_ISR+0xe8>)
 800255e:	f002 fadc 	bl	8004b1a <HAL_CAN_ActivateNotification>
}
 8002562:	bf00      	nop
 8002564:	3750      	adds	r7, #80	; 0x50
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	40006400 	.word	0x40006400
 8002570:	20009898 	.word	0x20009898
 8002574:	20004ed4 	.word	0x20004ed4
 8002578:	200000b4 	.word	0x200000b4
 800257c:	40006800 	.word	0x40006800
 8002580:	20009870 	.word	0x20009870

08002584 <convert_raw_can_data>:
 *
 * For GM6020 motors, it recenters the motor angle data and converts it to radians.
 */

void convert_raw_can_data(uint16_t motor_id, uint8_t *rx_buffer)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b084      	sub	sp, #16
 8002588:	af00      	add	r7, sp, #0
 800258a:	4603      	mov	r3, r0
 800258c:	6039      	str	r1, [r7, #0]
 800258e:	80fb      	strh	r3, [r7, #6]
	switch(motor_id)
 8002590:	88fb      	ldrh	r3, [r7, #6]
 8002592:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 8002596:	2b09      	cmp	r3, #9
 8002598:	f200 8124 	bhi.w	80027e4 <convert_raw_can_data+0x260>
 800259c:	a201      	add	r2, pc, #4	; (adr r2, 80025a4 <convert_raw_can_data+0x20>)
 800259e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025a2:	bf00      	nop
 80025a4:	080025cd 	.word	0x080025cd
 80025a8:	080027e5 	.word	0x080027e5
 80025ac:	080027e5 	.word	0x080027e5
 80025b0:	080027e5 	.word	0x080027e5
 80025b4:	08002635 	.word	0x08002635
 80025b8:	08002635 	.word	0x08002635
 80025bc:	080027e5 	.word	0x080027e5
 80025c0:	080027e5 	.word	0x080027e5
 80025c4:	080026f1 	.word	0x080026f1
 80025c8:	0800276b 	.word	0x0800276b
	{
		uint8_t feeder_id;
		case ID_CHASSIS:
		{
			canone_data.CHASSIS.id 					= motor_id;
 80025cc:	4a88      	ldr	r2, [pc, #544]	; (80027f0 <convert_raw_can_data+0x26c>)
 80025ce:	88fb      	ldrh	r3, [r7, #6]
 80025d0:	8013      	strh	r3, [r2, #0]
			canone_data.CHASSIS.angle				= (rx_buffer[0] << 8) | rx_buffer[1];
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	781b      	ldrb	r3, [r3, #0]
 80025d6:	021b      	lsls	r3, r3, #8
 80025d8:	b21a      	sxth	r2, r3
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	3301      	adds	r3, #1
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	b21b      	sxth	r3, r3
 80025e2:	4313      	orrs	r3, r2
 80025e4:	b21b      	sxth	r3, r3
 80025e6:	b29a      	uxth	r2, r3
 80025e8:	4b81      	ldr	r3, [pc, #516]	; (80027f0 <convert_raw_can_data+0x26c>)
 80025ea:	805a      	strh	r2, [r3, #2]
			canone_data.CHASSIS.rpm  				= (rx_buffer[2] << 8) | rx_buffer[3];
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	3302      	adds	r3, #2
 80025f0:	781b      	ldrb	r3, [r3, #0]
 80025f2:	021b      	lsls	r3, r3, #8
 80025f4:	b21a      	sxth	r2, r3
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	3303      	adds	r3, #3
 80025fa:	781b      	ldrb	r3, [r3, #0]
 80025fc:	b21b      	sxth	r3, r3
 80025fe:	4313      	orrs	r3, r2
 8002600:	b21a      	sxth	r2, r3
 8002602:	4b7b      	ldr	r3, [pc, #492]	; (80027f0 <convert_raw_can_data+0x26c>)
 8002604:	809a      	strh	r2, [r3, #4]
			canone_data.CHASSIS.torque 				= (rx_buffer[4] << 8) | rx_buffer[5];
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	3304      	adds	r3, #4
 800260a:	781b      	ldrb	r3, [r3, #0]
 800260c:	021b      	lsls	r3, r3, #8
 800260e:	b21a      	sxth	r2, r3
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	3305      	adds	r3, #5
 8002614:	781b      	ldrb	r3, [r3, #0]
 8002616:	b21b      	sxth	r3, r3
 8002618:	4313      	orrs	r3, r2
 800261a:	b21a      	sxth	r2, r3
 800261c:	4b74      	ldr	r3, [pc, #464]	; (80027f0 <convert_raw_can_data+0x26c>)
 800261e:	80da      	strh	r2, [r3, #6]
			canone_data.CHASSIS.temp 				= (rx_buffer[6]);
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	799a      	ldrb	r2, [r3, #6]
 8002624:	4b72      	ldr	r3, [pc, #456]	; (80027f0 <convert_raw_can_data+0x26c>)
 8002626:	721a      	strb	r2, [r3, #8]
			osEventFlagsSet(chassis_data_flag, 0x10);
 8002628:	4b72      	ldr	r3, [pc, #456]	; (80027f4 <convert_raw_can_data+0x270>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	2110      	movs	r1, #16
 800262e:	4618      	mov	r0, r3
 8002630:	f006 f8d0 	bl	80087d4 <osEventFlagsSet>
		}

		case ID_FEEDER_R:
		case ID_FEEDER_L:
		{
			feeder_id = motor_id - 0x205;
 8002634:	88fb      	ldrh	r3, [r7, #6]
 8002636:	b2db      	uxtb	r3, r3
 8002638:	3b05      	subs	r3, #5
 800263a:	73fb      	strb	r3, [r7, #15]
			canone_data.FEEDER[feeder_id].id 			= motor_id;
 800263c:	7bfb      	ldrb	r3, [r7, #15]
 800263e:	4a6c      	ldr	r2, [pc, #432]	; (80027f0 <convert_raw_can_data+0x26c>)
 8002640:	3301      	adds	r3, #1
 8002642:	2168      	movs	r1, #104	; 0x68
 8002644:	fb01 f303 	mul.w	r3, r1, r3
 8002648:	4413      	add	r3, r2
 800264a:	88fa      	ldrh	r2, [r7, #6]
 800264c:	801a      	strh	r2, [r3, #0]
			canone_data.FEEDER[feeder_id].angle			= (rx_buffer[0] << 8) | rx_buffer[1];
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	781b      	ldrb	r3, [r3, #0]
 8002652:	021b      	lsls	r3, r3, #8
 8002654:	b21a      	sxth	r2, r3
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	3301      	adds	r3, #1
 800265a:	781b      	ldrb	r3, [r3, #0]
 800265c:	b21b      	sxth	r3, r3
 800265e:	4313      	orrs	r3, r2
 8002660:	b21a      	sxth	r2, r3
 8002662:	7bfb      	ldrb	r3, [r7, #15]
 8002664:	b290      	uxth	r0, r2
 8002666:	4a62      	ldr	r2, [pc, #392]	; (80027f0 <convert_raw_can_data+0x26c>)
 8002668:	3301      	adds	r3, #1
 800266a:	2168      	movs	r1, #104	; 0x68
 800266c:	fb01 f303 	mul.w	r3, r1, r3
 8002670:	4413      	add	r3, r2
 8002672:	3302      	adds	r3, #2
 8002674:	4602      	mov	r2, r0
 8002676:	801a      	strh	r2, [r3, #0]
			canone_data.FEEDER[feeder_id].rpm  			= (rx_buffer[2] << 8) | rx_buffer[3];
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	3302      	adds	r3, #2
 800267c:	781b      	ldrb	r3, [r3, #0]
 800267e:	021b      	lsls	r3, r3, #8
 8002680:	b219      	sxth	r1, r3
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	3303      	adds	r3, #3
 8002686:	781b      	ldrb	r3, [r3, #0]
 8002688:	b21a      	sxth	r2, r3
 800268a:	7bfb      	ldrb	r3, [r7, #15]
 800268c:	430a      	orrs	r2, r1
 800268e:	b210      	sxth	r0, r2
 8002690:	4a57      	ldr	r2, [pc, #348]	; (80027f0 <convert_raw_can_data+0x26c>)
 8002692:	3301      	adds	r3, #1
 8002694:	2168      	movs	r1, #104	; 0x68
 8002696:	fb01 f303 	mul.w	r3, r1, r3
 800269a:	4413      	add	r3, r2
 800269c:	3304      	adds	r3, #4
 800269e:	4602      	mov	r2, r0
 80026a0:	801a      	strh	r2, [r3, #0]
			canone_data.FEEDER[feeder_id].torque		= (rx_buffer[4] << 8) | rx_buffer[5];
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	3304      	adds	r3, #4
 80026a6:	781b      	ldrb	r3, [r3, #0]
 80026a8:	021b      	lsls	r3, r3, #8
 80026aa:	b219      	sxth	r1, r3
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	3305      	adds	r3, #5
 80026b0:	781b      	ldrb	r3, [r3, #0]
 80026b2:	b21a      	sxth	r2, r3
 80026b4:	7bfb      	ldrb	r3, [r7, #15]
 80026b6:	430a      	orrs	r2, r1
 80026b8:	b210      	sxth	r0, r2
 80026ba:	4a4d      	ldr	r2, [pc, #308]	; (80027f0 <convert_raw_can_data+0x26c>)
 80026bc:	3301      	adds	r3, #1
 80026be:	2168      	movs	r1, #104	; 0x68
 80026c0:	fb01 f303 	mul.w	r3, r1, r3
 80026c4:	4413      	add	r3, r2
 80026c6:	3306      	adds	r3, #6
 80026c8:	4602      	mov	r2, r0
 80026ca:	801a      	strh	r2, [r3, #0]
			canone_data.FEEDER[feeder_id].temp 			= (rx_buffer[6]);
 80026cc:	7bfb      	ldrb	r3, [r7, #15]
 80026ce:	683a      	ldr	r2, [r7, #0]
 80026d0:	7990      	ldrb	r0, [r2, #6]
 80026d2:	4a47      	ldr	r2, [pc, #284]	; (80027f0 <convert_raw_can_data+0x26c>)
 80026d4:	2168      	movs	r1, #104	; 0x68
 80026d6:	fb01 f303 	mul.w	r3, r1, r3
 80026da:	4413      	add	r3, r2
 80026dc:	3370      	adds	r3, #112	; 0x70
 80026de:	4602      	mov	r2, r0
 80026e0:	701a      	strb	r2, [r3, #0]
			osEventFlagsSet(gun_data_flag, 0x10);
 80026e2:	4b45      	ldr	r3, [pc, #276]	; (80027f8 <convert_raw_can_data+0x274>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	2110      	movs	r1, #16
 80026e8:	4618      	mov	r0, r3
 80026ea:	f006 f873 	bl	80087d4 <osEventFlagsSet>
			break;
 80026ee:	e07a      	b.n	80027e6 <convert_raw_can_data+0x262>
		}

		case ID_PITCH:
		{
			canone_data.pitch.id 						= motor_id;
 80026f0:	4a3f      	ldr	r2, [pc, #252]	; (80027f0 <convert_raw_can_data+0x26c>)
 80026f2:	88fb      	ldrh	r3, [r7, #6]
 80026f4:	f8a2 3138 	strh.w	r3, [r2, #312]	; 0x138
			canone_data.pitch.real_angle				= (rx_buffer[0] << 8) | rx_buffer[1];
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	021b      	lsls	r3, r3, #8
 80026fe:	b21a      	sxth	r2, r3
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	3301      	adds	r3, #1
 8002704:	781b      	ldrb	r3, [r3, #0]
 8002706:	b21b      	sxth	r3, r3
 8002708:	4313      	orrs	r3, r2
 800270a:	b21b      	sxth	r3, r3
 800270c:	b29a      	uxth	r2, r3
 800270e:	4b38      	ldr	r3, [pc, #224]	; (80027f0 <convert_raw_can_data+0x26c>)
 8002710:	f8a3 213a 	strh.w	r2, [r3, #314]	; 0x13a
			canone_data.pitch.rpm  						= (rx_buffer[2] << 8) | rx_buffer[3];
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	3302      	adds	r3, #2
 8002718:	781b      	ldrb	r3, [r3, #0]
 800271a:	021b      	lsls	r3, r3, #8
 800271c:	b21a      	sxth	r2, r3
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	3303      	adds	r3, #3
 8002722:	781b      	ldrb	r3, [r3, #0]
 8002724:	b21b      	sxth	r3, r3
 8002726:	4313      	orrs	r3, r2
 8002728:	b21a      	sxth	r2, r3
 800272a:	4b31      	ldr	r3, [pc, #196]	; (80027f0 <convert_raw_can_data+0x26c>)
 800272c:	f8a3 2140 	strh.w	r2, [r3, #320]	; 0x140
			canone_data.pitch.torque 					= (rx_buffer[4] << 8) | rx_buffer[5];
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	3304      	adds	r3, #4
 8002734:	781b      	ldrb	r3, [r3, #0]
 8002736:	021b      	lsls	r3, r3, #8
 8002738:	b21a      	sxth	r2, r3
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	3305      	adds	r3, #5
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	b21b      	sxth	r3, r3
 8002742:	4313      	orrs	r3, r2
 8002744:	b21a      	sxth	r2, r3
 8002746:	4b2a      	ldr	r3, [pc, #168]	; (80027f0 <convert_raw_can_data+0x26c>)
 8002748:	f8a3 2142 	strh.w	r2, [r3, #322]	; 0x142
			canone_data.pitch.temp 						= (rx_buffer[6]);
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	799a      	ldrb	r2, [r3, #6]
 8002750:	4b27      	ldr	r3, [pc, #156]	; (80027f0 <convert_raw_can_data+0x26c>)
 8002752:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144
			gimbal_offset(&canone_data.pitch);
 8002756:	4829      	ldr	r0, [pc, #164]	; (80027fc <convert_raw_can_data+0x278>)
 8002758:	f000 f856 	bl	8002808 <gimbal_offset>
			osEventFlagsSet(gimbal_data_flag, 0x10);
 800275c:	4b28      	ldr	r3, [pc, #160]	; (8002800 <convert_raw_can_data+0x27c>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	2110      	movs	r1, #16
 8002762:	4618      	mov	r0, r3
 8002764:	f006 f836 	bl	80087d4 <osEventFlagsSet>
			break;
 8002768:	e03d      	b.n	80027e6 <convert_raw_can_data+0x262>
		}


		case ID_YAW:
		{
			canone_data.yaw.id 							= motor_id;
 800276a:	4a21      	ldr	r2, [pc, #132]	; (80027f0 <convert_raw_can_data+0x26c>)
 800276c:	88fb      	ldrh	r3, [r7, #6]
 800276e:	f8a2 31b8 	strh.w	r3, [r2, #440]	; 0x1b8
			canone_data.yaw.real_angle					= (rx_buffer[0] << 8) | rx_buffer[1];
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	781b      	ldrb	r3, [r3, #0]
 8002776:	021b      	lsls	r3, r3, #8
 8002778:	b21a      	sxth	r2, r3
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	3301      	adds	r3, #1
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	b21b      	sxth	r3, r3
 8002782:	4313      	orrs	r3, r2
 8002784:	b21b      	sxth	r3, r3
 8002786:	b29a      	uxth	r2, r3
 8002788:	4b19      	ldr	r3, [pc, #100]	; (80027f0 <convert_raw_can_data+0x26c>)
 800278a:	f8a3 21ba 	strh.w	r2, [r3, #442]	; 0x1ba
			canone_data.yaw.rpm  						= (rx_buffer[2] << 8) | rx_buffer[3];
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	3302      	adds	r3, #2
 8002792:	781b      	ldrb	r3, [r3, #0]
 8002794:	021b      	lsls	r3, r3, #8
 8002796:	b21a      	sxth	r2, r3
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	3303      	adds	r3, #3
 800279c:	781b      	ldrb	r3, [r3, #0]
 800279e:	b21b      	sxth	r3, r3
 80027a0:	4313      	orrs	r3, r2
 80027a2:	b21a      	sxth	r2, r3
 80027a4:	4b12      	ldr	r3, [pc, #72]	; (80027f0 <convert_raw_can_data+0x26c>)
 80027a6:	f8a3 21c0 	strh.w	r2, [r3, #448]	; 0x1c0
			canone_data.yaw.torque 						= (rx_buffer[4] << 8) | rx_buffer[5];
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	3304      	adds	r3, #4
 80027ae:	781b      	ldrb	r3, [r3, #0]
 80027b0:	021b      	lsls	r3, r3, #8
 80027b2:	b21a      	sxth	r2, r3
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	3305      	adds	r3, #5
 80027b8:	781b      	ldrb	r3, [r3, #0]
 80027ba:	b21b      	sxth	r3, r3
 80027bc:	4313      	orrs	r3, r2
 80027be:	b21a      	sxth	r2, r3
 80027c0:	4b0b      	ldr	r3, [pc, #44]	; (80027f0 <convert_raw_can_data+0x26c>)
 80027c2:	f8a3 21c2 	strh.w	r2, [r3, #450]	; 0x1c2
			canone_data.yaw.temp 						= (rx_buffer[6]);
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	799a      	ldrb	r2, [r3, #6]
 80027ca:	4b09      	ldr	r3, [pc, #36]	; (80027f0 <convert_raw_can_data+0x26c>)
 80027cc:	f883 21c4 	strb.w	r2, [r3, #452]	; 0x1c4
			gimbal_offset(&canone_data.yaw);
 80027d0:	480c      	ldr	r0, [pc, #48]	; (8002804 <convert_raw_can_data+0x280>)
 80027d2:	f000 f819 	bl	8002808 <gimbal_offset>
			osEventFlagsSet(gimbal_data_flag, 0x01);
 80027d6:	4b0a      	ldr	r3, [pc, #40]	; (8002800 <convert_raw_can_data+0x27c>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	2101      	movs	r1, #1
 80027dc:	4618      	mov	r0, r3
 80027de:	f005 fff9 	bl	80087d4 <osEventFlagsSet>
			break;
 80027e2:	e000      	b.n	80027e6 <convert_raw_can_data+0x262>
		}
		default:
		{
			break;
 80027e4:	bf00      	nop
		}
	}
}
 80027e6:	bf00      	nop
 80027e8:	3710      	adds	r7, #16
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	20009cb0 	.word	0x20009cb0
 80027f4:	200098e4 	.word	0x200098e4
 80027f8:	200098d0 	.word	0x200098d0
 80027fc:	20009de8 	.word	0x20009de8
 8002800:	200098cc 	.word	0x200098cc
 8002804:	20009e68 	.word	0x20009e68

08002808 <gimbal_offset>:

/**
 * Centers the raw motor angle to between -Pi to +Pi
 */
void gimbal_offset(gimbal_data_t *gimbal_data)
{
 8002808:	b480      	push	{r7}
 800280a:	b083      	sub	sp, #12
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
	gimbal_data->adj_ang = gimbal_data->real_angle - gimbal_data->center_ang;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	885b      	ldrh	r3, [r3, #2]
 8002814:	461a      	mov	r2, r3
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	8a5b      	ldrh	r3, [r3, #18]
 800281a:	1ad3      	subs	r3, r2, r3
 800281c:	ee07 3a90 	vmov	s15, r3
 8002820:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	edc3 7a01 	vstr	s15, [r3, #4]
	gimbal_data->adj_ang = (float)gimbal_data->adj_ang/(GM6020_MAX_DEFLECTION) * PI; // convert to radians
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	ed93 7a01 	vldr	s14, [r3, #4]
 8002830:	eddf 6a1d 	vldr	s13, [pc, #116]	; 80028a8 <gimbal_offset+0xa0>
 8002834:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002838:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80028ac <gimbal_offset+0xa4>
 800283c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	edc3 7a01 	vstr	s15, [r3, #4]
	if (gimbal_data->adj_ang < -PI)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	edd3 7a01 	vldr	s15, [r3, #4]
 800284c:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80028b0 <gimbal_offset+0xa8>
 8002850:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002854:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002858:	d50a      	bpl.n	8002870 <gimbal_offset+0x68>
	{
		gimbal_data->adj_ang += 2 * PI;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	edd3 7a01 	vldr	s15, [r3, #4]
 8002860:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80028b4 <gimbal_offset+0xac>
 8002864:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	edc3 7a01 	vstr	s15, [r3, #4]
	}
	else if (gimbal_data->adj_ang > PI)
	{
		gimbal_data->adj_ang -= 2 * PI;
	}
}
 800286e:	e014      	b.n	800289a <gimbal_offset+0x92>
	else if (gimbal_data->adj_ang > PI)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	edd3 7a01 	vldr	s15, [r3, #4]
 8002876:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 80028ac <gimbal_offset+0xa4>
 800287a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800287e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002882:	dc00      	bgt.n	8002886 <gimbal_offset+0x7e>
}
 8002884:	e009      	b.n	800289a <gimbal_offset+0x92>
		gimbal_data->adj_ang -= 2 * PI;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	edd3 7a01 	vldr	s15, [r3, #4]
 800288c:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80028b4 <gimbal_offset+0xac>
 8002890:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	edc3 7a01 	vstr	s15, [r3, #4]
}
 800289a:	bf00      	nop
 800289c:	370c      	adds	r7, #12
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr
 80028a6:	bf00      	nop
 80028a8:	45800000 	.word	0x45800000
 80028ac:	40490fdb 	.word	0x40490fdb
 80028b0:	c0490fdb 	.word	0xc0490fdb
 80028b4:	40c90fdb 	.word	0x40c90fdb

080028b8 <usart_ISR>:
extern osEventFlagsId_t gimbal_data_flag;
extern osEventFlagsId_t rc_data_flag;
extern osThreadId_t movement_control_task_handle;

void usart_ISR(UART_HandleTypeDef *UartHandle)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b082      	sub	sp, #8
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
	xavier_data.magic_number = ((xavier_rx_buffer[1] << 8) | xavier_rx_buffer[0]);
 80028c0:	4b23      	ldr	r3, [pc, #140]	; (8002950 <usart_ISR+0x98>)
 80028c2:	785b      	ldrb	r3, [r3, #1]
 80028c4:	021b      	lsls	r3, r3, #8
 80028c6:	b21a      	sxth	r2, r3
 80028c8:	4b21      	ldr	r3, [pc, #132]	; (8002950 <usart_ISR+0x98>)
 80028ca:	781b      	ldrb	r3, [r3, #0]
 80028cc:	b21b      	sxth	r3, r3
 80028ce:	4313      	orrs	r3, r2
 80028d0:	b21a      	sxth	r2, r3
 80028d2:	4b20      	ldr	r3, [pc, #128]	; (8002954 <usart_ISR+0x9c>)
 80028d4:	801a      	strh	r2, [r3, #0]
	xavier_data.yaw = ((xavier_rx_buffer[3] << 8) | xavier_rx_buffer[2]);
 80028d6:	4b1e      	ldr	r3, [pc, #120]	; (8002950 <usart_ISR+0x98>)
 80028d8:	78db      	ldrb	r3, [r3, #3]
 80028da:	021b      	lsls	r3, r3, #8
 80028dc:	b21a      	sxth	r2, r3
 80028de:	4b1c      	ldr	r3, [pc, #112]	; (8002950 <usart_ISR+0x98>)
 80028e0:	789b      	ldrb	r3, [r3, #2]
 80028e2:	b21b      	sxth	r3, r3
 80028e4:	4313      	orrs	r3, r2
 80028e6:	b21a      	sxth	r2, r3
 80028e8:	4b1a      	ldr	r3, [pc, #104]	; (8002954 <usart_ISR+0x9c>)
 80028ea:	809a      	strh	r2, [r3, #4]
	xavier_data.pitch = ((xavier_rx_buffer[5] << 8) | xavier_rx_buffer[4]);
 80028ec:	4b18      	ldr	r3, [pc, #96]	; (8002950 <usart_ISR+0x98>)
 80028ee:	795b      	ldrb	r3, [r3, #5]
 80028f0:	021b      	lsls	r3, r3, #8
 80028f2:	b21a      	sxth	r2, r3
 80028f4:	4b16      	ldr	r3, [pc, #88]	; (8002950 <usart_ISR+0x98>)
 80028f6:	791b      	ldrb	r3, [r3, #4]
 80028f8:	b21b      	sxth	r3, r3
 80028fa:	4313      	orrs	r3, r2
 80028fc:	b21a      	sxth	r2, r3
 80028fe:	4b15      	ldr	r3, [pc, #84]	; (8002954 <usart_ISR+0x9c>)
 8002900:	805a      	strh	r2, [r3, #2]
	xavier_data.end_check = (xavier_rx_buffer[7] << 8) | xavier_rx_buffer[6];
 8002902:	4b13      	ldr	r3, [pc, #76]	; (8002950 <usart_ISR+0x98>)
 8002904:	79db      	ldrb	r3, [r3, #7]
 8002906:	021b      	lsls	r3, r3, #8
 8002908:	b21a      	sxth	r2, r3
 800290a:	4b11      	ldr	r3, [pc, #68]	; (8002950 <usart_ISR+0x98>)
 800290c:	799b      	ldrb	r3, [r3, #6]
 800290e:	b21b      	sxth	r3, r3
 8002910:	4313      	orrs	r3, r2
 8002912:	b21a      	sxth	r2, r3
 8002914:	4b0f      	ldr	r3, [pc, #60]	; (8002954 <usart_ISR+0x9c>)
 8002916:	80da      	strh	r2, [r3, #6]
	if (xavier_data.magic_number != START_MAGIC_NUMBER || xavier_data.end_check != END_MAGIC_NUMBER)
 8002918:	4b0e      	ldr	r3, [pc, #56]	; (8002954 <usart_ISR+0x9c>)
 800291a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800291e:	2b45      	cmp	r3, #69	; 0x45
 8002920:	d105      	bne.n	800292e <usart_ISR+0x76>
 8002922:	4b0c      	ldr	r3, [pc, #48]	; (8002954 <usart_ISR+0x9c>)
 8002924:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002928:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 800292c:	d006      	beq.n	800293c <usart_ISR+0x84>
	{
		xavier_data.pitch = 0;
 800292e:	4b09      	ldr	r3, [pc, #36]	; (8002954 <usart_ISR+0x9c>)
 8002930:	2200      	movs	r2, #0
 8002932:	805a      	strh	r2, [r3, #2]
		xavier_data.yaw = 0;
 8002934:	4b07      	ldr	r3, [pc, #28]	; (8002954 <usart_ISR+0x9c>)
 8002936:	2200      	movs	r2, #0
 8002938:	809a      	strh	r2, [r3, #4]
 800293a:	e005      	b.n	8002948 <usart_ISR+0x90>
	}
	else
	{
		//store previous data to account for bad data
		xavier_data.last_time = HAL_GetTick();
 800293c:	f001 fcb0 	bl	80042a0 <HAL_GetTick>
 8002940:	4603      	mov	r3, r0
 8002942:	4a04      	ldr	r2, [pc, #16]	; (8002954 <usart_ISR+0x9c>)
 8002944:	6093      	str	r3, [r2, #8]
	}
}
 8002946:	bf00      	nop
 8002948:	bf00      	nop
 800294a:	3708      	adds	r7, #8
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}
 8002950:	20004ee0 	.word	0x20004ee0
 8002954:	20009ee8 	.word	0x20009ee8

08002958 <gimbal_control_task>:
 * FreeRTOS task for gimbal controls
 * Has HIGH2 priority
 *
 */
void gimbal_control_task(void *argument)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b082      	sub	sp, #8
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(&XAVIER_UART, xavier_rx_buffer, OBC_DATA_SIZE);
 8002960:	2208      	movs	r2, #8
 8002962:	4906      	ldr	r1, [pc, #24]	; (800297c <gimbal_control_task+0x24>)
 8002964:	4806      	ldr	r0, [pc, #24]	; (8002980 <gimbal_control_task+0x28>)
 8002966:	f004 fde9 	bl	800753c <HAL_UART_Receive_DMA>
    while(1)
    {
		gimbal_angle_control(&canone_data.pitch, &canone_data.yaw);
 800296a:	4906      	ldr	r1, [pc, #24]	; (8002984 <gimbal_control_task+0x2c>)
 800296c:	4806      	ldr	r0, [pc, #24]	; (8002988 <gimbal_control_task+0x30>)
 800296e:	f000 f8cf 	bl	8002b10 <gimbal_angle_control>
		vTaskDelay(1);
 8002972:	2001      	movs	r0, #1
 8002974:	f007 fbb2 	bl	800a0dc <vTaskDelay>
		gimbal_angle_control(&canone_data.pitch, &canone_data.yaw);
 8002978:	e7f7      	b.n	800296a <gimbal_control_task+0x12>
 800297a:	bf00      	nop
 800297c:	20004ee0 	.word	0x20004ee0
 8002980:	20009c6c 	.word	0x20009c6c
 8002984:	20009e68 	.word	0x20009e68
 8002988:	20009de8 	.word	0x20009de8
 800298c:	00000000 	.word	0x00000000

08002990 <gimbalsweep>:
 * Need to check if having ID4 (i.e. 0x208) + having the launcher motors (ID 1-3, 0x201 to 0x203)
 * still provides a fast enough response for open source robots
 */

void gimbalsweep(gimbal_data_t *pitch_motor, gimbal_data_t *yaw_motor)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b082      	sub	sp, #8
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
 8002998:	6039      	str	r1, [r7, #0]
	aimbot_mode = 1;
 800299a:	4b57      	ldr	r3, [pc, #348]	; (8002af8 <gimbalsweep+0x168>)
 800299c:	2201      	movs	r2, #1
 800299e:	701a      	strb	r2, [r3, #0]
	if (sweeping_yaw == true){
 80029a0:	4b56      	ldr	r3, [pc, #344]	; (8002afc <gimbalsweep+0x16c>)
 80029a2:	781b      	ldrb	r3, [r3, #0]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d04f      	beq.n	8002a48 <gimbalsweep+0xb8>
		if (sweep_right == true){
 80029a8:	4b55      	ldr	r3, [pc, #340]	; (8002b00 <gimbalsweep+0x170>)
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d025      	beq.n	80029fc <gimbalsweep+0x6c>
			yaw += YAW_SWEEP_SPEED;
 80029b0:	4b54      	ldr	r3, [pc, #336]	; (8002b04 <gimbalsweep+0x174>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4618      	mov	r0, r3
 80029b6:	f7fd fdcf 	bl	8000558 <__aeabi_f2d>
 80029ba:	a34d      	add	r3, pc, #308	; (adr r3, 8002af0 <gimbalsweep+0x160>)
 80029bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029c0:	f7fd fc6c 	bl	800029c <__adddf3>
 80029c4:	4602      	mov	r2, r0
 80029c6:	460b      	mov	r3, r1
 80029c8:	4610      	mov	r0, r2
 80029ca:	4619      	mov	r1, r3
 80029cc:	f7fe f8de 	bl	8000b8c <__aeabi_d2f>
 80029d0:	4603      	mov	r3, r0
 80029d2:	4a4c      	ldr	r2, [pc, #304]	; (8002b04 <gimbalsweep+0x174>)
 80029d4:	6013      	str	r3, [r2, #0]
			if (yaw > yaw_motor->max_ang){
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	ed93 7a06 	vldr	s14, [r3, #24]
 80029dc:	4b49      	ldr	r3, [pc, #292]	; (8002b04 <gimbalsweep+0x174>)
 80029de:	edd3 7a00 	vldr	s15, [r3]
 80029e2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80029e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029ea:	d400      	bmi.n	80029ee <gimbalsweep+0x5e>
				sweep_up = true;
				sweeping_yaw = true;
			}
		}
	}
}
 80029ec:	e07b      	b.n	8002ae6 <gimbalsweep+0x156>
				sweep_right = false;
 80029ee:	4b44      	ldr	r3, [pc, #272]	; (8002b00 <gimbalsweep+0x170>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	701a      	strb	r2, [r3, #0]
				sweeping_yaw = false;
 80029f4:	4b41      	ldr	r3, [pc, #260]	; (8002afc <gimbalsweep+0x16c>)
 80029f6:	2200      	movs	r2, #0
 80029f8:	701a      	strb	r2, [r3, #0]
}
 80029fa:	e074      	b.n	8002ae6 <gimbalsweep+0x156>
			yaw -= YAW_SWEEP_SPEED;
 80029fc:	4b41      	ldr	r3, [pc, #260]	; (8002b04 <gimbalsweep+0x174>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4618      	mov	r0, r3
 8002a02:	f7fd fda9 	bl	8000558 <__aeabi_f2d>
 8002a06:	a33a      	add	r3, pc, #232	; (adr r3, 8002af0 <gimbalsweep+0x160>)
 8002a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a0c:	f7fd fc44 	bl	8000298 <__aeabi_dsub>
 8002a10:	4602      	mov	r2, r0
 8002a12:	460b      	mov	r3, r1
 8002a14:	4610      	mov	r0, r2
 8002a16:	4619      	mov	r1, r3
 8002a18:	f7fe f8b8 	bl	8000b8c <__aeabi_d2f>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	4a39      	ldr	r2, [pc, #228]	; (8002b04 <gimbalsweep+0x174>)
 8002a20:	6013      	str	r3, [r2, #0]
			if (yaw < yaw_motor->min_ang){
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	ed93 7a07 	vldr	s14, [r3, #28]
 8002a28:	4b36      	ldr	r3, [pc, #216]	; (8002b04 <gimbalsweep+0x174>)
 8002a2a:	edd3 7a00 	vldr	s15, [r3]
 8002a2e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002a32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a36:	dc00      	bgt.n	8002a3a <gimbalsweep+0xaa>
}
 8002a38:	e055      	b.n	8002ae6 <gimbalsweep+0x156>
				sweep_right = true;
 8002a3a:	4b31      	ldr	r3, [pc, #196]	; (8002b00 <gimbalsweep+0x170>)
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	701a      	strb	r2, [r3, #0]
				sweeping_yaw = false;
 8002a40:	4b2e      	ldr	r3, [pc, #184]	; (8002afc <gimbalsweep+0x16c>)
 8002a42:	2200      	movs	r2, #0
 8002a44:	701a      	strb	r2, [r3, #0]
}
 8002a46:	e04e      	b.n	8002ae6 <gimbalsweep+0x156>
		if (sweep_up == true){
 8002a48:	4b2f      	ldr	r3, [pc, #188]	; (8002b08 <gimbalsweep+0x178>)
 8002a4a:	781b      	ldrb	r3, [r3, #0]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d025      	beq.n	8002a9c <gimbalsweep+0x10c>
			pitch += PITCH_SWEEP_SPEED;
 8002a50:	4b2e      	ldr	r3, [pc, #184]	; (8002b0c <gimbalsweep+0x17c>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4618      	mov	r0, r3
 8002a56:	f7fd fd7f 	bl	8000558 <__aeabi_f2d>
 8002a5a:	a325      	add	r3, pc, #148	; (adr r3, 8002af0 <gimbalsweep+0x160>)
 8002a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a60:	f7fd fc1c 	bl	800029c <__adddf3>
 8002a64:	4602      	mov	r2, r0
 8002a66:	460b      	mov	r3, r1
 8002a68:	4610      	mov	r0, r2
 8002a6a:	4619      	mov	r1, r3
 8002a6c:	f7fe f88e 	bl	8000b8c <__aeabi_d2f>
 8002a70:	4603      	mov	r3, r0
 8002a72:	4a26      	ldr	r2, [pc, #152]	; (8002b0c <gimbalsweep+0x17c>)
 8002a74:	6013      	str	r3, [r2, #0]
			if (pitch > pitch_motor->max_ang){
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	ed93 7a06 	vldr	s14, [r3, #24]
 8002a7c:	4b23      	ldr	r3, [pc, #140]	; (8002b0c <gimbalsweep+0x17c>)
 8002a7e:	edd3 7a00 	vldr	s15, [r3]
 8002a82:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002a86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a8a:	d400      	bmi.n	8002a8e <gimbalsweep+0xfe>
}
 8002a8c:	e02b      	b.n	8002ae6 <gimbalsweep+0x156>
				sweep_up = false;
 8002a8e:	4b1e      	ldr	r3, [pc, #120]	; (8002b08 <gimbalsweep+0x178>)
 8002a90:	2200      	movs	r2, #0
 8002a92:	701a      	strb	r2, [r3, #0]
				sweeping_yaw = true;
 8002a94:	4b19      	ldr	r3, [pc, #100]	; (8002afc <gimbalsweep+0x16c>)
 8002a96:	2201      	movs	r2, #1
 8002a98:	701a      	strb	r2, [r3, #0]
}
 8002a9a:	e024      	b.n	8002ae6 <gimbalsweep+0x156>
			pitch -= PITCH_SWEEP_SPEED;
 8002a9c:	4b1b      	ldr	r3, [pc, #108]	; (8002b0c <gimbalsweep+0x17c>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f7fd fd59 	bl	8000558 <__aeabi_f2d>
 8002aa6:	a312      	add	r3, pc, #72	; (adr r3, 8002af0 <gimbalsweep+0x160>)
 8002aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aac:	f7fd fbf4 	bl	8000298 <__aeabi_dsub>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	460b      	mov	r3, r1
 8002ab4:	4610      	mov	r0, r2
 8002ab6:	4619      	mov	r1, r3
 8002ab8:	f7fe f868 	bl	8000b8c <__aeabi_d2f>
 8002abc:	4603      	mov	r3, r0
 8002abe:	4a13      	ldr	r2, [pc, #76]	; (8002b0c <gimbalsweep+0x17c>)
 8002ac0:	6013      	str	r3, [r2, #0]
			if (pitch < pitch_motor->min_ang){
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	ed93 7a07 	vldr	s14, [r3, #28]
 8002ac8:	4b10      	ldr	r3, [pc, #64]	; (8002b0c <gimbalsweep+0x17c>)
 8002aca:	edd3 7a00 	vldr	s15, [r3]
 8002ace:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002ad2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ad6:	dc00      	bgt.n	8002ada <gimbalsweep+0x14a>
}
 8002ad8:	e005      	b.n	8002ae6 <gimbalsweep+0x156>
				sweep_up = true;
 8002ada:	4b0b      	ldr	r3, [pc, #44]	; (8002b08 <gimbalsweep+0x178>)
 8002adc:	2201      	movs	r2, #1
 8002ade:	701a      	strb	r2, [r3, #0]
				sweeping_yaw = true;
 8002ae0:	4b06      	ldr	r3, [pc, #24]	; (8002afc <gimbalsweep+0x16c>)
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	701a      	strb	r2, [r3, #0]
}
 8002ae6:	bf00      	nop
 8002ae8:	3708      	adds	r7, #8
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	47ae147b 	.word	0x47ae147b
 8002af4:	3f847ae1 	.word	0x3f847ae1
 8002af8:	20004ed6 	.word	0x20004ed6
 8002afc:	20000006 	.word	0x20000006
 8002b00:	20000004 	.word	0x20000004
 8002b04:	20004edc 	.word	0x20004edc
 8002b08:	20000005 	.word	0x20000005
 8002b0c:	20004ed8 	.word	0x20004ed8

08002b10 <gimbal_angle_control>:

void gimbal_angle_control(gimbal_data_t *pitch_motor, gimbal_data_t *yaw_motor)
{
 8002b10:	b5b0      	push	{r4, r5, r7, lr}
 8002b12:	b084      	sub	sp, #16
 8002b14:	af02      	add	r7, sp, #8
 8002b16:	6078      	str	r0, [r7, #4]
 8002b18:	6039      	str	r1, [r7, #0]
	if (remote_cmd.left_switch == aimbot_enable && remote_cmd.right_switch == random_movement)
 8002b1a:	4ba7      	ldr	r3, [pc, #668]	; (8002db8 <gimbal_angle_control+0x2a8>)
 8002b1c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d109      	bne.n	8002b38 <gimbal_angle_control+0x28>
 8002b24:	4ba4      	ldr	r3, [pc, #656]	; (8002db8 <gimbal_angle_control+0x2a8>)
 8002b26:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8002b2a:	2b03      	cmp	r3, #3
 8002b2c:	d104      	bne.n	8002b38 <gimbal_angle_control+0x28>
	{
		//sweeps the four corners of its field of vision
		gimbalsweep(pitch_motor, yaw_motor);
 8002b2e:	6839      	ldr	r1, [r7, #0]
 8002b30:	6878      	ldr	r0, [r7, #4]
 8002b32:	f7ff ff2d 	bl	8002990 <gimbalsweep>
 8002b36:	e0c3      	b.n	8002cc0 <gimbal_angle_control+0x1b0>
	}
	else if (remote_cmd.left_switch == aimbot_enable)
 8002b38:	4b9f      	ldr	r3, [pc, #636]	; (8002db8 <gimbal_angle_control+0x2a8>)
 8002b3a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	d157      	bne.n	8002bf2 <gimbal_angle_control+0xe2>
	{
		aimbot_mode = 1;
 8002b42:	4b9e      	ldr	r3, [pc, #632]	; (8002dbc <gimbal_angle_control+0x2ac>)
 8002b44:	2201      	movs	r2, #1
 8002b46:	701a      	strb	r2, [r3, #0]
		pitch += (float)xavier_data.pitch/660 * PITCH_SPEED * PITCH_INVERT;
 8002b48:	4b9d      	ldr	r3, [pc, #628]	; (8002dc0 <gimbal_angle_control+0x2b0>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f7fd fd03 	bl	8000558 <__aeabi_f2d>
 8002b52:	4604      	mov	r4, r0
 8002b54:	460d      	mov	r5, r1
 8002b56:	4b9b      	ldr	r3, [pc, #620]	; (8002dc4 <gimbal_angle_control+0x2b4>)
 8002b58:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002b5c:	ee07 3a90 	vmov	s15, r3
 8002b60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b64:	ed9f 7a98 	vldr	s14, [pc, #608]	; 8002dc8 <gimbal_angle_control+0x2b8>
 8002b68:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002b6c:	ee16 0a90 	vmov	r0, s13
 8002b70:	f7fd fcf2 	bl	8000558 <__aeabi_f2d>
 8002b74:	a38e      	add	r3, pc, #568	; (adr r3, 8002db0 <gimbal_angle_control+0x2a0>)
 8002b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b7a:	f7fd fd45 	bl	8000608 <__aeabi_dmul>
 8002b7e:	4602      	mov	r2, r0
 8002b80:	460b      	mov	r3, r1
 8002b82:	4620      	mov	r0, r4
 8002b84:	4629      	mov	r1, r5
 8002b86:	f7fd fb89 	bl	800029c <__adddf3>
 8002b8a:	4602      	mov	r2, r0
 8002b8c:	460b      	mov	r3, r1
 8002b8e:	4610      	mov	r0, r2
 8002b90:	4619      	mov	r1, r3
 8002b92:	f7fd fffb 	bl	8000b8c <__aeabi_d2f>
 8002b96:	4603      	mov	r3, r0
 8002b98:	4a89      	ldr	r2, [pc, #548]	; (8002dc0 <gimbal_angle_control+0x2b0>)
 8002b9a:	6013      	str	r3, [r2, #0]
		yaw += (float)xavier_data.yaw/660 * YAW_SPEED * YAW_INVERT;
 8002b9c:	4b8b      	ldr	r3, [pc, #556]	; (8002dcc <gimbal_angle_control+0x2bc>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f7fd fcd9 	bl	8000558 <__aeabi_f2d>
 8002ba6:	4604      	mov	r4, r0
 8002ba8:	460d      	mov	r5, r1
 8002baa:	4b86      	ldr	r3, [pc, #536]	; (8002dc4 <gimbal_angle_control+0x2b4>)
 8002bac:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002bb0:	ee07 3a90 	vmov	s15, r3
 8002bb4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002bb8:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8002dc8 <gimbal_angle_control+0x2b8>
 8002bbc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002bc0:	ee16 0a90 	vmov	r0, s13
 8002bc4:	f7fd fcc8 	bl	8000558 <__aeabi_f2d>
 8002bc8:	a379      	add	r3, pc, #484	; (adr r3, 8002db0 <gimbal_angle_control+0x2a0>)
 8002bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bce:	f7fd fd1b 	bl	8000608 <__aeabi_dmul>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	460b      	mov	r3, r1
 8002bd6:	4620      	mov	r0, r4
 8002bd8:	4629      	mov	r1, r5
 8002bda:	f7fd fb5f 	bl	800029c <__adddf3>
 8002bde:	4602      	mov	r2, r0
 8002be0:	460b      	mov	r3, r1
 8002be2:	4610      	mov	r0, r2
 8002be4:	4619      	mov	r1, r3
 8002be6:	f7fd ffd1 	bl	8000b8c <__aeabi_d2f>
 8002bea:	4603      	mov	r3, r0
 8002bec:	4a77      	ldr	r2, [pc, #476]	; (8002dcc <gimbal_angle_control+0x2bc>)
 8002bee:	6013      	str	r3, [r2, #0]
 8002bf0:	e066      	b.n	8002cc0 <gimbal_angle_control+0x1b0>
	}
	else if (remote_cmd.left_switch == teleopetate /*|| xavier_data.last_time + XAVIER_TIMEOUT < HAL_GetTick()*/)
 8002bf2:	4b71      	ldr	r3, [pc, #452]	; (8002db8 <gimbal_angle_control+0x2a8>)
 8002bf4:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8002bf8:	2b02      	cmp	r3, #2
 8002bfa:	d161      	bne.n	8002cc0 <gimbal_angle_control+0x1b0>
	{
		if (HAL_GetTick() - remote_cmd.last_time > REMOTE_TIMEOUT )
 8002bfc:	f001 fb50 	bl	80042a0 <HAL_GetTick>
 8002c00:	4602      	mov	r2, r0
 8002c02:	4b6d      	ldr	r3, [pc, #436]	; (8002db8 <gimbal_angle_control+0x2a8>)
 8002c04:	69db      	ldr	r3, [r3, #28]
 8002c06:	1ad3      	subs	r3, r2, r3
 8002c08:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002c0c:	d901      	bls.n	8002c12 <gimbal_angle_control+0x102>
		{
			dbus_reset();
 8002c0e:	f001 f929 	bl	8003e64 <dbus_reset>
		}
		pitch += (float)remote_cmd.right_y/660 * PITCH_SPEED * PITCH_INVERT;
 8002c12:	4b6b      	ldr	r3, [pc, #428]	; (8002dc0 <gimbal_angle_control+0x2b0>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4618      	mov	r0, r3
 8002c18:	f7fd fc9e 	bl	8000558 <__aeabi_f2d>
 8002c1c:	4604      	mov	r4, r0
 8002c1e:	460d      	mov	r5, r1
 8002c20:	4b65      	ldr	r3, [pc, #404]	; (8002db8 <gimbal_angle_control+0x2a8>)
 8002c22:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002c26:	ee07 3a90 	vmov	s15, r3
 8002c2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c2e:	ed9f 7a66 	vldr	s14, [pc, #408]	; 8002dc8 <gimbal_angle_control+0x2b8>
 8002c32:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002c36:	ee16 0a90 	vmov	r0, s13
 8002c3a:	f7fd fc8d 	bl	8000558 <__aeabi_f2d>
 8002c3e:	a35c      	add	r3, pc, #368	; (adr r3, 8002db0 <gimbal_angle_control+0x2a0>)
 8002c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c44:	f7fd fce0 	bl	8000608 <__aeabi_dmul>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	460b      	mov	r3, r1
 8002c4c:	4620      	mov	r0, r4
 8002c4e:	4629      	mov	r1, r5
 8002c50:	f7fd fb24 	bl	800029c <__adddf3>
 8002c54:	4602      	mov	r2, r0
 8002c56:	460b      	mov	r3, r1
 8002c58:	4610      	mov	r0, r2
 8002c5a:	4619      	mov	r1, r3
 8002c5c:	f7fd ff96 	bl	8000b8c <__aeabi_d2f>
 8002c60:	4603      	mov	r3, r0
 8002c62:	4a57      	ldr	r2, [pc, #348]	; (8002dc0 <gimbal_angle_control+0x2b0>)
 8002c64:	6013      	str	r3, [r2, #0]
		yaw += (float)remote_cmd.right_x/660 * YAW_SPEED * YAW_INVERT;
 8002c66:	4b59      	ldr	r3, [pc, #356]	; (8002dcc <gimbal_angle_control+0x2bc>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f7fd fc74 	bl	8000558 <__aeabi_f2d>
 8002c70:	4604      	mov	r4, r0
 8002c72:	460d      	mov	r5, r1
 8002c74:	4b50      	ldr	r3, [pc, #320]	; (8002db8 <gimbal_angle_control+0x2a8>)
 8002c76:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c7a:	ee07 3a90 	vmov	s15, r3
 8002c7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c82:	ed9f 7a51 	vldr	s14, [pc, #324]	; 8002dc8 <gimbal_angle_control+0x2b8>
 8002c86:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002c8a:	ee16 0a90 	vmov	r0, s13
 8002c8e:	f7fd fc63 	bl	8000558 <__aeabi_f2d>
 8002c92:	a347      	add	r3, pc, #284	; (adr r3, 8002db0 <gimbal_angle_control+0x2a0>)
 8002c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c98:	f7fd fcb6 	bl	8000608 <__aeabi_dmul>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	460b      	mov	r3, r1
 8002ca0:	4620      	mov	r0, r4
 8002ca2:	4629      	mov	r1, r5
 8002ca4:	f7fd fafa 	bl	800029c <__adddf3>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	460b      	mov	r3, r1
 8002cac:	4610      	mov	r0, r2
 8002cae:	4619      	mov	r1, r3
 8002cb0:	f7fd ff6c 	bl	8000b8c <__aeabi_d2f>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	4a45      	ldr	r2, [pc, #276]	; (8002dcc <gimbal_angle_control+0x2bc>)
 8002cb8:	6013      	str	r3, [r2, #0]
		aimbot_mode = 0;
 8002cba:	4b40      	ldr	r3, [pc, #256]	; (8002dbc <gimbal_angle_control+0x2ac>)
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	701a      	strb	r2, [r3, #0]
	}

	if (pitch > pitch_motor->max_ang)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	ed93 7a06 	vldr	s14, [r3, #24]
 8002cc6:	4b3e      	ldr	r3, [pc, #248]	; (8002dc0 <gimbal_angle_control+0x2b0>)
 8002cc8:	edd3 7a00 	vldr	s15, [r3]
 8002ccc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002cd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cd4:	d503      	bpl.n	8002cde <gimbal_angle_control+0x1ce>
	{
		pitch = pitch_motor->max_ang;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	699b      	ldr	r3, [r3, #24]
 8002cda:	4a39      	ldr	r2, [pc, #228]	; (8002dc0 <gimbal_angle_control+0x2b0>)
 8002cdc:	6013      	str	r3, [r2, #0]
	}
	if (pitch < pitch_motor->min_ang)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	ed93 7a07 	vldr	s14, [r3, #28]
 8002ce4:	4b36      	ldr	r3, [pc, #216]	; (8002dc0 <gimbal_angle_control+0x2b0>)
 8002ce6:	edd3 7a00 	vldr	s15, [r3]
 8002cea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002cee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cf2:	dd03      	ble.n	8002cfc <gimbal_angle_control+0x1ec>
	{
		pitch = pitch_motor->min_ang;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	69db      	ldr	r3, [r3, #28]
 8002cf8:	4a31      	ldr	r2, [pc, #196]	; (8002dc0 <gimbal_angle_control+0x2b0>)
 8002cfa:	6013      	str	r3, [r2, #0]
	}


	if (yaw > yaw_motor->max_ang)
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	ed93 7a06 	vldr	s14, [r3, #24]
 8002d02:	4b32      	ldr	r3, [pc, #200]	; (8002dcc <gimbal_angle_control+0x2bc>)
 8002d04:	edd3 7a00 	vldr	s15, [r3]
 8002d08:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d10:	d503      	bpl.n	8002d1a <gimbal_angle_control+0x20a>
	{
		yaw = yaw_motor->max_ang;
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	699b      	ldr	r3, [r3, #24]
 8002d16:	4a2d      	ldr	r2, [pc, #180]	; (8002dcc <gimbal_angle_control+0x2bc>)
 8002d18:	6013      	str	r3, [r2, #0]
	}
	if (yaw < yaw_motor->min_ang)
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	ed93 7a07 	vldr	s14, [r3, #28]
 8002d20:	4b2a      	ldr	r3, [pc, #168]	; (8002dcc <gimbal_angle_control+0x2bc>)
 8002d22:	edd3 7a00 	vldr	s15, [r3]
 8002d26:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d2e:	dd03      	ble.n	8002d38 <gimbal_angle_control+0x228>
	{
		yaw = yaw_motor->min_ang;
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	69db      	ldr	r3, [r3, #28]
 8002d34:	4a25      	ldr	r2, [pc, #148]	; (8002dcc <gimbal_angle_control+0x2bc>)
 8002d36:	6013      	str	r3, [r2, #0]
	}

	angle_pid(pitch, pitch_motor->adj_ang, pitch_motor);
 8002d38:	4b21      	ldr	r3, [pc, #132]	; (8002dc0 <gimbal_angle_control+0x2b0>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f7fd fc0b 	bl	8000558 <__aeabi_f2d>
 8002d42:	4604      	mov	r4, r0
 8002d44:	460d      	mov	r5, r1
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f7fd fc04 	bl	8000558 <__aeabi_f2d>
 8002d50:	4602      	mov	r2, r0
 8002d52:	460b      	mov	r3, r1
 8002d54:	6878      	ldr	r0, [r7, #4]
 8002d56:	ec43 2b11 	vmov	d1, r2, r3
 8002d5a:	ec45 4b10 	vmov	d0, r4, r5
 8002d5e:	f000 fb03 	bl	8003368 <angle_pid>
	angle_pid(yaw, yaw_motor->adj_ang, yaw_motor);
 8002d62:	4b1a      	ldr	r3, [pc, #104]	; (8002dcc <gimbal_angle_control+0x2bc>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4618      	mov	r0, r3
 8002d68:	f7fd fbf6 	bl	8000558 <__aeabi_f2d>
 8002d6c:	4604      	mov	r4, r0
 8002d6e:	460d      	mov	r5, r1
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	4618      	mov	r0, r3
 8002d76:	f7fd fbef 	bl	8000558 <__aeabi_f2d>
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	460b      	mov	r3, r1
 8002d7e:	6838      	ldr	r0, [r7, #0]
 8002d80:	ec43 2b11 	vmov	d1, r2, r3
 8002d84:	ec45 4b10 	vmov	d0, r4, r5
 8002d88:	f000 faee 	bl	8003368 <angle_pid>
	CANtwo_cmd(pitch_motor->pid.output, yaw_motor->pid.output, 0, 0, GIMBAL_ID);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	f9b3 007c 	ldrsh.w	r0, [r3, #124]	; 0x7c
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	f9b3 107c 	ldrsh.w	r1, [r3, #124]	; 0x7c
 8002d98:	f240 23ff 	movw	r3, #767	; 0x2ff
 8002d9c:	9300      	str	r3, [sp, #0]
 8002d9e:	2300      	movs	r3, #0
 8002da0:	2200      	movs	r2, #0
 8002da2:	f000 fba9 	bl	80034f8 <CANtwo_cmd>
}
 8002da6:	bf00      	nop
 8002da8:	3708      	adds	r7, #8
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bdb0      	pop	{r4, r5, r7, pc}
 8002dae:	bf00      	nop
 8002db0:	47ae147b 	.word	0x47ae147b
 8002db4:	3f847ae1 	.word	0x3f847ae1
 8002db8:	20004f38 	.word	0x20004f38
 8002dbc:	20004ed6 	.word	0x20004ed6
 8002dc0:	20004ed8 	.word	0x20004ed8
 8002dc4:	20009ee8 	.word	0x20009ee8
 8002dc8:	44250000 	.word	0x44250000
 8002dcc:	20004edc 	.word	0x20004edc

08002dd0 <home_gimbal>:

void home_gimbal(gimbal_data_t *pitch_motor, gimbal_data_t *yaw_motor)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b084      	sub	sp, #16
 8002dd4:	af02      	add	r7, sp, #8
 8002dd6:	6078      	str	r0, [r7, #4]
 8002dd8:	6039      	str	r1, [r7, #0]
	angle_pid(0, pitch_motor->adj_ang, pitch_motor);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	4618      	mov	r0, r3
 8002de0:	f7fd fbba 	bl	8000558 <__aeabi_f2d>
 8002de4:	4602      	mov	r2, r0
 8002de6:	460b      	mov	r3, r1
 8002de8:	6878      	ldr	r0, [r7, #4]
 8002dea:	ec43 2b11 	vmov	d1, r2, r3
 8002dee:	ed9f 0b12 	vldr	d0, [pc, #72]	; 8002e38 <home_gimbal+0x68>
 8002df2:	f000 fab9 	bl	8003368 <angle_pid>
	angle_pid(0, yaw_motor->adj_ang, yaw_motor);
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f7fd fbac 	bl	8000558 <__aeabi_f2d>
 8002e00:	4602      	mov	r2, r0
 8002e02:	460b      	mov	r3, r1
 8002e04:	6838      	ldr	r0, [r7, #0]
 8002e06:	ec43 2b11 	vmov	d1, r2, r3
 8002e0a:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 8002e38 <home_gimbal+0x68>
 8002e0e:	f000 faab 	bl	8003368 <angle_pid>
	CANtwo_cmd(pitch_motor->pid.output, yaw_motor->pid.output, 0, 0, GIMBAL_ID);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	f9b3 007c 	ldrsh.w	r0, [r3, #124]	; 0x7c
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	f9b3 107c 	ldrsh.w	r1, [r3, #124]	; 0x7c
 8002e1e:	f240 23ff 	movw	r3, #767	; 0x2ff
 8002e22:	9300      	str	r3, [sp, #0]
 8002e24:	2300      	movs	r3, #0
 8002e26:	2200      	movs	r2, #0
 8002e28:	f000 fb66 	bl	80034f8 <CANtwo_cmd>
}
 8002e2c:	bf00      	nop
 8002e2e:	3708      	adds	r7, #8
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}
 8002e34:	f3af 8000 	nop.w
	...

08002e40 <gun_control_task>:
uint16_t max_pwm = 2200;


//TODO: Check rotation frequency, change to autonomous (currently dependent on RC)
void gun_control_task(void *argument)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b084      	sub	sp, #16
 8002e44:	af02      	add	r7, sp, #8
 8002e46:	6078      	str	r0, [r7, #4]
	//Starting PWM for 4 snail motors (grouped as 1&2 and 3&4),
	HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_1);	// PD12
 8002e48:	2100      	movs	r1, #0
 8002e4a:	483f      	ldr	r0, [pc, #252]	; (8002f48 <gun_control_task+0x108>)
 8002e4c:	f003 fc90 	bl	8006770 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_2); 	// PD13 (reversed)
 8002e50:	2104      	movs	r1, #4
 8002e52:	483d      	ldr	r0, [pc, #244]	; (8002f48 <gun_control_task+0x108>)
 8002e54:	f003 fc8c 	bl	8006770 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_3);	// PD14
 8002e58:	2108      	movs	r1, #8
 8002e5a:	483b      	ldr	r0, [pc, #236]	; (8002f48 <gun_control_task+0x108>)
 8002e5c:	f003 fc88 	bl	8006770 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_4); 	// PD15 (reversed)
 8002e60:	210c      	movs	r1, #12
 8002e62:	4839      	ldr	r0, [pc, #228]	; (8002f48 <gun_control_task+0x108>)
 8002e64:	f003 fc84 	bl	8006770 <HAL_TIM_PWM_Start>
	htim4.Instance->ARR = rotation_freq;
 8002e68:	4b38      	ldr	r3, [pc, #224]	; (8002f4c <gun_control_task+0x10c>)
 8002e6a:	881a      	ldrh	r2, [r3, #0]
 8002e6c:	4b36      	ldr	r3, [pc, #216]	; (8002f48 <gun_control_task+0x108>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	62da      	str	r2, [r3, #44]	; 0x2c
*/

	while(1)
	{
		//refresh dbus data
		if (HAL_GetTick() - remote_cmd.last_time > REMOTE_TIMEOUT )
 8002e72:	f001 fa15 	bl	80042a0 <HAL_GetTick>
 8002e76:	4602      	mov	r2, r0
 8002e78:	4b35      	ldr	r3, [pc, #212]	; (8002f50 <gun_control_task+0x110>)
 8002e7a:	69db      	ldr	r3, [r3, #28]
 8002e7c:	1ad3      	subs	r3, r2, r3
 8002e7e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002e82:	d907      	bls.n	8002e94 <gun_control_task+0x54>
		{
			dbus_reset();
 8002e84:	f000 ffee 	bl	8003e64 <dbus_reset>
			firing[0] = 0;
 8002e88:	4b32      	ldr	r3, [pc, #200]	; (8002f54 <gun_control_task+0x114>)
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	701a      	strb	r2, [r3, #0]
			firing[1] = 0;
 8002e8e:	4b31      	ldr	r3, [pc, #196]	; (8002f54 <gun_control_task+0x114>)
 8002e90:	2200      	movs	r2, #0
 8002e92:	705a      	strb	r2, [r3, #1]
		}
		//if firing and kill switch is not activated
		if(remote_cmd.right_switch == fire && remote_cmd.left_switch != kill)
 8002e94:	4b2e      	ldr	r3, [pc, #184]	; (8002f50 <gun_control_task+0x110>)
 8002e96:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d115      	bne.n	8002eca <gun_control_task+0x8a>
 8002e9e:	4b2c      	ldr	r3, [pc, #176]	; (8002f50 <gun_control_task+0x110>)
 8002ea0:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8002ea4:	2b03      	cmp	r3, #3
 8002ea6:	d010      	beq.n	8002eca <gun_control_task+0x8a>
		{
			osEventFlagsWait(gun_data_flag, 0x10, osFlagsWaitAll, 100);
 8002ea8:	4b2b      	ldr	r3, [pc, #172]	; (8002f58 <gun_control_task+0x118>)
 8002eaa:	6818      	ldr	r0, [r3, #0]
 8002eac:	2364      	movs	r3, #100	; 0x64
 8002eae:	2201      	movs	r2, #1
 8002eb0:	2110      	movs	r1, #16
 8002eb2:	f005 fd2b 	bl	800890c <osEventFlagsWait>
			launcher_control(canone_data.FEEDER);
 8002eb6:	4829      	ldr	r0, [pc, #164]	; (8002f5c <gun_control_task+0x11c>)
 8002eb8:	f000 f85a 	bl	8002f70 <launcher_control>
			osEventFlagsClear(gun_data_flag, 0x10);
 8002ebc:	4b26      	ldr	r3, [pc, #152]	; (8002f58 <gun_control_task+0x118>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	2110      	movs	r1, #16
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f005 fcde 	bl	8008884 <osEventFlagsClear>
 8002ec8:	e035      	b.n	8002f36 <gun_control_task+0xf6>
		}
		//otherwise kill the launcher
		else
		{
			pwm_output(-1,400);
 8002eca:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8002ece:	20ff      	movs	r0, #255	; 0xff
 8002ed0:	f000 f95a 	bl	8003188 <pwm_output>
			speed_pid(0, canone_data.FEEDER[0].rpm, &canone_data.FEEDER[0].pid);
 8002ed4:	4b22      	ldr	r3, [pc, #136]	; (8002f60 <gun_control_task+0x120>)
 8002ed6:	f9b3 306c 	ldrsh.w	r3, [r3, #108]	; 0x6c
 8002eda:	4618      	mov	r0, r3
 8002edc:	f7fd fb2a 	bl	8000534 <__aeabi_i2d>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	460b      	mov	r3, r1
 8002ee4:	481f      	ldr	r0, [pc, #124]	; (8002f64 <gun_control_task+0x124>)
 8002ee6:	ec43 2b11 	vmov	d1, r2, r3
 8002eea:	ed9f 0b15 	vldr	d0, [pc, #84]	; 8002f40 <gun_control_task+0x100>
 8002eee:	f000 f983 	bl	80031f8 <speed_pid>
			speed_pid(0, canone_data.FEEDER[1].rpm, &canone_data.FEEDER[1].pid);
 8002ef2:	4b1b      	ldr	r3, [pc, #108]	; (8002f60 <gun_control_task+0x120>)
 8002ef4:	f9b3 30d4 	ldrsh.w	r3, [r3, #212]	; 0xd4
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f7fd fb1b 	bl	8000534 <__aeabi_i2d>
 8002efe:	4602      	mov	r2, r0
 8002f00:	460b      	mov	r3, r1
 8002f02:	4819      	ldr	r0, [pc, #100]	; (8002f68 <gun_control_task+0x128>)
 8002f04:	ec43 2b11 	vmov	d1, r2, r3
 8002f08:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 8002f40 <gun_control_task+0x100>
 8002f0c:	f000 f974 	bl	80031f8 <speed_pid>
			CANone_cmd(canone_data.FEEDER[0].pid.output,canone_data.FEEDER[1].pid.output,0,0, LAUNCHER_ID);
 8002f10:	4b13      	ldr	r3, [pc, #76]	; (8002f60 <gun_control_task+0x120>)
 8002f12:	f9b3 00cc 	ldrsh.w	r0, [r3, #204]	; 0xcc
 8002f16:	4b12      	ldr	r3, [pc, #72]	; (8002f60 <gun_control_task+0x120>)
 8002f18:	f9b3 1134 	ldrsh.w	r1, [r3, #308]	; 0x134
 8002f1c:	f240 13ff 	movw	r3, #511	; 0x1ff
 8002f20:	9300      	str	r3, [sp, #0]
 8002f22:	2300      	movs	r3, #0
 8002f24:	2200      	movs	r2, #0
 8002f26:	f000 fa9d 	bl	8003464 <CANone_cmd>
			firing[0] = 0;
 8002f2a:	4b0a      	ldr	r3, [pc, #40]	; (8002f54 <gun_control_task+0x114>)
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	701a      	strb	r2, [r3, #0]
			firing[1] = 0;
 8002f30:	4b08      	ldr	r3, [pc, #32]	; (8002f54 <gun_control_task+0x114>)
 8002f32:	2200      	movs	r2, #0
 8002f34:	705a      	strb	r2, [r3, #1]
		}
		//delays task for other tasks to run, CHECK THE VALUE
		vTaskDelay(CHASSIS_DELAY);
 8002f36:	2002      	movs	r0, #2
 8002f38:	f007 f8d0 	bl	800a0dc <vTaskDelay>
		if (HAL_GetTick() - remote_cmd.last_time > REMOTE_TIMEOUT )
 8002f3c:	e799      	b.n	8002e72 <gun_control_task+0x32>
 8002f3e:	bf00      	nop
	...
 8002f48:	20009a4c 	.word	0x20009a4c
 8002f4c:	20000008 	.word	0x20000008
 8002f50:	20004f38 	.word	0x20004f38
 8002f54:	20004efc 	.word	0x20004efc
 8002f58:	200098d0 	.word	0x200098d0
 8002f5c:	20009d18 	.word	0x20009d18
 8002f60:	20009cb0 	.word	0x20009cb0
 8002f64:	20009d28 	.word	0x20009d28
 8002f68:	20009d90 	.word	0x20009d90
 8002f6c:	00000000 	.word	0x00000000

08002f70 <launcher_control>:
	}
	osThreadTerminate(NULL);
}

void launcher_control(motor_data_t *feeders)
{
 8002f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f74:	b087      	sub	sp, #28
 8002f76:	af02      	add	r7, sp, #8
 8002f78:	6078      	str	r0, [r7, #4]
	int16_t feeder_output[2];

	for (int i = 0; i < 2; i++)
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	60fb      	str	r3, [r7, #12]
 8002f7e:	e0db      	b.n	8003138 <launcher_control+0x1c8>
	{
		//Remember to change one of the motor direction according to data sheet since PWM cannot change direction.
		pwm_output(i,1300); // 0-100 (max speed), 50: 50% (?) of maximum speed = 1300 microseconds pulsewidth
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	f240 5114 	movw	r1, #1300	; 0x514
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f000 f8fd 	bl	8003188 <pwm_output>
		if (firing[i] == 0)
 8002f8e:	4a7a      	ldr	r2, [pc, #488]	; (8003178 <launcher_control+0x208>)
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	4413      	add	r3, r2
 8002f94:	781b      	ldrb	r3, [r3, #0]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d10b      	bne.n	8002fb2 <launcher_control+0x42>
		{
			firing[i] = 1;
 8002f9a:	4a77      	ldr	r2, [pc, #476]	; (8003178 <launcher_control+0x208>)
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	4413      	add	r3, r2
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	701a      	strb	r2, [r3, #0]
			start_time[i] = HAL_GetTick();
 8002fa4:	f001 f97c 	bl	80042a0 <HAL_GetTick>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	4974      	ldr	r1, [pc, #464]	; (800317c <launcher_control+0x20c>)
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		}
		if (start_time[i] + 1000 < HAL_GetTick()) //If more than 1 s has passed since the fire command has been given,and flywheel has charged for 1s, feed
 8002fb2:	4a72      	ldr	r2, [pc, #456]	; (800317c <launcher_control+0x20c>)
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fba:	f503 767a 	add.w	r6, r3, #1000	; 0x3e8
 8002fbe:	f001 f96f 	bl	80042a0 <HAL_GetTick>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	429e      	cmp	r6, r3
 8002fc6:	f080 8099 	bcs.w	80030fc <launcher_control+0x18c>
		{
			if (fabs(feeders[i].torque) > FEEDER_JAM_TORQUE)
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2268      	movs	r2, #104	; 0x68
 8002fce:	fb02 f303 	mul.w	r3, r2, r3
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	4413      	add	r3, r2
 8002fd6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f7fd faaa 	bl	8000534 <__aeabi_i2d>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	460b      	mov	r3, r1
 8002fe4:	4614      	mov	r4, r2
 8002fe6:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8002fea:	a35f      	add	r3, pc, #380	; (adr r3, 8003168 <launcher_control+0x1f8>)
 8002fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ff0:	4620      	mov	r0, r4
 8002ff2:	4629      	mov	r1, r5
 8002ff4:	f7fd fd98 	bl	8000b28 <__aeabi_dcmpgt>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d00b      	beq.n	8003016 <launcher_control+0xa6>
			{
				unjamming[i] = 1;
 8002ffe:	4a60      	ldr	r2, [pc, #384]	; (8003180 <launcher_control+0x210>)
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	4413      	add	r3, r2
 8003004:	2201      	movs	r2, #1
 8003006:	701a      	strb	r2, [r3, #0]
				jam_time[i] = HAL_GetTick();
 8003008:	f001 f94a 	bl	80042a0 <HAL_GetTick>
 800300c:	4602      	mov	r2, r0
 800300e:	495d      	ldr	r1, [pc, #372]	; (8003184 <launcher_control+0x214>)
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			}

			//unjamming needed, check what feeder output to give
			if (unjamming[i] == 1)
 8003016:	4a5a      	ldr	r2, [pc, #360]	; (8003180 <launcher_control+0x210>)
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	4413      	add	r3, r2
 800301c:	781b      	ldrb	r3, [r3, #0]
 800301e:	2b01      	cmp	r3, #1
 8003020:	d122      	bne.n	8003068 <launcher_control+0xf8>
			{
				// unjam time has elasped
				if (jam_time[i] + FEEDER_UNJAM_TIME < HAL_GetTick())
 8003022:	4a58      	ldr	r2, [pc, #352]	; (8003184 <launcher_control+0x214>)
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800302a:	f103 0696 	add.w	r6, r3, #150	; 0x96
 800302e:	f001 f937 	bl	80042a0 <HAL_GetTick>
 8003032:	4603      	mov	r3, r0
 8003034:	429e      	cmp	r6, r3
 8003036:	d20d      	bcs.n	8003054 <launcher_control+0xe4>
				{
					unjamming[i] = 0;
 8003038:	4a51      	ldr	r2, [pc, #324]	; (8003180 <launcher_control+0x210>)
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	4413      	add	r3, r2
 800303e:	2200      	movs	r2, #0
 8003040:	701a      	strb	r2, [r3, #0]
					feeder_output[i] = FEEDER_SPEED;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	005b      	lsls	r3, r3, #1
 8003046:	f107 0210 	add.w	r2, r7, #16
 800304a:	4413      	add	r3, r2
 800304c:	221e      	movs	r2, #30
 800304e:	f823 2c08 	strh.w	r2, [r3, #-8]
 8003052:	e011      	b.n	8003078 <launcher_control+0x108>
				}
				// feeder is still unjamming, hence, send unjam speed
				else
				{
					feeder_output[i] = FEEDER_UNJAM_SPD;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	005b      	lsls	r3, r3, #1
 8003058:	f107 0210 	add.w	r2, r7, #16
 800305c:	4413      	add	r3, r2
 800305e:	f64f 72fb 	movw	r2, #65531	; 0xfffb
 8003062:	f823 2c08 	strh.w	r2, [r3, #-8]
 8003066:	e007      	b.n	8003078 <launcher_control+0x108>
				}
			}
			else
			{
				feeder_output[i] = FEEDER_SPEED;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	005b      	lsls	r3, r3, #1
 800306c:	f107 0210 	add.w	r2, r7, #16
 8003070:	4413      	add	r3, r2
 8003072:	221e      	movs	r2, #30
 8003074:	f823 2c08 	strh.w	r2, [r3, #-8]
			}
			if (i == 0)
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d111      	bne.n	80030a2 <launcher_control+0x132>
			{
				feeder_output[i] *= -1;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	005b      	lsls	r3, r3, #1
 8003082:	f107 0210 	add.w	r2, r7, #16
 8003086:	4413      	add	r3, r2
 8003088:	f933 3c08 	ldrsh.w	r3, [r3, #-8]
 800308c:	b29b      	uxth	r3, r3
 800308e:	425b      	negs	r3, r3
 8003090:	b29b      	uxth	r3, r3
 8003092:	b21a      	sxth	r2, r3
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	005b      	lsls	r3, r3, #1
 8003098:	f107 0110 	add.w	r1, r7, #16
 800309c:	440b      	add	r3, r1
 800309e:	f823 2c08 	strh.w	r2, [r3, #-8]
			}
			speed_pid(feeder_output[i] * 36,feeders[i].rpm, &feeders[i].pid);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	005b      	lsls	r3, r3, #1
 80030a6:	f107 0210 	add.w	r2, r7, #16
 80030aa:	4413      	add	r3, r2
 80030ac:	f933 3c08 	ldrsh.w	r3, [r3, #-8]
 80030b0:	461a      	mov	r2, r3
 80030b2:	4613      	mov	r3, r2
 80030b4:	00db      	lsls	r3, r3, #3
 80030b6:	4413      	add	r3, r2
 80030b8:	009b      	lsls	r3, r3, #2
 80030ba:	4618      	mov	r0, r3
 80030bc:	f7fd fa3a 	bl	8000534 <__aeabi_i2d>
 80030c0:	4680      	mov	r8, r0
 80030c2:	4689      	mov	r9, r1
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2268      	movs	r2, #104	; 0x68
 80030c8:	fb02 f303 	mul.w	r3, r2, r3
 80030cc:	687a      	ldr	r2, [r7, #4]
 80030ce:	4413      	add	r3, r2
 80030d0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80030d4:	4618      	mov	r0, r3
 80030d6:	f7fd fa2d 	bl	8000534 <__aeabi_i2d>
 80030da:	4682      	mov	sl, r0
 80030dc:	468b      	mov	fp, r1
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2268      	movs	r2, #104	; 0x68
 80030e2:	fb02 f303 	mul.w	r3, r2, r3
 80030e6:	687a      	ldr	r2, [r7, #4]
 80030e8:	4413      	add	r3, r2
 80030ea:	3310      	adds	r3, #16
 80030ec:	4618      	mov	r0, r3
 80030ee:	ec4b ab11 	vmov	d1, sl, fp
 80030f2:	ec49 8b10 	vmov	d0, r8, r9
 80030f6:	f000 f87f 	bl	80031f8 <speed_pid>
 80030fa:	e01a      	b.n	8003132 <launcher_control+0x1c2>
		}
		else //If less than 1 s has passed since the fire command has been given,and flywheel has charged for less than 1s, do not feed
		{
			speed_pid(0,feeders[i].rpm, &feeders[i].pid);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2268      	movs	r2, #104	; 0x68
 8003100:	fb02 f303 	mul.w	r3, r2, r3
 8003104:	687a      	ldr	r2, [r7, #4]
 8003106:	4413      	add	r3, r2
 8003108:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800310c:	4618      	mov	r0, r3
 800310e:	f7fd fa11 	bl	8000534 <__aeabi_i2d>
 8003112:	4680      	mov	r8, r0
 8003114:	4689      	mov	r9, r1
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2268      	movs	r2, #104	; 0x68
 800311a:	fb02 f303 	mul.w	r3, r2, r3
 800311e:	687a      	ldr	r2, [r7, #4]
 8003120:	4413      	add	r3, r2
 8003122:	3310      	adds	r3, #16
 8003124:	4618      	mov	r0, r3
 8003126:	ec49 8b11 	vmov	d1, r8, r9
 800312a:	ed9f 0b11 	vldr	d0, [pc, #68]	; 8003170 <launcher_control+0x200>
 800312e:	f000 f863 	bl	80031f8 <speed_pid>
	for (int i = 0; i < 2; i++)
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	3301      	adds	r3, #1
 8003136:	60fb      	str	r3, [r7, #12]
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2b01      	cmp	r3, #1
 800313c:	f77f af20 	ble.w	8002f80 <launcher_control+0x10>
		}
	}
	CANone_cmd(feeders[0].pid.output, feeders[1].pid.output,0,0,LAUNCHER_ID);  //feeder M2006 id 5-6, identifier = 0x1ff
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	f9b3 0064 	ldrsh.w	r0, [r3, #100]	; 0x64
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	3368      	adds	r3, #104	; 0x68
 800314a:	f9b3 1064 	ldrsh.w	r1, [r3, #100]	; 0x64
 800314e:	f240 13ff 	movw	r3, #511	; 0x1ff
 8003152:	9300      	str	r3, [sp, #0]
 8003154:	2300      	movs	r3, #0
 8003156:	2200      	movs	r2, #0
 8003158:	f000 f984 	bl	8003464 <CANone_cmd>
}
 800315c:	bf00      	nop
 800315e:	3714      	adds	r7, #20
 8003160:	46bd      	mov	sp, r7
 8003162:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003166:	bf00      	nop
 8003168:	00000000 	.word	0x00000000
 800316c:	40d00400 	.word	0x40d00400
	...
 8003178:	20004efc 	.word	0x20004efc
 800317c:	20004ef0 	.word	0x20004ef0
 8003180:	20004ef8 	.word	0x20004ef8
 8003184:	20004ee8 	.word	0x20004ee8

08003188 <pwm_output>:



void pwm_output(uint8_t timergroup, uint16_t output)
{
 8003188:	b480      	push	{r7}
 800318a:	b083      	sub	sp, #12
 800318c:	af00      	add	r7, sp, #0
 800318e:	4603      	mov	r3, r0
 8003190:	460a      	mov	r2, r1
 8003192:	71fb      	strb	r3, [r7, #7]
 8003194:	4613      	mov	r3, r2
 8003196:	80bb      	strh	r3, [r7, #4]
	if (timergroup == 0)
 8003198:	79fb      	ldrb	r3, [r7, #7]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d108      	bne.n	80031b0 <pwm_output+0x28>
	{
		htim4.Instance->CCR1 = output;
 800319e:	4b15      	ldr	r3, [pc, #84]	; (80031f4 <pwm_output+0x6c>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	88ba      	ldrh	r2, [r7, #4]
 80031a4:	635a      	str	r2, [r3, #52]	; 0x34
		htim4.Instance->CCR2 = output;
 80031a6:	4b13      	ldr	r3, [pc, #76]	; (80031f4 <pwm_output+0x6c>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	88ba      	ldrh	r2, [r7, #4]
 80031ac:	639a      	str	r2, [r3, #56]	; 0x38
		htim4.Instance->CCR2 = output;
		htim4.Instance->CCR3 = output;
		htim4.Instance->CCR4 = output;
	}

}
 80031ae:	e01b      	b.n	80031e8 <pwm_output+0x60>
	else if (timergroup == 1)
 80031b0:	79fb      	ldrb	r3, [r7, #7]
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	d108      	bne.n	80031c8 <pwm_output+0x40>
		htim4.Instance->CCR3 = output;
 80031b6:	4b0f      	ldr	r3, [pc, #60]	; (80031f4 <pwm_output+0x6c>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	88ba      	ldrh	r2, [r7, #4]
 80031bc:	63da      	str	r2, [r3, #60]	; 0x3c
		htim4.Instance->CCR4 = output;
 80031be:	4b0d      	ldr	r3, [pc, #52]	; (80031f4 <pwm_output+0x6c>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	88ba      	ldrh	r2, [r7, #4]
 80031c4:	641a      	str	r2, [r3, #64]	; 0x40
}
 80031c6:	e00f      	b.n	80031e8 <pwm_output+0x60>
		htim4.Instance->CCR1 = output;
 80031c8:	4b0a      	ldr	r3, [pc, #40]	; (80031f4 <pwm_output+0x6c>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	88ba      	ldrh	r2, [r7, #4]
 80031ce:	635a      	str	r2, [r3, #52]	; 0x34
		htim4.Instance->CCR2 = output;
 80031d0:	4b08      	ldr	r3, [pc, #32]	; (80031f4 <pwm_output+0x6c>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	88ba      	ldrh	r2, [r7, #4]
 80031d6:	639a      	str	r2, [r3, #56]	; 0x38
		htim4.Instance->CCR3 = output;
 80031d8:	4b06      	ldr	r3, [pc, #24]	; (80031f4 <pwm_output+0x6c>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	88ba      	ldrh	r2, [r7, #4]
 80031de:	63da      	str	r2, [r3, #60]	; 0x3c
		htim4.Instance->CCR4 = output;
 80031e0:	4b04      	ldr	r3, [pc, #16]	; (80031f4 <pwm_output+0x6c>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	88ba      	ldrh	r2, [r7, #4]
 80031e6:	641a      	str	r2, [r3, #64]	; 0x40
}
 80031e8:	bf00      	nop
 80031ea:	370c      	adds	r7, #12
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr
 80031f4:	20009a4c 	.word	0x20009a4c

080031f8 <speed_pid>:


//todo: clean this place

void speed_pid(double setpoint, double curr_pt, pid_data_t *pid)
{
 80031f8:	b5b0      	push	{r4, r5, r7, lr}
 80031fa:	b08c      	sub	sp, #48	; 0x30
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	ed87 0b04 	vstr	d0, [r7, #16]
 8003202:	ed87 1b02 	vstr	d1, [r7, #8]
 8003206:	6078      	str	r0, [r7, #4]
	double Pout = 0;
 8003208:	f04f 0200 	mov.w	r2, #0
 800320c:	f04f 0300 	mov.w	r3, #0
 8003210:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	double Iout = 0;
 8003214:	f04f 0200 	mov.w	r2, #0
 8003218:	f04f 0300 	mov.w	r3, #0
 800321c:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double Dout = 0;
 8003220:	f04f 0200 	mov.w	r2, #0
 8003224:	f04f 0300 	mov.w	r3, #0
 8003228:	e9c7 2306 	strd	r2, r3, [r7, #24]
	pid->error[2] = pid->error[1];
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003232:	6879      	ldr	r1, [r7, #4]
 8003234:	e9c1 2308 	strd	r2, r3, [r1, #32]
	pid->error[1] = pid->error[0];
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800323e:	6879      	ldr	r1, [r7, #4]
 8003240:	e9c1 2306 	strd	r2, r3, [r1, #24]
	pid->error[0] = setpoint - curr_pt;
 8003244:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003248:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800324c:	f7fd f824 	bl	8000298 <__aeabi_dsub>
 8003250:	4602      	mov	r2, r0
 8003252:	460b      	mov	r3, r1
 8003254:	6879      	ldr	r1, [r7, #4]
 8003256:	e9c1 2304 	strd	r2, r3, [r1, #16]
	Pout = pid->error[0] * pid->kp;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4618      	mov	r0, r3
 8003266:	f7fd f977 	bl	8000558 <__aeabi_f2d>
 800326a:	4602      	mov	r2, r0
 800326c:	460b      	mov	r3, r1
 800326e:	4620      	mov	r0, r4
 8003270:	4629      	mov	r1, r5
 8003272:	f7fd f9c9 	bl	8000608 <__aeabi_dmul>
 8003276:	4602      	mov	r2, r0
 8003278:	460b      	mov	r3, r1
 800327a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

    pid->error_buf[2] = pid->error_buf[1];
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8003284:	6879      	ldr	r1, [r7, #4]
 8003286:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
    pid->error_buf[1] = pid->error_buf[0];
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8003290:	6879      	ldr	r1, [r7, #4]
 8003292:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    pid->error_buf[0] = pid->error[0] - pid->error[1];
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80032a2:	f7fc fff9 	bl	8000298 <__aeabi_dsub>
 80032a6:	4602      	mov	r2, r0
 80032a8:	460b      	mov	r3, r1
 80032aa:	6879      	ldr	r1, [r7, #4]
 80032ac:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Dout = pid->error_buf[0] * pid->kd;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	4618      	mov	r0, r3
 80032bc:	f7fd f94c 	bl	8000558 <__aeabi_f2d>
 80032c0:	4602      	mov	r2, r0
 80032c2:	460b      	mov	r3, r1
 80032c4:	4620      	mov	r0, r4
 80032c6:	4629      	mov	r1, r5
 80032c8:	f7fd f99e 	bl	8000608 <__aeabi_dmul>
 80032cc:	4602      	mov	r2, r0
 80032ce:	460b      	mov	r3, r1
 80032d0:	e9c7 2306 	strd	r2, r3, [r7, #24]

    Iout = pid->error[0] * pid->ki;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	4618      	mov	r0, r3
 80032e0:	f7fd f93a 	bl	8000558 <__aeabi_f2d>
 80032e4:	4602      	mov	r2, r0
 80032e6:	460b      	mov	r3, r1
 80032e8:	4620      	mov	r0, r4
 80032ea:	4629      	mov	r1, r5
 80032ec:	f7fd f98c 	bl	8000608 <__aeabi_dmul>
 80032f0:	4602      	mov	r2, r0
 80032f2:	460b      	mov	r3, r1
 80032f4:	e9c7 2308 	strd	r2, r3, [r7, #32]
    pid->output += Pout + Iout + Dout;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	f9b3 3054 	ldrsh.w	r3, [r3, #84]	; 0x54
 80032fe:	4618      	mov	r0, r3
 8003300:	f7fd f918 	bl	8000534 <__aeabi_i2d>
 8003304:	4604      	mov	r4, r0
 8003306:	460d      	mov	r5, r1
 8003308:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800330c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003310:	f7fc ffc4 	bl	800029c <__adddf3>
 8003314:	4602      	mov	r2, r0
 8003316:	460b      	mov	r3, r1
 8003318:	4610      	mov	r0, r2
 800331a:	4619      	mov	r1, r3
 800331c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003320:	f7fc ffbc 	bl	800029c <__adddf3>
 8003324:	4602      	mov	r2, r0
 8003326:	460b      	mov	r3, r1
 8003328:	4620      	mov	r0, r4
 800332a:	4629      	mov	r1, r5
 800332c:	f7fc ffb6 	bl	800029c <__adddf3>
 8003330:	4602      	mov	r2, r0
 8003332:	460b      	mov	r3, r1
 8003334:	4610      	mov	r0, r2
 8003336:	4619      	mov	r1, r3
 8003338:	f7fd fc00 	bl	8000b3c <__aeabi_d2iz>
 800333c:	4603      	mov	r3, r0
 800333e:	b21a      	sxth	r2, r3
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
//    double_limit(&Iout, pid->int_max);
    int_limit(&pid->output, pid->max_out);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	f103 0254 	add.w	r2, r3, #84	; 0x54
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	; 0x50
 8003352:	4619      	mov	r1, r3
 8003354:	4610      	mov	r0, r2
 8003356:	f000 f927 	bl	80035a8 <int_limit>
}
 800335a:	bf00      	nop
 800335c:	3730      	adds	r7, #48	; 0x30
 800335e:	46bd      	mov	sp, r7
 8003360:	bdb0      	pop	{r4, r5, r7, pc}
 8003362:	0000      	movs	r0, r0
 8003364:	0000      	movs	r0, r0
	...

08003368 <angle_pid>:


void angle_pid(double setpoint, double curr_pt, gimbal_data_t *motor)
{
 8003368:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800336c:	b088      	sub	sp, #32
 800336e:	af00      	add	r7, sp, #0
 8003370:	ed87 0b04 	vstr	d0, [r7, #16]
 8003374:	ed87 1b02 	vstr	d1, [r7, #8]
 8003378:	6078      	str	r0, [r7, #4]
	float ang_diff = (setpoint - curr_pt);
 800337a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800337e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003382:	f7fc ff89 	bl	8000298 <__aeabi_dsub>
 8003386:	4602      	mov	r2, r0
 8003388:	460b      	mov	r3, r1
 800338a:	4610      	mov	r0, r2
 800338c:	4619      	mov	r1, r3
 800338e:	f7fd fbfd 	bl	8000b8c <__aeabi_d2f>
 8003392:	4603      	mov	r3, r0
 8003394:	61fb      	str	r3, [r7, #28]
	if (ang_diff > PI )
 8003396:	edd7 7a07 	vldr	s15, [r7, #28]
 800339a:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8003458 <angle_pid+0xf0>
 800339e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033a6:	dd08      	ble.n	80033ba <angle_pid+0x52>
	{
		ang_diff -= 2 * PI;
 80033a8:	edd7 7a07 	vldr	s15, [r7, #28]
 80033ac:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 800345c <angle_pid+0xf4>
 80033b0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80033b4:	edc7 7a07 	vstr	s15, [r7, #28]
 80033b8:	e010      	b.n	80033dc <angle_pid+0x74>
	}
	else if(ang_diff < -PI)
 80033ba:	edd7 7a07 	vldr	s15, [r7, #28]
 80033be:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8003460 <angle_pid+0xf8>
 80033c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033ca:	d507      	bpl.n	80033dc <angle_pid+0x74>
	{
		ang_diff += 2 * PI;
 80033cc:	edd7 7a07 	vldr	s15, [r7, #28]
 80033d0:	ed9f 7a22 	vldr	s14, [pc, #136]	; 800345c <angle_pid+0xf4>
 80033d4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80033d8:	edc7 7a07 	vstr	s15, [r7, #28]
	}

	int16_t set_rpm = (ang_diff) * motor->rpm_max / GIMBAL_MAX_ANGLE_DIFF;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 80033e2:	ee07 3a90 	vmov	s15, r3
 80033e6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80033ea:	edd7 7a07 	vldr	s15, [r7, #28]
 80033ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033f2:	ee17 0a90 	vmov	r0, s15
 80033f6:	f7fd f8af 	bl	8000558 <__aeabi_f2d>
 80033fa:	a315      	add	r3, pc, #84	; (adr r3, 8003450 <angle_pid+0xe8>)
 80033fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003400:	f7fd fa2c 	bl	800085c <__aeabi_ddiv>
 8003404:	4602      	mov	r2, r0
 8003406:	460b      	mov	r3, r1
 8003408:	4610      	mov	r0, r2
 800340a:	4619      	mov	r1, r3
 800340c:	f7fd fb96 	bl	8000b3c <__aeabi_d2iz>
 8003410:	4603      	mov	r3, r0
 8003412:	837b      	strh	r3, [r7, #26]
	speed_pid(set_rpm, motor->rpm, &motor->pid);
 8003414:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003418:	4618      	mov	r0, r3
 800341a:	f7fd f88b 	bl	8000534 <__aeabi_i2d>
 800341e:	4604      	mov	r4, r0
 8003420:	460d      	mov	r5, r1
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003428:	4618      	mov	r0, r3
 800342a:	f7fd f883 	bl	8000534 <__aeabi_i2d>
 800342e:	4680      	mov	r8, r0
 8003430:	4689      	mov	r9, r1
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	3328      	adds	r3, #40	; 0x28
 8003436:	4618      	mov	r0, r3
 8003438:	ec49 8b11 	vmov	d1, r8, r9
 800343c:	ec45 4b10 	vmov	d0, r4, r5
 8003440:	f7ff feda 	bl	80031f8 <speed_pid>


}
 8003444:	bf00      	nop
 8003446:	3720      	adds	r7, #32
 8003448:	46bd      	mov	sp, r7
 800344a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800344e:	bf00      	nop
 8003450:	9999999a 	.word	0x9999999a
 8003454:	3fb99999 	.word	0x3fb99999
 8003458:	40490fdb 	.word	0x40490fdb
 800345c:	40c90fdb 	.word	0x40c90fdb
 8003460:	c0490fdb 	.word	0xc0490fdb

08003464 <CANone_cmd>:
 * @param can_stdID: the header ID, i.e. 0x200, 0x1FF and 0x2FF
 *
 * @note: this function probably only works for DJI motors due to the 2 bytes each motors require
 */
void CANone_cmd(int16_t motor1, int16_t motor2, int16_t motor3, int16_t motor4, uint32_t can_stdID)
{
 8003464:	b590      	push	{r4, r7, lr}
 8003466:	b08d      	sub	sp, #52	; 0x34
 8003468:	af00      	add	r7, sp, #0
 800346a:	4604      	mov	r4, r0
 800346c:	4608      	mov	r0, r1
 800346e:	4611      	mov	r1, r2
 8003470:	461a      	mov	r2, r3
 8003472:	4623      	mov	r3, r4
 8003474:	80fb      	strh	r3, [r7, #6]
 8003476:	4603      	mov	r3, r0
 8003478:	80bb      	strh	r3, [r7, #4]
 800347a:	460b      	mov	r3, r1
 800347c:	807b      	strh	r3, [r7, #2]
 800347e:	4613      	mov	r3, r2
 8003480:	803b      	strh	r3, [r7, #0]
	CAN_TxHeaderTypeDef  CANone_tx_message;
	uint8_t              CANone_send_data[8];
	uint32_t send_mail_box;
	CANone_tx_message.StdId = can_stdID;
 8003482:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003484:	61bb      	str	r3, [r7, #24]
	CANone_tx_message.IDE = CAN_ID_STD;
 8003486:	2300      	movs	r3, #0
 8003488:	623b      	str	r3, [r7, #32]
	CANone_tx_message.RTR = CAN_RTR_DATA;
 800348a:	2300      	movs	r3, #0
 800348c:	627b      	str	r3, [r7, #36]	; 0x24
	CANone_tx_message.DLC = 0x08;
 800348e:	2308      	movs	r3, #8
 8003490:	62bb      	str	r3, [r7, #40]	; 0x28
	CANone_send_data[0] = motor1 >> 8;
 8003492:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003496:	121b      	asrs	r3, r3, #8
 8003498:	b21b      	sxth	r3, r3
 800349a:	b2db      	uxtb	r3, r3
 800349c:	743b      	strb	r3, [r7, #16]
	CANone_send_data[1] = motor1;
 800349e:	88fb      	ldrh	r3, [r7, #6]
 80034a0:	b2db      	uxtb	r3, r3
 80034a2:	747b      	strb	r3, [r7, #17]
	CANone_send_data[2] = motor2 >> 8;
 80034a4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80034a8:	121b      	asrs	r3, r3, #8
 80034aa:	b21b      	sxth	r3, r3
 80034ac:	b2db      	uxtb	r3, r3
 80034ae:	74bb      	strb	r3, [r7, #18]
	CANone_send_data[3] = motor2;
 80034b0:	88bb      	ldrh	r3, [r7, #4]
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	74fb      	strb	r3, [r7, #19]
	CANone_send_data[4] = motor3 >> 8;
 80034b6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80034ba:	121b      	asrs	r3, r3, #8
 80034bc:	b21b      	sxth	r3, r3
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	753b      	strb	r3, [r7, #20]
	CANone_send_data[5] = motor3;
 80034c2:	887b      	ldrh	r3, [r7, #2]
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	757b      	strb	r3, [r7, #21]
	CANone_send_data[6] = motor4 >> 8;
 80034c8:	f9b7 3000 	ldrsh.w	r3, [r7]
 80034cc:	121b      	asrs	r3, r3, #8
 80034ce:	b21b      	sxth	r3, r3
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	75bb      	strb	r3, [r7, #22]
	CANone_send_data[7] = motor4;
 80034d4:	883b      	ldrh	r3, [r7, #0]
 80034d6:	b2db      	uxtb	r3, r3
 80034d8:	75fb      	strb	r3, [r7, #23]
	HAL_CAN_AddTxMessage(&hcan1, &CANone_tx_message, CANone_send_data, &send_mail_box);
 80034da:	f107 030c 	add.w	r3, r7, #12
 80034de:	f107 0210 	add.w	r2, r7, #16
 80034e2:	f107 0118 	add.w	r1, r7, #24
 80034e6:	4803      	ldr	r0, [pc, #12]	; (80034f4 <CANone_cmd+0x90>)
 80034e8:	f001 f92a 	bl	8004740 <HAL_CAN_AddTxMessage>
}
 80034ec:	bf00      	nop
 80034ee:	3734      	adds	r7, #52	; 0x34
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd90      	pop	{r4, r7, pc}
 80034f4:	20009898 	.word	0x20009898

080034f8 <CANtwo_cmd>:
 * @param can_stdID: the header ID, i.e. 0x200, 0x1FF and 0x2FF
 *
 * @note: this function probably only works for DJI motors due to the 2 bytes each motors require
 */
void CANtwo_cmd(int16_t motor1, int16_t motor2, int16_t motor3, int16_t motor4, uint32_t can_stdID)
{
 80034f8:	b590      	push	{r4, r7, lr}
 80034fa:	b085      	sub	sp, #20
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	4604      	mov	r4, r0
 8003500:	4608      	mov	r0, r1
 8003502:	4611      	mov	r1, r2
 8003504:	461a      	mov	r2, r3
 8003506:	4623      	mov	r3, r4
 8003508:	80fb      	strh	r3, [r7, #6]
 800350a:	4603      	mov	r3, r0
 800350c:	80bb      	strh	r3, [r7, #4]
 800350e:	460b      	mov	r3, r1
 8003510:	807b      	strh	r3, [r7, #2]
 8003512:	4613      	mov	r3, r2
 8003514:	803b      	strh	r3, [r7, #0]
	static CAN_TxHeaderTypeDef  CANtwo_tx_message;
	static uint8_t              CANtwo_send_data[8];
	uint32_t send_mail_box;
	CANtwo_tx_message.StdId = can_stdID;
 8003516:	4a21      	ldr	r2, [pc, #132]	; (800359c <CANtwo_cmd+0xa4>)
 8003518:	6a3b      	ldr	r3, [r7, #32]
 800351a:	6013      	str	r3, [r2, #0]
	CANtwo_tx_message.IDE = CAN_ID_STD;
 800351c:	4b1f      	ldr	r3, [pc, #124]	; (800359c <CANtwo_cmd+0xa4>)
 800351e:	2200      	movs	r2, #0
 8003520:	609a      	str	r2, [r3, #8]
	CANtwo_tx_message.RTR = CAN_RTR_DATA;
 8003522:	4b1e      	ldr	r3, [pc, #120]	; (800359c <CANtwo_cmd+0xa4>)
 8003524:	2200      	movs	r2, #0
 8003526:	60da      	str	r2, [r3, #12]
	CANtwo_tx_message.DLC = 0x08;
 8003528:	4b1c      	ldr	r3, [pc, #112]	; (800359c <CANtwo_cmd+0xa4>)
 800352a:	2208      	movs	r2, #8
 800352c:	611a      	str	r2, [r3, #16]
	CANtwo_send_data[0] = motor1 >> 8;
 800352e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003532:	121b      	asrs	r3, r3, #8
 8003534:	b21b      	sxth	r3, r3
 8003536:	b2da      	uxtb	r2, r3
 8003538:	4b19      	ldr	r3, [pc, #100]	; (80035a0 <CANtwo_cmd+0xa8>)
 800353a:	701a      	strb	r2, [r3, #0]
	CANtwo_send_data[1] = motor1;
 800353c:	88fb      	ldrh	r3, [r7, #6]
 800353e:	b2da      	uxtb	r2, r3
 8003540:	4b17      	ldr	r3, [pc, #92]	; (80035a0 <CANtwo_cmd+0xa8>)
 8003542:	705a      	strb	r2, [r3, #1]
	CANtwo_send_data[2] = motor2 >> 8;
 8003544:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003548:	121b      	asrs	r3, r3, #8
 800354a:	b21b      	sxth	r3, r3
 800354c:	b2da      	uxtb	r2, r3
 800354e:	4b14      	ldr	r3, [pc, #80]	; (80035a0 <CANtwo_cmd+0xa8>)
 8003550:	709a      	strb	r2, [r3, #2]
	CANtwo_send_data[3] = motor2;
 8003552:	88bb      	ldrh	r3, [r7, #4]
 8003554:	b2da      	uxtb	r2, r3
 8003556:	4b12      	ldr	r3, [pc, #72]	; (80035a0 <CANtwo_cmd+0xa8>)
 8003558:	70da      	strb	r2, [r3, #3]
	CANtwo_send_data[4] = motor3 >> 8;
 800355a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800355e:	121b      	asrs	r3, r3, #8
 8003560:	b21b      	sxth	r3, r3
 8003562:	b2da      	uxtb	r2, r3
 8003564:	4b0e      	ldr	r3, [pc, #56]	; (80035a0 <CANtwo_cmd+0xa8>)
 8003566:	711a      	strb	r2, [r3, #4]
	CANtwo_send_data[5] = motor3;
 8003568:	887b      	ldrh	r3, [r7, #2]
 800356a:	b2da      	uxtb	r2, r3
 800356c:	4b0c      	ldr	r3, [pc, #48]	; (80035a0 <CANtwo_cmd+0xa8>)
 800356e:	715a      	strb	r2, [r3, #5]
	CANtwo_send_data[6] = motor4 >> 8;
 8003570:	f9b7 3000 	ldrsh.w	r3, [r7]
 8003574:	121b      	asrs	r3, r3, #8
 8003576:	b21b      	sxth	r3, r3
 8003578:	b2da      	uxtb	r2, r3
 800357a:	4b09      	ldr	r3, [pc, #36]	; (80035a0 <CANtwo_cmd+0xa8>)
 800357c:	719a      	strb	r2, [r3, #6]
	CANtwo_send_data[7] = motor4;
 800357e:	883b      	ldrh	r3, [r7, #0]
 8003580:	b2da      	uxtb	r2, r3
 8003582:	4b07      	ldr	r3, [pc, #28]	; (80035a0 <CANtwo_cmd+0xa8>)
 8003584:	71da      	strb	r2, [r3, #7]
	HAL_CAN_AddTxMessage(&hcan2, &CANtwo_tx_message, CANtwo_send_data, &send_mail_box);
 8003586:	f107 030c 	add.w	r3, r7, #12
 800358a:	4a05      	ldr	r2, [pc, #20]	; (80035a0 <CANtwo_cmd+0xa8>)
 800358c:	4903      	ldr	r1, [pc, #12]	; (800359c <CANtwo_cmd+0xa4>)
 800358e:	4805      	ldr	r0, [pc, #20]	; (80035a4 <CANtwo_cmd+0xac>)
 8003590:	f001 f8d6 	bl	8004740 <HAL_CAN_AddTxMessage>
}
 8003594:	bf00      	nop
 8003596:	3714      	adds	r7, #20
 8003598:	46bd      	mov	sp, r7
 800359a:	bd90      	pop	{r4, r7, pc}
 800359c:	20004f00 	.word	0x20004f00
 80035a0:	20004f18 	.word	0x20004f18
 80035a4:	20009870 	.word	0x20009870

080035a8 <int_limit>:
	}

}

void int_limit(int16_t *vIn, int16_t max)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b083      	sub	sp, #12
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
 80035b0:	460b      	mov	r3, r1
 80035b2:	807b      	strh	r3, [r7, #2]
	if (*vIn > max)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80035ba:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80035be:	429a      	cmp	r2, r3
 80035c0:	da03      	bge.n	80035ca <int_limit+0x22>
	{
		*vIn = max;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	887a      	ldrh	r2, [r7, #2]
 80035c6:	801a      	strh	r2, [r3, #0]
	}
	else if (*vIn < -max)
	{
		*vIn = -max;
	}
}
 80035c8:	e00e      	b.n	80035e8 <int_limit+0x40>
	else if (*vIn < -max)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80035d0:	461a      	mov	r2, r3
 80035d2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80035d6:	425b      	negs	r3, r3
 80035d8:	429a      	cmp	r2, r3
 80035da:	da05      	bge.n	80035e8 <int_limit+0x40>
		*vIn = -max;
 80035dc:	887b      	ldrh	r3, [r7, #2]
 80035de:	425b      	negs	r3, r3
 80035e0:	b29b      	uxth	r3, r3
 80035e2:	b21a      	sxth	r2, r3
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	801a      	strh	r2, [r3, #0]
}
 80035e8:	bf00      	nop
 80035ea:	370c      	adds	r7, #12
 80035ec:	46bd      	mov	sp, r7
 80035ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f2:	4770      	bx	lr
 80035f4:	0000      	movs	r0, r0
	...

080035f8 <movement_control_task>:
float last_speed_commanded = 0;
bool moving_towards_goal = false;
bool stopping = false;

void movement_control_task(void *argument)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b084      	sub	sp, #16
 80035fc:	af02      	add	r7, sp, #8
 80035fe:	6078      	str	r0, [r7, #4]
	while(1)
	{
		if (canone_data.CHASSIS.torque > HOMING_TORQUE) //Uses a bump to the end of the track as an indicator of hitting a known point along the track, and updates current position
 8003600:	4b31      	ldr	r3, [pc, #196]	; (80036c8 <movement_control_task+0xd0>)
 8003602:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8003606:	f242 7210 	movw	r2, #10000	; 0x2710
 800360a:	4293      	cmp	r3, r2
 800360c:	dd10      	ble.n	8003630 <movement_control_task+0x38>
		{
			if (last_speed_commanded > 0)
 800360e:	4b2f      	ldr	r3, [pc, #188]	; (80036cc <movement_control_task+0xd4>)
 8003610:	edd3 7a00 	vldr	s15, [r3]
 8003614:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003618:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800361c:	dd04      	ble.n	8003628 <movement_control_task+0x30>
			{
				current_position = track_length;
 800361e:	4b2c      	ldr	r3, [pc, #176]	; (80036d0 <movement_control_task+0xd8>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a2c      	ldr	r2, [pc, #176]	; (80036d4 <movement_control_task+0xdc>)
 8003624:	6013      	str	r3, [r2, #0]
 8003626:	e003      	b.n	8003630 <movement_control_task+0x38>
			}
			else
			{
				current_position = 0;
 8003628:	4b2a      	ldr	r3, [pc, #168]	; (80036d4 <movement_control_task+0xdc>)
 800362a:	f04f 0200 	mov.w	r2, #0
 800362e:	601a      	str	r2, [r3, #0]
			}
		}
		update_current_position(false); //Computes current position along the track by adding the speed of the wheel
 8003630:	2000      	movs	r0, #0
 8003632:	f000 f855 	bl	80036e0 <update_current_position>
		if (remote_cmd.left_switch != kill)
 8003636:	4b28      	ldr	r3, [pc, #160]	; (80036d8 <movement_control_task+0xe0>)
 8003638:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800363c:	2b03      	cmp	r3, #3
 800363e:	d030      	beq.n	80036a2 <movement_control_task+0xaa>
		{
			if(remote_cmd.left_switch == teleopetate)
 8003640:	4b25      	ldr	r3, [pc, #148]	; (80036d8 <movement_control_task+0xe0>)
 8003642:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8003646:	2b02      	cmp	r3, #2
 8003648:	d103      	bne.n	8003652 <movement_control_task+0x5a>
			{
				chassis_motion_control(&canone_data.CHASSIS);
 800364a:	481f      	ldr	r0, [pc, #124]	; (80036c8 <movement_control_task+0xd0>)
 800364c:	f000 f8f8 	bl	8003840 <chassis_motion_control>
 8003650:	e030      	b.n	80036b4 <movement_control_task+0xbc>
			}
			else if (remote_cmd.right_switch == random_movement)
 8003652:	4b21      	ldr	r3, [pc, #132]	; (80036d8 <movement_control_task+0xe0>)
 8003654:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8003658:	2b03      	cmp	r3, #3
 800365a:	d103      	bne.n	8003664 <movement_control_task+0x6c>
			{
				chassis_sweep(&canone_data.CHASSIS);
 800365c:	481a      	ldr	r0, [pc, #104]	; (80036c8 <movement_control_task+0xd0>)
 800365e:	f000 f97b 	bl	8003958 <chassis_sweep>
 8003662:	e027      	b.n	80036b4 <movement_control_task+0xbc>
			}
			else
			{
				// Stops chassis movement if aimbot decides to standby or fire launcher
				last_speed_commanded = 0;
 8003664:	4b19      	ldr	r3, [pc, #100]	; (80036cc <movement_control_task+0xd4>)
 8003666:	f04f 0200 	mov.w	r2, #0
 800366a:	601a      	str	r2, [r3, #0]
				speed_pid(0, canone_data.CHASSIS.rpm, &canone_data.CHASSIS.pid);
 800366c:	4b16      	ldr	r3, [pc, #88]	; (80036c8 <movement_control_task+0xd0>)
 800366e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003672:	4618      	mov	r0, r3
 8003674:	f7fc ff5e 	bl	8000534 <__aeabi_i2d>
 8003678:	4602      	mov	r2, r0
 800367a:	460b      	mov	r3, r1
 800367c:	4817      	ldr	r0, [pc, #92]	; (80036dc <movement_control_task+0xe4>)
 800367e:	ec43 2b11 	vmov	d1, r2, r3
 8003682:	ed9f 0b0f 	vldr	d0, [pc, #60]	; 80036c0 <movement_control_task+0xc8>
 8003686:	f7ff fdb7 	bl	80031f8 <speed_pid>
				CANone_cmd(canone_data.CHASSIS.pid.output, 0, 0, 0, CHASSIS_ID);
 800368a:	4b0f      	ldr	r3, [pc, #60]	; (80036c8 <movement_control_task+0xd0>)
 800368c:	f9b3 0064 	ldrsh.w	r0, [r3, #100]	; 0x64
 8003690:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003694:	9300      	str	r3, [sp, #0]
 8003696:	2300      	movs	r3, #0
 8003698:	2200      	movs	r2, #0
 800369a:	2100      	movs	r1, #0
 800369c:	f7ff fee2 	bl	8003464 <CANone_cmd>
 80036a0:	e008      	b.n	80036b4 <movement_control_task+0xbc>
			}
		}
		else
		{
			CANone_cmd(0,0,0,0,CHASSIS_ID);
 80036a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80036a6:	9300      	str	r3, [sp, #0]
 80036a8:	2300      	movs	r3, #0
 80036aa:	2200      	movs	r2, #0
 80036ac:	2100      	movs	r1, #0
 80036ae:	2000      	movs	r0, #0
 80036b0:	f7ff fed8 	bl	8003464 <CANone_cmd>
		}
		//delays task for other tasks to run
		vTaskDelay(CHASSIS_DELAY);
 80036b4:	2002      	movs	r0, #2
 80036b6:	f006 fd11 	bl	800a0dc <vTaskDelay>
		if (canone_data.CHASSIS.torque > HOMING_TORQUE) //Uses a bump to the end of the track as an indicator of hitting a known point along the track, and updates current position
 80036ba:	e7a1      	b.n	8003600 <movement_control_task+0x8>
 80036bc:	f3af 8000 	nop.w
	...
 80036c8:	20009cb0 	.word	0x20009cb0
 80036cc:	20004f30 	.word	0x20004f30
 80036d0:	20004f24 	.word	0x20004f24
 80036d4:	20004f20 	.word	0x20004f20
 80036d8:	20004f38 	.word	0x20004f38
 80036dc:	20009cc0 	.word	0x20009cc0

080036e0 <update_current_position>:
	osThreadTerminate(NULL);
}


float update_current_position(bool homing) //Updates the current position of the robot along the track, and returns the change in position from the previous time the function was called
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b086      	sub	sp, #24
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	4603      	mov	r3, r0
 80036e8:	71fb      	strb	r3, [r7, #7]
	float current_time;
	float time_difference;
	float change_in_position;
	float new_current_position;
	new_current_position = current_position;
 80036ea:	4b38      	ldr	r3, [pc, #224]	; (80037cc <update_current_position+0xec>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	613b      	str	r3, [r7, #16]
	current_time = HAL_GetTick();
 80036f0:	f000 fdd6 	bl	80042a0 <HAL_GetTick>
 80036f4:	ee07 0a90 	vmov	s15, r0
 80036f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036fc:	edc7 7a03 	vstr	s15, [r7, #12]
	time_difference = (current_time - last_position_update_time)/ 1000; //gives time difference in seconds
 8003700:	4b33      	ldr	r3, [pc, #204]	; (80037d0 <update_current_position+0xf0>)
 8003702:	edd3 7a00 	vldr	s15, [r3]
 8003706:	ed97 7a03 	vldr	s14, [r7, #12]
 800370a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800370e:	eddf 6a31 	vldr	s13, [pc, #196]	; 80037d4 <update_current_position+0xf4>
 8003712:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003716:	edc7 7a02 	vstr	s15, [r7, #8]
	last_position_update_time = current_time;
 800371a:	4a2d      	ldr	r2, [pc, #180]	; (80037d0 <update_current_position+0xf0>)
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	6013      	str	r3, [r2, #0]
	change_in_position = rpm_to_speed(canone_data.CHASSIS.rpm) * time_difference; //gives change in position in meters
 8003720:	4b2d      	ldr	r3, [pc, #180]	; (80037d8 <update_current_position+0xf8>)
 8003722:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003726:	ee07 3a90 	vmov	s15, r3
 800372a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800372e:	eeb0 0a67 	vmov.f32	s0, s15
 8003732:	f000 f859 	bl	80037e8 <rpm_to_speed>
 8003736:	eeb0 7a40 	vmov.f32	s14, s0
 800373a:	edd7 7a02 	vldr	s15, [r7, #8]
 800373e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003742:	edc7 7a05 	vstr	s15, [r7, #20]
	new_current_position += change_in_position;
 8003746:	ed97 7a04 	vldr	s14, [r7, #16]
 800374a:	edd7 7a05 	vldr	s15, [r7, #20]
 800374e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003752:	edc7 7a04 	vstr	s15, [r7, #16]
	if (homing != true) //Checks if the robot is not homing. If so, prevents the robot from integrating above the track length or below 0
 8003756:	79fb      	ldrb	r3, [r7, #7]
 8003758:	f083 0301 	eor.w	r3, r3, #1
 800375c:	b2db      	uxtb	r3, r3
 800375e:	2b00      	cmp	r3, #0
 8003760:	d029      	beq.n	80037b6 <update_current_position+0xd6>
	{
		if (new_current_position > track_length)
 8003762:	4b1e      	ldr	r3, [pc, #120]	; (80037dc <update_current_position+0xfc>)
 8003764:	edd3 7a00 	vldr	s15, [r3]
 8003768:	ed97 7a04 	vldr	s14, [r7, #16]
 800376c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003770:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003774:	dd0c      	ble.n	8003790 <update_current_position+0xb0>
		{
			change_in_position = track_length - current_position;
 8003776:	4b19      	ldr	r3, [pc, #100]	; (80037dc <update_current_position+0xfc>)
 8003778:	ed93 7a00 	vldr	s14, [r3]
 800377c:	4b13      	ldr	r3, [pc, #76]	; (80037cc <update_current_position+0xec>)
 800377e:	edd3 7a00 	vldr	s15, [r3]
 8003782:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003786:	edc7 7a05 	vstr	s15, [r7, #20]
			new_current_position = track_length;
 800378a:	4b14      	ldr	r3, [pc, #80]	; (80037dc <update_current_position+0xfc>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	613b      	str	r3, [r7, #16]
		}
		if (new_current_position < 0)
 8003790:	edd7 7a04 	vldr	s15, [r7, #16]
 8003794:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003798:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800379c:	d50b      	bpl.n	80037b6 <update_current_position+0xd6>
		{
			change_in_position = 0 - current_position;
 800379e:	4b0b      	ldr	r3, [pc, #44]	; (80037cc <update_current_position+0xec>)
 80037a0:	edd3 7a00 	vldr	s15, [r3]
 80037a4:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80037e0 <update_current_position+0x100>
 80037a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80037ac:	edc7 7a05 	vstr	s15, [r7, #20]
			new_current_position = 0;
 80037b0:	f04f 0300 	mov.w	r3, #0
 80037b4:	613b      	str	r3, [r7, #16]
		}
	}
	current_position = new_current_position;
 80037b6:	4a05      	ldr	r2, [pc, #20]	; (80037cc <update_current_position+0xec>)
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	6013      	str	r3, [r2, #0]
	return change_in_position;
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	ee07 3a90 	vmov	s15, r3
}
 80037c2:	eeb0 0a67 	vmov.f32	s0, s15
 80037c6:	3718      	adds	r7, #24
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}
 80037cc:	20004f20 	.word	0x20004f20
 80037d0:	20004f28 	.word	0x20004f28
 80037d4:	447a0000 	.word	0x447a0000
 80037d8:	20009cb0 	.word	0x20009cb0
 80037dc:	20004f24 	.word	0x20004f24
	...

080037e8 <rpm_to_speed>:

float rpm_to_speed(float rpm) //Returns speed of chassis in meters per second
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b084      	sub	sp, #16
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	ed87 0a01 	vstr	s0, [r7, #4]
	float speed;
	speed = rpm / 60 * (3.14159 * WHEEL_DIAMETER);
 80037f2:	edd7 7a01 	vldr	s15, [r7, #4]
 80037f6:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8003838 <rpm_to_speed+0x50>
 80037fa:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80037fe:	ee16 0a90 	vmov	r0, s13
 8003802:	f7fc fea9 	bl	8000558 <__aeabi_f2d>
 8003806:	a30a      	add	r3, pc, #40	; (adr r3, 8003830 <rpm_to_speed+0x48>)
 8003808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800380c:	f7fc fefc 	bl	8000608 <__aeabi_dmul>
 8003810:	4602      	mov	r2, r0
 8003812:	460b      	mov	r3, r1
 8003814:	4610      	mov	r0, r2
 8003816:	4619      	mov	r1, r3
 8003818:	f7fd f9b8 	bl	8000b8c <__aeabi_d2f>
 800381c:	4603      	mov	r3, r0
 800381e:	60fb      	str	r3, [r7, #12]
	return speed;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	ee07 3a90 	vmov	s15, r3
}
 8003826:	eeb0 0a67 	vmov.f32	s0, s15
 800382a:	3710      	adds	r7, #16
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}
 8003830:	053924e4 	.word	0x053924e4
 8003834:	3fc8209e 	.word	0x3fc8209e
 8003838:	42700000 	.word	0x42700000
 800383c:	00000000 	.word	0x00000000

08003840 <chassis_motion_control>:

void chassis_motion_control(motor_data_t *motor)
{
 8003840:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003844:	b086      	sub	sp, #24
 8003846:	af02      	add	r7, sp, #8
 8003848:	6078      	str	r0, [r7, #4]
	int16_t out_wheel = 0;
 800384a:	2300      	movs	r3, #0
 800384c:	81fb      	strh	r3, [r7, #14]
	out_wheel = (MAX_SPEED * remote_cmd.left_x)/(MAX_RC_VALUE/2);
 800384e:	4b3c      	ldr	r3, [pc, #240]	; (8003940 <chassis_motion_control+0x100>)
 8003850:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003854:	461a      	mov	r2, r3
 8003856:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 800385a:	fb03 f302 	mul.w	r3, r3, r2
 800385e:	4a39      	ldr	r2, [pc, #228]	; (8003944 <chassis_motion_control+0x104>)
 8003860:	fb82 1203 	smull	r1, r2, r2, r3
 8003864:	1212      	asrs	r2, r2, #8
 8003866:	17db      	asrs	r3, r3, #31
 8003868:	1ad3      	subs	r3, r2, r3
 800386a:	81fb      	strh	r3, [r7, #14]
	if (out_wheel > 0 && current_position >= (track_length - 0.15)) //Prevents the sentry from going too close to the limits
 800386c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003870:	2b00      	cmp	r3, #0
 8003872:	dd1c      	ble.n	80038ae <chassis_motion_control+0x6e>
 8003874:	4b34      	ldr	r3, [pc, #208]	; (8003948 <chassis_motion_control+0x108>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4618      	mov	r0, r3
 800387a:	f7fc fe6d 	bl	8000558 <__aeabi_f2d>
 800387e:	4604      	mov	r4, r0
 8003880:	460d      	mov	r5, r1
 8003882:	4b32      	ldr	r3, [pc, #200]	; (800394c <chassis_motion_control+0x10c>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4618      	mov	r0, r3
 8003888:	f7fc fe66 	bl	8000558 <__aeabi_f2d>
 800388c:	a32a      	add	r3, pc, #168	; (adr r3, 8003938 <chassis_motion_control+0xf8>)
 800388e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003892:	f7fc fd01 	bl	8000298 <__aeabi_dsub>
 8003896:	4602      	mov	r2, r0
 8003898:	460b      	mov	r3, r1
 800389a:	4620      	mov	r0, r4
 800389c:	4629      	mov	r1, r5
 800389e:	f7fd f939 	bl	8000b14 <__aeabi_dcmpge>
 80038a2:	4603      	mov	r3, r0
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d002      	beq.n	80038ae <chassis_motion_control+0x6e>
	{
		out_wheel = 0;
 80038a8:	2300      	movs	r3, #0
 80038aa:	81fb      	strh	r3, [r7, #14]
 80038ac:	e012      	b.n	80038d4 <chassis_motion_control+0x94>
	}
	else if (out_wheel < 0 && current_position <= 0.15)
 80038ae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	da0e      	bge.n	80038d4 <chassis_motion_control+0x94>
 80038b6:	4b24      	ldr	r3, [pc, #144]	; (8003948 <chassis_motion_control+0x108>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4618      	mov	r0, r3
 80038bc:	f7fc fe4c 	bl	8000558 <__aeabi_f2d>
 80038c0:	a31d      	add	r3, pc, #116	; (adr r3, 8003938 <chassis_motion_control+0xf8>)
 80038c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038c6:	f7fd f91b 	bl	8000b00 <__aeabi_dcmple>
 80038ca:	4603      	mov	r3, r0
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d001      	beq.n	80038d4 <chassis_motion_control+0x94>
	{
		out_wheel = 0;
 80038d0:	2300      	movs	r3, #0
 80038d2:	81fb      	strh	r3, [r7, #14]
	}
	last_speed_commanded = out_wheel;
 80038d4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80038d8:	ee07 3a90 	vmov	s15, r3
 80038dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80038e0:	4b1b      	ldr	r3, [pc, #108]	; (8003950 <chassis_motion_control+0x110>)
 80038e2:	edc3 7a00 	vstr	s15, [r3]
	speed_pid(out_wheel, motor->rpm, &motor->pid);
 80038e6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80038ea:	4618      	mov	r0, r3
 80038ec:	f7fc fe22 	bl	8000534 <__aeabi_i2d>
 80038f0:	4604      	mov	r4, r0
 80038f2:	460d      	mov	r5, r1
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80038fa:	4618      	mov	r0, r3
 80038fc:	f7fc fe1a 	bl	8000534 <__aeabi_i2d>
 8003900:	4680      	mov	r8, r0
 8003902:	4689      	mov	r9, r1
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	3310      	adds	r3, #16
 8003908:	4618      	mov	r0, r3
 800390a:	ec49 8b11 	vmov	d1, r8, r9
 800390e:	ec45 4b10 	vmov	d0, r4, r5
 8003912:	f7ff fc71 	bl	80031f8 <speed_pid>
	CANone_cmd(motor->pid.output, 0, 0, 0, CHASSIS_ID);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	f9b3 0064 	ldrsh.w	r0, [r3, #100]	; 0x64
 800391c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003920:	9300      	str	r3, [sp, #0]
 8003922:	2300      	movs	r3, #0
 8003924:	2200      	movs	r2, #0
 8003926:	2100      	movs	r1, #0
 8003928:	f7ff fd9c 	bl	8003464 <CANone_cmd>
}
 800392c:	bf00      	nop
 800392e:	3710      	adds	r7, #16
 8003930:	46bd      	mov	sp, r7
 8003932:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003936:	bf00      	nop
 8003938:	33333333 	.word	0x33333333
 800393c:	3fc33333 	.word	0x3fc33333
 8003940:	20004f38 	.word	0x20004f38
 8003944:	634c0635 	.word	0x634c0635
 8003948:	20004f20 	.word	0x20004f20
 800394c:	20004f24 	.word	0x20004f24
 8003950:	20004f30 	.word	0x20004f30
 8003954:	00000000 	.word	0x00000000

08003958 <chassis_sweep>:

void chassis_sweep(motor_data_t *motor)
{
 8003958:	b5b0      	push	{r4, r5, r7, lr}
 800395a:	b086      	sub	sp, #24
 800395c:	af02      	add	r7, sp, #8
 800395e:	6078      	str	r0, [r7, #4]
	if (stopping == true) //Ensure that the chassis has stopped before a new sweeping cycle begins
 8003960:	4b5b      	ldr	r3, [pc, #364]	; (8003ad0 <chassis_sweep+0x178>)
 8003962:	781b      	ldrb	r3, [r3, #0]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d029      	beq.n	80039bc <chassis_sweep+0x64>
	{
		if (motor->rpm == 0)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d103      	bne.n	800397a <chassis_sweep+0x22>
		{
			stopping = false;
 8003972:	4b57      	ldr	r3, [pc, #348]	; (8003ad0 <chassis_sweep+0x178>)
 8003974:	2200      	movs	r2, #0
 8003976:	701a      	strb	r2, [r3, #0]
			last_speed_commanded = -SWEEPING_SPEED;
			speed_pid(-SWEEPING_SPEED, motor->rpm, &motor->pid);
			CANone_cmd(motor->pid.output, 0, 0, 0, CHASSIS_ID);
		}
	}
}
 8003978:	e094      	b.n	8003aa4 <chassis_sweep+0x14c>
			last_speed_commanded = 0;
 800397a:	4b56      	ldr	r3, [pc, #344]	; (8003ad4 <chassis_sweep+0x17c>)
 800397c:	f04f 0200 	mov.w	r2, #0
 8003980:	601a      	str	r2, [r3, #0]
			speed_pid(0, motor->rpm, &motor->pid);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003988:	4618      	mov	r0, r3
 800398a:	f7fc fdd3 	bl	8000534 <__aeabi_i2d>
 800398e:	4604      	mov	r4, r0
 8003990:	460d      	mov	r5, r1
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	3310      	adds	r3, #16
 8003996:	4618      	mov	r0, r3
 8003998:	ec45 4b11 	vmov	d1, r4, r5
 800399c:	ed9f 0b44 	vldr	d0, [pc, #272]	; 8003ab0 <chassis_sweep+0x158>
 80039a0:	f7ff fc2a 	bl	80031f8 <speed_pid>
			CANone_cmd(motor->pid.output, 0, 0, 0, CHASSIS_ID);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	f9b3 0064 	ldrsh.w	r0, [r3, #100]	; 0x64
 80039aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80039ae:	9300      	str	r3, [sp, #0]
 80039b0:	2300      	movs	r3, #0
 80039b2:	2200      	movs	r2, #0
 80039b4:	2100      	movs	r1, #0
 80039b6:	f7ff fd55 	bl	8003464 <CANone_cmd>
}
 80039ba:	e073      	b.n	8003aa4 <chassis_sweep+0x14c>
	else if (moving_towards_goal == false)
 80039bc:	4b46      	ldr	r3, [pc, #280]	; (8003ad8 <chassis_sweep+0x180>)
 80039be:	781b      	ldrb	r3, [r3, #0]
 80039c0:	f083 0301 	eor.w	r3, r3, #1
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d005      	beq.n	80039d6 <chassis_sweep+0x7e>
		generate_goal_position();
 80039ca:	f000 f891 	bl	8003af0 <generate_goal_position>
		moving_towards_goal = true;
 80039ce:	4b42      	ldr	r3, [pc, #264]	; (8003ad8 <chassis_sweep+0x180>)
 80039d0:	2201      	movs	r2, #1
 80039d2:	701a      	strb	r2, [r3, #0]
}
 80039d4:	e066      	b.n	8003aa4 <chassis_sweep+0x14c>
		distance_from_current_to_goal = goal_position - current_position;
 80039d6:	4b41      	ldr	r3, [pc, #260]	; (8003adc <chassis_sweep+0x184>)
 80039d8:	ed93 7a00 	vldr	s14, [r3]
 80039dc:	4b40      	ldr	r3, [pc, #256]	; (8003ae0 <chassis_sweep+0x188>)
 80039de:	edd3 7a00 	vldr	s15, [r3]
 80039e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80039e6:	edc7 7a03 	vstr	s15, [r7, #12]
		if (fabs(distance_from_current_to_goal) < 0.05)
 80039ea:	edd7 7a03 	vldr	s15, [r7, #12]
 80039ee:	eef0 7ae7 	vabs.f32	s15, s15
 80039f2:	ee17 0a90 	vmov	r0, s15
 80039f6:	f7fc fdaf 	bl	8000558 <__aeabi_f2d>
 80039fa:	a32f      	add	r3, pc, #188	; (adr r3, 8003ab8 <chassis_sweep+0x160>)
 80039fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a00:	f7fd f874 	bl	8000aec <__aeabi_dcmplt>
 8003a04:	4603      	mov	r3, r0
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d006      	beq.n	8003a18 <chassis_sweep+0xc0>
			moving_towards_goal = false;
 8003a0a:	4b33      	ldr	r3, [pc, #204]	; (8003ad8 <chassis_sweep+0x180>)
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	701a      	strb	r2, [r3, #0]
			stopping = true;
 8003a10:	4b2f      	ldr	r3, [pc, #188]	; (8003ad0 <chassis_sweep+0x178>)
 8003a12:	2201      	movs	r2, #1
 8003a14:	701a      	strb	r2, [r3, #0]
}
 8003a16:	e045      	b.n	8003aa4 <chassis_sweep+0x14c>
		else if (distance_from_current_to_goal > 0)
 8003a18:	edd7 7a03 	vldr	s15, [r7, #12]
 8003a1c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003a20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a24:	dd1f      	ble.n	8003a66 <chassis_sweep+0x10e>
			last_speed_commanded = SWEEPING_SPEED;
 8003a26:	4b2b      	ldr	r3, [pc, #172]	; (8003ad4 <chassis_sweep+0x17c>)
 8003a28:	4a2e      	ldr	r2, [pc, #184]	; (8003ae4 <chassis_sweep+0x18c>)
 8003a2a:	601a      	str	r2, [r3, #0]
			speed_pid(SWEEPING_SPEED, motor->rpm, &motor->pid);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003a32:	4618      	mov	r0, r3
 8003a34:	f7fc fd7e 	bl	8000534 <__aeabi_i2d>
 8003a38:	4604      	mov	r4, r0
 8003a3a:	460d      	mov	r5, r1
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	3310      	adds	r3, #16
 8003a40:	4618      	mov	r0, r3
 8003a42:	ec45 4b11 	vmov	d1, r4, r5
 8003a46:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8003ac0 <chassis_sweep+0x168>
 8003a4a:	f7ff fbd5 	bl	80031f8 <speed_pid>
			CANone_cmd(motor->pid.output, 0, 0, 0, CHASSIS_ID);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	f9b3 0064 	ldrsh.w	r0, [r3, #100]	; 0x64
 8003a54:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a58:	9300      	str	r3, [sp, #0]
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	2100      	movs	r1, #0
 8003a60:	f7ff fd00 	bl	8003464 <CANone_cmd>
}
 8003a64:	e01e      	b.n	8003aa4 <chassis_sweep+0x14c>
			last_speed_commanded = -SWEEPING_SPEED;
 8003a66:	4b1b      	ldr	r3, [pc, #108]	; (8003ad4 <chassis_sweep+0x17c>)
 8003a68:	4a1f      	ldr	r2, [pc, #124]	; (8003ae8 <chassis_sweep+0x190>)
 8003a6a:	601a      	str	r2, [r3, #0]
			speed_pid(-SWEEPING_SPEED, motor->rpm, &motor->pid);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003a72:	4618      	mov	r0, r3
 8003a74:	f7fc fd5e 	bl	8000534 <__aeabi_i2d>
 8003a78:	4604      	mov	r4, r0
 8003a7a:	460d      	mov	r5, r1
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	3310      	adds	r3, #16
 8003a80:	4618      	mov	r0, r3
 8003a82:	ec45 4b11 	vmov	d1, r4, r5
 8003a86:	ed9f 0b10 	vldr	d0, [pc, #64]	; 8003ac8 <chassis_sweep+0x170>
 8003a8a:	f7ff fbb5 	bl	80031f8 <speed_pid>
			CANone_cmd(motor->pid.output, 0, 0, 0, CHASSIS_ID);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	f9b3 0064 	ldrsh.w	r0, [r3, #100]	; 0x64
 8003a94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a98:	9300      	str	r3, [sp, #0]
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	2100      	movs	r1, #0
 8003aa0:	f7ff fce0 	bl	8003464 <CANone_cmd>
}
 8003aa4:	bf00      	nop
 8003aa6:	3710      	adds	r7, #16
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bdb0      	pop	{r4, r5, r7, pc}
 8003aac:	f3af 8000 	nop.w
	...
 8003ab8:	9999999a 	.word	0x9999999a
 8003abc:	3fa99999 	.word	0x3fa99999
 8003ac0:	00000000 	.word	0x00000000
 8003ac4:	409f4000 	.word	0x409f4000
 8003ac8:	00000000 	.word	0x00000000
 8003acc:	c09f4000 	.word	0xc09f4000
 8003ad0:	20004f35 	.word	0x20004f35
 8003ad4:	20004f30 	.word	0x20004f30
 8003ad8:	20004f34 	.word	0x20004f34
 8003adc:	20004f2c 	.word	0x20004f2c
 8003ae0:	20004f20 	.word	0x20004f20
 8003ae4:	44fa0000 	.word	0x44fa0000
 8003ae8:	c4fa0000 	.word	0xc4fa0000
 8003aec:	00000000 	.word	0x00000000

08003af0 <generate_goal_position>:

void generate_goal_position() //generates goal positions with 0.15m of leeway from max/min goal positions to the limits
{
 8003af0:	b5b0      	push	{r4, r5, r7, lr}
 8003af2:	af00      	add	r7, sp, #0
	goal_position = 0.15 + (rand() / RAND_MAX) * (track_length - 0.3);
 8003af4:	f008 f8d4 	bl	800bca0 <rand>
 8003af8:	4603      	mov	r3, r0
 8003afa:	4a1b      	ldr	r2, [pc, #108]	; (8003b68 <generate_goal_position+0x78>)
 8003afc:	fb82 1203 	smull	r1, r2, r2, r3
 8003b00:	1752      	asrs	r2, r2, #29
 8003b02:	17db      	asrs	r3, r3, #31
 8003b04:	1ad3      	subs	r3, r2, r3
 8003b06:	4618      	mov	r0, r3
 8003b08:	f7fc fd14 	bl	8000534 <__aeabi_i2d>
 8003b0c:	4604      	mov	r4, r0
 8003b0e:	460d      	mov	r5, r1
 8003b10:	4b16      	ldr	r3, [pc, #88]	; (8003b6c <generate_goal_position+0x7c>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4618      	mov	r0, r3
 8003b16:	f7fc fd1f 	bl	8000558 <__aeabi_f2d>
 8003b1a:	a30f      	add	r3, pc, #60	; (adr r3, 8003b58 <generate_goal_position+0x68>)
 8003b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b20:	f7fc fbba 	bl	8000298 <__aeabi_dsub>
 8003b24:	4602      	mov	r2, r0
 8003b26:	460b      	mov	r3, r1
 8003b28:	4620      	mov	r0, r4
 8003b2a:	4629      	mov	r1, r5
 8003b2c:	f7fc fd6c 	bl	8000608 <__aeabi_dmul>
 8003b30:	4602      	mov	r2, r0
 8003b32:	460b      	mov	r3, r1
 8003b34:	4610      	mov	r0, r2
 8003b36:	4619      	mov	r1, r3
 8003b38:	a309      	add	r3, pc, #36	; (adr r3, 8003b60 <generate_goal_position+0x70>)
 8003b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b3e:	f7fc fbad 	bl	800029c <__adddf3>
 8003b42:	4602      	mov	r2, r0
 8003b44:	460b      	mov	r3, r1
 8003b46:	4610      	mov	r0, r2
 8003b48:	4619      	mov	r1, r3
 8003b4a:	f7fd f81f 	bl	8000b8c <__aeabi_d2f>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	4a07      	ldr	r2, [pc, #28]	; (8003b70 <generate_goal_position+0x80>)
 8003b52:	6013      	str	r3, [r2, #0]
}
 8003b54:	bf00      	nop
 8003b56:	bdb0      	pop	{r4, r5, r7, pc}
 8003b58:	33333333 	.word	0x33333333
 8003b5c:	3fd33333 	.word	0x3fd33333
 8003b60:	33333333 	.word	0x33333333
 8003b64:	3fc33333 	.word	0x3fc33333
 8003b68:	40000001 	.word	0x40000001
 8003b6c:	20004f24 	.word	0x20004f24
 8003b70:	20004f2c 	.word	0x20004f2c
 8003b74:	00000000 	.word	0x00000000

08003b78 <homing_sequence>:

void homing_sequence(motor_data_t *motor) //Homing sequence to measure the length of the track and start the sentry from a home point
{
 8003b78:	b5b0      	push	{r4, r5, r7, lr}
 8003b7a:	b084      	sub	sp, #16
 8003b7c:	af02      	add	r7, sp, #8
 8003b7e:	6078      	str	r0, [r7, #4]
	home_gimbal(&canone_data.pitch, &canone_data.yaw); //Home gimbal before homing
 8003b80:	4939      	ldr	r1, [pc, #228]	; (8003c68 <homing_sequence+0xf0>)
 8003b82:	483a      	ldr	r0, [pc, #232]	; (8003c6c <homing_sequence+0xf4>)
 8003b84:	f7ff f924 	bl	8002dd0 <home_gimbal>
	current_position = 0;
 8003b88:	4b39      	ldr	r3, [pc, #228]	; (8003c70 <homing_sequence+0xf8>)
 8003b8a:	f04f 0200 	mov.w	r2, #0
 8003b8e:	601a      	str	r2, [r3, #0]
	track_length = 0;
 8003b90:	4b38      	ldr	r3, [pc, #224]	; (8003c74 <homing_sequence+0xfc>)
 8003b92:	f04f 0200 	mov.w	r2, #0
 8003b96:	601a      	str	r2, [r3, #0]
	// Move to one end of the track
	while (motor->torque < HOMING_TORQUE)
 8003b98:	e01e      	b.n	8003bd8 <homing_sequence+0x60>
	{
		last_speed_commanded = -HOMING_SPEED;
 8003b9a:	4b37      	ldr	r3, [pc, #220]	; (8003c78 <homing_sequence+0x100>)
 8003b9c:	4a37      	ldr	r2, [pc, #220]	; (8003c7c <homing_sequence+0x104>)
 8003b9e:	601a      	str	r2, [r3, #0]
		speed_pid(-HOMING_SPEED, motor->rpm, &motor->pid);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f7fc fcc4 	bl	8000534 <__aeabi_i2d>
 8003bac:	4604      	mov	r4, r0
 8003bae:	460d      	mov	r5, r1
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	3310      	adds	r3, #16
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	ec45 4b11 	vmov	d1, r4, r5
 8003bba:	ed9f 0b27 	vldr	d0, [pc, #156]	; 8003c58 <homing_sequence+0xe0>
 8003bbe:	f7ff fb1b 	bl	80031f8 <speed_pid>
		CANone_cmd(motor->pid.output, 0, 0, 0, CHASSIS_ID);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	f9b3 0064 	ldrsh.w	r0, [r3, #100]	; 0x64
 8003bc8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003bcc:	9300      	str	r3, [sp, #0]
 8003bce:	2300      	movs	r3, #0
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	2100      	movs	r1, #0
 8003bd4:	f7ff fc46 	bl	8003464 <CANone_cmd>
	while (motor->torque < HOMING_TORQUE)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8003bde:	f242 720f 	movw	r2, #9999	; 0x270f
 8003be2:	4293      	cmp	r3, r2
 8003be4:	ddd9      	ble.n	8003b9a <homing_sequence+0x22>
	}
	// Start computing the length of the track while moving to the other end of the track
	while (motor->torque < HOMING_TORQUE)
 8003be6:	e02b      	b.n	8003c40 <homing_sequence+0xc8>
	{
		last_speed_commanded = HOMING_SPEED;
 8003be8:	4b23      	ldr	r3, [pc, #140]	; (8003c78 <homing_sequence+0x100>)
 8003bea:	4a25      	ldr	r2, [pc, #148]	; (8003c80 <homing_sequence+0x108>)
 8003bec:	601a      	str	r2, [r3, #0]
		speed_pid(HOMING_SPEED, motor->rpm, &motor->pid);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f7fc fc9d 	bl	8000534 <__aeabi_i2d>
 8003bfa:	4604      	mov	r4, r0
 8003bfc:	460d      	mov	r5, r1
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	3310      	adds	r3, #16
 8003c02:	4618      	mov	r0, r3
 8003c04:	ec45 4b11 	vmov	d1, r4, r5
 8003c08:	ed9f 0b15 	vldr	d0, [pc, #84]	; 8003c60 <homing_sequence+0xe8>
 8003c0c:	f7ff faf4 	bl	80031f8 <speed_pid>
		CANone_cmd(motor->pid.output, 0, 0, 0, CHASSIS_ID);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	f9b3 0064 	ldrsh.w	r0, [r3, #100]	; 0x64
 8003c16:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003c1a:	9300      	str	r3, [sp, #0]
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	2200      	movs	r2, #0
 8003c20:	2100      	movs	r1, #0
 8003c22:	f7ff fc1f 	bl	8003464 <CANone_cmd>
		track_length += update_current_position(true);
 8003c26:	2001      	movs	r0, #1
 8003c28:	f7ff fd5a 	bl	80036e0 <update_current_position>
 8003c2c:	eeb0 7a40 	vmov.f32	s14, s0
 8003c30:	4b10      	ldr	r3, [pc, #64]	; (8003c74 <homing_sequence+0xfc>)
 8003c32:	edd3 7a00 	vldr	s15, [r3]
 8003c36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c3a:	4b0e      	ldr	r3, [pc, #56]	; (8003c74 <homing_sequence+0xfc>)
 8003c3c:	edc3 7a00 	vstr	s15, [r3]
	while (motor->torque < HOMING_TORQUE)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8003c46:	f242 720f 	movw	r2, #9999	; 0x270f
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	ddcc      	ble.n	8003be8 <homing_sequence+0x70>
	}
}
 8003c4e:	bf00      	nop
 8003c50:	bf00      	nop
 8003c52:	3708      	adds	r7, #8
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bdb0      	pop	{r4, r5, r7, pc}
 8003c58:	00000000 	.word	0x00000000
 8003c5c:	c08f4000 	.word	0xc08f4000
 8003c60:	00000000 	.word	0x00000000
 8003c64:	408f4000 	.word	0x408f4000
 8003c68:	20009e68 	.word	0x20009e68
 8003c6c:	20009de8 	.word	0x20009de8
 8003c70:	20004f20 	.word	0x20004f20
 8003c74:	20004f24 	.word	0x20004f24
 8003c78:	20004f30 	.word	0x20004f30
 8003c7c:	c47a0000 	.word	0xc47a0000
 8003c80:	447a0000 	.word	0x447a0000

08003c84 <dbus_remote_ISR>:
extern float pitch;
extern float yaw;


//Releases dbus semaphore when a dbus signal is detected by ISR
void dbus_remote_ISR(DMA_HandleTypeDef *hdma) {
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b082      	sub	sp, #8
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
	remote_cmd.right_x = (remote_raw_data[0] | remote_raw_data[1] << 8) & 0x07FF;
 8003c8c:	4b71      	ldr	r3, [pc, #452]	; (8003e54 <dbus_remote_ISR+0x1d0>)
 8003c8e:	781b      	ldrb	r3, [r3, #0]
 8003c90:	b21a      	sxth	r2, r3
 8003c92:	4b70      	ldr	r3, [pc, #448]	; (8003e54 <dbus_remote_ISR+0x1d0>)
 8003c94:	785b      	ldrb	r3, [r3, #1]
 8003c96:	021b      	lsls	r3, r3, #8
 8003c98:	b21b      	sxth	r3, r3
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	b21b      	sxth	r3, r3
 8003c9e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003ca2:	b21a      	sxth	r2, r3
 8003ca4:	4b6c      	ldr	r3, [pc, #432]	; (8003e58 <dbus_remote_ISR+0x1d4>)
 8003ca6:	801a      	strh	r2, [r3, #0]
	remote_cmd.right_x -= JOYSTICK_OFFSET;
 8003ca8:	4b6b      	ldr	r3, [pc, #428]	; (8003e58 <dbus_remote_ISR+0x1d4>)
 8003caa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003cae:	b29b      	uxth	r3, r3
 8003cb0:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8003cb4:	b29b      	uxth	r3, r3
 8003cb6:	b21a      	sxth	r2, r3
 8003cb8:	4b67      	ldr	r3, [pc, #412]	; (8003e58 <dbus_remote_ISR+0x1d4>)
 8003cba:	801a      	strh	r2, [r3, #0]
	remote_cmd.right_y = (remote_raw_data[1] >> 3 | remote_raw_data[2] << 5) & 0x07FF;
 8003cbc:	4b65      	ldr	r3, [pc, #404]	; (8003e54 <dbus_remote_ISR+0x1d0>)
 8003cbe:	785b      	ldrb	r3, [r3, #1]
 8003cc0:	08db      	lsrs	r3, r3, #3
 8003cc2:	b2db      	uxtb	r3, r3
 8003cc4:	b21a      	sxth	r2, r3
 8003cc6:	4b63      	ldr	r3, [pc, #396]	; (8003e54 <dbus_remote_ISR+0x1d0>)
 8003cc8:	789b      	ldrb	r3, [r3, #2]
 8003cca:	015b      	lsls	r3, r3, #5
 8003ccc:	b21b      	sxth	r3, r3
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	b21b      	sxth	r3, r3
 8003cd2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003cd6:	b21a      	sxth	r2, r3
 8003cd8:	4b5f      	ldr	r3, [pc, #380]	; (8003e58 <dbus_remote_ISR+0x1d4>)
 8003cda:	805a      	strh	r2, [r3, #2]
	remote_cmd.right_y -= JOYSTICK_OFFSET;
 8003cdc:	4b5e      	ldr	r3, [pc, #376]	; (8003e58 <dbus_remote_ISR+0x1d4>)
 8003cde:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003ce2:	b29b      	uxth	r3, r3
 8003ce4:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8003ce8:	b29b      	uxth	r3, r3
 8003cea:	b21a      	sxth	r2, r3
 8003cec:	4b5a      	ldr	r3, [pc, #360]	; (8003e58 <dbus_remote_ISR+0x1d4>)
 8003cee:	805a      	strh	r2, [r3, #2]
	remote_cmd.left_x = (remote_raw_data[2] >> 6 | remote_raw_data[3] << 2 | remote_raw_data[4] << 10) & 0x07FF;
 8003cf0:	4b58      	ldr	r3, [pc, #352]	; (8003e54 <dbus_remote_ISR+0x1d0>)
 8003cf2:	789b      	ldrb	r3, [r3, #2]
 8003cf4:	099b      	lsrs	r3, r3, #6
 8003cf6:	b2db      	uxtb	r3, r3
 8003cf8:	b21a      	sxth	r2, r3
 8003cfa:	4b56      	ldr	r3, [pc, #344]	; (8003e54 <dbus_remote_ISR+0x1d0>)
 8003cfc:	78db      	ldrb	r3, [r3, #3]
 8003cfe:	009b      	lsls	r3, r3, #2
 8003d00:	b21b      	sxth	r3, r3
 8003d02:	4313      	orrs	r3, r2
 8003d04:	b21a      	sxth	r2, r3
 8003d06:	4b53      	ldr	r3, [pc, #332]	; (8003e54 <dbus_remote_ISR+0x1d0>)
 8003d08:	791b      	ldrb	r3, [r3, #4]
 8003d0a:	029b      	lsls	r3, r3, #10
 8003d0c:	b21b      	sxth	r3, r3
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	b21b      	sxth	r3, r3
 8003d12:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d16:	b21a      	sxth	r2, r3
 8003d18:	4b4f      	ldr	r3, [pc, #316]	; (8003e58 <dbus_remote_ISR+0x1d4>)
 8003d1a:	809a      	strh	r2, [r3, #4]
	remote_cmd.left_x -= JOYSTICK_OFFSET;
 8003d1c:	4b4e      	ldr	r3, [pc, #312]	; (8003e58 <dbus_remote_ISR+0x1d4>)
 8003d1e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003d22:	b29b      	uxth	r3, r3
 8003d24:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8003d28:	b29b      	uxth	r3, r3
 8003d2a:	b21a      	sxth	r2, r3
 8003d2c:	4b4a      	ldr	r3, [pc, #296]	; (8003e58 <dbus_remote_ISR+0x1d4>)
 8003d2e:	809a      	strh	r2, [r3, #4]
	remote_cmd.left_y = (remote_raw_data[4] >> 1 | remote_raw_data[5] << 7) & 0x07FF;
 8003d30:	4b48      	ldr	r3, [pc, #288]	; (8003e54 <dbus_remote_ISR+0x1d0>)
 8003d32:	791b      	ldrb	r3, [r3, #4]
 8003d34:	085b      	lsrs	r3, r3, #1
 8003d36:	b2db      	uxtb	r3, r3
 8003d38:	b21a      	sxth	r2, r3
 8003d3a:	4b46      	ldr	r3, [pc, #280]	; (8003e54 <dbus_remote_ISR+0x1d0>)
 8003d3c:	795b      	ldrb	r3, [r3, #5]
 8003d3e:	01db      	lsls	r3, r3, #7
 8003d40:	b21b      	sxth	r3, r3
 8003d42:	4313      	orrs	r3, r2
 8003d44:	b21b      	sxth	r3, r3
 8003d46:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d4a:	b21a      	sxth	r2, r3
 8003d4c:	4b42      	ldr	r3, [pc, #264]	; (8003e58 <dbus_remote_ISR+0x1d4>)
 8003d4e:	80da      	strh	r2, [r3, #6]
	remote_cmd.left_y -= JOYSTICK_OFFSET;
 8003d50:	4b41      	ldr	r3, [pc, #260]	; (8003e58 <dbus_remote_ISR+0x1d4>)
 8003d52:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8003d56:	b29b      	uxth	r3, r3
 8003d58:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8003d5c:	b29b      	uxth	r3, r3
 8003d5e:	b21a      	sxth	r2, r3
 8003d60:	4b3d      	ldr	r3, [pc, #244]	; (8003e58 <dbus_remote_ISR+0x1d4>)
 8003d62:	80da      	strh	r2, [r3, #6]
	//Left switch position
	remote_cmd.left_switch = ((remote_raw_data[5] >> 4) & 0x000C) >> 2;
 8003d64:	4b3b      	ldr	r3, [pc, #236]	; (8003e54 <dbus_remote_ISR+0x1d0>)
 8003d66:	795b      	ldrb	r3, [r3, #5]
 8003d68:	091b      	lsrs	r3, r3, #4
 8003d6a:	b2db      	uxtb	r3, r3
 8003d6c:	109b      	asrs	r3, r3, #2
 8003d6e:	b25b      	sxtb	r3, r3
 8003d70:	f003 0303 	and.w	r3, r3, #3
 8003d74:	b25a      	sxtb	r2, r3
 8003d76:	4b38      	ldr	r3, [pc, #224]	; (8003e58 <dbus_remote_ISR+0x1d4>)
 8003d78:	721a      	strb	r2, [r3, #8]
	remote_cmd.right_switch = (remote_raw_data[5] >> 4) & 0x0003;
 8003d7a:	4b36      	ldr	r3, [pc, #216]	; (8003e54 <dbus_remote_ISR+0x1d0>)
 8003d7c:	795b      	ldrb	r3, [r3, #5]
 8003d7e:	091b      	lsrs	r3, r3, #4
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	b25b      	sxtb	r3, r3
 8003d84:	f003 0303 	and.w	r3, r3, #3
 8003d88:	b25a      	sxtb	r2, r3
 8003d8a:	4b33      	ldr	r3, [pc, #204]	; (8003e58 <dbus_remote_ISR+0x1d4>)
 8003d8c:	725a      	strb	r2, [r3, #9]
	remote_cmd.mouse_x = ((int16_t)remote_raw_data[6] | ((int16_t)remote_raw_data[7] << 8));
 8003d8e:	4b31      	ldr	r3, [pc, #196]	; (8003e54 <dbus_remote_ISR+0x1d0>)
 8003d90:	799b      	ldrb	r3, [r3, #6]
 8003d92:	b21a      	sxth	r2, r3
 8003d94:	4b2f      	ldr	r3, [pc, #188]	; (8003e54 <dbus_remote_ISR+0x1d0>)
 8003d96:	79db      	ldrb	r3, [r3, #7]
 8003d98:	021b      	lsls	r3, r3, #8
 8003d9a:	b21b      	sxth	r3, r3
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	b21a      	sxth	r2, r3
 8003da0:	4b2d      	ldr	r3, [pc, #180]	; (8003e58 <dbus_remote_ISR+0x1d4>)
 8003da2:	815a      	strh	r2, [r3, #10]
	remote_cmd.mouse_y = ((int16_t)remote_raw_data[8] | ((int16_t)remote_raw_data[9] << 8));
 8003da4:	4b2b      	ldr	r3, [pc, #172]	; (8003e54 <dbus_remote_ISR+0x1d0>)
 8003da6:	7a1b      	ldrb	r3, [r3, #8]
 8003da8:	b21a      	sxth	r2, r3
 8003daa:	4b2a      	ldr	r3, [pc, #168]	; (8003e54 <dbus_remote_ISR+0x1d0>)
 8003dac:	7a5b      	ldrb	r3, [r3, #9]
 8003dae:	021b      	lsls	r3, r3, #8
 8003db0:	b21b      	sxth	r3, r3
 8003db2:	4313      	orrs	r3, r2
 8003db4:	b21a      	sxth	r2, r3
 8003db6:	4b28      	ldr	r3, [pc, #160]	; (8003e58 <dbus_remote_ISR+0x1d4>)
 8003db8:	819a      	strh	r2, [r3, #12]
	remote_cmd.mouse_z = ((int16_t)remote_raw_data[10] | ((int16_t)remote_raw_data[11] << 8));
 8003dba:	4b26      	ldr	r3, [pc, #152]	; (8003e54 <dbus_remote_ISR+0x1d0>)
 8003dbc:	7a9b      	ldrb	r3, [r3, #10]
 8003dbe:	b21a      	sxth	r2, r3
 8003dc0:	4b24      	ldr	r3, [pc, #144]	; (8003e54 <dbus_remote_ISR+0x1d0>)
 8003dc2:	7adb      	ldrb	r3, [r3, #11]
 8003dc4:	021b      	lsls	r3, r3, #8
 8003dc6:	b21b      	sxth	r3, r3
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	b21a      	sxth	r2, r3
 8003dcc:	4b22      	ldr	r3, [pc, #136]	; (8003e58 <dbus_remote_ISR+0x1d4>)
 8003dce:	81da      	strh	r2, [r3, #14]
	remote_cmd.mouse_left = (remote_raw_data[12]);
 8003dd0:	4b20      	ldr	r3, [pc, #128]	; (8003e54 <dbus_remote_ISR+0x1d0>)
 8003dd2:	7b1b      	ldrb	r3, [r3, #12]
 8003dd4:	b25a      	sxtb	r2, r3
 8003dd6:	4b20      	ldr	r3, [pc, #128]	; (8003e58 <dbus_remote_ISR+0x1d4>)
 8003dd8:	761a      	strb	r2, [r3, #24]
	remote_cmd.mouse_right = (remote_raw_data[13]);
 8003dda:	4b1e      	ldr	r3, [pc, #120]	; (8003e54 <dbus_remote_ISR+0x1d0>)
 8003ddc:	7b5b      	ldrb	r3, [r3, #13]
 8003dde:	b25a      	sxtb	r2, r3
 8003de0:	4b1d      	ldr	r3, [pc, #116]	; (8003e58 <dbus_remote_ISR+0x1d4>)
 8003de2:	765a      	strb	r2, [r3, #25]
	remote_cmd.keyboard_keys = (remote_raw_data[14]);
 8003de4:	4b1b      	ldr	r3, [pc, #108]	; (8003e54 <dbus_remote_ISR+0x1d0>)
 8003de6:	7b9b      	ldrb	r3, [r3, #14]
 8003de8:	b21a      	sxth	r2, r3
 8003dea:	4b1b      	ldr	r3, [pc, #108]	; (8003e58 <dbus_remote_ISR+0x1d4>)
 8003dec:	835a      	strh	r2, [r3, #26]
	remote_cmd.last_time = HAL_GetTick();
 8003dee:	f000 fa57 	bl	80042a0 <HAL_GetTick>
 8003df2:	4603      	mov	r3, r0
 8003df4:	4a18      	ldr	r2, [pc, #96]	; (8003e58 <dbus_remote_ISR+0x1d4>)
 8003df6:	61d3      	str	r3, [r2, #28]
	if(remote_cmd.keyboard_keys & KEY_OFFSET_Q && remote_cmd.keyboard_keys & KEY_OFFSET_SHIFT
 8003df8:	4b17      	ldr	r3, [pc, #92]	; (8003e58 <dbus_remote_ISR+0x1d4>)
 8003dfa:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8003dfe:	b29b      	uxth	r3, r3
 8003e00:	f003 0310 	and.w	r3, r3, #16
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d01a      	beq.n	8003e3e <dbus_remote_ISR+0x1ba>
 8003e08:	4b13      	ldr	r3, [pc, #76]	; (8003e58 <dbus_remote_ISR+0x1d4>)
 8003e0a:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8003e0e:	b29b      	uxth	r3, r3
 8003e10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d012      	beq.n	8003e3e <dbus_remote_ISR+0x1ba>
			&& remote_cmd.keyboard_keys & KEY_OFFSET_CTRL)
 8003e18:	4b0f      	ldr	r3, [pc, #60]	; (8003e58 <dbus_remote_ISR+0x1d4>)
 8003e1a:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8003e1e:	b29b      	uxth	r3, r3
 8003e20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d00a      	beq.n	8003e3e <dbus_remote_ISR+0x1ba>
	{
		if (remote_control_mode == 1)
 8003e28:	4b0c      	ldr	r3, [pc, #48]	; (8003e5c <dbus_remote_ISR+0x1d8>)
 8003e2a:	781b      	ldrb	r3, [r3, #0]
 8003e2c:	2b01      	cmp	r3, #1
 8003e2e:	d103      	bne.n	8003e38 <dbus_remote_ISR+0x1b4>
		{
			remote_control_mode = 0;
 8003e30:	4b0a      	ldr	r3, [pc, #40]	; (8003e5c <dbus_remote_ISR+0x1d8>)
 8003e32:	2200      	movs	r2, #0
 8003e34:	701a      	strb	r2, [r3, #0]
 8003e36:	e002      	b.n	8003e3e <dbus_remote_ISR+0x1ba>
		}
		else
		{
			remote_control_mode = 1;
 8003e38:	4b08      	ldr	r3, [pc, #32]	; (8003e5c <dbus_remote_ISR+0x1d8>)
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	701a      	strb	r2, [r3, #0]
		}
	}
	osEventFlagsSet(rc_data_flag, 0x1000);
 8003e3e:	4b08      	ldr	r3, [pc, #32]	; (8003e60 <dbus_remote_ISR+0x1dc>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003e46:	4618      	mov	r0, r3
 8003e48:	f004 fcc4 	bl	80087d4 <osEventFlagsSet>
}
 8003e4c:	bf00      	nop
 8003e4e:	3708      	adds	r7, #8
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd80      	pop	{r7, pc}
 8003e54:	2000009c 	.word	0x2000009c
 8003e58:	20004f38 	.word	0x20004f38
 8003e5c:	20004f58 	.word	0x20004f58
 8003e60:	200098c4 	.word	0x200098c4

08003e64 <dbus_reset>:

void dbus_reset()
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	af00      	add	r7, sp, #0
	HAL_UART_DMAPause(&huart1);
 8003e68:	4818      	ldr	r0, [pc, #96]	; (8003ecc <dbus_reset+0x68>)
 8003e6a:	f003 fbe7 	bl	800763c <HAL_UART_DMAPause>
	remote_cmd.right_x = 0;
 8003e6e:	4b18      	ldr	r3, [pc, #96]	; (8003ed0 <dbus_reset+0x6c>)
 8003e70:	2200      	movs	r2, #0
 8003e72:	801a      	strh	r2, [r3, #0]
	remote_cmd.right_y = 0;
 8003e74:	4b16      	ldr	r3, [pc, #88]	; (8003ed0 <dbus_reset+0x6c>)
 8003e76:	2200      	movs	r2, #0
 8003e78:	805a      	strh	r2, [r3, #2]
	remote_cmd.left_x = 0;
 8003e7a:	4b15      	ldr	r3, [pc, #84]	; (8003ed0 <dbus_reset+0x6c>)
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	809a      	strh	r2, [r3, #4]
	remote_cmd.left_y = 0;
 8003e80:	4b13      	ldr	r3, [pc, #76]	; (8003ed0 <dbus_reset+0x6c>)
 8003e82:	2200      	movs	r2, #0
 8003e84:	80da      	strh	r2, [r3, #6]
	remote_cmd.left_switch = 0;
 8003e86:	4b12      	ldr	r3, [pc, #72]	; (8003ed0 <dbus_reset+0x6c>)
 8003e88:	2200      	movs	r2, #0
 8003e8a:	721a      	strb	r2, [r3, #8]
	remote_cmd.mouse_x = 0;
 8003e8c:	4b10      	ldr	r3, [pc, #64]	; (8003ed0 <dbus_reset+0x6c>)
 8003e8e:	2200      	movs	r2, #0
 8003e90:	815a      	strh	r2, [r3, #10]
	remote_cmd.mouse_y = 0;
 8003e92:	4b0f      	ldr	r3, [pc, #60]	; (8003ed0 <dbus_reset+0x6c>)
 8003e94:	2200      	movs	r2, #0
 8003e96:	819a      	strh	r2, [r3, #12]
	remote_cmd.mouse_z = 0;
 8003e98:	4b0d      	ldr	r3, [pc, #52]	; (8003ed0 <dbus_reset+0x6c>)
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	81da      	strh	r2, [r3, #14]
	remote_cmd.mouse_left = (remote_raw_data[12]);
 8003e9e:	4b0d      	ldr	r3, [pc, #52]	; (8003ed4 <dbus_reset+0x70>)
 8003ea0:	7b1b      	ldrb	r3, [r3, #12]
 8003ea2:	b25a      	sxtb	r2, r3
 8003ea4:	4b0a      	ldr	r3, [pc, #40]	; (8003ed0 <dbus_reset+0x6c>)
 8003ea6:	761a      	strb	r2, [r3, #24]
	remote_cmd.mouse_right = (remote_raw_data[13]);
 8003ea8:	4b0a      	ldr	r3, [pc, #40]	; (8003ed4 <dbus_reset+0x70>)
 8003eaa:	7b5b      	ldrb	r3, [r3, #13]
 8003eac:	b25a      	sxtb	r2, r3
 8003eae:	4b08      	ldr	r3, [pc, #32]	; (8003ed0 <dbus_reset+0x6c>)
 8003eb0:	765a      	strb	r2, [r3, #25]
	pitch = 0;
 8003eb2:	4b09      	ldr	r3, [pc, #36]	; (8003ed8 <dbus_reset+0x74>)
 8003eb4:	f04f 0200 	mov.w	r2, #0
 8003eb8:	601a      	str	r2, [r3, #0]
	yaw = 0;
 8003eba:	4b08      	ldr	r3, [pc, #32]	; (8003edc <dbus_reset+0x78>)
 8003ebc:	f04f 0200 	mov.w	r2, #0
 8003ec0:	601a      	str	r2, [r3, #0]
	HAL_UART_DMAResume(&huart1);
 8003ec2:	4802      	ldr	r0, [pc, #8]	; (8003ecc <dbus_reset+0x68>)
 8003ec4:	f003 fc1e 	bl	8007704 <HAL_UART_DMAResume>
}
 8003ec8:	bf00      	nop
 8003eca:	bd80      	pop	{r7, pc}
 8003ecc:	20009c2c 	.word	0x20009c2c
 8003ed0:	20004f38 	.word	0x20004f38
 8003ed4:	2000009c 	.word	0x2000009c
 8003ed8:	20004ed8 	.word	0x20004ed8
 8003edc:	20004edc 	.word	0x20004edc

08003ee0 <startup_task>:
extern float pitch;
extern float yaw;


void startup_task()
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b082      	sub	sp, #8
 8003ee4:	af00      	add	r7, sp, #0
	led_on();
 8003ee6:	f7fd f939 	bl	800115c <led_on>
	//general init
	can_start(&hcan1);
 8003eea:	4880      	ldr	r0, [pc, #512]	; (80040ec <startup_task+0x20c>)
 8003eec:	f7fd f866 	bl	8000fbc <can_start>
	can_start(&hcan2);
 8003ef0:	487f      	ldr	r0, [pc, #508]	; (80040f0 <startup_task+0x210>)
 8003ef2:	f7fd f863 	bl	8000fbc <can_start>
	buzzer_init();
 8003ef6:	f7fd f837 	bl	8000f68 <buzzer_init>
	dbus_remote_start(remote_raw_data);
 8003efa:	487e      	ldr	r0, [pc, #504]	; (80040f4 <startup_task+0x214>)
 8003efc:	f7fd f8a0 	bl	8001040 <dbus_remote_start>
	HAL_Delay(STARTUP_DELAY);
 8003f00:	2064      	movs	r0, #100	; 0x64
 8003f02:	f000 f9d9 	bl	80042b8 <HAL_Delay>
	led_green_off();
 8003f06:	f7fd f91d 	bl	8001144 <led_green_off>

	//PID values
	canone_data.CHASSIS.pid.max_out = CHASSIS_MAX_CURRENT;
 8003f0a:	4b7b      	ldr	r3, [pc, #492]	; (80040f8 <startup_task+0x218>)
 8003f0c:	f643 4218 	movw	r2, #15384	; 0x3c18
 8003f10:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	canone_data.CHASSIS.pid.min_out = CHASSIS_MIN_CURRENT;
 8003f14:	4b78      	ldr	r3, [pc, #480]	; (80040f8 <startup_task+0x218>)
 8003f16:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003f1a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
	canone_data.CHASSIS.pid.kp = CHASSIS_KP;
 8003f1e:	4b76      	ldr	r3, [pc, #472]	; (80040f8 <startup_task+0x218>)
 8003f20:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8003f24:	611a      	str	r2, [r3, #16]
	canone_data.CHASSIS.pid.ki = CHASSIS_KI;
 8003f26:	4b74      	ldr	r3, [pc, #464]	; (80040f8 <startup_task+0x218>)
 8003f28:	f04f 0200 	mov.w	r2, #0
 8003f2c:	615a      	str	r2, [r3, #20]
	canone_data.CHASSIS.pid.kd = CHASSIS_KD;
 8003f2e:	4b72      	ldr	r3, [pc, #456]	; (80040f8 <startup_task+0x218>)
 8003f30:	4a72      	ldr	r2, [pc, #456]	; (80040fc <startup_task+0x21c>)
 8003f32:	619a      	str	r2, [r3, #24]

	for (uint8_t i = 0; i < 2; i++){
 8003f34:	2300      	movs	r3, #0
 8003f36:	71fb      	strb	r3, [r7, #7]
 8003f38:	e031      	b.n	8003f9e <startup_task+0xbe>
		canone_data.FEEDER[i].pid.max_out = FRICTION_MAX_CURRENT;
 8003f3a:	79fb      	ldrb	r3, [r7, #7]
 8003f3c:	4a6e      	ldr	r2, [pc, #440]	; (80040f8 <startup_task+0x218>)
 8003f3e:	2168      	movs	r1, #104	; 0x68
 8003f40:	fb01 f303 	mul.w	r3, r1, r3
 8003f44:	4413      	add	r3, r2
 8003f46:	33c8      	adds	r3, #200	; 0xc8
 8003f48:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003f4c:	801a      	strh	r2, [r3, #0]
		canone_data.FEEDER[i].pid.min_out = 0;
 8003f4e:	79fb      	ldrb	r3, [r7, #7]
 8003f50:	4a69      	ldr	r2, [pc, #420]	; (80040f8 <startup_task+0x218>)
 8003f52:	2168      	movs	r1, #104	; 0x68
 8003f54:	fb01 f303 	mul.w	r3, r1, r3
 8003f58:	4413      	add	r3, r2
 8003f5a:	33ca      	adds	r3, #202	; 0xca
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	801a      	strh	r2, [r3, #0]
		canone_data.FEEDER[i].pid.kp 	= FRICTION_KP;
 8003f60:	79fb      	ldrb	r3, [r7, #7]
 8003f62:	4a65      	ldr	r2, [pc, #404]	; (80040f8 <startup_task+0x218>)
 8003f64:	2168      	movs	r1, #104	; 0x68
 8003f66:	fb01 f303 	mul.w	r3, r1, r3
 8003f6a:	4413      	add	r3, r2
 8003f6c:	3378      	adds	r3, #120	; 0x78
 8003f6e:	4a64      	ldr	r2, [pc, #400]	; (8004100 <startup_task+0x220>)
 8003f70:	601a      	str	r2, [r3, #0]
		canone_data.FEEDER[i].pid.ki 	= FRICTION_KI;
 8003f72:	79fb      	ldrb	r3, [r7, #7]
 8003f74:	4a60      	ldr	r2, [pc, #384]	; (80040f8 <startup_task+0x218>)
 8003f76:	2168      	movs	r1, #104	; 0x68
 8003f78:	fb01 f303 	mul.w	r3, r1, r3
 8003f7c:	4413      	add	r3, r2
 8003f7e:	337c      	adds	r3, #124	; 0x7c
 8003f80:	f04f 0200 	mov.w	r2, #0
 8003f84:	601a      	str	r2, [r3, #0]
		canone_data.FEEDER[i].pid.kd 	= FRICTION_KD;
 8003f86:	79fb      	ldrb	r3, [r7, #7]
 8003f88:	4a5b      	ldr	r2, [pc, #364]	; (80040f8 <startup_task+0x218>)
 8003f8a:	2168      	movs	r1, #104	; 0x68
 8003f8c:	fb01 f303 	mul.w	r3, r1, r3
 8003f90:	4413      	add	r3, r2
 8003f92:	3380      	adds	r3, #128	; 0x80
 8003f94:	4a5b      	ldr	r2, [pc, #364]	; (8004104 <startup_task+0x224>)
 8003f96:	601a      	str	r2, [r3, #0]
	for (uint8_t i = 0; i < 2; i++){
 8003f98:	79fb      	ldrb	r3, [r7, #7]
 8003f9a:	3301      	adds	r3, #1
 8003f9c:	71fb      	strb	r3, [r7, #7]
 8003f9e:	79fb      	ldrb	r3, [r7, #7]
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d9ca      	bls.n	8003f3a <startup_task+0x5a>
	}


	//gimbal PID input
	canone_data.pitch.pid.max_out		= PITCH_MAX_CURRENT;
 8003fa4:	4b54      	ldr	r3, [pc, #336]	; (80040f8 <startup_task+0x218>)
 8003fa6:	f644 6220 	movw	r2, #20000	; 0x4e20
 8003faa:	f8a3 21b0 	strh.w	r2, [r3, #432]	; 0x1b0
	canone_data.pitch.pid.kp 			= PITCH_KP;
 8003fae:	4b52      	ldr	r3, [pc, #328]	; (80040f8 <startup_task+0x218>)
 8003fb0:	4a53      	ldr	r2, [pc, #332]	; (8004100 <startup_task+0x220>)
 8003fb2:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
	canone_data.pitch.pid.kd			= PITCH_KD;
 8003fb6:	4b50      	ldr	r3, [pc, #320]	; (80040f8 <startup_task+0x218>)
 8003fb8:	4a52      	ldr	r2, [pc, #328]	; (8004104 <startup_task+0x224>)
 8003fba:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
	canone_data.pitch.pid.ki			= PITCH_KI;
 8003fbe:	4b4e      	ldr	r3, [pc, #312]	; (80040f8 <startup_task+0x218>)
 8003fc0:	f04f 0200 	mov.w	r2, #0
 8003fc4:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
	canone_data.pitch.motor_max_deflection = GM6020_MAX_DEFLECTION;
 8003fc8:	4b4b      	ldr	r3, [pc, #300]	; (80040f8 <startup_task+0x218>)
 8003fca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003fce:	f8a3 214c 	strh.w	r2, [r3, #332]	; 0x14c
	canone_data.pitch.calib 		= 1;
 8003fd2:	4b49      	ldr	r3, [pc, #292]	; (80040f8 <startup_task+0x218>)
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158
	canone_data.pitch.rpm_max 		= PITCH_MAX_RPM;
 8003fda:	4b47      	ldr	r3, [pc, #284]	; (80040f8 <startup_task+0x218>)
 8003fdc:	2278      	movs	r2, #120	; 0x78
 8003fde:	f8a3 215a 	strh.w	r2, [r3, #346]	; 0x15a
	canone_data.pitch.center_ang 	= PITCH_CENTER;
 8003fe2:	4b45      	ldr	r3, [pc, #276]	; (80040f8 <startup_task+0x218>)
 8003fe4:	f641 12c8 	movw	r2, #6600	; 0x19c8
 8003fe8:	f8a3 214a 	strh.w	r2, [r3, #330]	; 0x14a
	canone_data.pitch.max_ang 		= PITCH_MAX_ANGLE;
 8003fec:	4b42      	ldr	r3, [pc, #264]	; (80040f8 <startup_task+0x218>)
 8003fee:	4a46      	ldr	r2, [pc, #280]	; (8004108 <startup_task+0x228>)
 8003ff0:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
	canone_data.pitch.min_ang		= PITCH_MIN_ANGLE;
 8003ff4:	4b40      	ldr	r3, [pc, #256]	; (80040f8 <startup_task+0x218>)
 8003ff6:	4a45      	ldr	r2, [pc, #276]	; (800410c <startup_task+0x22c>)
 8003ff8:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154

	canone_data.yaw.pid.max_out			= YAW_MAX_CURRENT;
 8003ffc:	4b3e      	ldr	r3, [pc, #248]	; (80040f8 <startup_task+0x218>)
 8003ffe:	f644 6220 	movw	r2, #20000	; 0x4e20
 8004002:	f8a3 2230 	strh.w	r2, [r3, #560]	; 0x230
	canone_data.yaw.pid.kp 				= YAW_KP;
 8004006:	4b3c      	ldr	r3, [pc, #240]	; (80040f8 <startup_task+0x218>)
 8004008:	4a41      	ldr	r2, [pc, #260]	; (8004110 <startup_task+0x230>)
 800400a:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
	canone_data.yaw.pid.kd				= YAW_KD;
 800400e:	4b3a      	ldr	r3, [pc, #232]	; (80040f8 <startup_task+0x218>)
 8004010:	4a40      	ldr	r2, [pc, #256]	; (8004114 <startup_task+0x234>)
 8004012:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8
	canone_data.yaw.pid.ki				= YAW_KI;
 8004016:	4b38      	ldr	r3, [pc, #224]	; (80040f8 <startup_task+0x218>)
 8004018:	4a39      	ldr	r2, [pc, #228]	; (8004100 <startup_task+0x220>)
 800401a:	f8c3 21e4 	str.w	r2, [r3, #484]	; 0x1e4
	canone_data.yaw.motor_max_deflection = GM6020_MAX_DEFLECTION;
 800401e:	4b36      	ldr	r3, [pc, #216]	; (80040f8 <startup_task+0x218>)
 8004020:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004024:	f8a3 21cc 	strh.w	r2, [r3, #460]	; 0x1cc
	canone_data.yaw.center_ang		= YAW_CENTER;
 8004028:	4b33      	ldr	r3, [pc, #204]	; (80040f8 <startup_task+0x218>)
 800402a:	f641 729f 	movw	r2, #8095	; 0x1f9f
 800402e:	f8a3 21ca 	strh.w	r2, [r3, #458]	; 0x1ca
	canone_data.yaw.calib 			= 1;
 8004032:	4b31      	ldr	r3, [pc, #196]	; (80040f8 <startup_task+0x218>)
 8004034:	2201      	movs	r2, #1
 8004036:	f883 21d8 	strb.w	r2, [r3, #472]	; 0x1d8
	canone_data.yaw.rpm_max 		= YAW_MAX_RPM;
 800403a:	4b2f      	ldr	r3, [pc, #188]	; (80040f8 <startup_task+0x218>)
 800403c:	2278      	movs	r2, #120	; 0x78
 800403e:	f8a3 21da 	strh.w	r2, [r3, #474]	; 0x1da
	canone_data.yaw.max_ang 		= 0.8;
 8004042:	4b2d      	ldr	r3, [pc, #180]	; (80040f8 <startup_task+0x218>)
 8004044:	4a34      	ldr	r2, [pc, #208]	; (8004118 <startup_task+0x238>)
 8004046:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
	canone_data.yaw.min_ang 		= -0.8;
 800404a:	4b2b      	ldr	r3, [pc, #172]	; (80040f8 <startup_task+0x218>)
 800404c:	4a33      	ldr	r2, [pc, #204]	; (800411c <startup_task+0x23c>)
 800404e:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
	//motor online check, code does not continue if any fails
	if (MOTOR_ONLINE_CHECK == 1)
	{
		while (canone_data.CHASSIS.id == 0)
 8004052:	e003      	b.n	800405c <startup_task+0x17c>
		{
			err_buzzer(1,1);
 8004054:	2101      	movs	r1, #1
 8004056:	2001      	movs	r0, #1
 8004058:	f000 f866 	bl	8004128 <err_buzzer>
		while (canone_data.CHASSIS.id == 0)
 800405c:	4b26      	ldr	r3, [pc, #152]	; (80040f8 <startup_task+0x218>)
 800405e:	881b      	ldrh	r3, [r3, #0]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d0f7      	beq.n	8004054 <startup_task+0x174>
		}

		for (uint8_t i = 0; i < 2; i++){
 8004064:	2300      	movs	r3, #0
 8004066:	71bb      	strb	r3, [r7, #6]
 8004068:	e013      	b.n	8004092 <startup_task+0x1b2>
			while (canone_data.FEEDER[i].id == 0)
			{
				err_buzzer(1,i + 2);
 800406a:	79bb      	ldrb	r3, [r7, #6]
 800406c:	3302      	adds	r3, #2
 800406e:	b2db      	uxtb	r3, r3
 8004070:	4619      	mov	r1, r3
 8004072:	2001      	movs	r0, #1
 8004074:	f000 f858 	bl	8004128 <err_buzzer>
			while (canone_data.FEEDER[i].id == 0)
 8004078:	79bb      	ldrb	r3, [r7, #6]
 800407a:	4a1f      	ldr	r2, [pc, #124]	; (80040f8 <startup_task+0x218>)
 800407c:	3301      	adds	r3, #1
 800407e:	2168      	movs	r1, #104	; 0x68
 8004080:	fb01 f303 	mul.w	r3, r1, r3
 8004084:	4413      	add	r3, r2
 8004086:	881b      	ldrh	r3, [r3, #0]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d0ee      	beq.n	800406a <startup_task+0x18a>
		for (uint8_t i = 0; i < 2; i++){
 800408c:	79bb      	ldrb	r3, [r7, #6]
 800408e:	3301      	adds	r3, #1
 8004090:	71bb      	strb	r3, [r7, #6]
 8004092:	79bb      	ldrb	r3, [r7, #6]
 8004094:	2b01      	cmp	r3, #1
 8004096:	d9ef      	bls.n	8004078 <startup_task+0x198>
			}
		}
		//gimbal motors check
		while (canone_data.pitch.id == 0)
 8004098:	e003      	b.n	80040a2 <startup_task+0x1c2>
		{
			err_buzzer(1,8);
 800409a:	2108      	movs	r1, #8
 800409c:	2001      	movs	r0, #1
 800409e:	f000 f843 	bl	8004128 <err_buzzer>
		while (canone_data.pitch.id == 0)
 80040a2:	4b15      	ldr	r3, [pc, #84]	; (80040f8 <startup_task+0x218>)
 80040a4:	f8b3 3138 	ldrh.w	r3, [r3, #312]	; 0x138
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d0f6      	beq.n	800409a <startup_task+0x1ba>
		}

		while (canone_data.yaw.id == 0)
 80040ac:	e003      	b.n	80040b6 <startup_task+0x1d6>
		{
			err_buzzer(1,9);
 80040ae:	2109      	movs	r1, #9
 80040b0:	2001      	movs	r0, #1
 80040b2:	f000 f839 	bl	8004128 <err_buzzer>
		while (canone_data.yaw.id == 0)
 80040b6:	4b10      	ldr	r3, [pc, #64]	; (80040f8 <startup_task+0x218>)
 80040b8:	f8b3 31b8 	ldrh.w	r3, [r3, #440]	; 0x1b8
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d0f6      	beq.n	80040ae <startup_task+0x1ce>
		}
	}
	pitch = 0;
 80040c0:	4b17      	ldr	r3, [pc, #92]	; (8004120 <startup_task+0x240>)
 80040c2:	f04f 0200 	mov.w	r2, #0
 80040c6:	601a      	str	r2, [r3, #0]
	yaw	  = 0;
 80040c8:	4b16      	ldr	r3, [pc, #88]	; (8004124 <startup_task+0x244>)
 80040ca:	f04f 0200 	mov.w	r2, #0
 80040ce:	601a      	str	r2, [r3, #0]
	ok_buzzer(1,1);
 80040d0:	2101      	movs	r1, #1
 80040d2:	2001      	movs	r0, #1
 80040d4:	f000 f86b 	bl	80041ae <ok_buzzer>
	led_toggle();
 80040d8:	f7fd f854 	bl	8001184 <led_toggle>
	homing_sequence(&canone_data.CHASSIS); //Performs homing sequence
 80040dc:	4806      	ldr	r0, [pc, #24]	; (80040f8 <startup_task+0x218>)
 80040de:	f7ff fd4b 	bl	8003b78 <homing_sequence>
}
 80040e2:	bf00      	nop
 80040e4:	3708      	adds	r7, #8
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd80      	pop	{r7, pc}
 80040ea:	bf00      	nop
 80040ec:	20009898 	.word	0x20009898
 80040f0:	20009870 	.word	0x20009870
 80040f4:	2000009c 	.word	0x2000009c
 80040f8:	20009cb0 	.word	0x20009cb0
 80040fc:	42480000 	.word	0x42480000
 8004100:	3dcccccd 	.word	0x3dcccccd
 8004104:	41200000 	.word	0x41200000
 8004108:	3eb33333 	.word	0x3eb33333
 800410c:	be8a3d71 	.word	0xbe8a3d71
 8004110:	3e99999a 	.word	0x3e99999a
 8004114:	43160000 	.word	0x43160000
 8004118:	3f4ccccd 	.word	0x3f4ccccd
 800411c:	bf4ccccd 	.word	0xbf4ccccd
 8004120:	20004ed8 	.word	0x20004ed8
 8004124:	20004edc 	.word	0x20004edc

08004128 <err_buzzer>:


void err_buzzer(uint8_t low, uint8_t high)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b084      	sub	sp, #16
 800412c:	af00      	add	r7, sp, #0
 800412e:	4603      	mov	r3, r0
 8004130:	460a      	mov	r2, r1
 8004132:	71fb      	strb	r3, [r7, #7]
 8004134:	4613      	mov	r3, r2
 8004136:	71bb      	strb	r3, [r7, #6]
	for (int8_t i = 0; i < low; i ++)
 8004138:	2300      	movs	r3, #0
 800413a:	73fb      	strb	r3, [r7, #15]
 800413c:	e012      	b.n	8004164 <err_buzzer+0x3c>
	{
		//PWM
		buzzer(LOW_FREQ);
 800413e:	f44f 70dc 	mov.w	r0, #440	; 0x1b8
 8004142:	f7fc feef 	bl	8000f24 <buzzer>
		HAL_Delay(BUZZER_DELAY);
 8004146:	2064      	movs	r0, #100	; 0x64
 8004148:	f000 f8b6 	bl	80042b8 <HAL_Delay>
		buzzer(0);
 800414c:	2000      	movs	r0, #0
 800414e:	f7fc fee9 	bl	8000f24 <buzzer>
		HAL_Delay(BUZZER_DELAY);
 8004152:	2064      	movs	r0, #100	; 0x64
 8004154:	f000 f8b0 	bl	80042b8 <HAL_Delay>
	for (int8_t i = 0; i < low; i ++)
 8004158:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800415c:	b2db      	uxtb	r3, r3
 800415e:	3301      	adds	r3, #1
 8004160:	b2db      	uxtb	r3, r3
 8004162:	73fb      	strb	r3, [r7, #15]
 8004164:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8004168:	79fb      	ldrb	r3, [r7, #7]
 800416a:	429a      	cmp	r2, r3
 800416c:	dbe7      	blt.n	800413e <err_buzzer+0x16>
	}
	for (int8_t i = 0; i < high; i ++)
 800416e:	2300      	movs	r3, #0
 8004170:	73bb      	strb	r3, [r7, #14]
 8004172:	e012      	b.n	800419a <err_buzzer+0x72>
	{
		buzzer(HIGH_FREQ);
 8004174:	f44f 705c 	mov.w	r0, #880	; 0x370
 8004178:	f7fc fed4 	bl	8000f24 <buzzer>
		HAL_Delay(BUZZER_DELAY);
 800417c:	2064      	movs	r0, #100	; 0x64
 800417e:	f000 f89b 	bl	80042b8 <HAL_Delay>
		buzzer(0);
 8004182:	2000      	movs	r0, #0
 8004184:	f7fc fece 	bl	8000f24 <buzzer>
		HAL_Delay(BUZZER_DELAY);
 8004188:	2064      	movs	r0, #100	; 0x64
 800418a:	f000 f895 	bl	80042b8 <HAL_Delay>
	for (int8_t i = 0; i < high; i ++)
 800418e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004192:	b2db      	uxtb	r3, r3
 8004194:	3301      	adds	r3, #1
 8004196:	b2db      	uxtb	r3, r3
 8004198:	73bb      	strb	r3, [r7, #14]
 800419a:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800419e:	79bb      	ldrb	r3, [r7, #6]
 80041a0:	429a      	cmp	r2, r3
 80041a2:	dbe7      	blt.n	8004174 <err_buzzer+0x4c>
	}
}
 80041a4:	bf00      	nop
 80041a6:	bf00      	nop
 80041a8:	3710      	adds	r7, #16
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}

080041ae <ok_buzzer>:

void ok_buzzer(uint8_t high, uint8_t low){
 80041ae:	b580      	push	{r7, lr}
 80041b0:	b084      	sub	sp, #16
 80041b2:	af00      	add	r7, sp, #0
 80041b4:	4603      	mov	r3, r0
 80041b6:	460a      	mov	r2, r1
 80041b8:	71fb      	strb	r3, [r7, #7]
 80041ba:	4613      	mov	r3, r2
 80041bc:	71bb      	strb	r3, [r7, #6]
	for (int8_t i = 0; i < high; i ++)
 80041be:	2300      	movs	r3, #0
 80041c0:	73fb      	strb	r3, [r7, #15]
 80041c2:	e012      	b.n	80041ea <ok_buzzer+0x3c>
	{
		//PWM
		buzzer(HIGH_FREQ);
 80041c4:	f44f 705c 	mov.w	r0, #880	; 0x370
 80041c8:	f7fc feac 	bl	8000f24 <buzzer>
		HAL_Delay(BUZZER_DELAY);
 80041cc:	2064      	movs	r0, #100	; 0x64
 80041ce:	f000 f873 	bl	80042b8 <HAL_Delay>
		buzzer(0);
 80041d2:	2000      	movs	r0, #0
 80041d4:	f7fc fea6 	bl	8000f24 <buzzer>
		HAL_Delay(BUZZER_DELAY);
 80041d8:	2064      	movs	r0, #100	; 0x64
 80041da:	f000 f86d 	bl	80042b8 <HAL_Delay>
	for (int8_t i = 0; i < high; i ++)
 80041de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041e2:	b2db      	uxtb	r3, r3
 80041e4:	3301      	adds	r3, #1
 80041e6:	b2db      	uxtb	r3, r3
 80041e8:	73fb      	strb	r3, [r7, #15]
 80041ea:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80041ee:	79fb      	ldrb	r3, [r7, #7]
 80041f0:	429a      	cmp	r2, r3
 80041f2:	dbe7      	blt.n	80041c4 <ok_buzzer+0x16>
	}
	for (int8_t i = 0; i < low; i ++)
 80041f4:	2300      	movs	r3, #0
 80041f6:	73bb      	strb	r3, [r7, #14]
 80041f8:	e012      	b.n	8004220 <ok_buzzer+0x72>
	{
		buzzer(LOW_FREQ);
 80041fa:	f44f 70dc 	mov.w	r0, #440	; 0x1b8
 80041fe:	f7fc fe91 	bl	8000f24 <buzzer>
		HAL_Delay(BUZZER_DELAY);
 8004202:	2064      	movs	r0, #100	; 0x64
 8004204:	f000 f858 	bl	80042b8 <HAL_Delay>
		buzzer(0);
 8004208:	2000      	movs	r0, #0
 800420a:	f7fc fe8b 	bl	8000f24 <buzzer>
		HAL_Delay(BUZZER_DELAY);
 800420e:	2064      	movs	r0, #100	; 0x64
 8004210:	f000 f852 	bl	80042b8 <HAL_Delay>
	for (int8_t i = 0; i < low; i ++)
 8004214:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004218:	b2db      	uxtb	r3, r3
 800421a:	3301      	adds	r3, #1
 800421c:	b2db      	uxtb	r3, r3
 800421e:	73bb      	strb	r3, [r7, #14]
 8004220:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8004224:	79bb      	ldrb	r3, [r7, #6]
 8004226:	429a      	cmp	r2, r3
 8004228:	dbe7      	blt.n	80041fa <ok_buzzer+0x4c>
	}
}
 800422a:	bf00      	nop
 800422c:	bf00      	nop
 800422e:	3710      	adds	r7, #16
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}

08004234 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004238:	4b0e      	ldr	r3, [pc, #56]	; (8004274 <HAL_Init+0x40>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a0d      	ldr	r2, [pc, #52]	; (8004274 <HAL_Init+0x40>)
 800423e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004242:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004244:	4b0b      	ldr	r3, [pc, #44]	; (8004274 <HAL_Init+0x40>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a0a      	ldr	r2, [pc, #40]	; (8004274 <HAL_Init+0x40>)
 800424a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800424e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004250:	4b08      	ldr	r3, [pc, #32]	; (8004274 <HAL_Init+0x40>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a07      	ldr	r2, [pc, #28]	; (8004274 <HAL_Init+0x40>)
 8004256:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800425a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800425c:	2003      	movs	r0, #3
 800425e:	f000 ff86 	bl	800516e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004262:	2000      	movs	r0, #0
 8004264:	f7fd fc6e 	bl	8001b44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004268:	f7fd fc22 	bl	8001ab0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800426c:	2300      	movs	r3, #0
}
 800426e:	4618      	mov	r0, r3
 8004270:	bd80      	pop	{r7, pc}
 8004272:	bf00      	nop
 8004274:	40023c00 	.word	0x40023c00

08004278 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004278:	b480      	push	{r7}
 800427a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800427c:	4b06      	ldr	r3, [pc, #24]	; (8004298 <HAL_IncTick+0x20>)
 800427e:	781b      	ldrb	r3, [r3, #0]
 8004280:	461a      	mov	r2, r3
 8004282:	4b06      	ldr	r3, [pc, #24]	; (800429c <HAL_IncTick+0x24>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4413      	add	r3, r2
 8004288:	4a04      	ldr	r2, [pc, #16]	; (800429c <HAL_IncTick+0x24>)
 800428a:	6013      	str	r3, [r2, #0]
}
 800428c:	bf00      	nop
 800428e:	46bd      	mov	sp, r7
 8004290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004294:	4770      	bx	lr
 8004296:	bf00      	nop
 8004298:	20000010 	.word	0x20000010
 800429c:	20009ef4 	.word	0x20009ef4

080042a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80042a0:	b480      	push	{r7}
 80042a2:	af00      	add	r7, sp, #0
  return uwTick;
 80042a4:	4b03      	ldr	r3, [pc, #12]	; (80042b4 <HAL_GetTick+0x14>)
 80042a6:	681b      	ldr	r3, [r3, #0]
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	46bd      	mov	sp, r7
 80042ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b0:	4770      	bx	lr
 80042b2:	bf00      	nop
 80042b4:	20009ef4 	.word	0x20009ef4

080042b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b084      	sub	sp, #16
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80042c0:	f7ff ffee 	bl	80042a0 <HAL_GetTick>
 80042c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042d0:	d005      	beq.n	80042de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80042d2:	4b0a      	ldr	r3, [pc, #40]	; (80042fc <HAL_Delay+0x44>)
 80042d4:	781b      	ldrb	r3, [r3, #0]
 80042d6:	461a      	mov	r2, r3
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	4413      	add	r3, r2
 80042dc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80042de:	bf00      	nop
 80042e0:	f7ff ffde 	bl	80042a0 <HAL_GetTick>
 80042e4:	4602      	mov	r2, r0
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	1ad3      	subs	r3, r2, r3
 80042ea:	68fa      	ldr	r2, [r7, #12]
 80042ec:	429a      	cmp	r2, r3
 80042ee:	d8f7      	bhi.n	80042e0 <HAL_Delay+0x28>
  {
  }
}
 80042f0:	bf00      	nop
 80042f2:	bf00      	nop
 80042f4:	3710      	adds	r7, #16
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd80      	pop	{r7, pc}
 80042fa:	bf00      	nop
 80042fc:	20000010 	.word	0x20000010

08004300 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b084      	sub	sp, #16
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d101      	bne.n	8004312 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	e0ed      	b.n	80044ee <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004318:	b2db      	uxtb	r3, r3
 800431a:	2b00      	cmp	r3, #0
 800431c:	d102      	bne.n	8004324 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	f7fc ffba 	bl	8001298 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	681a      	ldr	r2, [r3, #0]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f022 0202 	bic.w	r2, r2, #2
 8004332:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004334:	f7ff ffb4 	bl	80042a0 <HAL_GetTick>
 8004338:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800433a:	e012      	b.n	8004362 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800433c:	f7ff ffb0 	bl	80042a0 <HAL_GetTick>
 8004340:	4602      	mov	r2, r0
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	1ad3      	subs	r3, r2, r3
 8004346:	2b0a      	cmp	r3, #10
 8004348:	d90b      	bls.n	8004362 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800434e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2205      	movs	r2, #5
 800435a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800435e:	2301      	movs	r3, #1
 8004360:	e0c5      	b.n	80044ee <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	f003 0302 	and.w	r3, r3, #2
 800436c:	2b00      	cmp	r3, #0
 800436e:	d1e5      	bne.n	800433c <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	681a      	ldr	r2, [r3, #0]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f042 0201 	orr.w	r2, r2, #1
 800437e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004380:	f7ff ff8e 	bl	80042a0 <HAL_GetTick>
 8004384:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004386:	e012      	b.n	80043ae <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004388:	f7ff ff8a 	bl	80042a0 <HAL_GetTick>
 800438c:	4602      	mov	r2, r0
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	1ad3      	subs	r3, r2, r3
 8004392:	2b0a      	cmp	r3, #10
 8004394:	d90b      	bls.n	80043ae <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800439a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2205      	movs	r2, #5
 80043a6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	e09f      	b.n	80044ee <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	f003 0301 	and.w	r3, r3, #1
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d0e5      	beq.n	8004388 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	7e1b      	ldrb	r3, [r3, #24]
 80043c0:	2b01      	cmp	r3, #1
 80043c2:	d108      	bne.n	80043d6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	681a      	ldr	r2, [r3, #0]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80043d2:	601a      	str	r2, [r3, #0]
 80043d4:	e007      	b.n	80043e6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80043e4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	7e5b      	ldrb	r3, [r3, #25]
 80043ea:	2b01      	cmp	r3, #1
 80043ec:	d108      	bne.n	8004400 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	681a      	ldr	r2, [r3, #0]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80043fc:	601a      	str	r2, [r3, #0]
 80043fe:	e007      	b.n	8004410 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	681a      	ldr	r2, [r3, #0]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800440e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	7e9b      	ldrb	r3, [r3, #26]
 8004414:	2b01      	cmp	r3, #1
 8004416:	d108      	bne.n	800442a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	681a      	ldr	r2, [r3, #0]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f042 0220 	orr.w	r2, r2, #32
 8004426:	601a      	str	r2, [r3, #0]
 8004428:	e007      	b.n	800443a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	681a      	ldr	r2, [r3, #0]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f022 0220 	bic.w	r2, r2, #32
 8004438:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	7edb      	ldrb	r3, [r3, #27]
 800443e:	2b01      	cmp	r3, #1
 8004440:	d108      	bne.n	8004454 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	681a      	ldr	r2, [r3, #0]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f022 0210 	bic.w	r2, r2, #16
 8004450:	601a      	str	r2, [r3, #0]
 8004452:	e007      	b.n	8004464 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f042 0210 	orr.w	r2, r2, #16
 8004462:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	7f1b      	ldrb	r3, [r3, #28]
 8004468:	2b01      	cmp	r3, #1
 800446a:	d108      	bne.n	800447e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	681a      	ldr	r2, [r3, #0]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f042 0208 	orr.w	r2, r2, #8
 800447a:	601a      	str	r2, [r3, #0]
 800447c:	e007      	b.n	800448e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	681a      	ldr	r2, [r3, #0]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f022 0208 	bic.w	r2, r2, #8
 800448c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	7f5b      	ldrb	r3, [r3, #29]
 8004492:	2b01      	cmp	r3, #1
 8004494:	d108      	bne.n	80044a8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f042 0204 	orr.w	r2, r2, #4
 80044a4:	601a      	str	r2, [r3, #0]
 80044a6:	e007      	b.n	80044b8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	681a      	ldr	r2, [r3, #0]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f022 0204 	bic.w	r2, r2, #4
 80044b6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	689a      	ldr	r2, [r3, #8]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	68db      	ldr	r3, [r3, #12]
 80044c0:	431a      	orrs	r2, r3
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	691b      	ldr	r3, [r3, #16]
 80044c6:	431a      	orrs	r2, r3
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	695b      	ldr	r3, [r3, #20]
 80044cc:	ea42 0103 	orr.w	r1, r2, r3
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	1e5a      	subs	r2, r3, #1
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	430a      	orrs	r2, r1
 80044dc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2200      	movs	r2, #0
 80044e2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2201      	movs	r2, #1
 80044e8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80044ec:	2300      	movs	r3, #0
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	3710      	adds	r7, #16
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}
	...

080044f8 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b087      	sub	sp, #28
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
 8004500:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800450e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8004510:	7cfb      	ldrb	r3, [r7, #19]
 8004512:	2b01      	cmp	r3, #1
 8004514:	d003      	beq.n	800451e <HAL_CAN_ConfigFilter+0x26>
 8004516:	7cfb      	ldrb	r3, [r7, #19]
 8004518:	2b02      	cmp	r3, #2
 800451a:	f040 80be 	bne.w	800469a <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800451e:	4b65      	ldr	r3, [pc, #404]	; (80046b4 <HAL_CAN_ConfigFilter+0x1bc>)
 8004520:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004528:	f043 0201 	orr.w	r2, r3, #1
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004538:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800454c:	021b      	lsls	r3, r3, #8
 800454e:	431a      	orrs	r2, r3
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	695b      	ldr	r3, [r3, #20]
 800455a:	f003 031f 	and.w	r3, r3, #31
 800455e:	2201      	movs	r2, #1
 8004560:	fa02 f303 	lsl.w	r3, r2, r3
 8004564:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	43db      	mvns	r3, r3
 8004570:	401a      	ands	r2, r3
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	69db      	ldr	r3, [r3, #28]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d123      	bne.n	80045c8 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	43db      	mvns	r3, r3
 800458a:	401a      	ands	r2, r3
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	68db      	ldr	r3, [r3, #12]
 8004596:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800459e:	683a      	ldr	r2, [r7, #0]
 80045a0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80045a2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	3248      	adds	r2, #72	; 0x48
 80045a8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80045bc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80045be:	6979      	ldr	r1, [r7, #20]
 80045c0:	3348      	adds	r3, #72	; 0x48
 80045c2:	00db      	lsls	r3, r3, #3
 80045c4:	440b      	add	r3, r1
 80045c6:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	69db      	ldr	r3, [r3, #28]
 80045cc:	2b01      	cmp	r3, #1
 80045ce:	d122      	bne.n	8004616 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	431a      	orrs	r2, r3
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80045ec:	683a      	ldr	r2, [r7, #0]
 80045ee:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80045f0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	3248      	adds	r2, #72	; 0x48
 80045f6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	689b      	ldr	r3, [r3, #8]
 80045fe:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	68db      	ldr	r3, [r3, #12]
 8004604:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800460a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800460c:	6979      	ldr	r1, [r7, #20]
 800460e:	3348      	adds	r3, #72	; 0x48
 8004610:	00db      	lsls	r3, r3, #3
 8004612:	440b      	add	r3, r1
 8004614:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	699b      	ldr	r3, [r3, #24]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d109      	bne.n	8004632 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	43db      	mvns	r3, r3
 8004628:	401a      	ands	r2, r3
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8004630:	e007      	b.n	8004642 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	431a      	orrs	r2, r3
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	691b      	ldr	r3, [r3, #16]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d109      	bne.n	800465e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	43db      	mvns	r3, r3
 8004654:	401a      	ands	r2, r3
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800465c:	e007      	b.n	800466e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	431a      	orrs	r2, r3
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	6a1b      	ldr	r3, [r3, #32]
 8004672:	2b01      	cmp	r3, #1
 8004674:	d107      	bne.n	8004686 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	431a      	orrs	r2, r3
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800468c:	f023 0201 	bic.w	r2, r3, #1
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8004696:	2300      	movs	r3, #0
 8004698:	e006      	b.n	80046a8 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800469e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80046a6:	2301      	movs	r3, #1
  }
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	371c      	adds	r7, #28
 80046ac:	46bd      	mov	sp, r7
 80046ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b2:	4770      	bx	lr
 80046b4:	40006400 	.word	0x40006400

080046b8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b084      	sub	sp, #16
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80046c6:	b2db      	uxtb	r3, r3
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	d12e      	bne.n	800472a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2202      	movs	r2, #2
 80046d0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	681a      	ldr	r2, [r3, #0]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f022 0201 	bic.w	r2, r2, #1
 80046e2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80046e4:	f7ff fddc 	bl	80042a0 <HAL_GetTick>
 80046e8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80046ea:	e012      	b.n	8004712 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80046ec:	f7ff fdd8 	bl	80042a0 <HAL_GetTick>
 80046f0:	4602      	mov	r2, r0
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	1ad3      	subs	r3, r2, r3
 80046f6:	2b0a      	cmp	r3, #10
 80046f8:	d90b      	bls.n	8004712 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046fe:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2205      	movs	r2, #5
 800470a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800470e:	2301      	movs	r3, #1
 8004710:	e012      	b.n	8004738 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	f003 0301 	and.w	r3, r3, #1
 800471c:	2b00      	cmp	r3, #0
 800471e:	d1e5      	bne.n	80046ec <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2200      	movs	r2, #0
 8004724:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8004726:	2300      	movs	r3, #0
 8004728:	e006      	b.n	8004738 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800472e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004736:	2301      	movs	r3, #1
  }
}
 8004738:	4618      	mov	r0, r3
 800473a:	3710      	adds	r7, #16
 800473c:	46bd      	mov	sp, r7
 800473e:	bd80      	pop	{r7, pc}

08004740 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8004740:	b480      	push	{r7}
 8004742:	b089      	sub	sp, #36	; 0x24
 8004744:	af00      	add	r7, sp, #0
 8004746:	60f8      	str	r0, [r7, #12]
 8004748:	60b9      	str	r1, [r7, #8]
 800474a:	607a      	str	r2, [r7, #4]
 800474c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004754:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800475e:	7ffb      	ldrb	r3, [r7, #31]
 8004760:	2b01      	cmp	r3, #1
 8004762:	d003      	beq.n	800476c <HAL_CAN_AddTxMessage+0x2c>
 8004764:	7ffb      	ldrb	r3, [r7, #31]
 8004766:	2b02      	cmp	r3, #2
 8004768:	f040 80b8 	bne.w	80048dc <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800476c:	69bb      	ldr	r3, [r7, #24]
 800476e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004772:	2b00      	cmp	r3, #0
 8004774:	d10a      	bne.n	800478c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004776:	69bb      	ldr	r3, [r7, #24]
 8004778:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800477c:	2b00      	cmp	r3, #0
 800477e:	d105      	bne.n	800478c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8004780:	69bb      	ldr	r3, [r7, #24]
 8004782:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004786:	2b00      	cmp	r3, #0
 8004788:	f000 80a0 	beq.w	80048cc <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800478c:	69bb      	ldr	r3, [r7, #24]
 800478e:	0e1b      	lsrs	r3, r3, #24
 8004790:	f003 0303 	and.w	r3, r3, #3
 8004794:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	2b02      	cmp	r3, #2
 800479a:	d907      	bls.n	80047ac <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80047a8:	2301      	movs	r3, #1
 80047aa:	e09e      	b.n	80048ea <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80047ac:	2201      	movs	r2, #1
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	409a      	lsls	r2, r3
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	689b      	ldr	r3, [r3, #8]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d10d      	bne.n	80047da <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80047c8:	68f9      	ldr	r1, [r7, #12]
 80047ca:	6809      	ldr	r1, [r1, #0]
 80047cc:	431a      	orrs	r2, r3
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	3318      	adds	r3, #24
 80047d2:	011b      	lsls	r3, r3, #4
 80047d4:	440b      	add	r3, r1
 80047d6:	601a      	str	r2, [r3, #0]
 80047d8:	e00f      	b.n	80047fa <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80047e4:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80047ea:	68f9      	ldr	r1, [r7, #12]
 80047ec:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80047ee:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80047f0:	697b      	ldr	r3, [r7, #20]
 80047f2:	3318      	adds	r3, #24
 80047f4:	011b      	lsls	r3, r3, #4
 80047f6:	440b      	add	r3, r1
 80047f8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	6819      	ldr	r1, [r3, #0]
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	691a      	ldr	r2, [r3, #16]
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	3318      	adds	r3, #24
 8004806:	011b      	lsls	r3, r3, #4
 8004808:	440b      	add	r3, r1
 800480a:	3304      	adds	r3, #4
 800480c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	7d1b      	ldrb	r3, [r3, #20]
 8004812:	2b01      	cmp	r3, #1
 8004814:	d111      	bne.n	800483a <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681a      	ldr	r2, [r3, #0]
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	3318      	adds	r3, #24
 800481e:	011b      	lsls	r3, r3, #4
 8004820:	4413      	add	r3, r2
 8004822:	3304      	adds	r3, #4
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	68fa      	ldr	r2, [r7, #12]
 8004828:	6811      	ldr	r1, [r2, #0]
 800482a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	3318      	adds	r3, #24
 8004832:	011b      	lsls	r3, r3, #4
 8004834:	440b      	add	r3, r1
 8004836:	3304      	adds	r3, #4
 8004838:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	3307      	adds	r3, #7
 800483e:	781b      	ldrb	r3, [r3, #0]
 8004840:	061a      	lsls	r2, r3, #24
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	3306      	adds	r3, #6
 8004846:	781b      	ldrb	r3, [r3, #0]
 8004848:	041b      	lsls	r3, r3, #16
 800484a:	431a      	orrs	r2, r3
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	3305      	adds	r3, #5
 8004850:	781b      	ldrb	r3, [r3, #0]
 8004852:	021b      	lsls	r3, r3, #8
 8004854:	4313      	orrs	r3, r2
 8004856:	687a      	ldr	r2, [r7, #4]
 8004858:	3204      	adds	r2, #4
 800485a:	7812      	ldrb	r2, [r2, #0]
 800485c:	4610      	mov	r0, r2
 800485e:	68fa      	ldr	r2, [r7, #12]
 8004860:	6811      	ldr	r1, [r2, #0]
 8004862:	ea43 0200 	orr.w	r2, r3, r0
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	011b      	lsls	r3, r3, #4
 800486a:	440b      	add	r3, r1
 800486c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8004870:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	3303      	adds	r3, #3
 8004876:	781b      	ldrb	r3, [r3, #0]
 8004878:	061a      	lsls	r2, r3, #24
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	3302      	adds	r3, #2
 800487e:	781b      	ldrb	r3, [r3, #0]
 8004880:	041b      	lsls	r3, r3, #16
 8004882:	431a      	orrs	r2, r3
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	3301      	adds	r3, #1
 8004888:	781b      	ldrb	r3, [r3, #0]
 800488a:	021b      	lsls	r3, r3, #8
 800488c:	4313      	orrs	r3, r2
 800488e:	687a      	ldr	r2, [r7, #4]
 8004890:	7812      	ldrb	r2, [r2, #0]
 8004892:	4610      	mov	r0, r2
 8004894:	68fa      	ldr	r2, [r7, #12]
 8004896:	6811      	ldr	r1, [r2, #0]
 8004898:	ea43 0200 	orr.w	r2, r3, r0
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	011b      	lsls	r3, r3, #4
 80048a0:	440b      	add	r3, r1
 80048a2:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80048a6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681a      	ldr	r2, [r3, #0]
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	3318      	adds	r3, #24
 80048b0:	011b      	lsls	r3, r3, #4
 80048b2:	4413      	add	r3, r2
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	68fa      	ldr	r2, [r7, #12]
 80048b8:	6811      	ldr	r1, [r2, #0]
 80048ba:	f043 0201 	orr.w	r2, r3, #1
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	3318      	adds	r3, #24
 80048c2:	011b      	lsls	r3, r3, #4
 80048c4:	440b      	add	r3, r1
 80048c6:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80048c8:	2300      	movs	r3, #0
 80048ca:	e00e      	b.n	80048ea <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80048d8:	2301      	movs	r3, #1
 80048da:	e006      	b.n	80048ea <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80048e8:	2301      	movs	r3, #1
  }
}
 80048ea:	4618      	mov	r0, r3
 80048ec:	3724      	adds	r7, #36	; 0x24
 80048ee:	46bd      	mov	sp, r7
 80048f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f4:	4770      	bx	lr

080048f6 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80048f6:	b480      	push	{r7}
 80048f8:	b087      	sub	sp, #28
 80048fa:	af00      	add	r7, sp, #0
 80048fc:	60f8      	str	r0, [r7, #12]
 80048fe:	60b9      	str	r1, [r7, #8]
 8004900:	607a      	str	r2, [r7, #4]
 8004902:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	f893 3020 	ldrb.w	r3, [r3, #32]
 800490a:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800490c:	7dfb      	ldrb	r3, [r7, #23]
 800490e:	2b01      	cmp	r3, #1
 8004910:	d003      	beq.n	800491a <HAL_CAN_GetRxMessage+0x24>
 8004912:	7dfb      	ldrb	r3, [r7, #23]
 8004914:	2b02      	cmp	r3, #2
 8004916:	f040 80f3 	bne.w	8004b00 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d10e      	bne.n	800493e <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	68db      	ldr	r3, [r3, #12]
 8004926:	f003 0303 	and.w	r3, r3, #3
 800492a:	2b00      	cmp	r3, #0
 800492c:	d116      	bne.n	800495c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004932:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	e0e7      	b.n	8004b0e <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	691b      	ldr	r3, [r3, #16]
 8004944:	f003 0303 	and.w	r3, r3, #3
 8004948:	2b00      	cmp	r3, #0
 800494a:	d107      	bne.n	800495c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004950:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004958:	2301      	movs	r3, #1
 800495a:	e0d8      	b.n	8004b0e <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	331b      	adds	r3, #27
 8004964:	011b      	lsls	r3, r3, #4
 8004966:	4413      	add	r3, r2
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f003 0204 	and.w	r2, r3, #4
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	689b      	ldr	r3, [r3, #8]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d10c      	bne.n	8004994 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681a      	ldr	r2, [r3, #0]
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	331b      	adds	r3, #27
 8004982:	011b      	lsls	r3, r3, #4
 8004984:	4413      	add	r3, r2
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	0d5b      	lsrs	r3, r3, #21
 800498a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	601a      	str	r2, [r3, #0]
 8004992:	e00b      	b.n	80049ac <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	331b      	adds	r3, #27
 800499c:	011b      	lsls	r3, r3, #4
 800499e:	4413      	add	r3, r2
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	08db      	lsrs	r3, r3, #3
 80049a4:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681a      	ldr	r2, [r3, #0]
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	331b      	adds	r3, #27
 80049b4:	011b      	lsls	r3, r3, #4
 80049b6:	4413      	add	r3, r2
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f003 0202 	and.w	r2, r3, #2
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681a      	ldr	r2, [r3, #0]
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	331b      	adds	r3, #27
 80049ca:	011b      	lsls	r3, r3, #4
 80049cc:	4413      	add	r3, r2
 80049ce:	3304      	adds	r3, #4
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f003 020f 	and.w	r2, r3, #15
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681a      	ldr	r2, [r3, #0]
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	331b      	adds	r3, #27
 80049e2:	011b      	lsls	r3, r3, #4
 80049e4:	4413      	add	r3, r2
 80049e6:	3304      	adds	r3, #4
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	0a1b      	lsrs	r3, r3, #8
 80049ec:	b2da      	uxtb	r2, r3
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681a      	ldr	r2, [r3, #0]
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	331b      	adds	r3, #27
 80049fa:	011b      	lsls	r3, r3, #4
 80049fc:	4413      	add	r3, r2
 80049fe:	3304      	adds	r3, #4
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	0c1b      	lsrs	r3, r3, #16
 8004a04:	b29a      	uxth	r2, r3
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681a      	ldr	r2, [r3, #0]
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	011b      	lsls	r3, r3, #4
 8004a12:	4413      	add	r3, r2
 8004a14:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	b2da      	uxtb	r2, r3
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681a      	ldr	r2, [r3, #0]
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	011b      	lsls	r3, r3, #4
 8004a28:	4413      	add	r3, r2
 8004a2a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	0a1a      	lsrs	r2, r3, #8
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	3301      	adds	r3, #1
 8004a36:	b2d2      	uxtb	r2, r2
 8004a38:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	011b      	lsls	r3, r3, #4
 8004a42:	4413      	add	r3, r2
 8004a44:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	0c1a      	lsrs	r2, r3, #16
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	3302      	adds	r3, #2
 8004a50:	b2d2      	uxtb	r2, r2
 8004a52:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681a      	ldr	r2, [r3, #0]
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	011b      	lsls	r3, r3, #4
 8004a5c:	4413      	add	r3, r2
 8004a5e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	0e1a      	lsrs	r2, r3, #24
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	3303      	adds	r3, #3
 8004a6a:	b2d2      	uxtb	r2, r2
 8004a6c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681a      	ldr	r2, [r3, #0]
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	011b      	lsls	r3, r3, #4
 8004a76:	4413      	add	r3, r2
 8004a78:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004a7c:	681a      	ldr	r2, [r3, #0]
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	3304      	adds	r3, #4
 8004a82:	b2d2      	uxtb	r2, r2
 8004a84:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	011b      	lsls	r3, r3, #4
 8004a8e:	4413      	add	r3, r2
 8004a90:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	0a1a      	lsrs	r2, r3, #8
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	3305      	adds	r3, #5
 8004a9c:	b2d2      	uxtb	r2, r2
 8004a9e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681a      	ldr	r2, [r3, #0]
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	011b      	lsls	r3, r3, #4
 8004aa8:	4413      	add	r3, r2
 8004aaa:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	0c1a      	lsrs	r2, r3, #16
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	3306      	adds	r3, #6
 8004ab6:	b2d2      	uxtb	r2, r2
 8004ab8:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681a      	ldr	r2, [r3, #0]
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	011b      	lsls	r3, r3, #4
 8004ac2:	4413      	add	r3, r2
 8004ac4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	0e1a      	lsrs	r2, r3, #24
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	3307      	adds	r3, #7
 8004ad0:	b2d2      	uxtb	r2, r2
 8004ad2:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d108      	bne.n	8004aec <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	68da      	ldr	r2, [r3, #12]
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f042 0220 	orr.w	r2, r2, #32
 8004ae8:	60da      	str	r2, [r3, #12]
 8004aea:	e007      	b.n	8004afc <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	691a      	ldr	r2, [r3, #16]
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f042 0220 	orr.w	r2, r2, #32
 8004afa:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8004afc:	2300      	movs	r3, #0
 8004afe:	e006      	b.n	8004b0e <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b04:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004b0c:	2301      	movs	r3, #1
  }
}
 8004b0e:	4618      	mov	r0, r3
 8004b10:	371c      	adds	r7, #28
 8004b12:	46bd      	mov	sp, r7
 8004b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b18:	4770      	bx	lr

08004b1a <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8004b1a:	b480      	push	{r7}
 8004b1c:	b085      	sub	sp, #20
 8004b1e:	af00      	add	r7, sp, #0
 8004b20:	6078      	str	r0, [r7, #4]
 8004b22:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004b2a:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8004b2c:	7bfb      	ldrb	r3, [r7, #15]
 8004b2e:	2b01      	cmp	r3, #1
 8004b30:	d002      	beq.n	8004b38 <HAL_CAN_ActivateNotification+0x1e>
 8004b32:	7bfb      	ldrb	r3, [r7, #15]
 8004b34:	2b02      	cmp	r3, #2
 8004b36:	d109      	bne.n	8004b4c <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	6959      	ldr	r1, [r3, #20]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	683a      	ldr	r2, [r7, #0]
 8004b44:	430a      	orrs	r2, r1
 8004b46:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8004b48:	2300      	movs	r3, #0
 8004b4a:	e006      	b.n	8004b5a <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b50:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004b58:	2301      	movs	r3, #1
  }
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	3714      	adds	r7, #20
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b64:	4770      	bx	lr

08004b66 <HAL_CAN_DeactivateNotification>:
  * @param  InactiveITs indicates which interrupts will be disabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_DeactivateNotification(CAN_HandleTypeDef *hcan, uint32_t InactiveITs)
{
 8004b66:	b480      	push	{r7}
 8004b68:	b085      	sub	sp, #20
 8004b6a:	af00      	add	r7, sp, #0
 8004b6c:	6078      	str	r0, [r7, #4]
 8004b6e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004b76:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(InactiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8004b78:	7bfb      	ldrb	r3, [r7, #15]
 8004b7a:	2b01      	cmp	r3, #1
 8004b7c:	d002      	beq.n	8004b84 <HAL_CAN_DeactivateNotification+0x1e>
 8004b7e:	7bfb      	ldrb	r3, [r7, #15]
 8004b80:	2b02      	cmp	r3, #2
 8004b82:	d10a      	bne.n	8004b9a <HAL_CAN_DeactivateNotification+0x34>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Disable the selected interrupts */
    __HAL_CAN_DISABLE_IT(hcan, InactiveITs);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	6959      	ldr	r1, [r3, #20]
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	43da      	mvns	r2, r3
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	400a      	ands	r2, r1
 8004b94:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8004b96:	2300      	movs	r3, #0
 8004b98:	e006      	b.n	8004ba8 <HAL_CAN_DeactivateNotification+0x42>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b9e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004ba6:	2301      	movs	r3, #1
  }
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	3714      	adds	r7, #20
 8004bac:	46bd      	mov	sp, r7
 8004bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb2:	4770      	bx	lr

08004bb4 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b08a      	sub	sp, #40	; 0x28
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	695b      	ldr	r3, [r3, #20]
 8004bc6:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	689b      	ldr	r3, [r3, #8]
 8004bd6:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	68db      	ldr	r3, [r3, #12]
 8004bde:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	691b      	ldr	r3, [r3, #16]
 8004be6:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	699b      	ldr	r3, [r3, #24]
 8004bee:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8004bf0:	6a3b      	ldr	r3, [r7, #32]
 8004bf2:	f003 0301 	and.w	r3, r3, #1
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d07c      	beq.n	8004cf4 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8004bfa:	69bb      	ldr	r3, [r7, #24]
 8004bfc:	f003 0301 	and.w	r3, r3, #1
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d023      	beq.n	8004c4c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	2201      	movs	r2, #1
 8004c0a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8004c0c:	69bb      	ldr	r3, [r7, #24]
 8004c0e:	f003 0302 	and.w	r3, r3, #2
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d003      	beq.n	8004c1e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8004c16:	6878      	ldr	r0, [r7, #4]
 8004c18:	f000 f983 	bl	8004f22 <HAL_CAN_TxMailbox0CompleteCallback>
 8004c1c:	e016      	b.n	8004c4c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8004c1e:	69bb      	ldr	r3, [r7, #24]
 8004c20:	f003 0304 	and.w	r3, r3, #4
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d004      	beq.n	8004c32 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8004c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c2a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004c2e:	627b      	str	r3, [r7, #36]	; 0x24
 8004c30:	e00c      	b.n	8004c4c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8004c32:	69bb      	ldr	r3, [r7, #24]
 8004c34:	f003 0308 	and.w	r3, r3, #8
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d004      	beq.n	8004c46 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8004c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c3e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004c42:	627b      	str	r3, [r7, #36]	; 0x24
 8004c44:	e002      	b.n	8004c4c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f000 f989 	bl	8004f5e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8004c4c:	69bb      	ldr	r3, [r7, #24]
 8004c4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d024      	beq.n	8004ca0 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004c5e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8004c60:	69bb      	ldr	r3, [r7, #24]
 8004c62:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d003      	beq.n	8004c72 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f000 f963 	bl	8004f36 <HAL_CAN_TxMailbox1CompleteCallback>
 8004c70:	e016      	b.n	8004ca0 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8004c72:	69bb      	ldr	r3, [r7, #24]
 8004c74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d004      	beq.n	8004c86 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8004c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c7e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004c82:	627b      	str	r3, [r7, #36]	; 0x24
 8004c84:	e00c      	b.n	8004ca0 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8004c86:	69bb      	ldr	r3, [r7, #24]
 8004c88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d004      	beq.n	8004c9a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8004c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c92:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004c96:	627b      	str	r3, [r7, #36]	; 0x24
 8004c98:	e002      	b.n	8004ca0 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	f000 f969 	bl	8004f72 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8004ca0:	69bb      	ldr	r3, [r7, #24]
 8004ca2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d024      	beq.n	8004cf4 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004cb2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8004cb4:	69bb      	ldr	r3, [r7, #24]
 8004cb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d003      	beq.n	8004cc6 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	f000 f943 	bl	8004f4a <HAL_CAN_TxMailbox2CompleteCallback>
 8004cc4:	e016      	b.n	8004cf4 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8004cc6:	69bb      	ldr	r3, [r7, #24]
 8004cc8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d004      	beq.n	8004cda <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8004cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cd6:	627b      	str	r3, [r7, #36]	; 0x24
 8004cd8:	e00c      	b.n	8004cf4 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8004cda:	69bb      	ldr	r3, [r7, #24]
 8004cdc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d004      	beq.n	8004cee <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8004ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cea:	627b      	str	r3, [r7, #36]	; 0x24
 8004cec:	e002      	b.n	8004cf4 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f000 f949 	bl	8004f86 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8004cf4:	6a3b      	ldr	r3, [r7, #32]
 8004cf6:	f003 0308 	and.w	r3, r3, #8
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d00c      	beq.n	8004d18 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8004cfe:	697b      	ldr	r3, [r7, #20]
 8004d00:	f003 0310 	and.w	r3, r3, #16
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d007      	beq.n	8004d18 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8004d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004d0e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	2210      	movs	r2, #16
 8004d16:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8004d18:	6a3b      	ldr	r3, [r7, #32]
 8004d1a:	f003 0304 	and.w	r3, r3, #4
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d00b      	beq.n	8004d3a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	f003 0308 	and.w	r3, r3, #8
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d006      	beq.n	8004d3a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	2208      	movs	r2, #8
 8004d32:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8004d34:	6878      	ldr	r0, [r7, #4]
 8004d36:	f000 f930 	bl	8004f9a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8004d3a:	6a3b      	ldr	r3, [r7, #32]
 8004d3c:	f003 0302 	and.w	r3, r3, #2
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d009      	beq.n	8004d58 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	68db      	ldr	r3, [r3, #12]
 8004d4a:	f003 0303 	and.w	r3, r3, #3
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d002      	beq.n	8004d58 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8004d52:	6878      	ldr	r0, [r7, #4]
 8004d54:	f7fc f916 	bl	8000f84 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8004d58:	6a3b      	ldr	r3, [r7, #32]
 8004d5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d00c      	beq.n	8004d7c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	f003 0310 	and.w	r3, r3, #16
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d007      	beq.n	8004d7c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8004d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d6e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004d72:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	2210      	movs	r2, #16
 8004d7a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8004d7c:	6a3b      	ldr	r3, [r7, #32]
 8004d7e:	f003 0320 	and.w	r3, r3, #32
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d00b      	beq.n	8004d9e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	f003 0308 	and.w	r3, r3, #8
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d006      	beq.n	8004d9e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	2208      	movs	r2, #8
 8004d96:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8004d98:	6878      	ldr	r0, [r7, #4]
 8004d9a:	f000 f912 	bl	8004fc2 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8004d9e:	6a3b      	ldr	r3, [r7, #32]
 8004da0:	f003 0310 	and.w	r3, r3, #16
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d009      	beq.n	8004dbc <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	691b      	ldr	r3, [r3, #16]
 8004dae:	f003 0303 	and.w	r3, r3, #3
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d002      	beq.n	8004dbc <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	f000 f8f9 	bl	8004fae <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8004dbc:	6a3b      	ldr	r3, [r7, #32]
 8004dbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d00b      	beq.n	8004dde <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8004dc6:	69fb      	ldr	r3, [r7, #28]
 8004dc8:	f003 0310 	and.w	r3, r3, #16
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d006      	beq.n	8004dde <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	2210      	movs	r2, #16
 8004dd6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8004dd8:	6878      	ldr	r0, [r7, #4]
 8004dda:	f000 f8fc 	bl	8004fd6 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8004dde:	6a3b      	ldr	r3, [r7, #32]
 8004de0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d00b      	beq.n	8004e00 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8004de8:	69fb      	ldr	r3, [r7, #28]
 8004dea:	f003 0308 	and.w	r3, r3, #8
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d006      	beq.n	8004e00 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	2208      	movs	r2, #8
 8004df8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f000 f8f5 	bl	8004fea <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8004e00:	6a3b      	ldr	r3, [r7, #32]
 8004e02:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d07b      	beq.n	8004f02 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8004e0a:	69fb      	ldr	r3, [r7, #28]
 8004e0c:	f003 0304 	and.w	r3, r3, #4
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d072      	beq.n	8004efa <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004e14:	6a3b      	ldr	r3, [r7, #32]
 8004e16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d008      	beq.n	8004e30 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d003      	beq.n	8004e30 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8004e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e2a:	f043 0301 	orr.w	r3, r3, #1
 8004e2e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004e30:	6a3b      	ldr	r3, [r7, #32]
 8004e32:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d008      	beq.n	8004e4c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d003      	beq.n	8004e4c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8004e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e46:	f043 0302 	orr.w	r3, r3, #2
 8004e4a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004e4c:	6a3b      	ldr	r3, [r7, #32]
 8004e4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d008      	beq.n	8004e68 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d003      	beq.n	8004e68 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8004e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e62:	f043 0304 	orr.w	r3, r3, #4
 8004e66:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004e68:	6a3b      	ldr	r3, [r7, #32]
 8004e6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d043      	beq.n	8004efa <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d03e      	beq.n	8004efa <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004e82:	2b60      	cmp	r3, #96	; 0x60
 8004e84:	d02b      	beq.n	8004ede <HAL_CAN_IRQHandler+0x32a>
 8004e86:	2b60      	cmp	r3, #96	; 0x60
 8004e88:	d82e      	bhi.n	8004ee8 <HAL_CAN_IRQHandler+0x334>
 8004e8a:	2b50      	cmp	r3, #80	; 0x50
 8004e8c:	d022      	beq.n	8004ed4 <HAL_CAN_IRQHandler+0x320>
 8004e8e:	2b50      	cmp	r3, #80	; 0x50
 8004e90:	d82a      	bhi.n	8004ee8 <HAL_CAN_IRQHandler+0x334>
 8004e92:	2b40      	cmp	r3, #64	; 0x40
 8004e94:	d019      	beq.n	8004eca <HAL_CAN_IRQHandler+0x316>
 8004e96:	2b40      	cmp	r3, #64	; 0x40
 8004e98:	d826      	bhi.n	8004ee8 <HAL_CAN_IRQHandler+0x334>
 8004e9a:	2b30      	cmp	r3, #48	; 0x30
 8004e9c:	d010      	beq.n	8004ec0 <HAL_CAN_IRQHandler+0x30c>
 8004e9e:	2b30      	cmp	r3, #48	; 0x30
 8004ea0:	d822      	bhi.n	8004ee8 <HAL_CAN_IRQHandler+0x334>
 8004ea2:	2b10      	cmp	r3, #16
 8004ea4:	d002      	beq.n	8004eac <HAL_CAN_IRQHandler+0x2f8>
 8004ea6:	2b20      	cmp	r3, #32
 8004ea8:	d005      	beq.n	8004eb6 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8004eaa:	e01d      	b.n	8004ee8 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8004eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eae:	f043 0308 	orr.w	r3, r3, #8
 8004eb2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004eb4:	e019      	b.n	8004eea <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8004eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb8:	f043 0310 	orr.w	r3, r3, #16
 8004ebc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004ebe:	e014      	b.n	8004eea <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8004ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec2:	f043 0320 	orr.w	r3, r3, #32
 8004ec6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004ec8:	e00f      	b.n	8004eea <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8004eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ecc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ed0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004ed2:	e00a      	b.n	8004eea <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8004ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004eda:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004edc:	e005      	b.n	8004eea <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8004ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ee4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004ee6:	e000      	b.n	8004eea <HAL_CAN_IRQHandler+0x336>
            break;
 8004ee8:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	699a      	ldr	r2, [r3, #24]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004ef8:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	2204      	movs	r2, #4
 8004f00:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8004f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d008      	beq.n	8004f1a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f0e:	431a      	orrs	r2, r3
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8004f14:	6878      	ldr	r0, [r7, #4]
 8004f16:	f000 f872 	bl	8004ffe <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8004f1a:	bf00      	nop
 8004f1c:	3728      	adds	r7, #40	; 0x28
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}

08004f22 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004f22:	b480      	push	{r7}
 8004f24:	b083      	sub	sp, #12
 8004f26:	af00      	add	r7, sp, #0
 8004f28:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8004f2a:	bf00      	nop
 8004f2c:	370c      	adds	r7, #12
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f34:	4770      	bx	lr

08004f36 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004f36:	b480      	push	{r7}
 8004f38:	b083      	sub	sp, #12
 8004f3a:	af00      	add	r7, sp, #0
 8004f3c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8004f3e:	bf00      	nop
 8004f40:	370c      	adds	r7, #12
 8004f42:	46bd      	mov	sp, r7
 8004f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f48:	4770      	bx	lr

08004f4a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004f4a:	b480      	push	{r7}
 8004f4c:	b083      	sub	sp, #12
 8004f4e:	af00      	add	r7, sp, #0
 8004f50:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8004f52:	bf00      	nop
 8004f54:	370c      	adds	r7, #12
 8004f56:	46bd      	mov	sp, r7
 8004f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5c:	4770      	bx	lr

08004f5e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004f5e:	b480      	push	{r7}
 8004f60:	b083      	sub	sp, #12
 8004f62:	af00      	add	r7, sp, #0
 8004f64:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8004f66:	bf00      	nop
 8004f68:	370c      	adds	r7, #12
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f70:	4770      	bx	lr

08004f72 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004f72:	b480      	push	{r7}
 8004f74:	b083      	sub	sp, #12
 8004f76:	af00      	add	r7, sp, #0
 8004f78:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8004f7a:	bf00      	nop
 8004f7c:	370c      	adds	r7, #12
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f84:	4770      	bx	lr

08004f86 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004f86:	b480      	push	{r7}
 8004f88:	b083      	sub	sp, #12
 8004f8a:	af00      	add	r7, sp, #0
 8004f8c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8004f8e:	bf00      	nop
 8004f90:	370c      	adds	r7, #12
 8004f92:	46bd      	mov	sp, r7
 8004f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f98:	4770      	bx	lr

08004f9a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004f9a:	b480      	push	{r7}
 8004f9c:	b083      	sub	sp, #12
 8004f9e:	af00      	add	r7, sp, #0
 8004fa0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8004fa2:	bf00      	nop
 8004fa4:	370c      	adds	r7, #12
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fac:	4770      	bx	lr

08004fae <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004fae:	b480      	push	{r7}
 8004fb0:	b083      	sub	sp, #12
 8004fb2:	af00      	add	r7, sp, #0
 8004fb4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8004fb6:	bf00      	nop
 8004fb8:	370c      	adds	r7, #12
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc0:	4770      	bx	lr

08004fc2 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8004fc2:	b480      	push	{r7}
 8004fc4:	b083      	sub	sp, #12
 8004fc6:	af00      	add	r7, sp, #0
 8004fc8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004fca:	bf00      	nop
 8004fcc:	370c      	adds	r7, #12
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd4:	4770      	bx	lr

08004fd6 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8004fd6:	b480      	push	{r7}
 8004fd8:	b083      	sub	sp, #12
 8004fda:	af00      	add	r7, sp, #0
 8004fdc:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8004fde:	bf00      	nop
 8004fe0:	370c      	adds	r7, #12
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe8:	4770      	bx	lr

08004fea <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8004fea:	b480      	push	{r7}
 8004fec:	b083      	sub	sp, #12
 8004fee:	af00      	add	r7, sp, #0
 8004ff0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8004ff2:	bf00      	nop
 8004ff4:	370c      	adds	r7, #12
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffc:	4770      	bx	lr

08004ffe <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8004ffe:	b480      	push	{r7}
 8005000:	b083      	sub	sp, #12
 8005002:	af00      	add	r7, sp, #0
 8005004:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8005006:	bf00      	nop
 8005008:	370c      	adds	r7, #12
 800500a:	46bd      	mov	sp, r7
 800500c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005010:	4770      	bx	lr
	...

08005014 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005014:	b480      	push	{r7}
 8005016:	b085      	sub	sp, #20
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	f003 0307 	and.w	r3, r3, #7
 8005022:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005024:	4b0c      	ldr	r3, [pc, #48]	; (8005058 <__NVIC_SetPriorityGrouping+0x44>)
 8005026:	68db      	ldr	r3, [r3, #12]
 8005028:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800502a:	68ba      	ldr	r2, [r7, #8]
 800502c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005030:	4013      	ands	r3, r2
 8005032:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800503c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005040:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005044:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005046:	4a04      	ldr	r2, [pc, #16]	; (8005058 <__NVIC_SetPriorityGrouping+0x44>)
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	60d3      	str	r3, [r2, #12]
}
 800504c:	bf00      	nop
 800504e:	3714      	adds	r7, #20
 8005050:	46bd      	mov	sp, r7
 8005052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005056:	4770      	bx	lr
 8005058:	e000ed00 	.word	0xe000ed00

0800505c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800505c:	b480      	push	{r7}
 800505e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005060:	4b04      	ldr	r3, [pc, #16]	; (8005074 <__NVIC_GetPriorityGrouping+0x18>)
 8005062:	68db      	ldr	r3, [r3, #12]
 8005064:	0a1b      	lsrs	r3, r3, #8
 8005066:	f003 0307 	and.w	r3, r3, #7
}
 800506a:	4618      	mov	r0, r3
 800506c:	46bd      	mov	sp, r7
 800506e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005072:	4770      	bx	lr
 8005074:	e000ed00 	.word	0xe000ed00

08005078 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005078:	b480      	push	{r7}
 800507a:	b083      	sub	sp, #12
 800507c:	af00      	add	r7, sp, #0
 800507e:	4603      	mov	r3, r0
 8005080:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005082:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005086:	2b00      	cmp	r3, #0
 8005088:	db0b      	blt.n	80050a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800508a:	79fb      	ldrb	r3, [r7, #7]
 800508c:	f003 021f 	and.w	r2, r3, #31
 8005090:	4907      	ldr	r1, [pc, #28]	; (80050b0 <__NVIC_EnableIRQ+0x38>)
 8005092:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005096:	095b      	lsrs	r3, r3, #5
 8005098:	2001      	movs	r0, #1
 800509a:	fa00 f202 	lsl.w	r2, r0, r2
 800509e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80050a2:	bf00      	nop
 80050a4:	370c      	adds	r7, #12
 80050a6:	46bd      	mov	sp, r7
 80050a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ac:	4770      	bx	lr
 80050ae:	bf00      	nop
 80050b0:	e000e100 	.word	0xe000e100

080050b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80050b4:	b480      	push	{r7}
 80050b6:	b083      	sub	sp, #12
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	4603      	mov	r3, r0
 80050bc:	6039      	str	r1, [r7, #0]
 80050be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80050c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	db0a      	blt.n	80050de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	b2da      	uxtb	r2, r3
 80050cc:	490c      	ldr	r1, [pc, #48]	; (8005100 <__NVIC_SetPriority+0x4c>)
 80050ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050d2:	0112      	lsls	r2, r2, #4
 80050d4:	b2d2      	uxtb	r2, r2
 80050d6:	440b      	add	r3, r1
 80050d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80050dc:	e00a      	b.n	80050f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	b2da      	uxtb	r2, r3
 80050e2:	4908      	ldr	r1, [pc, #32]	; (8005104 <__NVIC_SetPriority+0x50>)
 80050e4:	79fb      	ldrb	r3, [r7, #7]
 80050e6:	f003 030f 	and.w	r3, r3, #15
 80050ea:	3b04      	subs	r3, #4
 80050ec:	0112      	lsls	r2, r2, #4
 80050ee:	b2d2      	uxtb	r2, r2
 80050f0:	440b      	add	r3, r1
 80050f2:	761a      	strb	r2, [r3, #24]
}
 80050f4:	bf00      	nop
 80050f6:	370c      	adds	r7, #12
 80050f8:	46bd      	mov	sp, r7
 80050fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fe:	4770      	bx	lr
 8005100:	e000e100 	.word	0xe000e100
 8005104:	e000ed00 	.word	0xe000ed00

08005108 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005108:	b480      	push	{r7}
 800510a:	b089      	sub	sp, #36	; 0x24
 800510c:	af00      	add	r7, sp, #0
 800510e:	60f8      	str	r0, [r7, #12]
 8005110:	60b9      	str	r1, [r7, #8]
 8005112:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	f003 0307 	and.w	r3, r3, #7
 800511a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800511c:	69fb      	ldr	r3, [r7, #28]
 800511e:	f1c3 0307 	rsb	r3, r3, #7
 8005122:	2b04      	cmp	r3, #4
 8005124:	bf28      	it	cs
 8005126:	2304      	movcs	r3, #4
 8005128:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800512a:	69fb      	ldr	r3, [r7, #28]
 800512c:	3304      	adds	r3, #4
 800512e:	2b06      	cmp	r3, #6
 8005130:	d902      	bls.n	8005138 <NVIC_EncodePriority+0x30>
 8005132:	69fb      	ldr	r3, [r7, #28]
 8005134:	3b03      	subs	r3, #3
 8005136:	e000      	b.n	800513a <NVIC_EncodePriority+0x32>
 8005138:	2300      	movs	r3, #0
 800513a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800513c:	f04f 32ff 	mov.w	r2, #4294967295
 8005140:	69bb      	ldr	r3, [r7, #24]
 8005142:	fa02 f303 	lsl.w	r3, r2, r3
 8005146:	43da      	mvns	r2, r3
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	401a      	ands	r2, r3
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005150:	f04f 31ff 	mov.w	r1, #4294967295
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	fa01 f303 	lsl.w	r3, r1, r3
 800515a:	43d9      	mvns	r1, r3
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005160:	4313      	orrs	r3, r2
         );
}
 8005162:	4618      	mov	r0, r3
 8005164:	3724      	adds	r7, #36	; 0x24
 8005166:	46bd      	mov	sp, r7
 8005168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516c:	4770      	bx	lr

0800516e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800516e:	b580      	push	{r7, lr}
 8005170:	b082      	sub	sp, #8
 8005172:	af00      	add	r7, sp, #0
 8005174:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005176:	6878      	ldr	r0, [r7, #4]
 8005178:	f7ff ff4c 	bl	8005014 <__NVIC_SetPriorityGrouping>
}
 800517c:	bf00      	nop
 800517e:	3708      	adds	r7, #8
 8005180:	46bd      	mov	sp, r7
 8005182:	bd80      	pop	{r7, pc}

08005184 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005184:	b580      	push	{r7, lr}
 8005186:	b086      	sub	sp, #24
 8005188:	af00      	add	r7, sp, #0
 800518a:	4603      	mov	r3, r0
 800518c:	60b9      	str	r1, [r7, #8]
 800518e:	607a      	str	r2, [r7, #4]
 8005190:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005192:	2300      	movs	r3, #0
 8005194:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005196:	f7ff ff61 	bl	800505c <__NVIC_GetPriorityGrouping>
 800519a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800519c:	687a      	ldr	r2, [r7, #4]
 800519e:	68b9      	ldr	r1, [r7, #8]
 80051a0:	6978      	ldr	r0, [r7, #20]
 80051a2:	f7ff ffb1 	bl	8005108 <NVIC_EncodePriority>
 80051a6:	4602      	mov	r2, r0
 80051a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80051ac:	4611      	mov	r1, r2
 80051ae:	4618      	mov	r0, r3
 80051b0:	f7ff ff80 	bl	80050b4 <__NVIC_SetPriority>
}
 80051b4:	bf00      	nop
 80051b6:	3718      	adds	r7, #24
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bd80      	pop	{r7, pc}

080051bc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b082      	sub	sp, #8
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	4603      	mov	r3, r0
 80051c4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80051c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051ca:	4618      	mov	r0, r3
 80051cc:	f7ff ff54 	bl	8005078 <__NVIC_EnableIRQ>
}
 80051d0:	bf00      	nop
 80051d2:	3708      	adds	r7, #8
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bd80      	pop	{r7, pc}

080051d8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b086      	sub	sp, #24
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80051e0:	2300      	movs	r3, #0
 80051e2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80051e4:	f7ff f85c 	bl	80042a0 <HAL_GetTick>
 80051e8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d101      	bne.n	80051f4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80051f0:	2301      	movs	r3, #1
 80051f2:	e099      	b.n	8005328 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2200      	movs	r2, #0
 80051f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2202      	movs	r2, #2
 8005200:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	681a      	ldr	r2, [r3, #0]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f022 0201 	bic.w	r2, r2, #1
 8005212:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005214:	e00f      	b.n	8005236 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005216:	f7ff f843 	bl	80042a0 <HAL_GetTick>
 800521a:	4602      	mov	r2, r0
 800521c:	693b      	ldr	r3, [r7, #16]
 800521e:	1ad3      	subs	r3, r2, r3
 8005220:	2b05      	cmp	r3, #5
 8005222:	d908      	bls.n	8005236 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2220      	movs	r2, #32
 8005228:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2203      	movs	r2, #3
 800522e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005232:	2303      	movs	r3, #3
 8005234:	e078      	b.n	8005328 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f003 0301 	and.w	r3, r3, #1
 8005240:	2b00      	cmp	r3, #0
 8005242:	d1e8      	bne.n	8005216 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800524c:	697a      	ldr	r2, [r7, #20]
 800524e:	4b38      	ldr	r3, [pc, #224]	; (8005330 <HAL_DMA_Init+0x158>)
 8005250:	4013      	ands	r3, r2
 8005252:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	685a      	ldr	r2, [r3, #4]
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	689b      	ldr	r3, [r3, #8]
 800525c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005262:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	691b      	ldr	r3, [r3, #16]
 8005268:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800526e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	699b      	ldr	r3, [r3, #24]
 8005274:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800527a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6a1b      	ldr	r3, [r3, #32]
 8005280:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005282:	697a      	ldr	r2, [r7, #20]
 8005284:	4313      	orrs	r3, r2
 8005286:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800528c:	2b04      	cmp	r3, #4
 800528e:	d107      	bne.n	80052a0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005298:	4313      	orrs	r3, r2
 800529a:	697a      	ldr	r2, [r7, #20]
 800529c:	4313      	orrs	r3, r2
 800529e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	697a      	ldr	r2, [r7, #20]
 80052a6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	695b      	ldr	r3, [r3, #20]
 80052ae:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	f023 0307 	bic.w	r3, r3, #7
 80052b6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052bc:	697a      	ldr	r2, [r7, #20]
 80052be:	4313      	orrs	r3, r2
 80052c0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c6:	2b04      	cmp	r3, #4
 80052c8:	d117      	bne.n	80052fa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052ce:	697a      	ldr	r2, [r7, #20]
 80052d0:	4313      	orrs	r3, r2
 80052d2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d00e      	beq.n	80052fa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80052dc:	6878      	ldr	r0, [r7, #4]
 80052de:	f000 fa91 	bl	8005804 <DMA_CheckFifoParam>
 80052e2:	4603      	mov	r3, r0
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d008      	beq.n	80052fa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2240      	movs	r2, #64	; 0x40
 80052ec:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2201      	movs	r2, #1
 80052f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80052f6:	2301      	movs	r3, #1
 80052f8:	e016      	b.n	8005328 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	697a      	ldr	r2, [r7, #20]
 8005300:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f000 fa48 	bl	8005798 <DMA_CalcBaseAndBitshift>
 8005308:	4603      	mov	r3, r0
 800530a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005310:	223f      	movs	r2, #63	; 0x3f
 8005312:	409a      	lsls	r2, r3
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2200      	movs	r2, #0
 800531c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2201      	movs	r2, #1
 8005322:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005326:	2300      	movs	r3, #0
}
 8005328:	4618      	mov	r0, r3
 800532a:	3718      	adds	r7, #24
 800532c:	46bd      	mov	sp, r7
 800532e:	bd80      	pop	{r7, pc}
 8005330:	f010803f 	.word	0xf010803f

08005334 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b086      	sub	sp, #24
 8005338:	af00      	add	r7, sp, #0
 800533a:	60f8      	str	r0, [r7, #12]
 800533c:	60b9      	str	r1, [r7, #8]
 800533e:	607a      	str	r2, [r7, #4]
 8005340:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005342:	2300      	movs	r3, #0
 8005344:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800534a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005352:	2b01      	cmp	r3, #1
 8005354:	d101      	bne.n	800535a <HAL_DMA_Start_IT+0x26>
 8005356:	2302      	movs	r3, #2
 8005358:	e040      	b.n	80053dc <HAL_DMA_Start_IT+0xa8>
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	2201      	movs	r2, #1
 800535e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005368:	b2db      	uxtb	r3, r3
 800536a:	2b01      	cmp	r3, #1
 800536c:	d12f      	bne.n	80053ce <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	2202      	movs	r2, #2
 8005372:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	2200      	movs	r2, #0
 800537a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	687a      	ldr	r2, [r7, #4]
 8005380:	68b9      	ldr	r1, [r7, #8]
 8005382:	68f8      	ldr	r0, [r7, #12]
 8005384:	f000 f9da 	bl	800573c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800538c:	223f      	movs	r2, #63	; 0x3f
 800538e:	409a      	lsls	r2, r3
 8005390:	693b      	ldr	r3, [r7, #16]
 8005392:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	681a      	ldr	r2, [r3, #0]
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f042 0216 	orr.w	r2, r2, #22
 80053a2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d007      	beq.n	80053bc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	681a      	ldr	r2, [r3, #0]
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f042 0208 	orr.w	r2, r2, #8
 80053ba:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	681a      	ldr	r2, [r3, #0]
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f042 0201 	orr.w	r2, r2, #1
 80053ca:	601a      	str	r2, [r3, #0]
 80053cc:	e005      	b.n	80053da <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	2200      	movs	r2, #0
 80053d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80053d6:	2302      	movs	r3, #2
 80053d8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80053da:	7dfb      	ldrb	r3, [r7, #23]
}
 80053dc:	4618      	mov	r0, r3
 80053de:	3718      	adds	r7, #24
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bd80      	pop	{r7, pc}

080053e4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b083      	sub	sp, #12
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80053f2:	b2db      	uxtb	r3, r3
 80053f4:	2b02      	cmp	r3, #2
 80053f6:	d004      	beq.n	8005402 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2280      	movs	r2, #128	; 0x80
 80053fc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80053fe:	2301      	movs	r3, #1
 8005400:	e00c      	b.n	800541c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2205      	movs	r2, #5
 8005406:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	681a      	ldr	r2, [r3, #0]
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f022 0201 	bic.w	r2, r2, #1
 8005418:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800541a:	2300      	movs	r3, #0
}
 800541c:	4618      	mov	r0, r3
 800541e:	370c      	adds	r7, #12
 8005420:	46bd      	mov	sp, r7
 8005422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005426:	4770      	bx	lr

08005428 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b086      	sub	sp, #24
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005430:	2300      	movs	r3, #0
 8005432:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005434:	4b92      	ldr	r3, [pc, #584]	; (8005680 <HAL_DMA_IRQHandler+0x258>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a92      	ldr	r2, [pc, #584]	; (8005684 <HAL_DMA_IRQHandler+0x25c>)
 800543a:	fba2 2303 	umull	r2, r3, r2, r3
 800543e:	0a9b      	lsrs	r3, r3, #10
 8005440:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005446:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005448:	693b      	ldr	r3, [r7, #16]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005452:	2208      	movs	r2, #8
 8005454:	409a      	lsls	r2, r3
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	4013      	ands	r3, r2
 800545a:	2b00      	cmp	r3, #0
 800545c:	d01a      	beq.n	8005494 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f003 0304 	and.w	r3, r3, #4
 8005468:	2b00      	cmp	r3, #0
 800546a:	d013      	beq.n	8005494 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	681a      	ldr	r2, [r3, #0]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f022 0204 	bic.w	r2, r2, #4
 800547a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005480:	2208      	movs	r2, #8
 8005482:	409a      	lsls	r2, r3
 8005484:	693b      	ldr	r3, [r7, #16]
 8005486:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800548c:	f043 0201 	orr.w	r2, r3, #1
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005498:	2201      	movs	r2, #1
 800549a:	409a      	lsls	r2, r3
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	4013      	ands	r3, r2
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d012      	beq.n	80054ca <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	695b      	ldr	r3, [r3, #20]
 80054aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d00b      	beq.n	80054ca <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054b6:	2201      	movs	r2, #1
 80054b8:	409a      	lsls	r2, r3
 80054ba:	693b      	ldr	r3, [r7, #16]
 80054bc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054c2:	f043 0202 	orr.w	r2, r3, #2
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054ce:	2204      	movs	r2, #4
 80054d0:	409a      	lsls	r2, r3
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	4013      	ands	r3, r2
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d012      	beq.n	8005500 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f003 0302 	and.w	r3, r3, #2
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d00b      	beq.n	8005500 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054ec:	2204      	movs	r2, #4
 80054ee:	409a      	lsls	r2, r3
 80054f0:	693b      	ldr	r3, [r7, #16]
 80054f2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054f8:	f043 0204 	orr.w	r2, r3, #4
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005504:	2210      	movs	r2, #16
 8005506:	409a      	lsls	r2, r3
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	4013      	ands	r3, r2
 800550c:	2b00      	cmp	r3, #0
 800550e:	d043      	beq.n	8005598 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f003 0308 	and.w	r3, r3, #8
 800551a:	2b00      	cmp	r3, #0
 800551c:	d03c      	beq.n	8005598 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005522:	2210      	movs	r2, #16
 8005524:	409a      	lsls	r2, r3
 8005526:	693b      	ldr	r3, [r7, #16]
 8005528:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005534:	2b00      	cmp	r3, #0
 8005536:	d018      	beq.n	800556a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005542:	2b00      	cmp	r3, #0
 8005544:	d108      	bne.n	8005558 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800554a:	2b00      	cmp	r3, #0
 800554c:	d024      	beq.n	8005598 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	4798      	blx	r3
 8005556:	e01f      	b.n	8005598 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800555c:	2b00      	cmp	r3, #0
 800555e:	d01b      	beq.n	8005598 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005564:	6878      	ldr	r0, [r7, #4]
 8005566:	4798      	blx	r3
 8005568:	e016      	b.n	8005598 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005574:	2b00      	cmp	r3, #0
 8005576:	d107      	bne.n	8005588 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	681a      	ldr	r2, [r3, #0]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f022 0208 	bic.w	r2, r2, #8
 8005586:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800558c:	2b00      	cmp	r3, #0
 800558e:	d003      	beq.n	8005598 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005594:	6878      	ldr	r0, [r7, #4]
 8005596:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800559c:	2220      	movs	r2, #32
 800559e:	409a      	lsls	r2, r3
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	4013      	ands	r3, r2
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	f000 808e 	beq.w	80056c6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f003 0310 	and.w	r3, r3, #16
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	f000 8086 	beq.w	80056c6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055be:	2220      	movs	r2, #32
 80055c0:	409a      	lsls	r2, r3
 80055c2:	693b      	ldr	r3, [r7, #16]
 80055c4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80055cc:	b2db      	uxtb	r3, r3
 80055ce:	2b05      	cmp	r3, #5
 80055d0:	d136      	bne.n	8005640 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	681a      	ldr	r2, [r3, #0]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f022 0216 	bic.w	r2, r2, #22
 80055e0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	695a      	ldr	r2, [r3, #20]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80055f0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d103      	bne.n	8005602 <HAL_DMA_IRQHandler+0x1da>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d007      	beq.n	8005612 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	681a      	ldr	r2, [r3, #0]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f022 0208 	bic.w	r2, r2, #8
 8005610:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005616:	223f      	movs	r2, #63	; 0x3f
 8005618:	409a      	lsls	r2, r3
 800561a:	693b      	ldr	r3, [r7, #16]
 800561c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2200      	movs	r2, #0
 8005622:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2201      	movs	r2, #1
 800562a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005632:	2b00      	cmp	r3, #0
 8005634:	d07d      	beq.n	8005732 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	4798      	blx	r3
        }
        return;
 800563e:	e078      	b.n	8005732 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800564a:	2b00      	cmp	r3, #0
 800564c:	d01c      	beq.n	8005688 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005658:	2b00      	cmp	r3, #0
 800565a:	d108      	bne.n	800566e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005660:	2b00      	cmp	r3, #0
 8005662:	d030      	beq.n	80056c6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005668:	6878      	ldr	r0, [r7, #4]
 800566a:	4798      	blx	r3
 800566c:	e02b      	b.n	80056c6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005672:	2b00      	cmp	r3, #0
 8005674:	d027      	beq.n	80056c6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800567a:	6878      	ldr	r0, [r7, #4]
 800567c:	4798      	blx	r3
 800567e:	e022      	b.n	80056c6 <HAL_DMA_IRQHandler+0x29e>
 8005680:	20000000 	.word	0x20000000
 8005684:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005692:	2b00      	cmp	r3, #0
 8005694:	d10f      	bne.n	80056b6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	681a      	ldr	r2, [r3, #0]
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f022 0210 	bic.w	r2, r2, #16
 80056a4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2200      	movs	r2, #0
 80056aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2201      	movs	r2, #1
 80056b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d003      	beq.n	80056c6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d032      	beq.n	8005734 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056d2:	f003 0301 	and.w	r3, r3, #1
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d022      	beq.n	8005720 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2205      	movs	r2, #5
 80056de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	681a      	ldr	r2, [r3, #0]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f022 0201 	bic.w	r2, r2, #1
 80056f0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	3301      	adds	r3, #1
 80056f6:	60bb      	str	r3, [r7, #8]
 80056f8:	697a      	ldr	r2, [r7, #20]
 80056fa:	429a      	cmp	r2, r3
 80056fc:	d307      	bcc.n	800570e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f003 0301 	and.w	r3, r3, #1
 8005708:	2b00      	cmp	r3, #0
 800570a:	d1f2      	bne.n	80056f2 <HAL_DMA_IRQHandler+0x2ca>
 800570c:	e000      	b.n	8005710 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800570e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2200      	movs	r2, #0
 8005714:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2201      	movs	r2, #1
 800571c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005724:	2b00      	cmp	r3, #0
 8005726:	d005      	beq.n	8005734 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800572c:	6878      	ldr	r0, [r7, #4]
 800572e:	4798      	blx	r3
 8005730:	e000      	b.n	8005734 <HAL_DMA_IRQHandler+0x30c>
        return;
 8005732:	bf00      	nop
    }
  }
}
 8005734:	3718      	adds	r7, #24
 8005736:	46bd      	mov	sp, r7
 8005738:	bd80      	pop	{r7, pc}
 800573a:	bf00      	nop

0800573c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800573c:	b480      	push	{r7}
 800573e:	b085      	sub	sp, #20
 8005740:	af00      	add	r7, sp, #0
 8005742:	60f8      	str	r0, [r7, #12]
 8005744:	60b9      	str	r1, [r7, #8]
 8005746:	607a      	str	r2, [r7, #4]
 8005748:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	681a      	ldr	r2, [r3, #0]
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005758:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	683a      	ldr	r2, [r7, #0]
 8005760:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	689b      	ldr	r3, [r3, #8]
 8005766:	2b40      	cmp	r3, #64	; 0x40
 8005768:	d108      	bne.n	800577c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	687a      	ldr	r2, [r7, #4]
 8005770:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	68ba      	ldr	r2, [r7, #8]
 8005778:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800577a:	e007      	b.n	800578c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	68ba      	ldr	r2, [r7, #8]
 8005782:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	687a      	ldr	r2, [r7, #4]
 800578a:	60da      	str	r2, [r3, #12]
}
 800578c:	bf00      	nop
 800578e:	3714      	adds	r7, #20
 8005790:	46bd      	mov	sp, r7
 8005792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005796:	4770      	bx	lr

08005798 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005798:	b480      	push	{r7}
 800579a:	b085      	sub	sp, #20
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	b2db      	uxtb	r3, r3
 80057a6:	3b10      	subs	r3, #16
 80057a8:	4a14      	ldr	r2, [pc, #80]	; (80057fc <DMA_CalcBaseAndBitshift+0x64>)
 80057aa:	fba2 2303 	umull	r2, r3, r2, r3
 80057ae:	091b      	lsrs	r3, r3, #4
 80057b0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80057b2:	4a13      	ldr	r2, [pc, #76]	; (8005800 <DMA_CalcBaseAndBitshift+0x68>)
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	4413      	add	r3, r2
 80057b8:	781b      	ldrb	r3, [r3, #0]
 80057ba:	461a      	mov	r2, r3
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	2b03      	cmp	r3, #3
 80057c4:	d909      	bls.n	80057da <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80057ce:	f023 0303 	bic.w	r3, r3, #3
 80057d2:	1d1a      	adds	r2, r3, #4
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	659a      	str	r2, [r3, #88]	; 0x58
 80057d8:	e007      	b.n	80057ea <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80057e2:	f023 0303 	bic.w	r3, r3, #3
 80057e6:	687a      	ldr	r2, [r7, #4]
 80057e8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	3714      	adds	r7, #20
 80057f2:	46bd      	mov	sp, r7
 80057f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f8:	4770      	bx	lr
 80057fa:	bf00      	nop
 80057fc:	aaaaaaab 	.word	0xaaaaaaab
 8005800:	0800ce78 	.word	0x0800ce78

08005804 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005804:	b480      	push	{r7}
 8005806:	b085      	sub	sp, #20
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800580c:	2300      	movs	r3, #0
 800580e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005814:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	699b      	ldr	r3, [r3, #24]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d11f      	bne.n	800585e <DMA_CheckFifoParam+0x5a>
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	2b03      	cmp	r3, #3
 8005822:	d856      	bhi.n	80058d2 <DMA_CheckFifoParam+0xce>
 8005824:	a201      	add	r2, pc, #4	; (adr r2, 800582c <DMA_CheckFifoParam+0x28>)
 8005826:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800582a:	bf00      	nop
 800582c:	0800583d 	.word	0x0800583d
 8005830:	0800584f 	.word	0x0800584f
 8005834:	0800583d 	.word	0x0800583d
 8005838:	080058d3 	.word	0x080058d3
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005840:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005844:	2b00      	cmp	r3, #0
 8005846:	d046      	beq.n	80058d6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005848:	2301      	movs	r3, #1
 800584a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800584c:	e043      	b.n	80058d6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005852:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005856:	d140      	bne.n	80058da <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005858:	2301      	movs	r3, #1
 800585a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800585c:	e03d      	b.n	80058da <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	699b      	ldr	r3, [r3, #24]
 8005862:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005866:	d121      	bne.n	80058ac <DMA_CheckFifoParam+0xa8>
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	2b03      	cmp	r3, #3
 800586c:	d837      	bhi.n	80058de <DMA_CheckFifoParam+0xda>
 800586e:	a201      	add	r2, pc, #4	; (adr r2, 8005874 <DMA_CheckFifoParam+0x70>)
 8005870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005874:	08005885 	.word	0x08005885
 8005878:	0800588b 	.word	0x0800588b
 800587c:	08005885 	.word	0x08005885
 8005880:	0800589d 	.word	0x0800589d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005884:	2301      	movs	r3, #1
 8005886:	73fb      	strb	r3, [r7, #15]
      break;
 8005888:	e030      	b.n	80058ec <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800588e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005892:	2b00      	cmp	r3, #0
 8005894:	d025      	beq.n	80058e2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005896:	2301      	movs	r3, #1
 8005898:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800589a:	e022      	b.n	80058e2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058a0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80058a4:	d11f      	bne.n	80058e6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80058a6:	2301      	movs	r3, #1
 80058a8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80058aa:	e01c      	b.n	80058e6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	2b02      	cmp	r3, #2
 80058b0:	d903      	bls.n	80058ba <DMA_CheckFifoParam+0xb6>
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	2b03      	cmp	r3, #3
 80058b6:	d003      	beq.n	80058c0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80058b8:	e018      	b.n	80058ec <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80058ba:	2301      	movs	r3, #1
 80058bc:	73fb      	strb	r3, [r7, #15]
      break;
 80058be:	e015      	b.n	80058ec <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d00e      	beq.n	80058ea <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80058cc:	2301      	movs	r3, #1
 80058ce:	73fb      	strb	r3, [r7, #15]
      break;
 80058d0:	e00b      	b.n	80058ea <DMA_CheckFifoParam+0xe6>
      break;
 80058d2:	bf00      	nop
 80058d4:	e00a      	b.n	80058ec <DMA_CheckFifoParam+0xe8>
      break;
 80058d6:	bf00      	nop
 80058d8:	e008      	b.n	80058ec <DMA_CheckFifoParam+0xe8>
      break;
 80058da:	bf00      	nop
 80058dc:	e006      	b.n	80058ec <DMA_CheckFifoParam+0xe8>
      break;
 80058de:	bf00      	nop
 80058e0:	e004      	b.n	80058ec <DMA_CheckFifoParam+0xe8>
      break;
 80058e2:	bf00      	nop
 80058e4:	e002      	b.n	80058ec <DMA_CheckFifoParam+0xe8>
      break;   
 80058e6:	bf00      	nop
 80058e8:	e000      	b.n	80058ec <DMA_CheckFifoParam+0xe8>
      break;
 80058ea:	bf00      	nop
    }
  } 
  
  return status; 
 80058ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80058ee:	4618      	mov	r0, r3
 80058f0:	3714      	adds	r7, #20
 80058f2:	46bd      	mov	sp, r7
 80058f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f8:	4770      	bx	lr
 80058fa:	bf00      	nop

080058fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80058fc:	b480      	push	{r7}
 80058fe:	b089      	sub	sp, #36	; 0x24
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
 8005904:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005906:	2300      	movs	r3, #0
 8005908:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800590a:	2300      	movs	r3, #0
 800590c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800590e:	2300      	movs	r3, #0
 8005910:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005912:	2300      	movs	r3, #0
 8005914:	61fb      	str	r3, [r7, #28]
 8005916:	e177      	b.n	8005c08 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005918:	2201      	movs	r2, #1
 800591a:	69fb      	ldr	r3, [r7, #28]
 800591c:	fa02 f303 	lsl.w	r3, r2, r3
 8005920:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	697a      	ldr	r2, [r7, #20]
 8005928:	4013      	ands	r3, r2
 800592a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800592c:	693a      	ldr	r2, [r7, #16]
 800592e:	697b      	ldr	r3, [r7, #20]
 8005930:	429a      	cmp	r2, r3
 8005932:	f040 8166 	bne.w	8005c02 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	685b      	ldr	r3, [r3, #4]
 800593a:	2b01      	cmp	r3, #1
 800593c:	d00b      	beq.n	8005956 <HAL_GPIO_Init+0x5a>
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	2b02      	cmp	r3, #2
 8005944:	d007      	beq.n	8005956 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800594a:	2b11      	cmp	r3, #17
 800594c:	d003      	beq.n	8005956 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	685b      	ldr	r3, [r3, #4]
 8005952:	2b12      	cmp	r3, #18
 8005954:	d130      	bne.n	80059b8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	689b      	ldr	r3, [r3, #8]
 800595a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800595c:	69fb      	ldr	r3, [r7, #28]
 800595e:	005b      	lsls	r3, r3, #1
 8005960:	2203      	movs	r2, #3
 8005962:	fa02 f303 	lsl.w	r3, r2, r3
 8005966:	43db      	mvns	r3, r3
 8005968:	69ba      	ldr	r2, [r7, #24]
 800596a:	4013      	ands	r3, r2
 800596c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	68da      	ldr	r2, [r3, #12]
 8005972:	69fb      	ldr	r3, [r7, #28]
 8005974:	005b      	lsls	r3, r3, #1
 8005976:	fa02 f303 	lsl.w	r3, r2, r3
 800597a:	69ba      	ldr	r2, [r7, #24]
 800597c:	4313      	orrs	r3, r2
 800597e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	69ba      	ldr	r2, [r7, #24]
 8005984:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800598c:	2201      	movs	r2, #1
 800598e:	69fb      	ldr	r3, [r7, #28]
 8005990:	fa02 f303 	lsl.w	r3, r2, r3
 8005994:	43db      	mvns	r3, r3
 8005996:	69ba      	ldr	r2, [r7, #24]
 8005998:	4013      	ands	r3, r2
 800599a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	685b      	ldr	r3, [r3, #4]
 80059a0:	091b      	lsrs	r3, r3, #4
 80059a2:	f003 0201 	and.w	r2, r3, #1
 80059a6:	69fb      	ldr	r3, [r7, #28]
 80059a8:	fa02 f303 	lsl.w	r3, r2, r3
 80059ac:	69ba      	ldr	r2, [r7, #24]
 80059ae:	4313      	orrs	r3, r2
 80059b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	69ba      	ldr	r2, [r7, #24]
 80059b6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	68db      	ldr	r3, [r3, #12]
 80059bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80059be:	69fb      	ldr	r3, [r7, #28]
 80059c0:	005b      	lsls	r3, r3, #1
 80059c2:	2203      	movs	r2, #3
 80059c4:	fa02 f303 	lsl.w	r3, r2, r3
 80059c8:	43db      	mvns	r3, r3
 80059ca:	69ba      	ldr	r2, [r7, #24]
 80059cc:	4013      	ands	r3, r2
 80059ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	689a      	ldr	r2, [r3, #8]
 80059d4:	69fb      	ldr	r3, [r7, #28]
 80059d6:	005b      	lsls	r3, r3, #1
 80059d8:	fa02 f303 	lsl.w	r3, r2, r3
 80059dc:	69ba      	ldr	r2, [r7, #24]
 80059de:	4313      	orrs	r3, r2
 80059e0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	69ba      	ldr	r2, [r7, #24]
 80059e6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	685b      	ldr	r3, [r3, #4]
 80059ec:	2b02      	cmp	r3, #2
 80059ee:	d003      	beq.n	80059f8 <HAL_GPIO_Init+0xfc>
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	685b      	ldr	r3, [r3, #4]
 80059f4:	2b12      	cmp	r3, #18
 80059f6:	d123      	bne.n	8005a40 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80059f8:	69fb      	ldr	r3, [r7, #28]
 80059fa:	08da      	lsrs	r2, r3, #3
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	3208      	adds	r2, #8
 8005a00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a04:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005a06:	69fb      	ldr	r3, [r7, #28]
 8005a08:	f003 0307 	and.w	r3, r3, #7
 8005a0c:	009b      	lsls	r3, r3, #2
 8005a0e:	220f      	movs	r2, #15
 8005a10:	fa02 f303 	lsl.w	r3, r2, r3
 8005a14:	43db      	mvns	r3, r3
 8005a16:	69ba      	ldr	r2, [r7, #24]
 8005a18:	4013      	ands	r3, r2
 8005a1a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	691a      	ldr	r2, [r3, #16]
 8005a20:	69fb      	ldr	r3, [r7, #28]
 8005a22:	f003 0307 	and.w	r3, r3, #7
 8005a26:	009b      	lsls	r3, r3, #2
 8005a28:	fa02 f303 	lsl.w	r3, r2, r3
 8005a2c:	69ba      	ldr	r2, [r7, #24]
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005a32:	69fb      	ldr	r3, [r7, #28]
 8005a34:	08da      	lsrs	r2, r3, #3
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	3208      	adds	r2, #8
 8005a3a:	69b9      	ldr	r1, [r7, #24]
 8005a3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005a46:	69fb      	ldr	r3, [r7, #28]
 8005a48:	005b      	lsls	r3, r3, #1
 8005a4a:	2203      	movs	r2, #3
 8005a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a50:	43db      	mvns	r3, r3
 8005a52:	69ba      	ldr	r2, [r7, #24]
 8005a54:	4013      	ands	r3, r2
 8005a56:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	f003 0203 	and.w	r2, r3, #3
 8005a60:	69fb      	ldr	r3, [r7, #28]
 8005a62:	005b      	lsls	r3, r3, #1
 8005a64:	fa02 f303 	lsl.w	r3, r2, r3
 8005a68:	69ba      	ldr	r2, [r7, #24]
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	69ba      	ldr	r2, [r7, #24]
 8005a72:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	685b      	ldr	r3, [r3, #4]
 8005a78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	f000 80c0 	beq.w	8005c02 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005a82:	2300      	movs	r3, #0
 8005a84:	60fb      	str	r3, [r7, #12]
 8005a86:	4b66      	ldr	r3, [pc, #408]	; (8005c20 <HAL_GPIO_Init+0x324>)
 8005a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a8a:	4a65      	ldr	r2, [pc, #404]	; (8005c20 <HAL_GPIO_Init+0x324>)
 8005a8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005a90:	6453      	str	r3, [r2, #68]	; 0x44
 8005a92:	4b63      	ldr	r3, [pc, #396]	; (8005c20 <HAL_GPIO_Init+0x324>)
 8005a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a9a:	60fb      	str	r3, [r7, #12]
 8005a9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005a9e:	4a61      	ldr	r2, [pc, #388]	; (8005c24 <HAL_GPIO_Init+0x328>)
 8005aa0:	69fb      	ldr	r3, [r7, #28]
 8005aa2:	089b      	lsrs	r3, r3, #2
 8005aa4:	3302      	adds	r3, #2
 8005aa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005aaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005aac:	69fb      	ldr	r3, [r7, #28]
 8005aae:	f003 0303 	and.w	r3, r3, #3
 8005ab2:	009b      	lsls	r3, r3, #2
 8005ab4:	220f      	movs	r2, #15
 8005ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8005aba:	43db      	mvns	r3, r3
 8005abc:	69ba      	ldr	r2, [r7, #24]
 8005abe:	4013      	ands	r3, r2
 8005ac0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	4a58      	ldr	r2, [pc, #352]	; (8005c28 <HAL_GPIO_Init+0x32c>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d037      	beq.n	8005b3a <HAL_GPIO_Init+0x23e>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	4a57      	ldr	r2, [pc, #348]	; (8005c2c <HAL_GPIO_Init+0x330>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d031      	beq.n	8005b36 <HAL_GPIO_Init+0x23a>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	4a56      	ldr	r2, [pc, #344]	; (8005c30 <HAL_GPIO_Init+0x334>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d02b      	beq.n	8005b32 <HAL_GPIO_Init+0x236>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	4a55      	ldr	r2, [pc, #340]	; (8005c34 <HAL_GPIO_Init+0x338>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d025      	beq.n	8005b2e <HAL_GPIO_Init+0x232>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	4a54      	ldr	r2, [pc, #336]	; (8005c38 <HAL_GPIO_Init+0x33c>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d01f      	beq.n	8005b2a <HAL_GPIO_Init+0x22e>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	4a53      	ldr	r2, [pc, #332]	; (8005c3c <HAL_GPIO_Init+0x340>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d019      	beq.n	8005b26 <HAL_GPIO_Init+0x22a>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	4a52      	ldr	r2, [pc, #328]	; (8005c40 <HAL_GPIO_Init+0x344>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d013      	beq.n	8005b22 <HAL_GPIO_Init+0x226>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	4a51      	ldr	r2, [pc, #324]	; (8005c44 <HAL_GPIO_Init+0x348>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d00d      	beq.n	8005b1e <HAL_GPIO_Init+0x222>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	4a50      	ldr	r2, [pc, #320]	; (8005c48 <HAL_GPIO_Init+0x34c>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d007      	beq.n	8005b1a <HAL_GPIO_Init+0x21e>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	4a4f      	ldr	r2, [pc, #316]	; (8005c4c <HAL_GPIO_Init+0x350>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d101      	bne.n	8005b16 <HAL_GPIO_Init+0x21a>
 8005b12:	2309      	movs	r3, #9
 8005b14:	e012      	b.n	8005b3c <HAL_GPIO_Init+0x240>
 8005b16:	230a      	movs	r3, #10
 8005b18:	e010      	b.n	8005b3c <HAL_GPIO_Init+0x240>
 8005b1a:	2308      	movs	r3, #8
 8005b1c:	e00e      	b.n	8005b3c <HAL_GPIO_Init+0x240>
 8005b1e:	2307      	movs	r3, #7
 8005b20:	e00c      	b.n	8005b3c <HAL_GPIO_Init+0x240>
 8005b22:	2306      	movs	r3, #6
 8005b24:	e00a      	b.n	8005b3c <HAL_GPIO_Init+0x240>
 8005b26:	2305      	movs	r3, #5
 8005b28:	e008      	b.n	8005b3c <HAL_GPIO_Init+0x240>
 8005b2a:	2304      	movs	r3, #4
 8005b2c:	e006      	b.n	8005b3c <HAL_GPIO_Init+0x240>
 8005b2e:	2303      	movs	r3, #3
 8005b30:	e004      	b.n	8005b3c <HAL_GPIO_Init+0x240>
 8005b32:	2302      	movs	r3, #2
 8005b34:	e002      	b.n	8005b3c <HAL_GPIO_Init+0x240>
 8005b36:	2301      	movs	r3, #1
 8005b38:	e000      	b.n	8005b3c <HAL_GPIO_Init+0x240>
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	69fa      	ldr	r2, [r7, #28]
 8005b3e:	f002 0203 	and.w	r2, r2, #3
 8005b42:	0092      	lsls	r2, r2, #2
 8005b44:	4093      	lsls	r3, r2
 8005b46:	69ba      	ldr	r2, [r7, #24]
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005b4c:	4935      	ldr	r1, [pc, #212]	; (8005c24 <HAL_GPIO_Init+0x328>)
 8005b4e:	69fb      	ldr	r3, [r7, #28]
 8005b50:	089b      	lsrs	r3, r3, #2
 8005b52:	3302      	adds	r3, #2
 8005b54:	69ba      	ldr	r2, [r7, #24]
 8005b56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005b5a:	4b3d      	ldr	r3, [pc, #244]	; (8005c50 <HAL_GPIO_Init+0x354>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005b60:	693b      	ldr	r3, [r7, #16]
 8005b62:	43db      	mvns	r3, r3
 8005b64:	69ba      	ldr	r2, [r7, #24]
 8005b66:	4013      	ands	r3, r2
 8005b68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	685b      	ldr	r3, [r3, #4]
 8005b6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d003      	beq.n	8005b7e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005b76:	69ba      	ldr	r2, [r7, #24]
 8005b78:	693b      	ldr	r3, [r7, #16]
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005b7e:	4a34      	ldr	r2, [pc, #208]	; (8005c50 <HAL_GPIO_Init+0x354>)
 8005b80:	69bb      	ldr	r3, [r7, #24]
 8005b82:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005b84:	4b32      	ldr	r3, [pc, #200]	; (8005c50 <HAL_GPIO_Init+0x354>)
 8005b86:	685b      	ldr	r3, [r3, #4]
 8005b88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005b8a:	693b      	ldr	r3, [r7, #16]
 8005b8c:	43db      	mvns	r3, r3
 8005b8e:	69ba      	ldr	r2, [r7, #24]
 8005b90:	4013      	ands	r3, r2
 8005b92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	685b      	ldr	r3, [r3, #4]
 8005b98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d003      	beq.n	8005ba8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005ba0:	69ba      	ldr	r2, [r7, #24]
 8005ba2:	693b      	ldr	r3, [r7, #16]
 8005ba4:	4313      	orrs	r3, r2
 8005ba6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005ba8:	4a29      	ldr	r2, [pc, #164]	; (8005c50 <HAL_GPIO_Init+0x354>)
 8005baa:	69bb      	ldr	r3, [r7, #24]
 8005bac:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005bae:	4b28      	ldr	r3, [pc, #160]	; (8005c50 <HAL_GPIO_Init+0x354>)
 8005bb0:	689b      	ldr	r3, [r3, #8]
 8005bb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005bb4:	693b      	ldr	r3, [r7, #16]
 8005bb6:	43db      	mvns	r3, r3
 8005bb8:	69ba      	ldr	r2, [r7, #24]
 8005bba:	4013      	ands	r3, r2
 8005bbc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	685b      	ldr	r3, [r3, #4]
 8005bc2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d003      	beq.n	8005bd2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005bca:	69ba      	ldr	r2, [r7, #24]
 8005bcc:	693b      	ldr	r3, [r7, #16]
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005bd2:	4a1f      	ldr	r2, [pc, #124]	; (8005c50 <HAL_GPIO_Init+0x354>)
 8005bd4:	69bb      	ldr	r3, [r7, #24]
 8005bd6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005bd8:	4b1d      	ldr	r3, [pc, #116]	; (8005c50 <HAL_GPIO_Init+0x354>)
 8005bda:	68db      	ldr	r3, [r3, #12]
 8005bdc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005bde:	693b      	ldr	r3, [r7, #16]
 8005be0:	43db      	mvns	r3, r3
 8005be2:	69ba      	ldr	r2, [r7, #24]
 8005be4:	4013      	ands	r3, r2
 8005be6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	685b      	ldr	r3, [r3, #4]
 8005bec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d003      	beq.n	8005bfc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005bf4:	69ba      	ldr	r2, [r7, #24]
 8005bf6:	693b      	ldr	r3, [r7, #16]
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005bfc:	4a14      	ldr	r2, [pc, #80]	; (8005c50 <HAL_GPIO_Init+0x354>)
 8005bfe:	69bb      	ldr	r3, [r7, #24]
 8005c00:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005c02:	69fb      	ldr	r3, [r7, #28]
 8005c04:	3301      	adds	r3, #1
 8005c06:	61fb      	str	r3, [r7, #28]
 8005c08:	69fb      	ldr	r3, [r7, #28]
 8005c0a:	2b0f      	cmp	r3, #15
 8005c0c:	f67f ae84 	bls.w	8005918 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005c10:	bf00      	nop
 8005c12:	bf00      	nop
 8005c14:	3724      	adds	r7, #36	; 0x24
 8005c16:	46bd      	mov	sp, r7
 8005c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1c:	4770      	bx	lr
 8005c1e:	bf00      	nop
 8005c20:	40023800 	.word	0x40023800
 8005c24:	40013800 	.word	0x40013800
 8005c28:	40020000 	.word	0x40020000
 8005c2c:	40020400 	.word	0x40020400
 8005c30:	40020800 	.word	0x40020800
 8005c34:	40020c00 	.word	0x40020c00
 8005c38:	40021000 	.word	0x40021000
 8005c3c:	40021400 	.word	0x40021400
 8005c40:	40021800 	.word	0x40021800
 8005c44:	40021c00 	.word	0x40021c00
 8005c48:	40022000 	.word	0x40022000
 8005c4c:	40022400 	.word	0x40022400
 8005c50:	40013c00 	.word	0x40013c00

08005c54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005c54:	b480      	push	{r7}
 8005c56:	b083      	sub	sp, #12
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
 8005c5c:	460b      	mov	r3, r1
 8005c5e:	807b      	strh	r3, [r7, #2]
 8005c60:	4613      	mov	r3, r2
 8005c62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005c64:	787b      	ldrb	r3, [r7, #1]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d003      	beq.n	8005c72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005c6a:	887a      	ldrh	r2, [r7, #2]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005c70:	e003      	b.n	8005c7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005c72:	887b      	ldrh	r3, [r7, #2]
 8005c74:	041a      	lsls	r2, r3, #16
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	619a      	str	r2, [r3, #24]
}
 8005c7a:	bf00      	nop
 8005c7c:	370c      	adds	r7, #12
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c84:	4770      	bx	lr
	...

08005c88 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b082      	sub	sp, #8
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	4603      	mov	r3, r0
 8005c90:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005c92:	4b08      	ldr	r3, [pc, #32]	; (8005cb4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005c94:	695a      	ldr	r2, [r3, #20]
 8005c96:	88fb      	ldrh	r3, [r7, #6]
 8005c98:	4013      	ands	r3, r2
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d006      	beq.n	8005cac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005c9e:	4a05      	ldr	r2, [pc, #20]	; (8005cb4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005ca0:	88fb      	ldrh	r3, [r7, #6]
 8005ca2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005ca4:	88fb      	ldrh	r3, [r7, #6]
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	f000 f806 	bl	8005cb8 <HAL_GPIO_EXTI_Callback>
  }
}
 8005cac:	bf00      	nop
 8005cae:	3708      	adds	r7, #8
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	bd80      	pop	{r7, pc}
 8005cb4:	40013c00 	.word	0x40013c00

08005cb8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b083      	sub	sp, #12
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8005cc2:	bf00      	nop
 8005cc4:	370c      	adds	r7, #12
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ccc:	4770      	bx	lr
	...

08005cd0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b086      	sub	sp, #24
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d101      	bne.n	8005ce2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005cde:	2301      	movs	r3, #1
 8005ce0:	e25b      	b.n	800619a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f003 0301 	and.w	r3, r3, #1
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d075      	beq.n	8005dda <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005cee:	4ba3      	ldr	r3, [pc, #652]	; (8005f7c <HAL_RCC_OscConfig+0x2ac>)
 8005cf0:	689b      	ldr	r3, [r3, #8]
 8005cf2:	f003 030c 	and.w	r3, r3, #12
 8005cf6:	2b04      	cmp	r3, #4
 8005cf8:	d00c      	beq.n	8005d14 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005cfa:	4ba0      	ldr	r3, [pc, #640]	; (8005f7c <HAL_RCC_OscConfig+0x2ac>)
 8005cfc:	689b      	ldr	r3, [r3, #8]
 8005cfe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005d02:	2b08      	cmp	r3, #8
 8005d04:	d112      	bne.n	8005d2c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005d06:	4b9d      	ldr	r3, [pc, #628]	; (8005f7c <HAL_RCC_OscConfig+0x2ac>)
 8005d08:	685b      	ldr	r3, [r3, #4]
 8005d0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d12:	d10b      	bne.n	8005d2c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d14:	4b99      	ldr	r3, [pc, #612]	; (8005f7c <HAL_RCC_OscConfig+0x2ac>)
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d05b      	beq.n	8005dd8 <HAL_RCC_OscConfig+0x108>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	685b      	ldr	r3, [r3, #4]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d157      	bne.n	8005dd8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005d28:	2301      	movs	r3, #1
 8005d2a:	e236      	b.n	800619a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	685b      	ldr	r3, [r3, #4]
 8005d30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d34:	d106      	bne.n	8005d44 <HAL_RCC_OscConfig+0x74>
 8005d36:	4b91      	ldr	r3, [pc, #580]	; (8005f7c <HAL_RCC_OscConfig+0x2ac>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4a90      	ldr	r2, [pc, #576]	; (8005f7c <HAL_RCC_OscConfig+0x2ac>)
 8005d3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d40:	6013      	str	r3, [r2, #0]
 8005d42:	e01d      	b.n	8005d80 <HAL_RCC_OscConfig+0xb0>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005d4c:	d10c      	bne.n	8005d68 <HAL_RCC_OscConfig+0x98>
 8005d4e:	4b8b      	ldr	r3, [pc, #556]	; (8005f7c <HAL_RCC_OscConfig+0x2ac>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4a8a      	ldr	r2, [pc, #552]	; (8005f7c <HAL_RCC_OscConfig+0x2ac>)
 8005d54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005d58:	6013      	str	r3, [r2, #0]
 8005d5a:	4b88      	ldr	r3, [pc, #544]	; (8005f7c <HAL_RCC_OscConfig+0x2ac>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4a87      	ldr	r2, [pc, #540]	; (8005f7c <HAL_RCC_OscConfig+0x2ac>)
 8005d60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d64:	6013      	str	r3, [r2, #0]
 8005d66:	e00b      	b.n	8005d80 <HAL_RCC_OscConfig+0xb0>
 8005d68:	4b84      	ldr	r3, [pc, #528]	; (8005f7c <HAL_RCC_OscConfig+0x2ac>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4a83      	ldr	r2, [pc, #524]	; (8005f7c <HAL_RCC_OscConfig+0x2ac>)
 8005d6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d72:	6013      	str	r3, [r2, #0]
 8005d74:	4b81      	ldr	r3, [pc, #516]	; (8005f7c <HAL_RCC_OscConfig+0x2ac>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a80      	ldr	r2, [pc, #512]	; (8005f7c <HAL_RCC_OscConfig+0x2ac>)
 8005d7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	685b      	ldr	r3, [r3, #4]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d013      	beq.n	8005db0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d88:	f7fe fa8a 	bl	80042a0 <HAL_GetTick>
 8005d8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d8e:	e008      	b.n	8005da2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005d90:	f7fe fa86 	bl	80042a0 <HAL_GetTick>
 8005d94:	4602      	mov	r2, r0
 8005d96:	693b      	ldr	r3, [r7, #16]
 8005d98:	1ad3      	subs	r3, r2, r3
 8005d9a:	2b64      	cmp	r3, #100	; 0x64
 8005d9c:	d901      	bls.n	8005da2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005d9e:	2303      	movs	r3, #3
 8005da0:	e1fb      	b.n	800619a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005da2:	4b76      	ldr	r3, [pc, #472]	; (8005f7c <HAL_RCC_OscConfig+0x2ac>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d0f0      	beq.n	8005d90 <HAL_RCC_OscConfig+0xc0>
 8005dae:	e014      	b.n	8005dda <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005db0:	f7fe fa76 	bl	80042a0 <HAL_GetTick>
 8005db4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005db6:	e008      	b.n	8005dca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005db8:	f7fe fa72 	bl	80042a0 <HAL_GetTick>
 8005dbc:	4602      	mov	r2, r0
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	1ad3      	subs	r3, r2, r3
 8005dc2:	2b64      	cmp	r3, #100	; 0x64
 8005dc4:	d901      	bls.n	8005dca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005dc6:	2303      	movs	r3, #3
 8005dc8:	e1e7      	b.n	800619a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005dca:	4b6c      	ldr	r3, [pc, #432]	; (8005f7c <HAL_RCC_OscConfig+0x2ac>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d1f0      	bne.n	8005db8 <HAL_RCC_OscConfig+0xe8>
 8005dd6:	e000      	b.n	8005dda <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005dd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f003 0302 	and.w	r3, r3, #2
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d063      	beq.n	8005eae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005de6:	4b65      	ldr	r3, [pc, #404]	; (8005f7c <HAL_RCC_OscConfig+0x2ac>)
 8005de8:	689b      	ldr	r3, [r3, #8]
 8005dea:	f003 030c 	and.w	r3, r3, #12
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d00b      	beq.n	8005e0a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005df2:	4b62      	ldr	r3, [pc, #392]	; (8005f7c <HAL_RCC_OscConfig+0x2ac>)
 8005df4:	689b      	ldr	r3, [r3, #8]
 8005df6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005dfa:	2b08      	cmp	r3, #8
 8005dfc:	d11c      	bne.n	8005e38 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005dfe:	4b5f      	ldr	r3, [pc, #380]	; (8005f7c <HAL_RCC_OscConfig+0x2ac>)
 8005e00:	685b      	ldr	r3, [r3, #4]
 8005e02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d116      	bne.n	8005e38 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e0a:	4b5c      	ldr	r3, [pc, #368]	; (8005f7c <HAL_RCC_OscConfig+0x2ac>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f003 0302 	and.w	r3, r3, #2
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d005      	beq.n	8005e22 <HAL_RCC_OscConfig+0x152>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	68db      	ldr	r3, [r3, #12]
 8005e1a:	2b01      	cmp	r3, #1
 8005e1c:	d001      	beq.n	8005e22 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005e1e:	2301      	movs	r3, #1
 8005e20:	e1bb      	b.n	800619a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e22:	4b56      	ldr	r3, [pc, #344]	; (8005f7c <HAL_RCC_OscConfig+0x2ac>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	691b      	ldr	r3, [r3, #16]
 8005e2e:	00db      	lsls	r3, r3, #3
 8005e30:	4952      	ldr	r1, [pc, #328]	; (8005f7c <HAL_RCC_OscConfig+0x2ac>)
 8005e32:	4313      	orrs	r3, r2
 8005e34:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e36:	e03a      	b.n	8005eae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	68db      	ldr	r3, [r3, #12]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d020      	beq.n	8005e82 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005e40:	4b4f      	ldr	r3, [pc, #316]	; (8005f80 <HAL_RCC_OscConfig+0x2b0>)
 8005e42:	2201      	movs	r2, #1
 8005e44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e46:	f7fe fa2b 	bl	80042a0 <HAL_GetTick>
 8005e4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e4c:	e008      	b.n	8005e60 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005e4e:	f7fe fa27 	bl	80042a0 <HAL_GetTick>
 8005e52:	4602      	mov	r2, r0
 8005e54:	693b      	ldr	r3, [r7, #16]
 8005e56:	1ad3      	subs	r3, r2, r3
 8005e58:	2b02      	cmp	r3, #2
 8005e5a:	d901      	bls.n	8005e60 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005e5c:	2303      	movs	r3, #3
 8005e5e:	e19c      	b.n	800619a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e60:	4b46      	ldr	r3, [pc, #280]	; (8005f7c <HAL_RCC_OscConfig+0x2ac>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f003 0302 	and.w	r3, r3, #2
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d0f0      	beq.n	8005e4e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e6c:	4b43      	ldr	r3, [pc, #268]	; (8005f7c <HAL_RCC_OscConfig+0x2ac>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	691b      	ldr	r3, [r3, #16]
 8005e78:	00db      	lsls	r3, r3, #3
 8005e7a:	4940      	ldr	r1, [pc, #256]	; (8005f7c <HAL_RCC_OscConfig+0x2ac>)
 8005e7c:	4313      	orrs	r3, r2
 8005e7e:	600b      	str	r3, [r1, #0]
 8005e80:	e015      	b.n	8005eae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005e82:	4b3f      	ldr	r3, [pc, #252]	; (8005f80 <HAL_RCC_OscConfig+0x2b0>)
 8005e84:	2200      	movs	r2, #0
 8005e86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e88:	f7fe fa0a 	bl	80042a0 <HAL_GetTick>
 8005e8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e8e:	e008      	b.n	8005ea2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005e90:	f7fe fa06 	bl	80042a0 <HAL_GetTick>
 8005e94:	4602      	mov	r2, r0
 8005e96:	693b      	ldr	r3, [r7, #16]
 8005e98:	1ad3      	subs	r3, r2, r3
 8005e9a:	2b02      	cmp	r3, #2
 8005e9c:	d901      	bls.n	8005ea2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005e9e:	2303      	movs	r3, #3
 8005ea0:	e17b      	b.n	800619a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ea2:	4b36      	ldr	r3, [pc, #216]	; (8005f7c <HAL_RCC_OscConfig+0x2ac>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f003 0302 	and.w	r3, r3, #2
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d1f0      	bne.n	8005e90 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f003 0308 	and.w	r3, r3, #8
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d030      	beq.n	8005f1c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	695b      	ldr	r3, [r3, #20]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d016      	beq.n	8005ef0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005ec2:	4b30      	ldr	r3, [pc, #192]	; (8005f84 <HAL_RCC_OscConfig+0x2b4>)
 8005ec4:	2201      	movs	r2, #1
 8005ec6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ec8:	f7fe f9ea 	bl	80042a0 <HAL_GetTick>
 8005ecc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ece:	e008      	b.n	8005ee2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005ed0:	f7fe f9e6 	bl	80042a0 <HAL_GetTick>
 8005ed4:	4602      	mov	r2, r0
 8005ed6:	693b      	ldr	r3, [r7, #16]
 8005ed8:	1ad3      	subs	r3, r2, r3
 8005eda:	2b02      	cmp	r3, #2
 8005edc:	d901      	bls.n	8005ee2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005ede:	2303      	movs	r3, #3
 8005ee0:	e15b      	b.n	800619a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ee2:	4b26      	ldr	r3, [pc, #152]	; (8005f7c <HAL_RCC_OscConfig+0x2ac>)
 8005ee4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ee6:	f003 0302 	and.w	r3, r3, #2
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d0f0      	beq.n	8005ed0 <HAL_RCC_OscConfig+0x200>
 8005eee:	e015      	b.n	8005f1c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005ef0:	4b24      	ldr	r3, [pc, #144]	; (8005f84 <HAL_RCC_OscConfig+0x2b4>)
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ef6:	f7fe f9d3 	bl	80042a0 <HAL_GetTick>
 8005efa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005efc:	e008      	b.n	8005f10 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005efe:	f7fe f9cf 	bl	80042a0 <HAL_GetTick>
 8005f02:	4602      	mov	r2, r0
 8005f04:	693b      	ldr	r3, [r7, #16]
 8005f06:	1ad3      	subs	r3, r2, r3
 8005f08:	2b02      	cmp	r3, #2
 8005f0a:	d901      	bls.n	8005f10 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005f0c:	2303      	movs	r3, #3
 8005f0e:	e144      	b.n	800619a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f10:	4b1a      	ldr	r3, [pc, #104]	; (8005f7c <HAL_RCC_OscConfig+0x2ac>)
 8005f12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f14:	f003 0302 	and.w	r3, r3, #2
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d1f0      	bne.n	8005efe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f003 0304 	and.w	r3, r3, #4
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	f000 80a0 	beq.w	800606a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005f2e:	4b13      	ldr	r3, [pc, #76]	; (8005f7c <HAL_RCC_OscConfig+0x2ac>)
 8005f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d10f      	bne.n	8005f5a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	60bb      	str	r3, [r7, #8]
 8005f3e:	4b0f      	ldr	r3, [pc, #60]	; (8005f7c <HAL_RCC_OscConfig+0x2ac>)
 8005f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f42:	4a0e      	ldr	r2, [pc, #56]	; (8005f7c <HAL_RCC_OscConfig+0x2ac>)
 8005f44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f48:	6413      	str	r3, [r2, #64]	; 0x40
 8005f4a:	4b0c      	ldr	r3, [pc, #48]	; (8005f7c <HAL_RCC_OscConfig+0x2ac>)
 8005f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f52:	60bb      	str	r3, [r7, #8]
 8005f54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005f56:	2301      	movs	r3, #1
 8005f58:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f5a:	4b0b      	ldr	r3, [pc, #44]	; (8005f88 <HAL_RCC_OscConfig+0x2b8>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d121      	bne.n	8005faa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005f66:	4b08      	ldr	r3, [pc, #32]	; (8005f88 <HAL_RCC_OscConfig+0x2b8>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4a07      	ldr	r2, [pc, #28]	; (8005f88 <HAL_RCC_OscConfig+0x2b8>)
 8005f6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005f72:	f7fe f995 	bl	80042a0 <HAL_GetTick>
 8005f76:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f78:	e011      	b.n	8005f9e <HAL_RCC_OscConfig+0x2ce>
 8005f7a:	bf00      	nop
 8005f7c:	40023800 	.word	0x40023800
 8005f80:	42470000 	.word	0x42470000
 8005f84:	42470e80 	.word	0x42470e80
 8005f88:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f8c:	f7fe f988 	bl	80042a0 <HAL_GetTick>
 8005f90:	4602      	mov	r2, r0
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	1ad3      	subs	r3, r2, r3
 8005f96:	2b02      	cmp	r3, #2
 8005f98:	d901      	bls.n	8005f9e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005f9a:	2303      	movs	r3, #3
 8005f9c:	e0fd      	b.n	800619a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f9e:	4b81      	ldr	r3, [pc, #516]	; (80061a4 <HAL_RCC_OscConfig+0x4d4>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d0f0      	beq.n	8005f8c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	689b      	ldr	r3, [r3, #8]
 8005fae:	2b01      	cmp	r3, #1
 8005fb0:	d106      	bne.n	8005fc0 <HAL_RCC_OscConfig+0x2f0>
 8005fb2:	4b7d      	ldr	r3, [pc, #500]	; (80061a8 <HAL_RCC_OscConfig+0x4d8>)
 8005fb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fb6:	4a7c      	ldr	r2, [pc, #496]	; (80061a8 <HAL_RCC_OscConfig+0x4d8>)
 8005fb8:	f043 0301 	orr.w	r3, r3, #1
 8005fbc:	6713      	str	r3, [r2, #112]	; 0x70
 8005fbe:	e01c      	b.n	8005ffa <HAL_RCC_OscConfig+0x32a>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	689b      	ldr	r3, [r3, #8]
 8005fc4:	2b05      	cmp	r3, #5
 8005fc6:	d10c      	bne.n	8005fe2 <HAL_RCC_OscConfig+0x312>
 8005fc8:	4b77      	ldr	r3, [pc, #476]	; (80061a8 <HAL_RCC_OscConfig+0x4d8>)
 8005fca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fcc:	4a76      	ldr	r2, [pc, #472]	; (80061a8 <HAL_RCC_OscConfig+0x4d8>)
 8005fce:	f043 0304 	orr.w	r3, r3, #4
 8005fd2:	6713      	str	r3, [r2, #112]	; 0x70
 8005fd4:	4b74      	ldr	r3, [pc, #464]	; (80061a8 <HAL_RCC_OscConfig+0x4d8>)
 8005fd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fd8:	4a73      	ldr	r2, [pc, #460]	; (80061a8 <HAL_RCC_OscConfig+0x4d8>)
 8005fda:	f043 0301 	orr.w	r3, r3, #1
 8005fde:	6713      	str	r3, [r2, #112]	; 0x70
 8005fe0:	e00b      	b.n	8005ffa <HAL_RCC_OscConfig+0x32a>
 8005fe2:	4b71      	ldr	r3, [pc, #452]	; (80061a8 <HAL_RCC_OscConfig+0x4d8>)
 8005fe4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fe6:	4a70      	ldr	r2, [pc, #448]	; (80061a8 <HAL_RCC_OscConfig+0x4d8>)
 8005fe8:	f023 0301 	bic.w	r3, r3, #1
 8005fec:	6713      	str	r3, [r2, #112]	; 0x70
 8005fee:	4b6e      	ldr	r3, [pc, #440]	; (80061a8 <HAL_RCC_OscConfig+0x4d8>)
 8005ff0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ff2:	4a6d      	ldr	r2, [pc, #436]	; (80061a8 <HAL_RCC_OscConfig+0x4d8>)
 8005ff4:	f023 0304 	bic.w	r3, r3, #4
 8005ff8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	689b      	ldr	r3, [r3, #8]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d015      	beq.n	800602e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006002:	f7fe f94d 	bl	80042a0 <HAL_GetTick>
 8006006:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006008:	e00a      	b.n	8006020 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800600a:	f7fe f949 	bl	80042a0 <HAL_GetTick>
 800600e:	4602      	mov	r2, r0
 8006010:	693b      	ldr	r3, [r7, #16]
 8006012:	1ad3      	subs	r3, r2, r3
 8006014:	f241 3288 	movw	r2, #5000	; 0x1388
 8006018:	4293      	cmp	r3, r2
 800601a:	d901      	bls.n	8006020 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800601c:	2303      	movs	r3, #3
 800601e:	e0bc      	b.n	800619a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006020:	4b61      	ldr	r3, [pc, #388]	; (80061a8 <HAL_RCC_OscConfig+0x4d8>)
 8006022:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006024:	f003 0302 	and.w	r3, r3, #2
 8006028:	2b00      	cmp	r3, #0
 800602a:	d0ee      	beq.n	800600a <HAL_RCC_OscConfig+0x33a>
 800602c:	e014      	b.n	8006058 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800602e:	f7fe f937 	bl	80042a0 <HAL_GetTick>
 8006032:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006034:	e00a      	b.n	800604c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006036:	f7fe f933 	bl	80042a0 <HAL_GetTick>
 800603a:	4602      	mov	r2, r0
 800603c:	693b      	ldr	r3, [r7, #16]
 800603e:	1ad3      	subs	r3, r2, r3
 8006040:	f241 3288 	movw	r2, #5000	; 0x1388
 8006044:	4293      	cmp	r3, r2
 8006046:	d901      	bls.n	800604c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006048:	2303      	movs	r3, #3
 800604a:	e0a6      	b.n	800619a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800604c:	4b56      	ldr	r3, [pc, #344]	; (80061a8 <HAL_RCC_OscConfig+0x4d8>)
 800604e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006050:	f003 0302 	and.w	r3, r3, #2
 8006054:	2b00      	cmp	r3, #0
 8006056:	d1ee      	bne.n	8006036 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006058:	7dfb      	ldrb	r3, [r7, #23]
 800605a:	2b01      	cmp	r3, #1
 800605c:	d105      	bne.n	800606a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800605e:	4b52      	ldr	r3, [pc, #328]	; (80061a8 <HAL_RCC_OscConfig+0x4d8>)
 8006060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006062:	4a51      	ldr	r2, [pc, #324]	; (80061a8 <HAL_RCC_OscConfig+0x4d8>)
 8006064:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006068:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	699b      	ldr	r3, [r3, #24]
 800606e:	2b00      	cmp	r3, #0
 8006070:	f000 8092 	beq.w	8006198 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006074:	4b4c      	ldr	r3, [pc, #304]	; (80061a8 <HAL_RCC_OscConfig+0x4d8>)
 8006076:	689b      	ldr	r3, [r3, #8]
 8006078:	f003 030c 	and.w	r3, r3, #12
 800607c:	2b08      	cmp	r3, #8
 800607e:	d05c      	beq.n	800613a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	699b      	ldr	r3, [r3, #24]
 8006084:	2b02      	cmp	r3, #2
 8006086:	d141      	bne.n	800610c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006088:	4b48      	ldr	r3, [pc, #288]	; (80061ac <HAL_RCC_OscConfig+0x4dc>)
 800608a:	2200      	movs	r2, #0
 800608c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800608e:	f7fe f907 	bl	80042a0 <HAL_GetTick>
 8006092:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006094:	e008      	b.n	80060a8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006096:	f7fe f903 	bl	80042a0 <HAL_GetTick>
 800609a:	4602      	mov	r2, r0
 800609c:	693b      	ldr	r3, [r7, #16]
 800609e:	1ad3      	subs	r3, r2, r3
 80060a0:	2b02      	cmp	r3, #2
 80060a2:	d901      	bls.n	80060a8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80060a4:	2303      	movs	r3, #3
 80060a6:	e078      	b.n	800619a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060a8:	4b3f      	ldr	r3, [pc, #252]	; (80061a8 <HAL_RCC_OscConfig+0x4d8>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d1f0      	bne.n	8006096 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	69da      	ldr	r2, [r3, #28]
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6a1b      	ldr	r3, [r3, #32]
 80060bc:	431a      	orrs	r2, r3
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c2:	019b      	lsls	r3, r3, #6
 80060c4:	431a      	orrs	r2, r3
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060ca:	085b      	lsrs	r3, r3, #1
 80060cc:	3b01      	subs	r3, #1
 80060ce:	041b      	lsls	r3, r3, #16
 80060d0:	431a      	orrs	r2, r3
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060d6:	061b      	lsls	r3, r3, #24
 80060d8:	4933      	ldr	r1, [pc, #204]	; (80061a8 <HAL_RCC_OscConfig+0x4d8>)
 80060da:	4313      	orrs	r3, r2
 80060dc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80060de:	4b33      	ldr	r3, [pc, #204]	; (80061ac <HAL_RCC_OscConfig+0x4dc>)
 80060e0:	2201      	movs	r2, #1
 80060e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060e4:	f7fe f8dc 	bl	80042a0 <HAL_GetTick>
 80060e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80060ea:	e008      	b.n	80060fe <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80060ec:	f7fe f8d8 	bl	80042a0 <HAL_GetTick>
 80060f0:	4602      	mov	r2, r0
 80060f2:	693b      	ldr	r3, [r7, #16]
 80060f4:	1ad3      	subs	r3, r2, r3
 80060f6:	2b02      	cmp	r3, #2
 80060f8:	d901      	bls.n	80060fe <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80060fa:	2303      	movs	r3, #3
 80060fc:	e04d      	b.n	800619a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80060fe:	4b2a      	ldr	r3, [pc, #168]	; (80061a8 <HAL_RCC_OscConfig+0x4d8>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006106:	2b00      	cmp	r3, #0
 8006108:	d0f0      	beq.n	80060ec <HAL_RCC_OscConfig+0x41c>
 800610a:	e045      	b.n	8006198 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800610c:	4b27      	ldr	r3, [pc, #156]	; (80061ac <HAL_RCC_OscConfig+0x4dc>)
 800610e:	2200      	movs	r2, #0
 8006110:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006112:	f7fe f8c5 	bl	80042a0 <HAL_GetTick>
 8006116:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006118:	e008      	b.n	800612c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800611a:	f7fe f8c1 	bl	80042a0 <HAL_GetTick>
 800611e:	4602      	mov	r2, r0
 8006120:	693b      	ldr	r3, [r7, #16]
 8006122:	1ad3      	subs	r3, r2, r3
 8006124:	2b02      	cmp	r3, #2
 8006126:	d901      	bls.n	800612c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006128:	2303      	movs	r3, #3
 800612a:	e036      	b.n	800619a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800612c:	4b1e      	ldr	r3, [pc, #120]	; (80061a8 <HAL_RCC_OscConfig+0x4d8>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006134:	2b00      	cmp	r3, #0
 8006136:	d1f0      	bne.n	800611a <HAL_RCC_OscConfig+0x44a>
 8006138:	e02e      	b.n	8006198 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	699b      	ldr	r3, [r3, #24]
 800613e:	2b01      	cmp	r3, #1
 8006140:	d101      	bne.n	8006146 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006142:	2301      	movs	r3, #1
 8006144:	e029      	b.n	800619a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006146:	4b18      	ldr	r3, [pc, #96]	; (80061a8 <HAL_RCC_OscConfig+0x4d8>)
 8006148:	685b      	ldr	r3, [r3, #4]
 800614a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	69db      	ldr	r3, [r3, #28]
 8006156:	429a      	cmp	r2, r3
 8006158:	d11c      	bne.n	8006194 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006164:	429a      	cmp	r2, r3
 8006166:	d115      	bne.n	8006194 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006168:	68fa      	ldr	r2, [r7, #12]
 800616a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800616e:	4013      	ands	r3, r2
 8006170:	687a      	ldr	r2, [r7, #4]
 8006172:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006174:	4293      	cmp	r3, r2
 8006176:	d10d      	bne.n	8006194 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006182:	429a      	cmp	r2, r3
 8006184:	d106      	bne.n	8006194 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006190:	429a      	cmp	r2, r3
 8006192:	d001      	beq.n	8006198 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8006194:	2301      	movs	r3, #1
 8006196:	e000      	b.n	800619a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8006198:	2300      	movs	r3, #0
}
 800619a:	4618      	mov	r0, r3
 800619c:	3718      	adds	r7, #24
 800619e:	46bd      	mov	sp, r7
 80061a0:	bd80      	pop	{r7, pc}
 80061a2:	bf00      	nop
 80061a4:	40007000 	.word	0x40007000
 80061a8:	40023800 	.word	0x40023800
 80061ac:	42470060 	.word	0x42470060

080061b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b084      	sub	sp, #16
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
 80061b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d101      	bne.n	80061c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80061c0:	2301      	movs	r3, #1
 80061c2:	e0cc      	b.n	800635e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80061c4:	4b68      	ldr	r3, [pc, #416]	; (8006368 <HAL_RCC_ClockConfig+0x1b8>)
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f003 030f 	and.w	r3, r3, #15
 80061cc:	683a      	ldr	r2, [r7, #0]
 80061ce:	429a      	cmp	r2, r3
 80061d0:	d90c      	bls.n	80061ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061d2:	4b65      	ldr	r3, [pc, #404]	; (8006368 <HAL_RCC_ClockConfig+0x1b8>)
 80061d4:	683a      	ldr	r2, [r7, #0]
 80061d6:	b2d2      	uxtb	r2, r2
 80061d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80061da:	4b63      	ldr	r3, [pc, #396]	; (8006368 <HAL_RCC_ClockConfig+0x1b8>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f003 030f 	and.w	r3, r3, #15
 80061e2:	683a      	ldr	r2, [r7, #0]
 80061e4:	429a      	cmp	r2, r3
 80061e6:	d001      	beq.n	80061ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80061e8:	2301      	movs	r3, #1
 80061ea:	e0b8      	b.n	800635e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f003 0302 	and.w	r3, r3, #2
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d020      	beq.n	800623a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f003 0304 	and.w	r3, r3, #4
 8006200:	2b00      	cmp	r3, #0
 8006202:	d005      	beq.n	8006210 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006204:	4b59      	ldr	r3, [pc, #356]	; (800636c <HAL_RCC_ClockConfig+0x1bc>)
 8006206:	689b      	ldr	r3, [r3, #8]
 8006208:	4a58      	ldr	r2, [pc, #352]	; (800636c <HAL_RCC_ClockConfig+0x1bc>)
 800620a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800620e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f003 0308 	and.w	r3, r3, #8
 8006218:	2b00      	cmp	r3, #0
 800621a:	d005      	beq.n	8006228 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800621c:	4b53      	ldr	r3, [pc, #332]	; (800636c <HAL_RCC_ClockConfig+0x1bc>)
 800621e:	689b      	ldr	r3, [r3, #8]
 8006220:	4a52      	ldr	r2, [pc, #328]	; (800636c <HAL_RCC_ClockConfig+0x1bc>)
 8006222:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006226:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006228:	4b50      	ldr	r3, [pc, #320]	; (800636c <HAL_RCC_ClockConfig+0x1bc>)
 800622a:	689b      	ldr	r3, [r3, #8]
 800622c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	689b      	ldr	r3, [r3, #8]
 8006234:	494d      	ldr	r1, [pc, #308]	; (800636c <HAL_RCC_ClockConfig+0x1bc>)
 8006236:	4313      	orrs	r3, r2
 8006238:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f003 0301 	and.w	r3, r3, #1
 8006242:	2b00      	cmp	r3, #0
 8006244:	d044      	beq.n	80062d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	685b      	ldr	r3, [r3, #4]
 800624a:	2b01      	cmp	r3, #1
 800624c:	d107      	bne.n	800625e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800624e:	4b47      	ldr	r3, [pc, #284]	; (800636c <HAL_RCC_ClockConfig+0x1bc>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006256:	2b00      	cmp	r3, #0
 8006258:	d119      	bne.n	800628e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800625a:	2301      	movs	r3, #1
 800625c:	e07f      	b.n	800635e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	685b      	ldr	r3, [r3, #4]
 8006262:	2b02      	cmp	r3, #2
 8006264:	d003      	beq.n	800626e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800626a:	2b03      	cmp	r3, #3
 800626c:	d107      	bne.n	800627e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800626e:	4b3f      	ldr	r3, [pc, #252]	; (800636c <HAL_RCC_ClockConfig+0x1bc>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006276:	2b00      	cmp	r3, #0
 8006278:	d109      	bne.n	800628e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800627a:	2301      	movs	r3, #1
 800627c:	e06f      	b.n	800635e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800627e:	4b3b      	ldr	r3, [pc, #236]	; (800636c <HAL_RCC_ClockConfig+0x1bc>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f003 0302 	and.w	r3, r3, #2
 8006286:	2b00      	cmp	r3, #0
 8006288:	d101      	bne.n	800628e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800628a:	2301      	movs	r3, #1
 800628c:	e067      	b.n	800635e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800628e:	4b37      	ldr	r3, [pc, #220]	; (800636c <HAL_RCC_ClockConfig+0x1bc>)
 8006290:	689b      	ldr	r3, [r3, #8]
 8006292:	f023 0203 	bic.w	r2, r3, #3
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	685b      	ldr	r3, [r3, #4]
 800629a:	4934      	ldr	r1, [pc, #208]	; (800636c <HAL_RCC_ClockConfig+0x1bc>)
 800629c:	4313      	orrs	r3, r2
 800629e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80062a0:	f7fd fffe 	bl	80042a0 <HAL_GetTick>
 80062a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062a6:	e00a      	b.n	80062be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80062a8:	f7fd fffa 	bl	80042a0 <HAL_GetTick>
 80062ac:	4602      	mov	r2, r0
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	1ad3      	subs	r3, r2, r3
 80062b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d901      	bls.n	80062be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80062ba:	2303      	movs	r3, #3
 80062bc:	e04f      	b.n	800635e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062be:	4b2b      	ldr	r3, [pc, #172]	; (800636c <HAL_RCC_ClockConfig+0x1bc>)
 80062c0:	689b      	ldr	r3, [r3, #8]
 80062c2:	f003 020c 	and.w	r2, r3, #12
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	685b      	ldr	r3, [r3, #4]
 80062ca:	009b      	lsls	r3, r3, #2
 80062cc:	429a      	cmp	r2, r3
 80062ce:	d1eb      	bne.n	80062a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80062d0:	4b25      	ldr	r3, [pc, #148]	; (8006368 <HAL_RCC_ClockConfig+0x1b8>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f003 030f 	and.w	r3, r3, #15
 80062d8:	683a      	ldr	r2, [r7, #0]
 80062da:	429a      	cmp	r2, r3
 80062dc:	d20c      	bcs.n	80062f8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062de:	4b22      	ldr	r3, [pc, #136]	; (8006368 <HAL_RCC_ClockConfig+0x1b8>)
 80062e0:	683a      	ldr	r2, [r7, #0]
 80062e2:	b2d2      	uxtb	r2, r2
 80062e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80062e6:	4b20      	ldr	r3, [pc, #128]	; (8006368 <HAL_RCC_ClockConfig+0x1b8>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f003 030f 	and.w	r3, r3, #15
 80062ee:	683a      	ldr	r2, [r7, #0]
 80062f0:	429a      	cmp	r2, r3
 80062f2:	d001      	beq.n	80062f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80062f4:	2301      	movs	r3, #1
 80062f6:	e032      	b.n	800635e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f003 0304 	and.w	r3, r3, #4
 8006300:	2b00      	cmp	r3, #0
 8006302:	d008      	beq.n	8006316 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006304:	4b19      	ldr	r3, [pc, #100]	; (800636c <HAL_RCC_ClockConfig+0x1bc>)
 8006306:	689b      	ldr	r3, [r3, #8]
 8006308:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	68db      	ldr	r3, [r3, #12]
 8006310:	4916      	ldr	r1, [pc, #88]	; (800636c <HAL_RCC_ClockConfig+0x1bc>)
 8006312:	4313      	orrs	r3, r2
 8006314:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f003 0308 	and.w	r3, r3, #8
 800631e:	2b00      	cmp	r3, #0
 8006320:	d009      	beq.n	8006336 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006322:	4b12      	ldr	r3, [pc, #72]	; (800636c <HAL_RCC_ClockConfig+0x1bc>)
 8006324:	689b      	ldr	r3, [r3, #8]
 8006326:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	691b      	ldr	r3, [r3, #16]
 800632e:	00db      	lsls	r3, r3, #3
 8006330:	490e      	ldr	r1, [pc, #56]	; (800636c <HAL_RCC_ClockConfig+0x1bc>)
 8006332:	4313      	orrs	r3, r2
 8006334:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006336:	f000 f821 	bl	800637c <HAL_RCC_GetSysClockFreq>
 800633a:	4602      	mov	r2, r0
 800633c:	4b0b      	ldr	r3, [pc, #44]	; (800636c <HAL_RCC_ClockConfig+0x1bc>)
 800633e:	689b      	ldr	r3, [r3, #8]
 8006340:	091b      	lsrs	r3, r3, #4
 8006342:	f003 030f 	and.w	r3, r3, #15
 8006346:	490a      	ldr	r1, [pc, #40]	; (8006370 <HAL_RCC_ClockConfig+0x1c0>)
 8006348:	5ccb      	ldrb	r3, [r1, r3]
 800634a:	fa22 f303 	lsr.w	r3, r2, r3
 800634e:	4a09      	ldr	r2, [pc, #36]	; (8006374 <HAL_RCC_ClockConfig+0x1c4>)
 8006350:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006352:	4b09      	ldr	r3, [pc, #36]	; (8006378 <HAL_RCC_ClockConfig+0x1c8>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4618      	mov	r0, r3
 8006358:	f7fb fbf4 	bl	8001b44 <HAL_InitTick>

  return HAL_OK;
 800635c:	2300      	movs	r3, #0
}
 800635e:	4618      	mov	r0, r3
 8006360:	3710      	adds	r7, #16
 8006362:	46bd      	mov	sp, r7
 8006364:	bd80      	pop	{r7, pc}
 8006366:	bf00      	nop
 8006368:	40023c00 	.word	0x40023c00
 800636c:	40023800 	.word	0x40023800
 8006370:	0800ce60 	.word	0x0800ce60
 8006374:	20000000 	.word	0x20000000
 8006378:	2000000c 	.word	0x2000000c

0800637c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800637c:	b5b0      	push	{r4, r5, r7, lr}
 800637e:	b084      	sub	sp, #16
 8006380:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006382:	2100      	movs	r1, #0
 8006384:	6079      	str	r1, [r7, #4]
 8006386:	2100      	movs	r1, #0
 8006388:	60f9      	str	r1, [r7, #12]
 800638a:	2100      	movs	r1, #0
 800638c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800638e:	2100      	movs	r1, #0
 8006390:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006392:	4952      	ldr	r1, [pc, #328]	; (80064dc <HAL_RCC_GetSysClockFreq+0x160>)
 8006394:	6889      	ldr	r1, [r1, #8]
 8006396:	f001 010c 	and.w	r1, r1, #12
 800639a:	2908      	cmp	r1, #8
 800639c:	d00d      	beq.n	80063ba <HAL_RCC_GetSysClockFreq+0x3e>
 800639e:	2908      	cmp	r1, #8
 80063a0:	f200 8094 	bhi.w	80064cc <HAL_RCC_GetSysClockFreq+0x150>
 80063a4:	2900      	cmp	r1, #0
 80063a6:	d002      	beq.n	80063ae <HAL_RCC_GetSysClockFreq+0x32>
 80063a8:	2904      	cmp	r1, #4
 80063aa:	d003      	beq.n	80063b4 <HAL_RCC_GetSysClockFreq+0x38>
 80063ac:	e08e      	b.n	80064cc <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80063ae:	4b4c      	ldr	r3, [pc, #304]	; (80064e0 <HAL_RCC_GetSysClockFreq+0x164>)
 80063b0:	60bb      	str	r3, [r7, #8]
       break;
 80063b2:	e08e      	b.n	80064d2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80063b4:	4b4b      	ldr	r3, [pc, #300]	; (80064e4 <HAL_RCC_GetSysClockFreq+0x168>)
 80063b6:	60bb      	str	r3, [r7, #8]
      break;
 80063b8:	e08b      	b.n	80064d2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80063ba:	4948      	ldr	r1, [pc, #288]	; (80064dc <HAL_RCC_GetSysClockFreq+0x160>)
 80063bc:	6849      	ldr	r1, [r1, #4]
 80063be:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80063c2:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80063c4:	4945      	ldr	r1, [pc, #276]	; (80064dc <HAL_RCC_GetSysClockFreq+0x160>)
 80063c6:	6849      	ldr	r1, [r1, #4]
 80063c8:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80063cc:	2900      	cmp	r1, #0
 80063ce:	d024      	beq.n	800641a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80063d0:	4942      	ldr	r1, [pc, #264]	; (80064dc <HAL_RCC_GetSysClockFreq+0x160>)
 80063d2:	6849      	ldr	r1, [r1, #4]
 80063d4:	0989      	lsrs	r1, r1, #6
 80063d6:	4608      	mov	r0, r1
 80063d8:	f04f 0100 	mov.w	r1, #0
 80063dc:	f240 14ff 	movw	r4, #511	; 0x1ff
 80063e0:	f04f 0500 	mov.w	r5, #0
 80063e4:	ea00 0204 	and.w	r2, r0, r4
 80063e8:	ea01 0305 	and.w	r3, r1, r5
 80063ec:	493d      	ldr	r1, [pc, #244]	; (80064e4 <HAL_RCC_GetSysClockFreq+0x168>)
 80063ee:	fb01 f003 	mul.w	r0, r1, r3
 80063f2:	2100      	movs	r1, #0
 80063f4:	fb01 f102 	mul.w	r1, r1, r2
 80063f8:	1844      	adds	r4, r0, r1
 80063fa:	493a      	ldr	r1, [pc, #232]	; (80064e4 <HAL_RCC_GetSysClockFreq+0x168>)
 80063fc:	fba2 0101 	umull	r0, r1, r2, r1
 8006400:	1863      	adds	r3, r4, r1
 8006402:	4619      	mov	r1, r3
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	461a      	mov	r2, r3
 8006408:	f04f 0300 	mov.w	r3, #0
 800640c:	f7fa fc0e 	bl	8000c2c <__aeabi_uldivmod>
 8006410:	4602      	mov	r2, r0
 8006412:	460b      	mov	r3, r1
 8006414:	4613      	mov	r3, r2
 8006416:	60fb      	str	r3, [r7, #12]
 8006418:	e04a      	b.n	80064b0 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800641a:	4b30      	ldr	r3, [pc, #192]	; (80064dc <HAL_RCC_GetSysClockFreq+0x160>)
 800641c:	685b      	ldr	r3, [r3, #4]
 800641e:	099b      	lsrs	r3, r3, #6
 8006420:	461a      	mov	r2, r3
 8006422:	f04f 0300 	mov.w	r3, #0
 8006426:	f240 10ff 	movw	r0, #511	; 0x1ff
 800642a:	f04f 0100 	mov.w	r1, #0
 800642e:	ea02 0400 	and.w	r4, r2, r0
 8006432:	ea03 0501 	and.w	r5, r3, r1
 8006436:	4620      	mov	r0, r4
 8006438:	4629      	mov	r1, r5
 800643a:	f04f 0200 	mov.w	r2, #0
 800643e:	f04f 0300 	mov.w	r3, #0
 8006442:	014b      	lsls	r3, r1, #5
 8006444:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006448:	0142      	lsls	r2, r0, #5
 800644a:	4610      	mov	r0, r2
 800644c:	4619      	mov	r1, r3
 800644e:	1b00      	subs	r0, r0, r4
 8006450:	eb61 0105 	sbc.w	r1, r1, r5
 8006454:	f04f 0200 	mov.w	r2, #0
 8006458:	f04f 0300 	mov.w	r3, #0
 800645c:	018b      	lsls	r3, r1, #6
 800645e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006462:	0182      	lsls	r2, r0, #6
 8006464:	1a12      	subs	r2, r2, r0
 8006466:	eb63 0301 	sbc.w	r3, r3, r1
 800646a:	f04f 0000 	mov.w	r0, #0
 800646e:	f04f 0100 	mov.w	r1, #0
 8006472:	00d9      	lsls	r1, r3, #3
 8006474:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006478:	00d0      	lsls	r0, r2, #3
 800647a:	4602      	mov	r2, r0
 800647c:	460b      	mov	r3, r1
 800647e:	1912      	adds	r2, r2, r4
 8006480:	eb45 0303 	adc.w	r3, r5, r3
 8006484:	f04f 0000 	mov.w	r0, #0
 8006488:	f04f 0100 	mov.w	r1, #0
 800648c:	0299      	lsls	r1, r3, #10
 800648e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006492:	0290      	lsls	r0, r2, #10
 8006494:	4602      	mov	r2, r0
 8006496:	460b      	mov	r3, r1
 8006498:	4610      	mov	r0, r2
 800649a:	4619      	mov	r1, r3
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	461a      	mov	r2, r3
 80064a0:	f04f 0300 	mov.w	r3, #0
 80064a4:	f7fa fbc2 	bl	8000c2c <__aeabi_uldivmod>
 80064a8:	4602      	mov	r2, r0
 80064aa:	460b      	mov	r3, r1
 80064ac:	4613      	mov	r3, r2
 80064ae:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80064b0:	4b0a      	ldr	r3, [pc, #40]	; (80064dc <HAL_RCC_GetSysClockFreq+0x160>)
 80064b2:	685b      	ldr	r3, [r3, #4]
 80064b4:	0c1b      	lsrs	r3, r3, #16
 80064b6:	f003 0303 	and.w	r3, r3, #3
 80064ba:	3301      	adds	r3, #1
 80064bc:	005b      	lsls	r3, r3, #1
 80064be:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80064c0:	68fa      	ldr	r2, [r7, #12]
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80064c8:	60bb      	str	r3, [r7, #8]
      break;
 80064ca:	e002      	b.n	80064d2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80064cc:	4b04      	ldr	r3, [pc, #16]	; (80064e0 <HAL_RCC_GetSysClockFreq+0x164>)
 80064ce:	60bb      	str	r3, [r7, #8]
      break;
 80064d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80064d2:	68bb      	ldr	r3, [r7, #8]
}
 80064d4:	4618      	mov	r0, r3
 80064d6:	3710      	adds	r7, #16
 80064d8:	46bd      	mov	sp, r7
 80064da:	bdb0      	pop	{r4, r5, r7, pc}
 80064dc:	40023800 	.word	0x40023800
 80064e0:	00f42400 	.word	0x00f42400
 80064e4:	00b71b00 	.word	0x00b71b00

080064e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80064e8:	b480      	push	{r7}
 80064ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80064ec:	4b03      	ldr	r3, [pc, #12]	; (80064fc <HAL_RCC_GetHCLKFreq+0x14>)
 80064ee:	681b      	ldr	r3, [r3, #0]
}
 80064f0:	4618      	mov	r0, r3
 80064f2:	46bd      	mov	sp, r7
 80064f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f8:	4770      	bx	lr
 80064fa:	bf00      	nop
 80064fc:	20000000 	.word	0x20000000

08006500 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006504:	f7ff fff0 	bl	80064e8 <HAL_RCC_GetHCLKFreq>
 8006508:	4602      	mov	r2, r0
 800650a:	4b05      	ldr	r3, [pc, #20]	; (8006520 <HAL_RCC_GetPCLK1Freq+0x20>)
 800650c:	689b      	ldr	r3, [r3, #8]
 800650e:	0a9b      	lsrs	r3, r3, #10
 8006510:	f003 0307 	and.w	r3, r3, #7
 8006514:	4903      	ldr	r1, [pc, #12]	; (8006524 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006516:	5ccb      	ldrb	r3, [r1, r3]
 8006518:	fa22 f303 	lsr.w	r3, r2, r3
}
 800651c:	4618      	mov	r0, r3
 800651e:	bd80      	pop	{r7, pc}
 8006520:	40023800 	.word	0x40023800
 8006524:	0800ce70 	.word	0x0800ce70

08006528 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800652c:	f7ff ffdc 	bl	80064e8 <HAL_RCC_GetHCLKFreq>
 8006530:	4602      	mov	r2, r0
 8006532:	4b05      	ldr	r3, [pc, #20]	; (8006548 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006534:	689b      	ldr	r3, [r3, #8]
 8006536:	0b5b      	lsrs	r3, r3, #13
 8006538:	f003 0307 	and.w	r3, r3, #7
 800653c:	4903      	ldr	r1, [pc, #12]	; (800654c <HAL_RCC_GetPCLK2Freq+0x24>)
 800653e:	5ccb      	ldrb	r3, [r1, r3]
 8006540:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006544:	4618      	mov	r0, r3
 8006546:	bd80      	pop	{r7, pc}
 8006548:	40023800 	.word	0x40023800
 800654c:	0800ce70 	.word	0x0800ce70

08006550 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006550:	b480      	push	{r7}
 8006552:	b083      	sub	sp, #12
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
 8006558:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	220f      	movs	r2, #15
 800655e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006560:	4b12      	ldr	r3, [pc, #72]	; (80065ac <HAL_RCC_GetClockConfig+0x5c>)
 8006562:	689b      	ldr	r3, [r3, #8]
 8006564:	f003 0203 	and.w	r2, r3, #3
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800656c:	4b0f      	ldr	r3, [pc, #60]	; (80065ac <HAL_RCC_GetClockConfig+0x5c>)
 800656e:	689b      	ldr	r3, [r3, #8]
 8006570:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006578:	4b0c      	ldr	r3, [pc, #48]	; (80065ac <HAL_RCC_GetClockConfig+0x5c>)
 800657a:	689b      	ldr	r3, [r3, #8]
 800657c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006584:	4b09      	ldr	r3, [pc, #36]	; (80065ac <HAL_RCC_GetClockConfig+0x5c>)
 8006586:	689b      	ldr	r3, [r3, #8]
 8006588:	08db      	lsrs	r3, r3, #3
 800658a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006592:	4b07      	ldr	r3, [pc, #28]	; (80065b0 <HAL_RCC_GetClockConfig+0x60>)
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f003 020f 	and.w	r2, r3, #15
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	601a      	str	r2, [r3, #0]
}
 800659e:	bf00      	nop
 80065a0:	370c      	adds	r7, #12
 80065a2:	46bd      	mov	sp, r7
 80065a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a8:	4770      	bx	lr
 80065aa:	bf00      	nop
 80065ac:	40023800 	.word	0x40023800
 80065b0:	40023c00 	.word	0x40023c00

080065b4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b082      	sub	sp, #8
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d101      	bne.n	80065c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80065c2:	2301      	movs	r3, #1
 80065c4:	e056      	b.n	8006674 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2200      	movs	r2, #0
 80065ca:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80065d2:	b2db      	uxtb	r3, r3
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d106      	bne.n	80065e6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2200      	movs	r2, #0
 80065dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80065e0:	6878      	ldr	r0, [r7, #4]
 80065e2:	f7fb f9ad 	bl	8001940 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2202      	movs	r2, #2
 80065ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	681a      	ldr	r2, [r3, #0]
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80065fc:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	685a      	ldr	r2, [r3, #4]
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	689b      	ldr	r3, [r3, #8]
 8006606:	431a      	orrs	r2, r3
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	68db      	ldr	r3, [r3, #12]
 800660c:	431a      	orrs	r2, r3
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	691b      	ldr	r3, [r3, #16]
 8006612:	431a      	orrs	r2, r3
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	695b      	ldr	r3, [r3, #20]
 8006618:	431a      	orrs	r2, r3
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	699b      	ldr	r3, [r3, #24]
 800661e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006622:	431a      	orrs	r2, r3
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	69db      	ldr	r3, [r3, #28]
 8006628:	431a      	orrs	r2, r3
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6a1b      	ldr	r3, [r3, #32]
 800662e:	ea42 0103 	orr.w	r1, r2, r3
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	430a      	orrs	r2, r1
 800663c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	699b      	ldr	r3, [r3, #24]
 8006642:	0c1b      	lsrs	r3, r3, #16
 8006644:	f003 0104 	and.w	r1, r3, #4
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	430a      	orrs	r2, r1
 8006652:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	69da      	ldr	r2, [r3, #28]
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006662:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2200      	movs	r2, #0
 8006668:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2201      	movs	r2, #1
 800666e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006672:	2300      	movs	r3, #0
}
 8006674:	4618      	mov	r0, r3
 8006676:	3708      	adds	r7, #8
 8006678:	46bd      	mov	sp, r7
 800667a:	bd80      	pop	{r7, pc}

0800667c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b082      	sub	sp, #8
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d101      	bne.n	800668e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800668a:	2301      	movs	r3, #1
 800668c:	e01d      	b.n	80066ca <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006694:	b2db      	uxtb	r3, r3
 8006696:	2b00      	cmp	r3, #0
 8006698:	d106      	bne.n	80066a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2200      	movs	r2, #0
 800669e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80066a2:	6878      	ldr	r0, [r7, #4]
 80066a4:	f7fb fc46 	bl	8001f34 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2202      	movs	r2, #2
 80066ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681a      	ldr	r2, [r3, #0]
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	3304      	adds	r3, #4
 80066b8:	4619      	mov	r1, r3
 80066ba:	4610      	mov	r0, r2
 80066bc:	f000 fb50 	bl	8006d60 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2201      	movs	r2, #1
 80066c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80066c8:	2300      	movs	r3, #0
}
 80066ca:	4618      	mov	r0, r3
 80066cc:	3708      	adds	r7, #8
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bd80      	pop	{r7, pc}

080066d2 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80066d2:	b480      	push	{r7}
 80066d4:	b085      	sub	sp, #20
 80066d6:	af00      	add	r7, sp, #0
 80066d8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	68da      	ldr	r2, [r3, #12]
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f042 0201 	orr.w	r2, r2, #1
 80066e8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	689b      	ldr	r3, [r3, #8]
 80066f0:	f003 0307 	and.w	r3, r3, #7
 80066f4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	2b06      	cmp	r3, #6
 80066fa:	d007      	beq.n	800670c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	681a      	ldr	r2, [r3, #0]
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f042 0201 	orr.w	r2, r2, #1
 800670a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800670c:	2300      	movs	r3, #0
}
 800670e:	4618      	mov	r0, r3
 8006710:	3714      	adds	r7, #20
 8006712:	46bd      	mov	sp, r7
 8006714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006718:	4770      	bx	lr

0800671a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800671a:	b580      	push	{r7, lr}
 800671c:	b082      	sub	sp, #8
 800671e:	af00      	add	r7, sp, #0
 8006720:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d101      	bne.n	800672c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006728:	2301      	movs	r3, #1
 800672a:	e01d      	b.n	8006768 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006732:	b2db      	uxtb	r3, r3
 8006734:	2b00      	cmp	r3, #0
 8006736:	d106      	bne.n	8006746 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2200      	movs	r2, #0
 800673c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006740:	6878      	ldr	r0, [r7, #4]
 8006742:	f7fb fbd5 	bl	8001ef0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2202      	movs	r2, #2
 800674a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681a      	ldr	r2, [r3, #0]
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	3304      	adds	r3, #4
 8006756:	4619      	mov	r1, r3
 8006758:	4610      	mov	r0, r2
 800675a:	f000 fb01 	bl	8006d60 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2201      	movs	r2, #1
 8006762:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006766:	2300      	movs	r3, #0
}
 8006768:	4618      	mov	r0, r3
 800676a:	3708      	adds	r7, #8
 800676c:	46bd      	mov	sp, r7
 800676e:	bd80      	pop	{r7, pc}

08006770 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b084      	sub	sp, #16
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
 8006778:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	2201      	movs	r2, #1
 8006780:	6839      	ldr	r1, [r7, #0]
 8006782:	4618      	mov	r0, r3
 8006784:	f000 fdd6 	bl	8007334 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	4a15      	ldr	r2, [pc, #84]	; (80067e4 <HAL_TIM_PWM_Start+0x74>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d004      	beq.n	800679c <HAL_TIM_PWM_Start+0x2c>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4a14      	ldr	r2, [pc, #80]	; (80067e8 <HAL_TIM_PWM_Start+0x78>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d101      	bne.n	80067a0 <HAL_TIM_PWM_Start+0x30>
 800679c:	2301      	movs	r3, #1
 800679e:	e000      	b.n	80067a2 <HAL_TIM_PWM_Start+0x32>
 80067a0:	2300      	movs	r3, #0
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d007      	beq.n	80067b6 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80067b4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	689b      	ldr	r3, [r3, #8]
 80067bc:	f003 0307 	and.w	r3, r3, #7
 80067c0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	2b06      	cmp	r3, #6
 80067c6:	d007      	beq.n	80067d8 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	681a      	ldr	r2, [r3, #0]
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f042 0201 	orr.w	r2, r2, #1
 80067d6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80067d8:	2300      	movs	r3, #0
}
 80067da:	4618      	mov	r0, r3
 80067dc:	3710      	adds	r7, #16
 80067de:	46bd      	mov	sp, r7
 80067e0:	bd80      	pop	{r7, pc}
 80067e2:	bf00      	nop
 80067e4:	40010000 	.word	0x40010000
 80067e8:	40010400 	.word	0x40010400

080067ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b082      	sub	sp, #8
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	691b      	ldr	r3, [r3, #16]
 80067fa:	f003 0302 	and.w	r3, r3, #2
 80067fe:	2b02      	cmp	r3, #2
 8006800:	d122      	bne.n	8006848 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	68db      	ldr	r3, [r3, #12]
 8006808:	f003 0302 	and.w	r3, r3, #2
 800680c:	2b02      	cmp	r3, #2
 800680e:	d11b      	bne.n	8006848 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f06f 0202 	mvn.w	r2, #2
 8006818:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2201      	movs	r2, #1
 800681e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	699b      	ldr	r3, [r3, #24]
 8006826:	f003 0303 	and.w	r3, r3, #3
 800682a:	2b00      	cmp	r3, #0
 800682c:	d003      	beq.n	8006836 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	f000 fa78 	bl	8006d24 <HAL_TIM_IC_CaptureCallback>
 8006834:	e005      	b.n	8006842 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006836:	6878      	ldr	r0, [r7, #4]
 8006838:	f000 fa6a 	bl	8006d10 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800683c:	6878      	ldr	r0, [r7, #4]
 800683e:	f000 fa7b 	bl	8006d38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2200      	movs	r2, #0
 8006846:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	691b      	ldr	r3, [r3, #16]
 800684e:	f003 0304 	and.w	r3, r3, #4
 8006852:	2b04      	cmp	r3, #4
 8006854:	d122      	bne.n	800689c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	68db      	ldr	r3, [r3, #12]
 800685c:	f003 0304 	and.w	r3, r3, #4
 8006860:	2b04      	cmp	r3, #4
 8006862:	d11b      	bne.n	800689c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f06f 0204 	mvn.w	r2, #4
 800686c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2202      	movs	r2, #2
 8006872:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	699b      	ldr	r3, [r3, #24]
 800687a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800687e:	2b00      	cmp	r3, #0
 8006880:	d003      	beq.n	800688a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006882:	6878      	ldr	r0, [r7, #4]
 8006884:	f000 fa4e 	bl	8006d24 <HAL_TIM_IC_CaptureCallback>
 8006888:	e005      	b.n	8006896 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800688a:	6878      	ldr	r0, [r7, #4]
 800688c:	f000 fa40 	bl	8006d10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006890:	6878      	ldr	r0, [r7, #4]
 8006892:	f000 fa51 	bl	8006d38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2200      	movs	r2, #0
 800689a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	691b      	ldr	r3, [r3, #16]
 80068a2:	f003 0308 	and.w	r3, r3, #8
 80068a6:	2b08      	cmp	r3, #8
 80068a8:	d122      	bne.n	80068f0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	68db      	ldr	r3, [r3, #12]
 80068b0:	f003 0308 	and.w	r3, r3, #8
 80068b4:	2b08      	cmp	r3, #8
 80068b6:	d11b      	bne.n	80068f0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f06f 0208 	mvn.w	r2, #8
 80068c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2204      	movs	r2, #4
 80068c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	69db      	ldr	r3, [r3, #28]
 80068ce:	f003 0303 	and.w	r3, r3, #3
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d003      	beq.n	80068de <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068d6:	6878      	ldr	r0, [r7, #4]
 80068d8:	f000 fa24 	bl	8006d24 <HAL_TIM_IC_CaptureCallback>
 80068dc:	e005      	b.n	80068ea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068de:	6878      	ldr	r0, [r7, #4]
 80068e0:	f000 fa16 	bl	8006d10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068e4:	6878      	ldr	r0, [r7, #4]
 80068e6:	f000 fa27 	bl	8006d38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2200      	movs	r2, #0
 80068ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	691b      	ldr	r3, [r3, #16]
 80068f6:	f003 0310 	and.w	r3, r3, #16
 80068fa:	2b10      	cmp	r3, #16
 80068fc:	d122      	bne.n	8006944 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	68db      	ldr	r3, [r3, #12]
 8006904:	f003 0310 	and.w	r3, r3, #16
 8006908:	2b10      	cmp	r3, #16
 800690a:	d11b      	bne.n	8006944 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f06f 0210 	mvn.w	r2, #16
 8006914:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2208      	movs	r2, #8
 800691a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	69db      	ldr	r3, [r3, #28]
 8006922:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006926:	2b00      	cmp	r3, #0
 8006928:	d003      	beq.n	8006932 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800692a:	6878      	ldr	r0, [r7, #4]
 800692c:	f000 f9fa 	bl	8006d24 <HAL_TIM_IC_CaptureCallback>
 8006930:	e005      	b.n	800693e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006932:	6878      	ldr	r0, [r7, #4]
 8006934:	f000 f9ec 	bl	8006d10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006938:	6878      	ldr	r0, [r7, #4]
 800693a:	f000 f9fd 	bl	8006d38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2200      	movs	r2, #0
 8006942:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	691b      	ldr	r3, [r3, #16]
 800694a:	f003 0301 	and.w	r3, r3, #1
 800694e:	2b01      	cmp	r3, #1
 8006950:	d10e      	bne.n	8006970 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	68db      	ldr	r3, [r3, #12]
 8006958:	f003 0301 	and.w	r3, r3, #1
 800695c:	2b01      	cmp	r3, #1
 800695e:	d107      	bne.n	8006970 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f06f 0201 	mvn.w	r2, #1
 8006968:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f7fa ff9a 	bl	80018a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	691b      	ldr	r3, [r3, #16]
 8006976:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800697a:	2b80      	cmp	r3, #128	; 0x80
 800697c:	d10e      	bne.n	800699c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	68db      	ldr	r3, [r3, #12]
 8006984:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006988:	2b80      	cmp	r3, #128	; 0x80
 800698a:	d107      	bne.n	800699c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006994:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006996:	6878      	ldr	r0, [r7, #4]
 8006998:	f000 fd78 	bl	800748c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	691b      	ldr	r3, [r3, #16]
 80069a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069a6:	2b40      	cmp	r3, #64	; 0x40
 80069a8:	d10e      	bne.n	80069c8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	68db      	ldr	r3, [r3, #12]
 80069b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069b4:	2b40      	cmp	r3, #64	; 0x40
 80069b6:	d107      	bne.n	80069c8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80069c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80069c2:	6878      	ldr	r0, [r7, #4]
 80069c4:	f000 f9c2 	bl	8006d4c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	691b      	ldr	r3, [r3, #16]
 80069ce:	f003 0320 	and.w	r3, r3, #32
 80069d2:	2b20      	cmp	r3, #32
 80069d4:	d10e      	bne.n	80069f4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	68db      	ldr	r3, [r3, #12]
 80069dc:	f003 0320 	and.w	r3, r3, #32
 80069e0:	2b20      	cmp	r3, #32
 80069e2:	d107      	bne.n	80069f4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f06f 0220 	mvn.w	r2, #32
 80069ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	f000 fd42 	bl	8007478 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80069f4:	bf00      	nop
 80069f6:	3708      	adds	r7, #8
 80069f8:	46bd      	mov	sp, r7
 80069fa:	bd80      	pop	{r7, pc}

080069fc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b084      	sub	sp, #16
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	60f8      	str	r0, [r7, #12]
 8006a04:	60b9      	str	r1, [r7, #8]
 8006a06:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a0e:	2b01      	cmp	r3, #1
 8006a10:	d101      	bne.n	8006a16 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006a12:	2302      	movs	r3, #2
 8006a14:	e0b4      	b.n	8006b80 <HAL_TIM_PWM_ConfigChannel+0x184>
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	2201      	movs	r2, #1
 8006a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	2202      	movs	r2, #2
 8006a22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2b0c      	cmp	r3, #12
 8006a2a:	f200 809f 	bhi.w	8006b6c <HAL_TIM_PWM_ConfigChannel+0x170>
 8006a2e:	a201      	add	r2, pc, #4	; (adr r2, 8006a34 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8006a30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a34:	08006a69 	.word	0x08006a69
 8006a38:	08006b6d 	.word	0x08006b6d
 8006a3c:	08006b6d 	.word	0x08006b6d
 8006a40:	08006b6d 	.word	0x08006b6d
 8006a44:	08006aa9 	.word	0x08006aa9
 8006a48:	08006b6d 	.word	0x08006b6d
 8006a4c:	08006b6d 	.word	0x08006b6d
 8006a50:	08006b6d 	.word	0x08006b6d
 8006a54:	08006aeb 	.word	0x08006aeb
 8006a58:	08006b6d 	.word	0x08006b6d
 8006a5c:	08006b6d 	.word	0x08006b6d
 8006a60:	08006b6d 	.word	0x08006b6d
 8006a64:	08006b2b 	.word	0x08006b2b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	68b9      	ldr	r1, [r7, #8]
 8006a6e:	4618      	mov	r0, r3
 8006a70:	f000 fa16 	bl	8006ea0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	699a      	ldr	r2, [r3, #24]
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f042 0208 	orr.w	r2, r2, #8
 8006a82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	699a      	ldr	r2, [r3, #24]
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f022 0204 	bic.w	r2, r2, #4
 8006a92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	6999      	ldr	r1, [r3, #24]
 8006a9a:	68bb      	ldr	r3, [r7, #8]
 8006a9c:	691a      	ldr	r2, [r3, #16]
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	430a      	orrs	r2, r1
 8006aa4:	619a      	str	r2, [r3, #24]
      break;
 8006aa6:	e062      	b.n	8006b6e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	68b9      	ldr	r1, [r7, #8]
 8006aae:	4618      	mov	r0, r3
 8006ab0:	f000 fa66 	bl	8006f80 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	699a      	ldr	r2, [r3, #24]
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006ac2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	699a      	ldr	r2, [r3, #24]
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ad2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	6999      	ldr	r1, [r3, #24]
 8006ada:	68bb      	ldr	r3, [r7, #8]
 8006adc:	691b      	ldr	r3, [r3, #16]
 8006ade:	021a      	lsls	r2, r3, #8
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	430a      	orrs	r2, r1
 8006ae6:	619a      	str	r2, [r3, #24]
      break;
 8006ae8:	e041      	b.n	8006b6e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	68b9      	ldr	r1, [r7, #8]
 8006af0:	4618      	mov	r0, r3
 8006af2:	f000 fabb 	bl	800706c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	69da      	ldr	r2, [r3, #28]
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f042 0208 	orr.w	r2, r2, #8
 8006b04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	69da      	ldr	r2, [r3, #28]
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f022 0204 	bic.w	r2, r2, #4
 8006b14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	69d9      	ldr	r1, [r3, #28]
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	691a      	ldr	r2, [r3, #16]
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	430a      	orrs	r2, r1
 8006b26:	61da      	str	r2, [r3, #28]
      break;
 8006b28:	e021      	b.n	8006b6e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	68b9      	ldr	r1, [r7, #8]
 8006b30:	4618      	mov	r0, r3
 8006b32:	f000 fb0f 	bl	8007154 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	69da      	ldr	r2, [r3, #28]
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b44:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	69da      	ldr	r2, [r3, #28]
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	69d9      	ldr	r1, [r3, #28]
 8006b5c:	68bb      	ldr	r3, [r7, #8]
 8006b5e:	691b      	ldr	r3, [r3, #16]
 8006b60:	021a      	lsls	r2, r3, #8
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	430a      	orrs	r2, r1
 8006b68:	61da      	str	r2, [r3, #28]
      break;
 8006b6a:	e000      	b.n	8006b6e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8006b6c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	2201      	movs	r2, #1
 8006b72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	2200      	movs	r2, #0
 8006b7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006b7e:	2300      	movs	r3, #0
}
 8006b80:	4618      	mov	r0, r3
 8006b82:	3710      	adds	r7, #16
 8006b84:	46bd      	mov	sp, r7
 8006b86:	bd80      	pop	{r7, pc}

08006b88 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b084      	sub	sp, #16
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
 8006b90:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b98:	2b01      	cmp	r3, #1
 8006b9a:	d101      	bne.n	8006ba0 <HAL_TIM_ConfigClockSource+0x18>
 8006b9c:	2302      	movs	r3, #2
 8006b9e:	e0b3      	b.n	8006d08 <HAL_TIM_ConfigClockSource+0x180>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2201      	movs	r2, #1
 8006ba4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2202      	movs	r2, #2
 8006bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	689b      	ldr	r3, [r3, #8]
 8006bb6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006bbe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006bc6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	68fa      	ldr	r2, [r7, #12]
 8006bce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006bd8:	d03e      	beq.n	8006c58 <HAL_TIM_ConfigClockSource+0xd0>
 8006bda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006bde:	f200 8087 	bhi.w	8006cf0 <HAL_TIM_ConfigClockSource+0x168>
 8006be2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006be6:	f000 8085 	beq.w	8006cf4 <HAL_TIM_ConfigClockSource+0x16c>
 8006bea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bee:	d87f      	bhi.n	8006cf0 <HAL_TIM_ConfigClockSource+0x168>
 8006bf0:	2b70      	cmp	r3, #112	; 0x70
 8006bf2:	d01a      	beq.n	8006c2a <HAL_TIM_ConfigClockSource+0xa2>
 8006bf4:	2b70      	cmp	r3, #112	; 0x70
 8006bf6:	d87b      	bhi.n	8006cf0 <HAL_TIM_ConfigClockSource+0x168>
 8006bf8:	2b60      	cmp	r3, #96	; 0x60
 8006bfa:	d050      	beq.n	8006c9e <HAL_TIM_ConfigClockSource+0x116>
 8006bfc:	2b60      	cmp	r3, #96	; 0x60
 8006bfe:	d877      	bhi.n	8006cf0 <HAL_TIM_ConfigClockSource+0x168>
 8006c00:	2b50      	cmp	r3, #80	; 0x50
 8006c02:	d03c      	beq.n	8006c7e <HAL_TIM_ConfigClockSource+0xf6>
 8006c04:	2b50      	cmp	r3, #80	; 0x50
 8006c06:	d873      	bhi.n	8006cf0 <HAL_TIM_ConfigClockSource+0x168>
 8006c08:	2b40      	cmp	r3, #64	; 0x40
 8006c0a:	d058      	beq.n	8006cbe <HAL_TIM_ConfigClockSource+0x136>
 8006c0c:	2b40      	cmp	r3, #64	; 0x40
 8006c0e:	d86f      	bhi.n	8006cf0 <HAL_TIM_ConfigClockSource+0x168>
 8006c10:	2b30      	cmp	r3, #48	; 0x30
 8006c12:	d064      	beq.n	8006cde <HAL_TIM_ConfigClockSource+0x156>
 8006c14:	2b30      	cmp	r3, #48	; 0x30
 8006c16:	d86b      	bhi.n	8006cf0 <HAL_TIM_ConfigClockSource+0x168>
 8006c18:	2b20      	cmp	r3, #32
 8006c1a:	d060      	beq.n	8006cde <HAL_TIM_ConfigClockSource+0x156>
 8006c1c:	2b20      	cmp	r3, #32
 8006c1e:	d867      	bhi.n	8006cf0 <HAL_TIM_ConfigClockSource+0x168>
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d05c      	beq.n	8006cde <HAL_TIM_ConfigClockSource+0x156>
 8006c24:	2b10      	cmp	r3, #16
 8006c26:	d05a      	beq.n	8006cde <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8006c28:	e062      	b.n	8006cf0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6818      	ldr	r0, [r3, #0]
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	6899      	ldr	r1, [r3, #8]
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	685a      	ldr	r2, [r3, #4]
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	68db      	ldr	r3, [r3, #12]
 8006c3a:	f000 fb5b 	bl	80072f4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	689b      	ldr	r3, [r3, #8]
 8006c44:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006c4c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	68fa      	ldr	r2, [r7, #12]
 8006c54:	609a      	str	r2, [r3, #8]
      break;
 8006c56:	e04e      	b.n	8006cf6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	6818      	ldr	r0, [r3, #0]
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	6899      	ldr	r1, [r3, #8]
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	685a      	ldr	r2, [r3, #4]
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	68db      	ldr	r3, [r3, #12]
 8006c68:	f000 fb44 	bl	80072f4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	689a      	ldr	r2, [r3, #8]
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006c7a:	609a      	str	r2, [r3, #8]
      break;
 8006c7c:	e03b      	b.n	8006cf6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6818      	ldr	r0, [r3, #0]
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	6859      	ldr	r1, [r3, #4]
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	68db      	ldr	r3, [r3, #12]
 8006c8a:	461a      	mov	r2, r3
 8006c8c:	f000 fab8 	bl	8007200 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	2150      	movs	r1, #80	; 0x50
 8006c96:	4618      	mov	r0, r3
 8006c98:	f000 fb11 	bl	80072be <TIM_ITRx_SetConfig>
      break;
 8006c9c:	e02b      	b.n	8006cf6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6818      	ldr	r0, [r3, #0]
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	6859      	ldr	r1, [r3, #4]
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	68db      	ldr	r3, [r3, #12]
 8006caa:	461a      	mov	r2, r3
 8006cac:	f000 fad7 	bl	800725e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	2160      	movs	r1, #96	; 0x60
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	f000 fb01 	bl	80072be <TIM_ITRx_SetConfig>
      break;
 8006cbc:	e01b      	b.n	8006cf6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6818      	ldr	r0, [r3, #0]
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	6859      	ldr	r1, [r3, #4]
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	68db      	ldr	r3, [r3, #12]
 8006cca:	461a      	mov	r2, r3
 8006ccc:	f000 fa98 	bl	8007200 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	2140      	movs	r1, #64	; 0x40
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	f000 faf1 	bl	80072be <TIM_ITRx_SetConfig>
      break;
 8006cdc:	e00b      	b.n	8006cf6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681a      	ldr	r2, [r3, #0]
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	4619      	mov	r1, r3
 8006ce8:	4610      	mov	r0, r2
 8006cea:	f000 fae8 	bl	80072be <TIM_ITRx_SetConfig>
      break;
 8006cee:	e002      	b.n	8006cf6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006cf0:	bf00      	nop
 8006cf2:	e000      	b.n	8006cf6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006cf4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2201      	movs	r2, #1
 8006cfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2200      	movs	r2, #0
 8006d02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006d06:	2300      	movs	r3, #0
}
 8006d08:	4618      	mov	r0, r3
 8006d0a:	3710      	adds	r7, #16
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	bd80      	pop	{r7, pc}

08006d10 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006d10:	b480      	push	{r7}
 8006d12:	b083      	sub	sp, #12
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006d18:	bf00      	nop
 8006d1a:	370c      	adds	r7, #12
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d22:	4770      	bx	lr

08006d24 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006d24:	b480      	push	{r7}
 8006d26:	b083      	sub	sp, #12
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006d2c:	bf00      	nop
 8006d2e:	370c      	adds	r7, #12
 8006d30:	46bd      	mov	sp, r7
 8006d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d36:	4770      	bx	lr

08006d38 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006d38:	b480      	push	{r7}
 8006d3a:	b083      	sub	sp, #12
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006d40:	bf00      	nop
 8006d42:	370c      	adds	r7, #12
 8006d44:	46bd      	mov	sp, r7
 8006d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4a:	4770      	bx	lr

08006d4c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006d4c:	b480      	push	{r7}
 8006d4e:	b083      	sub	sp, #12
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006d54:	bf00      	nop
 8006d56:	370c      	adds	r7, #12
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5e:	4770      	bx	lr

08006d60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006d60:	b480      	push	{r7}
 8006d62:	b085      	sub	sp, #20
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
 8006d68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	4a40      	ldr	r2, [pc, #256]	; (8006e74 <TIM_Base_SetConfig+0x114>)
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d013      	beq.n	8006da0 <TIM_Base_SetConfig+0x40>
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d7e:	d00f      	beq.n	8006da0 <TIM_Base_SetConfig+0x40>
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	4a3d      	ldr	r2, [pc, #244]	; (8006e78 <TIM_Base_SetConfig+0x118>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d00b      	beq.n	8006da0 <TIM_Base_SetConfig+0x40>
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	4a3c      	ldr	r2, [pc, #240]	; (8006e7c <TIM_Base_SetConfig+0x11c>)
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d007      	beq.n	8006da0 <TIM_Base_SetConfig+0x40>
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	4a3b      	ldr	r2, [pc, #236]	; (8006e80 <TIM_Base_SetConfig+0x120>)
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d003      	beq.n	8006da0 <TIM_Base_SetConfig+0x40>
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	4a3a      	ldr	r2, [pc, #232]	; (8006e84 <TIM_Base_SetConfig+0x124>)
 8006d9c:	4293      	cmp	r3, r2
 8006d9e:	d108      	bne.n	8006db2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006da6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	685b      	ldr	r3, [r3, #4]
 8006dac:	68fa      	ldr	r2, [r7, #12]
 8006dae:	4313      	orrs	r3, r2
 8006db0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	4a2f      	ldr	r2, [pc, #188]	; (8006e74 <TIM_Base_SetConfig+0x114>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d02b      	beq.n	8006e12 <TIM_Base_SetConfig+0xb2>
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006dc0:	d027      	beq.n	8006e12 <TIM_Base_SetConfig+0xb2>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	4a2c      	ldr	r2, [pc, #176]	; (8006e78 <TIM_Base_SetConfig+0x118>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d023      	beq.n	8006e12 <TIM_Base_SetConfig+0xb2>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	4a2b      	ldr	r2, [pc, #172]	; (8006e7c <TIM_Base_SetConfig+0x11c>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d01f      	beq.n	8006e12 <TIM_Base_SetConfig+0xb2>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	4a2a      	ldr	r2, [pc, #168]	; (8006e80 <TIM_Base_SetConfig+0x120>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d01b      	beq.n	8006e12 <TIM_Base_SetConfig+0xb2>
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	4a29      	ldr	r2, [pc, #164]	; (8006e84 <TIM_Base_SetConfig+0x124>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d017      	beq.n	8006e12 <TIM_Base_SetConfig+0xb2>
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	4a28      	ldr	r2, [pc, #160]	; (8006e88 <TIM_Base_SetConfig+0x128>)
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d013      	beq.n	8006e12 <TIM_Base_SetConfig+0xb2>
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	4a27      	ldr	r2, [pc, #156]	; (8006e8c <TIM_Base_SetConfig+0x12c>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d00f      	beq.n	8006e12 <TIM_Base_SetConfig+0xb2>
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	4a26      	ldr	r2, [pc, #152]	; (8006e90 <TIM_Base_SetConfig+0x130>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d00b      	beq.n	8006e12 <TIM_Base_SetConfig+0xb2>
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	4a25      	ldr	r2, [pc, #148]	; (8006e94 <TIM_Base_SetConfig+0x134>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d007      	beq.n	8006e12 <TIM_Base_SetConfig+0xb2>
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	4a24      	ldr	r2, [pc, #144]	; (8006e98 <TIM_Base_SetConfig+0x138>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d003      	beq.n	8006e12 <TIM_Base_SetConfig+0xb2>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	4a23      	ldr	r2, [pc, #140]	; (8006e9c <TIM_Base_SetConfig+0x13c>)
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d108      	bne.n	8006e24 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	68db      	ldr	r3, [r3, #12]
 8006e1e:	68fa      	ldr	r2, [r7, #12]
 8006e20:	4313      	orrs	r3, r2
 8006e22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	695b      	ldr	r3, [r3, #20]
 8006e2e:	4313      	orrs	r3, r2
 8006e30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	68fa      	ldr	r2, [r7, #12]
 8006e36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	689a      	ldr	r2, [r3, #8]
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	681a      	ldr	r2, [r3, #0]
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	4a0a      	ldr	r2, [pc, #40]	; (8006e74 <TIM_Base_SetConfig+0x114>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d003      	beq.n	8006e58 <TIM_Base_SetConfig+0xf8>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	4a0c      	ldr	r2, [pc, #48]	; (8006e84 <TIM_Base_SetConfig+0x124>)
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d103      	bne.n	8006e60 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	691a      	ldr	r2, [r3, #16]
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2201      	movs	r2, #1
 8006e64:	615a      	str	r2, [r3, #20]
}
 8006e66:	bf00      	nop
 8006e68:	3714      	adds	r7, #20
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e70:	4770      	bx	lr
 8006e72:	bf00      	nop
 8006e74:	40010000 	.word	0x40010000
 8006e78:	40000400 	.word	0x40000400
 8006e7c:	40000800 	.word	0x40000800
 8006e80:	40000c00 	.word	0x40000c00
 8006e84:	40010400 	.word	0x40010400
 8006e88:	40014000 	.word	0x40014000
 8006e8c:	40014400 	.word	0x40014400
 8006e90:	40014800 	.word	0x40014800
 8006e94:	40001800 	.word	0x40001800
 8006e98:	40001c00 	.word	0x40001c00
 8006e9c:	40002000 	.word	0x40002000

08006ea0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ea0:	b480      	push	{r7}
 8006ea2:	b087      	sub	sp, #28
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
 8006ea8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6a1b      	ldr	r3, [r3, #32]
 8006eae:	f023 0201 	bic.w	r2, r3, #1
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6a1b      	ldr	r3, [r3, #32]
 8006eba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	685b      	ldr	r3, [r3, #4]
 8006ec0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	699b      	ldr	r3, [r3, #24]
 8006ec6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ece:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	f023 0303 	bic.w	r3, r3, #3
 8006ed6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	68fa      	ldr	r2, [r7, #12]
 8006ede:	4313      	orrs	r3, r2
 8006ee0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006ee2:	697b      	ldr	r3, [r7, #20]
 8006ee4:	f023 0302 	bic.w	r3, r3, #2
 8006ee8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	689b      	ldr	r3, [r3, #8]
 8006eee:	697a      	ldr	r2, [r7, #20]
 8006ef0:	4313      	orrs	r3, r2
 8006ef2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	4a20      	ldr	r2, [pc, #128]	; (8006f78 <TIM_OC1_SetConfig+0xd8>)
 8006ef8:	4293      	cmp	r3, r2
 8006efa:	d003      	beq.n	8006f04 <TIM_OC1_SetConfig+0x64>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	4a1f      	ldr	r2, [pc, #124]	; (8006f7c <TIM_OC1_SetConfig+0xdc>)
 8006f00:	4293      	cmp	r3, r2
 8006f02:	d10c      	bne.n	8006f1e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006f04:	697b      	ldr	r3, [r7, #20]
 8006f06:	f023 0308 	bic.w	r3, r3, #8
 8006f0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	68db      	ldr	r3, [r3, #12]
 8006f10:	697a      	ldr	r2, [r7, #20]
 8006f12:	4313      	orrs	r3, r2
 8006f14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006f16:	697b      	ldr	r3, [r7, #20]
 8006f18:	f023 0304 	bic.w	r3, r3, #4
 8006f1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	4a15      	ldr	r2, [pc, #84]	; (8006f78 <TIM_OC1_SetConfig+0xd8>)
 8006f22:	4293      	cmp	r3, r2
 8006f24:	d003      	beq.n	8006f2e <TIM_OC1_SetConfig+0x8e>
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	4a14      	ldr	r2, [pc, #80]	; (8006f7c <TIM_OC1_SetConfig+0xdc>)
 8006f2a:	4293      	cmp	r3, r2
 8006f2c:	d111      	bne.n	8006f52 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006f2e:	693b      	ldr	r3, [r7, #16]
 8006f30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006f36:	693b      	ldr	r3, [r7, #16]
 8006f38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006f3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	695b      	ldr	r3, [r3, #20]
 8006f42:	693a      	ldr	r2, [r7, #16]
 8006f44:	4313      	orrs	r3, r2
 8006f46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	699b      	ldr	r3, [r3, #24]
 8006f4c:	693a      	ldr	r2, [r7, #16]
 8006f4e:	4313      	orrs	r3, r2
 8006f50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	693a      	ldr	r2, [r7, #16]
 8006f56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	68fa      	ldr	r2, [r7, #12]
 8006f5c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	685a      	ldr	r2, [r3, #4]
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	697a      	ldr	r2, [r7, #20]
 8006f6a:	621a      	str	r2, [r3, #32]
}
 8006f6c:	bf00      	nop
 8006f6e:	371c      	adds	r7, #28
 8006f70:	46bd      	mov	sp, r7
 8006f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f76:	4770      	bx	lr
 8006f78:	40010000 	.word	0x40010000
 8006f7c:	40010400 	.word	0x40010400

08006f80 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006f80:	b480      	push	{r7}
 8006f82:	b087      	sub	sp, #28
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
 8006f88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6a1b      	ldr	r3, [r3, #32]
 8006f8e:	f023 0210 	bic.w	r2, r3, #16
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6a1b      	ldr	r3, [r3, #32]
 8006f9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	685b      	ldr	r3, [r3, #4]
 8006fa0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	699b      	ldr	r3, [r3, #24]
 8006fa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006fb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	021b      	lsls	r3, r3, #8
 8006fbe:	68fa      	ldr	r2, [r7, #12]
 8006fc0:	4313      	orrs	r3, r2
 8006fc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006fc4:	697b      	ldr	r3, [r7, #20]
 8006fc6:	f023 0320 	bic.w	r3, r3, #32
 8006fca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	689b      	ldr	r3, [r3, #8]
 8006fd0:	011b      	lsls	r3, r3, #4
 8006fd2:	697a      	ldr	r2, [r7, #20]
 8006fd4:	4313      	orrs	r3, r2
 8006fd6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	4a22      	ldr	r2, [pc, #136]	; (8007064 <TIM_OC2_SetConfig+0xe4>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d003      	beq.n	8006fe8 <TIM_OC2_SetConfig+0x68>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	4a21      	ldr	r2, [pc, #132]	; (8007068 <TIM_OC2_SetConfig+0xe8>)
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d10d      	bne.n	8007004 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006fe8:	697b      	ldr	r3, [r7, #20]
 8006fea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006fee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	68db      	ldr	r3, [r3, #12]
 8006ff4:	011b      	lsls	r3, r3, #4
 8006ff6:	697a      	ldr	r2, [r7, #20]
 8006ff8:	4313      	orrs	r3, r2
 8006ffa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006ffc:	697b      	ldr	r3, [r7, #20]
 8006ffe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007002:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	4a17      	ldr	r2, [pc, #92]	; (8007064 <TIM_OC2_SetConfig+0xe4>)
 8007008:	4293      	cmp	r3, r2
 800700a:	d003      	beq.n	8007014 <TIM_OC2_SetConfig+0x94>
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	4a16      	ldr	r2, [pc, #88]	; (8007068 <TIM_OC2_SetConfig+0xe8>)
 8007010:	4293      	cmp	r3, r2
 8007012:	d113      	bne.n	800703c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007014:	693b      	ldr	r3, [r7, #16]
 8007016:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800701a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800701c:	693b      	ldr	r3, [r7, #16]
 800701e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007022:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	695b      	ldr	r3, [r3, #20]
 8007028:	009b      	lsls	r3, r3, #2
 800702a:	693a      	ldr	r2, [r7, #16]
 800702c:	4313      	orrs	r3, r2
 800702e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	699b      	ldr	r3, [r3, #24]
 8007034:	009b      	lsls	r3, r3, #2
 8007036:	693a      	ldr	r2, [r7, #16]
 8007038:	4313      	orrs	r3, r2
 800703a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	693a      	ldr	r2, [r7, #16]
 8007040:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	68fa      	ldr	r2, [r7, #12]
 8007046:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	685a      	ldr	r2, [r3, #4]
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	697a      	ldr	r2, [r7, #20]
 8007054:	621a      	str	r2, [r3, #32]
}
 8007056:	bf00      	nop
 8007058:	371c      	adds	r7, #28
 800705a:	46bd      	mov	sp, r7
 800705c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007060:	4770      	bx	lr
 8007062:	bf00      	nop
 8007064:	40010000 	.word	0x40010000
 8007068:	40010400 	.word	0x40010400

0800706c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800706c:	b480      	push	{r7}
 800706e:	b087      	sub	sp, #28
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
 8007074:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6a1b      	ldr	r3, [r3, #32]
 800707a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6a1b      	ldr	r3, [r3, #32]
 8007086:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	685b      	ldr	r3, [r3, #4]
 800708c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	69db      	ldr	r3, [r3, #28]
 8007092:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800709a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	f023 0303 	bic.w	r3, r3, #3
 80070a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	68fa      	ldr	r2, [r7, #12]
 80070aa:	4313      	orrs	r3, r2
 80070ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80070ae:	697b      	ldr	r3, [r7, #20]
 80070b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80070b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	689b      	ldr	r3, [r3, #8]
 80070ba:	021b      	lsls	r3, r3, #8
 80070bc:	697a      	ldr	r2, [r7, #20]
 80070be:	4313      	orrs	r3, r2
 80070c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	4a21      	ldr	r2, [pc, #132]	; (800714c <TIM_OC3_SetConfig+0xe0>)
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d003      	beq.n	80070d2 <TIM_OC3_SetConfig+0x66>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	4a20      	ldr	r2, [pc, #128]	; (8007150 <TIM_OC3_SetConfig+0xe4>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d10d      	bne.n	80070ee <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80070d2:	697b      	ldr	r3, [r7, #20]
 80070d4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80070d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	68db      	ldr	r3, [r3, #12]
 80070de:	021b      	lsls	r3, r3, #8
 80070e0:	697a      	ldr	r2, [r7, #20]
 80070e2:	4313      	orrs	r3, r2
 80070e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80070e6:	697b      	ldr	r3, [r7, #20]
 80070e8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80070ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	4a16      	ldr	r2, [pc, #88]	; (800714c <TIM_OC3_SetConfig+0xe0>)
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d003      	beq.n	80070fe <TIM_OC3_SetConfig+0x92>
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	4a15      	ldr	r2, [pc, #84]	; (8007150 <TIM_OC3_SetConfig+0xe4>)
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d113      	bne.n	8007126 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80070fe:	693b      	ldr	r3, [r7, #16]
 8007100:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007104:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007106:	693b      	ldr	r3, [r7, #16]
 8007108:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800710c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	695b      	ldr	r3, [r3, #20]
 8007112:	011b      	lsls	r3, r3, #4
 8007114:	693a      	ldr	r2, [r7, #16]
 8007116:	4313      	orrs	r3, r2
 8007118:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	699b      	ldr	r3, [r3, #24]
 800711e:	011b      	lsls	r3, r3, #4
 8007120:	693a      	ldr	r2, [r7, #16]
 8007122:	4313      	orrs	r3, r2
 8007124:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	693a      	ldr	r2, [r7, #16]
 800712a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	68fa      	ldr	r2, [r7, #12]
 8007130:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	685a      	ldr	r2, [r3, #4]
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	697a      	ldr	r2, [r7, #20]
 800713e:	621a      	str	r2, [r3, #32]
}
 8007140:	bf00      	nop
 8007142:	371c      	adds	r7, #28
 8007144:	46bd      	mov	sp, r7
 8007146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714a:	4770      	bx	lr
 800714c:	40010000 	.word	0x40010000
 8007150:	40010400 	.word	0x40010400

08007154 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007154:	b480      	push	{r7}
 8007156:	b087      	sub	sp, #28
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
 800715c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6a1b      	ldr	r3, [r3, #32]
 8007162:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6a1b      	ldr	r3, [r3, #32]
 800716e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	685b      	ldr	r3, [r3, #4]
 8007174:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	69db      	ldr	r3, [r3, #28]
 800717a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007182:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800718a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	021b      	lsls	r3, r3, #8
 8007192:	68fa      	ldr	r2, [r7, #12]
 8007194:	4313      	orrs	r3, r2
 8007196:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007198:	693b      	ldr	r3, [r7, #16]
 800719a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800719e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	689b      	ldr	r3, [r3, #8]
 80071a4:	031b      	lsls	r3, r3, #12
 80071a6:	693a      	ldr	r2, [r7, #16]
 80071a8:	4313      	orrs	r3, r2
 80071aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	4a12      	ldr	r2, [pc, #72]	; (80071f8 <TIM_OC4_SetConfig+0xa4>)
 80071b0:	4293      	cmp	r3, r2
 80071b2:	d003      	beq.n	80071bc <TIM_OC4_SetConfig+0x68>
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	4a11      	ldr	r2, [pc, #68]	; (80071fc <TIM_OC4_SetConfig+0xa8>)
 80071b8:	4293      	cmp	r3, r2
 80071ba:	d109      	bne.n	80071d0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80071bc:	697b      	ldr	r3, [r7, #20]
 80071be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80071c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	695b      	ldr	r3, [r3, #20]
 80071c8:	019b      	lsls	r3, r3, #6
 80071ca:	697a      	ldr	r2, [r7, #20]
 80071cc:	4313      	orrs	r3, r2
 80071ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	697a      	ldr	r2, [r7, #20]
 80071d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	68fa      	ldr	r2, [r7, #12]
 80071da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	685a      	ldr	r2, [r3, #4]
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	693a      	ldr	r2, [r7, #16]
 80071e8:	621a      	str	r2, [r3, #32]
}
 80071ea:	bf00      	nop
 80071ec:	371c      	adds	r7, #28
 80071ee:	46bd      	mov	sp, r7
 80071f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f4:	4770      	bx	lr
 80071f6:	bf00      	nop
 80071f8:	40010000 	.word	0x40010000
 80071fc:	40010400 	.word	0x40010400

08007200 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007200:	b480      	push	{r7}
 8007202:	b087      	sub	sp, #28
 8007204:	af00      	add	r7, sp, #0
 8007206:	60f8      	str	r0, [r7, #12]
 8007208:	60b9      	str	r1, [r7, #8]
 800720a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	6a1b      	ldr	r3, [r3, #32]
 8007210:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	6a1b      	ldr	r3, [r3, #32]
 8007216:	f023 0201 	bic.w	r2, r3, #1
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	699b      	ldr	r3, [r3, #24]
 8007222:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007224:	693b      	ldr	r3, [r7, #16]
 8007226:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800722a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	011b      	lsls	r3, r3, #4
 8007230:	693a      	ldr	r2, [r7, #16]
 8007232:	4313      	orrs	r3, r2
 8007234:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007236:	697b      	ldr	r3, [r7, #20]
 8007238:	f023 030a 	bic.w	r3, r3, #10
 800723c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800723e:	697a      	ldr	r2, [r7, #20]
 8007240:	68bb      	ldr	r3, [r7, #8]
 8007242:	4313      	orrs	r3, r2
 8007244:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	693a      	ldr	r2, [r7, #16]
 800724a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	697a      	ldr	r2, [r7, #20]
 8007250:	621a      	str	r2, [r3, #32]
}
 8007252:	bf00      	nop
 8007254:	371c      	adds	r7, #28
 8007256:	46bd      	mov	sp, r7
 8007258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725c:	4770      	bx	lr

0800725e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800725e:	b480      	push	{r7}
 8007260:	b087      	sub	sp, #28
 8007262:	af00      	add	r7, sp, #0
 8007264:	60f8      	str	r0, [r7, #12]
 8007266:	60b9      	str	r1, [r7, #8]
 8007268:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	6a1b      	ldr	r3, [r3, #32]
 800726e:	f023 0210 	bic.w	r2, r3, #16
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	699b      	ldr	r3, [r3, #24]
 800727a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	6a1b      	ldr	r3, [r3, #32]
 8007280:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007282:	697b      	ldr	r3, [r7, #20]
 8007284:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007288:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	031b      	lsls	r3, r3, #12
 800728e:	697a      	ldr	r2, [r7, #20]
 8007290:	4313      	orrs	r3, r2
 8007292:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007294:	693b      	ldr	r3, [r7, #16]
 8007296:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800729a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800729c:	68bb      	ldr	r3, [r7, #8]
 800729e:	011b      	lsls	r3, r3, #4
 80072a0:	693a      	ldr	r2, [r7, #16]
 80072a2:	4313      	orrs	r3, r2
 80072a4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	697a      	ldr	r2, [r7, #20]
 80072aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	693a      	ldr	r2, [r7, #16]
 80072b0:	621a      	str	r2, [r3, #32]
}
 80072b2:	bf00      	nop
 80072b4:	371c      	adds	r7, #28
 80072b6:	46bd      	mov	sp, r7
 80072b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072bc:	4770      	bx	lr

080072be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80072be:	b480      	push	{r7}
 80072c0:	b085      	sub	sp, #20
 80072c2:	af00      	add	r7, sp, #0
 80072c4:	6078      	str	r0, [r7, #4]
 80072c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	689b      	ldr	r3, [r3, #8]
 80072cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80072d6:	683a      	ldr	r2, [r7, #0]
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	4313      	orrs	r3, r2
 80072dc:	f043 0307 	orr.w	r3, r3, #7
 80072e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	68fa      	ldr	r2, [r7, #12]
 80072e6:	609a      	str	r2, [r3, #8]
}
 80072e8:	bf00      	nop
 80072ea:	3714      	adds	r7, #20
 80072ec:	46bd      	mov	sp, r7
 80072ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f2:	4770      	bx	lr

080072f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80072f4:	b480      	push	{r7}
 80072f6:	b087      	sub	sp, #28
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	60f8      	str	r0, [r7, #12]
 80072fc:	60b9      	str	r1, [r7, #8]
 80072fe:	607a      	str	r2, [r7, #4]
 8007300:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	689b      	ldr	r3, [r3, #8]
 8007306:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007308:	697b      	ldr	r3, [r7, #20]
 800730a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800730e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	021a      	lsls	r2, r3, #8
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	431a      	orrs	r2, r3
 8007318:	68bb      	ldr	r3, [r7, #8]
 800731a:	4313      	orrs	r3, r2
 800731c:	697a      	ldr	r2, [r7, #20]
 800731e:	4313      	orrs	r3, r2
 8007320:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	697a      	ldr	r2, [r7, #20]
 8007326:	609a      	str	r2, [r3, #8]
}
 8007328:	bf00      	nop
 800732a:	371c      	adds	r7, #28
 800732c:	46bd      	mov	sp, r7
 800732e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007332:	4770      	bx	lr

08007334 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007334:	b480      	push	{r7}
 8007336:	b087      	sub	sp, #28
 8007338:	af00      	add	r7, sp, #0
 800733a:	60f8      	str	r0, [r7, #12]
 800733c:	60b9      	str	r1, [r7, #8]
 800733e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007340:	68bb      	ldr	r3, [r7, #8]
 8007342:	f003 031f 	and.w	r3, r3, #31
 8007346:	2201      	movs	r2, #1
 8007348:	fa02 f303 	lsl.w	r3, r2, r3
 800734c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	6a1a      	ldr	r2, [r3, #32]
 8007352:	697b      	ldr	r3, [r7, #20]
 8007354:	43db      	mvns	r3, r3
 8007356:	401a      	ands	r2, r3
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	6a1a      	ldr	r2, [r3, #32]
 8007360:	68bb      	ldr	r3, [r7, #8]
 8007362:	f003 031f 	and.w	r3, r3, #31
 8007366:	6879      	ldr	r1, [r7, #4]
 8007368:	fa01 f303 	lsl.w	r3, r1, r3
 800736c:	431a      	orrs	r2, r3
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	621a      	str	r2, [r3, #32]
}
 8007372:	bf00      	nop
 8007374:	371c      	adds	r7, #28
 8007376:	46bd      	mov	sp, r7
 8007378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737c:	4770      	bx	lr
	...

08007380 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007380:	b480      	push	{r7}
 8007382:	b085      	sub	sp, #20
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
 8007388:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007390:	2b01      	cmp	r3, #1
 8007392:	d101      	bne.n	8007398 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007394:	2302      	movs	r3, #2
 8007396:	e05a      	b.n	800744e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2201      	movs	r2, #1
 800739c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2202      	movs	r2, #2
 80073a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	685b      	ldr	r3, [r3, #4]
 80073ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	689b      	ldr	r3, [r3, #8]
 80073b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	68fa      	ldr	r2, [r7, #12]
 80073c6:	4313      	orrs	r3, r2
 80073c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	68fa      	ldr	r2, [r7, #12]
 80073d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	4a21      	ldr	r2, [pc, #132]	; (800745c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80073d8:	4293      	cmp	r3, r2
 80073da:	d022      	beq.n	8007422 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073e4:	d01d      	beq.n	8007422 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	4a1d      	ldr	r2, [pc, #116]	; (8007460 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80073ec:	4293      	cmp	r3, r2
 80073ee:	d018      	beq.n	8007422 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	4a1b      	ldr	r2, [pc, #108]	; (8007464 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80073f6:	4293      	cmp	r3, r2
 80073f8:	d013      	beq.n	8007422 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	4a1a      	ldr	r2, [pc, #104]	; (8007468 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007400:	4293      	cmp	r3, r2
 8007402:	d00e      	beq.n	8007422 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	4a18      	ldr	r2, [pc, #96]	; (800746c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800740a:	4293      	cmp	r3, r2
 800740c:	d009      	beq.n	8007422 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	4a17      	ldr	r2, [pc, #92]	; (8007470 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007414:	4293      	cmp	r3, r2
 8007416:	d004      	beq.n	8007422 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	4a15      	ldr	r2, [pc, #84]	; (8007474 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800741e:	4293      	cmp	r3, r2
 8007420:	d10c      	bne.n	800743c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007422:	68bb      	ldr	r3, [r7, #8]
 8007424:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007428:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	685b      	ldr	r3, [r3, #4]
 800742e:	68ba      	ldr	r2, [r7, #8]
 8007430:	4313      	orrs	r3, r2
 8007432:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	68ba      	ldr	r2, [r7, #8]
 800743a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2201      	movs	r2, #1
 8007440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2200      	movs	r2, #0
 8007448:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800744c:	2300      	movs	r3, #0
}
 800744e:	4618      	mov	r0, r3
 8007450:	3714      	adds	r7, #20
 8007452:	46bd      	mov	sp, r7
 8007454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007458:	4770      	bx	lr
 800745a:	bf00      	nop
 800745c:	40010000 	.word	0x40010000
 8007460:	40000400 	.word	0x40000400
 8007464:	40000800 	.word	0x40000800
 8007468:	40000c00 	.word	0x40000c00
 800746c:	40010400 	.word	0x40010400
 8007470:	40014000 	.word	0x40014000
 8007474:	40001800 	.word	0x40001800

08007478 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007478:	b480      	push	{r7}
 800747a:	b083      	sub	sp, #12
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007480:	bf00      	nop
 8007482:	370c      	adds	r7, #12
 8007484:	46bd      	mov	sp, r7
 8007486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748a:	4770      	bx	lr

0800748c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800748c:	b480      	push	{r7}
 800748e:	b083      	sub	sp, #12
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007494:	bf00      	nop
 8007496:	370c      	adds	r7, #12
 8007498:	46bd      	mov	sp, r7
 800749a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749e:	4770      	bx	lr

080074a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b082      	sub	sp, #8
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d101      	bne.n	80074b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80074ae:	2301      	movs	r3, #1
 80074b0:	e03f      	b.n	8007532 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80074b8:	b2db      	uxtb	r3, r3
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d106      	bne.n	80074cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2200      	movs	r2, #0
 80074c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	f7fa fe38 	bl	800213c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2224      	movs	r2, #36	; 0x24
 80074d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	68da      	ldr	r2, [r3, #12]
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80074e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80074e4:	6878      	ldr	r0, [r7, #4]
 80074e6:	f000 fc41 	bl	8007d6c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	691a      	ldr	r2, [r3, #16]
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80074f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	695a      	ldr	r2, [r3, #20]
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007508:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	68da      	ldr	r2, [r3, #12]
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007518:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2200      	movs	r2, #0
 800751e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2220      	movs	r2, #32
 8007524:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2220      	movs	r2, #32
 800752c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8007530:	2300      	movs	r3, #0
}
 8007532:	4618      	mov	r0, r3
 8007534:	3708      	adds	r7, #8
 8007536:	46bd      	mov	sp, r7
 8007538:	bd80      	pop	{r7, pc}
	...

0800753c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800753c:	b580      	push	{r7, lr}
 800753e:	b086      	sub	sp, #24
 8007540:	af00      	add	r7, sp, #0
 8007542:	60f8      	str	r0, [r7, #12]
 8007544:	60b9      	str	r1, [r7, #8]
 8007546:	4613      	mov	r3, r2
 8007548:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007550:	b2db      	uxtb	r3, r3
 8007552:	2b20      	cmp	r3, #32
 8007554:	d166      	bne.n	8007624 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8007556:	68bb      	ldr	r3, [r7, #8]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d002      	beq.n	8007562 <HAL_UART_Receive_DMA+0x26>
 800755c:	88fb      	ldrh	r3, [r7, #6]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d101      	bne.n	8007566 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8007562:	2301      	movs	r3, #1
 8007564:	e05f      	b.n	8007626 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800756c:	2b01      	cmp	r3, #1
 800756e:	d101      	bne.n	8007574 <HAL_UART_Receive_DMA+0x38>
 8007570:	2302      	movs	r3, #2
 8007572:	e058      	b.n	8007626 <HAL_UART_Receive_DMA+0xea>
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	2201      	movs	r2, #1
 8007578:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800757c:	68ba      	ldr	r2, [r7, #8]
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	88fa      	ldrh	r2, [r7, #6]
 8007586:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	2200      	movs	r2, #0
 800758c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	2222      	movs	r2, #34	; 0x22
 8007592:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800759a:	4a25      	ldr	r2, [pc, #148]	; (8007630 <HAL_UART_Receive_DMA+0xf4>)
 800759c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075a2:	4a24      	ldr	r2, [pc, #144]	; (8007634 <HAL_UART_Receive_DMA+0xf8>)
 80075a4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075aa:	4a23      	ldr	r2, [pc, #140]	; (8007638 <HAL_UART_Receive_DMA+0xfc>)
 80075ac:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075b2:	2200      	movs	r2, #0
 80075b4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 80075b6:	f107 0308 	add.w	r3, r7, #8
 80075ba:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	3304      	adds	r3, #4
 80075c6:	4619      	mov	r1, r3
 80075c8:	697b      	ldr	r3, [r7, #20]
 80075ca:	681a      	ldr	r2, [r3, #0]
 80075cc:	88fb      	ldrh	r3, [r7, #6]
 80075ce:	f7fd feb1 	bl	8005334 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 80075d2:	2300      	movs	r3, #0
 80075d4:	613b      	str	r3, [r7, #16]
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	613b      	str	r3, [r7, #16]
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	685b      	ldr	r3, [r3, #4]
 80075e4:	613b      	str	r3, [r7, #16]
 80075e6:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	2200      	movs	r2, #0
 80075ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	68da      	ldr	r2, [r3, #12]
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80075fe:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	695a      	ldr	r2, [r3, #20]
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f042 0201 	orr.w	r2, r2, #1
 800760e:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	695a      	ldr	r2, [r3, #20]
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800761e:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8007620:	2300      	movs	r3, #0
 8007622:	e000      	b.n	8007626 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8007624:	2302      	movs	r3, #2
  }
}
 8007626:	4618      	mov	r0, r3
 8007628:	3718      	adds	r7, #24
 800762a:	46bd      	mov	sp, r7
 800762c:	bd80      	pop	{r7, pc}
 800762e:	bf00      	nop
 8007630:	080079e5 	.word	0x080079e5
 8007634:	08007a4d 	.word	0x08007a4d
 8007638:	08007a69 	.word	0x08007a69

0800763c <HAL_UART_DMAPause>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAPause(UART_HandleTypeDef *huart)
{
 800763c:	b480      	push	{r7}
 800763e:	b085      	sub	sp, #20
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007644:	2300      	movs	r3, #0
 8007646:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800764e:	2b01      	cmp	r3, #1
 8007650:	d101      	bne.n	8007656 <HAL_UART_DMAPause+0x1a>
 8007652:	2302      	movs	r3, #2
 8007654:	e050      	b.n	80076f8 <HAL_UART_DMAPause+0xbc>
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2201      	movs	r2, #1
 800765a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	695b      	ldr	r3, [r3, #20]
 8007664:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007668:	2b80      	cmp	r3, #128	; 0x80
 800766a:	bf0c      	ite	eq
 800766c:	2301      	moveq	r3, #1
 800766e:	2300      	movne	r3, #0
 8007670:	b2db      	uxtb	r3, r3
 8007672:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800767a:	b2db      	uxtb	r3, r3
 800767c:	2b21      	cmp	r3, #33	; 0x21
 800767e:	d10a      	bne.n	8007696 <HAL_UART_DMAPause+0x5a>
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d007      	beq.n	8007696 <HAL_UART_DMAPause+0x5a>
  {
    /* Disable the UART DMA Tx request */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	695a      	ldr	r2, [r3, #20]
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007694:	615a      	str	r2, [r3, #20]
  }

  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	695b      	ldr	r3, [r3, #20]
 800769c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076a0:	2b40      	cmp	r3, #64	; 0x40
 80076a2:	bf0c      	ite	eq
 80076a4:	2301      	moveq	r3, #1
 80076a6:	2300      	movne	r3, #0
 80076a8:	b2db      	uxtb	r3, r3
 80076aa:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80076b2:	b2db      	uxtb	r3, r3
 80076b4:	2b22      	cmp	r3, #34	; 0x22
 80076b6:	d11a      	bne.n	80076ee <HAL_UART_DMAPause+0xb2>
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d017      	beq.n	80076ee <HAL_UART_DMAPause+0xb2>
  {
    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	68da      	ldr	r2, [r3, #12]
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80076cc:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	695a      	ldr	r2, [r3, #20]
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f022 0201 	bic.w	r2, r2, #1
 80076dc:	615a      	str	r2, [r3, #20]

    /* Disable the UART DMA Rx request */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	695a      	ldr	r2, [r3, #20]
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80076ec:	615a      	str	r2, [r3, #20]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	2200      	movs	r2, #0
 80076f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80076f6:	2300      	movs	r3, #0
}
 80076f8:	4618      	mov	r0, r3
 80076fa:	3714      	adds	r7, #20
 80076fc:	46bd      	mov	sp, r7
 80076fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007702:	4770      	bx	lr

08007704 <HAL_UART_DMAResume>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAResume(UART_HandleTypeDef *huart)
{
 8007704:	b480      	push	{r7}
 8007706:	b085      	sub	sp, #20
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007712:	2b01      	cmp	r3, #1
 8007714:	d101      	bne.n	800771a <HAL_UART_DMAResume+0x16>
 8007716:	2302      	movs	r3, #2
 8007718:	e03f      	b.n	800779a <HAL_UART_DMAResume+0x96>
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2201      	movs	r2, #1
 800771e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007728:	b2db      	uxtb	r3, r3
 800772a:	2b21      	cmp	r3, #33	; 0x21
 800772c:	d107      	bne.n	800773e <HAL_UART_DMAResume+0x3a>
  {
    /* Enable the UART DMA Tx request */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	695a      	ldr	r2, [r3, #20]
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800773c:	615a      	str	r2, [r3, #20]
  }

  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007744:	b2db      	uxtb	r3, r3
 8007746:	2b22      	cmp	r3, #34	; 0x22
 8007748:	d122      	bne.n	8007790 <HAL_UART_DMAResume+0x8c>
  {
    /* Clear the Overrun flag before resuming the Rx transfer*/
    __HAL_UART_CLEAR_OREFLAG(huart);
 800774a:	2300      	movs	r3, #0
 800774c:	60fb      	str	r3, [r7, #12]
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	60fb      	str	r3, [r7, #12]
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	685b      	ldr	r3, [r3, #4]
 800775c:	60fb      	str	r3, [r7, #12]
 800775e:	68fb      	ldr	r3, [r7, #12]

    /* Reenable PE and ERR (Frame error, noise error, overrun error) interrupts */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	68da      	ldr	r2, [r3, #12]
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800776e:	60da      	str	r2, [r3, #12]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	695a      	ldr	r2, [r3, #20]
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f042 0201 	orr.w	r2, r2, #1
 800777e:	615a      	str	r2, [r3, #20]

    /* Enable the UART DMA Rx request */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	695a      	ldr	r2, [r3, #20]
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800778e:	615a      	str	r2, [r3, #20]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2200      	movs	r2, #0
 8007794:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8007798:	2300      	movs	r3, #0
}
 800779a:	4618      	mov	r0, r3
 800779c:	3714      	adds	r7, #20
 800779e:	46bd      	mov	sp, r7
 80077a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a4:	4770      	bx	lr
	...

080077a8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b088      	sub	sp, #32
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	68db      	ldr	r3, [r3, #12]
 80077be:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	695b      	ldr	r3, [r3, #20]
 80077c6:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80077c8:	2300      	movs	r3, #0
 80077ca:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80077cc:	2300      	movs	r3, #0
 80077ce:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80077d0:	69fb      	ldr	r3, [r7, #28]
 80077d2:	f003 030f 	and.w	r3, r3, #15
 80077d6:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80077d8:	693b      	ldr	r3, [r7, #16]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d10d      	bne.n	80077fa <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80077de:	69fb      	ldr	r3, [r7, #28]
 80077e0:	f003 0320 	and.w	r3, r3, #32
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d008      	beq.n	80077fa <HAL_UART_IRQHandler+0x52>
 80077e8:	69bb      	ldr	r3, [r7, #24]
 80077ea:	f003 0320 	and.w	r3, r3, #32
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d003      	beq.n	80077fa <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f000 fa38 	bl	8007c68 <UART_Receive_IT>
      return;
 80077f8:	e0d0      	b.n	800799c <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80077fa:	693b      	ldr	r3, [r7, #16]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	f000 80b0 	beq.w	8007962 <HAL_UART_IRQHandler+0x1ba>
 8007802:	697b      	ldr	r3, [r7, #20]
 8007804:	f003 0301 	and.w	r3, r3, #1
 8007808:	2b00      	cmp	r3, #0
 800780a:	d105      	bne.n	8007818 <HAL_UART_IRQHandler+0x70>
 800780c:	69bb      	ldr	r3, [r7, #24]
 800780e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007812:	2b00      	cmp	r3, #0
 8007814:	f000 80a5 	beq.w	8007962 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007818:	69fb      	ldr	r3, [r7, #28]
 800781a:	f003 0301 	and.w	r3, r3, #1
 800781e:	2b00      	cmp	r3, #0
 8007820:	d00a      	beq.n	8007838 <HAL_UART_IRQHandler+0x90>
 8007822:	69bb      	ldr	r3, [r7, #24]
 8007824:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007828:	2b00      	cmp	r3, #0
 800782a:	d005      	beq.n	8007838 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007830:	f043 0201 	orr.w	r2, r3, #1
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007838:	69fb      	ldr	r3, [r7, #28]
 800783a:	f003 0304 	and.w	r3, r3, #4
 800783e:	2b00      	cmp	r3, #0
 8007840:	d00a      	beq.n	8007858 <HAL_UART_IRQHandler+0xb0>
 8007842:	697b      	ldr	r3, [r7, #20]
 8007844:	f003 0301 	and.w	r3, r3, #1
 8007848:	2b00      	cmp	r3, #0
 800784a:	d005      	beq.n	8007858 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007850:	f043 0202 	orr.w	r2, r3, #2
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007858:	69fb      	ldr	r3, [r7, #28]
 800785a:	f003 0302 	and.w	r3, r3, #2
 800785e:	2b00      	cmp	r3, #0
 8007860:	d00a      	beq.n	8007878 <HAL_UART_IRQHandler+0xd0>
 8007862:	697b      	ldr	r3, [r7, #20]
 8007864:	f003 0301 	and.w	r3, r3, #1
 8007868:	2b00      	cmp	r3, #0
 800786a:	d005      	beq.n	8007878 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007870:	f043 0204 	orr.w	r2, r3, #4
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8007878:	69fb      	ldr	r3, [r7, #28]
 800787a:	f003 0308 	and.w	r3, r3, #8
 800787e:	2b00      	cmp	r3, #0
 8007880:	d00f      	beq.n	80078a2 <HAL_UART_IRQHandler+0xfa>
 8007882:	69bb      	ldr	r3, [r7, #24]
 8007884:	f003 0320 	and.w	r3, r3, #32
 8007888:	2b00      	cmp	r3, #0
 800788a:	d104      	bne.n	8007896 <HAL_UART_IRQHandler+0xee>
 800788c:	697b      	ldr	r3, [r7, #20]
 800788e:	f003 0301 	and.w	r3, r3, #1
 8007892:	2b00      	cmp	r3, #0
 8007894:	d005      	beq.n	80078a2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800789a:	f043 0208 	orr.w	r2, r3, #8
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d077      	beq.n	800799a <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80078aa:	69fb      	ldr	r3, [r7, #28]
 80078ac:	f003 0320 	and.w	r3, r3, #32
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d007      	beq.n	80078c4 <HAL_UART_IRQHandler+0x11c>
 80078b4:	69bb      	ldr	r3, [r7, #24]
 80078b6:	f003 0320 	and.w	r3, r3, #32
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d002      	beq.n	80078c4 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80078be:	6878      	ldr	r0, [r7, #4]
 80078c0:	f000 f9d2 	bl	8007c68 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	695b      	ldr	r3, [r3, #20]
 80078ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078ce:	2b40      	cmp	r3, #64	; 0x40
 80078d0:	bf0c      	ite	eq
 80078d2:	2301      	moveq	r3, #1
 80078d4:	2300      	movne	r3, #0
 80078d6:	b2db      	uxtb	r3, r3
 80078d8:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078de:	f003 0308 	and.w	r3, r3, #8
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d102      	bne.n	80078ec <HAL_UART_IRQHandler+0x144>
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d031      	beq.n	8007950 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80078ec:	6878      	ldr	r0, [r7, #4]
 80078ee:	f000 f91b 	bl	8007b28 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	695b      	ldr	r3, [r3, #20]
 80078f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078fc:	2b40      	cmp	r3, #64	; 0x40
 80078fe:	d123      	bne.n	8007948 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	695a      	ldr	r2, [r3, #20]
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800790e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007914:	2b00      	cmp	r3, #0
 8007916:	d013      	beq.n	8007940 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800791c:	4a21      	ldr	r2, [pc, #132]	; (80079a4 <HAL_UART_IRQHandler+0x1fc>)
 800791e:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007924:	4618      	mov	r0, r3
 8007926:	f7fd fd5d 	bl	80053e4 <HAL_DMA_Abort_IT>
 800792a:	4603      	mov	r3, r0
 800792c:	2b00      	cmp	r3, #0
 800792e:	d016      	beq.n	800795e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007934:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007936:	687a      	ldr	r2, [r7, #4]
 8007938:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800793a:	4610      	mov	r0, r2
 800793c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800793e:	e00e      	b.n	800795e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007940:	6878      	ldr	r0, [r7, #4]
 8007942:	f000 f845 	bl	80079d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007946:	e00a      	b.n	800795e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007948:	6878      	ldr	r0, [r7, #4]
 800794a:	f000 f841 	bl	80079d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800794e:	e006      	b.n	800795e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007950:	6878      	ldr	r0, [r7, #4]
 8007952:	f000 f83d 	bl	80079d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	2200      	movs	r2, #0
 800795a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800795c:	e01d      	b.n	800799a <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800795e:	bf00      	nop
    return;
 8007960:	e01b      	b.n	800799a <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007962:	69fb      	ldr	r3, [r7, #28]
 8007964:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007968:	2b00      	cmp	r3, #0
 800796a:	d008      	beq.n	800797e <HAL_UART_IRQHandler+0x1d6>
 800796c:	69bb      	ldr	r3, [r7, #24]
 800796e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007972:	2b00      	cmp	r3, #0
 8007974:	d003      	beq.n	800797e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8007976:	6878      	ldr	r0, [r7, #4]
 8007978:	f000 f908 	bl	8007b8c <UART_Transmit_IT>
    return;
 800797c:	e00e      	b.n	800799c <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800797e:	69fb      	ldr	r3, [r7, #28]
 8007980:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007984:	2b00      	cmp	r3, #0
 8007986:	d009      	beq.n	800799c <HAL_UART_IRQHandler+0x1f4>
 8007988:	69bb      	ldr	r3, [r7, #24]
 800798a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800798e:	2b00      	cmp	r3, #0
 8007990:	d004      	beq.n	800799c <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8007992:	6878      	ldr	r0, [r7, #4]
 8007994:	f000 f950 	bl	8007c38 <UART_EndTransmit_IT>
    return;
 8007998:	e000      	b.n	800799c <HAL_UART_IRQHandler+0x1f4>
    return;
 800799a:	bf00      	nop
  }
}
 800799c:	3720      	adds	r7, #32
 800799e:	46bd      	mov	sp, r7
 80079a0:	bd80      	pop	{r7, pc}
 80079a2:	bf00      	nop
 80079a4:	08007b65 	.word	0x08007b65

080079a8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80079a8:	b480      	push	{r7}
 80079aa:	b083      	sub	sp, #12
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80079b0:	bf00      	nop
 80079b2:	370c      	adds	r7, #12
 80079b4:	46bd      	mov	sp, r7
 80079b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ba:	4770      	bx	lr

080079bc <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80079bc:	b480      	push	{r7}
 80079be:	b083      	sub	sp, #12
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80079c4:	bf00      	nop
 80079c6:	370c      	adds	r7, #12
 80079c8:	46bd      	mov	sp, r7
 80079ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ce:	4770      	bx	lr

080079d0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80079d0:	b480      	push	{r7}
 80079d2:	b083      	sub	sp, #12
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80079d8:	bf00      	nop
 80079da:	370c      	adds	r7, #12
 80079dc:	46bd      	mov	sp, r7
 80079de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e2:	4770      	bx	lr

080079e4 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b084      	sub	sp, #16
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079f0:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d11e      	bne.n	8007a3e <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	2200      	movs	r2, #0
 8007a04:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	68da      	ldr	r2, [r3, #12]
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007a14:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	695a      	ldr	r2, [r3, #20]
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f022 0201 	bic.w	r2, r2, #1
 8007a24:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	695a      	ldr	r2, [r3, #20]
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007a34:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	2220      	movs	r2, #32
 8007a3a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8007a3e:	68f8      	ldr	r0, [r7, #12]
 8007a40:	f7f9 fbb2 	bl	80011a8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007a44:	bf00      	nop
 8007a46:	3710      	adds	r7, #16
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	bd80      	pop	{r7, pc}

08007a4c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b084      	sub	sp, #16
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a58:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8007a5a:	68f8      	ldr	r0, [r7, #12]
 8007a5c:	f7ff ffae 	bl	80079bc <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007a60:	bf00      	nop
 8007a62:	3710      	adds	r7, #16
 8007a64:	46bd      	mov	sp, r7
 8007a66:	bd80      	pop	{r7, pc}

08007a68 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b084      	sub	sp, #16
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007a70:	2300      	movs	r3, #0
 8007a72:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a78:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007a7a:	68bb      	ldr	r3, [r7, #8]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	695b      	ldr	r3, [r3, #20]
 8007a80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a84:	2b80      	cmp	r3, #128	; 0x80
 8007a86:	bf0c      	ite	eq
 8007a88:	2301      	moveq	r3, #1
 8007a8a:	2300      	movne	r3, #0
 8007a8c:	b2db      	uxtb	r3, r3
 8007a8e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007a90:	68bb      	ldr	r3, [r7, #8]
 8007a92:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007a96:	b2db      	uxtb	r3, r3
 8007a98:	2b21      	cmp	r3, #33	; 0x21
 8007a9a:	d108      	bne.n	8007aae <UART_DMAError+0x46>
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d005      	beq.n	8007aae <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007aa2:	68bb      	ldr	r3, [r7, #8]
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8007aa8:	68b8      	ldr	r0, [r7, #8]
 8007aaa:	f000 f827 	bl	8007afc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007aae:	68bb      	ldr	r3, [r7, #8]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	695b      	ldr	r3, [r3, #20]
 8007ab4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ab8:	2b40      	cmp	r3, #64	; 0x40
 8007aba:	bf0c      	ite	eq
 8007abc:	2301      	moveq	r3, #1
 8007abe:	2300      	movne	r3, #0
 8007ac0:	b2db      	uxtb	r3, r3
 8007ac2:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007ac4:	68bb      	ldr	r3, [r7, #8]
 8007ac6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007aca:	b2db      	uxtb	r3, r3
 8007acc:	2b22      	cmp	r3, #34	; 0x22
 8007ace:	d108      	bne.n	8007ae2 <UART_DMAError+0x7a>
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d005      	beq.n	8007ae2 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007ad6:	68bb      	ldr	r3, [r7, #8]
 8007ad8:	2200      	movs	r2, #0
 8007ada:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8007adc:	68b8      	ldr	r0, [r7, #8]
 8007ade:	f000 f823 	bl	8007b28 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007ae2:	68bb      	ldr	r3, [r7, #8]
 8007ae4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ae6:	f043 0210 	orr.w	r2, r3, #16
 8007aea:	68bb      	ldr	r3, [r7, #8]
 8007aec:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007aee:	68b8      	ldr	r0, [r7, #8]
 8007af0:	f7ff ff6e 	bl	80079d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007af4:	bf00      	nop
 8007af6:	3710      	adds	r7, #16
 8007af8:	46bd      	mov	sp, r7
 8007afa:	bd80      	pop	{r7, pc}

08007afc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007afc:	b480      	push	{r7}
 8007afe:	b083      	sub	sp, #12
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	68da      	ldr	r2, [r3, #12]
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8007b12:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2220      	movs	r2, #32
 8007b18:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8007b1c:	bf00      	nop
 8007b1e:	370c      	adds	r7, #12
 8007b20:	46bd      	mov	sp, r7
 8007b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b26:	4770      	bx	lr

08007b28 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007b28:	b480      	push	{r7}
 8007b2a:	b083      	sub	sp, #12
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	68da      	ldr	r2, [r3, #12]
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007b3e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	695a      	ldr	r2, [r3, #20]
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f022 0201 	bic.w	r2, r2, #1
 8007b4e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2220      	movs	r2, #32
 8007b54:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8007b58:	bf00      	nop
 8007b5a:	370c      	adds	r7, #12
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b62:	4770      	bx	lr

08007b64 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b084      	sub	sp, #16
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b70:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	2200      	movs	r2, #0
 8007b76:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007b7e:	68f8      	ldr	r0, [r7, #12]
 8007b80:	f7ff ff26 	bl	80079d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007b84:	bf00      	nop
 8007b86:	3710      	adds	r7, #16
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	bd80      	pop	{r7, pc}

08007b8c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007b8c:	b480      	push	{r7}
 8007b8e:	b085      	sub	sp, #20
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007b9a:	b2db      	uxtb	r3, r3
 8007b9c:	2b21      	cmp	r3, #33	; 0x21
 8007b9e:	d144      	bne.n	8007c2a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	689b      	ldr	r3, [r3, #8]
 8007ba4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ba8:	d11a      	bne.n	8007be0 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	6a1b      	ldr	r3, [r3, #32]
 8007bae:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	881b      	ldrh	r3, [r3, #0]
 8007bb4:	461a      	mov	r2, r3
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007bbe:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	691b      	ldr	r3, [r3, #16]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d105      	bne.n	8007bd4 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	6a1b      	ldr	r3, [r3, #32]
 8007bcc:	1c9a      	adds	r2, r3, #2
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	621a      	str	r2, [r3, #32]
 8007bd2:	e00e      	b.n	8007bf2 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	6a1b      	ldr	r3, [r3, #32]
 8007bd8:	1c5a      	adds	r2, r3, #1
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	621a      	str	r2, [r3, #32]
 8007bde:	e008      	b.n	8007bf2 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	6a1b      	ldr	r3, [r3, #32]
 8007be4:	1c59      	adds	r1, r3, #1
 8007be6:	687a      	ldr	r2, [r7, #4]
 8007be8:	6211      	str	r1, [r2, #32]
 8007bea:	781a      	ldrb	r2, [r3, #0]
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007bf6:	b29b      	uxth	r3, r3
 8007bf8:	3b01      	subs	r3, #1
 8007bfa:	b29b      	uxth	r3, r3
 8007bfc:	687a      	ldr	r2, [r7, #4]
 8007bfe:	4619      	mov	r1, r3
 8007c00:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d10f      	bne.n	8007c26 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	68da      	ldr	r2, [r3, #12]
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007c14:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	68da      	ldr	r2, [r3, #12]
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007c24:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007c26:	2300      	movs	r3, #0
 8007c28:	e000      	b.n	8007c2c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8007c2a:	2302      	movs	r3, #2
  }
}
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	3714      	adds	r7, #20
 8007c30:	46bd      	mov	sp, r7
 8007c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c36:	4770      	bx	lr

08007c38 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b082      	sub	sp, #8
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	68da      	ldr	r2, [r3, #12]
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007c4e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2220      	movs	r2, #32
 8007c54:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007c58:	6878      	ldr	r0, [r7, #4]
 8007c5a:	f7ff fea5 	bl	80079a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007c5e:	2300      	movs	r3, #0
}
 8007c60:	4618      	mov	r0, r3
 8007c62:	3708      	adds	r7, #8
 8007c64:	46bd      	mov	sp, r7
 8007c66:	bd80      	pop	{r7, pc}

08007c68 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b084      	sub	sp, #16
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007c76:	b2db      	uxtb	r3, r3
 8007c78:	2b22      	cmp	r3, #34	; 0x22
 8007c7a:	d171      	bne.n	8007d60 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	689b      	ldr	r3, [r3, #8]
 8007c80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c84:	d123      	bne.n	8007cce <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c8a:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	691b      	ldr	r3, [r3, #16]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d10e      	bne.n	8007cb2 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	685b      	ldr	r3, [r3, #4]
 8007c9a:	b29b      	uxth	r3, r3
 8007c9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ca0:	b29a      	uxth	r2, r3
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007caa:	1c9a      	adds	r2, r3, #2
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	629a      	str	r2, [r3, #40]	; 0x28
 8007cb0:	e029      	b.n	8007d06 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	685b      	ldr	r3, [r3, #4]
 8007cb8:	b29b      	uxth	r3, r3
 8007cba:	b2db      	uxtb	r3, r3
 8007cbc:	b29a      	uxth	r2, r3
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cc6:	1c5a      	adds	r2, r3, #1
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	629a      	str	r2, [r3, #40]	; 0x28
 8007ccc:	e01b      	b.n	8007d06 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	691b      	ldr	r3, [r3, #16]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d10a      	bne.n	8007cec <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	6858      	ldr	r0, [r3, #4]
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ce0:	1c59      	adds	r1, r3, #1
 8007ce2:	687a      	ldr	r2, [r7, #4]
 8007ce4:	6291      	str	r1, [r2, #40]	; 0x28
 8007ce6:	b2c2      	uxtb	r2, r0
 8007ce8:	701a      	strb	r2, [r3, #0]
 8007cea:	e00c      	b.n	8007d06 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	685b      	ldr	r3, [r3, #4]
 8007cf2:	b2da      	uxtb	r2, r3
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cf8:	1c58      	adds	r0, r3, #1
 8007cfa:	6879      	ldr	r1, [r7, #4]
 8007cfc:	6288      	str	r0, [r1, #40]	; 0x28
 8007cfe:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007d02:	b2d2      	uxtb	r2, r2
 8007d04:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007d0a:	b29b      	uxth	r3, r3
 8007d0c:	3b01      	subs	r3, #1
 8007d0e:	b29b      	uxth	r3, r3
 8007d10:	687a      	ldr	r2, [r7, #4]
 8007d12:	4619      	mov	r1, r3
 8007d14:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d120      	bne.n	8007d5c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	68da      	ldr	r2, [r3, #12]
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	f022 0220 	bic.w	r2, r2, #32
 8007d28:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	68da      	ldr	r2, [r3, #12]
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007d38:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	695a      	ldr	r2, [r3, #20]
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	f022 0201 	bic.w	r2, r2, #1
 8007d48:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2220      	movs	r2, #32
 8007d4e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8007d52:	6878      	ldr	r0, [r7, #4]
 8007d54:	f7f9 fa28 	bl	80011a8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8007d58:	2300      	movs	r3, #0
 8007d5a:	e002      	b.n	8007d62 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	e000      	b.n	8007d62 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8007d60:	2302      	movs	r3, #2
  }
}
 8007d62:	4618      	mov	r0, r3
 8007d64:	3710      	adds	r7, #16
 8007d66:	46bd      	mov	sp, r7
 8007d68:	bd80      	pop	{r7, pc}
	...

08007d6c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007d6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d70:	b0bd      	sub	sp, #244	; 0xf4
 8007d72:	af00      	add	r7, sp, #0
 8007d74:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007d78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	691b      	ldr	r3, [r3, #16]
 8007d80:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007d84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d88:	68d9      	ldr	r1, [r3, #12]
 8007d8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d8e:	681a      	ldr	r2, [r3, #0]
 8007d90:	ea40 0301 	orr.w	r3, r0, r1
 8007d94:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007d96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d9a:	689a      	ldr	r2, [r3, #8]
 8007d9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007da0:	691b      	ldr	r3, [r3, #16]
 8007da2:	431a      	orrs	r2, r3
 8007da4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007da8:	695b      	ldr	r3, [r3, #20]
 8007daa:	431a      	orrs	r2, r3
 8007dac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007db0:	69db      	ldr	r3, [r3, #28]
 8007db2:	4313      	orrs	r3, r2
 8007db4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 8007db8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	68db      	ldr	r3, [r3, #12]
 8007dc0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007dc4:	f021 010c 	bic.w	r1, r1, #12
 8007dc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007dcc:	681a      	ldr	r2, [r3, #0]
 8007dce:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007dd2:	430b      	orrs	r3, r1
 8007dd4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007dd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	695b      	ldr	r3, [r3, #20]
 8007dde:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007de2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007de6:	6999      	ldr	r1, [r3, #24]
 8007de8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007dec:	681a      	ldr	r2, [r3, #0]
 8007dee:	ea40 0301 	orr.w	r3, r0, r1
 8007df2:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007df4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007df8:	69db      	ldr	r3, [r3, #28]
 8007dfa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007dfe:	f040 81a5 	bne.w	800814c <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007e02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e06:	681a      	ldr	r2, [r3, #0]
 8007e08:	4bcd      	ldr	r3, [pc, #820]	; (8008140 <UART_SetConfig+0x3d4>)
 8007e0a:	429a      	cmp	r2, r3
 8007e0c:	d006      	beq.n	8007e1c <UART_SetConfig+0xb0>
 8007e0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e12:	681a      	ldr	r2, [r3, #0]
 8007e14:	4bcb      	ldr	r3, [pc, #812]	; (8008144 <UART_SetConfig+0x3d8>)
 8007e16:	429a      	cmp	r2, r3
 8007e18:	f040 80cb 	bne.w	8007fb2 <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007e1c:	f7fe fb84 	bl	8006528 <HAL_RCC_GetPCLK2Freq>
 8007e20:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007e24:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007e28:	461c      	mov	r4, r3
 8007e2a:	f04f 0500 	mov.w	r5, #0
 8007e2e:	4622      	mov	r2, r4
 8007e30:	462b      	mov	r3, r5
 8007e32:	1891      	adds	r1, r2, r2
 8007e34:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8007e38:	415b      	adcs	r3, r3
 8007e3a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007e3e:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8007e42:	1912      	adds	r2, r2, r4
 8007e44:	eb45 0303 	adc.w	r3, r5, r3
 8007e48:	f04f 0000 	mov.w	r0, #0
 8007e4c:	f04f 0100 	mov.w	r1, #0
 8007e50:	00d9      	lsls	r1, r3, #3
 8007e52:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007e56:	00d0      	lsls	r0, r2, #3
 8007e58:	4602      	mov	r2, r0
 8007e5a:	460b      	mov	r3, r1
 8007e5c:	1911      	adds	r1, r2, r4
 8007e5e:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 8007e62:	416b      	adcs	r3, r5
 8007e64:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007e68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e6c:	685b      	ldr	r3, [r3, #4]
 8007e6e:	461a      	mov	r2, r3
 8007e70:	f04f 0300 	mov.w	r3, #0
 8007e74:	1891      	adds	r1, r2, r2
 8007e76:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8007e7a:	415b      	adcs	r3, r3
 8007e7c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007e80:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8007e84:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8007e88:	f7f8 fed0 	bl	8000c2c <__aeabi_uldivmod>
 8007e8c:	4602      	mov	r2, r0
 8007e8e:	460b      	mov	r3, r1
 8007e90:	4bad      	ldr	r3, [pc, #692]	; (8008148 <UART_SetConfig+0x3dc>)
 8007e92:	fba3 2302 	umull	r2, r3, r3, r2
 8007e96:	095b      	lsrs	r3, r3, #5
 8007e98:	011e      	lsls	r6, r3, #4
 8007e9a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007e9e:	461c      	mov	r4, r3
 8007ea0:	f04f 0500 	mov.w	r5, #0
 8007ea4:	4622      	mov	r2, r4
 8007ea6:	462b      	mov	r3, r5
 8007ea8:	1891      	adds	r1, r2, r2
 8007eaa:	67b9      	str	r1, [r7, #120]	; 0x78
 8007eac:	415b      	adcs	r3, r3
 8007eae:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007eb0:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8007eb4:	1912      	adds	r2, r2, r4
 8007eb6:	eb45 0303 	adc.w	r3, r5, r3
 8007eba:	f04f 0000 	mov.w	r0, #0
 8007ebe:	f04f 0100 	mov.w	r1, #0
 8007ec2:	00d9      	lsls	r1, r3, #3
 8007ec4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007ec8:	00d0      	lsls	r0, r2, #3
 8007eca:	4602      	mov	r2, r0
 8007ecc:	460b      	mov	r3, r1
 8007ece:	1911      	adds	r1, r2, r4
 8007ed0:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8007ed4:	416b      	adcs	r3, r5
 8007ed6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007eda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ede:	685b      	ldr	r3, [r3, #4]
 8007ee0:	461a      	mov	r2, r3
 8007ee2:	f04f 0300 	mov.w	r3, #0
 8007ee6:	1891      	adds	r1, r2, r2
 8007ee8:	6739      	str	r1, [r7, #112]	; 0x70
 8007eea:	415b      	adcs	r3, r3
 8007eec:	677b      	str	r3, [r7, #116]	; 0x74
 8007eee:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8007ef2:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8007ef6:	f7f8 fe99 	bl	8000c2c <__aeabi_uldivmod>
 8007efa:	4602      	mov	r2, r0
 8007efc:	460b      	mov	r3, r1
 8007efe:	4b92      	ldr	r3, [pc, #584]	; (8008148 <UART_SetConfig+0x3dc>)
 8007f00:	fba3 1302 	umull	r1, r3, r3, r2
 8007f04:	095b      	lsrs	r3, r3, #5
 8007f06:	2164      	movs	r1, #100	; 0x64
 8007f08:	fb01 f303 	mul.w	r3, r1, r3
 8007f0c:	1ad3      	subs	r3, r2, r3
 8007f0e:	00db      	lsls	r3, r3, #3
 8007f10:	3332      	adds	r3, #50	; 0x32
 8007f12:	4a8d      	ldr	r2, [pc, #564]	; (8008148 <UART_SetConfig+0x3dc>)
 8007f14:	fba2 2303 	umull	r2, r3, r2, r3
 8007f18:	095b      	lsrs	r3, r3, #5
 8007f1a:	005b      	lsls	r3, r3, #1
 8007f1c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007f20:	441e      	add	r6, r3
 8007f22:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007f26:	4618      	mov	r0, r3
 8007f28:	f04f 0100 	mov.w	r1, #0
 8007f2c:	4602      	mov	r2, r0
 8007f2e:	460b      	mov	r3, r1
 8007f30:	1894      	adds	r4, r2, r2
 8007f32:	66bc      	str	r4, [r7, #104]	; 0x68
 8007f34:	415b      	adcs	r3, r3
 8007f36:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007f38:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8007f3c:	1812      	adds	r2, r2, r0
 8007f3e:	eb41 0303 	adc.w	r3, r1, r3
 8007f42:	f04f 0400 	mov.w	r4, #0
 8007f46:	f04f 0500 	mov.w	r5, #0
 8007f4a:	00dd      	lsls	r5, r3, #3
 8007f4c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007f50:	00d4      	lsls	r4, r2, #3
 8007f52:	4622      	mov	r2, r4
 8007f54:	462b      	mov	r3, r5
 8007f56:	1814      	adds	r4, r2, r0
 8007f58:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 8007f5c:	414b      	adcs	r3, r1
 8007f5e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007f62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f66:	685b      	ldr	r3, [r3, #4]
 8007f68:	461a      	mov	r2, r3
 8007f6a:	f04f 0300 	mov.w	r3, #0
 8007f6e:	1891      	adds	r1, r2, r2
 8007f70:	6639      	str	r1, [r7, #96]	; 0x60
 8007f72:	415b      	adcs	r3, r3
 8007f74:	667b      	str	r3, [r7, #100]	; 0x64
 8007f76:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8007f7a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007f7e:	f7f8 fe55 	bl	8000c2c <__aeabi_uldivmod>
 8007f82:	4602      	mov	r2, r0
 8007f84:	460b      	mov	r3, r1
 8007f86:	4b70      	ldr	r3, [pc, #448]	; (8008148 <UART_SetConfig+0x3dc>)
 8007f88:	fba3 1302 	umull	r1, r3, r3, r2
 8007f8c:	095b      	lsrs	r3, r3, #5
 8007f8e:	2164      	movs	r1, #100	; 0x64
 8007f90:	fb01 f303 	mul.w	r3, r1, r3
 8007f94:	1ad3      	subs	r3, r2, r3
 8007f96:	00db      	lsls	r3, r3, #3
 8007f98:	3332      	adds	r3, #50	; 0x32
 8007f9a:	4a6b      	ldr	r2, [pc, #428]	; (8008148 <UART_SetConfig+0x3dc>)
 8007f9c:	fba2 2303 	umull	r2, r3, r2, r3
 8007fa0:	095b      	lsrs	r3, r3, #5
 8007fa2:	f003 0207 	and.w	r2, r3, #7
 8007fa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	4432      	add	r2, r6
 8007fae:	609a      	str	r2, [r3, #8]
 8007fb0:	e26d      	b.n	800848e <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007fb2:	f7fe faa5 	bl	8006500 <HAL_RCC_GetPCLK1Freq>
 8007fb6:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007fba:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007fbe:	461c      	mov	r4, r3
 8007fc0:	f04f 0500 	mov.w	r5, #0
 8007fc4:	4622      	mov	r2, r4
 8007fc6:	462b      	mov	r3, r5
 8007fc8:	1891      	adds	r1, r2, r2
 8007fca:	65b9      	str	r1, [r7, #88]	; 0x58
 8007fcc:	415b      	adcs	r3, r3
 8007fce:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007fd0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007fd4:	1912      	adds	r2, r2, r4
 8007fd6:	eb45 0303 	adc.w	r3, r5, r3
 8007fda:	f04f 0000 	mov.w	r0, #0
 8007fde:	f04f 0100 	mov.w	r1, #0
 8007fe2:	00d9      	lsls	r1, r3, #3
 8007fe4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007fe8:	00d0      	lsls	r0, r2, #3
 8007fea:	4602      	mov	r2, r0
 8007fec:	460b      	mov	r3, r1
 8007fee:	1911      	adds	r1, r2, r4
 8007ff0:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8007ff4:	416b      	adcs	r3, r5
 8007ff6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007ffa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ffe:	685b      	ldr	r3, [r3, #4]
 8008000:	461a      	mov	r2, r3
 8008002:	f04f 0300 	mov.w	r3, #0
 8008006:	1891      	adds	r1, r2, r2
 8008008:	6539      	str	r1, [r7, #80]	; 0x50
 800800a:	415b      	adcs	r3, r3
 800800c:	657b      	str	r3, [r7, #84]	; 0x54
 800800e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008012:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8008016:	f7f8 fe09 	bl	8000c2c <__aeabi_uldivmod>
 800801a:	4602      	mov	r2, r0
 800801c:	460b      	mov	r3, r1
 800801e:	4b4a      	ldr	r3, [pc, #296]	; (8008148 <UART_SetConfig+0x3dc>)
 8008020:	fba3 2302 	umull	r2, r3, r3, r2
 8008024:	095b      	lsrs	r3, r3, #5
 8008026:	011e      	lsls	r6, r3, #4
 8008028:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800802c:	461c      	mov	r4, r3
 800802e:	f04f 0500 	mov.w	r5, #0
 8008032:	4622      	mov	r2, r4
 8008034:	462b      	mov	r3, r5
 8008036:	1891      	adds	r1, r2, r2
 8008038:	64b9      	str	r1, [r7, #72]	; 0x48
 800803a:	415b      	adcs	r3, r3
 800803c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800803e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008042:	1912      	adds	r2, r2, r4
 8008044:	eb45 0303 	adc.w	r3, r5, r3
 8008048:	f04f 0000 	mov.w	r0, #0
 800804c:	f04f 0100 	mov.w	r1, #0
 8008050:	00d9      	lsls	r1, r3, #3
 8008052:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008056:	00d0      	lsls	r0, r2, #3
 8008058:	4602      	mov	r2, r0
 800805a:	460b      	mov	r3, r1
 800805c:	1911      	adds	r1, r2, r4
 800805e:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8008062:	416b      	adcs	r3, r5
 8008064:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008068:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800806c:	685b      	ldr	r3, [r3, #4]
 800806e:	461a      	mov	r2, r3
 8008070:	f04f 0300 	mov.w	r3, #0
 8008074:	1891      	adds	r1, r2, r2
 8008076:	6439      	str	r1, [r7, #64]	; 0x40
 8008078:	415b      	adcs	r3, r3
 800807a:	647b      	str	r3, [r7, #68]	; 0x44
 800807c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008080:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8008084:	f7f8 fdd2 	bl	8000c2c <__aeabi_uldivmod>
 8008088:	4602      	mov	r2, r0
 800808a:	460b      	mov	r3, r1
 800808c:	4b2e      	ldr	r3, [pc, #184]	; (8008148 <UART_SetConfig+0x3dc>)
 800808e:	fba3 1302 	umull	r1, r3, r3, r2
 8008092:	095b      	lsrs	r3, r3, #5
 8008094:	2164      	movs	r1, #100	; 0x64
 8008096:	fb01 f303 	mul.w	r3, r1, r3
 800809a:	1ad3      	subs	r3, r2, r3
 800809c:	00db      	lsls	r3, r3, #3
 800809e:	3332      	adds	r3, #50	; 0x32
 80080a0:	4a29      	ldr	r2, [pc, #164]	; (8008148 <UART_SetConfig+0x3dc>)
 80080a2:	fba2 2303 	umull	r2, r3, r2, r3
 80080a6:	095b      	lsrs	r3, r3, #5
 80080a8:	005b      	lsls	r3, r3, #1
 80080aa:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80080ae:	441e      	add	r6, r3
 80080b0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80080b4:	4618      	mov	r0, r3
 80080b6:	f04f 0100 	mov.w	r1, #0
 80080ba:	4602      	mov	r2, r0
 80080bc:	460b      	mov	r3, r1
 80080be:	1894      	adds	r4, r2, r2
 80080c0:	63bc      	str	r4, [r7, #56]	; 0x38
 80080c2:	415b      	adcs	r3, r3
 80080c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80080c6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80080ca:	1812      	adds	r2, r2, r0
 80080cc:	eb41 0303 	adc.w	r3, r1, r3
 80080d0:	f04f 0400 	mov.w	r4, #0
 80080d4:	f04f 0500 	mov.w	r5, #0
 80080d8:	00dd      	lsls	r5, r3, #3
 80080da:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80080de:	00d4      	lsls	r4, r2, #3
 80080e0:	4622      	mov	r2, r4
 80080e2:	462b      	mov	r3, r5
 80080e4:	1814      	adds	r4, r2, r0
 80080e6:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 80080ea:	414b      	adcs	r3, r1
 80080ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80080f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080f4:	685b      	ldr	r3, [r3, #4]
 80080f6:	461a      	mov	r2, r3
 80080f8:	f04f 0300 	mov.w	r3, #0
 80080fc:	1891      	adds	r1, r2, r2
 80080fe:	6339      	str	r1, [r7, #48]	; 0x30
 8008100:	415b      	adcs	r3, r3
 8008102:	637b      	str	r3, [r7, #52]	; 0x34
 8008104:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008108:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800810c:	f7f8 fd8e 	bl	8000c2c <__aeabi_uldivmod>
 8008110:	4602      	mov	r2, r0
 8008112:	460b      	mov	r3, r1
 8008114:	4b0c      	ldr	r3, [pc, #48]	; (8008148 <UART_SetConfig+0x3dc>)
 8008116:	fba3 1302 	umull	r1, r3, r3, r2
 800811a:	095b      	lsrs	r3, r3, #5
 800811c:	2164      	movs	r1, #100	; 0x64
 800811e:	fb01 f303 	mul.w	r3, r1, r3
 8008122:	1ad3      	subs	r3, r2, r3
 8008124:	00db      	lsls	r3, r3, #3
 8008126:	3332      	adds	r3, #50	; 0x32
 8008128:	4a07      	ldr	r2, [pc, #28]	; (8008148 <UART_SetConfig+0x3dc>)
 800812a:	fba2 2303 	umull	r2, r3, r2, r3
 800812e:	095b      	lsrs	r3, r3, #5
 8008130:	f003 0207 	and.w	r2, r3, #7
 8008134:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	4432      	add	r2, r6
 800813c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800813e:	e1a6      	b.n	800848e <UART_SetConfig+0x722>
 8008140:	40011000 	.word	0x40011000
 8008144:	40011400 	.word	0x40011400
 8008148:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800814c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008150:	681a      	ldr	r2, [r3, #0]
 8008152:	4bd1      	ldr	r3, [pc, #836]	; (8008498 <UART_SetConfig+0x72c>)
 8008154:	429a      	cmp	r2, r3
 8008156:	d006      	beq.n	8008166 <UART_SetConfig+0x3fa>
 8008158:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800815c:	681a      	ldr	r2, [r3, #0]
 800815e:	4bcf      	ldr	r3, [pc, #828]	; (800849c <UART_SetConfig+0x730>)
 8008160:	429a      	cmp	r2, r3
 8008162:	f040 80ca 	bne.w	80082fa <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 8008166:	f7fe f9df 	bl	8006528 <HAL_RCC_GetPCLK2Freq>
 800816a:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800816e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008172:	461c      	mov	r4, r3
 8008174:	f04f 0500 	mov.w	r5, #0
 8008178:	4622      	mov	r2, r4
 800817a:	462b      	mov	r3, r5
 800817c:	1891      	adds	r1, r2, r2
 800817e:	62b9      	str	r1, [r7, #40]	; 0x28
 8008180:	415b      	adcs	r3, r3
 8008182:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008184:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008188:	1912      	adds	r2, r2, r4
 800818a:	eb45 0303 	adc.w	r3, r5, r3
 800818e:	f04f 0000 	mov.w	r0, #0
 8008192:	f04f 0100 	mov.w	r1, #0
 8008196:	00d9      	lsls	r1, r3, #3
 8008198:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800819c:	00d0      	lsls	r0, r2, #3
 800819e:	4602      	mov	r2, r0
 80081a0:	460b      	mov	r3, r1
 80081a2:	eb12 0a04 	adds.w	sl, r2, r4
 80081a6:	eb43 0b05 	adc.w	fp, r3, r5
 80081aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081ae:	685b      	ldr	r3, [r3, #4]
 80081b0:	4618      	mov	r0, r3
 80081b2:	f04f 0100 	mov.w	r1, #0
 80081b6:	f04f 0200 	mov.w	r2, #0
 80081ba:	f04f 0300 	mov.w	r3, #0
 80081be:	008b      	lsls	r3, r1, #2
 80081c0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80081c4:	0082      	lsls	r2, r0, #2
 80081c6:	4650      	mov	r0, sl
 80081c8:	4659      	mov	r1, fp
 80081ca:	f7f8 fd2f 	bl	8000c2c <__aeabi_uldivmod>
 80081ce:	4602      	mov	r2, r0
 80081d0:	460b      	mov	r3, r1
 80081d2:	4bb3      	ldr	r3, [pc, #716]	; (80084a0 <UART_SetConfig+0x734>)
 80081d4:	fba3 2302 	umull	r2, r3, r3, r2
 80081d8:	095b      	lsrs	r3, r3, #5
 80081da:	011e      	lsls	r6, r3, #4
 80081dc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80081e0:	4618      	mov	r0, r3
 80081e2:	f04f 0100 	mov.w	r1, #0
 80081e6:	4602      	mov	r2, r0
 80081e8:	460b      	mov	r3, r1
 80081ea:	1894      	adds	r4, r2, r2
 80081ec:	623c      	str	r4, [r7, #32]
 80081ee:	415b      	adcs	r3, r3
 80081f0:	627b      	str	r3, [r7, #36]	; 0x24
 80081f2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80081f6:	1812      	adds	r2, r2, r0
 80081f8:	eb41 0303 	adc.w	r3, r1, r3
 80081fc:	f04f 0400 	mov.w	r4, #0
 8008200:	f04f 0500 	mov.w	r5, #0
 8008204:	00dd      	lsls	r5, r3, #3
 8008206:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800820a:	00d4      	lsls	r4, r2, #3
 800820c:	4622      	mov	r2, r4
 800820e:	462b      	mov	r3, r5
 8008210:	1814      	adds	r4, r2, r0
 8008212:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8008216:	414b      	adcs	r3, r1
 8008218:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800821c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008220:	685b      	ldr	r3, [r3, #4]
 8008222:	4618      	mov	r0, r3
 8008224:	f04f 0100 	mov.w	r1, #0
 8008228:	f04f 0200 	mov.w	r2, #0
 800822c:	f04f 0300 	mov.w	r3, #0
 8008230:	008b      	lsls	r3, r1, #2
 8008232:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008236:	0082      	lsls	r2, r0, #2
 8008238:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 800823c:	f7f8 fcf6 	bl	8000c2c <__aeabi_uldivmod>
 8008240:	4602      	mov	r2, r0
 8008242:	460b      	mov	r3, r1
 8008244:	4b96      	ldr	r3, [pc, #600]	; (80084a0 <UART_SetConfig+0x734>)
 8008246:	fba3 1302 	umull	r1, r3, r3, r2
 800824a:	095b      	lsrs	r3, r3, #5
 800824c:	2164      	movs	r1, #100	; 0x64
 800824e:	fb01 f303 	mul.w	r3, r1, r3
 8008252:	1ad3      	subs	r3, r2, r3
 8008254:	011b      	lsls	r3, r3, #4
 8008256:	3332      	adds	r3, #50	; 0x32
 8008258:	4a91      	ldr	r2, [pc, #580]	; (80084a0 <UART_SetConfig+0x734>)
 800825a:	fba2 2303 	umull	r2, r3, r2, r3
 800825e:	095b      	lsrs	r3, r3, #5
 8008260:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008264:	441e      	add	r6, r3
 8008266:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800826a:	4618      	mov	r0, r3
 800826c:	f04f 0100 	mov.w	r1, #0
 8008270:	4602      	mov	r2, r0
 8008272:	460b      	mov	r3, r1
 8008274:	1894      	adds	r4, r2, r2
 8008276:	61bc      	str	r4, [r7, #24]
 8008278:	415b      	adcs	r3, r3
 800827a:	61fb      	str	r3, [r7, #28]
 800827c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008280:	1812      	adds	r2, r2, r0
 8008282:	eb41 0303 	adc.w	r3, r1, r3
 8008286:	f04f 0400 	mov.w	r4, #0
 800828a:	f04f 0500 	mov.w	r5, #0
 800828e:	00dd      	lsls	r5, r3, #3
 8008290:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008294:	00d4      	lsls	r4, r2, #3
 8008296:	4622      	mov	r2, r4
 8008298:	462b      	mov	r3, r5
 800829a:	1814      	adds	r4, r2, r0
 800829c:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 80082a0:	414b      	adcs	r3, r1
 80082a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80082a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082aa:	685b      	ldr	r3, [r3, #4]
 80082ac:	4618      	mov	r0, r3
 80082ae:	f04f 0100 	mov.w	r1, #0
 80082b2:	f04f 0200 	mov.w	r2, #0
 80082b6:	f04f 0300 	mov.w	r3, #0
 80082ba:	008b      	lsls	r3, r1, #2
 80082bc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80082c0:	0082      	lsls	r2, r0, #2
 80082c2:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 80082c6:	f7f8 fcb1 	bl	8000c2c <__aeabi_uldivmod>
 80082ca:	4602      	mov	r2, r0
 80082cc:	460b      	mov	r3, r1
 80082ce:	4b74      	ldr	r3, [pc, #464]	; (80084a0 <UART_SetConfig+0x734>)
 80082d0:	fba3 1302 	umull	r1, r3, r3, r2
 80082d4:	095b      	lsrs	r3, r3, #5
 80082d6:	2164      	movs	r1, #100	; 0x64
 80082d8:	fb01 f303 	mul.w	r3, r1, r3
 80082dc:	1ad3      	subs	r3, r2, r3
 80082de:	011b      	lsls	r3, r3, #4
 80082e0:	3332      	adds	r3, #50	; 0x32
 80082e2:	4a6f      	ldr	r2, [pc, #444]	; (80084a0 <UART_SetConfig+0x734>)
 80082e4:	fba2 2303 	umull	r2, r3, r2, r3
 80082e8:	095b      	lsrs	r3, r3, #5
 80082ea:	f003 020f 	and.w	r2, r3, #15
 80082ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	4432      	add	r2, r6
 80082f6:	609a      	str	r2, [r3, #8]
 80082f8:	e0c9      	b.n	800848e <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 80082fa:	f7fe f901 	bl	8006500 <HAL_RCC_GetPCLK1Freq>
 80082fe:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008302:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008306:	461c      	mov	r4, r3
 8008308:	f04f 0500 	mov.w	r5, #0
 800830c:	4622      	mov	r2, r4
 800830e:	462b      	mov	r3, r5
 8008310:	1891      	adds	r1, r2, r2
 8008312:	6139      	str	r1, [r7, #16]
 8008314:	415b      	adcs	r3, r3
 8008316:	617b      	str	r3, [r7, #20]
 8008318:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800831c:	1912      	adds	r2, r2, r4
 800831e:	eb45 0303 	adc.w	r3, r5, r3
 8008322:	f04f 0000 	mov.w	r0, #0
 8008326:	f04f 0100 	mov.w	r1, #0
 800832a:	00d9      	lsls	r1, r3, #3
 800832c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008330:	00d0      	lsls	r0, r2, #3
 8008332:	4602      	mov	r2, r0
 8008334:	460b      	mov	r3, r1
 8008336:	eb12 0804 	adds.w	r8, r2, r4
 800833a:	eb43 0905 	adc.w	r9, r3, r5
 800833e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008342:	685b      	ldr	r3, [r3, #4]
 8008344:	4618      	mov	r0, r3
 8008346:	f04f 0100 	mov.w	r1, #0
 800834a:	f04f 0200 	mov.w	r2, #0
 800834e:	f04f 0300 	mov.w	r3, #0
 8008352:	008b      	lsls	r3, r1, #2
 8008354:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008358:	0082      	lsls	r2, r0, #2
 800835a:	4640      	mov	r0, r8
 800835c:	4649      	mov	r1, r9
 800835e:	f7f8 fc65 	bl	8000c2c <__aeabi_uldivmod>
 8008362:	4602      	mov	r2, r0
 8008364:	460b      	mov	r3, r1
 8008366:	4b4e      	ldr	r3, [pc, #312]	; (80084a0 <UART_SetConfig+0x734>)
 8008368:	fba3 2302 	umull	r2, r3, r3, r2
 800836c:	095b      	lsrs	r3, r3, #5
 800836e:	011e      	lsls	r6, r3, #4
 8008370:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008374:	4618      	mov	r0, r3
 8008376:	f04f 0100 	mov.w	r1, #0
 800837a:	4602      	mov	r2, r0
 800837c:	460b      	mov	r3, r1
 800837e:	1894      	adds	r4, r2, r2
 8008380:	60bc      	str	r4, [r7, #8]
 8008382:	415b      	adcs	r3, r3
 8008384:	60fb      	str	r3, [r7, #12]
 8008386:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800838a:	1812      	adds	r2, r2, r0
 800838c:	eb41 0303 	adc.w	r3, r1, r3
 8008390:	f04f 0400 	mov.w	r4, #0
 8008394:	f04f 0500 	mov.w	r5, #0
 8008398:	00dd      	lsls	r5, r3, #3
 800839a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800839e:	00d4      	lsls	r4, r2, #3
 80083a0:	4622      	mov	r2, r4
 80083a2:	462b      	mov	r3, r5
 80083a4:	1814      	adds	r4, r2, r0
 80083a6:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 80083aa:	414b      	adcs	r3, r1
 80083ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80083b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083b4:	685b      	ldr	r3, [r3, #4]
 80083b6:	4618      	mov	r0, r3
 80083b8:	f04f 0100 	mov.w	r1, #0
 80083bc:	f04f 0200 	mov.w	r2, #0
 80083c0:	f04f 0300 	mov.w	r3, #0
 80083c4:	008b      	lsls	r3, r1, #2
 80083c6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80083ca:	0082      	lsls	r2, r0, #2
 80083cc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80083d0:	f7f8 fc2c 	bl	8000c2c <__aeabi_uldivmod>
 80083d4:	4602      	mov	r2, r0
 80083d6:	460b      	mov	r3, r1
 80083d8:	4b31      	ldr	r3, [pc, #196]	; (80084a0 <UART_SetConfig+0x734>)
 80083da:	fba3 1302 	umull	r1, r3, r3, r2
 80083de:	095b      	lsrs	r3, r3, #5
 80083e0:	2164      	movs	r1, #100	; 0x64
 80083e2:	fb01 f303 	mul.w	r3, r1, r3
 80083e6:	1ad3      	subs	r3, r2, r3
 80083e8:	011b      	lsls	r3, r3, #4
 80083ea:	3332      	adds	r3, #50	; 0x32
 80083ec:	4a2c      	ldr	r2, [pc, #176]	; (80084a0 <UART_SetConfig+0x734>)
 80083ee:	fba2 2303 	umull	r2, r3, r2, r3
 80083f2:	095b      	lsrs	r3, r3, #5
 80083f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80083f8:	441e      	add	r6, r3
 80083fa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80083fe:	4618      	mov	r0, r3
 8008400:	f04f 0100 	mov.w	r1, #0
 8008404:	4602      	mov	r2, r0
 8008406:	460b      	mov	r3, r1
 8008408:	1894      	adds	r4, r2, r2
 800840a:	603c      	str	r4, [r7, #0]
 800840c:	415b      	adcs	r3, r3
 800840e:	607b      	str	r3, [r7, #4]
 8008410:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008414:	1812      	adds	r2, r2, r0
 8008416:	eb41 0303 	adc.w	r3, r1, r3
 800841a:	f04f 0400 	mov.w	r4, #0
 800841e:	f04f 0500 	mov.w	r5, #0
 8008422:	00dd      	lsls	r5, r3, #3
 8008424:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008428:	00d4      	lsls	r4, r2, #3
 800842a:	4622      	mov	r2, r4
 800842c:	462b      	mov	r3, r5
 800842e:	1814      	adds	r4, r2, r0
 8008430:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8008434:	414b      	adcs	r3, r1
 8008436:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800843a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800843e:	685b      	ldr	r3, [r3, #4]
 8008440:	4618      	mov	r0, r3
 8008442:	f04f 0100 	mov.w	r1, #0
 8008446:	f04f 0200 	mov.w	r2, #0
 800844a:	f04f 0300 	mov.w	r3, #0
 800844e:	008b      	lsls	r3, r1, #2
 8008450:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008454:	0082      	lsls	r2, r0, #2
 8008456:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800845a:	f7f8 fbe7 	bl	8000c2c <__aeabi_uldivmod>
 800845e:	4602      	mov	r2, r0
 8008460:	460b      	mov	r3, r1
 8008462:	4b0f      	ldr	r3, [pc, #60]	; (80084a0 <UART_SetConfig+0x734>)
 8008464:	fba3 1302 	umull	r1, r3, r3, r2
 8008468:	095b      	lsrs	r3, r3, #5
 800846a:	2164      	movs	r1, #100	; 0x64
 800846c:	fb01 f303 	mul.w	r3, r1, r3
 8008470:	1ad3      	subs	r3, r2, r3
 8008472:	011b      	lsls	r3, r3, #4
 8008474:	3332      	adds	r3, #50	; 0x32
 8008476:	4a0a      	ldr	r2, [pc, #40]	; (80084a0 <UART_SetConfig+0x734>)
 8008478:	fba2 2303 	umull	r2, r3, r2, r3
 800847c:	095b      	lsrs	r3, r3, #5
 800847e:	f003 020f 	and.w	r2, r3, #15
 8008482:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	4432      	add	r2, r6
 800848a:	609a      	str	r2, [r3, #8]
}
 800848c:	e7ff      	b.n	800848e <UART_SetConfig+0x722>
 800848e:	bf00      	nop
 8008490:	37f4      	adds	r7, #244	; 0xf4
 8008492:	46bd      	mov	sp, r7
 8008494:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008498:	40011000 	.word	0x40011000
 800849c:	40011400 	.word	0x40011400
 80084a0:	51eb851f 	.word	0x51eb851f

080084a4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80084a4:	b480      	push	{r7}
 80084a6:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 80084a8:	bf00      	nop
 80084aa:	46bd      	mov	sp, r7
 80084ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b0:	4770      	bx	lr
	...

080084b4 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80084b4:	b480      	push	{r7}
 80084b6:	b085      	sub	sp, #20
 80084b8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80084ba:	f3ef 8305 	mrs	r3, IPSR
 80084be:	60bb      	str	r3, [r7, #8]
  return(result);
 80084c0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d10f      	bne.n	80084e6 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80084c6:	f3ef 8310 	mrs	r3, PRIMASK
 80084ca:	607b      	str	r3, [r7, #4]
  return(result);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d105      	bne.n	80084de <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80084d2:	f3ef 8311 	mrs	r3, BASEPRI
 80084d6:	603b      	str	r3, [r7, #0]
  return(result);
 80084d8:	683b      	ldr	r3, [r7, #0]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d007      	beq.n	80084ee <osKernelInitialize+0x3a>
 80084de:	4b0e      	ldr	r3, [pc, #56]	; (8008518 <osKernelInitialize+0x64>)
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	2b02      	cmp	r3, #2
 80084e4:	d103      	bne.n	80084ee <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80084e6:	f06f 0305 	mvn.w	r3, #5
 80084ea:	60fb      	str	r3, [r7, #12]
 80084ec:	e00c      	b.n	8008508 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80084ee:	4b0a      	ldr	r3, [pc, #40]	; (8008518 <osKernelInitialize+0x64>)
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d105      	bne.n	8008502 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80084f6:	4b08      	ldr	r3, [pc, #32]	; (8008518 <osKernelInitialize+0x64>)
 80084f8:	2201      	movs	r2, #1
 80084fa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80084fc:	2300      	movs	r3, #0
 80084fe:	60fb      	str	r3, [r7, #12]
 8008500:	e002      	b.n	8008508 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8008502:	f04f 33ff 	mov.w	r3, #4294967295
 8008506:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8008508:	68fb      	ldr	r3, [r7, #12]
}
 800850a:	4618      	mov	r0, r3
 800850c:	3714      	adds	r7, #20
 800850e:	46bd      	mov	sp, r7
 8008510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008514:	4770      	bx	lr
 8008516:	bf00      	nop
 8008518:	20004f5c 	.word	0x20004f5c

0800851c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800851c:	b580      	push	{r7, lr}
 800851e:	b084      	sub	sp, #16
 8008520:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008522:	f3ef 8305 	mrs	r3, IPSR
 8008526:	60bb      	str	r3, [r7, #8]
  return(result);
 8008528:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800852a:	2b00      	cmp	r3, #0
 800852c:	d10f      	bne.n	800854e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800852e:	f3ef 8310 	mrs	r3, PRIMASK
 8008532:	607b      	str	r3, [r7, #4]
  return(result);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d105      	bne.n	8008546 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800853a:	f3ef 8311 	mrs	r3, BASEPRI
 800853e:	603b      	str	r3, [r7, #0]
  return(result);
 8008540:	683b      	ldr	r3, [r7, #0]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d007      	beq.n	8008556 <osKernelStart+0x3a>
 8008546:	4b0f      	ldr	r3, [pc, #60]	; (8008584 <osKernelStart+0x68>)
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	2b02      	cmp	r3, #2
 800854c:	d103      	bne.n	8008556 <osKernelStart+0x3a>
    stat = osErrorISR;
 800854e:	f06f 0305 	mvn.w	r3, #5
 8008552:	60fb      	str	r3, [r7, #12]
 8008554:	e010      	b.n	8008578 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008556:	4b0b      	ldr	r3, [pc, #44]	; (8008584 <osKernelStart+0x68>)
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	2b01      	cmp	r3, #1
 800855c:	d109      	bne.n	8008572 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800855e:	f7ff ffa1 	bl	80084a4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008562:	4b08      	ldr	r3, [pc, #32]	; (8008584 <osKernelStart+0x68>)
 8008564:	2202      	movs	r2, #2
 8008566:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008568:	f001 fdec 	bl	800a144 <vTaskStartScheduler>
      stat = osOK;
 800856c:	2300      	movs	r3, #0
 800856e:	60fb      	str	r3, [r7, #12]
 8008570:	e002      	b.n	8008578 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8008572:	f04f 33ff 	mov.w	r3, #4294967295
 8008576:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8008578:	68fb      	ldr	r3, [r7, #12]
}
 800857a:	4618      	mov	r0, r3
 800857c:	3710      	adds	r7, #16
 800857e:	46bd      	mov	sp, r7
 8008580:	bd80      	pop	{r7, pc}
 8008582:	bf00      	nop
 8008584:	20004f5c 	.word	0x20004f5c

08008588 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008588:	b580      	push	{r7, lr}
 800858a:	b090      	sub	sp, #64	; 0x40
 800858c:	af04      	add	r7, sp, #16
 800858e:	60f8      	str	r0, [r7, #12]
 8008590:	60b9      	str	r1, [r7, #8]
 8008592:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008594:	2300      	movs	r3, #0
 8008596:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008598:	f3ef 8305 	mrs	r3, IPSR
 800859c:	61fb      	str	r3, [r7, #28]
  return(result);
 800859e:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	f040 808f 	bne.w	80086c4 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80085a6:	f3ef 8310 	mrs	r3, PRIMASK
 80085aa:	61bb      	str	r3, [r7, #24]
  return(result);
 80085ac:	69bb      	ldr	r3, [r7, #24]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d105      	bne.n	80085be <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80085b2:	f3ef 8311 	mrs	r3, BASEPRI
 80085b6:	617b      	str	r3, [r7, #20]
  return(result);
 80085b8:	697b      	ldr	r3, [r7, #20]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d003      	beq.n	80085c6 <osThreadNew+0x3e>
 80085be:	4b44      	ldr	r3, [pc, #272]	; (80086d0 <osThreadNew+0x148>)
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	2b02      	cmp	r3, #2
 80085c4:	d07e      	beq.n	80086c4 <osThreadNew+0x13c>
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d07b      	beq.n	80086c4 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 80085cc:	2380      	movs	r3, #128	; 0x80
 80085ce:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80085d0:	2318      	movs	r3, #24
 80085d2:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 80085d4:	2300      	movs	r3, #0
 80085d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 80085d8:	f04f 33ff 	mov.w	r3, #4294967295
 80085dc:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d045      	beq.n	8008670 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d002      	beq.n	80085f2 <osThreadNew+0x6a>
        name = attr->name;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	699b      	ldr	r3, [r3, #24]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d002      	beq.n	8008600 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	699b      	ldr	r3, [r3, #24]
 80085fe:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008602:	2b00      	cmp	r3, #0
 8008604:	d008      	beq.n	8008618 <osThreadNew+0x90>
 8008606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008608:	2b38      	cmp	r3, #56	; 0x38
 800860a:	d805      	bhi.n	8008618 <osThreadNew+0x90>
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	685b      	ldr	r3, [r3, #4]
 8008610:	f003 0301 	and.w	r3, r3, #1
 8008614:	2b00      	cmp	r3, #0
 8008616:	d001      	beq.n	800861c <osThreadNew+0x94>
        return (NULL);
 8008618:	2300      	movs	r3, #0
 800861a:	e054      	b.n	80086c6 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	695b      	ldr	r3, [r3, #20]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d003      	beq.n	800862c <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	695b      	ldr	r3, [r3, #20]
 8008628:	089b      	lsrs	r3, r3, #2
 800862a:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	689b      	ldr	r3, [r3, #8]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d00e      	beq.n	8008652 <osThreadNew+0xca>
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	68db      	ldr	r3, [r3, #12]
 8008638:	2b5b      	cmp	r3, #91	; 0x5b
 800863a:	d90a      	bls.n	8008652 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008640:	2b00      	cmp	r3, #0
 8008642:	d006      	beq.n	8008652 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	695b      	ldr	r3, [r3, #20]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d002      	beq.n	8008652 <osThreadNew+0xca>
        mem = 1;
 800864c:	2301      	movs	r3, #1
 800864e:	623b      	str	r3, [r7, #32]
 8008650:	e010      	b.n	8008674 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	689b      	ldr	r3, [r3, #8]
 8008656:	2b00      	cmp	r3, #0
 8008658:	d10c      	bne.n	8008674 <osThreadNew+0xec>
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	68db      	ldr	r3, [r3, #12]
 800865e:	2b00      	cmp	r3, #0
 8008660:	d108      	bne.n	8008674 <osThreadNew+0xec>
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	691b      	ldr	r3, [r3, #16]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d104      	bne.n	8008674 <osThreadNew+0xec>
          mem = 0;
 800866a:	2300      	movs	r3, #0
 800866c:	623b      	str	r3, [r7, #32]
 800866e:	e001      	b.n	8008674 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8008670:	2300      	movs	r3, #0
 8008672:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8008674:	6a3b      	ldr	r3, [r7, #32]
 8008676:	2b01      	cmp	r3, #1
 8008678:	d110      	bne.n	800869c <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800867e:	687a      	ldr	r2, [r7, #4]
 8008680:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008682:	9202      	str	r2, [sp, #8]
 8008684:	9301      	str	r3, [sp, #4]
 8008686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008688:	9300      	str	r3, [sp, #0]
 800868a:	68bb      	ldr	r3, [r7, #8]
 800868c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800868e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008690:	68f8      	ldr	r0, [r7, #12]
 8008692:	f001 fb81 	bl	8009d98 <xTaskCreateStatic>
 8008696:	4603      	mov	r3, r0
 8008698:	613b      	str	r3, [r7, #16]
 800869a:	e013      	b.n	80086c4 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800869c:	6a3b      	ldr	r3, [r7, #32]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d110      	bne.n	80086c4 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80086a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086a4:	b29a      	uxth	r2, r3
 80086a6:	f107 0310 	add.w	r3, r7, #16
 80086aa:	9301      	str	r3, [sp, #4]
 80086ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086ae:	9300      	str	r3, [sp, #0]
 80086b0:	68bb      	ldr	r3, [r7, #8]
 80086b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80086b4:	68f8      	ldr	r0, [r7, #12]
 80086b6:	f001 fbcc 	bl	8009e52 <xTaskCreate>
 80086ba:	4603      	mov	r3, r0
 80086bc:	2b01      	cmp	r3, #1
 80086be:	d001      	beq.n	80086c4 <osThreadNew+0x13c>
          hTask = NULL;
 80086c0:	2300      	movs	r3, #0
 80086c2:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80086c4:	693b      	ldr	r3, [r7, #16]
}
 80086c6:	4618      	mov	r0, r3
 80086c8:	3730      	adds	r7, #48	; 0x30
 80086ca:	46bd      	mov	sp, r7
 80086cc:	bd80      	pop	{r7, pc}
 80086ce:	bf00      	nop
 80086d0:	20004f5c 	.word	0x20004f5c

080086d4 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b086      	sub	sp, #24
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80086dc:	f3ef 8305 	mrs	r3, IPSR
 80086e0:	613b      	str	r3, [r7, #16]
  return(result);
 80086e2:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d10f      	bne.n	8008708 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80086e8:	f3ef 8310 	mrs	r3, PRIMASK
 80086ec:	60fb      	str	r3, [r7, #12]
  return(result);
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d105      	bne.n	8008700 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80086f4:	f3ef 8311 	mrs	r3, BASEPRI
 80086f8:	60bb      	str	r3, [r7, #8]
  return(result);
 80086fa:	68bb      	ldr	r3, [r7, #8]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d007      	beq.n	8008710 <osDelay+0x3c>
 8008700:	4b0a      	ldr	r3, [pc, #40]	; (800872c <osDelay+0x58>)
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	2b02      	cmp	r3, #2
 8008706:	d103      	bne.n	8008710 <osDelay+0x3c>
    stat = osErrorISR;
 8008708:	f06f 0305 	mvn.w	r3, #5
 800870c:	617b      	str	r3, [r7, #20]
 800870e:	e007      	b.n	8008720 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8008710:	2300      	movs	r3, #0
 8008712:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d002      	beq.n	8008720 <osDelay+0x4c>
      vTaskDelay(ticks);
 800871a:	6878      	ldr	r0, [r7, #4]
 800871c:	f001 fcde 	bl	800a0dc <vTaskDelay>
    }
  }

  return (stat);
 8008720:	697b      	ldr	r3, [r7, #20]
}
 8008722:	4618      	mov	r0, r3
 8008724:	3718      	adds	r7, #24
 8008726:	46bd      	mov	sp, r7
 8008728:	bd80      	pop	{r7, pc}
 800872a:	bf00      	nop
 800872c:	20004f5c 	.word	0x20004f5c

08008730 <osEventFlagsNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8008730:	b580      	push	{r7, lr}
 8008732:	b088      	sub	sp, #32
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8008738:	2300      	movs	r3, #0
 800873a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800873c:	f3ef 8305 	mrs	r3, IPSR
 8008740:	617b      	str	r3, [r7, #20]
  return(result);
 8008742:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ()) {
 8008744:	2b00      	cmp	r3, #0
 8008746:	d13d      	bne.n	80087c4 <osEventFlagsNew+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008748:	f3ef 8310 	mrs	r3, PRIMASK
 800874c:	613b      	str	r3, [r7, #16]
  return(result);
 800874e:	693b      	ldr	r3, [r7, #16]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d105      	bne.n	8008760 <osEventFlagsNew+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008754:	f3ef 8311 	mrs	r3, BASEPRI
 8008758:	60fb      	str	r3, [r7, #12]
  return(result);
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	2b00      	cmp	r3, #0
 800875e:	d003      	beq.n	8008768 <osEventFlagsNew+0x38>
 8008760:	4b1b      	ldr	r3, [pc, #108]	; (80087d0 <osEventFlagsNew+0xa0>)
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	2b02      	cmp	r3, #2
 8008766:	d02d      	beq.n	80087c4 <osEventFlagsNew+0x94>
    mem = -1;
 8008768:	f04f 33ff 	mov.w	r3, #4294967295
 800876c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d015      	beq.n	80087a0 <osEventFlagsNew+0x70>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	689b      	ldr	r3, [r3, #8]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d006      	beq.n	800878a <osEventFlagsNew+0x5a>
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	68db      	ldr	r3, [r3, #12]
 8008780:	2b1f      	cmp	r3, #31
 8008782:	d902      	bls.n	800878a <osEventFlagsNew+0x5a>
        mem = 1;
 8008784:	2301      	movs	r3, #1
 8008786:	61bb      	str	r3, [r7, #24]
 8008788:	e00c      	b.n	80087a4 <osEventFlagsNew+0x74>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	689b      	ldr	r3, [r3, #8]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d108      	bne.n	80087a4 <osEventFlagsNew+0x74>
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	68db      	ldr	r3, [r3, #12]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d104      	bne.n	80087a4 <osEventFlagsNew+0x74>
          mem = 0;
 800879a:	2300      	movs	r3, #0
 800879c:	61bb      	str	r3, [r7, #24]
 800879e:	e001      	b.n	80087a4 <osEventFlagsNew+0x74>
        }
      }
    }
    else {
      mem = 0;
 80087a0:	2300      	movs	r3, #0
 80087a2:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80087a4:	69bb      	ldr	r3, [r7, #24]
 80087a6:	2b01      	cmp	r3, #1
 80087a8:	d106      	bne.n	80087b8 <osEventFlagsNew+0x88>
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	689b      	ldr	r3, [r3, #8]
 80087ae:	4618      	mov	r0, r3
 80087b0:	f000 f9f2 	bl	8008b98 <xEventGroupCreateStatic>
 80087b4:	61f8      	str	r0, [r7, #28]
 80087b6:	e005      	b.n	80087c4 <osEventFlagsNew+0x94>
    }
    else {
      if (mem == 0) {
 80087b8:	69bb      	ldr	r3, [r7, #24]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d102      	bne.n	80087c4 <osEventFlagsNew+0x94>
        hEventGroup = xEventGroupCreate();
 80087be:	f000 fa22 	bl	8008c06 <xEventGroupCreate>
 80087c2:	61f8      	str	r0, [r7, #28]
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 80087c4:	69fb      	ldr	r3, [r7, #28]
}
 80087c6:	4618      	mov	r0, r3
 80087c8:	3720      	adds	r7, #32
 80087ca:	46bd      	mov	sp, r7
 80087cc:	bd80      	pop	{r7, pc}
 80087ce:	bf00      	nop
 80087d0:	20004f5c 	.word	0x20004f5c

080087d4 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b088      	sub	sp, #32
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
 80087dc:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	61bb      	str	r3, [r7, #24]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 80087e2:	69bb      	ldr	r3, [r7, #24]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d004      	beq.n	80087f2 <osEventFlagsSet+0x1e>
 80087e8:	683b      	ldr	r3, [r7, #0]
 80087ea:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d003      	beq.n	80087fa <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 80087f2:	f06f 0303 	mvn.w	r3, #3
 80087f6:	61fb      	str	r3, [r7, #28]
 80087f8:	e03a      	b.n	8008870 <osEventFlagsSet+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80087fa:	f3ef 8305 	mrs	r3, IPSR
 80087fe:	617b      	str	r3, [r7, #20]
  return(result);
 8008800:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8008802:	2b00      	cmp	r3, #0
 8008804:	d10f      	bne.n	8008826 <osEventFlagsSet+0x52>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008806:	f3ef 8310 	mrs	r3, PRIMASK
 800880a:	613b      	str	r3, [r7, #16]
  return(result);
 800880c:	693b      	ldr	r3, [r7, #16]
 800880e:	2b00      	cmp	r3, #0
 8008810:	d105      	bne.n	800881e <osEventFlagsSet+0x4a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008812:	f3ef 8311 	mrs	r3, BASEPRI
 8008816:	60fb      	str	r3, [r7, #12]
  return(result);
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d021      	beq.n	8008862 <osEventFlagsSet+0x8e>
 800881e:	4b17      	ldr	r3, [pc, #92]	; (800887c <osEventFlagsSet+0xa8>)
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	2b02      	cmp	r3, #2
 8008824:	d11d      	bne.n	8008862 <osEventFlagsSet+0x8e>
    yield = pdFALSE;
 8008826:	2300      	movs	r3, #0
 8008828:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 800882a:	f107 0308 	add.w	r3, r7, #8
 800882e:	461a      	mov	r2, r3
 8008830:	6839      	ldr	r1, [r7, #0]
 8008832:	69b8      	ldr	r0, [r7, #24]
 8008834:	f000 fc08 	bl	8009048 <xEventGroupSetBitsFromISR>
 8008838:	4603      	mov	r3, r0
 800883a:	2b00      	cmp	r3, #0
 800883c:	d103      	bne.n	8008846 <osEventFlagsSet+0x72>
      rflags = (uint32_t)osErrorResource;
 800883e:	f06f 0302 	mvn.w	r3, #2
 8008842:	61fb      	str	r3, [r7, #28]
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8008844:	e013      	b.n	800886e <osEventFlagsSet+0x9a>
    } else {
      rflags = flags;
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	61fb      	str	r3, [r7, #28]
      portYIELD_FROM_ISR (yield);
 800884a:	68bb      	ldr	r3, [r7, #8]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d00e      	beq.n	800886e <osEventFlagsSet+0x9a>
 8008850:	4b0b      	ldr	r3, [pc, #44]	; (8008880 <osEventFlagsSet+0xac>)
 8008852:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008856:	601a      	str	r2, [r3, #0]
 8008858:	f3bf 8f4f 	dsb	sy
 800885c:	f3bf 8f6f 	isb	sy
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8008860:	e005      	b.n	800886e <osEventFlagsSet+0x9a>
    }
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8008862:	6839      	ldr	r1, [r7, #0]
 8008864:	69b8      	ldr	r0, [r7, #24]
 8008866:	f000 fb27 	bl	8008eb8 <xEventGroupSetBits>
 800886a:	61f8      	str	r0, [r7, #28]
 800886c:	e000      	b.n	8008870 <osEventFlagsSet+0x9c>
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 800886e:	bf00      	nop
  }

  return (rflags);
 8008870:	69fb      	ldr	r3, [r7, #28]
}
 8008872:	4618      	mov	r0, r3
 8008874:	3720      	adds	r7, #32
 8008876:	46bd      	mov	sp, r7
 8008878:	bd80      	pop	{r7, pc}
 800887a:	bf00      	nop
 800887c:	20004f5c 	.word	0x20004f5c
 8008880:	e000ed04 	.word	0xe000ed04

08008884 <osEventFlagsClear>:

uint32_t osEventFlagsClear (osEventFlagsId_t ef_id, uint32_t flags) {
 8008884:	b580      	push	{r7, lr}
 8008886:	b088      	sub	sp, #32
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]
 800888c:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	61bb      	str	r3, [r7, #24]
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8008892:	69bb      	ldr	r3, [r7, #24]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d004      	beq.n	80088a2 <osEventFlagsClear+0x1e>
 8008898:	683b      	ldr	r3, [r7, #0]
 800889a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d003      	beq.n	80088aa <osEventFlagsClear+0x26>
    rflags = (uint32_t)osErrorParameter;
 80088a2:	f06f 0303 	mvn.w	r3, #3
 80088a6:	61fb      	str	r3, [r7, #28]
 80088a8:	e029      	b.n	80088fe <osEventFlagsClear+0x7a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80088aa:	f3ef 8305 	mrs	r3, IPSR
 80088ae:	617b      	str	r3, [r7, #20]
  return(result);
 80088b0:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d10f      	bne.n	80088d6 <osEventFlagsClear+0x52>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80088b6:	f3ef 8310 	mrs	r3, PRIMASK
 80088ba:	613b      	str	r3, [r7, #16]
  return(result);
 80088bc:	693b      	ldr	r3, [r7, #16]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d105      	bne.n	80088ce <osEventFlagsClear+0x4a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80088c2:	f3ef 8311 	mrs	r3, BASEPRI
 80088c6:	60fb      	str	r3, [r7, #12]
  return(result);
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d012      	beq.n	80088f4 <osEventFlagsClear+0x70>
 80088ce:	4b0e      	ldr	r3, [pc, #56]	; (8008908 <osEventFlagsClear+0x84>)
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	2b02      	cmp	r3, #2
 80088d4:	d10e      	bne.n	80088f4 <osEventFlagsClear+0x70>
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 80088d6:	69b8      	ldr	r0, [r7, #24]
 80088d8:	f000 faca 	bl	8008e70 <xEventGroupGetBitsFromISR>
 80088dc:	61f8      	str	r0, [r7, #28]

    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 80088de:	6839      	ldr	r1, [r7, #0]
 80088e0:	69b8      	ldr	r0, [r7, #24]
 80088e2:	f000 fab1 	bl	8008e48 <xEventGroupClearBitsFromISR>
 80088e6:	4603      	mov	r3, r0
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d108      	bne.n	80088fe <osEventFlagsClear+0x7a>
      rflags = (uint32_t)osErrorResource;
 80088ec:	f06f 0302 	mvn.w	r3, #2
 80088f0:	61fb      	str	r3, [r7, #28]
    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 80088f2:	e004      	b.n	80088fe <osEventFlagsClear+0x7a>
    }
  }
  else {
    rflags = xEventGroupClearBits (hEventGroup, (EventBits_t)flags);
 80088f4:	6839      	ldr	r1, [r7, #0]
 80088f6:	69b8      	ldr	r0, [r7, #24]
 80088f8:	f000 fa6e 	bl	8008dd8 <xEventGroupClearBits>
 80088fc:	61f8      	str	r0, [r7, #28]
  }

  return (rflags);
 80088fe:	69fb      	ldr	r3, [r7, #28]
}
 8008900:	4618      	mov	r0, r3
 8008902:	3720      	adds	r7, #32
 8008904:	46bd      	mov	sp, r7
 8008906:	bd80      	pop	{r7, pc}
 8008908:	20004f5c 	.word	0x20004f5c

0800890c <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 800890c:	b580      	push	{r7, lr}
 800890e:	b08e      	sub	sp, #56	; 0x38
 8008910:	af02      	add	r7, sp, #8
 8008912:	60f8      	str	r0, [r7, #12]
 8008914:	60b9      	str	r1, [r7, #8]
 8008916:	607a      	str	r2, [r7, #4]
 8008918:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	623b      	str	r3, [r7, #32]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800891e:	6a3b      	ldr	r3, [r7, #32]
 8008920:	2b00      	cmp	r3, #0
 8008922:	d004      	beq.n	800892e <osEventFlagsWait+0x22>
 8008924:	68bb      	ldr	r3, [r7, #8]
 8008926:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800892a:	2b00      	cmp	r3, #0
 800892c:	d003      	beq.n	8008936 <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 800892e:	f06f 0303 	mvn.w	r3, #3
 8008932:	627b      	str	r3, [r7, #36]	; 0x24
 8008934:	e059      	b.n	80089ea <osEventFlagsWait+0xde>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008936:	f3ef 8305 	mrs	r3, IPSR
 800893a:	61fb      	str	r3, [r7, #28]
  return(result);
 800893c:	69fb      	ldr	r3, [r7, #28]
  }
  else if (IS_IRQ()) {
 800893e:	2b00      	cmp	r3, #0
 8008940:	d10f      	bne.n	8008962 <osEventFlagsWait+0x56>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008942:	f3ef 8310 	mrs	r3, PRIMASK
 8008946:	61bb      	str	r3, [r7, #24]
  return(result);
 8008948:	69bb      	ldr	r3, [r7, #24]
 800894a:	2b00      	cmp	r3, #0
 800894c:	d105      	bne.n	800895a <osEventFlagsWait+0x4e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800894e:	f3ef 8311 	mrs	r3, BASEPRI
 8008952:	617b      	str	r3, [r7, #20]
  return(result);
 8008954:	697b      	ldr	r3, [r7, #20]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d007      	beq.n	800896a <osEventFlagsWait+0x5e>
 800895a:	4b26      	ldr	r3, [pc, #152]	; (80089f4 <osEventFlagsWait+0xe8>)
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	2b02      	cmp	r3, #2
 8008960:	d103      	bne.n	800896a <osEventFlagsWait+0x5e>
    rflags = (uint32_t)osErrorISR;
 8008962:	f06f 0305 	mvn.w	r3, #5
 8008966:	627b      	str	r3, [r7, #36]	; 0x24
 8008968:	e03f      	b.n	80089ea <osEventFlagsWait+0xde>
  }
  else {
    if (options & osFlagsWaitAll) {
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	f003 0301 	and.w	r3, r3, #1
 8008970:	2b00      	cmp	r3, #0
 8008972:	d002      	beq.n	800897a <osEventFlagsWait+0x6e>
      wait_all = pdTRUE;
 8008974:	2301      	movs	r3, #1
 8008976:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008978:	e001      	b.n	800897e <osEventFlagsWait+0x72>
    } else {
      wait_all = pdFAIL;
 800897a:	2300      	movs	r3, #0
 800897c:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    if (options & osFlagsNoClear) {
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	f003 0302 	and.w	r3, r3, #2
 8008984:	2b00      	cmp	r3, #0
 8008986:	d002      	beq.n	800898e <osEventFlagsWait+0x82>
      exit_clr = pdFAIL;
 8008988:	2300      	movs	r3, #0
 800898a:	62bb      	str	r3, [r7, #40]	; 0x28
 800898c:	e001      	b.n	8008992 <osEventFlagsWait+0x86>
    } else {
      exit_clr = pdTRUE;
 800898e:	2301      	movs	r3, #1
 8008990:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8008992:	683b      	ldr	r3, [r7, #0]
 8008994:	9300      	str	r3, [sp, #0]
 8008996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008998:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800899a:	68b9      	ldr	r1, [r7, #8]
 800899c:	6a38      	ldr	r0, [r7, #32]
 800899e:	f000 f94d 	bl	8008c3c <xEventGroupWaitBits>
 80089a2:	6278      	str	r0, [r7, #36]	; 0x24

    if (options & osFlagsWaitAll) {
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	f003 0301 	and.w	r3, r3, #1
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d00e      	beq.n	80089cc <osEventFlagsWait+0xc0>
      if (flags != rflags) {
 80089ae:	68ba      	ldr	r2, [r7, #8]
 80089b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089b2:	429a      	cmp	r2, r3
 80089b4:	d019      	beq.n	80089ea <osEventFlagsWait+0xde>
        if (timeout > 0U) {
 80089b6:	683b      	ldr	r3, [r7, #0]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d003      	beq.n	80089c4 <osEventFlagsWait+0xb8>
          rflags = (uint32_t)osErrorTimeout;
 80089bc:	f06f 0301 	mvn.w	r3, #1
 80089c0:	627b      	str	r3, [r7, #36]	; 0x24
 80089c2:	e012      	b.n	80089ea <osEventFlagsWait+0xde>
        } else {
          rflags = (uint32_t)osErrorResource;
 80089c4:	f06f 0302 	mvn.w	r3, #2
 80089c8:	627b      	str	r3, [r7, #36]	; 0x24
 80089ca:	e00e      	b.n	80089ea <osEventFlagsWait+0xde>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 80089cc:	68ba      	ldr	r2, [r7, #8]
 80089ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089d0:	4013      	ands	r3, r2
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d109      	bne.n	80089ea <osEventFlagsWait+0xde>
        if (timeout > 0U) {
 80089d6:	683b      	ldr	r3, [r7, #0]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d003      	beq.n	80089e4 <osEventFlagsWait+0xd8>
          rflags = (uint32_t)osErrorTimeout;
 80089dc:	f06f 0301 	mvn.w	r3, #1
 80089e0:	627b      	str	r3, [r7, #36]	; 0x24
 80089e2:	e002      	b.n	80089ea <osEventFlagsWait+0xde>
        } else {
          rflags = (uint32_t)osErrorResource;
 80089e4:	f06f 0302 	mvn.w	r3, #2
 80089e8:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }
  }

  return (rflags);
 80089ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80089ec:	4618      	mov	r0, r3
 80089ee:	3730      	adds	r7, #48	; 0x30
 80089f0:	46bd      	mov	sp, r7
 80089f2:	bd80      	pop	{r7, pc}
 80089f4:	20004f5c 	.word	0x20004f5c

080089f8 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b08c      	sub	sp, #48	; 0x30
 80089fc:	af02      	add	r7, sp, #8
 80089fe:	60f8      	str	r0, [r7, #12]
 8008a00:	60b9      	str	r1, [r7, #8]
 8008a02:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8008a04:	2300      	movs	r3, #0
 8008a06:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008a08:	f3ef 8305 	mrs	r3, IPSR
 8008a0c:	61bb      	str	r3, [r7, #24]
  return(result);
 8008a0e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	f040 8086 	bne.w	8008b22 <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008a16:	f3ef 8310 	mrs	r3, PRIMASK
 8008a1a:	617b      	str	r3, [r7, #20]
  return(result);
 8008a1c:	697b      	ldr	r3, [r7, #20]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d105      	bne.n	8008a2e <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008a22:	f3ef 8311 	mrs	r3, BASEPRI
 8008a26:	613b      	str	r3, [r7, #16]
  return(result);
 8008a28:	693b      	ldr	r3, [r7, #16]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d003      	beq.n	8008a36 <osSemaphoreNew+0x3e>
 8008a2e:	4b3f      	ldr	r3, [pc, #252]	; (8008b2c <osSemaphoreNew+0x134>)
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	2b02      	cmp	r3, #2
 8008a34:	d075      	beq.n	8008b22 <osSemaphoreNew+0x12a>
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d072      	beq.n	8008b22 <osSemaphoreNew+0x12a>
 8008a3c:	68ba      	ldr	r2, [r7, #8]
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	429a      	cmp	r2, r3
 8008a42:	d86e      	bhi.n	8008b22 <osSemaphoreNew+0x12a>
    mem = -1;
 8008a44:	f04f 33ff 	mov.w	r3, #4294967295
 8008a48:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d015      	beq.n	8008a7c <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	689b      	ldr	r3, [r3, #8]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d006      	beq.n	8008a66 <osSemaphoreNew+0x6e>
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	68db      	ldr	r3, [r3, #12]
 8008a5c:	2b4f      	cmp	r3, #79	; 0x4f
 8008a5e:	d902      	bls.n	8008a66 <osSemaphoreNew+0x6e>
        mem = 1;
 8008a60:	2301      	movs	r3, #1
 8008a62:	623b      	str	r3, [r7, #32]
 8008a64:	e00c      	b.n	8008a80 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	689b      	ldr	r3, [r3, #8]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d108      	bne.n	8008a80 <osSemaphoreNew+0x88>
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	68db      	ldr	r3, [r3, #12]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d104      	bne.n	8008a80 <osSemaphoreNew+0x88>
          mem = 0;
 8008a76:	2300      	movs	r3, #0
 8008a78:	623b      	str	r3, [r7, #32]
 8008a7a:	e001      	b.n	8008a80 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8008a80:	6a3b      	ldr	r3, [r7, #32]
 8008a82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a86:	d04c      	beq.n	8008b22 <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	2b01      	cmp	r3, #1
 8008a8c:	d128      	bne.n	8008ae0 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 8008a8e:	6a3b      	ldr	r3, [r7, #32]
 8008a90:	2b01      	cmp	r3, #1
 8008a92:	d10a      	bne.n	8008aaa <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	689b      	ldr	r3, [r3, #8]
 8008a98:	2203      	movs	r2, #3
 8008a9a:	9200      	str	r2, [sp, #0]
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	2100      	movs	r1, #0
 8008aa0:	2001      	movs	r0, #1
 8008aa2:	f000 fc01 	bl	80092a8 <xQueueGenericCreateStatic>
 8008aa6:	6278      	str	r0, [r7, #36]	; 0x24
 8008aa8:	e005      	b.n	8008ab6 <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8008aaa:	2203      	movs	r2, #3
 8008aac:	2100      	movs	r1, #0
 8008aae:	2001      	movs	r0, #1
 8008ab0:	f000 fc72 	bl	8009398 <xQueueGenericCreate>
 8008ab4:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8008ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d022      	beq.n	8008b02 <osSemaphoreNew+0x10a>
 8008abc:	68bb      	ldr	r3, [r7, #8]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d01f      	beq.n	8008b02 <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	2200      	movs	r2, #0
 8008ac6:	2100      	movs	r1, #0
 8008ac8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008aca:	f000 fd33 	bl	8009534 <xQueueGenericSend>
 8008ace:	4603      	mov	r3, r0
 8008ad0:	2b01      	cmp	r3, #1
 8008ad2:	d016      	beq.n	8008b02 <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 8008ad4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008ad6:	f000 ffa3 	bl	8009a20 <vQueueDelete>
            hSemaphore = NULL;
 8008ada:	2300      	movs	r3, #0
 8008adc:	627b      	str	r3, [r7, #36]	; 0x24
 8008ade:	e010      	b.n	8008b02 <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 8008ae0:	6a3b      	ldr	r3, [r7, #32]
 8008ae2:	2b01      	cmp	r3, #1
 8008ae4:	d108      	bne.n	8008af8 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	689b      	ldr	r3, [r3, #8]
 8008aea:	461a      	mov	r2, r3
 8008aec:	68b9      	ldr	r1, [r7, #8]
 8008aee:	68f8      	ldr	r0, [r7, #12]
 8008af0:	f000 fcb5 	bl	800945e <xQueueCreateCountingSemaphoreStatic>
 8008af4:	6278      	str	r0, [r7, #36]	; 0x24
 8008af6:	e004      	b.n	8008b02 <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8008af8:	68b9      	ldr	r1, [r7, #8]
 8008afa:	68f8      	ldr	r0, [r7, #12]
 8008afc:	f000 fce6 	bl	80094cc <xQueueCreateCountingSemaphore>
 8008b00:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8008b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d00c      	beq.n	8008b22 <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d003      	beq.n	8008b16 <osSemaphoreNew+0x11e>
          name = attr->name;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	61fb      	str	r3, [r7, #28]
 8008b14:	e001      	b.n	8008b1a <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 8008b16:	2300      	movs	r3, #0
 8008b18:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8008b1a:	69f9      	ldr	r1, [r7, #28]
 8008b1c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008b1e:	f001 f8b3 	bl	8009c88 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8008b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008b24:	4618      	mov	r0, r3
 8008b26:	3728      	adds	r7, #40	; 0x28
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	bd80      	pop	{r7, pc}
 8008b2c:	20004f5c 	.word	0x20004f5c

08008b30 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008b30:	b480      	push	{r7}
 8008b32:	b085      	sub	sp, #20
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	60f8      	str	r0, [r7, #12]
 8008b38:	60b9      	str	r1, [r7, #8]
 8008b3a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	4a07      	ldr	r2, [pc, #28]	; (8008b5c <vApplicationGetIdleTaskMemory+0x2c>)
 8008b40:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008b42:	68bb      	ldr	r3, [r7, #8]
 8008b44:	4a06      	ldr	r2, [pc, #24]	; (8008b60 <vApplicationGetIdleTaskMemory+0x30>)
 8008b46:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	2280      	movs	r2, #128	; 0x80
 8008b4c:	601a      	str	r2, [r3, #0]
}
 8008b4e:	bf00      	nop
 8008b50:	3714      	adds	r7, #20
 8008b52:	46bd      	mov	sp, r7
 8008b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b58:	4770      	bx	lr
 8008b5a:	bf00      	nop
 8008b5c:	20004f60 	.word	0x20004f60
 8008b60:	20004fbc 	.word	0x20004fbc

08008b64 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008b64:	b480      	push	{r7}
 8008b66:	b085      	sub	sp, #20
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	60f8      	str	r0, [r7, #12]
 8008b6c:	60b9      	str	r1, [r7, #8]
 8008b6e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	4a07      	ldr	r2, [pc, #28]	; (8008b90 <vApplicationGetTimerTaskMemory+0x2c>)
 8008b74:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008b76:	68bb      	ldr	r3, [r7, #8]
 8008b78:	4a06      	ldr	r2, [pc, #24]	; (8008b94 <vApplicationGetTimerTaskMemory+0x30>)
 8008b7a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008b82:	601a      	str	r2, [r3, #0]
}
 8008b84:	bf00      	nop
 8008b86:	3714      	adds	r7, #20
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8e:	4770      	bx	lr
 8008b90:	200051bc 	.word	0x200051bc
 8008b94:	20005218 	.word	0x20005218

08008b98 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b086      	sub	sp, #24
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d10a      	bne.n	8008bbc <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008ba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008baa:	f383 8811 	msr	BASEPRI, r3
 8008bae:	f3bf 8f6f 	isb	sy
 8008bb2:	f3bf 8f4f 	dsb	sy
 8008bb6:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008bb8:	bf00      	nop
 8008bba:	e7fe      	b.n	8008bba <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8008bbc:	2320      	movs	r3, #32
 8008bbe:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8008bc0:	68bb      	ldr	r3, [r7, #8]
 8008bc2:	2b20      	cmp	r3, #32
 8008bc4:	d00a      	beq.n	8008bdc <xEventGroupCreateStatic+0x44>
	__asm volatile
 8008bc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bca:	f383 8811 	msr	BASEPRI, r3
 8008bce:	f3bf 8f6f 	isb	sy
 8008bd2:	f3bf 8f4f 	dsb	sy
 8008bd6:	60fb      	str	r3, [r7, #12]
}
 8008bd8:	bf00      	nop
 8008bda:	e7fe      	b.n	8008bda <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8008be0:	697b      	ldr	r3, [r7, #20]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d00a      	beq.n	8008bfc <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 8008be6:	697b      	ldr	r3, [r7, #20]
 8008be8:	2200      	movs	r2, #0
 8008bea:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8008bec:	697b      	ldr	r3, [r7, #20]
 8008bee:	3304      	adds	r3, #4
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	f000 fa3d 	bl	8009070 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8008bf6:	697b      	ldr	r3, [r7, #20]
 8008bf8:	2201      	movs	r2, #1
 8008bfa:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8008bfc:	697b      	ldr	r3, [r7, #20]
	}
 8008bfe:	4618      	mov	r0, r3
 8008c00:	3718      	adds	r7, #24
 8008c02:	46bd      	mov	sp, r7
 8008c04:	bd80      	pop	{r7, pc}

08008c06 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8008c06:	b580      	push	{r7, lr}
 8008c08:	b082      	sub	sp, #8
 8008c0a:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8008c0c:	2020      	movs	r0, #32
 8008c0e:	f002 fe33 	bl	800b878 <pvPortMalloc>
 8008c12:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d00a      	beq.n	8008c30 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	2200      	movs	r2, #0
 8008c1e:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	3304      	adds	r3, #4
 8008c24:	4618      	mov	r0, r3
 8008c26:	f000 fa23 	bl	8009070 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	2200      	movs	r2, #0
 8008c2e:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8008c30:	687b      	ldr	r3, [r7, #4]
	}
 8008c32:	4618      	mov	r0, r3
 8008c34:	3708      	adds	r7, #8
 8008c36:	46bd      	mov	sp, r7
 8008c38:	bd80      	pop	{r7, pc}
	...

08008c3c <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b090      	sub	sp, #64	; 0x40
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	60f8      	str	r0, [r7, #12]
 8008c44:	60b9      	str	r1, [r7, #8]
 8008c46:	607a      	str	r2, [r7, #4]
 8008c48:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8008c4e:	2300      	movs	r3, #0
 8008c50:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8008c52:	2300      	movs	r3, #0
 8008c54:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d10a      	bne.n	8008c72 <xEventGroupWaitBits+0x36>
	__asm volatile
 8008c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c60:	f383 8811 	msr	BASEPRI, r3
 8008c64:	f3bf 8f6f 	isb	sy
 8008c68:	f3bf 8f4f 	dsb	sy
 8008c6c:	623b      	str	r3, [r7, #32]
}
 8008c6e:	bf00      	nop
 8008c70:	e7fe      	b.n	8008c70 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8008c72:	68bb      	ldr	r3, [r7, #8]
 8008c74:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d00a      	beq.n	8008c92 <xEventGroupWaitBits+0x56>
	__asm volatile
 8008c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c80:	f383 8811 	msr	BASEPRI, r3
 8008c84:	f3bf 8f6f 	isb	sy
 8008c88:	f3bf 8f4f 	dsb	sy
 8008c8c:	61fb      	str	r3, [r7, #28]
}
 8008c8e:	bf00      	nop
 8008c90:	e7fe      	b.n	8008c90 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8008c92:	68bb      	ldr	r3, [r7, #8]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d10a      	bne.n	8008cae <xEventGroupWaitBits+0x72>
	__asm volatile
 8008c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c9c:	f383 8811 	msr	BASEPRI, r3
 8008ca0:	f3bf 8f6f 	isb	sy
 8008ca4:	f3bf 8f4f 	dsb	sy
 8008ca8:	61bb      	str	r3, [r7, #24]
}
 8008caa:	bf00      	nop
 8008cac:	e7fe      	b.n	8008cac <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008cae:	f001 ff2f 	bl	800ab10 <xTaskGetSchedulerState>
 8008cb2:	4603      	mov	r3, r0
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d102      	bne.n	8008cbe <xEventGroupWaitBits+0x82>
 8008cb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d101      	bne.n	8008cc2 <xEventGroupWaitBits+0x86>
 8008cbe:	2301      	movs	r3, #1
 8008cc0:	e000      	b.n	8008cc4 <xEventGroupWaitBits+0x88>
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d10a      	bne.n	8008cde <xEventGroupWaitBits+0xa2>
	__asm volatile
 8008cc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ccc:	f383 8811 	msr	BASEPRI, r3
 8008cd0:	f3bf 8f6f 	isb	sy
 8008cd4:	f3bf 8f4f 	dsb	sy
 8008cd8:	617b      	str	r3, [r7, #20]
}
 8008cda:	bf00      	nop
 8008cdc:	e7fe      	b.n	8008cdc <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 8008cde:	f001 fa97 	bl	800a210 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8008ce2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8008ce8:	683a      	ldr	r2, [r7, #0]
 8008cea:	68b9      	ldr	r1, [r7, #8]
 8008cec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008cee:	f000 f988 	bl	8009002 <prvTestWaitCondition>
 8008cf2:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8008cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d00e      	beq.n	8008d18 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8008cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cfc:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8008cfe:	2300      	movs	r3, #0
 8008d00:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d028      	beq.n	8008d5a <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8008d08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d0a:	681a      	ldr	r2, [r3, #0]
 8008d0c:	68bb      	ldr	r3, [r7, #8]
 8008d0e:	43db      	mvns	r3, r3
 8008d10:	401a      	ands	r2, r3
 8008d12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d14:	601a      	str	r2, [r3, #0]
 8008d16:	e020      	b.n	8008d5a <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8008d18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d104      	bne.n	8008d28 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8008d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d20:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8008d22:	2301      	movs	r3, #1
 8008d24:	633b      	str	r3, [r7, #48]	; 0x30
 8008d26:	e018      	b.n	8008d5a <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d003      	beq.n	8008d36 <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8008d2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d30:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008d34:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8008d36:	683b      	ldr	r3, [r7, #0]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d003      	beq.n	8008d44 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8008d3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d3e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008d42:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8008d44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d46:	1d18      	adds	r0, r3, #4
 8008d48:	68ba      	ldr	r2, [r7, #8]
 8008d4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d4c:	4313      	orrs	r3, r2
 8008d4e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008d50:	4619      	mov	r1, r3
 8008d52:	f001 fc55 	bl	800a600 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8008d56:	2300      	movs	r3, #0
 8008d58:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8008d5a:	f001 fa67 	bl	800a22c <xTaskResumeAll>
 8008d5e:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8008d60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d031      	beq.n	8008dca <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 8008d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d107      	bne.n	8008d7c <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8008d6c:	4b19      	ldr	r3, [pc, #100]	; (8008dd4 <xEventGroupWaitBits+0x198>)
 8008d6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d72:	601a      	str	r2, [r3, #0]
 8008d74:	f3bf 8f4f 	dsb	sy
 8008d78:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8008d7c:	f001 ff54 	bl	800ac28 <uxTaskResetEventItemValue>
 8008d80:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8008d82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d11a      	bne.n	8008dc2 <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 8008d8c:	f002 fc52 	bl	800b634 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8008d90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8008d96:	683a      	ldr	r2, [r7, #0]
 8008d98:	68b9      	ldr	r1, [r7, #8]
 8008d9a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008d9c:	f000 f931 	bl	8009002 <prvTestWaitCondition>
 8008da0:	4603      	mov	r3, r0
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d009      	beq.n	8008dba <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d006      	beq.n	8008dba <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8008dac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dae:	681a      	ldr	r2, [r3, #0]
 8008db0:	68bb      	ldr	r3, [r7, #8]
 8008db2:	43db      	mvns	r3, r3
 8008db4:	401a      	ands	r2, r3
 8008db6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008db8:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8008dba:	2301      	movs	r3, #1
 8008dbc:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 8008dbe:	f002 fc69 	bl	800b694 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8008dc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008dc4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008dc8:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8008dca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008dcc:	4618      	mov	r0, r3
 8008dce:	3740      	adds	r7, #64	; 0x40
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	bd80      	pop	{r7, pc}
 8008dd4:	e000ed04 	.word	0xe000ed04

08008dd8 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	b086      	sub	sp, #24
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]
 8008de0:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d10a      	bne.n	8008e02 <xEventGroupClearBits+0x2a>
	__asm volatile
 8008dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008df0:	f383 8811 	msr	BASEPRI, r3
 8008df4:	f3bf 8f6f 	isb	sy
 8008df8:	f3bf 8f4f 	dsb	sy
 8008dfc:	60fb      	str	r3, [r7, #12]
}
 8008dfe:	bf00      	nop
 8008e00:	e7fe      	b.n	8008e00 <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8008e02:	683b      	ldr	r3, [r7, #0]
 8008e04:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d00a      	beq.n	8008e22 <xEventGroupClearBits+0x4a>
	__asm volatile
 8008e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e10:	f383 8811 	msr	BASEPRI, r3
 8008e14:	f3bf 8f6f 	isb	sy
 8008e18:	f3bf 8f4f 	dsb	sy
 8008e1c:	60bb      	str	r3, [r7, #8]
}
 8008e1e:	bf00      	nop
 8008e20:	e7fe      	b.n	8008e20 <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 8008e22:	f002 fc07 	bl	800b634 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 8008e26:	697b      	ldr	r3, [r7, #20]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8008e2c:	697b      	ldr	r3, [r7, #20]
 8008e2e:	681a      	ldr	r2, [r3, #0]
 8008e30:	683b      	ldr	r3, [r7, #0]
 8008e32:	43db      	mvns	r3, r3
 8008e34:	401a      	ands	r2, r3
 8008e36:	697b      	ldr	r3, [r7, #20]
 8008e38:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 8008e3a:	f002 fc2b 	bl	800b694 <vPortExitCritical>

	return uxReturn;
 8008e3e:	693b      	ldr	r3, [r7, #16]
}
 8008e40:	4618      	mov	r0, r3
 8008e42:	3718      	adds	r7, #24
 8008e44:	46bd      	mov	sp, r7
 8008e46:	bd80      	pop	{r7, pc}

08008e48 <xEventGroupClearBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
	{
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b084      	sub	sp, #16
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
 8008e50:	6039      	str	r1, [r7, #0]
		BaseType_t xReturn;

		traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToClear, NULL ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8008e52:	2300      	movs	r3, #0
 8008e54:	683a      	ldr	r2, [r7, #0]
 8008e56:	6879      	ldr	r1, [r7, #4]
 8008e58:	4804      	ldr	r0, [pc, #16]	; (8008e6c <xEventGroupClearBitsFromISR+0x24>)
 8008e5a:	f002 fa9f 	bl	800b39c <xTimerPendFunctionCallFromISR>
 8008e5e:	60f8      	str	r0, [r7, #12]

		return xReturn;
 8008e60:	68fb      	ldr	r3, [r7, #12]
	}
 8008e62:	4618      	mov	r0, r3
 8008e64:	3710      	adds	r7, #16
 8008e66:	46bd      	mov	sp, r7
 8008e68:	bd80      	pop	{r7, pc}
 8008e6a:	bf00      	nop
 8008e6c:	08008fe9 	.word	0x08008fe9

08008e70 <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
 8008e70:	b480      	push	{r7}
 8008e72:	b089      	sub	sp, #36	; 0x24
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	6078      	str	r0, [r7, #4]
UBaseType_t uxSavedInterruptStatus;
EventGroup_t const * const pxEventBits = xEventGroup;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	61fb      	str	r3, [r7, #28]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008e7c:	f3ef 8211 	mrs	r2, BASEPRI
 8008e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e84:	f383 8811 	msr	BASEPRI, r3
 8008e88:	f3bf 8f6f 	isb	sy
 8008e8c:	f3bf 8f4f 	dsb	sy
 8008e90:	60fa      	str	r2, [r7, #12]
 8008e92:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008e94:	68fb      	ldr	r3, [r7, #12]
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008e96:	61bb      	str	r3, [r7, #24]
	{
		uxReturn = pxEventBits->uxEventBits;
 8008e98:	69fb      	ldr	r3, [r7, #28]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	617b      	str	r3, [r7, #20]
 8008e9e:	69bb      	ldr	r3, [r7, #24]
 8008ea0:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008ea2:	693b      	ldr	r3, [r7, #16]
 8008ea4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008ea8:	bf00      	nop
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
 8008eaa:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
 8008eac:	4618      	mov	r0, r3
 8008eae:	3724      	adds	r7, #36	; 0x24
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb6:	4770      	bx	lr

08008eb8 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b08e      	sub	sp, #56	; 0x38
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	6078      	str	r0, [r7, #4]
 8008ec0:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8008eca:	2300      	movs	r3, #0
 8008ecc:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d10a      	bne.n	8008eea <xEventGroupSetBits+0x32>
	__asm volatile
 8008ed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ed8:	f383 8811 	msr	BASEPRI, r3
 8008edc:	f3bf 8f6f 	isb	sy
 8008ee0:	f3bf 8f4f 	dsb	sy
 8008ee4:	613b      	str	r3, [r7, #16]
}
 8008ee6:	bf00      	nop
 8008ee8:	e7fe      	b.n	8008ee8 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8008eea:	683b      	ldr	r3, [r7, #0]
 8008eec:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d00a      	beq.n	8008f0a <xEventGroupSetBits+0x52>
	__asm volatile
 8008ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ef8:	f383 8811 	msr	BASEPRI, r3
 8008efc:	f3bf 8f6f 	isb	sy
 8008f00:	f3bf 8f4f 	dsb	sy
 8008f04:	60fb      	str	r3, [r7, #12]
}
 8008f06:	bf00      	nop
 8008f08:	e7fe      	b.n	8008f08 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8008f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f0c:	3304      	adds	r3, #4
 8008f0e:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f12:	3308      	adds	r3, #8
 8008f14:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8008f16:	f001 f97b 	bl	800a210 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8008f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f1c:	68db      	ldr	r3, [r3, #12]
 8008f1e:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8008f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f22:	681a      	ldr	r2, [r3, #0]
 8008f24:	683b      	ldr	r3, [r7, #0]
 8008f26:	431a      	orrs	r2, r3
 8008f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f2a:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8008f2c:	e03c      	b.n	8008fa8 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 8008f2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f30:	685b      	ldr	r3, [r3, #4]
 8008f32:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8008f34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8008f3e:	69bb      	ldr	r3, [r7, #24]
 8008f40:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8008f44:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8008f46:	69bb      	ldr	r3, [r7, #24]
 8008f48:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008f4c:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8008f4e:	697b      	ldr	r3, [r7, #20]
 8008f50:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d108      	bne.n	8008f6a <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8008f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f5a:	681a      	ldr	r2, [r3, #0]
 8008f5c:	69bb      	ldr	r3, [r7, #24]
 8008f5e:	4013      	ands	r3, r2
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d00b      	beq.n	8008f7c <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8008f64:	2301      	movs	r3, #1
 8008f66:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008f68:	e008      	b.n	8008f7c <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8008f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f6c:	681a      	ldr	r2, [r3, #0]
 8008f6e:	69bb      	ldr	r3, [r7, #24]
 8008f70:	4013      	ands	r3, r2
 8008f72:	69ba      	ldr	r2, [r7, #24]
 8008f74:	429a      	cmp	r2, r3
 8008f76:	d101      	bne.n	8008f7c <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8008f78:	2301      	movs	r3, #1
 8008f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8008f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d010      	beq.n	8008fa4 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8008f82:	697b      	ldr	r3, [r7, #20]
 8008f84:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d003      	beq.n	8008f94 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8008f8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f8e:	69bb      	ldr	r3, [r7, #24]
 8008f90:	4313      	orrs	r3, r2
 8008f92:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8008f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008f9c:	4619      	mov	r1, r3
 8008f9e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8008fa0:	f001 fbfa 	bl	800a798 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8008fa4:	69fb      	ldr	r3, [r7, #28]
 8008fa6:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8008fa8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008faa:	6a3b      	ldr	r3, [r7, #32]
 8008fac:	429a      	cmp	r2, r3
 8008fae:	d1be      	bne.n	8008f2e <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8008fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fb2:	681a      	ldr	r2, [r3, #0]
 8008fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fb6:	43db      	mvns	r3, r3
 8008fb8:	401a      	ands	r2, r3
 8008fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fbc:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8008fbe:	f001 f935 	bl	800a22c <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8008fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fc4:	681b      	ldr	r3, [r3, #0]
}
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	3738      	adds	r7, #56	; 0x38
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	bd80      	pop	{r7, pc}

08008fce <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8008fce:	b580      	push	{r7, lr}
 8008fd0:	b082      	sub	sp, #8
 8008fd2:	af00      	add	r7, sp, #0
 8008fd4:	6078      	str	r0, [r7, #4]
 8008fd6:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8008fd8:	6839      	ldr	r1, [r7, #0]
 8008fda:	6878      	ldr	r0, [r7, #4]
 8008fdc:	f7ff ff6c 	bl	8008eb8 <xEventGroupSetBits>
}
 8008fe0:	bf00      	nop
 8008fe2:	3708      	adds	r7, #8
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	bd80      	pop	{r7, pc}

08008fe8 <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	b082      	sub	sp, #8
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
 8008ff0:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8008ff2:	6839      	ldr	r1, [r7, #0]
 8008ff4:	6878      	ldr	r0, [r7, #4]
 8008ff6:	f7ff feef 	bl	8008dd8 <xEventGroupClearBits>
}
 8008ffa:	bf00      	nop
 8008ffc:	3708      	adds	r7, #8
 8008ffe:	46bd      	mov	sp, r7
 8009000:	bd80      	pop	{r7, pc}

08009002 <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8009002:	b480      	push	{r7}
 8009004:	b087      	sub	sp, #28
 8009006:	af00      	add	r7, sp, #0
 8009008:	60f8      	str	r0, [r7, #12]
 800900a:	60b9      	str	r1, [r7, #8]
 800900c:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 800900e:	2300      	movs	r3, #0
 8009010:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d107      	bne.n	8009028 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8009018:	68fa      	ldr	r2, [r7, #12]
 800901a:	68bb      	ldr	r3, [r7, #8]
 800901c:	4013      	ands	r3, r2
 800901e:	2b00      	cmp	r3, #0
 8009020:	d00a      	beq.n	8009038 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8009022:	2301      	movs	r3, #1
 8009024:	617b      	str	r3, [r7, #20]
 8009026:	e007      	b.n	8009038 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8009028:	68fa      	ldr	r2, [r7, #12]
 800902a:	68bb      	ldr	r3, [r7, #8]
 800902c:	4013      	ands	r3, r2
 800902e:	68ba      	ldr	r2, [r7, #8]
 8009030:	429a      	cmp	r2, r3
 8009032:	d101      	bne.n	8009038 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8009034:	2301      	movs	r3, #1
 8009036:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8009038:	697b      	ldr	r3, [r7, #20]
}
 800903a:	4618      	mov	r0, r3
 800903c:	371c      	adds	r7, #28
 800903e:	46bd      	mov	sp, r7
 8009040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009044:	4770      	bx	lr
	...

08009048 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8009048:	b580      	push	{r7, lr}
 800904a:	b086      	sub	sp, #24
 800904c:	af00      	add	r7, sp, #0
 800904e:	60f8      	str	r0, [r7, #12]
 8009050:	60b9      	str	r1, [r7, #8]
 8009052:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	68ba      	ldr	r2, [r7, #8]
 8009058:	68f9      	ldr	r1, [r7, #12]
 800905a:	4804      	ldr	r0, [pc, #16]	; (800906c <xEventGroupSetBitsFromISR+0x24>)
 800905c:	f002 f99e 	bl	800b39c <xTimerPendFunctionCallFromISR>
 8009060:	6178      	str	r0, [r7, #20]

		return xReturn;
 8009062:	697b      	ldr	r3, [r7, #20]
	}
 8009064:	4618      	mov	r0, r3
 8009066:	3718      	adds	r7, #24
 8009068:	46bd      	mov	sp, r7
 800906a:	bd80      	pop	{r7, pc}
 800906c:	08008fcf 	.word	0x08008fcf

08009070 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009070:	b480      	push	{r7}
 8009072:	b083      	sub	sp, #12
 8009074:	af00      	add	r7, sp, #0
 8009076:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	f103 0208 	add.w	r2, r3, #8
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	f04f 32ff 	mov.w	r2, #4294967295
 8009088:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	f103 0208 	add.w	r2, r3, #8
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	f103 0208 	add.w	r2, r3, #8
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	2200      	movs	r2, #0
 80090a2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80090a4:	bf00      	nop
 80090a6:	370c      	adds	r7, #12
 80090a8:	46bd      	mov	sp, r7
 80090aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ae:	4770      	bx	lr

080090b0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80090b0:	b480      	push	{r7}
 80090b2:	b083      	sub	sp, #12
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	2200      	movs	r2, #0
 80090bc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80090be:	bf00      	nop
 80090c0:	370c      	adds	r7, #12
 80090c2:	46bd      	mov	sp, r7
 80090c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c8:	4770      	bx	lr

080090ca <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80090ca:	b480      	push	{r7}
 80090cc:	b085      	sub	sp, #20
 80090ce:	af00      	add	r7, sp, #0
 80090d0:	6078      	str	r0, [r7, #4]
 80090d2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	685b      	ldr	r3, [r3, #4]
 80090d8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80090da:	683b      	ldr	r3, [r7, #0]
 80090dc:	68fa      	ldr	r2, [r7, #12]
 80090de:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	689a      	ldr	r2, [r3, #8]
 80090e4:	683b      	ldr	r3, [r7, #0]
 80090e6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	689b      	ldr	r3, [r3, #8]
 80090ec:	683a      	ldr	r2, [r7, #0]
 80090ee:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	683a      	ldr	r2, [r7, #0]
 80090f4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80090f6:	683b      	ldr	r3, [r7, #0]
 80090f8:	687a      	ldr	r2, [r7, #4]
 80090fa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	1c5a      	adds	r2, r3, #1
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	601a      	str	r2, [r3, #0]
}
 8009106:	bf00      	nop
 8009108:	3714      	adds	r7, #20
 800910a:	46bd      	mov	sp, r7
 800910c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009110:	4770      	bx	lr

08009112 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009112:	b480      	push	{r7}
 8009114:	b085      	sub	sp, #20
 8009116:	af00      	add	r7, sp, #0
 8009118:	6078      	str	r0, [r7, #4]
 800911a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800911c:	683b      	ldr	r3, [r7, #0]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009122:	68bb      	ldr	r3, [r7, #8]
 8009124:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009128:	d103      	bne.n	8009132 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	691b      	ldr	r3, [r3, #16]
 800912e:	60fb      	str	r3, [r7, #12]
 8009130:	e00c      	b.n	800914c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	3308      	adds	r3, #8
 8009136:	60fb      	str	r3, [r7, #12]
 8009138:	e002      	b.n	8009140 <vListInsert+0x2e>
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	685b      	ldr	r3, [r3, #4]
 800913e:	60fb      	str	r3, [r7, #12]
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	685b      	ldr	r3, [r3, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	68ba      	ldr	r2, [r7, #8]
 8009148:	429a      	cmp	r2, r3
 800914a:	d2f6      	bcs.n	800913a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	685a      	ldr	r2, [r3, #4]
 8009150:	683b      	ldr	r3, [r7, #0]
 8009152:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009154:	683b      	ldr	r3, [r7, #0]
 8009156:	685b      	ldr	r3, [r3, #4]
 8009158:	683a      	ldr	r2, [r7, #0]
 800915a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800915c:	683b      	ldr	r3, [r7, #0]
 800915e:	68fa      	ldr	r2, [r7, #12]
 8009160:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	683a      	ldr	r2, [r7, #0]
 8009166:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009168:	683b      	ldr	r3, [r7, #0]
 800916a:	687a      	ldr	r2, [r7, #4]
 800916c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	1c5a      	adds	r2, r3, #1
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	601a      	str	r2, [r3, #0]
}
 8009178:	bf00      	nop
 800917a:	3714      	adds	r7, #20
 800917c:	46bd      	mov	sp, r7
 800917e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009182:	4770      	bx	lr

08009184 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009184:	b480      	push	{r7}
 8009186:	b085      	sub	sp, #20
 8009188:	af00      	add	r7, sp, #0
 800918a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	691b      	ldr	r3, [r3, #16]
 8009190:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	685b      	ldr	r3, [r3, #4]
 8009196:	687a      	ldr	r2, [r7, #4]
 8009198:	6892      	ldr	r2, [r2, #8]
 800919a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	689b      	ldr	r3, [r3, #8]
 80091a0:	687a      	ldr	r2, [r7, #4]
 80091a2:	6852      	ldr	r2, [r2, #4]
 80091a4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	685b      	ldr	r3, [r3, #4]
 80091aa:	687a      	ldr	r2, [r7, #4]
 80091ac:	429a      	cmp	r2, r3
 80091ae:	d103      	bne.n	80091b8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	689a      	ldr	r2, [r3, #8]
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	2200      	movs	r2, #0
 80091bc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	1e5a      	subs	r2, r3, #1
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	681b      	ldr	r3, [r3, #0]
}
 80091cc:	4618      	mov	r0, r3
 80091ce:	3714      	adds	r7, #20
 80091d0:	46bd      	mov	sp, r7
 80091d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d6:	4770      	bx	lr

080091d8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80091d8:	b580      	push	{r7, lr}
 80091da:	b084      	sub	sp, #16
 80091dc:	af00      	add	r7, sp, #0
 80091de:	6078      	str	r0, [r7, #4]
 80091e0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d10a      	bne.n	8009202 <xQueueGenericReset+0x2a>
	__asm volatile
 80091ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091f0:	f383 8811 	msr	BASEPRI, r3
 80091f4:	f3bf 8f6f 	isb	sy
 80091f8:	f3bf 8f4f 	dsb	sy
 80091fc:	60bb      	str	r3, [r7, #8]
}
 80091fe:	bf00      	nop
 8009200:	e7fe      	b.n	8009200 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009202:	f002 fa17 	bl	800b634 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	681a      	ldr	r2, [r3, #0]
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800920e:	68f9      	ldr	r1, [r7, #12]
 8009210:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009212:	fb01 f303 	mul.w	r3, r1, r3
 8009216:	441a      	add	r2, r3
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	2200      	movs	r2, #0
 8009220:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	681a      	ldr	r2, [r3, #0]
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	681a      	ldr	r2, [r3, #0]
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009232:	3b01      	subs	r3, #1
 8009234:	68f9      	ldr	r1, [r7, #12]
 8009236:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009238:	fb01 f303 	mul.w	r3, r1, r3
 800923c:	441a      	add	r2, r3
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	22ff      	movs	r2, #255	; 0xff
 8009246:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	22ff      	movs	r2, #255	; 0xff
 800924e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009252:	683b      	ldr	r3, [r7, #0]
 8009254:	2b00      	cmp	r3, #0
 8009256:	d114      	bne.n	8009282 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	691b      	ldr	r3, [r3, #16]
 800925c:	2b00      	cmp	r3, #0
 800925e:	d01a      	beq.n	8009296 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	3310      	adds	r3, #16
 8009264:	4618      	mov	r0, r3
 8009266:	f001 fa33 	bl	800a6d0 <xTaskRemoveFromEventList>
 800926a:	4603      	mov	r3, r0
 800926c:	2b00      	cmp	r3, #0
 800926e:	d012      	beq.n	8009296 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009270:	4b0c      	ldr	r3, [pc, #48]	; (80092a4 <xQueueGenericReset+0xcc>)
 8009272:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009276:	601a      	str	r2, [r3, #0]
 8009278:	f3bf 8f4f 	dsb	sy
 800927c:	f3bf 8f6f 	isb	sy
 8009280:	e009      	b.n	8009296 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	3310      	adds	r3, #16
 8009286:	4618      	mov	r0, r3
 8009288:	f7ff fef2 	bl	8009070 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	3324      	adds	r3, #36	; 0x24
 8009290:	4618      	mov	r0, r3
 8009292:	f7ff feed 	bl	8009070 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009296:	f002 f9fd 	bl	800b694 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800929a:	2301      	movs	r3, #1
}
 800929c:	4618      	mov	r0, r3
 800929e:	3710      	adds	r7, #16
 80092a0:	46bd      	mov	sp, r7
 80092a2:	bd80      	pop	{r7, pc}
 80092a4:	e000ed04 	.word	0xe000ed04

080092a8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b08e      	sub	sp, #56	; 0x38
 80092ac:	af02      	add	r7, sp, #8
 80092ae:	60f8      	str	r0, [r7, #12]
 80092b0:	60b9      	str	r1, [r7, #8]
 80092b2:	607a      	str	r2, [r7, #4]
 80092b4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d10a      	bne.n	80092d2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80092bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092c0:	f383 8811 	msr	BASEPRI, r3
 80092c4:	f3bf 8f6f 	isb	sy
 80092c8:	f3bf 8f4f 	dsb	sy
 80092cc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80092ce:	bf00      	nop
 80092d0:	e7fe      	b.n	80092d0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80092d2:	683b      	ldr	r3, [r7, #0]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d10a      	bne.n	80092ee <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80092d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092dc:	f383 8811 	msr	BASEPRI, r3
 80092e0:	f3bf 8f6f 	isb	sy
 80092e4:	f3bf 8f4f 	dsb	sy
 80092e8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80092ea:	bf00      	nop
 80092ec:	e7fe      	b.n	80092ec <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d002      	beq.n	80092fa <xQueueGenericCreateStatic+0x52>
 80092f4:	68bb      	ldr	r3, [r7, #8]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d001      	beq.n	80092fe <xQueueGenericCreateStatic+0x56>
 80092fa:	2301      	movs	r3, #1
 80092fc:	e000      	b.n	8009300 <xQueueGenericCreateStatic+0x58>
 80092fe:	2300      	movs	r3, #0
 8009300:	2b00      	cmp	r3, #0
 8009302:	d10a      	bne.n	800931a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009308:	f383 8811 	msr	BASEPRI, r3
 800930c:	f3bf 8f6f 	isb	sy
 8009310:	f3bf 8f4f 	dsb	sy
 8009314:	623b      	str	r3, [r7, #32]
}
 8009316:	bf00      	nop
 8009318:	e7fe      	b.n	8009318 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	2b00      	cmp	r3, #0
 800931e:	d102      	bne.n	8009326 <xQueueGenericCreateStatic+0x7e>
 8009320:	68bb      	ldr	r3, [r7, #8]
 8009322:	2b00      	cmp	r3, #0
 8009324:	d101      	bne.n	800932a <xQueueGenericCreateStatic+0x82>
 8009326:	2301      	movs	r3, #1
 8009328:	e000      	b.n	800932c <xQueueGenericCreateStatic+0x84>
 800932a:	2300      	movs	r3, #0
 800932c:	2b00      	cmp	r3, #0
 800932e:	d10a      	bne.n	8009346 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009334:	f383 8811 	msr	BASEPRI, r3
 8009338:	f3bf 8f6f 	isb	sy
 800933c:	f3bf 8f4f 	dsb	sy
 8009340:	61fb      	str	r3, [r7, #28]
}
 8009342:	bf00      	nop
 8009344:	e7fe      	b.n	8009344 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009346:	2350      	movs	r3, #80	; 0x50
 8009348:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800934a:	697b      	ldr	r3, [r7, #20]
 800934c:	2b50      	cmp	r3, #80	; 0x50
 800934e:	d00a      	beq.n	8009366 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009354:	f383 8811 	msr	BASEPRI, r3
 8009358:	f3bf 8f6f 	isb	sy
 800935c:	f3bf 8f4f 	dsb	sy
 8009360:	61bb      	str	r3, [r7, #24]
}
 8009362:	bf00      	nop
 8009364:	e7fe      	b.n	8009364 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009366:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009368:	683b      	ldr	r3, [r7, #0]
 800936a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800936c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800936e:	2b00      	cmp	r3, #0
 8009370:	d00d      	beq.n	800938e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009374:	2201      	movs	r2, #1
 8009376:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800937a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800937e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009380:	9300      	str	r3, [sp, #0]
 8009382:	4613      	mov	r3, r2
 8009384:	687a      	ldr	r2, [r7, #4]
 8009386:	68b9      	ldr	r1, [r7, #8]
 8009388:	68f8      	ldr	r0, [r7, #12]
 800938a:	f000 f845 	bl	8009418 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800938e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009390:	4618      	mov	r0, r3
 8009392:	3730      	adds	r7, #48	; 0x30
 8009394:	46bd      	mov	sp, r7
 8009396:	bd80      	pop	{r7, pc}

08009398 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009398:	b580      	push	{r7, lr}
 800939a:	b08a      	sub	sp, #40	; 0x28
 800939c:	af02      	add	r7, sp, #8
 800939e:	60f8      	str	r0, [r7, #12]
 80093a0:	60b9      	str	r1, [r7, #8]
 80093a2:	4613      	mov	r3, r2
 80093a4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d10a      	bne.n	80093c2 <xQueueGenericCreate+0x2a>
	__asm volatile
 80093ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093b0:	f383 8811 	msr	BASEPRI, r3
 80093b4:	f3bf 8f6f 	isb	sy
 80093b8:	f3bf 8f4f 	dsb	sy
 80093bc:	613b      	str	r3, [r7, #16]
}
 80093be:	bf00      	nop
 80093c0:	e7fe      	b.n	80093c0 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80093c2:	68bb      	ldr	r3, [r7, #8]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d102      	bne.n	80093ce <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80093c8:	2300      	movs	r3, #0
 80093ca:	61fb      	str	r3, [r7, #28]
 80093cc:	e004      	b.n	80093d8 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	68ba      	ldr	r2, [r7, #8]
 80093d2:	fb02 f303 	mul.w	r3, r2, r3
 80093d6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80093d8:	69fb      	ldr	r3, [r7, #28]
 80093da:	3350      	adds	r3, #80	; 0x50
 80093dc:	4618      	mov	r0, r3
 80093de:	f002 fa4b 	bl	800b878 <pvPortMalloc>
 80093e2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80093e4:	69bb      	ldr	r3, [r7, #24]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d011      	beq.n	800940e <xQueueGenericCreate+0x76>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80093ea:	69bb      	ldr	r3, [r7, #24]
 80093ec:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80093ee:	697b      	ldr	r3, [r7, #20]
 80093f0:	3350      	adds	r3, #80	; 0x50
 80093f2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80093f4:	69bb      	ldr	r3, [r7, #24]
 80093f6:	2200      	movs	r2, #0
 80093f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80093fc:	79fa      	ldrb	r2, [r7, #7]
 80093fe:	69bb      	ldr	r3, [r7, #24]
 8009400:	9300      	str	r3, [sp, #0]
 8009402:	4613      	mov	r3, r2
 8009404:	697a      	ldr	r2, [r7, #20]
 8009406:	68b9      	ldr	r1, [r7, #8]
 8009408:	68f8      	ldr	r0, [r7, #12]
 800940a:	f000 f805 	bl	8009418 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800940e:	69bb      	ldr	r3, [r7, #24]
	}
 8009410:	4618      	mov	r0, r3
 8009412:	3720      	adds	r7, #32
 8009414:	46bd      	mov	sp, r7
 8009416:	bd80      	pop	{r7, pc}

08009418 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009418:	b580      	push	{r7, lr}
 800941a:	b084      	sub	sp, #16
 800941c:	af00      	add	r7, sp, #0
 800941e:	60f8      	str	r0, [r7, #12]
 8009420:	60b9      	str	r1, [r7, #8]
 8009422:	607a      	str	r2, [r7, #4]
 8009424:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009426:	68bb      	ldr	r3, [r7, #8]
 8009428:	2b00      	cmp	r3, #0
 800942a:	d103      	bne.n	8009434 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800942c:	69bb      	ldr	r3, [r7, #24]
 800942e:	69ba      	ldr	r2, [r7, #24]
 8009430:	601a      	str	r2, [r3, #0]
 8009432:	e002      	b.n	800943a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009434:	69bb      	ldr	r3, [r7, #24]
 8009436:	687a      	ldr	r2, [r7, #4]
 8009438:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800943a:	69bb      	ldr	r3, [r7, #24]
 800943c:	68fa      	ldr	r2, [r7, #12]
 800943e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009440:	69bb      	ldr	r3, [r7, #24]
 8009442:	68ba      	ldr	r2, [r7, #8]
 8009444:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009446:	2101      	movs	r1, #1
 8009448:	69b8      	ldr	r0, [r7, #24]
 800944a:	f7ff fec5 	bl	80091d8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800944e:	69bb      	ldr	r3, [r7, #24]
 8009450:	78fa      	ldrb	r2, [r7, #3]
 8009452:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009456:	bf00      	nop
 8009458:	3710      	adds	r7, #16
 800945a:	46bd      	mov	sp, r7
 800945c:	bd80      	pop	{r7, pc}

0800945e <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800945e:	b580      	push	{r7, lr}
 8009460:	b08a      	sub	sp, #40	; 0x28
 8009462:	af02      	add	r7, sp, #8
 8009464:	60f8      	str	r0, [r7, #12]
 8009466:	60b9      	str	r1, [r7, #8]
 8009468:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	2b00      	cmp	r3, #0
 800946e:	d10a      	bne.n	8009486 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8009470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009474:	f383 8811 	msr	BASEPRI, r3
 8009478:	f3bf 8f6f 	isb	sy
 800947c:	f3bf 8f4f 	dsb	sy
 8009480:	61bb      	str	r3, [r7, #24]
}
 8009482:	bf00      	nop
 8009484:	e7fe      	b.n	8009484 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8009486:	68ba      	ldr	r2, [r7, #8]
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	429a      	cmp	r2, r3
 800948c:	d90a      	bls.n	80094a4 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800948e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009492:	f383 8811 	msr	BASEPRI, r3
 8009496:	f3bf 8f6f 	isb	sy
 800949a:	f3bf 8f4f 	dsb	sy
 800949e:	617b      	str	r3, [r7, #20]
}
 80094a0:	bf00      	nop
 80094a2:	e7fe      	b.n	80094a2 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80094a4:	2302      	movs	r3, #2
 80094a6:	9300      	str	r3, [sp, #0]
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	2200      	movs	r2, #0
 80094ac:	2100      	movs	r1, #0
 80094ae:	68f8      	ldr	r0, [r7, #12]
 80094b0:	f7ff fefa 	bl	80092a8 <xQueueGenericCreateStatic>
 80094b4:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80094b6:	69fb      	ldr	r3, [r7, #28]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d002      	beq.n	80094c2 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80094bc:	69fb      	ldr	r3, [r7, #28]
 80094be:	68ba      	ldr	r2, [r7, #8]
 80094c0:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80094c2:	69fb      	ldr	r3, [r7, #28]
	}
 80094c4:	4618      	mov	r0, r3
 80094c6:	3720      	adds	r7, #32
 80094c8:	46bd      	mov	sp, r7
 80094ca:	bd80      	pop	{r7, pc}

080094cc <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80094cc:	b580      	push	{r7, lr}
 80094ce:	b086      	sub	sp, #24
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
 80094d4:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d10a      	bne.n	80094f2 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 80094dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094e0:	f383 8811 	msr	BASEPRI, r3
 80094e4:	f3bf 8f6f 	isb	sy
 80094e8:	f3bf 8f4f 	dsb	sy
 80094ec:	613b      	str	r3, [r7, #16]
}
 80094ee:	bf00      	nop
 80094f0:	e7fe      	b.n	80094f0 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80094f2:	683a      	ldr	r2, [r7, #0]
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	429a      	cmp	r2, r3
 80094f8:	d90a      	bls.n	8009510 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 80094fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094fe:	f383 8811 	msr	BASEPRI, r3
 8009502:	f3bf 8f6f 	isb	sy
 8009506:	f3bf 8f4f 	dsb	sy
 800950a:	60fb      	str	r3, [r7, #12]
}
 800950c:	bf00      	nop
 800950e:	e7fe      	b.n	800950e <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009510:	2202      	movs	r2, #2
 8009512:	2100      	movs	r1, #0
 8009514:	6878      	ldr	r0, [r7, #4]
 8009516:	f7ff ff3f 	bl	8009398 <xQueueGenericCreate>
 800951a:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800951c:	697b      	ldr	r3, [r7, #20]
 800951e:	2b00      	cmp	r3, #0
 8009520:	d002      	beq.n	8009528 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009522:	697b      	ldr	r3, [r7, #20]
 8009524:	683a      	ldr	r2, [r7, #0]
 8009526:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8009528:	697b      	ldr	r3, [r7, #20]
	}
 800952a:	4618      	mov	r0, r3
 800952c:	3718      	adds	r7, #24
 800952e:	46bd      	mov	sp, r7
 8009530:	bd80      	pop	{r7, pc}
	...

08009534 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009534:	b580      	push	{r7, lr}
 8009536:	b08e      	sub	sp, #56	; 0x38
 8009538:	af00      	add	r7, sp, #0
 800953a:	60f8      	str	r0, [r7, #12]
 800953c:	60b9      	str	r1, [r7, #8]
 800953e:	607a      	str	r2, [r7, #4]
 8009540:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009542:	2300      	movs	r3, #0
 8009544:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800954a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800954c:	2b00      	cmp	r3, #0
 800954e:	d10a      	bne.n	8009566 <xQueueGenericSend+0x32>
	__asm volatile
 8009550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009554:	f383 8811 	msr	BASEPRI, r3
 8009558:	f3bf 8f6f 	isb	sy
 800955c:	f3bf 8f4f 	dsb	sy
 8009560:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009562:	bf00      	nop
 8009564:	e7fe      	b.n	8009564 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009566:	68bb      	ldr	r3, [r7, #8]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d103      	bne.n	8009574 <xQueueGenericSend+0x40>
 800956c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800956e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009570:	2b00      	cmp	r3, #0
 8009572:	d101      	bne.n	8009578 <xQueueGenericSend+0x44>
 8009574:	2301      	movs	r3, #1
 8009576:	e000      	b.n	800957a <xQueueGenericSend+0x46>
 8009578:	2300      	movs	r3, #0
 800957a:	2b00      	cmp	r3, #0
 800957c:	d10a      	bne.n	8009594 <xQueueGenericSend+0x60>
	__asm volatile
 800957e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009582:	f383 8811 	msr	BASEPRI, r3
 8009586:	f3bf 8f6f 	isb	sy
 800958a:	f3bf 8f4f 	dsb	sy
 800958e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009590:	bf00      	nop
 8009592:	e7fe      	b.n	8009592 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009594:	683b      	ldr	r3, [r7, #0]
 8009596:	2b02      	cmp	r3, #2
 8009598:	d103      	bne.n	80095a2 <xQueueGenericSend+0x6e>
 800959a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800959c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800959e:	2b01      	cmp	r3, #1
 80095a0:	d101      	bne.n	80095a6 <xQueueGenericSend+0x72>
 80095a2:	2301      	movs	r3, #1
 80095a4:	e000      	b.n	80095a8 <xQueueGenericSend+0x74>
 80095a6:	2300      	movs	r3, #0
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d10a      	bne.n	80095c2 <xQueueGenericSend+0x8e>
	__asm volatile
 80095ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095b0:	f383 8811 	msr	BASEPRI, r3
 80095b4:	f3bf 8f6f 	isb	sy
 80095b8:	f3bf 8f4f 	dsb	sy
 80095bc:	623b      	str	r3, [r7, #32]
}
 80095be:	bf00      	nop
 80095c0:	e7fe      	b.n	80095c0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80095c2:	f001 faa5 	bl	800ab10 <xTaskGetSchedulerState>
 80095c6:	4603      	mov	r3, r0
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d102      	bne.n	80095d2 <xQueueGenericSend+0x9e>
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d101      	bne.n	80095d6 <xQueueGenericSend+0xa2>
 80095d2:	2301      	movs	r3, #1
 80095d4:	e000      	b.n	80095d8 <xQueueGenericSend+0xa4>
 80095d6:	2300      	movs	r3, #0
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d10a      	bne.n	80095f2 <xQueueGenericSend+0xbe>
	__asm volatile
 80095dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095e0:	f383 8811 	msr	BASEPRI, r3
 80095e4:	f3bf 8f6f 	isb	sy
 80095e8:	f3bf 8f4f 	dsb	sy
 80095ec:	61fb      	str	r3, [r7, #28]
}
 80095ee:	bf00      	nop
 80095f0:	e7fe      	b.n	80095f0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80095f2:	f002 f81f 	bl	800b634 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80095f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80095fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095fe:	429a      	cmp	r2, r3
 8009600:	d302      	bcc.n	8009608 <xQueueGenericSend+0xd4>
 8009602:	683b      	ldr	r3, [r7, #0]
 8009604:	2b02      	cmp	r3, #2
 8009606:	d129      	bne.n	800965c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009608:	683a      	ldr	r2, [r7, #0]
 800960a:	68b9      	ldr	r1, [r7, #8]
 800960c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800960e:	f000 fa2a 	bl	8009a66 <prvCopyDataToQueue>
 8009612:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009618:	2b00      	cmp	r3, #0
 800961a:	d010      	beq.n	800963e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800961c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800961e:	3324      	adds	r3, #36	; 0x24
 8009620:	4618      	mov	r0, r3
 8009622:	f001 f855 	bl	800a6d0 <xTaskRemoveFromEventList>
 8009626:	4603      	mov	r3, r0
 8009628:	2b00      	cmp	r3, #0
 800962a:	d013      	beq.n	8009654 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800962c:	4b3f      	ldr	r3, [pc, #252]	; (800972c <xQueueGenericSend+0x1f8>)
 800962e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009632:	601a      	str	r2, [r3, #0]
 8009634:	f3bf 8f4f 	dsb	sy
 8009638:	f3bf 8f6f 	isb	sy
 800963c:	e00a      	b.n	8009654 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800963e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009640:	2b00      	cmp	r3, #0
 8009642:	d007      	beq.n	8009654 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009644:	4b39      	ldr	r3, [pc, #228]	; (800972c <xQueueGenericSend+0x1f8>)
 8009646:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800964a:	601a      	str	r2, [r3, #0]
 800964c:	f3bf 8f4f 	dsb	sy
 8009650:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009654:	f002 f81e 	bl	800b694 <vPortExitCritical>
				return pdPASS;
 8009658:	2301      	movs	r3, #1
 800965a:	e063      	b.n	8009724 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	2b00      	cmp	r3, #0
 8009660:	d103      	bne.n	800966a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009662:	f002 f817 	bl	800b694 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009666:	2300      	movs	r3, #0
 8009668:	e05c      	b.n	8009724 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800966a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800966c:	2b00      	cmp	r3, #0
 800966e:	d106      	bne.n	800967e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009670:	f107 0314 	add.w	r3, r7, #20
 8009674:	4618      	mov	r0, r3
 8009676:	f001 f8f1 	bl	800a85c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800967a:	2301      	movs	r3, #1
 800967c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800967e:	f002 f809 	bl	800b694 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009682:	f000 fdc5 	bl	800a210 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009686:	f001 ffd5 	bl	800b634 <vPortEnterCritical>
 800968a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800968c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009690:	b25b      	sxtb	r3, r3
 8009692:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009696:	d103      	bne.n	80096a0 <xQueueGenericSend+0x16c>
 8009698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800969a:	2200      	movs	r2, #0
 800969c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80096a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80096a6:	b25b      	sxtb	r3, r3
 80096a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096ac:	d103      	bne.n	80096b6 <xQueueGenericSend+0x182>
 80096ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096b0:	2200      	movs	r2, #0
 80096b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80096b6:	f001 ffed 	bl	800b694 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80096ba:	1d3a      	adds	r2, r7, #4
 80096bc:	f107 0314 	add.w	r3, r7, #20
 80096c0:	4611      	mov	r1, r2
 80096c2:	4618      	mov	r0, r3
 80096c4:	f001 f8e0 	bl	800a888 <xTaskCheckForTimeOut>
 80096c8:	4603      	mov	r3, r0
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d124      	bne.n	8009718 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80096ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80096d0:	f000 fac1 	bl	8009c56 <prvIsQueueFull>
 80096d4:	4603      	mov	r3, r0
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d018      	beq.n	800970c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80096da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096dc:	3310      	adds	r3, #16
 80096de:	687a      	ldr	r2, [r7, #4]
 80096e0:	4611      	mov	r1, r2
 80096e2:	4618      	mov	r0, r3
 80096e4:	f000 ff68 	bl	800a5b8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80096e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80096ea:	f000 fa4c 	bl	8009b86 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80096ee:	f000 fd9d 	bl	800a22c <xTaskResumeAll>
 80096f2:	4603      	mov	r3, r0
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	f47f af7c 	bne.w	80095f2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80096fa:	4b0c      	ldr	r3, [pc, #48]	; (800972c <xQueueGenericSend+0x1f8>)
 80096fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009700:	601a      	str	r2, [r3, #0]
 8009702:	f3bf 8f4f 	dsb	sy
 8009706:	f3bf 8f6f 	isb	sy
 800970a:	e772      	b.n	80095f2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800970c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800970e:	f000 fa3a 	bl	8009b86 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009712:	f000 fd8b 	bl	800a22c <xTaskResumeAll>
 8009716:	e76c      	b.n	80095f2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009718:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800971a:	f000 fa34 	bl	8009b86 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800971e:	f000 fd85 	bl	800a22c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009722:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009724:	4618      	mov	r0, r3
 8009726:	3738      	adds	r7, #56	; 0x38
 8009728:	46bd      	mov	sp, r7
 800972a:	bd80      	pop	{r7, pc}
 800972c:	e000ed04 	.word	0xe000ed04

08009730 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009730:	b580      	push	{r7, lr}
 8009732:	b08e      	sub	sp, #56	; 0x38
 8009734:	af00      	add	r7, sp, #0
 8009736:	60f8      	str	r0, [r7, #12]
 8009738:	60b9      	str	r1, [r7, #8]
 800973a:	607a      	str	r2, [r7, #4]
 800973c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009744:	2b00      	cmp	r3, #0
 8009746:	d10a      	bne.n	800975e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8009748:	f04f 0350 	mov.w	r3, #80	; 0x50
 800974c:	f383 8811 	msr	BASEPRI, r3
 8009750:	f3bf 8f6f 	isb	sy
 8009754:	f3bf 8f4f 	dsb	sy
 8009758:	627b      	str	r3, [r7, #36]	; 0x24
}
 800975a:	bf00      	nop
 800975c:	e7fe      	b.n	800975c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800975e:	68bb      	ldr	r3, [r7, #8]
 8009760:	2b00      	cmp	r3, #0
 8009762:	d103      	bne.n	800976c <xQueueGenericSendFromISR+0x3c>
 8009764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009768:	2b00      	cmp	r3, #0
 800976a:	d101      	bne.n	8009770 <xQueueGenericSendFromISR+0x40>
 800976c:	2301      	movs	r3, #1
 800976e:	e000      	b.n	8009772 <xQueueGenericSendFromISR+0x42>
 8009770:	2300      	movs	r3, #0
 8009772:	2b00      	cmp	r3, #0
 8009774:	d10a      	bne.n	800978c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8009776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800977a:	f383 8811 	msr	BASEPRI, r3
 800977e:	f3bf 8f6f 	isb	sy
 8009782:	f3bf 8f4f 	dsb	sy
 8009786:	623b      	str	r3, [r7, #32]
}
 8009788:	bf00      	nop
 800978a:	e7fe      	b.n	800978a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800978c:	683b      	ldr	r3, [r7, #0]
 800978e:	2b02      	cmp	r3, #2
 8009790:	d103      	bne.n	800979a <xQueueGenericSendFromISR+0x6a>
 8009792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009794:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009796:	2b01      	cmp	r3, #1
 8009798:	d101      	bne.n	800979e <xQueueGenericSendFromISR+0x6e>
 800979a:	2301      	movs	r3, #1
 800979c:	e000      	b.n	80097a0 <xQueueGenericSendFromISR+0x70>
 800979e:	2300      	movs	r3, #0
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d10a      	bne.n	80097ba <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80097a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097a8:	f383 8811 	msr	BASEPRI, r3
 80097ac:	f3bf 8f6f 	isb	sy
 80097b0:	f3bf 8f4f 	dsb	sy
 80097b4:	61fb      	str	r3, [r7, #28]
}
 80097b6:	bf00      	nop
 80097b8:	e7fe      	b.n	80097b8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80097ba:	f002 f81d 	bl	800b7f8 <vPortValidateInterruptPriority>
	__asm volatile
 80097be:	f3ef 8211 	mrs	r2, BASEPRI
 80097c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097c6:	f383 8811 	msr	BASEPRI, r3
 80097ca:	f3bf 8f6f 	isb	sy
 80097ce:	f3bf 8f4f 	dsb	sy
 80097d2:	61ba      	str	r2, [r7, #24]
 80097d4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80097d6:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80097d8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80097da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80097de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097e2:	429a      	cmp	r2, r3
 80097e4:	d302      	bcc.n	80097ec <xQueueGenericSendFromISR+0xbc>
 80097e6:	683b      	ldr	r3, [r7, #0]
 80097e8:	2b02      	cmp	r3, #2
 80097ea:	d12c      	bne.n	8009846 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80097ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80097f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80097f6:	683a      	ldr	r2, [r7, #0]
 80097f8:	68b9      	ldr	r1, [r7, #8]
 80097fa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80097fc:	f000 f933 	bl	8009a66 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009800:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8009804:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009808:	d112      	bne.n	8009830 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800980a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800980c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800980e:	2b00      	cmp	r3, #0
 8009810:	d016      	beq.n	8009840 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009814:	3324      	adds	r3, #36	; 0x24
 8009816:	4618      	mov	r0, r3
 8009818:	f000 ff5a 	bl	800a6d0 <xTaskRemoveFromEventList>
 800981c:	4603      	mov	r3, r0
 800981e:	2b00      	cmp	r3, #0
 8009820:	d00e      	beq.n	8009840 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	2b00      	cmp	r3, #0
 8009826:	d00b      	beq.n	8009840 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	2201      	movs	r2, #1
 800982c:	601a      	str	r2, [r3, #0]
 800982e:	e007      	b.n	8009840 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009830:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009834:	3301      	adds	r3, #1
 8009836:	b2db      	uxtb	r3, r3
 8009838:	b25a      	sxtb	r2, r3
 800983a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800983c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009840:	2301      	movs	r3, #1
 8009842:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8009844:	e001      	b.n	800984a <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009846:	2300      	movs	r3, #0
 8009848:	637b      	str	r3, [r7, #52]	; 0x34
 800984a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800984c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800984e:	693b      	ldr	r3, [r7, #16]
 8009850:	f383 8811 	msr	BASEPRI, r3
}
 8009854:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009856:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009858:	4618      	mov	r0, r3
 800985a:	3738      	adds	r7, #56	; 0x38
 800985c:	46bd      	mov	sp, r7
 800985e:	bd80      	pop	{r7, pc}

08009860 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009860:	b580      	push	{r7, lr}
 8009862:	b08c      	sub	sp, #48	; 0x30
 8009864:	af00      	add	r7, sp, #0
 8009866:	60f8      	str	r0, [r7, #12]
 8009868:	60b9      	str	r1, [r7, #8]
 800986a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800986c:	2300      	movs	r3, #0
 800986e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009876:	2b00      	cmp	r3, #0
 8009878:	d10a      	bne.n	8009890 <xQueueReceive+0x30>
	__asm volatile
 800987a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800987e:	f383 8811 	msr	BASEPRI, r3
 8009882:	f3bf 8f6f 	isb	sy
 8009886:	f3bf 8f4f 	dsb	sy
 800988a:	623b      	str	r3, [r7, #32]
}
 800988c:	bf00      	nop
 800988e:	e7fe      	b.n	800988e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009890:	68bb      	ldr	r3, [r7, #8]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d103      	bne.n	800989e <xQueueReceive+0x3e>
 8009896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800989a:	2b00      	cmp	r3, #0
 800989c:	d101      	bne.n	80098a2 <xQueueReceive+0x42>
 800989e:	2301      	movs	r3, #1
 80098a0:	e000      	b.n	80098a4 <xQueueReceive+0x44>
 80098a2:	2300      	movs	r3, #0
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d10a      	bne.n	80098be <xQueueReceive+0x5e>
	__asm volatile
 80098a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098ac:	f383 8811 	msr	BASEPRI, r3
 80098b0:	f3bf 8f6f 	isb	sy
 80098b4:	f3bf 8f4f 	dsb	sy
 80098b8:	61fb      	str	r3, [r7, #28]
}
 80098ba:	bf00      	nop
 80098bc:	e7fe      	b.n	80098bc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80098be:	f001 f927 	bl	800ab10 <xTaskGetSchedulerState>
 80098c2:	4603      	mov	r3, r0
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d102      	bne.n	80098ce <xQueueReceive+0x6e>
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d101      	bne.n	80098d2 <xQueueReceive+0x72>
 80098ce:	2301      	movs	r3, #1
 80098d0:	e000      	b.n	80098d4 <xQueueReceive+0x74>
 80098d2:	2300      	movs	r3, #0
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d10a      	bne.n	80098ee <xQueueReceive+0x8e>
	__asm volatile
 80098d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098dc:	f383 8811 	msr	BASEPRI, r3
 80098e0:	f3bf 8f6f 	isb	sy
 80098e4:	f3bf 8f4f 	dsb	sy
 80098e8:	61bb      	str	r3, [r7, #24]
}
 80098ea:	bf00      	nop
 80098ec:	e7fe      	b.n	80098ec <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80098ee:	f001 fea1 	bl	800b634 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80098f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098f6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80098f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d01f      	beq.n	800993e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80098fe:	68b9      	ldr	r1, [r7, #8]
 8009900:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009902:	f000 f91a 	bl	8009b3a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009908:	1e5a      	subs	r2, r3, #1
 800990a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800990c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800990e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009910:	691b      	ldr	r3, [r3, #16]
 8009912:	2b00      	cmp	r3, #0
 8009914:	d00f      	beq.n	8009936 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009918:	3310      	adds	r3, #16
 800991a:	4618      	mov	r0, r3
 800991c:	f000 fed8 	bl	800a6d0 <xTaskRemoveFromEventList>
 8009920:	4603      	mov	r3, r0
 8009922:	2b00      	cmp	r3, #0
 8009924:	d007      	beq.n	8009936 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009926:	4b3d      	ldr	r3, [pc, #244]	; (8009a1c <xQueueReceive+0x1bc>)
 8009928:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800992c:	601a      	str	r2, [r3, #0]
 800992e:	f3bf 8f4f 	dsb	sy
 8009932:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009936:	f001 fead 	bl	800b694 <vPortExitCritical>
				return pdPASS;
 800993a:	2301      	movs	r3, #1
 800993c:	e069      	b.n	8009a12 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	2b00      	cmp	r3, #0
 8009942:	d103      	bne.n	800994c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009944:	f001 fea6 	bl	800b694 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009948:	2300      	movs	r3, #0
 800994a:	e062      	b.n	8009a12 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800994c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800994e:	2b00      	cmp	r3, #0
 8009950:	d106      	bne.n	8009960 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009952:	f107 0310 	add.w	r3, r7, #16
 8009956:	4618      	mov	r0, r3
 8009958:	f000 ff80 	bl	800a85c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800995c:	2301      	movs	r3, #1
 800995e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009960:	f001 fe98 	bl	800b694 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009964:	f000 fc54 	bl	800a210 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009968:	f001 fe64 	bl	800b634 <vPortEnterCritical>
 800996c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800996e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009972:	b25b      	sxtb	r3, r3
 8009974:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009978:	d103      	bne.n	8009982 <xQueueReceive+0x122>
 800997a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800997c:	2200      	movs	r2, #0
 800997e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009984:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009988:	b25b      	sxtb	r3, r3
 800998a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800998e:	d103      	bne.n	8009998 <xQueueReceive+0x138>
 8009990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009992:	2200      	movs	r2, #0
 8009994:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009998:	f001 fe7c 	bl	800b694 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800999c:	1d3a      	adds	r2, r7, #4
 800999e:	f107 0310 	add.w	r3, r7, #16
 80099a2:	4611      	mov	r1, r2
 80099a4:	4618      	mov	r0, r3
 80099a6:	f000 ff6f 	bl	800a888 <xTaskCheckForTimeOut>
 80099aa:	4603      	mov	r3, r0
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d123      	bne.n	80099f8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80099b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80099b2:	f000 f93a 	bl	8009c2a <prvIsQueueEmpty>
 80099b6:	4603      	mov	r3, r0
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d017      	beq.n	80099ec <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80099bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099be:	3324      	adds	r3, #36	; 0x24
 80099c0:	687a      	ldr	r2, [r7, #4]
 80099c2:	4611      	mov	r1, r2
 80099c4:	4618      	mov	r0, r3
 80099c6:	f000 fdf7 	bl	800a5b8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80099ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80099cc:	f000 f8db 	bl	8009b86 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80099d0:	f000 fc2c 	bl	800a22c <xTaskResumeAll>
 80099d4:	4603      	mov	r3, r0
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d189      	bne.n	80098ee <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80099da:	4b10      	ldr	r3, [pc, #64]	; (8009a1c <xQueueReceive+0x1bc>)
 80099dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80099e0:	601a      	str	r2, [r3, #0]
 80099e2:	f3bf 8f4f 	dsb	sy
 80099e6:	f3bf 8f6f 	isb	sy
 80099ea:	e780      	b.n	80098ee <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80099ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80099ee:	f000 f8ca 	bl	8009b86 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80099f2:	f000 fc1b 	bl	800a22c <xTaskResumeAll>
 80099f6:	e77a      	b.n	80098ee <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80099f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80099fa:	f000 f8c4 	bl	8009b86 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80099fe:	f000 fc15 	bl	800a22c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009a02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009a04:	f000 f911 	bl	8009c2a <prvIsQueueEmpty>
 8009a08:	4603      	mov	r3, r0
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	f43f af6f 	beq.w	80098ee <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009a10:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009a12:	4618      	mov	r0, r3
 8009a14:	3730      	adds	r7, #48	; 0x30
 8009a16:	46bd      	mov	sp, r7
 8009a18:	bd80      	pop	{r7, pc}
 8009a1a:	bf00      	nop
 8009a1c:	e000ed04 	.word	0xe000ed04

08009a20 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8009a20:	b580      	push	{r7, lr}
 8009a22:	b084      	sub	sp, #16
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d10a      	bne.n	8009a48 <vQueueDelete+0x28>
	__asm volatile
 8009a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a36:	f383 8811 	msr	BASEPRI, r3
 8009a3a:	f3bf 8f6f 	isb	sy
 8009a3e:	f3bf 8f4f 	dsb	sy
 8009a42:	60bb      	str	r3, [r7, #8]
}
 8009a44:	bf00      	nop
 8009a46:	e7fe      	b.n	8009a46 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8009a48:	68f8      	ldr	r0, [r7, #12]
 8009a4a:	f000 f947 	bl	8009cdc <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d102      	bne.n	8009a5e <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8009a58:	68f8      	ldr	r0, [r7, #12]
 8009a5a:	f001 ffd1 	bl	800ba00 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8009a5e:	bf00      	nop
 8009a60:	3710      	adds	r7, #16
 8009a62:	46bd      	mov	sp, r7
 8009a64:	bd80      	pop	{r7, pc}

08009a66 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009a66:	b580      	push	{r7, lr}
 8009a68:	b086      	sub	sp, #24
 8009a6a:	af00      	add	r7, sp, #0
 8009a6c:	60f8      	str	r0, [r7, #12]
 8009a6e:	60b9      	str	r1, [r7, #8]
 8009a70:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009a72:	2300      	movs	r3, #0
 8009a74:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a7a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d10d      	bne.n	8009aa0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d14d      	bne.n	8009b28 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	689b      	ldr	r3, [r3, #8]
 8009a90:	4618      	mov	r0, r3
 8009a92:	f001 f85b 	bl	800ab4c <xTaskPriorityDisinherit>
 8009a96:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	2200      	movs	r2, #0
 8009a9c:	609a      	str	r2, [r3, #8]
 8009a9e:	e043      	b.n	8009b28 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d119      	bne.n	8009ada <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	6858      	ldr	r0, [r3, #4]
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009aae:	461a      	mov	r2, r3
 8009ab0:	68b9      	ldr	r1, [r7, #8]
 8009ab2:	f002 f8df 	bl	800bc74 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	685a      	ldr	r2, [r3, #4]
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009abe:	441a      	add	r2, r3
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	685a      	ldr	r2, [r3, #4]
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	689b      	ldr	r3, [r3, #8]
 8009acc:	429a      	cmp	r2, r3
 8009ace:	d32b      	bcc.n	8009b28 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	681a      	ldr	r2, [r3, #0]
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	605a      	str	r2, [r3, #4]
 8009ad8:	e026      	b.n	8009b28 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	68d8      	ldr	r0, [r3, #12]
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ae2:	461a      	mov	r2, r3
 8009ae4:	68b9      	ldr	r1, [r7, #8]
 8009ae6:	f002 f8c5 	bl	800bc74 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	68da      	ldr	r2, [r3, #12]
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009af2:	425b      	negs	r3, r3
 8009af4:	441a      	add	r2, r3
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	68da      	ldr	r2, [r3, #12]
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	429a      	cmp	r2, r3
 8009b04:	d207      	bcs.n	8009b16 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	689a      	ldr	r2, [r3, #8]
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b0e:	425b      	negs	r3, r3
 8009b10:	441a      	add	r2, r3
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	2b02      	cmp	r3, #2
 8009b1a:	d105      	bne.n	8009b28 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009b1c:	693b      	ldr	r3, [r7, #16]
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d002      	beq.n	8009b28 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009b22:	693b      	ldr	r3, [r7, #16]
 8009b24:	3b01      	subs	r3, #1
 8009b26:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009b28:	693b      	ldr	r3, [r7, #16]
 8009b2a:	1c5a      	adds	r2, r3, #1
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009b30:	697b      	ldr	r3, [r7, #20]
}
 8009b32:	4618      	mov	r0, r3
 8009b34:	3718      	adds	r7, #24
 8009b36:	46bd      	mov	sp, r7
 8009b38:	bd80      	pop	{r7, pc}

08009b3a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009b3a:	b580      	push	{r7, lr}
 8009b3c:	b082      	sub	sp, #8
 8009b3e:	af00      	add	r7, sp, #0
 8009b40:	6078      	str	r0, [r7, #4]
 8009b42:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d018      	beq.n	8009b7e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	68da      	ldr	r2, [r3, #12]
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b54:	441a      	add	r2, r3
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	68da      	ldr	r2, [r3, #12]
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	689b      	ldr	r3, [r3, #8]
 8009b62:	429a      	cmp	r2, r3
 8009b64:	d303      	bcc.n	8009b6e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681a      	ldr	r2, [r3, #0]
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	68d9      	ldr	r1, [r3, #12]
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b76:	461a      	mov	r2, r3
 8009b78:	6838      	ldr	r0, [r7, #0]
 8009b7a:	f002 f87b 	bl	800bc74 <memcpy>
	}
}
 8009b7e:	bf00      	nop
 8009b80:	3708      	adds	r7, #8
 8009b82:	46bd      	mov	sp, r7
 8009b84:	bd80      	pop	{r7, pc}

08009b86 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009b86:	b580      	push	{r7, lr}
 8009b88:	b084      	sub	sp, #16
 8009b8a:	af00      	add	r7, sp, #0
 8009b8c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009b8e:	f001 fd51 	bl	800b634 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009b98:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009b9a:	e011      	b.n	8009bc0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d012      	beq.n	8009bca <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	3324      	adds	r3, #36	; 0x24
 8009ba8:	4618      	mov	r0, r3
 8009baa:	f000 fd91 	bl	800a6d0 <xTaskRemoveFromEventList>
 8009bae:	4603      	mov	r3, r0
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d001      	beq.n	8009bb8 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009bb4:	f000 feca 	bl	800a94c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009bb8:	7bfb      	ldrb	r3, [r7, #15]
 8009bba:	3b01      	subs	r3, #1
 8009bbc:	b2db      	uxtb	r3, r3
 8009bbe:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009bc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	dce9      	bgt.n	8009b9c <prvUnlockQueue+0x16>
 8009bc8:	e000      	b.n	8009bcc <prvUnlockQueue+0x46>
					break;
 8009bca:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	22ff      	movs	r2, #255	; 0xff
 8009bd0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009bd4:	f001 fd5e 	bl	800b694 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009bd8:	f001 fd2c 	bl	800b634 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009be2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009be4:	e011      	b.n	8009c0a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	691b      	ldr	r3, [r3, #16]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d012      	beq.n	8009c14 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	3310      	adds	r3, #16
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	f000 fd6c 	bl	800a6d0 <xTaskRemoveFromEventList>
 8009bf8:	4603      	mov	r3, r0
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d001      	beq.n	8009c02 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009bfe:	f000 fea5 	bl	800a94c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009c02:	7bbb      	ldrb	r3, [r7, #14]
 8009c04:	3b01      	subs	r3, #1
 8009c06:	b2db      	uxtb	r3, r3
 8009c08:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009c0a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	dce9      	bgt.n	8009be6 <prvUnlockQueue+0x60>
 8009c12:	e000      	b.n	8009c16 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009c14:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	22ff      	movs	r2, #255	; 0xff
 8009c1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009c1e:	f001 fd39 	bl	800b694 <vPortExitCritical>
}
 8009c22:	bf00      	nop
 8009c24:	3710      	adds	r7, #16
 8009c26:	46bd      	mov	sp, r7
 8009c28:	bd80      	pop	{r7, pc}

08009c2a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009c2a:	b580      	push	{r7, lr}
 8009c2c:	b084      	sub	sp, #16
 8009c2e:	af00      	add	r7, sp, #0
 8009c30:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009c32:	f001 fcff 	bl	800b634 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d102      	bne.n	8009c44 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009c3e:	2301      	movs	r3, #1
 8009c40:	60fb      	str	r3, [r7, #12]
 8009c42:	e001      	b.n	8009c48 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009c44:	2300      	movs	r3, #0
 8009c46:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009c48:	f001 fd24 	bl	800b694 <vPortExitCritical>

	return xReturn;
 8009c4c:	68fb      	ldr	r3, [r7, #12]
}
 8009c4e:	4618      	mov	r0, r3
 8009c50:	3710      	adds	r7, #16
 8009c52:	46bd      	mov	sp, r7
 8009c54:	bd80      	pop	{r7, pc}

08009c56 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009c56:	b580      	push	{r7, lr}
 8009c58:	b084      	sub	sp, #16
 8009c5a:	af00      	add	r7, sp, #0
 8009c5c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009c5e:	f001 fce9 	bl	800b634 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c6a:	429a      	cmp	r2, r3
 8009c6c:	d102      	bne.n	8009c74 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009c6e:	2301      	movs	r3, #1
 8009c70:	60fb      	str	r3, [r7, #12]
 8009c72:	e001      	b.n	8009c78 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009c74:	2300      	movs	r3, #0
 8009c76:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009c78:	f001 fd0c 	bl	800b694 <vPortExitCritical>

	return xReturn;
 8009c7c:	68fb      	ldr	r3, [r7, #12]
}
 8009c7e:	4618      	mov	r0, r3
 8009c80:	3710      	adds	r7, #16
 8009c82:	46bd      	mov	sp, r7
 8009c84:	bd80      	pop	{r7, pc}
	...

08009c88 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009c88:	b480      	push	{r7}
 8009c8a:	b085      	sub	sp, #20
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	6078      	str	r0, [r7, #4]
 8009c90:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009c92:	2300      	movs	r3, #0
 8009c94:	60fb      	str	r3, [r7, #12]
 8009c96:	e014      	b.n	8009cc2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009c98:	4a0f      	ldr	r2, [pc, #60]	; (8009cd8 <vQueueAddToRegistry+0x50>)
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d10b      	bne.n	8009cbc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009ca4:	490c      	ldr	r1, [pc, #48]	; (8009cd8 <vQueueAddToRegistry+0x50>)
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	683a      	ldr	r2, [r7, #0]
 8009caa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009cae:	4a0a      	ldr	r2, [pc, #40]	; (8009cd8 <vQueueAddToRegistry+0x50>)
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	00db      	lsls	r3, r3, #3
 8009cb4:	4413      	add	r3, r2
 8009cb6:	687a      	ldr	r2, [r7, #4]
 8009cb8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009cba:	e006      	b.n	8009cca <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	3301      	adds	r3, #1
 8009cc0:	60fb      	str	r3, [r7, #12]
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	2b07      	cmp	r3, #7
 8009cc6:	d9e7      	bls.n	8009c98 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009cc8:	bf00      	nop
 8009cca:	bf00      	nop
 8009ccc:	3714      	adds	r7, #20
 8009cce:	46bd      	mov	sp, r7
 8009cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd4:	4770      	bx	lr
 8009cd6:	bf00      	nop
 8009cd8:	20009ef8 	.word	0x20009ef8

08009cdc <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8009cdc:	b480      	push	{r7}
 8009cde:	b085      	sub	sp, #20
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009ce4:	2300      	movs	r3, #0
 8009ce6:	60fb      	str	r3, [r7, #12]
 8009ce8:	e016      	b.n	8009d18 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8009cea:	4a10      	ldr	r2, [pc, #64]	; (8009d2c <vQueueUnregisterQueue+0x50>)
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	00db      	lsls	r3, r3, #3
 8009cf0:	4413      	add	r3, r2
 8009cf2:	685b      	ldr	r3, [r3, #4]
 8009cf4:	687a      	ldr	r2, [r7, #4]
 8009cf6:	429a      	cmp	r2, r3
 8009cf8:	d10b      	bne.n	8009d12 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8009cfa:	4a0c      	ldr	r2, [pc, #48]	; (8009d2c <vQueueUnregisterQueue+0x50>)
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	2100      	movs	r1, #0
 8009d00:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8009d04:	4a09      	ldr	r2, [pc, #36]	; (8009d2c <vQueueUnregisterQueue+0x50>)
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	00db      	lsls	r3, r3, #3
 8009d0a:	4413      	add	r3, r2
 8009d0c:	2200      	movs	r2, #0
 8009d0e:	605a      	str	r2, [r3, #4]
				break;
 8009d10:	e006      	b.n	8009d20 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	3301      	adds	r3, #1
 8009d16:	60fb      	str	r3, [r7, #12]
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	2b07      	cmp	r3, #7
 8009d1c:	d9e5      	bls.n	8009cea <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8009d1e:	bf00      	nop
 8009d20:	bf00      	nop
 8009d22:	3714      	adds	r7, #20
 8009d24:	46bd      	mov	sp, r7
 8009d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d2a:	4770      	bx	lr
 8009d2c:	20009ef8 	.word	0x20009ef8

08009d30 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009d30:	b580      	push	{r7, lr}
 8009d32:	b086      	sub	sp, #24
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	60f8      	str	r0, [r7, #12]
 8009d38:	60b9      	str	r1, [r7, #8]
 8009d3a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009d40:	f001 fc78 	bl	800b634 <vPortEnterCritical>
 8009d44:	697b      	ldr	r3, [r7, #20]
 8009d46:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009d4a:	b25b      	sxtb	r3, r3
 8009d4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d50:	d103      	bne.n	8009d5a <vQueueWaitForMessageRestricted+0x2a>
 8009d52:	697b      	ldr	r3, [r7, #20]
 8009d54:	2200      	movs	r2, #0
 8009d56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009d5a:	697b      	ldr	r3, [r7, #20]
 8009d5c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009d60:	b25b      	sxtb	r3, r3
 8009d62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d66:	d103      	bne.n	8009d70 <vQueueWaitForMessageRestricted+0x40>
 8009d68:	697b      	ldr	r3, [r7, #20]
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009d70:	f001 fc90 	bl	800b694 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009d74:	697b      	ldr	r3, [r7, #20]
 8009d76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d106      	bne.n	8009d8a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009d7c:	697b      	ldr	r3, [r7, #20]
 8009d7e:	3324      	adds	r3, #36	; 0x24
 8009d80:	687a      	ldr	r2, [r7, #4]
 8009d82:	68b9      	ldr	r1, [r7, #8]
 8009d84:	4618      	mov	r0, r3
 8009d86:	f000 fc77 	bl	800a678 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009d8a:	6978      	ldr	r0, [r7, #20]
 8009d8c:	f7ff fefb 	bl	8009b86 <prvUnlockQueue>
	}
 8009d90:	bf00      	nop
 8009d92:	3718      	adds	r7, #24
 8009d94:	46bd      	mov	sp, r7
 8009d96:	bd80      	pop	{r7, pc}

08009d98 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009d98:	b580      	push	{r7, lr}
 8009d9a:	b08e      	sub	sp, #56	; 0x38
 8009d9c:	af04      	add	r7, sp, #16
 8009d9e:	60f8      	str	r0, [r7, #12]
 8009da0:	60b9      	str	r1, [r7, #8]
 8009da2:	607a      	str	r2, [r7, #4]
 8009da4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009da6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d10a      	bne.n	8009dc2 <xTaskCreateStatic+0x2a>
	__asm volatile
 8009dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009db0:	f383 8811 	msr	BASEPRI, r3
 8009db4:	f3bf 8f6f 	isb	sy
 8009db8:	f3bf 8f4f 	dsb	sy
 8009dbc:	623b      	str	r3, [r7, #32]
}
 8009dbe:	bf00      	nop
 8009dc0:	e7fe      	b.n	8009dc0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d10a      	bne.n	8009dde <xTaskCreateStatic+0x46>
	__asm volatile
 8009dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dcc:	f383 8811 	msr	BASEPRI, r3
 8009dd0:	f3bf 8f6f 	isb	sy
 8009dd4:	f3bf 8f4f 	dsb	sy
 8009dd8:	61fb      	str	r3, [r7, #28]
}
 8009dda:	bf00      	nop
 8009ddc:	e7fe      	b.n	8009ddc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009dde:	235c      	movs	r3, #92	; 0x5c
 8009de0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009de2:	693b      	ldr	r3, [r7, #16]
 8009de4:	2b5c      	cmp	r3, #92	; 0x5c
 8009de6:	d00a      	beq.n	8009dfe <xTaskCreateStatic+0x66>
	__asm volatile
 8009de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dec:	f383 8811 	msr	BASEPRI, r3
 8009df0:	f3bf 8f6f 	isb	sy
 8009df4:	f3bf 8f4f 	dsb	sy
 8009df8:	61bb      	str	r3, [r7, #24]
}
 8009dfa:	bf00      	nop
 8009dfc:	e7fe      	b.n	8009dfc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009dfe:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009e00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d01e      	beq.n	8009e44 <xTaskCreateStatic+0xac>
 8009e06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d01b      	beq.n	8009e44 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009e0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e0e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e12:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009e14:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e18:	2202      	movs	r2, #2
 8009e1a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009e1e:	2300      	movs	r3, #0
 8009e20:	9303      	str	r3, [sp, #12]
 8009e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e24:	9302      	str	r3, [sp, #8]
 8009e26:	f107 0314 	add.w	r3, r7, #20
 8009e2a:	9301      	str	r3, [sp, #4]
 8009e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e2e:	9300      	str	r3, [sp, #0]
 8009e30:	683b      	ldr	r3, [r7, #0]
 8009e32:	687a      	ldr	r2, [r7, #4]
 8009e34:	68b9      	ldr	r1, [r7, #8]
 8009e36:	68f8      	ldr	r0, [r7, #12]
 8009e38:	f000 f850 	bl	8009edc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009e3c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009e3e:	f000 f8dd 	bl	8009ffc <prvAddNewTaskToReadyList>
 8009e42:	e001      	b.n	8009e48 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8009e44:	2300      	movs	r3, #0
 8009e46:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009e48:	697b      	ldr	r3, [r7, #20]
	}
 8009e4a:	4618      	mov	r0, r3
 8009e4c:	3728      	adds	r7, #40	; 0x28
 8009e4e:	46bd      	mov	sp, r7
 8009e50:	bd80      	pop	{r7, pc}

08009e52 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009e52:	b580      	push	{r7, lr}
 8009e54:	b08c      	sub	sp, #48	; 0x30
 8009e56:	af04      	add	r7, sp, #16
 8009e58:	60f8      	str	r0, [r7, #12]
 8009e5a:	60b9      	str	r1, [r7, #8]
 8009e5c:	603b      	str	r3, [r7, #0]
 8009e5e:	4613      	mov	r3, r2
 8009e60:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009e62:	88fb      	ldrh	r3, [r7, #6]
 8009e64:	009b      	lsls	r3, r3, #2
 8009e66:	4618      	mov	r0, r3
 8009e68:	f001 fd06 	bl	800b878 <pvPortMalloc>
 8009e6c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009e6e:	697b      	ldr	r3, [r7, #20]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d00e      	beq.n	8009e92 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009e74:	205c      	movs	r0, #92	; 0x5c
 8009e76:	f001 fcff 	bl	800b878 <pvPortMalloc>
 8009e7a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009e7c:	69fb      	ldr	r3, [r7, #28]
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d003      	beq.n	8009e8a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009e82:	69fb      	ldr	r3, [r7, #28]
 8009e84:	697a      	ldr	r2, [r7, #20]
 8009e86:	631a      	str	r2, [r3, #48]	; 0x30
 8009e88:	e005      	b.n	8009e96 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009e8a:	6978      	ldr	r0, [r7, #20]
 8009e8c:	f001 fdb8 	bl	800ba00 <vPortFree>
 8009e90:	e001      	b.n	8009e96 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009e92:	2300      	movs	r3, #0
 8009e94:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009e96:	69fb      	ldr	r3, [r7, #28]
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d017      	beq.n	8009ecc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009e9c:	69fb      	ldr	r3, [r7, #28]
 8009e9e:	2200      	movs	r2, #0
 8009ea0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009ea4:	88fa      	ldrh	r2, [r7, #6]
 8009ea6:	2300      	movs	r3, #0
 8009ea8:	9303      	str	r3, [sp, #12]
 8009eaa:	69fb      	ldr	r3, [r7, #28]
 8009eac:	9302      	str	r3, [sp, #8]
 8009eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009eb0:	9301      	str	r3, [sp, #4]
 8009eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eb4:	9300      	str	r3, [sp, #0]
 8009eb6:	683b      	ldr	r3, [r7, #0]
 8009eb8:	68b9      	ldr	r1, [r7, #8]
 8009eba:	68f8      	ldr	r0, [r7, #12]
 8009ebc:	f000 f80e 	bl	8009edc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009ec0:	69f8      	ldr	r0, [r7, #28]
 8009ec2:	f000 f89b 	bl	8009ffc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009ec6:	2301      	movs	r3, #1
 8009ec8:	61bb      	str	r3, [r7, #24]
 8009eca:	e002      	b.n	8009ed2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009ecc:	f04f 33ff 	mov.w	r3, #4294967295
 8009ed0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009ed2:	69bb      	ldr	r3, [r7, #24]
	}
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	3720      	adds	r7, #32
 8009ed8:	46bd      	mov	sp, r7
 8009eda:	bd80      	pop	{r7, pc}

08009edc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009edc:	b580      	push	{r7, lr}
 8009ede:	b088      	sub	sp, #32
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	60f8      	str	r0, [r7, #12]
 8009ee4:	60b9      	str	r1, [r7, #8]
 8009ee6:	607a      	str	r2, [r7, #4]
 8009ee8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eec:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	009b      	lsls	r3, r3, #2
 8009ef2:	461a      	mov	r2, r3
 8009ef4:	21a5      	movs	r1, #165	; 0xa5
 8009ef6:	f001 fecb 	bl	800bc90 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009efc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009f04:	3b01      	subs	r3, #1
 8009f06:	009b      	lsls	r3, r3, #2
 8009f08:	4413      	add	r3, r2
 8009f0a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009f0c:	69bb      	ldr	r3, [r7, #24]
 8009f0e:	f023 0307 	bic.w	r3, r3, #7
 8009f12:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009f14:	69bb      	ldr	r3, [r7, #24]
 8009f16:	f003 0307 	and.w	r3, r3, #7
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d00a      	beq.n	8009f34 <prvInitialiseNewTask+0x58>
	__asm volatile
 8009f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f22:	f383 8811 	msr	BASEPRI, r3
 8009f26:	f3bf 8f6f 	isb	sy
 8009f2a:	f3bf 8f4f 	dsb	sy
 8009f2e:	617b      	str	r3, [r7, #20]
}
 8009f30:	bf00      	nop
 8009f32:	e7fe      	b.n	8009f32 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009f34:	68bb      	ldr	r3, [r7, #8]
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d01f      	beq.n	8009f7a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009f3a:	2300      	movs	r3, #0
 8009f3c:	61fb      	str	r3, [r7, #28]
 8009f3e:	e012      	b.n	8009f66 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009f40:	68ba      	ldr	r2, [r7, #8]
 8009f42:	69fb      	ldr	r3, [r7, #28]
 8009f44:	4413      	add	r3, r2
 8009f46:	7819      	ldrb	r1, [r3, #0]
 8009f48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009f4a:	69fb      	ldr	r3, [r7, #28]
 8009f4c:	4413      	add	r3, r2
 8009f4e:	3334      	adds	r3, #52	; 0x34
 8009f50:	460a      	mov	r2, r1
 8009f52:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009f54:	68ba      	ldr	r2, [r7, #8]
 8009f56:	69fb      	ldr	r3, [r7, #28]
 8009f58:	4413      	add	r3, r2
 8009f5a:	781b      	ldrb	r3, [r3, #0]
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d006      	beq.n	8009f6e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009f60:	69fb      	ldr	r3, [r7, #28]
 8009f62:	3301      	adds	r3, #1
 8009f64:	61fb      	str	r3, [r7, #28]
 8009f66:	69fb      	ldr	r3, [r7, #28]
 8009f68:	2b0f      	cmp	r3, #15
 8009f6a:	d9e9      	bls.n	8009f40 <prvInitialiseNewTask+0x64>
 8009f6c:	e000      	b.n	8009f70 <prvInitialiseNewTask+0x94>
			{
				break;
 8009f6e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f72:	2200      	movs	r2, #0
 8009f74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009f78:	e003      	b.n	8009f82 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f7c:	2200      	movs	r2, #0
 8009f7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f84:	2b37      	cmp	r3, #55	; 0x37
 8009f86:	d901      	bls.n	8009f8c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009f88:	2337      	movs	r3, #55	; 0x37
 8009f8a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009f90:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009f96:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f9a:	2200      	movs	r2, #0
 8009f9c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fa0:	3304      	adds	r3, #4
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	f7ff f884 	bl	80090b0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009faa:	3318      	adds	r3, #24
 8009fac:	4618      	mov	r0, r3
 8009fae:	f7ff f87f 	bl	80090b0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009fb6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fba:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fc0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009fc6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fca:	2200      	movs	r2, #0
 8009fcc:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fd0:	2200      	movs	r2, #0
 8009fd2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009fd6:	683a      	ldr	r2, [r7, #0]
 8009fd8:	68f9      	ldr	r1, [r7, #12]
 8009fda:	69b8      	ldr	r0, [r7, #24]
 8009fdc:	f001 f9fe 	bl	800b3dc <pxPortInitialiseStack>
 8009fe0:	4602      	mov	r2, r0
 8009fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fe4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d002      	beq.n	8009ff2 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009fec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009ff0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009ff2:	bf00      	nop
 8009ff4:	3720      	adds	r7, #32
 8009ff6:	46bd      	mov	sp, r7
 8009ff8:	bd80      	pop	{r7, pc}
	...

08009ffc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009ffc:	b580      	push	{r7, lr}
 8009ffe:	b082      	sub	sp, #8
 800a000:	af00      	add	r7, sp, #0
 800a002:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a004:	f001 fb16 	bl	800b634 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a008:	4b2d      	ldr	r3, [pc, #180]	; (800a0c0 <prvAddNewTaskToReadyList+0xc4>)
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	3301      	adds	r3, #1
 800a00e:	4a2c      	ldr	r2, [pc, #176]	; (800a0c0 <prvAddNewTaskToReadyList+0xc4>)
 800a010:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a012:	4b2c      	ldr	r3, [pc, #176]	; (800a0c4 <prvAddNewTaskToReadyList+0xc8>)
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	2b00      	cmp	r3, #0
 800a018:	d109      	bne.n	800a02e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a01a:	4a2a      	ldr	r2, [pc, #168]	; (800a0c4 <prvAddNewTaskToReadyList+0xc8>)
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a020:	4b27      	ldr	r3, [pc, #156]	; (800a0c0 <prvAddNewTaskToReadyList+0xc4>)
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	2b01      	cmp	r3, #1
 800a026:	d110      	bne.n	800a04a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a028:	f000 fcb4 	bl	800a994 <prvInitialiseTaskLists>
 800a02c:	e00d      	b.n	800a04a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a02e:	4b26      	ldr	r3, [pc, #152]	; (800a0c8 <prvAddNewTaskToReadyList+0xcc>)
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	2b00      	cmp	r3, #0
 800a034:	d109      	bne.n	800a04a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a036:	4b23      	ldr	r3, [pc, #140]	; (800a0c4 <prvAddNewTaskToReadyList+0xc8>)
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a040:	429a      	cmp	r2, r3
 800a042:	d802      	bhi.n	800a04a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a044:	4a1f      	ldr	r2, [pc, #124]	; (800a0c4 <prvAddNewTaskToReadyList+0xc8>)
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a04a:	4b20      	ldr	r3, [pc, #128]	; (800a0cc <prvAddNewTaskToReadyList+0xd0>)
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	3301      	adds	r3, #1
 800a050:	4a1e      	ldr	r2, [pc, #120]	; (800a0cc <prvAddNewTaskToReadyList+0xd0>)
 800a052:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a054:	4b1d      	ldr	r3, [pc, #116]	; (800a0cc <prvAddNewTaskToReadyList+0xd0>)
 800a056:	681a      	ldr	r2, [r3, #0]
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a060:	4b1b      	ldr	r3, [pc, #108]	; (800a0d0 <prvAddNewTaskToReadyList+0xd4>)
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	429a      	cmp	r2, r3
 800a066:	d903      	bls.n	800a070 <prvAddNewTaskToReadyList+0x74>
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a06c:	4a18      	ldr	r2, [pc, #96]	; (800a0d0 <prvAddNewTaskToReadyList+0xd4>)
 800a06e:	6013      	str	r3, [r2, #0]
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a074:	4613      	mov	r3, r2
 800a076:	009b      	lsls	r3, r3, #2
 800a078:	4413      	add	r3, r2
 800a07a:	009b      	lsls	r3, r3, #2
 800a07c:	4a15      	ldr	r2, [pc, #84]	; (800a0d4 <prvAddNewTaskToReadyList+0xd8>)
 800a07e:	441a      	add	r2, r3
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	3304      	adds	r3, #4
 800a084:	4619      	mov	r1, r3
 800a086:	4610      	mov	r0, r2
 800a088:	f7ff f81f 	bl	80090ca <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a08c:	f001 fb02 	bl	800b694 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a090:	4b0d      	ldr	r3, [pc, #52]	; (800a0c8 <prvAddNewTaskToReadyList+0xcc>)
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	2b00      	cmp	r3, #0
 800a096:	d00e      	beq.n	800a0b6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a098:	4b0a      	ldr	r3, [pc, #40]	; (800a0c4 <prvAddNewTaskToReadyList+0xc8>)
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0a2:	429a      	cmp	r2, r3
 800a0a4:	d207      	bcs.n	800a0b6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a0a6:	4b0c      	ldr	r3, [pc, #48]	; (800a0d8 <prvAddNewTaskToReadyList+0xdc>)
 800a0a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a0ac:	601a      	str	r2, [r3, #0]
 800a0ae:	f3bf 8f4f 	dsb	sy
 800a0b2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a0b6:	bf00      	nop
 800a0b8:	3708      	adds	r7, #8
 800a0ba:	46bd      	mov	sp, r7
 800a0bc:	bd80      	pop	{r7, pc}
 800a0be:	bf00      	nop
 800a0c0:	20005aec 	.word	0x20005aec
 800a0c4:	20005618 	.word	0x20005618
 800a0c8:	20005af8 	.word	0x20005af8
 800a0cc:	20005b08 	.word	0x20005b08
 800a0d0:	20005af4 	.word	0x20005af4
 800a0d4:	2000561c 	.word	0x2000561c
 800a0d8:	e000ed04 	.word	0xe000ed04

0800a0dc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a0dc:	b580      	push	{r7, lr}
 800a0de:	b084      	sub	sp, #16
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a0e4:	2300      	movs	r3, #0
 800a0e6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d017      	beq.n	800a11e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a0ee:	4b13      	ldr	r3, [pc, #76]	; (800a13c <vTaskDelay+0x60>)
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d00a      	beq.n	800a10c <vTaskDelay+0x30>
	__asm volatile
 800a0f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0fa:	f383 8811 	msr	BASEPRI, r3
 800a0fe:	f3bf 8f6f 	isb	sy
 800a102:	f3bf 8f4f 	dsb	sy
 800a106:	60bb      	str	r3, [r7, #8]
}
 800a108:	bf00      	nop
 800a10a:	e7fe      	b.n	800a10a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a10c:	f000 f880 	bl	800a210 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a110:	2100      	movs	r1, #0
 800a112:	6878      	ldr	r0, [r7, #4]
 800a114:	f000 fda0 	bl	800ac58 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a118:	f000 f888 	bl	800a22c <xTaskResumeAll>
 800a11c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	2b00      	cmp	r3, #0
 800a122:	d107      	bne.n	800a134 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800a124:	4b06      	ldr	r3, [pc, #24]	; (800a140 <vTaskDelay+0x64>)
 800a126:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a12a:	601a      	str	r2, [r3, #0]
 800a12c:	f3bf 8f4f 	dsb	sy
 800a130:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a134:	bf00      	nop
 800a136:	3710      	adds	r7, #16
 800a138:	46bd      	mov	sp, r7
 800a13a:	bd80      	pop	{r7, pc}
 800a13c:	20005b14 	.word	0x20005b14
 800a140:	e000ed04 	.word	0xe000ed04

0800a144 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a144:	b580      	push	{r7, lr}
 800a146:	b08a      	sub	sp, #40	; 0x28
 800a148:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a14a:	2300      	movs	r3, #0
 800a14c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a14e:	2300      	movs	r3, #0
 800a150:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a152:	463a      	mov	r2, r7
 800a154:	1d39      	adds	r1, r7, #4
 800a156:	f107 0308 	add.w	r3, r7, #8
 800a15a:	4618      	mov	r0, r3
 800a15c:	f7fe fce8 	bl	8008b30 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a160:	6839      	ldr	r1, [r7, #0]
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	68ba      	ldr	r2, [r7, #8]
 800a166:	9202      	str	r2, [sp, #8]
 800a168:	9301      	str	r3, [sp, #4]
 800a16a:	2300      	movs	r3, #0
 800a16c:	9300      	str	r3, [sp, #0]
 800a16e:	2300      	movs	r3, #0
 800a170:	460a      	mov	r2, r1
 800a172:	4921      	ldr	r1, [pc, #132]	; (800a1f8 <vTaskStartScheduler+0xb4>)
 800a174:	4821      	ldr	r0, [pc, #132]	; (800a1fc <vTaskStartScheduler+0xb8>)
 800a176:	f7ff fe0f 	bl	8009d98 <xTaskCreateStatic>
 800a17a:	4603      	mov	r3, r0
 800a17c:	4a20      	ldr	r2, [pc, #128]	; (800a200 <vTaskStartScheduler+0xbc>)
 800a17e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a180:	4b1f      	ldr	r3, [pc, #124]	; (800a200 <vTaskStartScheduler+0xbc>)
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	2b00      	cmp	r3, #0
 800a186:	d002      	beq.n	800a18e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a188:	2301      	movs	r3, #1
 800a18a:	617b      	str	r3, [r7, #20]
 800a18c:	e001      	b.n	800a192 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a18e:	2300      	movs	r3, #0
 800a190:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a192:	697b      	ldr	r3, [r7, #20]
 800a194:	2b01      	cmp	r3, #1
 800a196:	d102      	bne.n	800a19e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a198:	f000 fdb2 	bl	800ad00 <xTimerCreateTimerTask>
 800a19c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a19e:	697b      	ldr	r3, [r7, #20]
 800a1a0:	2b01      	cmp	r3, #1
 800a1a2:	d116      	bne.n	800a1d2 <vTaskStartScheduler+0x8e>
	__asm volatile
 800a1a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1a8:	f383 8811 	msr	BASEPRI, r3
 800a1ac:	f3bf 8f6f 	isb	sy
 800a1b0:	f3bf 8f4f 	dsb	sy
 800a1b4:	613b      	str	r3, [r7, #16]
}
 800a1b6:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a1b8:	4b12      	ldr	r3, [pc, #72]	; (800a204 <vTaskStartScheduler+0xc0>)
 800a1ba:	f04f 32ff 	mov.w	r2, #4294967295
 800a1be:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a1c0:	4b11      	ldr	r3, [pc, #68]	; (800a208 <vTaskStartScheduler+0xc4>)
 800a1c2:	2201      	movs	r2, #1
 800a1c4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a1c6:	4b11      	ldr	r3, [pc, #68]	; (800a20c <vTaskStartScheduler+0xc8>)
 800a1c8:	2200      	movs	r2, #0
 800a1ca:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a1cc:	f001 f990 	bl	800b4f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a1d0:	e00e      	b.n	800a1f0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a1d2:	697b      	ldr	r3, [r7, #20]
 800a1d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1d8:	d10a      	bne.n	800a1f0 <vTaskStartScheduler+0xac>
	__asm volatile
 800a1da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1de:	f383 8811 	msr	BASEPRI, r3
 800a1e2:	f3bf 8f6f 	isb	sy
 800a1e6:	f3bf 8f4f 	dsb	sy
 800a1ea:	60fb      	str	r3, [r7, #12]
}
 800a1ec:	bf00      	nop
 800a1ee:	e7fe      	b.n	800a1ee <vTaskStartScheduler+0xaa>
}
 800a1f0:	bf00      	nop
 800a1f2:	3718      	adds	r7, #24
 800a1f4:	46bd      	mov	sp, r7
 800a1f6:	bd80      	pop	{r7, pc}
 800a1f8:	0800cdb8 	.word	0x0800cdb8
 800a1fc:	0800a965 	.word	0x0800a965
 800a200:	20005b10 	.word	0x20005b10
 800a204:	20005b0c 	.word	0x20005b0c
 800a208:	20005af8 	.word	0x20005af8
 800a20c:	20005af0 	.word	0x20005af0

0800a210 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a210:	b480      	push	{r7}
 800a212:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800a214:	4b04      	ldr	r3, [pc, #16]	; (800a228 <vTaskSuspendAll+0x18>)
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	3301      	adds	r3, #1
 800a21a:	4a03      	ldr	r2, [pc, #12]	; (800a228 <vTaskSuspendAll+0x18>)
 800a21c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800a21e:	bf00      	nop
 800a220:	46bd      	mov	sp, r7
 800a222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a226:	4770      	bx	lr
 800a228:	20005b14 	.word	0x20005b14

0800a22c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a22c:	b580      	push	{r7, lr}
 800a22e:	b084      	sub	sp, #16
 800a230:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a232:	2300      	movs	r3, #0
 800a234:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a236:	2300      	movs	r3, #0
 800a238:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a23a:	4b42      	ldr	r3, [pc, #264]	; (800a344 <xTaskResumeAll+0x118>)
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d10a      	bne.n	800a258 <xTaskResumeAll+0x2c>
	__asm volatile
 800a242:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a246:	f383 8811 	msr	BASEPRI, r3
 800a24a:	f3bf 8f6f 	isb	sy
 800a24e:	f3bf 8f4f 	dsb	sy
 800a252:	603b      	str	r3, [r7, #0]
}
 800a254:	bf00      	nop
 800a256:	e7fe      	b.n	800a256 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a258:	f001 f9ec 	bl	800b634 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a25c:	4b39      	ldr	r3, [pc, #228]	; (800a344 <xTaskResumeAll+0x118>)
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	3b01      	subs	r3, #1
 800a262:	4a38      	ldr	r2, [pc, #224]	; (800a344 <xTaskResumeAll+0x118>)
 800a264:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a266:	4b37      	ldr	r3, [pc, #220]	; (800a344 <xTaskResumeAll+0x118>)
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d162      	bne.n	800a334 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a26e:	4b36      	ldr	r3, [pc, #216]	; (800a348 <xTaskResumeAll+0x11c>)
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	2b00      	cmp	r3, #0
 800a274:	d05e      	beq.n	800a334 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a276:	e02f      	b.n	800a2d8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a278:	4b34      	ldr	r3, [pc, #208]	; (800a34c <xTaskResumeAll+0x120>)
 800a27a:	68db      	ldr	r3, [r3, #12]
 800a27c:	68db      	ldr	r3, [r3, #12]
 800a27e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	3318      	adds	r3, #24
 800a284:	4618      	mov	r0, r3
 800a286:	f7fe ff7d 	bl	8009184 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	3304      	adds	r3, #4
 800a28e:	4618      	mov	r0, r3
 800a290:	f7fe ff78 	bl	8009184 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a298:	4b2d      	ldr	r3, [pc, #180]	; (800a350 <xTaskResumeAll+0x124>)
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	429a      	cmp	r2, r3
 800a29e:	d903      	bls.n	800a2a8 <xTaskResumeAll+0x7c>
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2a4:	4a2a      	ldr	r2, [pc, #168]	; (800a350 <xTaskResumeAll+0x124>)
 800a2a6:	6013      	str	r3, [r2, #0]
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2ac:	4613      	mov	r3, r2
 800a2ae:	009b      	lsls	r3, r3, #2
 800a2b0:	4413      	add	r3, r2
 800a2b2:	009b      	lsls	r3, r3, #2
 800a2b4:	4a27      	ldr	r2, [pc, #156]	; (800a354 <xTaskResumeAll+0x128>)
 800a2b6:	441a      	add	r2, r3
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	3304      	adds	r3, #4
 800a2bc:	4619      	mov	r1, r3
 800a2be:	4610      	mov	r0, r2
 800a2c0:	f7fe ff03 	bl	80090ca <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2c8:	4b23      	ldr	r3, [pc, #140]	; (800a358 <xTaskResumeAll+0x12c>)
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2ce:	429a      	cmp	r2, r3
 800a2d0:	d302      	bcc.n	800a2d8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800a2d2:	4b22      	ldr	r3, [pc, #136]	; (800a35c <xTaskResumeAll+0x130>)
 800a2d4:	2201      	movs	r2, #1
 800a2d6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a2d8:	4b1c      	ldr	r3, [pc, #112]	; (800a34c <xTaskResumeAll+0x120>)
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d1cb      	bne.n	800a278 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d001      	beq.n	800a2ea <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a2e6:	f000 fbf3 	bl	800aad0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800a2ea:	4b1d      	ldr	r3, [pc, #116]	; (800a360 <xTaskResumeAll+0x134>)
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d010      	beq.n	800a318 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a2f6:	f000 f847 	bl	800a388 <xTaskIncrementTick>
 800a2fa:	4603      	mov	r3, r0
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d002      	beq.n	800a306 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800a300:	4b16      	ldr	r3, [pc, #88]	; (800a35c <xTaskResumeAll+0x130>)
 800a302:	2201      	movs	r2, #1
 800a304:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	3b01      	subs	r3, #1
 800a30a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d1f1      	bne.n	800a2f6 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800a312:	4b13      	ldr	r3, [pc, #76]	; (800a360 <xTaskResumeAll+0x134>)
 800a314:	2200      	movs	r2, #0
 800a316:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a318:	4b10      	ldr	r3, [pc, #64]	; (800a35c <xTaskResumeAll+0x130>)
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d009      	beq.n	800a334 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a320:	2301      	movs	r3, #1
 800a322:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a324:	4b0f      	ldr	r3, [pc, #60]	; (800a364 <xTaskResumeAll+0x138>)
 800a326:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a32a:	601a      	str	r2, [r3, #0]
 800a32c:	f3bf 8f4f 	dsb	sy
 800a330:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a334:	f001 f9ae 	bl	800b694 <vPortExitCritical>

	return xAlreadyYielded;
 800a338:	68bb      	ldr	r3, [r7, #8]
}
 800a33a:	4618      	mov	r0, r3
 800a33c:	3710      	adds	r7, #16
 800a33e:	46bd      	mov	sp, r7
 800a340:	bd80      	pop	{r7, pc}
 800a342:	bf00      	nop
 800a344:	20005b14 	.word	0x20005b14
 800a348:	20005aec 	.word	0x20005aec
 800a34c:	20005aac 	.word	0x20005aac
 800a350:	20005af4 	.word	0x20005af4
 800a354:	2000561c 	.word	0x2000561c
 800a358:	20005618 	.word	0x20005618
 800a35c:	20005b00 	.word	0x20005b00
 800a360:	20005afc 	.word	0x20005afc
 800a364:	e000ed04 	.word	0xe000ed04

0800a368 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a368:	b480      	push	{r7}
 800a36a:	b083      	sub	sp, #12
 800a36c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a36e:	4b05      	ldr	r3, [pc, #20]	; (800a384 <xTaskGetTickCount+0x1c>)
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a374:	687b      	ldr	r3, [r7, #4]
}
 800a376:	4618      	mov	r0, r3
 800a378:	370c      	adds	r7, #12
 800a37a:	46bd      	mov	sp, r7
 800a37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a380:	4770      	bx	lr
 800a382:	bf00      	nop
 800a384:	20005af0 	.word	0x20005af0

0800a388 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a388:	b580      	push	{r7, lr}
 800a38a:	b086      	sub	sp, #24
 800a38c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a38e:	2300      	movs	r3, #0
 800a390:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a392:	4b4f      	ldr	r3, [pc, #316]	; (800a4d0 <xTaskIncrementTick+0x148>)
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	2b00      	cmp	r3, #0
 800a398:	f040 8089 	bne.w	800a4ae <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a39c:	4b4d      	ldr	r3, [pc, #308]	; (800a4d4 <xTaskIncrementTick+0x14c>)
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	3301      	adds	r3, #1
 800a3a2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a3a4:	4a4b      	ldr	r2, [pc, #300]	; (800a4d4 <xTaskIncrementTick+0x14c>)
 800a3a6:	693b      	ldr	r3, [r7, #16]
 800a3a8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a3aa:	693b      	ldr	r3, [r7, #16]
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d120      	bne.n	800a3f2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a3b0:	4b49      	ldr	r3, [pc, #292]	; (800a4d8 <xTaskIncrementTick+0x150>)
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d00a      	beq.n	800a3d0 <xTaskIncrementTick+0x48>
	__asm volatile
 800a3ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3be:	f383 8811 	msr	BASEPRI, r3
 800a3c2:	f3bf 8f6f 	isb	sy
 800a3c6:	f3bf 8f4f 	dsb	sy
 800a3ca:	603b      	str	r3, [r7, #0]
}
 800a3cc:	bf00      	nop
 800a3ce:	e7fe      	b.n	800a3ce <xTaskIncrementTick+0x46>
 800a3d0:	4b41      	ldr	r3, [pc, #260]	; (800a4d8 <xTaskIncrementTick+0x150>)
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	60fb      	str	r3, [r7, #12]
 800a3d6:	4b41      	ldr	r3, [pc, #260]	; (800a4dc <xTaskIncrementTick+0x154>)
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	4a3f      	ldr	r2, [pc, #252]	; (800a4d8 <xTaskIncrementTick+0x150>)
 800a3dc:	6013      	str	r3, [r2, #0]
 800a3de:	4a3f      	ldr	r2, [pc, #252]	; (800a4dc <xTaskIncrementTick+0x154>)
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	6013      	str	r3, [r2, #0]
 800a3e4:	4b3e      	ldr	r3, [pc, #248]	; (800a4e0 <xTaskIncrementTick+0x158>)
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	3301      	adds	r3, #1
 800a3ea:	4a3d      	ldr	r2, [pc, #244]	; (800a4e0 <xTaskIncrementTick+0x158>)
 800a3ec:	6013      	str	r3, [r2, #0]
 800a3ee:	f000 fb6f 	bl	800aad0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a3f2:	4b3c      	ldr	r3, [pc, #240]	; (800a4e4 <xTaskIncrementTick+0x15c>)
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	693a      	ldr	r2, [r7, #16]
 800a3f8:	429a      	cmp	r2, r3
 800a3fa:	d349      	bcc.n	800a490 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a3fc:	4b36      	ldr	r3, [pc, #216]	; (800a4d8 <xTaskIncrementTick+0x150>)
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	2b00      	cmp	r3, #0
 800a404:	d104      	bne.n	800a410 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a406:	4b37      	ldr	r3, [pc, #220]	; (800a4e4 <xTaskIncrementTick+0x15c>)
 800a408:	f04f 32ff 	mov.w	r2, #4294967295
 800a40c:	601a      	str	r2, [r3, #0]
					break;
 800a40e:	e03f      	b.n	800a490 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a410:	4b31      	ldr	r3, [pc, #196]	; (800a4d8 <xTaskIncrementTick+0x150>)
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	68db      	ldr	r3, [r3, #12]
 800a416:	68db      	ldr	r3, [r3, #12]
 800a418:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a41a:	68bb      	ldr	r3, [r7, #8]
 800a41c:	685b      	ldr	r3, [r3, #4]
 800a41e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a420:	693a      	ldr	r2, [r7, #16]
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	429a      	cmp	r2, r3
 800a426:	d203      	bcs.n	800a430 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a428:	4a2e      	ldr	r2, [pc, #184]	; (800a4e4 <xTaskIncrementTick+0x15c>)
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a42e:	e02f      	b.n	800a490 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a430:	68bb      	ldr	r3, [r7, #8]
 800a432:	3304      	adds	r3, #4
 800a434:	4618      	mov	r0, r3
 800a436:	f7fe fea5 	bl	8009184 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a43a:	68bb      	ldr	r3, [r7, #8]
 800a43c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d004      	beq.n	800a44c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a442:	68bb      	ldr	r3, [r7, #8]
 800a444:	3318      	adds	r3, #24
 800a446:	4618      	mov	r0, r3
 800a448:	f7fe fe9c 	bl	8009184 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a44c:	68bb      	ldr	r3, [r7, #8]
 800a44e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a450:	4b25      	ldr	r3, [pc, #148]	; (800a4e8 <xTaskIncrementTick+0x160>)
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	429a      	cmp	r2, r3
 800a456:	d903      	bls.n	800a460 <xTaskIncrementTick+0xd8>
 800a458:	68bb      	ldr	r3, [r7, #8]
 800a45a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a45c:	4a22      	ldr	r2, [pc, #136]	; (800a4e8 <xTaskIncrementTick+0x160>)
 800a45e:	6013      	str	r3, [r2, #0]
 800a460:	68bb      	ldr	r3, [r7, #8]
 800a462:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a464:	4613      	mov	r3, r2
 800a466:	009b      	lsls	r3, r3, #2
 800a468:	4413      	add	r3, r2
 800a46a:	009b      	lsls	r3, r3, #2
 800a46c:	4a1f      	ldr	r2, [pc, #124]	; (800a4ec <xTaskIncrementTick+0x164>)
 800a46e:	441a      	add	r2, r3
 800a470:	68bb      	ldr	r3, [r7, #8]
 800a472:	3304      	adds	r3, #4
 800a474:	4619      	mov	r1, r3
 800a476:	4610      	mov	r0, r2
 800a478:	f7fe fe27 	bl	80090ca <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a47c:	68bb      	ldr	r3, [r7, #8]
 800a47e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a480:	4b1b      	ldr	r3, [pc, #108]	; (800a4f0 <xTaskIncrementTick+0x168>)
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a486:	429a      	cmp	r2, r3
 800a488:	d3b8      	bcc.n	800a3fc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a48a:	2301      	movs	r3, #1
 800a48c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a48e:	e7b5      	b.n	800a3fc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a490:	4b17      	ldr	r3, [pc, #92]	; (800a4f0 <xTaskIncrementTick+0x168>)
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a496:	4915      	ldr	r1, [pc, #84]	; (800a4ec <xTaskIncrementTick+0x164>)
 800a498:	4613      	mov	r3, r2
 800a49a:	009b      	lsls	r3, r3, #2
 800a49c:	4413      	add	r3, r2
 800a49e:	009b      	lsls	r3, r3, #2
 800a4a0:	440b      	add	r3, r1
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	2b01      	cmp	r3, #1
 800a4a6:	d907      	bls.n	800a4b8 <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 800a4a8:	2301      	movs	r3, #1
 800a4aa:	617b      	str	r3, [r7, #20]
 800a4ac:	e004      	b.n	800a4b8 <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800a4ae:	4b11      	ldr	r3, [pc, #68]	; (800a4f4 <xTaskIncrementTick+0x16c>)
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	3301      	adds	r3, #1
 800a4b4:	4a0f      	ldr	r2, [pc, #60]	; (800a4f4 <xTaskIncrementTick+0x16c>)
 800a4b6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800a4b8:	4b0f      	ldr	r3, [pc, #60]	; (800a4f8 <xTaskIncrementTick+0x170>)
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d001      	beq.n	800a4c4 <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 800a4c0:	2301      	movs	r3, #1
 800a4c2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800a4c4:	697b      	ldr	r3, [r7, #20]
}
 800a4c6:	4618      	mov	r0, r3
 800a4c8:	3718      	adds	r7, #24
 800a4ca:	46bd      	mov	sp, r7
 800a4cc:	bd80      	pop	{r7, pc}
 800a4ce:	bf00      	nop
 800a4d0:	20005b14 	.word	0x20005b14
 800a4d4:	20005af0 	.word	0x20005af0
 800a4d8:	20005aa4 	.word	0x20005aa4
 800a4dc:	20005aa8 	.word	0x20005aa8
 800a4e0:	20005b04 	.word	0x20005b04
 800a4e4:	20005b0c 	.word	0x20005b0c
 800a4e8:	20005af4 	.word	0x20005af4
 800a4ec:	2000561c 	.word	0x2000561c
 800a4f0:	20005618 	.word	0x20005618
 800a4f4:	20005afc 	.word	0x20005afc
 800a4f8:	20005b00 	.word	0x20005b00

0800a4fc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a4fc:	b480      	push	{r7}
 800a4fe:	b085      	sub	sp, #20
 800a500:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a502:	4b28      	ldr	r3, [pc, #160]	; (800a5a4 <vTaskSwitchContext+0xa8>)
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	2b00      	cmp	r3, #0
 800a508:	d003      	beq.n	800a512 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a50a:	4b27      	ldr	r3, [pc, #156]	; (800a5a8 <vTaskSwitchContext+0xac>)
 800a50c:	2201      	movs	r2, #1
 800a50e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a510:	e041      	b.n	800a596 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800a512:	4b25      	ldr	r3, [pc, #148]	; (800a5a8 <vTaskSwitchContext+0xac>)
 800a514:	2200      	movs	r2, #0
 800a516:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a518:	4b24      	ldr	r3, [pc, #144]	; (800a5ac <vTaskSwitchContext+0xb0>)
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	60fb      	str	r3, [r7, #12]
 800a51e:	e010      	b.n	800a542 <vTaskSwitchContext+0x46>
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	2b00      	cmp	r3, #0
 800a524:	d10a      	bne.n	800a53c <vTaskSwitchContext+0x40>
	__asm volatile
 800a526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a52a:	f383 8811 	msr	BASEPRI, r3
 800a52e:	f3bf 8f6f 	isb	sy
 800a532:	f3bf 8f4f 	dsb	sy
 800a536:	607b      	str	r3, [r7, #4]
}
 800a538:	bf00      	nop
 800a53a:	e7fe      	b.n	800a53a <vTaskSwitchContext+0x3e>
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	3b01      	subs	r3, #1
 800a540:	60fb      	str	r3, [r7, #12]
 800a542:	491b      	ldr	r1, [pc, #108]	; (800a5b0 <vTaskSwitchContext+0xb4>)
 800a544:	68fa      	ldr	r2, [r7, #12]
 800a546:	4613      	mov	r3, r2
 800a548:	009b      	lsls	r3, r3, #2
 800a54a:	4413      	add	r3, r2
 800a54c:	009b      	lsls	r3, r3, #2
 800a54e:	440b      	add	r3, r1
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	2b00      	cmp	r3, #0
 800a554:	d0e4      	beq.n	800a520 <vTaskSwitchContext+0x24>
 800a556:	68fa      	ldr	r2, [r7, #12]
 800a558:	4613      	mov	r3, r2
 800a55a:	009b      	lsls	r3, r3, #2
 800a55c:	4413      	add	r3, r2
 800a55e:	009b      	lsls	r3, r3, #2
 800a560:	4a13      	ldr	r2, [pc, #76]	; (800a5b0 <vTaskSwitchContext+0xb4>)
 800a562:	4413      	add	r3, r2
 800a564:	60bb      	str	r3, [r7, #8]
 800a566:	68bb      	ldr	r3, [r7, #8]
 800a568:	685b      	ldr	r3, [r3, #4]
 800a56a:	685a      	ldr	r2, [r3, #4]
 800a56c:	68bb      	ldr	r3, [r7, #8]
 800a56e:	605a      	str	r2, [r3, #4]
 800a570:	68bb      	ldr	r3, [r7, #8]
 800a572:	685a      	ldr	r2, [r3, #4]
 800a574:	68bb      	ldr	r3, [r7, #8]
 800a576:	3308      	adds	r3, #8
 800a578:	429a      	cmp	r2, r3
 800a57a:	d104      	bne.n	800a586 <vTaskSwitchContext+0x8a>
 800a57c:	68bb      	ldr	r3, [r7, #8]
 800a57e:	685b      	ldr	r3, [r3, #4]
 800a580:	685a      	ldr	r2, [r3, #4]
 800a582:	68bb      	ldr	r3, [r7, #8]
 800a584:	605a      	str	r2, [r3, #4]
 800a586:	68bb      	ldr	r3, [r7, #8]
 800a588:	685b      	ldr	r3, [r3, #4]
 800a58a:	68db      	ldr	r3, [r3, #12]
 800a58c:	4a09      	ldr	r2, [pc, #36]	; (800a5b4 <vTaskSwitchContext+0xb8>)
 800a58e:	6013      	str	r3, [r2, #0]
 800a590:	4a06      	ldr	r2, [pc, #24]	; (800a5ac <vTaskSwitchContext+0xb0>)
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	6013      	str	r3, [r2, #0]
}
 800a596:	bf00      	nop
 800a598:	3714      	adds	r7, #20
 800a59a:	46bd      	mov	sp, r7
 800a59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a0:	4770      	bx	lr
 800a5a2:	bf00      	nop
 800a5a4:	20005b14 	.word	0x20005b14
 800a5a8:	20005b00 	.word	0x20005b00
 800a5ac:	20005af4 	.word	0x20005af4
 800a5b0:	2000561c 	.word	0x2000561c
 800a5b4:	20005618 	.word	0x20005618

0800a5b8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a5b8:	b580      	push	{r7, lr}
 800a5ba:	b084      	sub	sp, #16
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	6078      	str	r0, [r7, #4]
 800a5c0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d10a      	bne.n	800a5de <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800a5c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5cc:	f383 8811 	msr	BASEPRI, r3
 800a5d0:	f3bf 8f6f 	isb	sy
 800a5d4:	f3bf 8f4f 	dsb	sy
 800a5d8:	60fb      	str	r3, [r7, #12]
}
 800a5da:	bf00      	nop
 800a5dc:	e7fe      	b.n	800a5dc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a5de:	4b07      	ldr	r3, [pc, #28]	; (800a5fc <vTaskPlaceOnEventList+0x44>)
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	3318      	adds	r3, #24
 800a5e4:	4619      	mov	r1, r3
 800a5e6:	6878      	ldr	r0, [r7, #4]
 800a5e8:	f7fe fd93 	bl	8009112 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a5ec:	2101      	movs	r1, #1
 800a5ee:	6838      	ldr	r0, [r7, #0]
 800a5f0:	f000 fb32 	bl	800ac58 <prvAddCurrentTaskToDelayedList>
}
 800a5f4:	bf00      	nop
 800a5f6:	3710      	adds	r7, #16
 800a5f8:	46bd      	mov	sp, r7
 800a5fa:	bd80      	pop	{r7, pc}
 800a5fc:	20005618 	.word	0x20005618

0800a600 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 800a600:	b580      	push	{r7, lr}
 800a602:	b086      	sub	sp, #24
 800a604:	af00      	add	r7, sp, #0
 800a606:	60f8      	str	r0, [r7, #12]
 800a608:	60b9      	str	r1, [r7, #8]
 800a60a:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d10a      	bne.n	800a628 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 800a612:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a616:	f383 8811 	msr	BASEPRI, r3
 800a61a:	f3bf 8f6f 	isb	sy
 800a61e:	f3bf 8f4f 	dsb	sy
 800a622:	617b      	str	r3, [r7, #20]
}
 800a624:	bf00      	nop
 800a626:	e7fe      	b.n	800a626 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 800a628:	4b11      	ldr	r3, [pc, #68]	; (800a670 <vTaskPlaceOnUnorderedEventList+0x70>)
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d10a      	bne.n	800a646 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 800a630:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a634:	f383 8811 	msr	BASEPRI, r3
 800a638:	f3bf 8f6f 	isb	sy
 800a63c:	f3bf 8f4f 	dsb	sy
 800a640:	613b      	str	r3, [r7, #16]
}
 800a642:	bf00      	nop
 800a644:	e7fe      	b.n	800a644 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800a646:	4b0b      	ldr	r3, [pc, #44]	; (800a674 <vTaskPlaceOnUnorderedEventList+0x74>)
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	68ba      	ldr	r2, [r7, #8]
 800a64c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800a650:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a652:	4b08      	ldr	r3, [pc, #32]	; (800a674 <vTaskPlaceOnUnorderedEventList+0x74>)
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	3318      	adds	r3, #24
 800a658:	4619      	mov	r1, r3
 800a65a:	68f8      	ldr	r0, [r7, #12]
 800a65c:	f7fe fd35 	bl	80090ca <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a660:	2101      	movs	r1, #1
 800a662:	6878      	ldr	r0, [r7, #4]
 800a664:	f000 faf8 	bl	800ac58 <prvAddCurrentTaskToDelayedList>
}
 800a668:	bf00      	nop
 800a66a:	3718      	adds	r7, #24
 800a66c:	46bd      	mov	sp, r7
 800a66e:	bd80      	pop	{r7, pc}
 800a670:	20005b14 	.word	0x20005b14
 800a674:	20005618 	.word	0x20005618

0800a678 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a678:	b580      	push	{r7, lr}
 800a67a:	b086      	sub	sp, #24
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	60f8      	str	r0, [r7, #12]
 800a680:	60b9      	str	r1, [r7, #8]
 800a682:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	2b00      	cmp	r3, #0
 800a688:	d10a      	bne.n	800a6a0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800a68a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a68e:	f383 8811 	msr	BASEPRI, r3
 800a692:	f3bf 8f6f 	isb	sy
 800a696:	f3bf 8f4f 	dsb	sy
 800a69a:	617b      	str	r3, [r7, #20]
}
 800a69c:	bf00      	nop
 800a69e:	e7fe      	b.n	800a69e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a6a0:	4b0a      	ldr	r3, [pc, #40]	; (800a6cc <vTaskPlaceOnEventListRestricted+0x54>)
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	3318      	adds	r3, #24
 800a6a6:	4619      	mov	r1, r3
 800a6a8:	68f8      	ldr	r0, [r7, #12]
 800a6aa:	f7fe fd0e 	bl	80090ca <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d002      	beq.n	800a6ba <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800a6b4:	f04f 33ff 	mov.w	r3, #4294967295
 800a6b8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a6ba:	6879      	ldr	r1, [r7, #4]
 800a6bc:	68b8      	ldr	r0, [r7, #8]
 800a6be:	f000 facb 	bl	800ac58 <prvAddCurrentTaskToDelayedList>
	}
 800a6c2:	bf00      	nop
 800a6c4:	3718      	adds	r7, #24
 800a6c6:	46bd      	mov	sp, r7
 800a6c8:	bd80      	pop	{r7, pc}
 800a6ca:	bf00      	nop
 800a6cc:	20005618 	.word	0x20005618

0800a6d0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a6d0:	b580      	push	{r7, lr}
 800a6d2:	b086      	sub	sp, #24
 800a6d4:	af00      	add	r7, sp, #0
 800a6d6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	68db      	ldr	r3, [r3, #12]
 800a6dc:	68db      	ldr	r3, [r3, #12]
 800a6de:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a6e0:	693b      	ldr	r3, [r7, #16]
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d10a      	bne.n	800a6fc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a6e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6ea:	f383 8811 	msr	BASEPRI, r3
 800a6ee:	f3bf 8f6f 	isb	sy
 800a6f2:	f3bf 8f4f 	dsb	sy
 800a6f6:	60fb      	str	r3, [r7, #12]
}
 800a6f8:	bf00      	nop
 800a6fa:	e7fe      	b.n	800a6fa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a6fc:	693b      	ldr	r3, [r7, #16]
 800a6fe:	3318      	adds	r3, #24
 800a700:	4618      	mov	r0, r3
 800a702:	f7fe fd3f 	bl	8009184 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a706:	4b1e      	ldr	r3, [pc, #120]	; (800a780 <xTaskRemoveFromEventList+0xb0>)
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d11d      	bne.n	800a74a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a70e:	693b      	ldr	r3, [r7, #16]
 800a710:	3304      	adds	r3, #4
 800a712:	4618      	mov	r0, r3
 800a714:	f7fe fd36 	bl	8009184 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a718:	693b      	ldr	r3, [r7, #16]
 800a71a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a71c:	4b19      	ldr	r3, [pc, #100]	; (800a784 <xTaskRemoveFromEventList+0xb4>)
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	429a      	cmp	r2, r3
 800a722:	d903      	bls.n	800a72c <xTaskRemoveFromEventList+0x5c>
 800a724:	693b      	ldr	r3, [r7, #16]
 800a726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a728:	4a16      	ldr	r2, [pc, #88]	; (800a784 <xTaskRemoveFromEventList+0xb4>)
 800a72a:	6013      	str	r3, [r2, #0]
 800a72c:	693b      	ldr	r3, [r7, #16]
 800a72e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a730:	4613      	mov	r3, r2
 800a732:	009b      	lsls	r3, r3, #2
 800a734:	4413      	add	r3, r2
 800a736:	009b      	lsls	r3, r3, #2
 800a738:	4a13      	ldr	r2, [pc, #76]	; (800a788 <xTaskRemoveFromEventList+0xb8>)
 800a73a:	441a      	add	r2, r3
 800a73c:	693b      	ldr	r3, [r7, #16]
 800a73e:	3304      	adds	r3, #4
 800a740:	4619      	mov	r1, r3
 800a742:	4610      	mov	r0, r2
 800a744:	f7fe fcc1 	bl	80090ca <vListInsertEnd>
 800a748:	e005      	b.n	800a756 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a74a:	693b      	ldr	r3, [r7, #16]
 800a74c:	3318      	adds	r3, #24
 800a74e:	4619      	mov	r1, r3
 800a750:	480e      	ldr	r0, [pc, #56]	; (800a78c <xTaskRemoveFromEventList+0xbc>)
 800a752:	f7fe fcba 	bl	80090ca <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a756:	693b      	ldr	r3, [r7, #16]
 800a758:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a75a:	4b0d      	ldr	r3, [pc, #52]	; (800a790 <xTaskRemoveFromEventList+0xc0>)
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a760:	429a      	cmp	r2, r3
 800a762:	d905      	bls.n	800a770 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a764:	2301      	movs	r3, #1
 800a766:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a768:	4b0a      	ldr	r3, [pc, #40]	; (800a794 <xTaskRemoveFromEventList+0xc4>)
 800a76a:	2201      	movs	r2, #1
 800a76c:	601a      	str	r2, [r3, #0]
 800a76e:	e001      	b.n	800a774 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800a770:	2300      	movs	r3, #0
 800a772:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a774:	697b      	ldr	r3, [r7, #20]
}
 800a776:	4618      	mov	r0, r3
 800a778:	3718      	adds	r7, #24
 800a77a:	46bd      	mov	sp, r7
 800a77c:	bd80      	pop	{r7, pc}
 800a77e:	bf00      	nop
 800a780:	20005b14 	.word	0x20005b14
 800a784:	20005af4 	.word	0x20005af4
 800a788:	2000561c 	.word	0x2000561c
 800a78c:	20005aac 	.word	0x20005aac
 800a790:	20005618 	.word	0x20005618
 800a794:	20005b00 	.word	0x20005b00

0800a798 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 800a798:	b580      	push	{r7, lr}
 800a79a:	b086      	sub	sp, #24
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	6078      	str	r0, [r7, #4]
 800a7a0:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800a7a2:	4b29      	ldr	r3, [pc, #164]	; (800a848 <vTaskRemoveFromUnorderedEventList+0xb0>)
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d10a      	bne.n	800a7c0 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 800a7aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7ae:	f383 8811 	msr	BASEPRI, r3
 800a7b2:	f3bf 8f6f 	isb	sy
 800a7b6:	f3bf 8f4f 	dsb	sy
 800a7ba:	613b      	str	r3, [r7, #16]
}
 800a7bc:	bf00      	nop
 800a7be:	e7fe      	b.n	800a7be <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800a7c0:	683b      	ldr	r3, [r7, #0]
 800a7c2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	68db      	ldr	r3, [r3, #12]
 800a7ce:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 800a7d0:	697b      	ldr	r3, [r7, #20]
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d10a      	bne.n	800a7ec <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 800a7d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7da:	f383 8811 	msr	BASEPRI, r3
 800a7de:	f3bf 8f6f 	isb	sy
 800a7e2:	f3bf 8f4f 	dsb	sy
 800a7e6:	60fb      	str	r3, [r7, #12]
}
 800a7e8:	bf00      	nop
 800a7ea:	e7fe      	b.n	800a7ea <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 800a7ec:	6878      	ldr	r0, [r7, #4]
 800a7ee:	f7fe fcc9 	bl	8009184 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a7f2:	697b      	ldr	r3, [r7, #20]
 800a7f4:	3304      	adds	r3, #4
 800a7f6:	4618      	mov	r0, r3
 800a7f8:	f7fe fcc4 	bl	8009184 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 800a7fc:	697b      	ldr	r3, [r7, #20]
 800a7fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a800:	4b12      	ldr	r3, [pc, #72]	; (800a84c <vTaskRemoveFromUnorderedEventList+0xb4>)
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	429a      	cmp	r2, r3
 800a806:	d903      	bls.n	800a810 <vTaskRemoveFromUnorderedEventList+0x78>
 800a808:	697b      	ldr	r3, [r7, #20]
 800a80a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a80c:	4a0f      	ldr	r2, [pc, #60]	; (800a84c <vTaskRemoveFromUnorderedEventList+0xb4>)
 800a80e:	6013      	str	r3, [r2, #0]
 800a810:	697b      	ldr	r3, [r7, #20]
 800a812:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a814:	4613      	mov	r3, r2
 800a816:	009b      	lsls	r3, r3, #2
 800a818:	4413      	add	r3, r2
 800a81a:	009b      	lsls	r3, r3, #2
 800a81c:	4a0c      	ldr	r2, [pc, #48]	; (800a850 <vTaskRemoveFromUnorderedEventList+0xb8>)
 800a81e:	441a      	add	r2, r3
 800a820:	697b      	ldr	r3, [r7, #20]
 800a822:	3304      	adds	r3, #4
 800a824:	4619      	mov	r1, r3
 800a826:	4610      	mov	r0, r2
 800a828:	f7fe fc4f 	bl	80090ca <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a82c:	697b      	ldr	r3, [r7, #20]
 800a82e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a830:	4b08      	ldr	r3, [pc, #32]	; (800a854 <vTaskRemoveFromUnorderedEventList+0xbc>)
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a836:	429a      	cmp	r2, r3
 800a838:	d902      	bls.n	800a840 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 800a83a:	4b07      	ldr	r3, [pc, #28]	; (800a858 <vTaskRemoveFromUnorderedEventList+0xc0>)
 800a83c:	2201      	movs	r2, #1
 800a83e:	601a      	str	r2, [r3, #0]
	}
}
 800a840:	bf00      	nop
 800a842:	3718      	adds	r7, #24
 800a844:	46bd      	mov	sp, r7
 800a846:	bd80      	pop	{r7, pc}
 800a848:	20005b14 	.word	0x20005b14
 800a84c:	20005af4 	.word	0x20005af4
 800a850:	2000561c 	.word	0x2000561c
 800a854:	20005618 	.word	0x20005618
 800a858:	20005b00 	.word	0x20005b00

0800a85c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a85c:	b480      	push	{r7}
 800a85e:	b083      	sub	sp, #12
 800a860:	af00      	add	r7, sp, #0
 800a862:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a864:	4b06      	ldr	r3, [pc, #24]	; (800a880 <vTaskInternalSetTimeOutState+0x24>)
 800a866:	681a      	ldr	r2, [r3, #0]
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a86c:	4b05      	ldr	r3, [pc, #20]	; (800a884 <vTaskInternalSetTimeOutState+0x28>)
 800a86e:	681a      	ldr	r2, [r3, #0]
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	605a      	str	r2, [r3, #4]
}
 800a874:	bf00      	nop
 800a876:	370c      	adds	r7, #12
 800a878:	46bd      	mov	sp, r7
 800a87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a87e:	4770      	bx	lr
 800a880:	20005b04 	.word	0x20005b04
 800a884:	20005af0 	.word	0x20005af0

0800a888 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a888:	b580      	push	{r7, lr}
 800a88a:	b088      	sub	sp, #32
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	6078      	str	r0, [r7, #4]
 800a890:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	2b00      	cmp	r3, #0
 800a896:	d10a      	bne.n	800a8ae <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a89c:	f383 8811 	msr	BASEPRI, r3
 800a8a0:	f3bf 8f6f 	isb	sy
 800a8a4:	f3bf 8f4f 	dsb	sy
 800a8a8:	613b      	str	r3, [r7, #16]
}
 800a8aa:	bf00      	nop
 800a8ac:	e7fe      	b.n	800a8ac <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a8ae:	683b      	ldr	r3, [r7, #0]
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d10a      	bne.n	800a8ca <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a8b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8b8:	f383 8811 	msr	BASEPRI, r3
 800a8bc:	f3bf 8f6f 	isb	sy
 800a8c0:	f3bf 8f4f 	dsb	sy
 800a8c4:	60fb      	str	r3, [r7, #12]
}
 800a8c6:	bf00      	nop
 800a8c8:	e7fe      	b.n	800a8c8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a8ca:	f000 feb3 	bl	800b634 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a8ce:	4b1d      	ldr	r3, [pc, #116]	; (800a944 <xTaskCheckForTimeOut+0xbc>)
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	685b      	ldr	r3, [r3, #4]
 800a8d8:	69ba      	ldr	r2, [r7, #24]
 800a8da:	1ad3      	subs	r3, r2, r3
 800a8dc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a8de:	683b      	ldr	r3, [r7, #0]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8e6:	d102      	bne.n	800a8ee <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a8e8:	2300      	movs	r3, #0
 800a8ea:	61fb      	str	r3, [r7, #28]
 800a8ec:	e023      	b.n	800a936 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	681a      	ldr	r2, [r3, #0]
 800a8f2:	4b15      	ldr	r3, [pc, #84]	; (800a948 <xTaskCheckForTimeOut+0xc0>)
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	429a      	cmp	r2, r3
 800a8f8:	d007      	beq.n	800a90a <xTaskCheckForTimeOut+0x82>
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	685b      	ldr	r3, [r3, #4]
 800a8fe:	69ba      	ldr	r2, [r7, #24]
 800a900:	429a      	cmp	r2, r3
 800a902:	d302      	bcc.n	800a90a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a904:	2301      	movs	r3, #1
 800a906:	61fb      	str	r3, [r7, #28]
 800a908:	e015      	b.n	800a936 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a90a:	683b      	ldr	r3, [r7, #0]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	697a      	ldr	r2, [r7, #20]
 800a910:	429a      	cmp	r2, r3
 800a912:	d20b      	bcs.n	800a92c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a914:	683b      	ldr	r3, [r7, #0]
 800a916:	681a      	ldr	r2, [r3, #0]
 800a918:	697b      	ldr	r3, [r7, #20]
 800a91a:	1ad2      	subs	r2, r2, r3
 800a91c:	683b      	ldr	r3, [r7, #0]
 800a91e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a920:	6878      	ldr	r0, [r7, #4]
 800a922:	f7ff ff9b 	bl	800a85c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a926:	2300      	movs	r3, #0
 800a928:	61fb      	str	r3, [r7, #28]
 800a92a:	e004      	b.n	800a936 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a92c:	683b      	ldr	r3, [r7, #0]
 800a92e:	2200      	movs	r2, #0
 800a930:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a932:	2301      	movs	r3, #1
 800a934:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a936:	f000 fead 	bl	800b694 <vPortExitCritical>

	return xReturn;
 800a93a:	69fb      	ldr	r3, [r7, #28]
}
 800a93c:	4618      	mov	r0, r3
 800a93e:	3720      	adds	r7, #32
 800a940:	46bd      	mov	sp, r7
 800a942:	bd80      	pop	{r7, pc}
 800a944:	20005af0 	.word	0x20005af0
 800a948:	20005b04 	.word	0x20005b04

0800a94c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a94c:	b480      	push	{r7}
 800a94e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a950:	4b03      	ldr	r3, [pc, #12]	; (800a960 <vTaskMissedYield+0x14>)
 800a952:	2201      	movs	r2, #1
 800a954:	601a      	str	r2, [r3, #0]
}
 800a956:	bf00      	nop
 800a958:	46bd      	mov	sp, r7
 800a95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a95e:	4770      	bx	lr
 800a960:	20005b00 	.word	0x20005b00

0800a964 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a964:	b580      	push	{r7, lr}
 800a966:	b082      	sub	sp, #8
 800a968:	af00      	add	r7, sp, #0
 800a96a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a96c:	f000 f852 	bl	800aa14 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a970:	4b06      	ldr	r3, [pc, #24]	; (800a98c <prvIdleTask+0x28>)
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	2b01      	cmp	r3, #1
 800a976:	d9f9      	bls.n	800a96c <prvIdleTask+0x8>
			{
				taskYIELD();
 800a978:	4b05      	ldr	r3, [pc, #20]	; (800a990 <prvIdleTask+0x2c>)
 800a97a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a97e:	601a      	str	r2, [r3, #0]
 800a980:	f3bf 8f4f 	dsb	sy
 800a984:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a988:	e7f0      	b.n	800a96c <prvIdleTask+0x8>
 800a98a:	bf00      	nop
 800a98c:	2000561c 	.word	0x2000561c
 800a990:	e000ed04 	.word	0xe000ed04

0800a994 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a994:	b580      	push	{r7, lr}
 800a996:	b082      	sub	sp, #8
 800a998:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a99a:	2300      	movs	r3, #0
 800a99c:	607b      	str	r3, [r7, #4]
 800a99e:	e00c      	b.n	800a9ba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a9a0:	687a      	ldr	r2, [r7, #4]
 800a9a2:	4613      	mov	r3, r2
 800a9a4:	009b      	lsls	r3, r3, #2
 800a9a6:	4413      	add	r3, r2
 800a9a8:	009b      	lsls	r3, r3, #2
 800a9aa:	4a12      	ldr	r2, [pc, #72]	; (800a9f4 <prvInitialiseTaskLists+0x60>)
 800a9ac:	4413      	add	r3, r2
 800a9ae:	4618      	mov	r0, r3
 800a9b0:	f7fe fb5e 	bl	8009070 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	3301      	adds	r3, #1
 800a9b8:	607b      	str	r3, [r7, #4]
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	2b37      	cmp	r3, #55	; 0x37
 800a9be:	d9ef      	bls.n	800a9a0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a9c0:	480d      	ldr	r0, [pc, #52]	; (800a9f8 <prvInitialiseTaskLists+0x64>)
 800a9c2:	f7fe fb55 	bl	8009070 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a9c6:	480d      	ldr	r0, [pc, #52]	; (800a9fc <prvInitialiseTaskLists+0x68>)
 800a9c8:	f7fe fb52 	bl	8009070 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a9cc:	480c      	ldr	r0, [pc, #48]	; (800aa00 <prvInitialiseTaskLists+0x6c>)
 800a9ce:	f7fe fb4f 	bl	8009070 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a9d2:	480c      	ldr	r0, [pc, #48]	; (800aa04 <prvInitialiseTaskLists+0x70>)
 800a9d4:	f7fe fb4c 	bl	8009070 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a9d8:	480b      	ldr	r0, [pc, #44]	; (800aa08 <prvInitialiseTaskLists+0x74>)
 800a9da:	f7fe fb49 	bl	8009070 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a9de:	4b0b      	ldr	r3, [pc, #44]	; (800aa0c <prvInitialiseTaskLists+0x78>)
 800a9e0:	4a05      	ldr	r2, [pc, #20]	; (800a9f8 <prvInitialiseTaskLists+0x64>)
 800a9e2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a9e4:	4b0a      	ldr	r3, [pc, #40]	; (800aa10 <prvInitialiseTaskLists+0x7c>)
 800a9e6:	4a05      	ldr	r2, [pc, #20]	; (800a9fc <prvInitialiseTaskLists+0x68>)
 800a9e8:	601a      	str	r2, [r3, #0]
}
 800a9ea:	bf00      	nop
 800a9ec:	3708      	adds	r7, #8
 800a9ee:	46bd      	mov	sp, r7
 800a9f0:	bd80      	pop	{r7, pc}
 800a9f2:	bf00      	nop
 800a9f4:	2000561c 	.word	0x2000561c
 800a9f8:	20005a7c 	.word	0x20005a7c
 800a9fc:	20005a90 	.word	0x20005a90
 800aa00:	20005aac 	.word	0x20005aac
 800aa04:	20005ac0 	.word	0x20005ac0
 800aa08:	20005ad8 	.word	0x20005ad8
 800aa0c:	20005aa4 	.word	0x20005aa4
 800aa10:	20005aa8 	.word	0x20005aa8

0800aa14 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800aa14:	b580      	push	{r7, lr}
 800aa16:	b082      	sub	sp, #8
 800aa18:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800aa1a:	e019      	b.n	800aa50 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800aa1c:	f000 fe0a 	bl	800b634 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aa20:	4b10      	ldr	r3, [pc, #64]	; (800aa64 <prvCheckTasksWaitingTermination+0x50>)
 800aa22:	68db      	ldr	r3, [r3, #12]
 800aa24:	68db      	ldr	r3, [r3, #12]
 800aa26:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	3304      	adds	r3, #4
 800aa2c:	4618      	mov	r0, r3
 800aa2e:	f7fe fba9 	bl	8009184 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800aa32:	4b0d      	ldr	r3, [pc, #52]	; (800aa68 <prvCheckTasksWaitingTermination+0x54>)
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	3b01      	subs	r3, #1
 800aa38:	4a0b      	ldr	r2, [pc, #44]	; (800aa68 <prvCheckTasksWaitingTermination+0x54>)
 800aa3a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800aa3c:	4b0b      	ldr	r3, [pc, #44]	; (800aa6c <prvCheckTasksWaitingTermination+0x58>)
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	3b01      	subs	r3, #1
 800aa42:	4a0a      	ldr	r2, [pc, #40]	; (800aa6c <prvCheckTasksWaitingTermination+0x58>)
 800aa44:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800aa46:	f000 fe25 	bl	800b694 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800aa4a:	6878      	ldr	r0, [r7, #4]
 800aa4c:	f000 f810 	bl	800aa70 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800aa50:	4b06      	ldr	r3, [pc, #24]	; (800aa6c <prvCheckTasksWaitingTermination+0x58>)
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d1e1      	bne.n	800aa1c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800aa58:	bf00      	nop
 800aa5a:	bf00      	nop
 800aa5c:	3708      	adds	r7, #8
 800aa5e:	46bd      	mov	sp, r7
 800aa60:	bd80      	pop	{r7, pc}
 800aa62:	bf00      	nop
 800aa64:	20005ac0 	.word	0x20005ac0
 800aa68:	20005aec 	.word	0x20005aec
 800aa6c:	20005ad4 	.word	0x20005ad4

0800aa70 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800aa70:	b580      	push	{r7, lr}
 800aa72:	b084      	sub	sp, #16
 800aa74:	af00      	add	r7, sp, #0
 800aa76:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d108      	bne.n	800aa94 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa86:	4618      	mov	r0, r3
 800aa88:	f000 ffba 	bl	800ba00 <vPortFree>
				vPortFree( pxTCB );
 800aa8c:	6878      	ldr	r0, [r7, #4]
 800aa8e:	f000 ffb7 	bl	800ba00 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800aa92:	e018      	b.n	800aac6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800aa9a:	2b01      	cmp	r3, #1
 800aa9c:	d103      	bne.n	800aaa6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800aa9e:	6878      	ldr	r0, [r7, #4]
 800aaa0:	f000 ffae 	bl	800ba00 <vPortFree>
	}
 800aaa4:	e00f      	b.n	800aac6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800aaac:	2b02      	cmp	r3, #2
 800aaae:	d00a      	beq.n	800aac6 <prvDeleteTCB+0x56>
	__asm volatile
 800aab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aab4:	f383 8811 	msr	BASEPRI, r3
 800aab8:	f3bf 8f6f 	isb	sy
 800aabc:	f3bf 8f4f 	dsb	sy
 800aac0:	60fb      	str	r3, [r7, #12]
}
 800aac2:	bf00      	nop
 800aac4:	e7fe      	b.n	800aac4 <prvDeleteTCB+0x54>
	}
 800aac6:	bf00      	nop
 800aac8:	3710      	adds	r7, #16
 800aaca:	46bd      	mov	sp, r7
 800aacc:	bd80      	pop	{r7, pc}
	...

0800aad0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800aad0:	b480      	push	{r7}
 800aad2:	b083      	sub	sp, #12
 800aad4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aad6:	4b0c      	ldr	r3, [pc, #48]	; (800ab08 <prvResetNextTaskUnblockTime+0x38>)
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d104      	bne.n	800aaea <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800aae0:	4b0a      	ldr	r3, [pc, #40]	; (800ab0c <prvResetNextTaskUnblockTime+0x3c>)
 800aae2:	f04f 32ff 	mov.w	r2, #4294967295
 800aae6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800aae8:	e008      	b.n	800aafc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aaea:	4b07      	ldr	r3, [pc, #28]	; (800ab08 <prvResetNextTaskUnblockTime+0x38>)
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	68db      	ldr	r3, [r3, #12]
 800aaf0:	68db      	ldr	r3, [r3, #12]
 800aaf2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	685b      	ldr	r3, [r3, #4]
 800aaf8:	4a04      	ldr	r2, [pc, #16]	; (800ab0c <prvResetNextTaskUnblockTime+0x3c>)
 800aafa:	6013      	str	r3, [r2, #0]
}
 800aafc:	bf00      	nop
 800aafe:	370c      	adds	r7, #12
 800ab00:	46bd      	mov	sp, r7
 800ab02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab06:	4770      	bx	lr
 800ab08:	20005aa4 	.word	0x20005aa4
 800ab0c:	20005b0c 	.word	0x20005b0c

0800ab10 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ab10:	b480      	push	{r7}
 800ab12:	b083      	sub	sp, #12
 800ab14:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ab16:	4b0b      	ldr	r3, [pc, #44]	; (800ab44 <xTaskGetSchedulerState+0x34>)
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d102      	bne.n	800ab24 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ab1e:	2301      	movs	r3, #1
 800ab20:	607b      	str	r3, [r7, #4]
 800ab22:	e008      	b.n	800ab36 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ab24:	4b08      	ldr	r3, [pc, #32]	; (800ab48 <xTaskGetSchedulerState+0x38>)
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d102      	bne.n	800ab32 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ab2c:	2302      	movs	r3, #2
 800ab2e:	607b      	str	r3, [r7, #4]
 800ab30:	e001      	b.n	800ab36 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ab32:	2300      	movs	r3, #0
 800ab34:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ab36:	687b      	ldr	r3, [r7, #4]
	}
 800ab38:	4618      	mov	r0, r3
 800ab3a:	370c      	adds	r7, #12
 800ab3c:	46bd      	mov	sp, r7
 800ab3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab42:	4770      	bx	lr
 800ab44:	20005af8 	.word	0x20005af8
 800ab48:	20005b14 	.word	0x20005b14

0800ab4c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ab4c:	b580      	push	{r7, lr}
 800ab4e:	b086      	sub	sp, #24
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ab58:	2300      	movs	r3, #0
 800ab5a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d056      	beq.n	800ac10 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ab62:	4b2e      	ldr	r3, [pc, #184]	; (800ac1c <xTaskPriorityDisinherit+0xd0>)
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	693a      	ldr	r2, [r7, #16]
 800ab68:	429a      	cmp	r2, r3
 800ab6a:	d00a      	beq.n	800ab82 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800ab6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab70:	f383 8811 	msr	BASEPRI, r3
 800ab74:	f3bf 8f6f 	isb	sy
 800ab78:	f3bf 8f4f 	dsb	sy
 800ab7c:	60fb      	str	r3, [r7, #12]
}
 800ab7e:	bf00      	nop
 800ab80:	e7fe      	b.n	800ab80 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ab82:	693b      	ldr	r3, [r7, #16]
 800ab84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d10a      	bne.n	800aba0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800ab8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab8e:	f383 8811 	msr	BASEPRI, r3
 800ab92:	f3bf 8f6f 	isb	sy
 800ab96:	f3bf 8f4f 	dsb	sy
 800ab9a:	60bb      	str	r3, [r7, #8]
}
 800ab9c:	bf00      	nop
 800ab9e:	e7fe      	b.n	800ab9e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800aba0:	693b      	ldr	r3, [r7, #16]
 800aba2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aba4:	1e5a      	subs	r2, r3, #1
 800aba6:	693b      	ldr	r3, [r7, #16]
 800aba8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800abaa:	693b      	ldr	r3, [r7, #16]
 800abac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abae:	693b      	ldr	r3, [r7, #16]
 800abb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800abb2:	429a      	cmp	r2, r3
 800abb4:	d02c      	beq.n	800ac10 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800abb6:	693b      	ldr	r3, [r7, #16]
 800abb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d128      	bne.n	800ac10 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800abbe:	693b      	ldr	r3, [r7, #16]
 800abc0:	3304      	adds	r3, #4
 800abc2:	4618      	mov	r0, r3
 800abc4:	f7fe fade 	bl	8009184 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800abc8:	693b      	ldr	r3, [r7, #16]
 800abca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800abcc:	693b      	ldr	r3, [r7, #16]
 800abce:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800abd0:	693b      	ldr	r3, [r7, #16]
 800abd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abd4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800abd8:	693b      	ldr	r3, [r7, #16]
 800abda:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800abdc:	693b      	ldr	r3, [r7, #16]
 800abde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abe0:	4b0f      	ldr	r3, [pc, #60]	; (800ac20 <xTaskPriorityDisinherit+0xd4>)
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	429a      	cmp	r2, r3
 800abe6:	d903      	bls.n	800abf0 <xTaskPriorityDisinherit+0xa4>
 800abe8:	693b      	ldr	r3, [r7, #16]
 800abea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abec:	4a0c      	ldr	r2, [pc, #48]	; (800ac20 <xTaskPriorityDisinherit+0xd4>)
 800abee:	6013      	str	r3, [r2, #0]
 800abf0:	693b      	ldr	r3, [r7, #16]
 800abf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abf4:	4613      	mov	r3, r2
 800abf6:	009b      	lsls	r3, r3, #2
 800abf8:	4413      	add	r3, r2
 800abfa:	009b      	lsls	r3, r3, #2
 800abfc:	4a09      	ldr	r2, [pc, #36]	; (800ac24 <xTaskPriorityDisinherit+0xd8>)
 800abfe:	441a      	add	r2, r3
 800ac00:	693b      	ldr	r3, [r7, #16]
 800ac02:	3304      	adds	r3, #4
 800ac04:	4619      	mov	r1, r3
 800ac06:	4610      	mov	r0, r2
 800ac08:	f7fe fa5f 	bl	80090ca <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ac0c:	2301      	movs	r3, #1
 800ac0e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ac10:	697b      	ldr	r3, [r7, #20]
	}
 800ac12:	4618      	mov	r0, r3
 800ac14:	3718      	adds	r7, #24
 800ac16:	46bd      	mov	sp, r7
 800ac18:	bd80      	pop	{r7, pc}
 800ac1a:	bf00      	nop
 800ac1c:	20005618 	.word	0x20005618
 800ac20:	20005af4 	.word	0x20005af4
 800ac24:	2000561c 	.word	0x2000561c

0800ac28 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 800ac28:	b480      	push	{r7}
 800ac2a:	b083      	sub	sp, #12
 800ac2c:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800ac2e:	4b09      	ldr	r3, [pc, #36]	; (800ac54 <uxTaskResetEventItemValue+0x2c>)
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	699b      	ldr	r3, [r3, #24]
 800ac34:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ac36:	4b07      	ldr	r3, [pc, #28]	; (800ac54 <uxTaskResetEventItemValue+0x2c>)
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac3c:	4b05      	ldr	r3, [pc, #20]	; (800ac54 <uxTaskResetEventItemValue+0x2c>)
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 800ac44:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800ac46:	687b      	ldr	r3, [r7, #4]
}
 800ac48:	4618      	mov	r0, r3
 800ac4a:	370c      	adds	r7, #12
 800ac4c:	46bd      	mov	sp, r7
 800ac4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac52:	4770      	bx	lr
 800ac54:	20005618 	.word	0x20005618

0800ac58 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ac58:	b580      	push	{r7, lr}
 800ac5a:	b084      	sub	sp, #16
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	6078      	str	r0, [r7, #4]
 800ac60:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ac62:	4b21      	ldr	r3, [pc, #132]	; (800ace8 <prvAddCurrentTaskToDelayedList+0x90>)
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ac68:	4b20      	ldr	r3, [pc, #128]	; (800acec <prvAddCurrentTaskToDelayedList+0x94>)
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	3304      	adds	r3, #4
 800ac6e:	4618      	mov	r0, r3
 800ac70:	f7fe fa88 	bl	8009184 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac7a:	d10a      	bne.n	800ac92 <prvAddCurrentTaskToDelayedList+0x3a>
 800ac7c:	683b      	ldr	r3, [r7, #0]
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d007      	beq.n	800ac92 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ac82:	4b1a      	ldr	r3, [pc, #104]	; (800acec <prvAddCurrentTaskToDelayedList+0x94>)
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	3304      	adds	r3, #4
 800ac88:	4619      	mov	r1, r3
 800ac8a:	4819      	ldr	r0, [pc, #100]	; (800acf0 <prvAddCurrentTaskToDelayedList+0x98>)
 800ac8c:	f7fe fa1d 	bl	80090ca <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ac90:	e026      	b.n	800ace0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ac92:	68fa      	ldr	r2, [r7, #12]
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	4413      	add	r3, r2
 800ac98:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ac9a:	4b14      	ldr	r3, [pc, #80]	; (800acec <prvAddCurrentTaskToDelayedList+0x94>)
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	68ba      	ldr	r2, [r7, #8]
 800aca0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800aca2:	68ba      	ldr	r2, [r7, #8]
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	429a      	cmp	r2, r3
 800aca8:	d209      	bcs.n	800acbe <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800acaa:	4b12      	ldr	r3, [pc, #72]	; (800acf4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800acac:	681a      	ldr	r2, [r3, #0]
 800acae:	4b0f      	ldr	r3, [pc, #60]	; (800acec <prvAddCurrentTaskToDelayedList+0x94>)
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	3304      	adds	r3, #4
 800acb4:	4619      	mov	r1, r3
 800acb6:	4610      	mov	r0, r2
 800acb8:	f7fe fa2b 	bl	8009112 <vListInsert>
}
 800acbc:	e010      	b.n	800ace0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800acbe:	4b0e      	ldr	r3, [pc, #56]	; (800acf8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800acc0:	681a      	ldr	r2, [r3, #0]
 800acc2:	4b0a      	ldr	r3, [pc, #40]	; (800acec <prvAddCurrentTaskToDelayedList+0x94>)
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	3304      	adds	r3, #4
 800acc8:	4619      	mov	r1, r3
 800acca:	4610      	mov	r0, r2
 800accc:	f7fe fa21 	bl	8009112 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800acd0:	4b0a      	ldr	r3, [pc, #40]	; (800acfc <prvAddCurrentTaskToDelayedList+0xa4>)
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	68ba      	ldr	r2, [r7, #8]
 800acd6:	429a      	cmp	r2, r3
 800acd8:	d202      	bcs.n	800ace0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800acda:	4a08      	ldr	r2, [pc, #32]	; (800acfc <prvAddCurrentTaskToDelayedList+0xa4>)
 800acdc:	68bb      	ldr	r3, [r7, #8]
 800acde:	6013      	str	r3, [r2, #0]
}
 800ace0:	bf00      	nop
 800ace2:	3710      	adds	r7, #16
 800ace4:	46bd      	mov	sp, r7
 800ace6:	bd80      	pop	{r7, pc}
 800ace8:	20005af0 	.word	0x20005af0
 800acec:	20005618 	.word	0x20005618
 800acf0:	20005ad8 	.word	0x20005ad8
 800acf4:	20005aa8 	.word	0x20005aa8
 800acf8:	20005aa4 	.word	0x20005aa4
 800acfc:	20005b0c 	.word	0x20005b0c

0800ad00 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ad00:	b580      	push	{r7, lr}
 800ad02:	b08a      	sub	sp, #40	; 0x28
 800ad04:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800ad06:	2300      	movs	r3, #0
 800ad08:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800ad0a:	f000 fb07 	bl	800b31c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800ad0e:	4b1c      	ldr	r3, [pc, #112]	; (800ad80 <xTimerCreateTimerTask+0x80>)
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d021      	beq.n	800ad5a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ad16:	2300      	movs	r3, #0
 800ad18:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ad1a:	2300      	movs	r3, #0
 800ad1c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ad1e:	1d3a      	adds	r2, r7, #4
 800ad20:	f107 0108 	add.w	r1, r7, #8
 800ad24:	f107 030c 	add.w	r3, r7, #12
 800ad28:	4618      	mov	r0, r3
 800ad2a:	f7fd ff1b 	bl	8008b64 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ad2e:	6879      	ldr	r1, [r7, #4]
 800ad30:	68bb      	ldr	r3, [r7, #8]
 800ad32:	68fa      	ldr	r2, [r7, #12]
 800ad34:	9202      	str	r2, [sp, #8]
 800ad36:	9301      	str	r3, [sp, #4]
 800ad38:	2302      	movs	r3, #2
 800ad3a:	9300      	str	r3, [sp, #0]
 800ad3c:	2300      	movs	r3, #0
 800ad3e:	460a      	mov	r2, r1
 800ad40:	4910      	ldr	r1, [pc, #64]	; (800ad84 <xTimerCreateTimerTask+0x84>)
 800ad42:	4811      	ldr	r0, [pc, #68]	; (800ad88 <xTimerCreateTimerTask+0x88>)
 800ad44:	f7ff f828 	bl	8009d98 <xTaskCreateStatic>
 800ad48:	4603      	mov	r3, r0
 800ad4a:	4a10      	ldr	r2, [pc, #64]	; (800ad8c <xTimerCreateTimerTask+0x8c>)
 800ad4c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ad4e:	4b0f      	ldr	r3, [pc, #60]	; (800ad8c <xTimerCreateTimerTask+0x8c>)
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d001      	beq.n	800ad5a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ad56:	2301      	movs	r3, #1
 800ad58:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ad5a:	697b      	ldr	r3, [r7, #20]
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d10a      	bne.n	800ad76 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800ad60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad64:	f383 8811 	msr	BASEPRI, r3
 800ad68:	f3bf 8f6f 	isb	sy
 800ad6c:	f3bf 8f4f 	dsb	sy
 800ad70:	613b      	str	r3, [r7, #16]
}
 800ad72:	bf00      	nop
 800ad74:	e7fe      	b.n	800ad74 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800ad76:	697b      	ldr	r3, [r7, #20]
}
 800ad78:	4618      	mov	r0, r3
 800ad7a:	3718      	adds	r7, #24
 800ad7c:	46bd      	mov	sp, r7
 800ad7e:	bd80      	pop	{r7, pc}
 800ad80:	20005b48 	.word	0x20005b48
 800ad84:	0800cdc0 	.word	0x0800cdc0
 800ad88:	0800aec5 	.word	0x0800aec5
 800ad8c:	20005b4c 	.word	0x20005b4c

0800ad90 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ad90:	b580      	push	{r7, lr}
 800ad92:	b08a      	sub	sp, #40	; 0x28
 800ad94:	af00      	add	r7, sp, #0
 800ad96:	60f8      	str	r0, [r7, #12]
 800ad98:	60b9      	str	r1, [r7, #8]
 800ad9a:	607a      	str	r2, [r7, #4]
 800ad9c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ad9e:	2300      	movs	r3, #0
 800ada0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d10a      	bne.n	800adbe <xTimerGenericCommand+0x2e>
	__asm volatile
 800ada8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adac:	f383 8811 	msr	BASEPRI, r3
 800adb0:	f3bf 8f6f 	isb	sy
 800adb4:	f3bf 8f4f 	dsb	sy
 800adb8:	623b      	str	r3, [r7, #32]
}
 800adba:	bf00      	nop
 800adbc:	e7fe      	b.n	800adbc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800adbe:	4b1a      	ldr	r3, [pc, #104]	; (800ae28 <xTimerGenericCommand+0x98>)
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d02a      	beq.n	800ae1c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800adc6:	68bb      	ldr	r3, [r7, #8]
 800adc8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800add2:	68bb      	ldr	r3, [r7, #8]
 800add4:	2b05      	cmp	r3, #5
 800add6:	dc18      	bgt.n	800ae0a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800add8:	f7ff fe9a 	bl	800ab10 <xTaskGetSchedulerState>
 800addc:	4603      	mov	r3, r0
 800adde:	2b02      	cmp	r3, #2
 800ade0:	d109      	bne.n	800adf6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ade2:	4b11      	ldr	r3, [pc, #68]	; (800ae28 <xTimerGenericCommand+0x98>)
 800ade4:	6818      	ldr	r0, [r3, #0]
 800ade6:	f107 0110 	add.w	r1, r7, #16
 800adea:	2300      	movs	r3, #0
 800adec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800adee:	f7fe fba1 	bl	8009534 <xQueueGenericSend>
 800adf2:	6278      	str	r0, [r7, #36]	; 0x24
 800adf4:	e012      	b.n	800ae1c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800adf6:	4b0c      	ldr	r3, [pc, #48]	; (800ae28 <xTimerGenericCommand+0x98>)
 800adf8:	6818      	ldr	r0, [r3, #0]
 800adfa:	f107 0110 	add.w	r1, r7, #16
 800adfe:	2300      	movs	r3, #0
 800ae00:	2200      	movs	r2, #0
 800ae02:	f7fe fb97 	bl	8009534 <xQueueGenericSend>
 800ae06:	6278      	str	r0, [r7, #36]	; 0x24
 800ae08:	e008      	b.n	800ae1c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ae0a:	4b07      	ldr	r3, [pc, #28]	; (800ae28 <xTimerGenericCommand+0x98>)
 800ae0c:	6818      	ldr	r0, [r3, #0]
 800ae0e:	f107 0110 	add.w	r1, r7, #16
 800ae12:	2300      	movs	r3, #0
 800ae14:	683a      	ldr	r2, [r7, #0]
 800ae16:	f7fe fc8b 	bl	8009730 <xQueueGenericSendFromISR>
 800ae1a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ae1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ae1e:	4618      	mov	r0, r3
 800ae20:	3728      	adds	r7, #40	; 0x28
 800ae22:	46bd      	mov	sp, r7
 800ae24:	bd80      	pop	{r7, pc}
 800ae26:	bf00      	nop
 800ae28:	20005b48 	.word	0x20005b48

0800ae2c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ae2c:	b580      	push	{r7, lr}
 800ae2e:	b088      	sub	sp, #32
 800ae30:	af02      	add	r7, sp, #8
 800ae32:	6078      	str	r0, [r7, #4]
 800ae34:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ae36:	4b22      	ldr	r3, [pc, #136]	; (800aec0 <prvProcessExpiredTimer+0x94>)
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	68db      	ldr	r3, [r3, #12]
 800ae3c:	68db      	ldr	r3, [r3, #12]
 800ae3e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ae40:	697b      	ldr	r3, [r7, #20]
 800ae42:	3304      	adds	r3, #4
 800ae44:	4618      	mov	r0, r3
 800ae46:	f7fe f99d 	bl	8009184 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ae4a:	697b      	ldr	r3, [r7, #20]
 800ae4c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ae50:	f003 0304 	and.w	r3, r3, #4
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d022      	beq.n	800ae9e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ae58:	697b      	ldr	r3, [r7, #20]
 800ae5a:	699a      	ldr	r2, [r3, #24]
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	18d1      	adds	r1, r2, r3
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	683a      	ldr	r2, [r7, #0]
 800ae64:	6978      	ldr	r0, [r7, #20]
 800ae66:	f000 f8d1 	bl	800b00c <prvInsertTimerInActiveList>
 800ae6a:	4603      	mov	r3, r0
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d01f      	beq.n	800aeb0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ae70:	2300      	movs	r3, #0
 800ae72:	9300      	str	r3, [sp, #0]
 800ae74:	2300      	movs	r3, #0
 800ae76:	687a      	ldr	r2, [r7, #4]
 800ae78:	2100      	movs	r1, #0
 800ae7a:	6978      	ldr	r0, [r7, #20]
 800ae7c:	f7ff ff88 	bl	800ad90 <xTimerGenericCommand>
 800ae80:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800ae82:	693b      	ldr	r3, [r7, #16]
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d113      	bne.n	800aeb0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800ae88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae8c:	f383 8811 	msr	BASEPRI, r3
 800ae90:	f3bf 8f6f 	isb	sy
 800ae94:	f3bf 8f4f 	dsb	sy
 800ae98:	60fb      	str	r3, [r7, #12]
}
 800ae9a:	bf00      	nop
 800ae9c:	e7fe      	b.n	800ae9c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ae9e:	697b      	ldr	r3, [r7, #20]
 800aea0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aea4:	f023 0301 	bic.w	r3, r3, #1
 800aea8:	b2da      	uxtb	r2, r3
 800aeaa:	697b      	ldr	r3, [r7, #20]
 800aeac:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800aeb0:	697b      	ldr	r3, [r7, #20]
 800aeb2:	6a1b      	ldr	r3, [r3, #32]
 800aeb4:	6978      	ldr	r0, [r7, #20]
 800aeb6:	4798      	blx	r3
}
 800aeb8:	bf00      	nop
 800aeba:	3718      	adds	r7, #24
 800aebc:	46bd      	mov	sp, r7
 800aebe:	bd80      	pop	{r7, pc}
 800aec0:	20005b40 	.word	0x20005b40

0800aec4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800aec4:	b580      	push	{r7, lr}
 800aec6:	b084      	sub	sp, #16
 800aec8:	af00      	add	r7, sp, #0
 800aeca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800aecc:	f107 0308 	add.w	r3, r7, #8
 800aed0:	4618      	mov	r0, r3
 800aed2:	f000 f857 	bl	800af84 <prvGetNextExpireTime>
 800aed6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800aed8:	68bb      	ldr	r3, [r7, #8]
 800aeda:	4619      	mov	r1, r3
 800aedc:	68f8      	ldr	r0, [r7, #12]
 800aede:	f000 f803 	bl	800aee8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800aee2:	f000 f8d5 	bl	800b090 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800aee6:	e7f1      	b.n	800aecc <prvTimerTask+0x8>

0800aee8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800aee8:	b580      	push	{r7, lr}
 800aeea:	b084      	sub	sp, #16
 800aeec:	af00      	add	r7, sp, #0
 800aeee:	6078      	str	r0, [r7, #4]
 800aef0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800aef2:	f7ff f98d 	bl	800a210 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800aef6:	f107 0308 	add.w	r3, r7, #8
 800aefa:	4618      	mov	r0, r3
 800aefc:	f000 f866 	bl	800afcc <prvSampleTimeNow>
 800af00:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800af02:	68bb      	ldr	r3, [r7, #8]
 800af04:	2b00      	cmp	r3, #0
 800af06:	d130      	bne.n	800af6a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800af08:	683b      	ldr	r3, [r7, #0]
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d10a      	bne.n	800af24 <prvProcessTimerOrBlockTask+0x3c>
 800af0e:	687a      	ldr	r2, [r7, #4]
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	429a      	cmp	r2, r3
 800af14:	d806      	bhi.n	800af24 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800af16:	f7ff f989 	bl	800a22c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800af1a:	68f9      	ldr	r1, [r7, #12]
 800af1c:	6878      	ldr	r0, [r7, #4]
 800af1e:	f7ff ff85 	bl	800ae2c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800af22:	e024      	b.n	800af6e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800af24:	683b      	ldr	r3, [r7, #0]
 800af26:	2b00      	cmp	r3, #0
 800af28:	d008      	beq.n	800af3c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800af2a:	4b13      	ldr	r3, [pc, #76]	; (800af78 <prvProcessTimerOrBlockTask+0x90>)
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	2b00      	cmp	r3, #0
 800af32:	d101      	bne.n	800af38 <prvProcessTimerOrBlockTask+0x50>
 800af34:	2301      	movs	r3, #1
 800af36:	e000      	b.n	800af3a <prvProcessTimerOrBlockTask+0x52>
 800af38:	2300      	movs	r3, #0
 800af3a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800af3c:	4b0f      	ldr	r3, [pc, #60]	; (800af7c <prvProcessTimerOrBlockTask+0x94>)
 800af3e:	6818      	ldr	r0, [r3, #0]
 800af40:	687a      	ldr	r2, [r7, #4]
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	1ad3      	subs	r3, r2, r3
 800af46:	683a      	ldr	r2, [r7, #0]
 800af48:	4619      	mov	r1, r3
 800af4a:	f7fe fef1 	bl	8009d30 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800af4e:	f7ff f96d 	bl	800a22c <xTaskResumeAll>
 800af52:	4603      	mov	r3, r0
 800af54:	2b00      	cmp	r3, #0
 800af56:	d10a      	bne.n	800af6e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800af58:	4b09      	ldr	r3, [pc, #36]	; (800af80 <prvProcessTimerOrBlockTask+0x98>)
 800af5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af5e:	601a      	str	r2, [r3, #0]
 800af60:	f3bf 8f4f 	dsb	sy
 800af64:	f3bf 8f6f 	isb	sy
}
 800af68:	e001      	b.n	800af6e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800af6a:	f7ff f95f 	bl	800a22c <xTaskResumeAll>
}
 800af6e:	bf00      	nop
 800af70:	3710      	adds	r7, #16
 800af72:	46bd      	mov	sp, r7
 800af74:	bd80      	pop	{r7, pc}
 800af76:	bf00      	nop
 800af78:	20005b44 	.word	0x20005b44
 800af7c:	20005b48 	.word	0x20005b48
 800af80:	e000ed04 	.word	0xe000ed04

0800af84 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800af84:	b480      	push	{r7}
 800af86:	b085      	sub	sp, #20
 800af88:	af00      	add	r7, sp, #0
 800af8a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800af8c:	4b0e      	ldr	r3, [pc, #56]	; (800afc8 <prvGetNextExpireTime+0x44>)
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	2b00      	cmp	r3, #0
 800af94:	d101      	bne.n	800af9a <prvGetNextExpireTime+0x16>
 800af96:	2201      	movs	r2, #1
 800af98:	e000      	b.n	800af9c <prvGetNextExpireTime+0x18>
 800af9a:	2200      	movs	r2, #0
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d105      	bne.n	800afb4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800afa8:	4b07      	ldr	r3, [pc, #28]	; (800afc8 <prvGetNextExpireTime+0x44>)
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	68db      	ldr	r3, [r3, #12]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	60fb      	str	r3, [r7, #12]
 800afb2:	e001      	b.n	800afb8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800afb4:	2300      	movs	r3, #0
 800afb6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800afb8:	68fb      	ldr	r3, [r7, #12]
}
 800afba:	4618      	mov	r0, r3
 800afbc:	3714      	adds	r7, #20
 800afbe:	46bd      	mov	sp, r7
 800afc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc4:	4770      	bx	lr
 800afc6:	bf00      	nop
 800afc8:	20005b40 	.word	0x20005b40

0800afcc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800afcc:	b580      	push	{r7, lr}
 800afce:	b084      	sub	sp, #16
 800afd0:	af00      	add	r7, sp, #0
 800afd2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800afd4:	f7ff f9c8 	bl	800a368 <xTaskGetTickCount>
 800afd8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800afda:	4b0b      	ldr	r3, [pc, #44]	; (800b008 <prvSampleTimeNow+0x3c>)
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	68fa      	ldr	r2, [r7, #12]
 800afe0:	429a      	cmp	r2, r3
 800afe2:	d205      	bcs.n	800aff0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800afe4:	f000 f936 	bl	800b254 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	2201      	movs	r2, #1
 800afec:	601a      	str	r2, [r3, #0]
 800afee:	e002      	b.n	800aff6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	2200      	movs	r2, #0
 800aff4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800aff6:	4a04      	ldr	r2, [pc, #16]	; (800b008 <prvSampleTimeNow+0x3c>)
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800affc:	68fb      	ldr	r3, [r7, #12]
}
 800affe:	4618      	mov	r0, r3
 800b000:	3710      	adds	r7, #16
 800b002:	46bd      	mov	sp, r7
 800b004:	bd80      	pop	{r7, pc}
 800b006:	bf00      	nop
 800b008:	20005b50 	.word	0x20005b50

0800b00c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b00c:	b580      	push	{r7, lr}
 800b00e:	b086      	sub	sp, #24
 800b010:	af00      	add	r7, sp, #0
 800b012:	60f8      	str	r0, [r7, #12]
 800b014:	60b9      	str	r1, [r7, #8]
 800b016:	607a      	str	r2, [r7, #4]
 800b018:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b01a:	2300      	movs	r3, #0
 800b01c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	68ba      	ldr	r2, [r7, #8]
 800b022:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	68fa      	ldr	r2, [r7, #12]
 800b028:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b02a:	68ba      	ldr	r2, [r7, #8]
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	429a      	cmp	r2, r3
 800b030:	d812      	bhi.n	800b058 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b032:	687a      	ldr	r2, [r7, #4]
 800b034:	683b      	ldr	r3, [r7, #0]
 800b036:	1ad2      	subs	r2, r2, r3
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	699b      	ldr	r3, [r3, #24]
 800b03c:	429a      	cmp	r2, r3
 800b03e:	d302      	bcc.n	800b046 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b040:	2301      	movs	r3, #1
 800b042:	617b      	str	r3, [r7, #20]
 800b044:	e01b      	b.n	800b07e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b046:	4b10      	ldr	r3, [pc, #64]	; (800b088 <prvInsertTimerInActiveList+0x7c>)
 800b048:	681a      	ldr	r2, [r3, #0]
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	3304      	adds	r3, #4
 800b04e:	4619      	mov	r1, r3
 800b050:	4610      	mov	r0, r2
 800b052:	f7fe f85e 	bl	8009112 <vListInsert>
 800b056:	e012      	b.n	800b07e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b058:	687a      	ldr	r2, [r7, #4]
 800b05a:	683b      	ldr	r3, [r7, #0]
 800b05c:	429a      	cmp	r2, r3
 800b05e:	d206      	bcs.n	800b06e <prvInsertTimerInActiveList+0x62>
 800b060:	68ba      	ldr	r2, [r7, #8]
 800b062:	683b      	ldr	r3, [r7, #0]
 800b064:	429a      	cmp	r2, r3
 800b066:	d302      	bcc.n	800b06e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b068:	2301      	movs	r3, #1
 800b06a:	617b      	str	r3, [r7, #20]
 800b06c:	e007      	b.n	800b07e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b06e:	4b07      	ldr	r3, [pc, #28]	; (800b08c <prvInsertTimerInActiveList+0x80>)
 800b070:	681a      	ldr	r2, [r3, #0]
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	3304      	adds	r3, #4
 800b076:	4619      	mov	r1, r3
 800b078:	4610      	mov	r0, r2
 800b07a:	f7fe f84a 	bl	8009112 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b07e:	697b      	ldr	r3, [r7, #20]
}
 800b080:	4618      	mov	r0, r3
 800b082:	3718      	adds	r7, #24
 800b084:	46bd      	mov	sp, r7
 800b086:	bd80      	pop	{r7, pc}
 800b088:	20005b44 	.word	0x20005b44
 800b08c:	20005b40 	.word	0x20005b40

0800b090 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b090:	b580      	push	{r7, lr}
 800b092:	b08e      	sub	sp, #56	; 0x38
 800b094:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b096:	e0ca      	b.n	800b22e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	da18      	bge.n	800b0d0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b09e:	1d3b      	adds	r3, r7, #4
 800b0a0:	3304      	adds	r3, #4
 800b0a2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b0a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d10a      	bne.n	800b0c0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800b0aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0ae:	f383 8811 	msr	BASEPRI, r3
 800b0b2:	f3bf 8f6f 	isb	sy
 800b0b6:	f3bf 8f4f 	dsb	sy
 800b0ba:	61fb      	str	r3, [r7, #28]
}
 800b0bc:	bf00      	nop
 800b0be:	e7fe      	b.n	800b0be <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b0c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b0c6:	6850      	ldr	r0, [r2, #4]
 800b0c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b0ca:	6892      	ldr	r2, [r2, #8]
 800b0cc:	4611      	mov	r1, r2
 800b0ce:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	f2c0 80aa 	blt.w	800b22c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b0dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0de:	695b      	ldr	r3, [r3, #20]
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d004      	beq.n	800b0ee <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b0e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0e6:	3304      	adds	r3, #4
 800b0e8:	4618      	mov	r0, r3
 800b0ea:	f7fe f84b 	bl	8009184 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b0ee:	463b      	mov	r3, r7
 800b0f0:	4618      	mov	r0, r3
 800b0f2:	f7ff ff6b 	bl	800afcc <prvSampleTimeNow>
 800b0f6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	2b09      	cmp	r3, #9
 800b0fc:	f200 8097 	bhi.w	800b22e <prvProcessReceivedCommands+0x19e>
 800b100:	a201      	add	r2, pc, #4	; (adr r2, 800b108 <prvProcessReceivedCommands+0x78>)
 800b102:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b106:	bf00      	nop
 800b108:	0800b131 	.word	0x0800b131
 800b10c:	0800b131 	.word	0x0800b131
 800b110:	0800b131 	.word	0x0800b131
 800b114:	0800b1a5 	.word	0x0800b1a5
 800b118:	0800b1b9 	.word	0x0800b1b9
 800b11c:	0800b203 	.word	0x0800b203
 800b120:	0800b131 	.word	0x0800b131
 800b124:	0800b131 	.word	0x0800b131
 800b128:	0800b1a5 	.word	0x0800b1a5
 800b12c:	0800b1b9 	.word	0x0800b1b9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b132:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b136:	f043 0301 	orr.w	r3, r3, #1
 800b13a:	b2da      	uxtb	r2, r3
 800b13c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b13e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b142:	68ba      	ldr	r2, [r7, #8]
 800b144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b146:	699b      	ldr	r3, [r3, #24]
 800b148:	18d1      	adds	r1, r2, r3
 800b14a:	68bb      	ldr	r3, [r7, #8]
 800b14c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b14e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b150:	f7ff ff5c 	bl	800b00c <prvInsertTimerInActiveList>
 800b154:	4603      	mov	r3, r0
 800b156:	2b00      	cmp	r3, #0
 800b158:	d069      	beq.n	800b22e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b15a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b15c:	6a1b      	ldr	r3, [r3, #32]
 800b15e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b160:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b164:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b168:	f003 0304 	and.w	r3, r3, #4
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d05e      	beq.n	800b22e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b170:	68ba      	ldr	r2, [r7, #8]
 800b172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b174:	699b      	ldr	r3, [r3, #24]
 800b176:	441a      	add	r2, r3
 800b178:	2300      	movs	r3, #0
 800b17a:	9300      	str	r3, [sp, #0]
 800b17c:	2300      	movs	r3, #0
 800b17e:	2100      	movs	r1, #0
 800b180:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b182:	f7ff fe05 	bl	800ad90 <xTimerGenericCommand>
 800b186:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b188:	6a3b      	ldr	r3, [r7, #32]
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d14f      	bne.n	800b22e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800b18e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b192:	f383 8811 	msr	BASEPRI, r3
 800b196:	f3bf 8f6f 	isb	sy
 800b19a:	f3bf 8f4f 	dsb	sy
 800b19e:	61bb      	str	r3, [r7, #24]
}
 800b1a0:	bf00      	nop
 800b1a2:	e7fe      	b.n	800b1a2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b1a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b1aa:	f023 0301 	bic.w	r3, r3, #1
 800b1ae:	b2da      	uxtb	r2, r3
 800b1b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800b1b6:	e03a      	b.n	800b22e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b1b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b1be:	f043 0301 	orr.w	r3, r3, #1
 800b1c2:	b2da      	uxtb	r2, r3
 800b1c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b1ca:	68ba      	ldr	r2, [r7, #8]
 800b1cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1ce:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b1d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1d2:	699b      	ldr	r3, [r3, #24]
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d10a      	bne.n	800b1ee <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800b1d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1dc:	f383 8811 	msr	BASEPRI, r3
 800b1e0:	f3bf 8f6f 	isb	sy
 800b1e4:	f3bf 8f4f 	dsb	sy
 800b1e8:	617b      	str	r3, [r7, #20]
}
 800b1ea:	bf00      	nop
 800b1ec:	e7fe      	b.n	800b1ec <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b1ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1f0:	699a      	ldr	r2, [r3, #24]
 800b1f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1f4:	18d1      	adds	r1, r2, r3
 800b1f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b1fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b1fc:	f7ff ff06 	bl	800b00c <prvInsertTimerInActiveList>
					break;
 800b200:	e015      	b.n	800b22e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b204:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b208:	f003 0302 	and.w	r3, r3, #2
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d103      	bne.n	800b218 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800b210:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b212:	f000 fbf5 	bl	800ba00 <vPortFree>
 800b216:	e00a      	b.n	800b22e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b21a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b21e:	f023 0301 	bic.w	r3, r3, #1
 800b222:	b2da      	uxtb	r2, r3
 800b224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b226:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b22a:	e000      	b.n	800b22e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800b22c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b22e:	4b08      	ldr	r3, [pc, #32]	; (800b250 <prvProcessReceivedCommands+0x1c0>)
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	1d39      	adds	r1, r7, #4
 800b234:	2200      	movs	r2, #0
 800b236:	4618      	mov	r0, r3
 800b238:	f7fe fb12 	bl	8009860 <xQueueReceive>
 800b23c:	4603      	mov	r3, r0
 800b23e:	2b00      	cmp	r3, #0
 800b240:	f47f af2a 	bne.w	800b098 <prvProcessReceivedCommands+0x8>
	}
}
 800b244:	bf00      	nop
 800b246:	bf00      	nop
 800b248:	3730      	adds	r7, #48	; 0x30
 800b24a:	46bd      	mov	sp, r7
 800b24c:	bd80      	pop	{r7, pc}
 800b24e:	bf00      	nop
 800b250:	20005b48 	.word	0x20005b48

0800b254 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b254:	b580      	push	{r7, lr}
 800b256:	b088      	sub	sp, #32
 800b258:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b25a:	e048      	b.n	800b2ee <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b25c:	4b2d      	ldr	r3, [pc, #180]	; (800b314 <prvSwitchTimerLists+0xc0>)
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	68db      	ldr	r3, [r3, #12]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b266:	4b2b      	ldr	r3, [pc, #172]	; (800b314 <prvSwitchTimerLists+0xc0>)
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	68db      	ldr	r3, [r3, #12]
 800b26c:	68db      	ldr	r3, [r3, #12]
 800b26e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	3304      	adds	r3, #4
 800b274:	4618      	mov	r0, r3
 800b276:	f7fd ff85 	bl	8009184 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	6a1b      	ldr	r3, [r3, #32]
 800b27e:	68f8      	ldr	r0, [r7, #12]
 800b280:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b288:	f003 0304 	and.w	r3, r3, #4
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d02e      	beq.n	800b2ee <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	699b      	ldr	r3, [r3, #24]
 800b294:	693a      	ldr	r2, [r7, #16]
 800b296:	4413      	add	r3, r2
 800b298:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b29a:	68ba      	ldr	r2, [r7, #8]
 800b29c:	693b      	ldr	r3, [r7, #16]
 800b29e:	429a      	cmp	r2, r3
 800b2a0:	d90e      	bls.n	800b2c0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	68ba      	ldr	r2, [r7, #8]
 800b2a6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	68fa      	ldr	r2, [r7, #12]
 800b2ac:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b2ae:	4b19      	ldr	r3, [pc, #100]	; (800b314 <prvSwitchTimerLists+0xc0>)
 800b2b0:	681a      	ldr	r2, [r3, #0]
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	3304      	adds	r3, #4
 800b2b6:	4619      	mov	r1, r3
 800b2b8:	4610      	mov	r0, r2
 800b2ba:	f7fd ff2a 	bl	8009112 <vListInsert>
 800b2be:	e016      	b.n	800b2ee <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b2c0:	2300      	movs	r3, #0
 800b2c2:	9300      	str	r3, [sp, #0]
 800b2c4:	2300      	movs	r3, #0
 800b2c6:	693a      	ldr	r2, [r7, #16]
 800b2c8:	2100      	movs	r1, #0
 800b2ca:	68f8      	ldr	r0, [r7, #12]
 800b2cc:	f7ff fd60 	bl	800ad90 <xTimerGenericCommand>
 800b2d0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d10a      	bne.n	800b2ee <prvSwitchTimerLists+0x9a>
	__asm volatile
 800b2d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2dc:	f383 8811 	msr	BASEPRI, r3
 800b2e0:	f3bf 8f6f 	isb	sy
 800b2e4:	f3bf 8f4f 	dsb	sy
 800b2e8:	603b      	str	r3, [r7, #0]
}
 800b2ea:	bf00      	nop
 800b2ec:	e7fe      	b.n	800b2ec <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b2ee:	4b09      	ldr	r3, [pc, #36]	; (800b314 <prvSwitchTimerLists+0xc0>)
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d1b1      	bne.n	800b25c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b2f8:	4b06      	ldr	r3, [pc, #24]	; (800b314 <prvSwitchTimerLists+0xc0>)
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b2fe:	4b06      	ldr	r3, [pc, #24]	; (800b318 <prvSwitchTimerLists+0xc4>)
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	4a04      	ldr	r2, [pc, #16]	; (800b314 <prvSwitchTimerLists+0xc0>)
 800b304:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b306:	4a04      	ldr	r2, [pc, #16]	; (800b318 <prvSwitchTimerLists+0xc4>)
 800b308:	697b      	ldr	r3, [r7, #20]
 800b30a:	6013      	str	r3, [r2, #0]
}
 800b30c:	bf00      	nop
 800b30e:	3718      	adds	r7, #24
 800b310:	46bd      	mov	sp, r7
 800b312:	bd80      	pop	{r7, pc}
 800b314:	20005b40 	.word	0x20005b40
 800b318:	20005b44 	.word	0x20005b44

0800b31c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b31c:	b580      	push	{r7, lr}
 800b31e:	b082      	sub	sp, #8
 800b320:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b322:	f000 f987 	bl	800b634 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b326:	4b15      	ldr	r3, [pc, #84]	; (800b37c <prvCheckForValidListAndQueue+0x60>)
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d120      	bne.n	800b370 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b32e:	4814      	ldr	r0, [pc, #80]	; (800b380 <prvCheckForValidListAndQueue+0x64>)
 800b330:	f7fd fe9e 	bl	8009070 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b334:	4813      	ldr	r0, [pc, #76]	; (800b384 <prvCheckForValidListAndQueue+0x68>)
 800b336:	f7fd fe9b 	bl	8009070 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b33a:	4b13      	ldr	r3, [pc, #76]	; (800b388 <prvCheckForValidListAndQueue+0x6c>)
 800b33c:	4a10      	ldr	r2, [pc, #64]	; (800b380 <prvCheckForValidListAndQueue+0x64>)
 800b33e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b340:	4b12      	ldr	r3, [pc, #72]	; (800b38c <prvCheckForValidListAndQueue+0x70>)
 800b342:	4a10      	ldr	r2, [pc, #64]	; (800b384 <prvCheckForValidListAndQueue+0x68>)
 800b344:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b346:	2300      	movs	r3, #0
 800b348:	9300      	str	r3, [sp, #0]
 800b34a:	4b11      	ldr	r3, [pc, #68]	; (800b390 <prvCheckForValidListAndQueue+0x74>)
 800b34c:	4a11      	ldr	r2, [pc, #68]	; (800b394 <prvCheckForValidListAndQueue+0x78>)
 800b34e:	2110      	movs	r1, #16
 800b350:	200a      	movs	r0, #10
 800b352:	f7fd ffa9 	bl	80092a8 <xQueueGenericCreateStatic>
 800b356:	4603      	mov	r3, r0
 800b358:	4a08      	ldr	r2, [pc, #32]	; (800b37c <prvCheckForValidListAndQueue+0x60>)
 800b35a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b35c:	4b07      	ldr	r3, [pc, #28]	; (800b37c <prvCheckForValidListAndQueue+0x60>)
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	2b00      	cmp	r3, #0
 800b362:	d005      	beq.n	800b370 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b364:	4b05      	ldr	r3, [pc, #20]	; (800b37c <prvCheckForValidListAndQueue+0x60>)
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	490b      	ldr	r1, [pc, #44]	; (800b398 <prvCheckForValidListAndQueue+0x7c>)
 800b36a:	4618      	mov	r0, r3
 800b36c:	f7fe fc8c 	bl	8009c88 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b370:	f000 f990 	bl	800b694 <vPortExitCritical>
}
 800b374:	bf00      	nop
 800b376:	46bd      	mov	sp, r7
 800b378:	bd80      	pop	{r7, pc}
 800b37a:	bf00      	nop
 800b37c:	20005b48 	.word	0x20005b48
 800b380:	20005b18 	.word	0x20005b18
 800b384:	20005b2c 	.word	0x20005b2c
 800b388:	20005b40 	.word	0x20005b40
 800b38c:	20005b44 	.word	0x20005b44
 800b390:	20005bf4 	.word	0x20005bf4
 800b394:	20005b54 	.word	0x20005b54
 800b398:	0800cdc8 	.word	0x0800cdc8

0800b39c <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800b39c:	b580      	push	{r7, lr}
 800b39e:	b08a      	sub	sp, #40	; 0x28
 800b3a0:	af00      	add	r7, sp, #0
 800b3a2:	60f8      	str	r0, [r7, #12]
 800b3a4:	60b9      	str	r1, [r7, #8]
 800b3a6:	607a      	str	r2, [r7, #4]
 800b3a8:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 800b3aa:	f06f 0301 	mvn.w	r3, #1
 800b3ae:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 800b3b4:	68bb      	ldr	r3, [r7, #8]
 800b3b6:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b3bc:	4b06      	ldr	r3, [pc, #24]	; (800b3d8 <xTimerPendFunctionCallFromISR+0x3c>)
 800b3be:	6818      	ldr	r0, [r3, #0]
 800b3c0:	f107 0114 	add.w	r1, r7, #20
 800b3c4:	2300      	movs	r3, #0
 800b3c6:	683a      	ldr	r2, [r7, #0]
 800b3c8:	f7fe f9b2 	bl	8009730 <xQueueGenericSendFromISR>
 800b3cc:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 800b3ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800b3d0:	4618      	mov	r0, r3
 800b3d2:	3728      	adds	r7, #40	; 0x28
 800b3d4:	46bd      	mov	sp, r7
 800b3d6:	bd80      	pop	{r7, pc}
 800b3d8:	20005b48 	.word	0x20005b48

0800b3dc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b3dc:	b480      	push	{r7}
 800b3de:	b085      	sub	sp, #20
 800b3e0:	af00      	add	r7, sp, #0
 800b3e2:	60f8      	str	r0, [r7, #12]
 800b3e4:	60b9      	str	r1, [r7, #8]
 800b3e6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	3b04      	subs	r3, #4
 800b3ec:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b3f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	3b04      	subs	r3, #4
 800b3fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b3fc:	68bb      	ldr	r3, [r7, #8]
 800b3fe:	f023 0201 	bic.w	r2, r3, #1
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	3b04      	subs	r3, #4
 800b40a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b40c:	4a0c      	ldr	r2, [pc, #48]	; (800b440 <pxPortInitialiseStack+0x64>)
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	3b14      	subs	r3, #20
 800b416:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b418:	687a      	ldr	r2, [r7, #4]
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	3b04      	subs	r3, #4
 800b422:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	f06f 0202 	mvn.w	r2, #2
 800b42a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	3b20      	subs	r3, #32
 800b430:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b432:	68fb      	ldr	r3, [r7, #12]
}
 800b434:	4618      	mov	r0, r3
 800b436:	3714      	adds	r7, #20
 800b438:	46bd      	mov	sp, r7
 800b43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b43e:	4770      	bx	lr
 800b440:	0800b445 	.word	0x0800b445

0800b444 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b444:	b480      	push	{r7}
 800b446:	b085      	sub	sp, #20
 800b448:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b44a:	2300      	movs	r3, #0
 800b44c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b44e:	4b12      	ldr	r3, [pc, #72]	; (800b498 <prvTaskExitError+0x54>)
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b456:	d00a      	beq.n	800b46e <prvTaskExitError+0x2a>
	__asm volatile
 800b458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b45c:	f383 8811 	msr	BASEPRI, r3
 800b460:	f3bf 8f6f 	isb	sy
 800b464:	f3bf 8f4f 	dsb	sy
 800b468:	60fb      	str	r3, [r7, #12]
}
 800b46a:	bf00      	nop
 800b46c:	e7fe      	b.n	800b46c <prvTaskExitError+0x28>
	__asm volatile
 800b46e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b472:	f383 8811 	msr	BASEPRI, r3
 800b476:	f3bf 8f6f 	isb	sy
 800b47a:	f3bf 8f4f 	dsb	sy
 800b47e:	60bb      	str	r3, [r7, #8]
}
 800b480:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b482:	bf00      	nop
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	2b00      	cmp	r3, #0
 800b488:	d0fc      	beq.n	800b484 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b48a:	bf00      	nop
 800b48c:	bf00      	nop
 800b48e:	3714      	adds	r7, #20
 800b490:	46bd      	mov	sp, r7
 800b492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b496:	4770      	bx	lr
 800b498:	20000014 	.word	0x20000014
 800b49c:	00000000 	.word	0x00000000

0800b4a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b4a0:	4b07      	ldr	r3, [pc, #28]	; (800b4c0 <pxCurrentTCBConst2>)
 800b4a2:	6819      	ldr	r1, [r3, #0]
 800b4a4:	6808      	ldr	r0, [r1, #0]
 800b4a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4aa:	f380 8809 	msr	PSP, r0
 800b4ae:	f3bf 8f6f 	isb	sy
 800b4b2:	f04f 0000 	mov.w	r0, #0
 800b4b6:	f380 8811 	msr	BASEPRI, r0
 800b4ba:	4770      	bx	lr
 800b4bc:	f3af 8000 	nop.w

0800b4c0 <pxCurrentTCBConst2>:
 800b4c0:	20005618 	.word	0x20005618
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b4c4:	bf00      	nop
 800b4c6:	bf00      	nop

0800b4c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b4c8:	4808      	ldr	r0, [pc, #32]	; (800b4ec <prvPortStartFirstTask+0x24>)
 800b4ca:	6800      	ldr	r0, [r0, #0]
 800b4cc:	6800      	ldr	r0, [r0, #0]
 800b4ce:	f380 8808 	msr	MSP, r0
 800b4d2:	f04f 0000 	mov.w	r0, #0
 800b4d6:	f380 8814 	msr	CONTROL, r0
 800b4da:	b662      	cpsie	i
 800b4dc:	b661      	cpsie	f
 800b4de:	f3bf 8f4f 	dsb	sy
 800b4e2:	f3bf 8f6f 	isb	sy
 800b4e6:	df00      	svc	0
 800b4e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b4ea:	bf00      	nop
 800b4ec:	e000ed08 	.word	0xe000ed08

0800b4f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b4f0:	b580      	push	{r7, lr}
 800b4f2:	b086      	sub	sp, #24
 800b4f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b4f6:	4b46      	ldr	r3, [pc, #280]	; (800b610 <xPortStartScheduler+0x120>)
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	4a46      	ldr	r2, [pc, #280]	; (800b614 <xPortStartScheduler+0x124>)
 800b4fc:	4293      	cmp	r3, r2
 800b4fe:	d10a      	bne.n	800b516 <xPortStartScheduler+0x26>
	__asm volatile
 800b500:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b504:	f383 8811 	msr	BASEPRI, r3
 800b508:	f3bf 8f6f 	isb	sy
 800b50c:	f3bf 8f4f 	dsb	sy
 800b510:	613b      	str	r3, [r7, #16]
}
 800b512:	bf00      	nop
 800b514:	e7fe      	b.n	800b514 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b516:	4b3e      	ldr	r3, [pc, #248]	; (800b610 <xPortStartScheduler+0x120>)
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	4a3f      	ldr	r2, [pc, #252]	; (800b618 <xPortStartScheduler+0x128>)
 800b51c:	4293      	cmp	r3, r2
 800b51e:	d10a      	bne.n	800b536 <xPortStartScheduler+0x46>
	__asm volatile
 800b520:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b524:	f383 8811 	msr	BASEPRI, r3
 800b528:	f3bf 8f6f 	isb	sy
 800b52c:	f3bf 8f4f 	dsb	sy
 800b530:	60fb      	str	r3, [r7, #12]
}
 800b532:	bf00      	nop
 800b534:	e7fe      	b.n	800b534 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b536:	4b39      	ldr	r3, [pc, #228]	; (800b61c <xPortStartScheduler+0x12c>)
 800b538:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b53a:	697b      	ldr	r3, [r7, #20]
 800b53c:	781b      	ldrb	r3, [r3, #0]
 800b53e:	b2db      	uxtb	r3, r3
 800b540:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b542:	697b      	ldr	r3, [r7, #20]
 800b544:	22ff      	movs	r2, #255	; 0xff
 800b546:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b548:	697b      	ldr	r3, [r7, #20]
 800b54a:	781b      	ldrb	r3, [r3, #0]
 800b54c:	b2db      	uxtb	r3, r3
 800b54e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b550:	78fb      	ldrb	r3, [r7, #3]
 800b552:	b2db      	uxtb	r3, r3
 800b554:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b558:	b2da      	uxtb	r2, r3
 800b55a:	4b31      	ldr	r3, [pc, #196]	; (800b620 <xPortStartScheduler+0x130>)
 800b55c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b55e:	4b31      	ldr	r3, [pc, #196]	; (800b624 <xPortStartScheduler+0x134>)
 800b560:	2207      	movs	r2, #7
 800b562:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b564:	e009      	b.n	800b57a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800b566:	4b2f      	ldr	r3, [pc, #188]	; (800b624 <xPortStartScheduler+0x134>)
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	3b01      	subs	r3, #1
 800b56c:	4a2d      	ldr	r2, [pc, #180]	; (800b624 <xPortStartScheduler+0x134>)
 800b56e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b570:	78fb      	ldrb	r3, [r7, #3]
 800b572:	b2db      	uxtb	r3, r3
 800b574:	005b      	lsls	r3, r3, #1
 800b576:	b2db      	uxtb	r3, r3
 800b578:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b57a:	78fb      	ldrb	r3, [r7, #3]
 800b57c:	b2db      	uxtb	r3, r3
 800b57e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b582:	2b80      	cmp	r3, #128	; 0x80
 800b584:	d0ef      	beq.n	800b566 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b586:	4b27      	ldr	r3, [pc, #156]	; (800b624 <xPortStartScheduler+0x134>)
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	f1c3 0307 	rsb	r3, r3, #7
 800b58e:	2b04      	cmp	r3, #4
 800b590:	d00a      	beq.n	800b5a8 <xPortStartScheduler+0xb8>
	__asm volatile
 800b592:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b596:	f383 8811 	msr	BASEPRI, r3
 800b59a:	f3bf 8f6f 	isb	sy
 800b59e:	f3bf 8f4f 	dsb	sy
 800b5a2:	60bb      	str	r3, [r7, #8]
}
 800b5a4:	bf00      	nop
 800b5a6:	e7fe      	b.n	800b5a6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b5a8:	4b1e      	ldr	r3, [pc, #120]	; (800b624 <xPortStartScheduler+0x134>)
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	021b      	lsls	r3, r3, #8
 800b5ae:	4a1d      	ldr	r2, [pc, #116]	; (800b624 <xPortStartScheduler+0x134>)
 800b5b0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b5b2:	4b1c      	ldr	r3, [pc, #112]	; (800b624 <xPortStartScheduler+0x134>)
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b5ba:	4a1a      	ldr	r2, [pc, #104]	; (800b624 <xPortStartScheduler+0x134>)
 800b5bc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	b2da      	uxtb	r2, r3
 800b5c2:	697b      	ldr	r3, [r7, #20]
 800b5c4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b5c6:	4b18      	ldr	r3, [pc, #96]	; (800b628 <xPortStartScheduler+0x138>)
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	4a17      	ldr	r2, [pc, #92]	; (800b628 <xPortStartScheduler+0x138>)
 800b5cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b5d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b5d2:	4b15      	ldr	r3, [pc, #84]	; (800b628 <xPortStartScheduler+0x138>)
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	4a14      	ldr	r2, [pc, #80]	; (800b628 <xPortStartScheduler+0x138>)
 800b5d8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b5dc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b5de:	f000 f8dd 	bl	800b79c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b5e2:	4b12      	ldr	r3, [pc, #72]	; (800b62c <xPortStartScheduler+0x13c>)
 800b5e4:	2200      	movs	r2, #0
 800b5e6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b5e8:	f000 f8fc 	bl	800b7e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b5ec:	4b10      	ldr	r3, [pc, #64]	; (800b630 <xPortStartScheduler+0x140>)
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	4a0f      	ldr	r2, [pc, #60]	; (800b630 <xPortStartScheduler+0x140>)
 800b5f2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b5f6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b5f8:	f7ff ff66 	bl	800b4c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b5fc:	f7fe ff7e 	bl	800a4fc <vTaskSwitchContext>
	prvTaskExitError();
 800b600:	f7ff ff20 	bl	800b444 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b604:	2300      	movs	r3, #0
}
 800b606:	4618      	mov	r0, r3
 800b608:	3718      	adds	r7, #24
 800b60a:	46bd      	mov	sp, r7
 800b60c:	bd80      	pop	{r7, pc}
 800b60e:	bf00      	nop
 800b610:	e000ed00 	.word	0xe000ed00
 800b614:	410fc271 	.word	0x410fc271
 800b618:	410fc270 	.word	0x410fc270
 800b61c:	e000e400 	.word	0xe000e400
 800b620:	20005c44 	.word	0x20005c44
 800b624:	20005c48 	.word	0x20005c48
 800b628:	e000ed20 	.word	0xe000ed20
 800b62c:	20000014 	.word	0x20000014
 800b630:	e000ef34 	.word	0xe000ef34

0800b634 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b634:	b480      	push	{r7}
 800b636:	b083      	sub	sp, #12
 800b638:	af00      	add	r7, sp, #0
	__asm volatile
 800b63a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b63e:	f383 8811 	msr	BASEPRI, r3
 800b642:	f3bf 8f6f 	isb	sy
 800b646:	f3bf 8f4f 	dsb	sy
 800b64a:	607b      	str	r3, [r7, #4]
}
 800b64c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b64e:	4b0f      	ldr	r3, [pc, #60]	; (800b68c <vPortEnterCritical+0x58>)
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	3301      	adds	r3, #1
 800b654:	4a0d      	ldr	r2, [pc, #52]	; (800b68c <vPortEnterCritical+0x58>)
 800b656:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b658:	4b0c      	ldr	r3, [pc, #48]	; (800b68c <vPortEnterCritical+0x58>)
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	2b01      	cmp	r3, #1
 800b65e:	d10f      	bne.n	800b680 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b660:	4b0b      	ldr	r3, [pc, #44]	; (800b690 <vPortEnterCritical+0x5c>)
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	b2db      	uxtb	r3, r3
 800b666:	2b00      	cmp	r3, #0
 800b668:	d00a      	beq.n	800b680 <vPortEnterCritical+0x4c>
	__asm volatile
 800b66a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b66e:	f383 8811 	msr	BASEPRI, r3
 800b672:	f3bf 8f6f 	isb	sy
 800b676:	f3bf 8f4f 	dsb	sy
 800b67a:	603b      	str	r3, [r7, #0]
}
 800b67c:	bf00      	nop
 800b67e:	e7fe      	b.n	800b67e <vPortEnterCritical+0x4a>
	}
}
 800b680:	bf00      	nop
 800b682:	370c      	adds	r7, #12
 800b684:	46bd      	mov	sp, r7
 800b686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b68a:	4770      	bx	lr
 800b68c:	20000014 	.word	0x20000014
 800b690:	e000ed04 	.word	0xe000ed04

0800b694 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b694:	b480      	push	{r7}
 800b696:	b083      	sub	sp, #12
 800b698:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b69a:	4b12      	ldr	r3, [pc, #72]	; (800b6e4 <vPortExitCritical+0x50>)
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d10a      	bne.n	800b6b8 <vPortExitCritical+0x24>
	__asm volatile
 800b6a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6a6:	f383 8811 	msr	BASEPRI, r3
 800b6aa:	f3bf 8f6f 	isb	sy
 800b6ae:	f3bf 8f4f 	dsb	sy
 800b6b2:	607b      	str	r3, [r7, #4]
}
 800b6b4:	bf00      	nop
 800b6b6:	e7fe      	b.n	800b6b6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b6b8:	4b0a      	ldr	r3, [pc, #40]	; (800b6e4 <vPortExitCritical+0x50>)
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	3b01      	subs	r3, #1
 800b6be:	4a09      	ldr	r2, [pc, #36]	; (800b6e4 <vPortExitCritical+0x50>)
 800b6c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b6c2:	4b08      	ldr	r3, [pc, #32]	; (800b6e4 <vPortExitCritical+0x50>)
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d105      	bne.n	800b6d6 <vPortExitCritical+0x42>
 800b6ca:	2300      	movs	r3, #0
 800b6cc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b6ce:	683b      	ldr	r3, [r7, #0]
 800b6d0:	f383 8811 	msr	BASEPRI, r3
}
 800b6d4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b6d6:	bf00      	nop
 800b6d8:	370c      	adds	r7, #12
 800b6da:	46bd      	mov	sp, r7
 800b6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e0:	4770      	bx	lr
 800b6e2:	bf00      	nop
 800b6e4:	20000014 	.word	0x20000014
	...

0800b6f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b6f0:	f3ef 8009 	mrs	r0, PSP
 800b6f4:	f3bf 8f6f 	isb	sy
 800b6f8:	4b15      	ldr	r3, [pc, #84]	; (800b750 <pxCurrentTCBConst>)
 800b6fa:	681a      	ldr	r2, [r3, #0]
 800b6fc:	f01e 0f10 	tst.w	lr, #16
 800b700:	bf08      	it	eq
 800b702:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b706:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b70a:	6010      	str	r0, [r2, #0]
 800b70c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b710:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b714:	f380 8811 	msr	BASEPRI, r0
 800b718:	f3bf 8f4f 	dsb	sy
 800b71c:	f3bf 8f6f 	isb	sy
 800b720:	f7fe feec 	bl	800a4fc <vTaskSwitchContext>
 800b724:	f04f 0000 	mov.w	r0, #0
 800b728:	f380 8811 	msr	BASEPRI, r0
 800b72c:	bc09      	pop	{r0, r3}
 800b72e:	6819      	ldr	r1, [r3, #0]
 800b730:	6808      	ldr	r0, [r1, #0]
 800b732:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b736:	f01e 0f10 	tst.w	lr, #16
 800b73a:	bf08      	it	eq
 800b73c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b740:	f380 8809 	msr	PSP, r0
 800b744:	f3bf 8f6f 	isb	sy
 800b748:	4770      	bx	lr
 800b74a:	bf00      	nop
 800b74c:	f3af 8000 	nop.w

0800b750 <pxCurrentTCBConst>:
 800b750:	20005618 	.word	0x20005618
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b754:	bf00      	nop
 800b756:	bf00      	nop

0800b758 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b758:	b580      	push	{r7, lr}
 800b75a:	b082      	sub	sp, #8
 800b75c:	af00      	add	r7, sp, #0
	__asm volatile
 800b75e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b762:	f383 8811 	msr	BASEPRI, r3
 800b766:	f3bf 8f6f 	isb	sy
 800b76a:	f3bf 8f4f 	dsb	sy
 800b76e:	607b      	str	r3, [r7, #4]
}
 800b770:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b772:	f7fe fe09 	bl	800a388 <xTaskIncrementTick>
 800b776:	4603      	mov	r3, r0
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d003      	beq.n	800b784 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b77c:	4b06      	ldr	r3, [pc, #24]	; (800b798 <SysTick_Handler+0x40>)
 800b77e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b782:	601a      	str	r2, [r3, #0]
 800b784:	2300      	movs	r3, #0
 800b786:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b788:	683b      	ldr	r3, [r7, #0]
 800b78a:	f383 8811 	msr	BASEPRI, r3
}
 800b78e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b790:	bf00      	nop
 800b792:	3708      	adds	r7, #8
 800b794:	46bd      	mov	sp, r7
 800b796:	bd80      	pop	{r7, pc}
 800b798:	e000ed04 	.word	0xe000ed04

0800b79c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b79c:	b480      	push	{r7}
 800b79e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b7a0:	4b0b      	ldr	r3, [pc, #44]	; (800b7d0 <vPortSetupTimerInterrupt+0x34>)
 800b7a2:	2200      	movs	r2, #0
 800b7a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b7a6:	4b0b      	ldr	r3, [pc, #44]	; (800b7d4 <vPortSetupTimerInterrupt+0x38>)
 800b7a8:	2200      	movs	r2, #0
 800b7aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b7ac:	4b0a      	ldr	r3, [pc, #40]	; (800b7d8 <vPortSetupTimerInterrupt+0x3c>)
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	4a0a      	ldr	r2, [pc, #40]	; (800b7dc <vPortSetupTimerInterrupt+0x40>)
 800b7b2:	fba2 2303 	umull	r2, r3, r2, r3
 800b7b6:	099b      	lsrs	r3, r3, #6
 800b7b8:	4a09      	ldr	r2, [pc, #36]	; (800b7e0 <vPortSetupTimerInterrupt+0x44>)
 800b7ba:	3b01      	subs	r3, #1
 800b7bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b7be:	4b04      	ldr	r3, [pc, #16]	; (800b7d0 <vPortSetupTimerInterrupt+0x34>)
 800b7c0:	2207      	movs	r2, #7
 800b7c2:	601a      	str	r2, [r3, #0]
}
 800b7c4:	bf00      	nop
 800b7c6:	46bd      	mov	sp, r7
 800b7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7cc:	4770      	bx	lr
 800b7ce:	bf00      	nop
 800b7d0:	e000e010 	.word	0xe000e010
 800b7d4:	e000e018 	.word	0xe000e018
 800b7d8:	20000000 	.word	0x20000000
 800b7dc:	10624dd3 	.word	0x10624dd3
 800b7e0:	e000e014 	.word	0xe000e014

0800b7e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b7e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b7f4 <vPortEnableVFP+0x10>
 800b7e8:	6801      	ldr	r1, [r0, #0]
 800b7ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b7ee:	6001      	str	r1, [r0, #0]
 800b7f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b7f2:	bf00      	nop
 800b7f4:	e000ed88 	.word	0xe000ed88

0800b7f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b7f8:	b480      	push	{r7}
 800b7fa:	b085      	sub	sp, #20
 800b7fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b7fe:	f3ef 8305 	mrs	r3, IPSR
 800b802:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	2b0f      	cmp	r3, #15
 800b808:	d914      	bls.n	800b834 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b80a:	4a17      	ldr	r2, [pc, #92]	; (800b868 <vPortValidateInterruptPriority+0x70>)
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	4413      	add	r3, r2
 800b810:	781b      	ldrb	r3, [r3, #0]
 800b812:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b814:	4b15      	ldr	r3, [pc, #84]	; (800b86c <vPortValidateInterruptPriority+0x74>)
 800b816:	781b      	ldrb	r3, [r3, #0]
 800b818:	7afa      	ldrb	r2, [r7, #11]
 800b81a:	429a      	cmp	r2, r3
 800b81c:	d20a      	bcs.n	800b834 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b81e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b822:	f383 8811 	msr	BASEPRI, r3
 800b826:	f3bf 8f6f 	isb	sy
 800b82a:	f3bf 8f4f 	dsb	sy
 800b82e:	607b      	str	r3, [r7, #4]
}
 800b830:	bf00      	nop
 800b832:	e7fe      	b.n	800b832 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b834:	4b0e      	ldr	r3, [pc, #56]	; (800b870 <vPortValidateInterruptPriority+0x78>)
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b83c:	4b0d      	ldr	r3, [pc, #52]	; (800b874 <vPortValidateInterruptPriority+0x7c>)
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	429a      	cmp	r2, r3
 800b842:	d90a      	bls.n	800b85a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b844:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b848:	f383 8811 	msr	BASEPRI, r3
 800b84c:	f3bf 8f6f 	isb	sy
 800b850:	f3bf 8f4f 	dsb	sy
 800b854:	603b      	str	r3, [r7, #0]
}
 800b856:	bf00      	nop
 800b858:	e7fe      	b.n	800b858 <vPortValidateInterruptPriority+0x60>
	}
 800b85a:	bf00      	nop
 800b85c:	3714      	adds	r7, #20
 800b85e:	46bd      	mov	sp, r7
 800b860:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b864:	4770      	bx	lr
 800b866:	bf00      	nop
 800b868:	e000e3f0 	.word	0xe000e3f0
 800b86c:	20005c44 	.word	0x20005c44
 800b870:	e000ed0c 	.word	0xe000ed0c
 800b874:	20005c48 	.word	0x20005c48

0800b878 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b878:	b580      	push	{r7, lr}
 800b87a:	b08a      	sub	sp, #40	; 0x28
 800b87c:	af00      	add	r7, sp, #0
 800b87e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b880:	2300      	movs	r3, #0
 800b882:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b884:	f7fe fcc4 	bl	800a210 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b888:	4b58      	ldr	r3, [pc, #352]	; (800b9ec <pvPortMalloc+0x174>)
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d101      	bne.n	800b894 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b890:	f000 f910 	bl	800bab4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b894:	4b56      	ldr	r3, [pc, #344]	; (800b9f0 <pvPortMalloc+0x178>)
 800b896:	681a      	ldr	r2, [r3, #0]
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	4013      	ands	r3, r2
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	f040 808e 	bne.w	800b9be <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d01d      	beq.n	800b8e4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b8a8:	2208      	movs	r2, #8
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	4413      	add	r3, r2
 800b8ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	f003 0307 	and.w	r3, r3, #7
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d014      	beq.n	800b8e4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	f023 0307 	bic.w	r3, r3, #7
 800b8c0:	3308      	adds	r3, #8
 800b8c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	f003 0307 	and.w	r3, r3, #7
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d00a      	beq.n	800b8e4 <pvPortMalloc+0x6c>
	__asm volatile
 800b8ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8d2:	f383 8811 	msr	BASEPRI, r3
 800b8d6:	f3bf 8f6f 	isb	sy
 800b8da:	f3bf 8f4f 	dsb	sy
 800b8de:	617b      	str	r3, [r7, #20]
}
 800b8e0:	bf00      	nop
 800b8e2:	e7fe      	b.n	800b8e2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d069      	beq.n	800b9be <pvPortMalloc+0x146>
 800b8ea:	4b42      	ldr	r3, [pc, #264]	; (800b9f4 <pvPortMalloc+0x17c>)
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	687a      	ldr	r2, [r7, #4]
 800b8f0:	429a      	cmp	r2, r3
 800b8f2:	d864      	bhi.n	800b9be <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b8f4:	4b40      	ldr	r3, [pc, #256]	; (800b9f8 <pvPortMalloc+0x180>)
 800b8f6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b8f8:	4b3f      	ldr	r3, [pc, #252]	; (800b9f8 <pvPortMalloc+0x180>)
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b8fe:	e004      	b.n	800b90a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b902:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b90a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b90c:	685b      	ldr	r3, [r3, #4]
 800b90e:	687a      	ldr	r2, [r7, #4]
 800b910:	429a      	cmp	r2, r3
 800b912:	d903      	bls.n	800b91c <pvPortMalloc+0xa4>
 800b914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d1f1      	bne.n	800b900 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b91c:	4b33      	ldr	r3, [pc, #204]	; (800b9ec <pvPortMalloc+0x174>)
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b922:	429a      	cmp	r2, r3
 800b924:	d04b      	beq.n	800b9be <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b926:	6a3b      	ldr	r3, [r7, #32]
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	2208      	movs	r2, #8
 800b92c:	4413      	add	r3, r2
 800b92e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b932:	681a      	ldr	r2, [r3, #0]
 800b934:	6a3b      	ldr	r3, [r7, #32]
 800b936:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b93a:	685a      	ldr	r2, [r3, #4]
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	1ad2      	subs	r2, r2, r3
 800b940:	2308      	movs	r3, #8
 800b942:	005b      	lsls	r3, r3, #1
 800b944:	429a      	cmp	r2, r3
 800b946:	d91f      	bls.n	800b988 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b948:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	4413      	add	r3, r2
 800b94e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b950:	69bb      	ldr	r3, [r7, #24]
 800b952:	f003 0307 	and.w	r3, r3, #7
 800b956:	2b00      	cmp	r3, #0
 800b958:	d00a      	beq.n	800b970 <pvPortMalloc+0xf8>
	__asm volatile
 800b95a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b95e:	f383 8811 	msr	BASEPRI, r3
 800b962:	f3bf 8f6f 	isb	sy
 800b966:	f3bf 8f4f 	dsb	sy
 800b96a:	613b      	str	r3, [r7, #16]
}
 800b96c:	bf00      	nop
 800b96e:	e7fe      	b.n	800b96e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b972:	685a      	ldr	r2, [r3, #4]
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	1ad2      	subs	r2, r2, r3
 800b978:	69bb      	ldr	r3, [r7, #24]
 800b97a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b97c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b97e:	687a      	ldr	r2, [r7, #4]
 800b980:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b982:	69b8      	ldr	r0, [r7, #24]
 800b984:	f000 f8f8 	bl	800bb78 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b988:	4b1a      	ldr	r3, [pc, #104]	; (800b9f4 <pvPortMalloc+0x17c>)
 800b98a:	681a      	ldr	r2, [r3, #0]
 800b98c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b98e:	685b      	ldr	r3, [r3, #4]
 800b990:	1ad3      	subs	r3, r2, r3
 800b992:	4a18      	ldr	r2, [pc, #96]	; (800b9f4 <pvPortMalloc+0x17c>)
 800b994:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b996:	4b17      	ldr	r3, [pc, #92]	; (800b9f4 <pvPortMalloc+0x17c>)
 800b998:	681a      	ldr	r2, [r3, #0]
 800b99a:	4b18      	ldr	r3, [pc, #96]	; (800b9fc <pvPortMalloc+0x184>)
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	429a      	cmp	r2, r3
 800b9a0:	d203      	bcs.n	800b9aa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b9a2:	4b14      	ldr	r3, [pc, #80]	; (800b9f4 <pvPortMalloc+0x17c>)
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	4a15      	ldr	r2, [pc, #84]	; (800b9fc <pvPortMalloc+0x184>)
 800b9a8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b9aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9ac:	685a      	ldr	r2, [r3, #4]
 800b9ae:	4b10      	ldr	r3, [pc, #64]	; (800b9f0 <pvPortMalloc+0x178>)
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	431a      	orrs	r2, r3
 800b9b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9b6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b9b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9ba:	2200      	movs	r2, #0
 800b9bc:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b9be:	f7fe fc35 	bl	800a22c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b9c2:	69fb      	ldr	r3, [r7, #28]
 800b9c4:	f003 0307 	and.w	r3, r3, #7
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d00a      	beq.n	800b9e2 <pvPortMalloc+0x16a>
	__asm volatile
 800b9cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9d0:	f383 8811 	msr	BASEPRI, r3
 800b9d4:	f3bf 8f6f 	isb	sy
 800b9d8:	f3bf 8f4f 	dsb	sy
 800b9dc:	60fb      	str	r3, [r7, #12]
}
 800b9de:	bf00      	nop
 800b9e0:	e7fe      	b.n	800b9e0 <pvPortMalloc+0x168>
	return pvReturn;
 800b9e2:	69fb      	ldr	r3, [r7, #28]
}
 800b9e4:	4618      	mov	r0, r3
 800b9e6:	3728      	adds	r7, #40	; 0x28
 800b9e8:	46bd      	mov	sp, r7
 800b9ea:	bd80      	pop	{r7, pc}
 800b9ec:	20009854 	.word	0x20009854
 800b9f0:	20009860 	.word	0x20009860
 800b9f4:	20009858 	.word	0x20009858
 800b9f8:	2000984c 	.word	0x2000984c
 800b9fc:	2000985c 	.word	0x2000985c

0800ba00 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ba00:	b580      	push	{r7, lr}
 800ba02:	b086      	sub	sp, #24
 800ba04:	af00      	add	r7, sp, #0
 800ba06:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d048      	beq.n	800baa4 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ba12:	2308      	movs	r3, #8
 800ba14:	425b      	negs	r3, r3
 800ba16:	697a      	ldr	r2, [r7, #20]
 800ba18:	4413      	add	r3, r2
 800ba1a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ba1c:	697b      	ldr	r3, [r7, #20]
 800ba1e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ba20:	693b      	ldr	r3, [r7, #16]
 800ba22:	685a      	ldr	r2, [r3, #4]
 800ba24:	4b21      	ldr	r3, [pc, #132]	; (800baac <vPortFree+0xac>)
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	4013      	ands	r3, r2
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d10a      	bne.n	800ba44 <vPortFree+0x44>
	__asm volatile
 800ba2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba32:	f383 8811 	msr	BASEPRI, r3
 800ba36:	f3bf 8f6f 	isb	sy
 800ba3a:	f3bf 8f4f 	dsb	sy
 800ba3e:	60fb      	str	r3, [r7, #12]
}
 800ba40:	bf00      	nop
 800ba42:	e7fe      	b.n	800ba42 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ba44:	693b      	ldr	r3, [r7, #16]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d00a      	beq.n	800ba62 <vPortFree+0x62>
	__asm volatile
 800ba4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba50:	f383 8811 	msr	BASEPRI, r3
 800ba54:	f3bf 8f6f 	isb	sy
 800ba58:	f3bf 8f4f 	dsb	sy
 800ba5c:	60bb      	str	r3, [r7, #8]
}
 800ba5e:	bf00      	nop
 800ba60:	e7fe      	b.n	800ba60 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ba62:	693b      	ldr	r3, [r7, #16]
 800ba64:	685a      	ldr	r2, [r3, #4]
 800ba66:	4b11      	ldr	r3, [pc, #68]	; (800baac <vPortFree+0xac>)
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	4013      	ands	r3, r2
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d019      	beq.n	800baa4 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ba70:	693b      	ldr	r3, [r7, #16]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d115      	bne.n	800baa4 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ba78:	693b      	ldr	r3, [r7, #16]
 800ba7a:	685a      	ldr	r2, [r3, #4]
 800ba7c:	4b0b      	ldr	r3, [pc, #44]	; (800baac <vPortFree+0xac>)
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	43db      	mvns	r3, r3
 800ba82:	401a      	ands	r2, r3
 800ba84:	693b      	ldr	r3, [r7, #16]
 800ba86:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ba88:	f7fe fbc2 	bl	800a210 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ba8c:	693b      	ldr	r3, [r7, #16]
 800ba8e:	685a      	ldr	r2, [r3, #4]
 800ba90:	4b07      	ldr	r3, [pc, #28]	; (800bab0 <vPortFree+0xb0>)
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	4413      	add	r3, r2
 800ba96:	4a06      	ldr	r2, [pc, #24]	; (800bab0 <vPortFree+0xb0>)
 800ba98:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ba9a:	6938      	ldr	r0, [r7, #16]
 800ba9c:	f000 f86c 	bl	800bb78 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800baa0:	f7fe fbc4 	bl	800a22c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800baa4:	bf00      	nop
 800baa6:	3718      	adds	r7, #24
 800baa8:	46bd      	mov	sp, r7
 800baaa:	bd80      	pop	{r7, pc}
 800baac:	20009860 	.word	0x20009860
 800bab0:	20009858 	.word	0x20009858

0800bab4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800bab4:	b480      	push	{r7}
 800bab6:	b085      	sub	sp, #20
 800bab8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800baba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800babe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800bac0:	4b27      	ldr	r3, [pc, #156]	; (800bb60 <prvHeapInit+0xac>)
 800bac2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	f003 0307 	and.w	r3, r3, #7
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d00c      	beq.n	800bae8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	3307      	adds	r3, #7
 800bad2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	f023 0307 	bic.w	r3, r3, #7
 800bada:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800badc:	68ba      	ldr	r2, [r7, #8]
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	1ad3      	subs	r3, r2, r3
 800bae2:	4a1f      	ldr	r2, [pc, #124]	; (800bb60 <prvHeapInit+0xac>)
 800bae4:	4413      	add	r3, r2
 800bae6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800baec:	4a1d      	ldr	r2, [pc, #116]	; (800bb64 <prvHeapInit+0xb0>)
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800baf2:	4b1c      	ldr	r3, [pc, #112]	; (800bb64 <prvHeapInit+0xb0>)
 800baf4:	2200      	movs	r2, #0
 800baf6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	68ba      	ldr	r2, [r7, #8]
 800bafc:	4413      	add	r3, r2
 800bafe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800bb00:	2208      	movs	r2, #8
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	1a9b      	subs	r3, r3, r2
 800bb06:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	f023 0307 	bic.w	r3, r3, #7
 800bb0e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	4a15      	ldr	r2, [pc, #84]	; (800bb68 <prvHeapInit+0xb4>)
 800bb14:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800bb16:	4b14      	ldr	r3, [pc, #80]	; (800bb68 <prvHeapInit+0xb4>)
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	2200      	movs	r2, #0
 800bb1c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800bb1e:	4b12      	ldr	r3, [pc, #72]	; (800bb68 <prvHeapInit+0xb4>)
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	2200      	movs	r2, #0
 800bb24:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800bb2a:	683b      	ldr	r3, [r7, #0]
 800bb2c:	68fa      	ldr	r2, [r7, #12]
 800bb2e:	1ad2      	subs	r2, r2, r3
 800bb30:	683b      	ldr	r3, [r7, #0]
 800bb32:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800bb34:	4b0c      	ldr	r3, [pc, #48]	; (800bb68 <prvHeapInit+0xb4>)
 800bb36:	681a      	ldr	r2, [r3, #0]
 800bb38:	683b      	ldr	r3, [r7, #0]
 800bb3a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bb3c:	683b      	ldr	r3, [r7, #0]
 800bb3e:	685b      	ldr	r3, [r3, #4]
 800bb40:	4a0a      	ldr	r2, [pc, #40]	; (800bb6c <prvHeapInit+0xb8>)
 800bb42:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bb44:	683b      	ldr	r3, [r7, #0]
 800bb46:	685b      	ldr	r3, [r3, #4]
 800bb48:	4a09      	ldr	r2, [pc, #36]	; (800bb70 <prvHeapInit+0xbc>)
 800bb4a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800bb4c:	4b09      	ldr	r3, [pc, #36]	; (800bb74 <prvHeapInit+0xc0>)
 800bb4e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800bb52:	601a      	str	r2, [r3, #0]
}
 800bb54:	bf00      	nop
 800bb56:	3714      	adds	r7, #20
 800bb58:	46bd      	mov	sp, r7
 800bb5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb5e:	4770      	bx	lr
 800bb60:	20005c4c 	.word	0x20005c4c
 800bb64:	2000984c 	.word	0x2000984c
 800bb68:	20009854 	.word	0x20009854
 800bb6c:	2000985c 	.word	0x2000985c
 800bb70:	20009858 	.word	0x20009858
 800bb74:	20009860 	.word	0x20009860

0800bb78 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800bb78:	b480      	push	{r7}
 800bb7a:	b085      	sub	sp, #20
 800bb7c:	af00      	add	r7, sp, #0
 800bb7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800bb80:	4b28      	ldr	r3, [pc, #160]	; (800bc24 <prvInsertBlockIntoFreeList+0xac>)
 800bb82:	60fb      	str	r3, [r7, #12]
 800bb84:	e002      	b.n	800bb8c <prvInsertBlockIntoFreeList+0x14>
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	60fb      	str	r3, [r7, #12]
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	687a      	ldr	r2, [r7, #4]
 800bb92:	429a      	cmp	r2, r3
 800bb94:	d8f7      	bhi.n	800bb86 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	685b      	ldr	r3, [r3, #4]
 800bb9e:	68ba      	ldr	r2, [r7, #8]
 800bba0:	4413      	add	r3, r2
 800bba2:	687a      	ldr	r2, [r7, #4]
 800bba4:	429a      	cmp	r2, r3
 800bba6:	d108      	bne.n	800bbba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	685a      	ldr	r2, [r3, #4]
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	685b      	ldr	r3, [r3, #4]
 800bbb0:	441a      	add	r2, r3
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	685b      	ldr	r3, [r3, #4]
 800bbc2:	68ba      	ldr	r2, [r7, #8]
 800bbc4:	441a      	add	r2, r3
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	429a      	cmp	r2, r3
 800bbcc:	d118      	bne.n	800bc00 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	681a      	ldr	r2, [r3, #0]
 800bbd2:	4b15      	ldr	r3, [pc, #84]	; (800bc28 <prvInsertBlockIntoFreeList+0xb0>)
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	429a      	cmp	r2, r3
 800bbd8:	d00d      	beq.n	800bbf6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	685a      	ldr	r2, [r3, #4]
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	685b      	ldr	r3, [r3, #4]
 800bbe4:	441a      	add	r2, r3
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	681a      	ldr	r2, [r3, #0]
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	601a      	str	r2, [r3, #0]
 800bbf4:	e008      	b.n	800bc08 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800bbf6:	4b0c      	ldr	r3, [pc, #48]	; (800bc28 <prvInsertBlockIntoFreeList+0xb0>)
 800bbf8:	681a      	ldr	r2, [r3, #0]
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	601a      	str	r2, [r3, #0]
 800bbfe:	e003      	b.n	800bc08 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	681a      	ldr	r2, [r3, #0]
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800bc08:	68fa      	ldr	r2, [r7, #12]
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	429a      	cmp	r2, r3
 800bc0e:	d002      	beq.n	800bc16 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	687a      	ldr	r2, [r7, #4]
 800bc14:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bc16:	bf00      	nop
 800bc18:	3714      	adds	r7, #20
 800bc1a:	46bd      	mov	sp, r7
 800bc1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc20:	4770      	bx	lr
 800bc22:	bf00      	nop
 800bc24:	2000984c 	.word	0x2000984c
 800bc28:	20009854 	.word	0x20009854

0800bc2c <__libc_init_array>:
 800bc2c:	b570      	push	{r4, r5, r6, lr}
 800bc2e:	4d0d      	ldr	r5, [pc, #52]	; (800bc64 <__libc_init_array+0x38>)
 800bc30:	4c0d      	ldr	r4, [pc, #52]	; (800bc68 <__libc_init_array+0x3c>)
 800bc32:	1b64      	subs	r4, r4, r5
 800bc34:	10a4      	asrs	r4, r4, #2
 800bc36:	2600      	movs	r6, #0
 800bc38:	42a6      	cmp	r6, r4
 800bc3a:	d109      	bne.n	800bc50 <__libc_init_array+0x24>
 800bc3c:	4d0b      	ldr	r5, [pc, #44]	; (800bc6c <__libc_init_array+0x40>)
 800bc3e:	4c0c      	ldr	r4, [pc, #48]	; (800bc70 <__libc_init_array+0x44>)
 800bc40:	f001 f880 	bl	800cd44 <_init>
 800bc44:	1b64      	subs	r4, r4, r5
 800bc46:	10a4      	asrs	r4, r4, #2
 800bc48:	2600      	movs	r6, #0
 800bc4a:	42a6      	cmp	r6, r4
 800bc4c:	d105      	bne.n	800bc5a <__libc_init_array+0x2e>
 800bc4e:	bd70      	pop	{r4, r5, r6, pc}
 800bc50:	f855 3b04 	ldr.w	r3, [r5], #4
 800bc54:	4798      	blx	r3
 800bc56:	3601      	adds	r6, #1
 800bc58:	e7ee      	b.n	800bc38 <__libc_init_array+0xc>
 800bc5a:	f855 3b04 	ldr.w	r3, [r5], #4
 800bc5e:	4798      	blx	r3
 800bc60:	3601      	adds	r6, #1
 800bc62:	e7f2      	b.n	800bc4a <__libc_init_array+0x1e>
 800bc64:	0800cfd4 	.word	0x0800cfd4
 800bc68:	0800cfd4 	.word	0x0800cfd4
 800bc6c:	0800cfd4 	.word	0x0800cfd4
 800bc70:	0800cfd8 	.word	0x0800cfd8

0800bc74 <memcpy>:
 800bc74:	440a      	add	r2, r1
 800bc76:	4291      	cmp	r1, r2
 800bc78:	f100 33ff 	add.w	r3, r0, #4294967295
 800bc7c:	d100      	bne.n	800bc80 <memcpy+0xc>
 800bc7e:	4770      	bx	lr
 800bc80:	b510      	push	{r4, lr}
 800bc82:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bc86:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bc8a:	4291      	cmp	r1, r2
 800bc8c:	d1f9      	bne.n	800bc82 <memcpy+0xe>
 800bc8e:	bd10      	pop	{r4, pc}

0800bc90 <memset>:
 800bc90:	4402      	add	r2, r0
 800bc92:	4603      	mov	r3, r0
 800bc94:	4293      	cmp	r3, r2
 800bc96:	d100      	bne.n	800bc9a <memset+0xa>
 800bc98:	4770      	bx	lr
 800bc9a:	f803 1b01 	strb.w	r1, [r3], #1
 800bc9e:	e7f9      	b.n	800bc94 <memset+0x4>

0800bca0 <rand>:
 800bca0:	4b17      	ldr	r3, [pc, #92]	; (800bd00 <rand+0x60>)
 800bca2:	b510      	push	{r4, lr}
 800bca4:	681c      	ldr	r4, [r3, #0]
 800bca6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800bca8:	b9b3      	cbnz	r3, 800bcd8 <rand+0x38>
 800bcaa:	2018      	movs	r0, #24
 800bcac:	f000 f868 	bl	800bd80 <malloc>
 800bcb0:	63a0      	str	r0, [r4, #56]	; 0x38
 800bcb2:	b928      	cbnz	r0, 800bcc0 <rand+0x20>
 800bcb4:	4602      	mov	r2, r0
 800bcb6:	4b13      	ldr	r3, [pc, #76]	; (800bd04 <rand+0x64>)
 800bcb8:	4813      	ldr	r0, [pc, #76]	; (800bd08 <rand+0x68>)
 800bcba:	214e      	movs	r1, #78	; 0x4e
 800bcbc:	f000 f830 	bl	800bd20 <__assert_func>
 800bcc0:	4a12      	ldr	r2, [pc, #72]	; (800bd0c <rand+0x6c>)
 800bcc2:	4b13      	ldr	r3, [pc, #76]	; (800bd10 <rand+0x70>)
 800bcc4:	e9c0 2300 	strd	r2, r3, [r0]
 800bcc8:	4b12      	ldr	r3, [pc, #72]	; (800bd14 <rand+0x74>)
 800bcca:	6083      	str	r3, [r0, #8]
 800bccc:	230b      	movs	r3, #11
 800bcce:	8183      	strh	r3, [r0, #12]
 800bcd0:	2201      	movs	r2, #1
 800bcd2:	2300      	movs	r3, #0
 800bcd4:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800bcd8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800bcda:	480f      	ldr	r0, [pc, #60]	; (800bd18 <rand+0x78>)
 800bcdc:	690a      	ldr	r2, [r1, #16]
 800bcde:	694b      	ldr	r3, [r1, #20]
 800bce0:	4c0e      	ldr	r4, [pc, #56]	; (800bd1c <rand+0x7c>)
 800bce2:	4350      	muls	r0, r2
 800bce4:	fb04 0003 	mla	r0, r4, r3, r0
 800bce8:	fba2 3404 	umull	r3, r4, r2, r4
 800bcec:	1c5a      	adds	r2, r3, #1
 800bcee:	4404      	add	r4, r0
 800bcf0:	f144 0000 	adc.w	r0, r4, #0
 800bcf4:	e9c1 2004 	strd	r2, r0, [r1, #16]
 800bcf8:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800bcfc:	bd10      	pop	{r4, pc}
 800bcfe:	bf00      	nop
 800bd00:	20000018 	.word	0x20000018
 800bd04:	0800ce84 	.word	0x0800ce84
 800bd08:	0800ce9b 	.word	0x0800ce9b
 800bd0c:	abcd330e 	.word	0xabcd330e
 800bd10:	e66d1234 	.word	0xe66d1234
 800bd14:	0005deec 	.word	0x0005deec
 800bd18:	5851f42d 	.word	0x5851f42d
 800bd1c:	4c957f2d 	.word	0x4c957f2d

0800bd20 <__assert_func>:
 800bd20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bd22:	4614      	mov	r4, r2
 800bd24:	461a      	mov	r2, r3
 800bd26:	4b09      	ldr	r3, [pc, #36]	; (800bd4c <__assert_func+0x2c>)
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	4605      	mov	r5, r0
 800bd2c:	68d8      	ldr	r0, [r3, #12]
 800bd2e:	b14c      	cbz	r4, 800bd44 <__assert_func+0x24>
 800bd30:	4b07      	ldr	r3, [pc, #28]	; (800bd50 <__assert_func+0x30>)
 800bd32:	9100      	str	r1, [sp, #0]
 800bd34:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bd38:	4906      	ldr	r1, [pc, #24]	; (800bd54 <__assert_func+0x34>)
 800bd3a:	462b      	mov	r3, r5
 800bd3c:	f000 f80e 	bl	800bd5c <fiprintf>
 800bd40:	f000 fc8e 	bl	800c660 <abort>
 800bd44:	4b04      	ldr	r3, [pc, #16]	; (800bd58 <__assert_func+0x38>)
 800bd46:	461c      	mov	r4, r3
 800bd48:	e7f3      	b.n	800bd32 <__assert_func+0x12>
 800bd4a:	bf00      	nop
 800bd4c:	20000018 	.word	0x20000018
 800bd50:	0800cefa 	.word	0x0800cefa
 800bd54:	0800cf07 	.word	0x0800cf07
 800bd58:	0800cf35 	.word	0x0800cf35

0800bd5c <fiprintf>:
 800bd5c:	b40e      	push	{r1, r2, r3}
 800bd5e:	b503      	push	{r0, r1, lr}
 800bd60:	4601      	mov	r1, r0
 800bd62:	ab03      	add	r3, sp, #12
 800bd64:	4805      	ldr	r0, [pc, #20]	; (800bd7c <fiprintf+0x20>)
 800bd66:	f853 2b04 	ldr.w	r2, [r3], #4
 800bd6a:	6800      	ldr	r0, [r0, #0]
 800bd6c:	9301      	str	r3, [sp, #4]
 800bd6e:	f000 f8e3 	bl	800bf38 <_vfiprintf_r>
 800bd72:	b002      	add	sp, #8
 800bd74:	f85d eb04 	ldr.w	lr, [sp], #4
 800bd78:	b003      	add	sp, #12
 800bd7a:	4770      	bx	lr
 800bd7c:	20000018 	.word	0x20000018

0800bd80 <malloc>:
 800bd80:	4b02      	ldr	r3, [pc, #8]	; (800bd8c <malloc+0xc>)
 800bd82:	4601      	mov	r1, r0
 800bd84:	6818      	ldr	r0, [r3, #0]
 800bd86:	f000 b853 	b.w	800be30 <_malloc_r>
 800bd8a:	bf00      	nop
 800bd8c:	20000018 	.word	0x20000018

0800bd90 <_free_r>:
 800bd90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bd92:	2900      	cmp	r1, #0
 800bd94:	d048      	beq.n	800be28 <_free_r+0x98>
 800bd96:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bd9a:	9001      	str	r0, [sp, #4]
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	f1a1 0404 	sub.w	r4, r1, #4
 800bda2:	bfb8      	it	lt
 800bda4:	18e4      	addlt	r4, r4, r3
 800bda6:	f000 fe81 	bl	800caac <__malloc_lock>
 800bdaa:	4a20      	ldr	r2, [pc, #128]	; (800be2c <_free_r+0x9c>)
 800bdac:	9801      	ldr	r0, [sp, #4]
 800bdae:	6813      	ldr	r3, [r2, #0]
 800bdb0:	4615      	mov	r5, r2
 800bdb2:	b933      	cbnz	r3, 800bdc2 <_free_r+0x32>
 800bdb4:	6063      	str	r3, [r4, #4]
 800bdb6:	6014      	str	r4, [r2, #0]
 800bdb8:	b003      	add	sp, #12
 800bdba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bdbe:	f000 be7b 	b.w	800cab8 <__malloc_unlock>
 800bdc2:	42a3      	cmp	r3, r4
 800bdc4:	d90b      	bls.n	800bdde <_free_r+0x4e>
 800bdc6:	6821      	ldr	r1, [r4, #0]
 800bdc8:	1862      	adds	r2, r4, r1
 800bdca:	4293      	cmp	r3, r2
 800bdcc:	bf04      	itt	eq
 800bdce:	681a      	ldreq	r2, [r3, #0]
 800bdd0:	685b      	ldreq	r3, [r3, #4]
 800bdd2:	6063      	str	r3, [r4, #4]
 800bdd4:	bf04      	itt	eq
 800bdd6:	1852      	addeq	r2, r2, r1
 800bdd8:	6022      	streq	r2, [r4, #0]
 800bdda:	602c      	str	r4, [r5, #0]
 800bddc:	e7ec      	b.n	800bdb8 <_free_r+0x28>
 800bdde:	461a      	mov	r2, r3
 800bde0:	685b      	ldr	r3, [r3, #4]
 800bde2:	b10b      	cbz	r3, 800bde8 <_free_r+0x58>
 800bde4:	42a3      	cmp	r3, r4
 800bde6:	d9fa      	bls.n	800bdde <_free_r+0x4e>
 800bde8:	6811      	ldr	r1, [r2, #0]
 800bdea:	1855      	adds	r5, r2, r1
 800bdec:	42a5      	cmp	r5, r4
 800bdee:	d10b      	bne.n	800be08 <_free_r+0x78>
 800bdf0:	6824      	ldr	r4, [r4, #0]
 800bdf2:	4421      	add	r1, r4
 800bdf4:	1854      	adds	r4, r2, r1
 800bdf6:	42a3      	cmp	r3, r4
 800bdf8:	6011      	str	r1, [r2, #0]
 800bdfa:	d1dd      	bne.n	800bdb8 <_free_r+0x28>
 800bdfc:	681c      	ldr	r4, [r3, #0]
 800bdfe:	685b      	ldr	r3, [r3, #4]
 800be00:	6053      	str	r3, [r2, #4]
 800be02:	4421      	add	r1, r4
 800be04:	6011      	str	r1, [r2, #0]
 800be06:	e7d7      	b.n	800bdb8 <_free_r+0x28>
 800be08:	d902      	bls.n	800be10 <_free_r+0x80>
 800be0a:	230c      	movs	r3, #12
 800be0c:	6003      	str	r3, [r0, #0]
 800be0e:	e7d3      	b.n	800bdb8 <_free_r+0x28>
 800be10:	6825      	ldr	r5, [r4, #0]
 800be12:	1961      	adds	r1, r4, r5
 800be14:	428b      	cmp	r3, r1
 800be16:	bf04      	itt	eq
 800be18:	6819      	ldreq	r1, [r3, #0]
 800be1a:	685b      	ldreq	r3, [r3, #4]
 800be1c:	6063      	str	r3, [r4, #4]
 800be1e:	bf04      	itt	eq
 800be20:	1949      	addeq	r1, r1, r5
 800be22:	6021      	streq	r1, [r4, #0]
 800be24:	6054      	str	r4, [r2, #4]
 800be26:	e7c7      	b.n	800bdb8 <_free_r+0x28>
 800be28:	b003      	add	sp, #12
 800be2a:	bd30      	pop	{r4, r5, pc}
 800be2c:	20009864 	.word	0x20009864

0800be30 <_malloc_r>:
 800be30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be32:	1ccd      	adds	r5, r1, #3
 800be34:	f025 0503 	bic.w	r5, r5, #3
 800be38:	3508      	adds	r5, #8
 800be3a:	2d0c      	cmp	r5, #12
 800be3c:	bf38      	it	cc
 800be3e:	250c      	movcc	r5, #12
 800be40:	2d00      	cmp	r5, #0
 800be42:	4606      	mov	r6, r0
 800be44:	db01      	blt.n	800be4a <_malloc_r+0x1a>
 800be46:	42a9      	cmp	r1, r5
 800be48:	d903      	bls.n	800be52 <_malloc_r+0x22>
 800be4a:	230c      	movs	r3, #12
 800be4c:	6033      	str	r3, [r6, #0]
 800be4e:	2000      	movs	r0, #0
 800be50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800be52:	f000 fe2b 	bl	800caac <__malloc_lock>
 800be56:	4921      	ldr	r1, [pc, #132]	; (800bedc <_malloc_r+0xac>)
 800be58:	680a      	ldr	r2, [r1, #0]
 800be5a:	4614      	mov	r4, r2
 800be5c:	b99c      	cbnz	r4, 800be86 <_malloc_r+0x56>
 800be5e:	4f20      	ldr	r7, [pc, #128]	; (800bee0 <_malloc_r+0xb0>)
 800be60:	683b      	ldr	r3, [r7, #0]
 800be62:	b923      	cbnz	r3, 800be6e <_malloc_r+0x3e>
 800be64:	4621      	mov	r1, r4
 800be66:	4630      	mov	r0, r6
 800be68:	f000 fb2a 	bl	800c4c0 <_sbrk_r>
 800be6c:	6038      	str	r0, [r7, #0]
 800be6e:	4629      	mov	r1, r5
 800be70:	4630      	mov	r0, r6
 800be72:	f000 fb25 	bl	800c4c0 <_sbrk_r>
 800be76:	1c43      	adds	r3, r0, #1
 800be78:	d123      	bne.n	800bec2 <_malloc_r+0x92>
 800be7a:	230c      	movs	r3, #12
 800be7c:	6033      	str	r3, [r6, #0]
 800be7e:	4630      	mov	r0, r6
 800be80:	f000 fe1a 	bl	800cab8 <__malloc_unlock>
 800be84:	e7e3      	b.n	800be4e <_malloc_r+0x1e>
 800be86:	6823      	ldr	r3, [r4, #0]
 800be88:	1b5b      	subs	r3, r3, r5
 800be8a:	d417      	bmi.n	800bebc <_malloc_r+0x8c>
 800be8c:	2b0b      	cmp	r3, #11
 800be8e:	d903      	bls.n	800be98 <_malloc_r+0x68>
 800be90:	6023      	str	r3, [r4, #0]
 800be92:	441c      	add	r4, r3
 800be94:	6025      	str	r5, [r4, #0]
 800be96:	e004      	b.n	800bea2 <_malloc_r+0x72>
 800be98:	6863      	ldr	r3, [r4, #4]
 800be9a:	42a2      	cmp	r2, r4
 800be9c:	bf0c      	ite	eq
 800be9e:	600b      	streq	r3, [r1, #0]
 800bea0:	6053      	strne	r3, [r2, #4]
 800bea2:	4630      	mov	r0, r6
 800bea4:	f000 fe08 	bl	800cab8 <__malloc_unlock>
 800bea8:	f104 000b 	add.w	r0, r4, #11
 800beac:	1d23      	adds	r3, r4, #4
 800beae:	f020 0007 	bic.w	r0, r0, #7
 800beb2:	1ac2      	subs	r2, r0, r3
 800beb4:	d0cc      	beq.n	800be50 <_malloc_r+0x20>
 800beb6:	1a1b      	subs	r3, r3, r0
 800beb8:	50a3      	str	r3, [r4, r2]
 800beba:	e7c9      	b.n	800be50 <_malloc_r+0x20>
 800bebc:	4622      	mov	r2, r4
 800bebe:	6864      	ldr	r4, [r4, #4]
 800bec0:	e7cc      	b.n	800be5c <_malloc_r+0x2c>
 800bec2:	1cc4      	adds	r4, r0, #3
 800bec4:	f024 0403 	bic.w	r4, r4, #3
 800bec8:	42a0      	cmp	r0, r4
 800beca:	d0e3      	beq.n	800be94 <_malloc_r+0x64>
 800becc:	1a21      	subs	r1, r4, r0
 800bece:	4630      	mov	r0, r6
 800bed0:	f000 faf6 	bl	800c4c0 <_sbrk_r>
 800bed4:	3001      	adds	r0, #1
 800bed6:	d1dd      	bne.n	800be94 <_malloc_r+0x64>
 800bed8:	e7cf      	b.n	800be7a <_malloc_r+0x4a>
 800beda:	bf00      	nop
 800bedc:	20009864 	.word	0x20009864
 800bee0:	20009868 	.word	0x20009868

0800bee4 <__sfputc_r>:
 800bee4:	6893      	ldr	r3, [r2, #8]
 800bee6:	3b01      	subs	r3, #1
 800bee8:	2b00      	cmp	r3, #0
 800beea:	b410      	push	{r4}
 800beec:	6093      	str	r3, [r2, #8]
 800beee:	da08      	bge.n	800bf02 <__sfputc_r+0x1e>
 800bef0:	6994      	ldr	r4, [r2, #24]
 800bef2:	42a3      	cmp	r3, r4
 800bef4:	db01      	blt.n	800befa <__sfputc_r+0x16>
 800bef6:	290a      	cmp	r1, #10
 800bef8:	d103      	bne.n	800bf02 <__sfputc_r+0x1e>
 800befa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800befe:	f000 baef 	b.w	800c4e0 <__swbuf_r>
 800bf02:	6813      	ldr	r3, [r2, #0]
 800bf04:	1c58      	adds	r0, r3, #1
 800bf06:	6010      	str	r0, [r2, #0]
 800bf08:	7019      	strb	r1, [r3, #0]
 800bf0a:	4608      	mov	r0, r1
 800bf0c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bf10:	4770      	bx	lr

0800bf12 <__sfputs_r>:
 800bf12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf14:	4606      	mov	r6, r0
 800bf16:	460f      	mov	r7, r1
 800bf18:	4614      	mov	r4, r2
 800bf1a:	18d5      	adds	r5, r2, r3
 800bf1c:	42ac      	cmp	r4, r5
 800bf1e:	d101      	bne.n	800bf24 <__sfputs_r+0x12>
 800bf20:	2000      	movs	r0, #0
 800bf22:	e007      	b.n	800bf34 <__sfputs_r+0x22>
 800bf24:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf28:	463a      	mov	r2, r7
 800bf2a:	4630      	mov	r0, r6
 800bf2c:	f7ff ffda 	bl	800bee4 <__sfputc_r>
 800bf30:	1c43      	adds	r3, r0, #1
 800bf32:	d1f3      	bne.n	800bf1c <__sfputs_r+0xa>
 800bf34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bf38 <_vfiprintf_r>:
 800bf38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf3c:	460d      	mov	r5, r1
 800bf3e:	b09d      	sub	sp, #116	; 0x74
 800bf40:	4614      	mov	r4, r2
 800bf42:	4698      	mov	r8, r3
 800bf44:	4606      	mov	r6, r0
 800bf46:	b118      	cbz	r0, 800bf50 <_vfiprintf_r+0x18>
 800bf48:	6983      	ldr	r3, [r0, #24]
 800bf4a:	b90b      	cbnz	r3, 800bf50 <_vfiprintf_r+0x18>
 800bf4c:	f000 fcaa 	bl	800c8a4 <__sinit>
 800bf50:	4b89      	ldr	r3, [pc, #548]	; (800c178 <_vfiprintf_r+0x240>)
 800bf52:	429d      	cmp	r5, r3
 800bf54:	d11b      	bne.n	800bf8e <_vfiprintf_r+0x56>
 800bf56:	6875      	ldr	r5, [r6, #4]
 800bf58:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bf5a:	07d9      	lsls	r1, r3, #31
 800bf5c:	d405      	bmi.n	800bf6a <_vfiprintf_r+0x32>
 800bf5e:	89ab      	ldrh	r3, [r5, #12]
 800bf60:	059a      	lsls	r2, r3, #22
 800bf62:	d402      	bmi.n	800bf6a <_vfiprintf_r+0x32>
 800bf64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bf66:	f000 fd3b 	bl	800c9e0 <__retarget_lock_acquire_recursive>
 800bf6a:	89ab      	ldrh	r3, [r5, #12]
 800bf6c:	071b      	lsls	r3, r3, #28
 800bf6e:	d501      	bpl.n	800bf74 <_vfiprintf_r+0x3c>
 800bf70:	692b      	ldr	r3, [r5, #16]
 800bf72:	b9eb      	cbnz	r3, 800bfb0 <_vfiprintf_r+0x78>
 800bf74:	4629      	mov	r1, r5
 800bf76:	4630      	mov	r0, r6
 800bf78:	f000 fb04 	bl	800c584 <__swsetup_r>
 800bf7c:	b1c0      	cbz	r0, 800bfb0 <_vfiprintf_r+0x78>
 800bf7e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bf80:	07dc      	lsls	r4, r3, #31
 800bf82:	d50e      	bpl.n	800bfa2 <_vfiprintf_r+0x6a>
 800bf84:	f04f 30ff 	mov.w	r0, #4294967295
 800bf88:	b01d      	add	sp, #116	; 0x74
 800bf8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf8e:	4b7b      	ldr	r3, [pc, #492]	; (800c17c <_vfiprintf_r+0x244>)
 800bf90:	429d      	cmp	r5, r3
 800bf92:	d101      	bne.n	800bf98 <_vfiprintf_r+0x60>
 800bf94:	68b5      	ldr	r5, [r6, #8]
 800bf96:	e7df      	b.n	800bf58 <_vfiprintf_r+0x20>
 800bf98:	4b79      	ldr	r3, [pc, #484]	; (800c180 <_vfiprintf_r+0x248>)
 800bf9a:	429d      	cmp	r5, r3
 800bf9c:	bf08      	it	eq
 800bf9e:	68f5      	ldreq	r5, [r6, #12]
 800bfa0:	e7da      	b.n	800bf58 <_vfiprintf_r+0x20>
 800bfa2:	89ab      	ldrh	r3, [r5, #12]
 800bfa4:	0598      	lsls	r0, r3, #22
 800bfa6:	d4ed      	bmi.n	800bf84 <_vfiprintf_r+0x4c>
 800bfa8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bfaa:	f000 fd1a 	bl	800c9e2 <__retarget_lock_release_recursive>
 800bfae:	e7e9      	b.n	800bf84 <_vfiprintf_r+0x4c>
 800bfb0:	2300      	movs	r3, #0
 800bfb2:	9309      	str	r3, [sp, #36]	; 0x24
 800bfb4:	2320      	movs	r3, #32
 800bfb6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bfba:	f8cd 800c 	str.w	r8, [sp, #12]
 800bfbe:	2330      	movs	r3, #48	; 0x30
 800bfc0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c184 <_vfiprintf_r+0x24c>
 800bfc4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bfc8:	f04f 0901 	mov.w	r9, #1
 800bfcc:	4623      	mov	r3, r4
 800bfce:	469a      	mov	sl, r3
 800bfd0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bfd4:	b10a      	cbz	r2, 800bfda <_vfiprintf_r+0xa2>
 800bfd6:	2a25      	cmp	r2, #37	; 0x25
 800bfd8:	d1f9      	bne.n	800bfce <_vfiprintf_r+0x96>
 800bfda:	ebba 0b04 	subs.w	fp, sl, r4
 800bfde:	d00b      	beq.n	800bff8 <_vfiprintf_r+0xc0>
 800bfe0:	465b      	mov	r3, fp
 800bfe2:	4622      	mov	r2, r4
 800bfe4:	4629      	mov	r1, r5
 800bfe6:	4630      	mov	r0, r6
 800bfe8:	f7ff ff93 	bl	800bf12 <__sfputs_r>
 800bfec:	3001      	adds	r0, #1
 800bfee:	f000 80aa 	beq.w	800c146 <_vfiprintf_r+0x20e>
 800bff2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bff4:	445a      	add	r2, fp
 800bff6:	9209      	str	r2, [sp, #36]	; 0x24
 800bff8:	f89a 3000 	ldrb.w	r3, [sl]
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	f000 80a2 	beq.w	800c146 <_vfiprintf_r+0x20e>
 800c002:	2300      	movs	r3, #0
 800c004:	f04f 32ff 	mov.w	r2, #4294967295
 800c008:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c00c:	f10a 0a01 	add.w	sl, sl, #1
 800c010:	9304      	str	r3, [sp, #16]
 800c012:	9307      	str	r3, [sp, #28]
 800c014:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c018:	931a      	str	r3, [sp, #104]	; 0x68
 800c01a:	4654      	mov	r4, sl
 800c01c:	2205      	movs	r2, #5
 800c01e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c022:	4858      	ldr	r0, [pc, #352]	; (800c184 <_vfiprintf_r+0x24c>)
 800c024:	f7f4 f8e4 	bl	80001f0 <memchr>
 800c028:	9a04      	ldr	r2, [sp, #16]
 800c02a:	b9d8      	cbnz	r0, 800c064 <_vfiprintf_r+0x12c>
 800c02c:	06d1      	lsls	r1, r2, #27
 800c02e:	bf44      	itt	mi
 800c030:	2320      	movmi	r3, #32
 800c032:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c036:	0713      	lsls	r3, r2, #28
 800c038:	bf44      	itt	mi
 800c03a:	232b      	movmi	r3, #43	; 0x2b
 800c03c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c040:	f89a 3000 	ldrb.w	r3, [sl]
 800c044:	2b2a      	cmp	r3, #42	; 0x2a
 800c046:	d015      	beq.n	800c074 <_vfiprintf_r+0x13c>
 800c048:	9a07      	ldr	r2, [sp, #28]
 800c04a:	4654      	mov	r4, sl
 800c04c:	2000      	movs	r0, #0
 800c04e:	f04f 0c0a 	mov.w	ip, #10
 800c052:	4621      	mov	r1, r4
 800c054:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c058:	3b30      	subs	r3, #48	; 0x30
 800c05a:	2b09      	cmp	r3, #9
 800c05c:	d94e      	bls.n	800c0fc <_vfiprintf_r+0x1c4>
 800c05e:	b1b0      	cbz	r0, 800c08e <_vfiprintf_r+0x156>
 800c060:	9207      	str	r2, [sp, #28]
 800c062:	e014      	b.n	800c08e <_vfiprintf_r+0x156>
 800c064:	eba0 0308 	sub.w	r3, r0, r8
 800c068:	fa09 f303 	lsl.w	r3, r9, r3
 800c06c:	4313      	orrs	r3, r2
 800c06e:	9304      	str	r3, [sp, #16]
 800c070:	46a2      	mov	sl, r4
 800c072:	e7d2      	b.n	800c01a <_vfiprintf_r+0xe2>
 800c074:	9b03      	ldr	r3, [sp, #12]
 800c076:	1d19      	adds	r1, r3, #4
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	9103      	str	r1, [sp, #12]
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	bfbb      	ittet	lt
 800c080:	425b      	neglt	r3, r3
 800c082:	f042 0202 	orrlt.w	r2, r2, #2
 800c086:	9307      	strge	r3, [sp, #28]
 800c088:	9307      	strlt	r3, [sp, #28]
 800c08a:	bfb8      	it	lt
 800c08c:	9204      	strlt	r2, [sp, #16]
 800c08e:	7823      	ldrb	r3, [r4, #0]
 800c090:	2b2e      	cmp	r3, #46	; 0x2e
 800c092:	d10c      	bne.n	800c0ae <_vfiprintf_r+0x176>
 800c094:	7863      	ldrb	r3, [r4, #1]
 800c096:	2b2a      	cmp	r3, #42	; 0x2a
 800c098:	d135      	bne.n	800c106 <_vfiprintf_r+0x1ce>
 800c09a:	9b03      	ldr	r3, [sp, #12]
 800c09c:	1d1a      	adds	r2, r3, #4
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	9203      	str	r2, [sp, #12]
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	bfb8      	it	lt
 800c0a6:	f04f 33ff 	movlt.w	r3, #4294967295
 800c0aa:	3402      	adds	r4, #2
 800c0ac:	9305      	str	r3, [sp, #20]
 800c0ae:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c194 <_vfiprintf_r+0x25c>
 800c0b2:	7821      	ldrb	r1, [r4, #0]
 800c0b4:	2203      	movs	r2, #3
 800c0b6:	4650      	mov	r0, sl
 800c0b8:	f7f4 f89a 	bl	80001f0 <memchr>
 800c0bc:	b140      	cbz	r0, 800c0d0 <_vfiprintf_r+0x198>
 800c0be:	2340      	movs	r3, #64	; 0x40
 800c0c0:	eba0 000a 	sub.w	r0, r0, sl
 800c0c4:	fa03 f000 	lsl.w	r0, r3, r0
 800c0c8:	9b04      	ldr	r3, [sp, #16]
 800c0ca:	4303      	orrs	r3, r0
 800c0cc:	3401      	adds	r4, #1
 800c0ce:	9304      	str	r3, [sp, #16]
 800c0d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c0d4:	482c      	ldr	r0, [pc, #176]	; (800c188 <_vfiprintf_r+0x250>)
 800c0d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c0da:	2206      	movs	r2, #6
 800c0dc:	f7f4 f888 	bl	80001f0 <memchr>
 800c0e0:	2800      	cmp	r0, #0
 800c0e2:	d03f      	beq.n	800c164 <_vfiprintf_r+0x22c>
 800c0e4:	4b29      	ldr	r3, [pc, #164]	; (800c18c <_vfiprintf_r+0x254>)
 800c0e6:	bb1b      	cbnz	r3, 800c130 <_vfiprintf_r+0x1f8>
 800c0e8:	9b03      	ldr	r3, [sp, #12]
 800c0ea:	3307      	adds	r3, #7
 800c0ec:	f023 0307 	bic.w	r3, r3, #7
 800c0f0:	3308      	adds	r3, #8
 800c0f2:	9303      	str	r3, [sp, #12]
 800c0f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c0f6:	443b      	add	r3, r7
 800c0f8:	9309      	str	r3, [sp, #36]	; 0x24
 800c0fa:	e767      	b.n	800bfcc <_vfiprintf_r+0x94>
 800c0fc:	fb0c 3202 	mla	r2, ip, r2, r3
 800c100:	460c      	mov	r4, r1
 800c102:	2001      	movs	r0, #1
 800c104:	e7a5      	b.n	800c052 <_vfiprintf_r+0x11a>
 800c106:	2300      	movs	r3, #0
 800c108:	3401      	adds	r4, #1
 800c10a:	9305      	str	r3, [sp, #20]
 800c10c:	4619      	mov	r1, r3
 800c10e:	f04f 0c0a 	mov.w	ip, #10
 800c112:	4620      	mov	r0, r4
 800c114:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c118:	3a30      	subs	r2, #48	; 0x30
 800c11a:	2a09      	cmp	r2, #9
 800c11c:	d903      	bls.n	800c126 <_vfiprintf_r+0x1ee>
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d0c5      	beq.n	800c0ae <_vfiprintf_r+0x176>
 800c122:	9105      	str	r1, [sp, #20]
 800c124:	e7c3      	b.n	800c0ae <_vfiprintf_r+0x176>
 800c126:	fb0c 2101 	mla	r1, ip, r1, r2
 800c12a:	4604      	mov	r4, r0
 800c12c:	2301      	movs	r3, #1
 800c12e:	e7f0      	b.n	800c112 <_vfiprintf_r+0x1da>
 800c130:	ab03      	add	r3, sp, #12
 800c132:	9300      	str	r3, [sp, #0]
 800c134:	462a      	mov	r2, r5
 800c136:	4b16      	ldr	r3, [pc, #88]	; (800c190 <_vfiprintf_r+0x258>)
 800c138:	a904      	add	r1, sp, #16
 800c13a:	4630      	mov	r0, r6
 800c13c:	f3af 8000 	nop.w
 800c140:	4607      	mov	r7, r0
 800c142:	1c78      	adds	r0, r7, #1
 800c144:	d1d6      	bne.n	800c0f4 <_vfiprintf_r+0x1bc>
 800c146:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c148:	07d9      	lsls	r1, r3, #31
 800c14a:	d405      	bmi.n	800c158 <_vfiprintf_r+0x220>
 800c14c:	89ab      	ldrh	r3, [r5, #12]
 800c14e:	059a      	lsls	r2, r3, #22
 800c150:	d402      	bmi.n	800c158 <_vfiprintf_r+0x220>
 800c152:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c154:	f000 fc45 	bl	800c9e2 <__retarget_lock_release_recursive>
 800c158:	89ab      	ldrh	r3, [r5, #12]
 800c15a:	065b      	lsls	r3, r3, #25
 800c15c:	f53f af12 	bmi.w	800bf84 <_vfiprintf_r+0x4c>
 800c160:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c162:	e711      	b.n	800bf88 <_vfiprintf_r+0x50>
 800c164:	ab03      	add	r3, sp, #12
 800c166:	9300      	str	r3, [sp, #0]
 800c168:	462a      	mov	r2, r5
 800c16a:	4b09      	ldr	r3, [pc, #36]	; (800c190 <_vfiprintf_r+0x258>)
 800c16c:	a904      	add	r1, sp, #16
 800c16e:	4630      	mov	r0, r6
 800c170:	f000 f880 	bl	800c274 <_printf_i>
 800c174:	e7e4      	b.n	800c140 <_vfiprintf_r+0x208>
 800c176:	bf00      	nop
 800c178:	0800cf8c 	.word	0x0800cf8c
 800c17c:	0800cfac 	.word	0x0800cfac
 800c180:	0800cf6c 	.word	0x0800cf6c
 800c184:	0800cf36 	.word	0x0800cf36
 800c188:	0800cf40 	.word	0x0800cf40
 800c18c:	00000000 	.word	0x00000000
 800c190:	0800bf13 	.word	0x0800bf13
 800c194:	0800cf3c 	.word	0x0800cf3c

0800c198 <_printf_common>:
 800c198:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c19c:	4616      	mov	r6, r2
 800c19e:	4699      	mov	r9, r3
 800c1a0:	688a      	ldr	r2, [r1, #8]
 800c1a2:	690b      	ldr	r3, [r1, #16]
 800c1a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c1a8:	4293      	cmp	r3, r2
 800c1aa:	bfb8      	it	lt
 800c1ac:	4613      	movlt	r3, r2
 800c1ae:	6033      	str	r3, [r6, #0]
 800c1b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c1b4:	4607      	mov	r7, r0
 800c1b6:	460c      	mov	r4, r1
 800c1b8:	b10a      	cbz	r2, 800c1be <_printf_common+0x26>
 800c1ba:	3301      	adds	r3, #1
 800c1bc:	6033      	str	r3, [r6, #0]
 800c1be:	6823      	ldr	r3, [r4, #0]
 800c1c0:	0699      	lsls	r1, r3, #26
 800c1c2:	bf42      	ittt	mi
 800c1c4:	6833      	ldrmi	r3, [r6, #0]
 800c1c6:	3302      	addmi	r3, #2
 800c1c8:	6033      	strmi	r3, [r6, #0]
 800c1ca:	6825      	ldr	r5, [r4, #0]
 800c1cc:	f015 0506 	ands.w	r5, r5, #6
 800c1d0:	d106      	bne.n	800c1e0 <_printf_common+0x48>
 800c1d2:	f104 0a19 	add.w	sl, r4, #25
 800c1d6:	68e3      	ldr	r3, [r4, #12]
 800c1d8:	6832      	ldr	r2, [r6, #0]
 800c1da:	1a9b      	subs	r3, r3, r2
 800c1dc:	42ab      	cmp	r3, r5
 800c1de:	dc26      	bgt.n	800c22e <_printf_common+0x96>
 800c1e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c1e4:	1e13      	subs	r3, r2, #0
 800c1e6:	6822      	ldr	r2, [r4, #0]
 800c1e8:	bf18      	it	ne
 800c1ea:	2301      	movne	r3, #1
 800c1ec:	0692      	lsls	r2, r2, #26
 800c1ee:	d42b      	bmi.n	800c248 <_printf_common+0xb0>
 800c1f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c1f4:	4649      	mov	r1, r9
 800c1f6:	4638      	mov	r0, r7
 800c1f8:	47c0      	blx	r8
 800c1fa:	3001      	adds	r0, #1
 800c1fc:	d01e      	beq.n	800c23c <_printf_common+0xa4>
 800c1fe:	6823      	ldr	r3, [r4, #0]
 800c200:	68e5      	ldr	r5, [r4, #12]
 800c202:	6832      	ldr	r2, [r6, #0]
 800c204:	f003 0306 	and.w	r3, r3, #6
 800c208:	2b04      	cmp	r3, #4
 800c20a:	bf08      	it	eq
 800c20c:	1aad      	subeq	r5, r5, r2
 800c20e:	68a3      	ldr	r3, [r4, #8]
 800c210:	6922      	ldr	r2, [r4, #16]
 800c212:	bf0c      	ite	eq
 800c214:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c218:	2500      	movne	r5, #0
 800c21a:	4293      	cmp	r3, r2
 800c21c:	bfc4      	itt	gt
 800c21e:	1a9b      	subgt	r3, r3, r2
 800c220:	18ed      	addgt	r5, r5, r3
 800c222:	2600      	movs	r6, #0
 800c224:	341a      	adds	r4, #26
 800c226:	42b5      	cmp	r5, r6
 800c228:	d11a      	bne.n	800c260 <_printf_common+0xc8>
 800c22a:	2000      	movs	r0, #0
 800c22c:	e008      	b.n	800c240 <_printf_common+0xa8>
 800c22e:	2301      	movs	r3, #1
 800c230:	4652      	mov	r2, sl
 800c232:	4649      	mov	r1, r9
 800c234:	4638      	mov	r0, r7
 800c236:	47c0      	blx	r8
 800c238:	3001      	adds	r0, #1
 800c23a:	d103      	bne.n	800c244 <_printf_common+0xac>
 800c23c:	f04f 30ff 	mov.w	r0, #4294967295
 800c240:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c244:	3501      	adds	r5, #1
 800c246:	e7c6      	b.n	800c1d6 <_printf_common+0x3e>
 800c248:	18e1      	adds	r1, r4, r3
 800c24a:	1c5a      	adds	r2, r3, #1
 800c24c:	2030      	movs	r0, #48	; 0x30
 800c24e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c252:	4422      	add	r2, r4
 800c254:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c258:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c25c:	3302      	adds	r3, #2
 800c25e:	e7c7      	b.n	800c1f0 <_printf_common+0x58>
 800c260:	2301      	movs	r3, #1
 800c262:	4622      	mov	r2, r4
 800c264:	4649      	mov	r1, r9
 800c266:	4638      	mov	r0, r7
 800c268:	47c0      	blx	r8
 800c26a:	3001      	adds	r0, #1
 800c26c:	d0e6      	beq.n	800c23c <_printf_common+0xa4>
 800c26e:	3601      	adds	r6, #1
 800c270:	e7d9      	b.n	800c226 <_printf_common+0x8e>
	...

0800c274 <_printf_i>:
 800c274:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c278:	460c      	mov	r4, r1
 800c27a:	4691      	mov	r9, r2
 800c27c:	7e27      	ldrb	r7, [r4, #24]
 800c27e:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c280:	2f78      	cmp	r7, #120	; 0x78
 800c282:	4680      	mov	r8, r0
 800c284:	469a      	mov	sl, r3
 800c286:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c28a:	d807      	bhi.n	800c29c <_printf_i+0x28>
 800c28c:	2f62      	cmp	r7, #98	; 0x62
 800c28e:	d80a      	bhi.n	800c2a6 <_printf_i+0x32>
 800c290:	2f00      	cmp	r7, #0
 800c292:	f000 80d8 	beq.w	800c446 <_printf_i+0x1d2>
 800c296:	2f58      	cmp	r7, #88	; 0x58
 800c298:	f000 80a3 	beq.w	800c3e2 <_printf_i+0x16e>
 800c29c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c2a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c2a4:	e03a      	b.n	800c31c <_printf_i+0xa8>
 800c2a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c2aa:	2b15      	cmp	r3, #21
 800c2ac:	d8f6      	bhi.n	800c29c <_printf_i+0x28>
 800c2ae:	a001      	add	r0, pc, #4	; (adr r0, 800c2b4 <_printf_i+0x40>)
 800c2b0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800c2b4:	0800c30d 	.word	0x0800c30d
 800c2b8:	0800c321 	.word	0x0800c321
 800c2bc:	0800c29d 	.word	0x0800c29d
 800c2c0:	0800c29d 	.word	0x0800c29d
 800c2c4:	0800c29d 	.word	0x0800c29d
 800c2c8:	0800c29d 	.word	0x0800c29d
 800c2cc:	0800c321 	.word	0x0800c321
 800c2d0:	0800c29d 	.word	0x0800c29d
 800c2d4:	0800c29d 	.word	0x0800c29d
 800c2d8:	0800c29d 	.word	0x0800c29d
 800c2dc:	0800c29d 	.word	0x0800c29d
 800c2e0:	0800c42d 	.word	0x0800c42d
 800c2e4:	0800c351 	.word	0x0800c351
 800c2e8:	0800c40f 	.word	0x0800c40f
 800c2ec:	0800c29d 	.word	0x0800c29d
 800c2f0:	0800c29d 	.word	0x0800c29d
 800c2f4:	0800c44f 	.word	0x0800c44f
 800c2f8:	0800c29d 	.word	0x0800c29d
 800c2fc:	0800c351 	.word	0x0800c351
 800c300:	0800c29d 	.word	0x0800c29d
 800c304:	0800c29d 	.word	0x0800c29d
 800c308:	0800c417 	.word	0x0800c417
 800c30c:	680b      	ldr	r3, [r1, #0]
 800c30e:	1d1a      	adds	r2, r3, #4
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	600a      	str	r2, [r1, #0]
 800c314:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c318:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c31c:	2301      	movs	r3, #1
 800c31e:	e0a3      	b.n	800c468 <_printf_i+0x1f4>
 800c320:	6825      	ldr	r5, [r4, #0]
 800c322:	6808      	ldr	r0, [r1, #0]
 800c324:	062e      	lsls	r6, r5, #24
 800c326:	f100 0304 	add.w	r3, r0, #4
 800c32a:	d50a      	bpl.n	800c342 <_printf_i+0xce>
 800c32c:	6805      	ldr	r5, [r0, #0]
 800c32e:	600b      	str	r3, [r1, #0]
 800c330:	2d00      	cmp	r5, #0
 800c332:	da03      	bge.n	800c33c <_printf_i+0xc8>
 800c334:	232d      	movs	r3, #45	; 0x2d
 800c336:	426d      	negs	r5, r5
 800c338:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c33c:	485e      	ldr	r0, [pc, #376]	; (800c4b8 <_printf_i+0x244>)
 800c33e:	230a      	movs	r3, #10
 800c340:	e019      	b.n	800c376 <_printf_i+0x102>
 800c342:	f015 0f40 	tst.w	r5, #64	; 0x40
 800c346:	6805      	ldr	r5, [r0, #0]
 800c348:	600b      	str	r3, [r1, #0]
 800c34a:	bf18      	it	ne
 800c34c:	b22d      	sxthne	r5, r5
 800c34e:	e7ef      	b.n	800c330 <_printf_i+0xbc>
 800c350:	680b      	ldr	r3, [r1, #0]
 800c352:	6825      	ldr	r5, [r4, #0]
 800c354:	1d18      	adds	r0, r3, #4
 800c356:	6008      	str	r0, [r1, #0]
 800c358:	0628      	lsls	r0, r5, #24
 800c35a:	d501      	bpl.n	800c360 <_printf_i+0xec>
 800c35c:	681d      	ldr	r5, [r3, #0]
 800c35e:	e002      	b.n	800c366 <_printf_i+0xf2>
 800c360:	0669      	lsls	r1, r5, #25
 800c362:	d5fb      	bpl.n	800c35c <_printf_i+0xe8>
 800c364:	881d      	ldrh	r5, [r3, #0]
 800c366:	4854      	ldr	r0, [pc, #336]	; (800c4b8 <_printf_i+0x244>)
 800c368:	2f6f      	cmp	r7, #111	; 0x6f
 800c36a:	bf0c      	ite	eq
 800c36c:	2308      	moveq	r3, #8
 800c36e:	230a      	movne	r3, #10
 800c370:	2100      	movs	r1, #0
 800c372:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c376:	6866      	ldr	r6, [r4, #4]
 800c378:	60a6      	str	r6, [r4, #8]
 800c37a:	2e00      	cmp	r6, #0
 800c37c:	bfa2      	ittt	ge
 800c37e:	6821      	ldrge	r1, [r4, #0]
 800c380:	f021 0104 	bicge.w	r1, r1, #4
 800c384:	6021      	strge	r1, [r4, #0]
 800c386:	b90d      	cbnz	r5, 800c38c <_printf_i+0x118>
 800c388:	2e00      	cmp	r6, #0
 800c38a:	d04d      	beq.n	800c428 <_printf_i+0x1b4>
 800c38c:	4616      	mov	r6, r2
 800c38e:	fbb5 f1f3 	udiv	r1, r5, r3
 800c392:	fb03 5711 	mls	r7, r3, r1, r5
 800c396:	5dc7      	ldrb	r7, [r0, r7]
 800c398:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c39c:	462f      	mov	r7, r5
 800c39e:	42bb      	cmp	r3, r7
 800c3a0:	460d      	mov	r5, r1
 800c3a2:	d9f4      	bls.n	800c38e <_printf_i+0x11a>
 800c3a4:	2b08      	cmp	r3, #8
 800c3a6:	d10b      	bne.n	800c3c0 <_printf_i+0x14c>
 800c3a8:	6823      	ldr	r3, [r4, #0]
 800c3aa:	07df      	lsls	r7, r3, #31
 800c3ac:	d508      	bpl.n	800c3c0 <_printf_i+0x14c>
 800c3ae:	6923      	ldr	r3, [r4, #16]
 800c3b0:	6861      	ldr	r1, [r4, #4]
 800c3b2:	4299      	cmp	r1, r3
 800c3b4:	bfde      	ittt	le
 800c3b6:	2330      	movle	r3, #48	; 0x30
 800c3b8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c3bc:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c3c0:	1b92      	subs	r2, r2, r6
 800c3c2:	6122      	str	r2, [r4, #16]
 800c3c4:	f8cd a000 	str.w	sl, [sp]
 800c3c8:	464b      	mov	r3, r9
 800c3ca:	aa03      	add	r2, sp, #12
 800c3cc:	4621      	mov	r1, r4
 800c3ce:	4640      	mov	r0, r8
 800c3d0:	f7ff fee2 	bl	800c198 <_printf_common>
 800c3d4:	3001      	adds	r0, #1
 800c3d6:	d14c      	bne.n	800c472 <_printf_i+0x1fe>
 800c3d8:	f04f 30ff 	mov.w	r0, #4294967295
 800c3dc:	b004      	add	sp, #16
 800c3de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c3e2:	4835      	ldr	r0, [pc, #212]	; (800c4b8 <_printf_i+0x244>)
 800c3e4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c3e8:	6823      	ldr	r3, [r4, #0]
 800c3ea:	680e      	ldr	r6, [r1, #0]
 800c3ec:	061f      	lsls	r7, r3, #24
 800c3ee:	f856 5b04 	ldr.w	r5, [r6], #4
 800c3f2:	600e      	str	r6, [r1, #0]
 800c3f4:	d514      	bpl.n	800c420 <_printf_i+0x1ac>
 800c3f6:	07d9      	lsls	r1, r3, #31
 800c3f8:	bf44      	itt	mi
 800c3fa:	f043 0320 	orrmi.w	r3, r3, #32
 800c3fe:	6023      	strmi	r3, [r4, #0]
 800c400:	b91d      	cbnz	r5, 800c40a <_printf_i+0x196>
 800c402:	6823      	ldr	r3, [r4, #0]
 800c404:	f023 0320 	bic.w	r3, r3, #32
 800c408:	6023      	str	r3, [r4, #0]
 800c40a:	2310      	movs	r3, #16
 800c40c:	e7b0      	b.n	800c370 <_printf_i+0xfc>
 800c40e:	6823      	ldr	r3, [r4, #0]
 800c410:	f043 0320 	orr.w	r3, r3, #32
 800c414:	6023      	str	r3, [r4, #0]
 800c416:	2378      	movs	r3, #120	; 0x78
 800c418:	4828      	ldr	r0, [pc, #160]	; (800c4bc <_printf_i+0x248>)
 800c41a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c41e:	e7e3      	b.n	800c3e8 <_printf_i+0x174>
 800c420:	065e      	lsls	r6, r3, #25
 800c422:	bf48      	it	mi
 800c424:	b2ad      	uxthmi	r5, r5
 800c426:	e7e6      	b.n	800c3f6 <_printf_i+0x182>
 800c428:	4616      	mov	r6, r2
 800c42a:	e7bb      	b.n	800c3a4 <_printf_i+0x130>
 800c42c:	680b      	ldr	r3, [r1, #0]
 800c42e:	6826      	ldr	r6, [r4, #0]
 800c430:	6960      	ldr	r0, [r4, #20]
 800c432:	1d1d      	adds	r5, r3, #4
 800c434:	600d      	str	r5, [r1, #0]
 800c436:	0635      	lsls	r5, r6, #24
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	d501      	bpl.n	800c440 <_printf_i+0x1cc>
 800c43c:	6018      	str	r0, [r3, #0]
 800c43e:	e002      	b.n	800c446 <_printf_i+0x1d2>
 800c440:	0671      	lsls	r1, r6, #25
 800c442:	d5fb      	bpl.n	800c43c <_printf_i+0x1c8>
 800c444:	8018      	strh	r0, [r3, #0]
 800c446:	2300      	movs	r3, #0
 800c448:	6123      	str	r3, [r4, #16]
 800c44a:	4616      	mov	r6, r2
 800c44c:	e7ba      	b.n	800c3c4 <_printf_i+0x150>
 800c44e:	680b      	ldr	r3, [r1, #0]
 800c450:	1d1a      	adds	r2, r3, #4
 800c452:	600a      	str	r2, [r1, #0]
 800c454:	681e      	ldr	r6, [r3, #0]
 800c456:	6862      	ldr	r2, [r4, #4]
 800c458:	2100      	movs	r1, #0
 800c45a:	4630      	mov	r0, r6
 800c45c:	f7f3 fec8 	bl	80001f0 <memchr>
 800c460:	b108      	cbz	r0, 800c466 <_printf_i+0x1f2>
 800c462:	1b80      	subs	r0, r0, r6
 800c464:	6060      	str	r0, [r4, #4]
 800c466:	6863      	ldr	r3, [r4, #4]
 800c468:	6123      	str	r3, [r4, #16]
 800c46a:	2300      	movs	r3, #0
 800c46c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c470:	e7a8      	b.n	800c3c4 <_printf_i+0x150>
 800c472:	6923      	ldr	r3, [r4, #16]
 800c474:	4632      	mov	r2, r6
 800c476:	4649      	mov	r1, r9
 800c478:	4640      	mov	r0, r8
 800c47a:	47d0      	blx	sl
 800c47c:	3001      	adds	r0, #1
 800c47e:	d0ab      	beq.n	800c3d8 <_printf_i+0x164>
 800c480:	6823      	ldr	r3, [r4, #0]
 800c482:	079b      	lsls	r3, r3, #30
 800c484:	d413      	bmi.n	800c4ae <_printf_i+0x23a>
 800c486:	68e0      	ldr	r0, [r4, #12]
 800c488:	9b03      	ldr	r3, [sp, #12]
 800c48a:	4298      	cmp	r0, r3
 800c48c:	bfb8      	it	lt
 800c48e:	4618      	movlt	r0, r3
 800c490:	e7a4      	b.n	800c3dc <_printf_i+0x168>
 800c492:	2301      	movs	r3, #1
 800c494:	4632      	mov	r2, r6
 800c496:	4649      	mov	r1, r9
 800c498:	4640      	mov	r0, r8
 800c49a:	47d0      	blx	sl
 800c49c:	3001      	adds	r0, #1
 800c49e:	d09b      	beq.n	800c3d8 <_printf_i+0x164>
 800c4a0:	3501      	adds	r5, #1
 800c4a2:	68e3      	ldr	r3, [r4, #12]
 800c4a4:	9903      	ldr	r1, [sp, #12]
 800c4a6:	1a5b      	subs	r3, r3, r1
 800c4a8:	42ab      	cmp	r3, r5
 800c4aa:	dcf2      	bgt.n	800c492 <_printf_i+0x21e>
 800c4ac:	e7eb      	b.n	800c486 <_printf_i+0x212>
 800c4ae:	2500      	movs	r5, #0
 800c4b0:	f104 0619 	add.w	r6, r4, #25
 800c4b4:	e7f5      	b.n	800c4a2 <_printf_i+0x22e>
 800c4b6:	bf00      	nop
 800c4b8:	0800cf47 	.word	0x0800cf47
 800c4bc:	0800cf58 	.word	0x0800cf58

0800c4c0 <_sbrk_r>:
 800c4c0:	b538      	push	{r3, r4, r5, lr}
 800c4c2:	4d06      	ldr	r5, [pc, #24]	; (800c4dc <_sbrk_r+0x1c>)
 800c4c4:	2300      	movs	r3, #0
 800c4c6:	4604      	mov	r4, r0
 800c4c8:	4608      	mov	r0, r1
 800c4ca:	602b      	str	r3, [r5, #0]
 800c4cc:	f000 fc22 	bl	800cd14 <_sbrk>
 800c4d0:	1c43      	adds	r3, r0, #1
 800c4d2:	d102      	bne.n	800c4da <_sbrk_r+0x1a>
 800c4d4:	682b      	ldr	r3, [r5, #0]
 800c4d6:	b103      	cbz	r3, 800c4da <_sbrk_r+0x1a>
 800c4d8:	6023      	str	r3, [r4, #0]
 800c4da:	bd38      	pop	{r3, r4, r5, pc}
 800c4dc:	20009f44 	.word	0x20009f44

0800c4e0 <__swbuf_r>:
 800c4e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4e2:	460e      	mov	r6, r1
 800c4e4:	4614      	mov	r4, r2
 800c4e6:	4605      	mov	r5, r0
 800c4e8:	b118      	cbz	r0, 800c4f2 <__swbuf_r+0x12>
 800c4ea:	6983      	ldr	r3, [r0, #24]
 800c4ec:	b90b      	cbnz	r3, 800c4f2 <__swbuf_r+0x12>
 800c4ee:	f000 f9d9 	bl	800c8a4 <__sinit>
 800c4f2:	4b21      	ldr	r3, [pc, #132]	; (800c578 <__swbuf_r+0x98>)
 800c4f4:	429c      	cmp	r4, r3
 800c4f6:	d12b      	bne.n	800c550 <__swbuf_r+0x70>
 800c4f8:	686c      	ldr	r4, [r5, #4]
 800c4fa:	69a3      	ldr	r3, [r4, #24]
 800c4fc:	60a3      	str	r3, [r4, #8]
 800c4fe:	89a3      	ldrh	r3, [r4, #12]
 800c500:	071a      	lsls	r2, r3, #28
 800c502:	d52f      	bpl.n	800c564 <__swbuf_r+0x84>
 800c504:	6923      	ldr	r3, [r4, #16]
 800c506:	b36b      	cbz	r3, 800c564 <__swbuf_r+0x84>
 800c508:	6923      	ldr	r3, [r4, #16]
 800c50a:	6820      	ldr	r0, [r4, #0]
 800c50c:	1ac0      	subs	r0, r0, r3
 800c50e:	6963      	ldr	r3, [r4, #20]
 800c510:	b2f6      	uxtb	r6, r6
 800c512:	4283      	cmp	r3, r0
 800c514:	4637      	mov	r7, r6
 800c516:	dc04      	bgt.n	800c522 <__swbuf_r+0x42>
 800c518:	4621      	mov	r1, r4
 800c51a:	4628      	mov	r0, r5
 800c51c:	f000 f92e 	bl	800c77c <_fflush_r>
 800c520:	bb30      	cbnz	r0, 800c570 <__swbuf_r+0x90>
 800c522:	68a3      	ldr	r3, [r4, #8]
 800c524:	3b01      	subs	r3, #1
 800c526:	60a3      	str	r3, [r4, #8]
 800c528:	6823      	ldr	r3, [r4, #0]
 800c52a:	1c5a      	adds	r2, r3, #1
 800c52c:	6022      	str	r2, [r4, #0]
 800c52e:	701e      	strb	r6, [r3, #0]
 800c530:	6963      	ldr	r3, [r4, #20]
 800c532:	3001      	adds	r0, #1
 800c534:	4283      	cmp	r3, r0
 800c536:	d004      	beq.n	800c542 <__swbuf_r+0x62>
 800c538:	89a3      	ldrh	r3, [r4, #12]
 800c53a:	07db      	lsls	r3, r3, #31
 800c53c:	d506      	bpl.n	800c54c <__swbuf_r+0x6c>
 800c53e:	2e0a      	cmp	r6, #10
 800c540:	d104      	bne.n	800c54c <__swbuf_r+0x6c>
 800c542:	4621      	mov	r1, r4
 800c544:	4628      	mov	r0, r5
 800c546:	f000 f919 	bl	800c77c <_fflush_r>
 800c54a:	b988      	cbnz	r0, 800c570 <__swbuf_r+0x90>
 800c54c:	4638      	mov	r0, r7
 800c54e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c550:	4b0a      	ldr	r3, [pc, #40]	; (800c57c <__swbuf_r+0x9c>)
 800c552:	429c      	cmp	r4, r3
 800c554:	d101      	bne.n	800c55a <__swbuf_r+0x7a>
 800c556:	68ac      	ldr	r4, [r5, #8]
 800c558:	e7cf      	b.n	800c4fa <__swbuf_r+0x1a>
 800c55a:	4b09      	ldr	r3, [pc, #36]	; (800c580 <__swbuf_r+0xa0>)
 800c55c:	429c      	cmp	r4, r3
 800c55e:	bf08      	it	eq
 800c560:	68ec      	ldreq	r4, [r5, #12]
 800c562:	e7ca      	b.n	800c4fa <__swbuf_r+0x1a>
 800c564:	4621      	mov	r1, r4
 800c566:	4628      	mov	r0, r5
 800c568:	f000 f80c 	bl	800c584 <__swsetup_r>
 800c56c:	2800      	cmp	r0, #0
 800c56e:	d0cb      	beq.n	800c508 <__swbuf_r+0x28>
 800c570:	f04f 37ff 	mov.w	r7, #4294967295
 800c574:	e7ea      	b.n	800c54c <__swbuf_r+0x6c>
 800c576:	bf00      	nop
 800c578:	0800cf8c 	.word	0x0800cf8c
 800c57c:	0800cfac 	.word	0x0800cfac
 800c580:	0800cf6c 	.word	0x0800cf6c

0800c584 <__swsetup_r>:
 800c584:	4b32      	ldr	r3, [pc, #200]	; (800c650 <__swsetup_r+0xcc>)
 800c586:	b570      	push	{r4, r5, r6, lr}
 800c588:	681d      	ldr	r5, [r3, #0]
 800c58a:	4606      	mov	r6, r0
 800c58c:	460c      	mov	r4, r1
 800c58e:	b125      	cbz	r5, 800c59a <__swsetup_r+0x16>
 800c590:	69ab      	ldr	r3, [r5, #24]
 800c592:	b913      	cbnz	r3, 800c59a <__swsetup_r+0x16>
 800c594:	4628      	mov	r0, r5
 800c596:	f000 f985 	bl	800c8a4 <__sinit>
 800c59a:	4b2e      	ldr	r3, [pc, #184]	; (800c654 <__swsetup_r+0xd0>)
 800c59c:	429c      	cmp	r4, r3
 800c59e:	d10f      	bne.n	800c5c0 <__swsetup_r+0x3c>
 800c5a0:	686c      	ldr	r4, [r5, #4]
 800c5a2:	89a3      	ldrh	r3, [r4, #12]
 800c5a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c5a8:	0719      	lsls	r1, r3, #28
 800c5aa:	d42c      	bmi.n	800c606 <__swsetup_r+0x82>
 800c5ac:	06dd      	lsls	r5, r3, #27
 800c5ae:	d411      	bmi.n	800c5d4 <__swsetup_r+0x50>
 800c5b0:	2309      	movs	r3, #9
 800c5b2:	6033      	str	r3, [r6, #0]
 800c5b4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c5b8:	81a3      	strh	r3, [r4, #12]
 800c5ba:	f04f 30ff 	mov.w	r0, #4294967295
 800c5be:	e03e      	b.n	800c63e <__swsetup_r+0xba>
 800c5c0:	4b25      	ldr	r3, [pc, #148]	; (800c658 <__swsetup_r+0xd4>)
 800c5c2:	429c      	cmp	r4, r3
 800c5c4:	d101      	bne.n	800c5ca <__swsetup_r+0x46>
 800c5c6:	68ac      	ldr	r4, [r5, #8]
 800c5c8:	e7eb      	b.n	800c5a2 <__swsetup_r+0x1e>
 800c5ca:	4b24      	ldr	r3, [pc, #144]	; (800c65c <__swsetup_r+0xd8>)
 800c5cc:	429c      	cmp	r4, r3
 800c5ce:	bf08      	it	eq
 800c5d0:	68ec      	ldreq	r4, [r5, #12]
 800c5d2:	e7e6      	b.n	800c5a2 <__swsetup_r+0x1e>
 800c5d4:	0758      	lsls	r0, r3, #29
 800c5d6:	d512      	bpl.n	800c5fe <__swsetup_r+0x7a>
 800c5d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c5da:	b141      	cbz	r1, 800c5ee <__swsetup_r+0x6a>
 800c5dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c5e0:	4299      	cmp	r1, r3
 800c5e2:	d002      	beq.n	800c5ea <__swsetup_r+0x66>
 800c5e4:	4630      	mov	r0, r6
 800c5e6:	f7ff fbd3 	bl	800bd90 <_free_r>
 800c5ea:	2300      	movs	r3, #0
 800c5ec:	6363      	str	r3, [r4, #52]	; 0x34
 800c5ee:	89a3      	ldrh	r3, [r4, #12]
 800c5f0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c5f4:	81a3      	strh	r3, [r4, #12]
 800c5f6:	2300      	movs	r3, #0
 800c5f8:	6063      	str	r3, [r4, #4]
 800c5fa:	6923      	ldr	r3, [r4, #16]
 800c5fc:	6023      	str	r3, [r4, #0]
 800c5fe:	89a3      	ldrh	r3, [r4, #12]
 800c600:	f043 0308 	orr.w	r3, r3, #8
 800c604:	81a3      	strh	r3, [r4, #12]
 800c606:	6923      	ldr	r3, [r4, #16]
 800c608:	b94b      	cbnz	r3, 800c61e <__swsetup_r+0x9a>
 800c60a:	89a3      	ldrh	r3, [r4, #12]
 800c60c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c610:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c614:	d003      	beq.n	800c61e <__swsetup_r+0x9a>
 800c616:	4621      	mov	r1, r4
 800c618:	4630      	mov	r0, r6
 800c61a:	f000 fa07 	bl	800ca2c <__smakebuf_r>
 800c61e:	89a0      	ldrh	r0, [r4, #12]
 800c620:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c624:	f010 0301 	ands.w	r3, r0, #1
 800c628:	d00a      	beq.n	800c640 <__swsetup_r+0xbc>
 800c62a:	2300      	movs	r3, #0
 800c62c:	60a3      	str	r3, [r4, #8]
 800c62e:	6963      	ldr	r3, [r4, #20]
 800c630:	425b      	negs	r3, r3
 800c632:	61a3      	str	r3, [r4, #24]
 800c634:	6923      	ldr	r3, [r4, #16]
 800c636:	b943      	cbnz	r3, 800c64a <__swsetup_r+0xc6>
 800c638:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c63c:	d1ba      	bne.n	800c5b4 <__swsetup_r+0x30>
 800c63e:	bd70      	pop	{r4, r5, r6, pc}
 800c640:	0781      	lsls	r1, r0, #30
 800c642:	bf58      	it	pl
 800c644:	6963      	ldrpl	r3, [r4, #20]
 800c646:	60a3      	str	r3, [r4, #8]
 800c648:	e7f4      	b.n	800c634 <__swsetup_r+0xb0>
 800c64a:	2000      	movs	r0, #0
 800c64c:	e7f7      	b.n	800c63e <__swsetup_r+0xba>
 800c64e:	bf00      	nop
 800c650:	20000018 	.word	0x20000018
 800c654:	0800cf8c 	.word	0x0800cf8c
 800c658:	0800cfac 	.word	0x0800cfac
 800c65c:	0800cf6c 	.word	0x0800cf6c

0800c660 <abort>:
 800c660:	b508      	push	{r3, lr}
 800c662:	2006      	movs	r0, #6
 800c664:	f000 fa56 	bl	800cb14 <raise>
 800c668:	2001      	movs	r0, #1
 800c66a:	f000 fb69 	bl	800cd40 <_exit>
	...

0800c670 <__sflush_r>:
 800c670:	898a      	ldrh	r2, [r1, #12]
 800c672:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c676:	4605      	mov	r5, r0
 800c678:	0710      	lsls	r0, r2, #28
 800c67a:	460c      	mov	r4, r1
 800c67c:	d458      	bmi.n	800c730 <__sflush_r+0xc0>
 800c67e:	684b      	ldr	r3, [r1, #4]
 800c680:	2b00      	cmp	r3, #0
 800c682:	dc05      	bgt.n	800c690 <__sflush_r+0x20>
 800c684:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c686:	2b00      	cmp	r3, #0
 800c688:	dc02      	bgt.n	800c690 <__sflush_r+0x20>
 800c68a:	2000      	movs	r0, #0
 800c68c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c690:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c692:	2e00      	cmp	r6, #0
 800c694:	d0f9      	beq.n	800c68a <__sflush_r+0x1a>
 800c696:	2300      	movs	r3, #0
 800c698:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c69c:	682f      	ldr	r7, [r5, #0]
 800c69e:	602b      	str	r3, [r5, #0]
 800c6a0:	d032      	beq.n	800c708 <__sflush_r+0x98>
 800c6a2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c6a4:	89a3      	ldrh	r3, [r4, #12]
 800c6a6:	075a      	lsls	r2, r3, #29
 800c6a8:	d505      	bpl.n	800c6b6 <__sflush_r+0x46>
 800c6aa:	6863      	ldr	r3, [r4, #4]
 800c6ac:	1ac0      	subs	r0, r0, r3
 800c6ae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c6b0:	b10b      	cbz	r3, 800c6b6 <__sflush_r+0x46>
 800c6b2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c6b4:	1ac0      	subs	r0, r0, r3
 800c6b6:	2300      	movs	r3, #0
 800c6b8:	4602      	mov	r2, r0
 800c6ba:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c6bc:	6a21      	ldr	r1, [r4, #32]
 800c6be:	4628      	mov	r0, r5
 800c6c0:	47b0      	blx	r6
 800c6c2:	1c43      	adds	r3, r0, #1
 800c6c4:	89a3      	ldrh	r3, [r4, #12]
 800c6c6:	d106      	bne.n	800c6d6 <__sflush_r+0x66>
 800c6c8:	6829      	ldr	r1, [r5, #0]
 800c6ca:	291d      	cmp	r1, #29
 800c6cc:	d82c      	bhi.n	800c728 <__sflush_r+0xb8>
 800c6ce:	4a2a      	ldr	r2, [pc, #168]	; (800c778 <__sflush_r+0x108>)
 800c6d0:	40ca      	lsrs	r2, r1
 800c6d2:	07d6      	lsls	r6, r2, #31
 800c6d4:	d528      	bpl.n	800c728 <__sflush_r+0xb8>
 800c6d6:	2200      	movs	r2, #0
 800c6d8:	6062      	str	r2, [r4, #4]
 800c6da:	04d9      	lsls	r1, r3, #19
 800c6dc:	6922      	ldr	r2, [r4, #16]
 800c6de:	6022      	str	r2, [r4, #0]
 800c6e0:	d504      	bpl.n	800c6ec <__sflush_r+0x7c>
 800c6e2:	1c42      	adds	r2, r0, #1
 800c6e4:	d101      	bne.n	800c6ea <__sflush_r+0x7a>
 800c6e6:	682b      	ldr	r3, [r5, #0]
 800c6e8:	b903      	cbnz	r3, 800c6ec <__sflush_r+0x7c>
 800c6ea:	6560      	str	r0, [r4, #84]	; 0x54
 800c6ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c6ee:	602f      	str	r7, [r5, #0]
 800c6f0:	2900      	cmp	r1, #0
 800c6f2:	d0ca      	beq.n	800c68a <__sflush_r+0x1a>
 800c6f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c6f8:	4299      	cmp	r1, r3
 800c6fa:	d002      	beq.n	800c702 <__sflush_r+0x92>
 800c6fc:	4628      	mov	r0, r5
 800c6fe:	f7ff fb47 	bl	800bd90 <_free_r>
 800c702:	2000      	movs	r0, #0
 800c704:	6360      	str	r0, [r4, #52]	; 0x34
 800c706:	e7c1      	b.n	800c68c <__sflush_r+0x1c>
 800c708:	6a21      	ldr	r1, [r4, #32]
 800c70a:	2301      	movs	r3, #1
 800c70c:	4628      	mov	r0, r5
 800c70e:	47b0      	blx	r6
 800c710:	1c41      	adds	r1, r0, #1
 800c712:	d1c7      	bne.n	800c6a4 <__sflush_r+0x34>
 800c714:	682b      	ldr	r3, [r5, #0]
 800c716:	2b00      	cmp	r3, #0
 800c718:	d0c4      	beq.n	800c6a4 <__sflush_r+0x34>
 800c71a:	2b1d      	cmp	r3, #29
 800c71c:	d001      	beq.n	800c722 <__sflush_r+0xb2>
 800c71e:	2b16      	cmp	r3, #22
 800c720:	d101      	bne.n	800c726 <__sflush_r+0xb6>
 800c722:	602f      	str	r7, [r5, #0]
 800c724:	e7b1      	b.n	800c68a <__sflush_r+0x1a>
 800c726:	89a3      	ldrh	r3, [r4, #12]
 800c728:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c72c:	81a3      	strh	r3, [r4, #12]
 800c72e:	e7ad      	b.n	800c68c <__sflush_r+0x1c>
 800c730:	690f      	ldr	r7, [r1, #16]
 800c732:	2f00      	cmp	r7, #0
 800c734:	d0a9      	beq.n	800c68a <__sflush_r+0x1a>
 800c736:	0793      	lsls	r3, r2, #30
 800c738:	680e      	ldr	r6, [r1, #0]
 800c73a:	bf08      	it	eq
 800c73c:	694b      	ldreq	r3, [r1, #20]
 800c73e:	600f      	str	r7, [r1, #0]
 800c740:	bf18      	it	ne
 800c742:	2300      	movne	r3, #0
 800c744:	eba6 0807 	sub.w	r8, r6, r7
 800c748:	608b      	str	r3, [r1, #8]
 800c74a:	f1b8 0f00 	cmp.w	r8, #0
 800c74e:	dd9c      	ble.n	800c68a <__sflush_r+0x1a>
 800c750:	6a21      	ldr	r1, [r4, #32]
 800c752:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c754:	4643      	mov	r3, r8
 800c756:	463a      	mov	r2, r7
 800c758:	4628      	mov	r0, r5
 800c75a:	47b0      	blx	r6
 800c75c:	2800      	cmp	r0, #0
 800c75e:	dc06      	bgt.n	800c76e <__sflush_r+0xfe>
 800c760:	89a3      	ldrh	r3, [r4, #12]
 800c762:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c766:	81a3      	strh	r3, [r4, #12]
 800c768:	f04f 30ff 	mov.w	r0, #4294967295
 800c76c:	e78e      	b.n	800c68c <__sflush_r+0x1c>
 800c76e:	4407      	add	r7, r0
 800c770:	eba8 0800 	sub.w	r8, r8, r0
 800c774:	e7e9      	b.n	800c74a <__sflush_r+0xda>
 800c776:	bf00      	nop
 800c778:	20400001 	.word	0x20400001

0800c77c <_fflush_r>:
 800c77c:	b538      	push	{r3, r4, r5, lr}
 800c77e:	690b      	ldr	r3, [r1, #16]
 800c780:	4605      	mov	r5, r0
 800c782:	460c      	mov	r4, r1
 800c784:	b913      	cbnz	r3, 800c78c <_fflush_r+0x10>
 800c786:	2500      	movs	r5, #0
 800c788:	4628      	mov	r0, r5
 800c78a:	bd38      	pop	{r3, r4, r5, pc}
 800c78c:	b118      	cbz	r0, 800c796 <_fflush_r+0x1a>
 800c78e:	6983      	ldr	r3, [r0, #24]
 800c790:	b90b      	cbnz	r3, 800c796 <_fflush_r+0x1a>
 800c792:	f000 f887 	bl	800c8a4 <__sinit>
 800c796:	4b14      	ldr	r3, [pc, #80]	; (800c7e8 <_fflush_r+0x6c>)
 800c798:	429c      	cmp	r4, r3
 800c79a:	d11b      	bne.n	800c7d4 <_fflush_r+0x58>
 800c79c:	686c      	ldr	r4, [r5, #4]
 800c79e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d0ef      	beq.n	800c786 <_fflush_r+0xa>
 800c7a6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c7a8:	07d0      	lsls	r0, r2, #31
 800c7aa:	d404      	bmi.n	800c7b6 <_fflush_r+0x3a>
 800c7ac:	0599      	lsls	r1, r3, #22
 800c7ae:	d402      	bmi.n	800c7b6 <_fflush_r+0x3a>
 800c7b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c7b2:	f000 f915 	bl	800c9e0 <__retarget_lock_acquire_recursive>
 800c7b6:	4628      	mov	r0, r5
 800c7b8:	4621      	mov	r1, r4
 800c7ba:	f7ff ff59 	bl	800c670 <__sflush_r>
 800c7be:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c7c0:	07da      	lsls	r2, r3, #31
 800c7c2:	4605      	mov	r5, r0
 800c7c4:	d4e0      	bmi.n	800c788 <_fflush_r+0xc>
 800c7c6:	89a3      	ldrh	r3, [r4, #12]
 800c7c8:	059b      	lsls	r3, r3, #22
 800c7ca:	d4dd      	bmi.n	800c788 <_fflush_r+0xc>
 800c7cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c7ce:	f000 f908 	bl	800c9e2 <__retarget_lock_release_recursive>
 800c7d2:	e7d9      	b.n	800c788 <_fflush_r+0xc>
 800c7d4:	4b05      	ldr	r3, [pc, #20]	; (800c7ec <_fflush_r+0x70>)
 800c7d6:	429c      	cmp	r4, r3
 800c7d8:	d101      	bne.n	800c7de <_fflush_r+0x62>
 800c7da:	68ac      	ldr	r4, [r5, #8]
 800c7dc:	e7df      	b.n	800c79e <_fflush_r+0x22>
 800c7de:	4b04      	ldr	r3, [pc, #16]	; (800c7f0 <_fflush_r+0x74>)
 800c7e0:	429c      	cmp	r4, r3
 800c7e2:	bf08      	it	eq
 800c7e4:	68ec      	ldreq	r4, [r5, #12]
 800c7e6:	e7da      	b.n	800c79e <_fflush_r+0x22>
 800c7e8:	0800cf8c 	.word	0x0800cf8c
 800c7ec:	0800cfac 	.word	0x0800cfac
 800c7f0:	0800cf6c 	.word	0x0800cf6c

0800c7f4 <std>:
 800c7f4:	2300      	movs	r3, #0
 800c7f6:	b510      	push	{r4, lr}
 800c7f8:	4604      	mov	r4, r0
 800c7fa:	e9c0 3300 	strd	r3, r3, [r0]
 800c7fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c802:	6083      	str	r3, [r0, #8]
 800c804:	8181      	strh	r1, [r0, #12]
 800c806:	6643      	str	r3, [r0, #100]	; 0x64
 800c808:	81c2      	strh	r2, [r0, #14]
 800c80a:	6183      	str	r3, [r0, #24]
 800c80c:	4619      	mov	r1, r3
 800c80e:	2208      	movs	r2, #8
 800c810:	305c      	adds	r0, #92	; 0x5c
 800c812:	f7ff fa3d 	bl	800bc90 <memset>
 800c816:	4b05      	ldr	r3, [pc, #20]	; (800c82c <std+0x38>)
 800c818:	6263      	str	r3, [r4, #36]	; 0x24
 800c81a:	4b05      	ldr	r3, [pc, #20]	; (800c830 <std+0x3c>)
 800c81c:	62a3      	str	r3, [r4, #40]	; 0x28
 800c81e:	4b05      	ldr	r3, [pc, #20]	; (800c834 <std+0x40>)
 800c820:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c822:	4b05      	ldr	r3, [pc, #20]	; (800c838 <std+0x44>)
 800c824:	6224      	str	r4, [r4, #32]
 800c826:	6323      	str	r3, [r4, #48]	; 0x30
 800c828:	bd10      	pop	{r4, pc}
 800c82a:	bf00      	nop
 800c82c:	0800cb4d 	.word	0x0800cb4d
 800c830:	0800cb6f 	.word	0x0800cb6f
 800c834:	0800cba7 	.word	0x0800cba7
 800c838:	0800cbcb 	.word	0x0800cbcb

0800c83c <_cleanup_r>:
 800c83c:	4901      	ldr	r1, [pc, #4]	; (800c844 <_cleanup_r+0x8>)
 800c83e:	f000 b8af 	b.w	800c9a0 <_fwalk_reent>
 800c842:	bf00      	nop
 800c844:	0800c77d 	.word	0x0800c77d

0800c848 <__sfmoreglue>:
 800c848:	b570      	push	{r4, r5, r6, lr}
 800c84a:	1e4a      	subs	r2, r1, #1
 800c84c:	2568      	movs	r5, #104	; 0x68
 800c84e:	4355      	muls	r5, r2
 800c850:	460e      	mov	r6, r1
 800c852:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c856:	f7ff faeb 	bl	800be30 <_malloc_r>
 800c85a:	4604      	mov	r4, r0
 800c85c:	b140      	cbz	r0, 800c870 <__sfmoreglue+0x28>
 800c85e:	2100      	movs	r1, #0
 800c860:	e9c0 1600 	strd	r1, r6, [r0]
 800c864:	300c      	adds	r0, #12
 800c866:	60a0      	str	r0, [r4, #8]
 800c868:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c86c:	f7ff fa10 	bl	800bc90 <memset>
 800c870:	4620      	mov	r0, r4
 800c872:	bd70      	pop	{r4, r5, r6, pc}

0800c874 <__sfp_lock_acquire>:
 800c874:	4801      	ldr	r0, [pc, #4]	; (800c87c <__sfp_lock_acquire+0x8>)
 800c876:	f000 b8b3 	b.w	800c9e0 <__retarget_lock_acquire_recursive>
 800c87a:	bf00      	nop
 800c87c:	20009f40 	.word	0x20009f40

0800c880 <__sfp_lock_release>:
 800c880:	4801      	ldr	r0, [pc, #4]	; (800c888 <__sfp_lock_release+0x8>)
 800c882:	f000 b8ae 	b.w	800c9e2 <__retarget_lock_release_recursive>
 800c886:	bf00      	nop
 800c888:	20009f40 	.word	0x20009f40

0800c88c <__sinit_lock_acquire>:
 800c88c:	4801      	ldr	r0, [pc, #4]	; (800c894 <__sinit_lock_acquire+0x8>)
 800c88e:	f000 b8a7 	b.w	800c9e0 <__retarget_lock_acquire_recursive>
 800c892:	bf00      	nop
 800c894:	20009f3b 	.word	0x20009f3b

0800c898 <__sinit_lock_release>:
 800c898:	4801      	ldr	r0, [pc, #4]	; (800c8a0 <__sinit_lock_release+0x8>)
 800c89a:	f000 b8a2 	b.w	800c9e2 <__retarget_lock_release_recursive>
 800c89e:	bf00      	nop
 800c8a0:	20009f3b 	.word	0x20009f3b

0800c8a4 <__sinit>:
 800c8a4:	b510      	push	{r4, lr}
 800c8a6:	4604      	mov	r4, r0
 800c8a8:	f7ff fff0 	bl	800c88c <__sinit_lock_acquire>
 800c8ac:	69a3      	ldr	r3, [r4, #24]
 800c8ae:	b11b      	cbz	r3, 800c8b8 <__sinit+0x14>
 800c8b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c8b4:	f7ff bff0 	b.w	800c898 <__sinit_lock_release>
 800c8b8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c8bc:	6523      	str	r3, [r4, #80]	; 0x50
 800c8be:	4b13      	ldr	r3, [pc, #76]	; (800c90c <__sinit+0x68>)
 800c8c0:	4a13      	ldr	r2, [pc, #76]	; (800c910 <__sinit+0x6c>)
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	62a2      	str	r2, [r4, #40]	; 0x28
 800c8c6:	42a3      	cmp	r3, r4
 800c8c8:	bf04      	itt	eq
 800c8ca:	2301      	moveq	r3, #1
 800c8cc:	61a3      	streq	r3, [r4, #24]
 800c8ce:	4620      	mov	r0, r4
 800c8d0:	f000 f820 	bl	800c914 <__sfp>
 800c8d4:	6060      	str	r0, [r4, #4]
 800c8d6:	4620      	mov	r0, r4
 800c8d8:	f000 f81c 	bl	800c914 <__sfp>
 800c8dc:	60a0      	str	r0, [r4, #8]
 800c8de:	4620      	mov	r0, r4
 800c8e0:	f000 f818 	bl	800c914 <__sfp>
 800c8e4:	2200      	movs	r2, #0
 800c8e6:	60e0      	str	r0, [r4, #12]
 800c8e8:	2104      	movs	r1, #4
 800c8ea:	6860      	ldr	r0, [r4, #4]
 800c8ec:	f7ff ff82 	bl	800c7f4 <std>
 800c8f0:	68a0      	ldr	r0, [r4, #8]
 800c8f2:	2201      	movs	r2, #1
 800c8f4:	2109      	movs	r1, #9
 800c8f6:	f7ff ff7d 	bl	800c7f4 <std>
 800c8fa:	68e0      	ldr	r0, [r4, #12]
 800c8fc:	2202      	movs	r2, #2
 800c8fe:	2112      	movs	r1, #18
 800c900:	f7ff ff78 	bl	800c7f4 <std>
 800c904:	2301      	movs	r3, #1
 800c906:	61a3      	str	r3, [r4, #24]
 800c908:	e7d2      	b.n	800c8b0 <__sinit+0xc>
 800c90a:	bf00      	nop
 800c90c:	0800ce80 	.word	0x0800ce80
 800c910:	0800c83d 	.word	0x0800c83d

0800c914 <__sfp>:
 800c914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c916:	4607      	mov	r7, r0
 800c918:	f7ff ffac 	bl	800c874 <__sfp_lock_acquire>
 800c91c:	4b1e      	ldr	r3, [pc, #120]	; (800c998 <__sfp+0x84>)
 800c91e:	681e      	ldr	r6, [r3, #0]
 800c920:	69b3      	ldr	r3, [r6, #24]
 800c922:	b913      	cbnz	r3, 800c92a <__sfp+0x16>
 800c924:	4630      	mov	r0, r6
 800c926:	f7ff ffbd 	bl	800c8a4 <__sinit>
 800c92a:	3648      	adds	r6, #72	; 0x48
 800c92c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c930:	3b01      	subs	r3, #1
 800c932:	d503      	bpl.n	800c93c <__sfp+0x28>
 800c934:	6833      	ldr	r3, [r6, #0]
 800c936:	b30b      	cbz	r3, 800c97c <__sfp+0x68>
 800c938:	6836      	ldr	r6, [r6, #0]
 800c93a:	e7f7      	b.n	800c92c <__sfp+0x18>
 800c93c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c940:	b9d5      	cbnz	r5, 800c978 <__sfp+0x64>
 800c942:	4b16      	ldr	r3, [pc, #88]	; (800c99c <__sfp+0x88>)
 800c944:	60e3      	str	r3, [r4, #12]
 800c946:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c94a:	6665      	str	r5, [r4, #100]	; 0x64
 800c94c:	f000 f847 	bl	800c9de <__retarget_lock_init_recursive>
 800c950:	f7ff ff96 	bl	800c880 <__sfp_lock_release>
 800c954:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c958:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c95c:	6025      	str	r5, [r4, #0]
 800c95e:	61a5      	str	r5, [r4, #24]
 800c960:	2208      	movs	r2, #8
 800c962:	4629      	mov	r1, r5
 800c964:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c968:	f7ff f992 	bl	800bc90 <memset>
 800c96c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c970:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c974:	4620      	mov	r0, r4
 800c976:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c978:	3468      	adds	r4, #104	; 0x68
 800c97a:	e7d9      	b.n	800c930 <__sfp+0x1c>
 800c97c:	2104      	movs	r1, #4
 800c97e:	4638      	mov	r0, r7
 800c980:	f7ff ff62 	bl	800c848 <__sfmoreglue>
 800c984:	4604      	mov	r4, r0
 800c986:	6030      	str	r0, [r6, #0]
 800c988:	2800      	cmp	r0, #0
 800c98a:	d1d5      	bne.n	800c938 <__sfp+0x24>
 800c98c:	f7ff ff78 	bl	800c880 <__sfp_lock_release>
 800c990:	230c      	movs	r3, #12
 800c992:	603b      	str	r3, [r7, #0]
 800c994:	e7ee      	b.n	800c974 <__sfp+0x60>
 800c996:	bf00      	nop
 800c998:	0800ce80 	.word	0x0800ce80
 800c99c:	ffff0001 	.word	0xffff0001

0800c9a0 <_fwalk_reent>:
 800c9a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c9a4:	4606      	mov	r6, r0
 800c9a6:	4688      	mov	r8, r1
 800c9a8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c9ac:	2700      	movs	r7, #0
 800c9ae:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c9b2:	f1b9 0901 	subs.w	r9, r9, #1
 800c9b6:	d505      	bpl.n	800c9c4 <_fwalk_reent+0x24>
 800c9b8:	6824      	ldr	r4, [r4, #0]
 800c9ba:	2c00      	cmp	r4, #0
 800c9bc:	d1f7      	bne.n	800c9ae <_fwalk_reent+0xe>
 800c9be:	4638      	mov	r0, r7
 800c9c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c9c4:	89ab      	ldrh	r3, [r5, #12]
 800c9c6:	2b01      	cmp	r3, #1
 800c9c8:	d907      	bls.n	800c9da <_fwalk_reent+0x3a>
 800c9ca:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c9ce:	3301      	adds	r3, #1
 800c9d0:	d003      	beq.n	800c9da <_fwalk_reent+0x3a>
 800c9d2:	4629      	mov	r1, r5
 800c9d4:	4630      	mov	r0, r6
 800c9d6:	47c0      	blx	r8
 800c9d8:	4307      	orrs	r7, r0
 800c9da:	3568      	adds	r5, #104	; 0x68
 800c9dc:	e7e9      	b.n	800c9b2 <_fwalk_reent+0x12>

0800c9de <__retarget_lock_init_recursive>:
 800c9de:	4770      	bx	lr

0800c9e0 <__retarget_lock_acquire_recursive>:
 800c9e0:	4770      	bx	lr

0800c9e2 <__retarget_lock_release_recursive>:
 800c9e2:	4770      	bx	lr

0800c9e4 <__swhatbuf_r>:
 800c9e4:	b570      	push	{r4, r5, r6, lr}
 800c9e6:	460e      	mov	r6, r1
 800c9e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c9ec:	2900      	cmp	r1, #0
 800c9ee:	b096      	sub	sp, #88	; 0x58
 800c9f0:	4614      	mov	r4, r2
 800c9f2:	461d      	mov	r5, r3
 800c9f4:	da07      	bge.n	800ca06 <__swhatbuf_r+0x22>
 800c9f6:	2300      	movs	r3, #0
 800c9f8:	602b      	str	r3, [r5, #0]
 800c9fa:	89b3      	ldrh	r3, [r6, #12]
 800c9fc:	061a      	lsls	r2, r3, #24
 800c9fe:	d410      	bmi.n	800ca22 <__swhatbuf_r+0x3e>
 800ca00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ca04:	e00e      	b.n	800ca24 <__swhatbuf_r+0x40>
 800ca06:	466a      	mov	r2, sp
 800ca08:	f000 f906 	bl	800cc18 <_fstat_r>
 800ca0c:	2800      	cmp	r0, #0
 800ca0e:	dbf2      	blt.n	800c9f6 <__swhatbuf_r+0x12>
 800ca10:	9a01      	ldr	r2, [sp, #4]
 800ca12:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ca16:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ca1a:	425a      	negs	r2, r3
 800ca1c:	415a      	adcs	r2, r3
 800ca1e:	602a      	str	r2, [r5, #0]
 800ca20:	e7ee      	b.n	800ca00 <__swhatbuf_r+0x1c>
 800ca22:	2340      	movs	r3, #64	; 0x40
 800ca24:	2000      	movs	r0, #0
 800ca26:	6023      	str	r3, [r4, #0]
 800ca28:	b016      	add	sp, #88	; 0x58
 800ca2a:	bd70      	pop	{r4, r5, r6, pc}

0800ca2c <__smakebuf_r>:
 800ca2c:	898b      	ldrh	r3, [r1, #12]
 800ca2e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ca30:	079d      	lsls	r5, r3, #30
 800ca32:	4606      	mov	r6, r0
 800ca34:	460c      	mov	r4, r1
 800ca36:	d507      	bpl.n	800ca48 <__smakebuf_r+0x1c>
 800ca38:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ca3c:	6023      	str	r3, [r4, #0]
 800ca3e:	6123      	str	r3, [r4, #16]
 800ca40:	2301      	movs	r3, #1
 800ca42:	6163      	str	r3, [r4, #20]
 800ca44:	b002      	add	sp, #8
 800ca46:	bd70      	pop	{r4, r5, r6, pc}
 800ca48:	ab01      	add	r3, sp, #4
 800ca4a:	466a      	mov	r2, sp
 800ca4c:	f7ff ffca 	bl	800c9e4 <__swhatbuf_r>
 800ca50:	9900      	ldr	r1, [sp, #0]
 800ca52:	4605      	mov	r5, r0
 800ca54:	4630      	mov	r0, r6
 800ca56:	f7ff f9eb 	bl	800be30 <_malloc_r>
 800ca5a:	b948      	cbnz	r0, 800ca70 <__smakebuf_r+0x44>
 800ca5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ca60:	059a      	lsls	r2, r3, #22
 800ca62:	d4ef      	bmi.n	800ca44 <__smakebuf_r+0x18>
 800ca64:	f023 0303 	bic.w	r3, r3, #3
 800ca68:	f043 0302 	orr.w	r3, r3, #2
 800ca6c:	81a3      	strh	r3, [r4, #12]
 800ca6e:	e7e3      	b.n	800ca38 <__smakebuf_r+0xc>
 800ca70:	4b0d      	ldr	r3, [pc, #52]	; (800caa8 <__smakebuf_r+0x7c>)
 800ca72:	62b3      	str	r3, [r6, #40]	; 0x28
 800ca74:	89a3      	ldrh	r3, [r4, #12]
 800ca76:	6020      	str	r0, [r4, #0]
 800ca78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ca7c:	81a3      	strh	r3, [r4, #12]
 800ca7e:	9b00      	ldr	r3, [sp, #0]
 800ca80:	6163      	str	r3, [r4, #20]
 800ca82:	9b01      	ldr	r3, [sp, #4]
 800ca84:	6120      	str	r0, [r4, #16]
 800ca86:	b15b      	cbz	r3, 800caa0 <__smakebuf_r+0x74>
 800ca88:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ca8c:	4630      	mov	r0, r6
 800ca8e:	f000 f8d5 	bl	800cc3c <_isatty_r>
 800ca92:	b128      	cbz	r0, 800caa0 <__smakebuf_r+0x74>
 800ca94:	89a3      	ldrh	r3, [r4, #12]
 800ca96:	f023 0303 	bic.w	r3, r3, #3
 800ca9a:	f043 0301 	orr.w	r3, r3, #1
 800ca9e:	81a3      	strh	r3, [r4, #12]
 800caa0:	89a0      	ldrh	r0, [r4, #12]
 800caa2:	4305      	orrs	r5, r0
 800caa4:	81a5      	strh	r5, [r4, #12]
 800caa6:	e7cd      	b.n	800ca44 <__smakebuf_r+0x18>
 800caa8:	0800c83d 	.word	0x0800c83d

0800caac <__malloc_lock>:
 800caac:	4801      	ldr	r0, [pc, #4]	; (800cab4 <__malloc_lock+0x8>)
 800caae:	f7ff bf97 	b.w	800c9e0 <__retarget_lock_acquire_recursive>
 800cab2:	bf00      	nop
 800cab4:	20009f3c 	.word	0x20009f3c

0800cab8 <__malloc_unlock>:
 800cab8:	4801      	ldr	r0, [pc, #4]	; (800cac0 <__malloc_unlock+0x8>)
 800caba:	f7ff bf92 	b.w	800c9e2 <__retarget_lock_release_recursive>
 800cabe:	bf00      	nop
 800cac0:	20009f3c 	.word	0x20009f3c

0800cac4 <_raise_r>:
 800cac4:	291f      	cmp	r1, #31
 800cac6:	b538      	push	{r3, r4, r5, lr}
 800cac8:	4604      	mov	r4, r0
 800caca:	460d      	mov	r5, r1
 800cacc:	d904      	bls.n	800cad8 <_raise_r+0x14>
 800cace:	2316      	movs	r3, #22
 800cad0:	6003      	str	r3, [r0, #0]
 800cad2:	f04f 30ff 	mov.w	r0, #4294967295
 800cad6:	bd38      	pop	{r3, r4, r5, pc}
 800cad8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800cada:	b112      	cbz	r2, 800cae2 <_raise_r+0x1e>
 800cadc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cae0:	b94b      	cbnz	r3, 800caf6 <_raise_r+0x32>
 800cae2:	4620      	mov	r0, r4
 800cae4:	f000 f830 	bl	800cb48 <_getpid_r>
 800cae8:	462a      	mov	r2, r5
 800caea:	4601      	mov	r1, r0
 800caec:	4620      	mov	r0, r4
 800caee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800caf2:	f000 b817 	b.w	800cb24 <_kill_r>
 800caf6:	2b01      	cmp	r3, #1
 800caf8:	d00a      	beq.n	800cb10 <_raise_r+0x4c>
 800cafa:	1c59      	adds	r1, r3, #1
 800cafc:	d103      	bne.n	800cb06 <_raise_r+0x42>
 800cafe:	2316      	movs	r3, #22
 800cb00:	6003      	str	r3, [r0, #0]
 800cb02:	2001      	movs	r0, #1
 800cb04:	e7e7      	b.n	800cad6 <_raise_r+0x12>
 800cb06:	2400      	movs	r4, #0
 800cb08:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800cb0c:	4628      	mov	r0, r5
 800cb0e:	4798      	blx	r3
 800cb10:	2000      	movs	r0, #0
 800cb12:	e7e0      	b.n	800cad6 <_raise_r+0x12>

0800cb14 <raise>:
 800cb14:	4b02      	ldr	r3, [pc, #8]	; (800cb20 <raise+0xc>)
 800cb16:	4601      	mov	r1, r0
 800cb18:	6818      	ldr	r0, [r3, #0]
 800cb1a:	f7ff bfd3 	b.w	800cac4 <_raise_r>
 800cb1e:	bf00      	nop
 800cb20:	20000018 	.word	0x20000018

0800cb24 <_kill_r>:
 800cb24:	b538      	push	{r3, r4, r5, lr}
 800cb26:	4d07      	ldr	r5, [pc, #28]	; (800cb44 <_kill_r+0x20>)
 800cb28:	2300      	movs	r3, #0
 800cb2a:	4604      	mov	r4, r0
 800cb2c:	4608      	mov	r0, r1
 800cb2e:	4611      	mov	r1, r2
 800cb30:	602b      	str	r3, [r5, #0]
 800cb32:	f000 f8d7 	bl	800cce4 <_kill>
 800cb36:	1c43      	adds	r3, r0, #1
 800cb38:	d102      	bne.n	800cb40 <_kill_r+0x1c>
 800cb3a:	682b      	ldr	r3, [r5, #0]
 800cb3c:	b103      	cbz	r3, 800cb40 <_kill_r+0x1c>
 800cb3e:	6023      	str	r3, [r4, #0]
 800cb40:	bd38      	pop	{r3, r4, r5, pc}
 800cb42:	bf00      	nop
 800cb44:	20009f44 	.word	0x20009f44

0800cb48 <_getpid_r>:
 800cb48:	f000 b8bc 	b.w	800ccc4 <_getpid>

0800cb4c <__sread>:
 800cb4c:	b510      	push	{r4, lr}
 800cb4e:	460c      	mov	r4, r1
 800cb50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cb54:	f000 f894 	bl	800cc80 <_read_r>
 800cb58:	2800      	cmp	r0, #0
 800cb5a:	bfab      	itete	ge
 800cb5c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800cb5e:	89a3      	ldrhlt	r3, [r4, #12]
 800cb60:	181b      	addge	r3, r3, r0
 800cb62:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800cb66:	bfac      	ite	ge
 800cb68:	6563      	strge	r3, [r4, #84]	; 0x54
 800cb6a:	81a3      	strhlt	r3, [r4, #12]
 800cb6c:	bd10      	pop	{r4, pc}

0800cb6e <__swrite>:
 800cb6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb72:	461f      	mov	r7, r3
 800cb74:	898b      	ldrh	r3, [r1, #12]
 800cb76:	05db      	lsls	r3, r3, #23
 800cb78:	4605      	mov	r5, r0
 800cb7a:	460c      	mov	r4, r1
 800cb7c:	4616      	mov	r6, r2
 800cb7e:	d505      	bpl.n	800cb8c <__swrite+0x1e>
 800cb80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cb84:	2302      	movs	r3, #2
 800cb86:	2200      	movs	r2, #0
 800cb88:	f000 f868 	bl	800cc5c <_lseek_r>
 800cb8c:	89a3      	ldrh	r3, [r4, #12]
 800cb8e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cb92:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cb96:	81a3      	strh	r3, [r4, #12]
 800cb98:	4632      	mov	r2, r6
 800cb9a:	463b      	mov	r3, r7
 800cb9c:	4628      	mov	r0, r5
 800cb9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cba2:	f000 b817 	b.w	800cbd4 <_write_r>

0800cba6 <__sseek>:
 800cba6:	b510      	push	{r4, lr}
 800cba8:	460c      	mov	r4, r1
 800cbaa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cbae:	f000 f855 	bl	800cc5c <_lseek_r>
 800cbb2:	1c43      	adds	r3, r0, #1
 800cbb4:	89a3      	ldrh	r3, [r4, #12]
 800cbb6:	bf15      	itete	ne
 800cbb8:	6560      	strne	r0, [r4, #84]	; 0x54
 800cbba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800cbbe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800cbc2:	81a3      	strheq	r3, [r4, #12]
 800cbc4:	bf18      	it	ne
 800cbc6:	81a3      	strhne	r3, [r4, #12]
 800cbc8:	bd10      	pop	{r4, pc}

0800cbca <__sclose>:
 800cbca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cbce:	f000 b813 	b.w	800cbf8 <_close_r>
	...

0800cbd4 <_write_r>:
 800cbd4:	b538      	push	{r3, r4, r5, lr}
 800cbd6:	4d07      	ldr	r5, [pc, #28]	; (800cbf4 <_write_r+0x20>)
 800cbd8:	4604      	mov	r4, r0
 800cbda:	4608      	mov	r0, r1
 800cbdc:	4611      	mov	r1, r2
 800cbde:	2200      	movs	r2, #0
 800cbe0:	602a      	str	r2, [r5, #0]
 800cbe2:	461a      	mov	r2, r3
 800cbe4:	f000 f8a4 	bl	800cd30 <_write>
 800cbe8:	1c43      	adds	r3, r0, #1
 800cbea:	d102      	bne.n	800cbf2 <_write_r+0x1e>
 800cbec:	682b      	ldr	r3, [r5, #0]
 800cbee:	b103      	cbz	r3, 800cbf2 <_write_r+0x1e>
 800cbf0:	6023      	str	r3, [r4, #0]
 800cbf2:	bd38      	pop	{r3, r4, r5, pc}
 800cbf4:	20009f44 	.word	0x20009f44

0800cbf8 <_close_r>:
 800cbf8:	b538      	push	{r3, r4, r5, lr}
 800cbfa:	4d06      	ldr	r5, [pc, #24]	; (800cc14 <_close_r+0x1c>)
 800cbfc:	2300      	movs	r3, #0
 800cbfe:	4604      	mov	r4, r0
 800cc00:	4608      	mov	r0, r1
 800cc02:	602b      	str	r3, [r5, #0]
 800cc04:	f000 f84e 	bl	800cca4 <_close>
 800cc08:	1c43      	adds	r3, r0, #1
 800cc0a:	d102      	bne.n	800cc12 <_close_r+0x1a>
 800cc0c:	682b      	ldr	r3, [r5, #0]
 800cc0e:	b103      	cbz	r3, 800cc12 <_close_r+0x1a>
 800cc10:	6023      	str	r3, [r4, #0]
 800cc12:	bd38      	pop	{r3, r4, r5, pc}
 800cc14:	20009f44 	.word	0x20009f44

0800cc18 <_fstat_r>:
 800cc18:	b538      	push	{r3, r4, r5, lr}
 800cc1a:	4d07      	ldr	r5, [pc, #28]	; (800cc38 <_fstat_r+0x20>)
 800cc1c:	2300      	movs	r3, #0
 800cc1e:	4604      	mov	r4, r0
 800cc20:	4608      	mov	r0, r1
 800cc22:	4611      	mov	r1, r2
 800cc24:	602b      	str	r3, [r5, #0]
 800cc26:	f000 f845 	bl	800ccb4 <_fstat>
 800cc2a:	1c43      	adds	r3, r0, #1
 800cc2c:	d102      	bne.n	800cc34 <_fstat_r+0x1c>
 800cc2e:	682b      	ldr	r3, [r5, #0]
 800cc30:	b103      	cbz	r3, 800cc34 <_fstat_r+0x1c>
 800cc32:	6023      	str	r3, [r4, #0]
 800cc34:	bd38      	pop	{r3, r4, r5, pc}
 800cc36:	bf00      	nop
 800cc38:	20009f44 	.word	0x20009f44

0800cc3c <_isatty_r>:
 800cc3c:	b538      	push	{r3, r4, r5, lr}
 800cc3e:	4d06      	ldr	r5, [pc, #24]	; (800cc58 <_isatty_r+0x1c>)
 800cc40:	2300      	movs	r3, #0
 800cc42:	4604      	mov	r4, r0
 800cc44:	4608      	mov	r0, r1
 800cc46:	602b      	str	r3, [r5, #0]
 800cc48:	f000 f844 	bl	800ccd4 <_isatty>
 800cc4c:	1c43      	adds	r3, r0, #1
 800cc4e:	d102      	bne.n	800cc56 <_isatty_r+0x1a>
 800cc50:	682b      	ldr	r3, [r5, #0]
 800cc52:	b103      	cbz	r3, 800cc56 <_isatty_r+0x1a>
 800cc54:	6023      	str	r3, [r4, #0]
 800cc56:	bd38      	pop	{r3, r4, r5, pc}
 800cc58:	20009f44 	.word	0x20009f44

0800cc5c <_lseek_r>:
 800cc5c:	b538      	push	{r3, r4, r5, lr}
 800cc5e:	4d07      	ldr	r5, [pc, #28]	; (800cc7c <_lseek_r+0x20>)
 800cc60:	4604      	mov	r4, r0
 800cc62:	4608      	mov	r0, r1
 800cc64:	4611      	mov	r1, r2
 800cc66:	2200      	movs	r2, #0
 800cc68:	602a      	str	r2, [r5, #0]
 800cc6a:	461a      	mov	r2, r3
 800cc6c:	f000 f842 	bl	800ccf4 <_lseek>
 800cc70:	1c43      	adds	r3, r0, #1
 800cc72:	d102      	bne.n	800cc7a <_lseek_r+0x1e>
 800cc74:	682b      	ldr	r3, [r5, #0]
 800cc76:	b103      	cbz	r3, 800cc7a <_lseek_r+0x1e>
 800cc78:	6023      	str	r3, [r4, #0]
 800cc7a:	bd38      	pop	{r3, r4, r5, pc}
 800cc7c:	20009f44 	.word	0x20009f44

0800cc80 <_read_r>:
 800cc80:	b538      	push	{r3, r4, r5, lr}
 800cc82:	4d07      	ldr	r5, [pc, #28]	; (800cca0 <_read_r+0x20>)
 800cc84:	4604      	mov	r4, r0
 800cc86:	4608      	mov	r0, r1
 800cc88:	4611      	mov	r1, r2
 800cc8a:	2200      	movs	r2, #0
 800cc8c:	602a      	str	r2, [r5, #0]
 800cc8e:	461a      	mov	r2, r3
 800cc90:	f000 f838 	bl	800cd04 <_read>
 800cc94:	1c43      	adds	r3, r0, #1
 800cc96:	d102      	bne.n	800cc9e <_read_r+0x1e>
 800cc98:	682b      	ldr	r3, [r5, #0]
 800cc9a:	b103      	cbz	r3, 800cc9e <_read_r+0x1e>
 800cc9c:	6023      	str	r3, [r4, #0]
 800cc9e:	bd38      	pop	{r3, r4, r5, pc}
 800cca0:	20009f44 	.word	0x20009f44

0800cca4 <_close>:
 800cca4:	4b02      	ldr	r3, [pc, #8]	; (800ccb0 <_close+0xc>)
 800cca6:	2258      	movs	r2, #88	; 0x58
 800cca8:	601a      	str	r2, [r3, #0]
 800ccaa:	f04f 30ff 	mov.w	r0, #4294967295
 800ccae:	4770      	bx	lr
 800ccb0:	20009f44 	.word	0x20009f44

0800ccb4 <_fstat>:
 800ccb4:	4b02      	ldr	r3, [pc, #8]	; (800ccc0 <_fstat+0xc>)
 800ccb6:	2258      	movs	r2, #88	; 0x58
 800ccb8:	601a      	str	r2, [r3, #0]
 800ccba:	f04f 30ff 	mov.w	r0, #4294967295
 800ccbe:	4770      	bx	lr
 800ccc0:	20009f44 	.word	0x20009f44

0800ccc4 <_getpid>:
 800ccc4:	4b02      	ldr	r3, [pc, #8]	; (800ccd0 <_getpid+0xc>)
 800ccc6:	2258      	movs	r2, #88	; 0x58
 800ccc8:	601a      	str	r2, [r3, #0]
 800ccca:	f04f 30ff 	mov.w	r0, #4294967295
 800ccce:	4770      	bx	lr
 800ccd0:	20009f44 	.word	0x20009f44

0800ccd4 <_isatty>:
 800ccd4:	4b02      	ldr	r3, [pc, #8]	; (800cce0 <_isatty+0xc>)
 800ccd6:	2258      	movs	r2, #88	; 0x58
 800ccd8:	601a      	str	r2, [r3, #0]
 800ccda:	2000      	movs	r0, #0
 800ccdc:	4770      	bx	lr
 800ccde:	bf00      	nop
 800cce0:	20009f44 	.word	0x20009f44

0800cce4 <_kill>:
 800cce4:	4b02      	ldr	r3, [pc, #8]	; (800ccf0 <_kill+0xc>)
 800cce6:	2258      	movs	r2, #88	; 0x58
 800cce8:	601a      	str	r2, [r3, #0]
 800ccea:	f04f 30ff 	mov.w	r0, #4294967295
 800ccee:	4770      	bx	lr
 800ccf0:	20009f44 	.word	0x20009f44

0800ccf4 <_lseek>:
 800ccf4:	4b02      	ldr	r3, [pc, #8]	; (800cd00 <_lseek+0xc>)
 800ccf6:	2258      	movs	r2, #88	; 0x58
 800ccf8:	601a      	str	r2, [r3, #0]
 800ccfa:	f04f 30ff 	mov.w	r0, #4294967295
 800ccfe:	4770      	bx	lr
 800cd00:	20009f44 	.word	0x20009f44

0800cd04 <_read>:
 800cd04:	4b02      	ldr	r3, [pc, #8]	; (800cd10 <_read+0xc>)
 800cd06:	2258      	movs	r2, #88	; 0x58
 800cd08:	601a      	str	r2, [r3, #0]
 800cd0a:	f04f 30ff 	mov.w	r0, #4294967295
 800cd0e:	4770      	bx	lr
 800cd10:	20009f44 	.word	0x20009f44

0800cd14 <_sbrk>:
 800cd14:	4b04      	ldr	r3, [pc, #16]	; (800cd28 <_sbrk+0x14>)
 800cd16:	6819      	ldr	r1, [r3, #0]
 800cd18:	4602      	mov	r2, r0
 800cd1a:	b909      	cbnz	r1, 800cd20 <_sbrk+0xc>
 800cd1c:	4903      	ldr	r1, [pc, #12]	; (800cd2c <_sbrk+0x18>)
 800cd1e:	6019      	str	r1, [r3, #0]
 800cd20:	6818      	ldr	r0, [r3, #0]
 800cd22:	4402      	add	r2, r0
 800cd24:	601a      	str	r2, [r3, #0]
 800cd26:	4770      	bx	lr
 800cd28:	2000986c 	.word	0x2000986c
 800cd2c:	20009f48 	.word	0x20009f48

0800cd30 <_write>:
 800cd30:	4b02      	ldr	r3, [pc, #8]	; (800cd3c <_write+0xc>)
 800cd32:	2258      	movs	r2, #88	; 0x58
 800cd34:	601a      	str	r2, [r3, #0]
 800cd36:	f04f 30ff 	mov.w	r0, #4294967295
 800cd3a:	4770      	bx	lr
 800cd3c:	20009f44 	.word	0x20009f44

0800cd40 <_exit>:
 800cd40:	e7fe      	b.n	800cd40 <_exit>
	...

0800cd44 <_init>:
 800cd44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd46:	bf00      	nop
 800cd48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd4a:	bc08      	pop	{r3}
 800cd4c:	469e      	mov	lr, r3
 800cd4e:	4770      	bx	lr

0800cd50 <_fini>:
 800cd50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd52:	bf00      	nop
 800cd54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd56:	bc08      	pop	{r3}
 800cd58:	469e      	mov	lr, r3
 800cd5a:	4770      	bx	lr
